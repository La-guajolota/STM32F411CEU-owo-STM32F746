
TouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020c80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006248  08020e50  08020e50  00021e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00009642  08027098  08027098  00028098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 TextFlashSection 0000398e  080306dc  080306dc  000316dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0803406c  0803406c  0003506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000010  08034074  08034074  00035074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08034084  08034084  00035084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0803408c  00036000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002500c  200000c4  08034150  000360c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200250d0  08034150  000360d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00399e14  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 00362e14  90000000  90000000  00037000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .debug_line   00096eeb  00000000  00000000  00399e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000008a  00000000  00000000  00430d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0011149b  00000000  00000000  00430db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00025dcb  00000000  00000000  00542254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00005d90  00000000  00000000  00568020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016bb37  00000000  00000000  0056ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00007ebb  00000000  00000000  006d98e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0002c593  00000000  00000000  006e17a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00044cd2  00000000  00000000  0070dd35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000c2  00000000  00000000  00752a07  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e488  00000000  00000000  00752acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08020e38 	.word	0x08020e38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c8 	.word	0x200000c8
 800020c:	08020e38 	.word	0x08020e38

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005a6:	e003      	b.n	80005b0 <LoopCopyDataInit>

080005a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ae:	3104      	adds	r1, #4

080005b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005b0:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005b8:	d3f6      	bcc.n	80005a8 <CopyDataInit>
  ldr  r2, =_sbss
 80005ba:	4a0b      	ldr	r2, [pc, #44]	@ (80005e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005bc:	e002      	b.n	80005c4 <LoopFillZerobss>

080005be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005c0:	f842 3b04 	str.w	r3, [r2], #4

080005c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005c8:	d3f9      	bcc.n	80005be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ca:	f00c ff5f 	bl	800d48c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ce:	f01f fe73 	bl	80202b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005d2:	f000 f817 	bl	8000604 <main>
  bx  lr    
 80005d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005d8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80005dc:	0803408c 	.word	0x0803408c
  ldr  r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005e4:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 80005e8:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 80005ec:	200250d0 	.word	0x200250d0

080005f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC_IRQHandler>
	...

080005f4 <_ZL7GUITaskPv>:
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
    {
        return instance;
 80005f4:	4b02      	ldr	r3, [pc, #8]	@ (8000600 <_ZL7GUITaskPv+0xc>)
 80005f6:	6818      	ldr	r0, [r3, #0]

#define CANVAS_BUFFER_SIZE (5500)

static void GUITask(void* params)
{
    touchgfx::HAL::getInstance()->taskEntry();
 80005f8:	6803      	ldr	r3, [r0, #0]
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4718      	bx	r3
 80005fe:	bf00      	nop
 8000600:	20024e34 	.word	0x20024e34

08000604 <main>:
}


int main(void)
{
 8000604:	b507      	push	{r0, r1, r2, lr}
    hw_init();
 8000606:	f011 f8c5 	bl	8011794 <_ZN8touchgfx7hw_initEv>
    touchgfx_init();
 800060a:	f011 fb7d 	bl	8011d08 <_ZN8touchgfx13touchgfx_initEv>

    static uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
    CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800060e:	f241 517c 	movw	r1, #5500	@ 0x157c
 8000612:	4808      	ldr	r0, [pc, #32]	@ (8000634 <main+0x30>)
 8000614:	f018 f93c 	bl	8018890 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    xTaskCreate(GUITask, "GUITask",
 8000618:	2203      	movs	r2, #3
 800061a:	2300      	movs	r3, #0
 800061c:	4906      	ldr	r1, [pc, #24]	@ (8000638 <main+0x34>)
 800061e:	4807      	ldr	r0, [pc, #28]	@ (800063c <main+0x38>)
 8000620:	e9cd 2300 	strd	r2, r3, [sp]
 8000624:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000628:	f010 fb68 	bl	8010cfc <xTaskCreate>
                configGUI_TASK_STK_SIZE,
                NULL,
                configGUI_TASK_PRIORITY,
                NULL);

    vTaskStartScheduler();
 800062c:	f010 fd38 	bl	80110a0 <vTaskStartScheduler>

    for (;;);
 8000630:	e7fe      	b.n	8000630 <main+0x2c>
 8000632:	bf00      	nop
 8000634:	200000e0 	.word	0x200000e0
 8000638:	08022890 	.word	0x08022890
 800063c:	080005f5 	.word	0x080005f5

08000640 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8000640:	4601      	mov	r1, r0
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000642:	2200      	movs	r2, #0
 8000644:	2036      	movs	r0, #54	@ 0x36
{
 8000646:	b510      	push	{r4, lr}
 8000648:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800064a:	f00c ff93 	bl	800d574 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800064e:	2036      	movs	r0, #54	@ 0x36
 8000650:	f00c ffc2 	bl	800d5d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000654:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000656:	a901      	add	r1, sp, #4
 8000658:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800065a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800065c:	f042 0210 	orr.w	r2, r2, #16
 8000660:	641a      	str	r2, [r3, #64]	@ 0x40
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800066c:	f00e fef4 	bl	800f458 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000670:	9b06      	ldr	r3, [sp, #24]
 8000672:	b9cb      	cbnz	r3, 80006a8 <HAL_InitTick+0x68>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000674:	f00e fee0 	bl	800f438 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8000678:	4c0f      	ldr	r4, [pc, #60]	@ (80006b8 <HAL_InitTick+0x78>)
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <HAL_InitTick+0x7c>)
 800067c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800067e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000682:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <HAL_InitTick+0x80>)
 8000686:	fbb0 f0f3 	udiv	r0, r0, r3
 800068a:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 800068c:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800068e:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000690:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8000692:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	60a3      	str	r3, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000696:	61a3      	str	r3, [r4, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000698:	f00f fb72 	bl	800fd80 <HAL_TIM_Base_Init>
 800069c:	b940      	cbnz	r0, 80006b0 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800069e:	4620      	mov	r0, r4
 80006a0:	f00f fa16 	bl	800fad0 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80006a4:	b008      	add	sp, #32
 80006a6:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80006a8:	f00e fec6 	bl	800f438 <HAL_RCC_GetPCLK1Freq>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	e7e3      	b.n	8000678 <HAL_InitTick+0x38>
  return HAL_ERROR;
 80006b0:	2001      	movs	r0, #1
 80006b2:	e7f7      	b.n	80006a4 <HAL_InitTick+0x64>
 80006b4:	40023800 	.word	0x40023800
 80006b8:	20001660 	.word	0x20001660
 80006bc:	40001000 	.word	0x40001000
 80006c0:	000f4240 	.word	0x000f4240

080006c4 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 80006c4:	f00c bf20 	b.w	800d508 <HAL_IncTick>

080006c8 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 80006c8:	4801      	ldr	r0, [pc, #4]	@ (80006d0 <TIM6_DAC_IRQHandler+0x8>)
 80006ca:	f00f ba43 	b.w	800fb54 <HAL_TIM_IRQHandler>
 80006ce:	bf00      	nop
 80006d0:	20001660 	.word	0x20001660

080006d4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80006d4:	4770      	bx	lr

080006d6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler>

080006d8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler>

080006da <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006da:	e7fe      	b.n	80006da <BusFault_Handler>

080006dc <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler>

080006de <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 80006e0:	f00f bc0b 	b.w	800fefa <osSystickHandler>

080006e4 <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hdma2d);
 80006e4:	4801      	ldr	r0, [pc, #4]	@ (80006ec <DMA2D_IRQHandler+0x8>)
 80006e6:	f00d ba19 	b.w	800db1c <HAL_DMA2D_IRQHandler>
 80006ea:	bf00      	nop
 80006ec:	20022824 	.word	0x20022824

080006f0 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc);
 80006f0:	4801      	ldr	r0, [pc, #4]	@ (80006f8 <LTDC_IRQHandler+0x8>)
 80006f2:	f00e b80b 	b.w	800e70c <HAL_LTDC_IRQHandler>
 80006f6:	bf00      	nop
 80006f8:	20021cc4 	.word	0x20021cc4

080006fc <LTDC_ER_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_ER_IRQHandler(void)
{
  if (LTDC->ISR & 2)
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <LTDC_ER_IRQHandler+0x18>)
 80006fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000700:	0792      	lsls	r2, r2, #30
 8000702:	d505      	bpl.n	8000710 <LTDC_ER_IRQHandler+0x14>
  {
    LTDC->ICR = 2;
 8000704:	2202      	movs	r2, #2
 8000706:	63da      	str	r2, [r3, #60]	@ 0x3c
    overrunCnt++;
 8000708:	4a03      	ldr	r2, [pc, #12]	@ (8000718 <LTDC_ER_IRQHandler+0x1c>)
 800070a:	6813      	ldr	r3, [r2, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	6013      	str	r3, [r2, #0]
  }
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40016800 	.word	0x40016800
 8000718:	200016ac 	.word	0x200016ac

0800071c <_ZN23ApplicationFontProviderD1Ev>:
  static const touchgfx::FontId GRAPH_Y_VALUE = 16;
  static const touchgfx::FontId GRAPH_LEGEND = 17;
  static const touchgfx::FontId GRAPH_LEGEND_VALUE = 18;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800071c:	4770      	bx	lr

0800071e <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_Asap_Regular_12_4bpp();
extern touchgfx::InternalFlashFont& getFont_Asap_Bold_otf_12_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
  switch(fontId)
 800071e:	2912      	cmp	r1, #18
 8000720:	d823      	bhi.n	800076a <_ZN23ApplicationFontProvider7getFontEt+0x4c>
 8000722:	e8df f001 	tbb	[pc, r1]
 8000726:	0c0a      	.short	0x0c0a
 8000728:	12100e0a 	.word	0x12100e0a
 800072c:	1a181614 	.word	0x1a181614
 8000730:	201e1c0a 	.word	0x201e1c0a
 8000734:	0a1e1e1a 	.word	0x0a1e1e1a
 8000738:	18          	.byte	0x18
 8000739:	00          	.byte	0x00
  {
    
    case Typography::DEMOVIEW_MCULOAD_TEXT:
      return &(getFont_Asap_Regular_12_4bpp());
 800073a:	f000 b93f 	b.w	80009bc <_Z28getFont_Asap_Regular_12_4bppv>
    
    case Typography::DEMOVIEW_MCULOAD_TEXT_SMALL:
      return &(getFont_Asap_Regular_11_4bpp());
 800073e:	f000 b905 	b.w	800094c <_Z28getFont_Asap_Regular_11_4bppv>
    
    case Typography::POSTERTEXT:
      return &(getFont_Asap_Regular_12_4bpp());
    
    case Typography::POSTERHEADLINE:
      return &(getFont_Asap_Regular_18_4bpp());
 8000742:	f000 b9af 	b.w	8000aa4 <_Z28getFont_Asap_Regular_18_4bppv>
    
    case Typography::POSTERTEXTJAPANESE:
      return &(getFont_ipaexg_12_4bpp());
 8000746:	f000 ba57 	b.w	8000bf8 <_Z22getFont_ipaexg_12_4bppv>
    
    case Typography::POSTERHEADLINEJAPANESE:
      return &(getFont_ipaexg_18_4bpp());
 800074a:	f000 ba8f 	b.w	8000c6c <_Z22getFont_ipaexg_18_4bppv>
    
    case Typography::POSTERTEXTUKR:
      return &(getFont_NotoSans_Regular_12_4bpp());
 800074e:	f000 b9e1 	b.w	8000b14 <_Z32getFont_NotoSans_Regular_12_4bppv>
    
    case Typography::POSTERHEADLINEUKR:
      return &(getFont_NotoSans_Regular_18_4bpp());
 8000752:	f000 ba19 	b.w	8000b88 <_Z32getFont_NotoSans_Regular_18_4bppv>
    
    case Typography::THREEWAYPROGRESSBARPERCENTAGE:
      return &(getFont_Asap_Bold_otf_12_4bpp());
 8000756:	f000 b81d 	b.w	8000794 <_Z29getFont_Asap_Bold_otf_12_4bppv>
    
    case Typography::THREEWAYPROGRESSBARBUTTON:
      return &(getFont_Asap_Bold_otf_18_4bpp());
 800075a:	f000 b889 	b.w	8000870 <_Z29getFont_Asap_Bold_otf_18_4bppv>
    
    case Typography::CUSTOMCONTROLSSTATUS:
      return &(getFont_Asap_Regular_12_4bpp());
    
    case Typography::PERCENTAGEBARREADOUT:
      return &(getFont_Asap_Bold_otf_46_4bpp());
 800075e:	f000 b8bf 	b.w	80008e0 <_Z29getFont_Asap_Bold_otf_46_4bppv>
    
    case Typography::PERCENTAGEBARHEADLINE:
      return &(getFont_Asap_Regular_15_4bpp());
 8000762:	f000 b965 	b.w	8000a30 <_Z28getFont_Asap_Regular_15_4bppv>
    
    case Typography::DATEPICKER:
      return &(getFont_Asap_Bold_otf_15_4bpp());
 8000766:	f000 b84b 	b.w	8000800 <_Z29getFont_Asap_Bold_otf_15_4bppv>
      return &(getFont_Asap_Bold_otf_12_4bpp());
    
    default:
      return 0;
  }
}
 800076a:	2000      	movs	r0, #0
 800076c:	4770      	bx	lr

0800076e <_ZN23ApplicationFontProviderD0Ev>:
 800076e:	b510      	push	{r4, lr}
 8000770:	4604      	mov	r4, r0
 8000772:	2104      	movs	r1, #4
 8000774:	f01e f9d7 	bl	801eb26 <_ZdlPvj>
 8000778:	4620      	mov	r0, r4
 800077a:	bd10      	pop	{r4, pc}

0800077c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_otf_12_4bpp[];
touchgfx::InternalFlashFont& getFont_Asap_Bold_otf_12_4bpp();

touchgfx::InternalFlashFont& getFont_Asap_Bold_otf_12_4bpp()
{
  static touchgfx::InternalFlashFont Asap_Bold_otf_12_4bpp(glyphs_Asap_Bold_otf_12_4bpp, 15, 12, 2, 4, 1, 1, unicodes_Asap_Bold_otf_12_4bpp, kerning_Asap_Bold_otf_12_4bpp, 0, 0);
 800077c:	4770      	bx	lr

0800077e <__tcf_11>:
extern const touchgfx::KerningNode kerning_ipaexg_18_4bpp[];
touchgfx::InternalFlashFont& getFont_ipaexg_18_4bpp();

touchgfx::InternalFlashFont& getFont_ipaexg_18_4bpp()
{
  static touchgfx::InternalFlashFont ipaexg_18_4bpp(glyphs_ipaexg_18_4bpp, 27, 18, 2, 4, 1, 0, unicodes_ipaexg_18_4bpp, kerning_ipaexg_18_4bpp, 0, 0);
 800077e:	4770      	bx	lr

08000780 <__tcf_1>:
  static touchgfx::InternalFlashFont Asap_Bold_otf_15_4bpp(glyphs_Asap_Bold_otf_15_4bpp, 37, 15, 3, 4, 1, 1, unicodes_Asap_Bold_otf_15_4bpp, kerning_Asap_Bold_otf_15_4bpp, 0, 0);
 8000780:	4770      	bx	lr

08000782 <__tcf_2>:
  static touchgfx::InternalFlashFont Asap_Bold_otf_18_4bpp(glyphs_Asap_Bold_otf_18_4bpp, 29, 18, 4, 4, 1, 1, unicodes_Asap_Bold_otf_18_4bpp, kerning_Asap_Bold_otf_18_4bpp, 0, 0);
 8000782:	4770      	bx	lr

08000784 <__tcf_3>:
  static touchgfx::InternalFlashFont Asap_Bold_otf_46_4bpp(glyphs_Asap_Bold_otf_46_4bpp, 11, 46, 0, 4, 0, 0, unicodes_Asap_Bold_otf_46_4bpp, kerning_Asap_Bold_otf_46_4bpp, 0, 0);
 8000784:	4770      	bx	lr

08000786 <__tcf_4>:
  static touchgfx::InternalFlashFont Asap_Regular_11_4bpp(glyphs_Asap_Regular_11_4bpp, 20, 11, 0, 4, 0, 1, unicodes_Asap_Regular_11_4bpp, kerning_Asap_Regular_11_4bpp, 0, 0);
 8000786:	4770      	bx	lr

08000788 <__tcf_5>:
  static touchgfx::InternalFlashFont Asap_Regular_12_4bpp(glyphs_Asap_Regular_12_4bpp, 71, 12, 2, 4, 1, 1, unicodes_Asap_Regular_12_4bpp, kerning_Asap_Regular_12_4bpp, 0, 0);
 8000788:	4770      	bx	lr

0800078a <__tcf_6>:
  static touchgfx::InternalFlashFont Asap_Regular_15_4bpp(glyphs_Asap_Regular_15_4bpp, 42, 15, 3, 4, 1, 1, unicodes_Asap_Regular_15_4bpp, kerning_Asap_Regular_15_4bpp, 0, 0);
 800078a:	4770      	bx	lr

0800078c <__tcf_7>:
  static touchgfx::InternalFlashFont Asap_Regular_18_4bpp(glyphs_Asap_Regular_18_4bpp, 29, 18, 4, 4, 0, 1, unicodes_Asap_Regular_18_4bpp, kerning_Asap_Regular_18_4bpp, 0, 0);
 800078c:	4770      	bx	lr

0800078e <__tcf_8>:
  static touchgfx::InternalFlashFont NotoSans_Regular_12_4bpp(glyphs_NotoSans_Regular_12_4bpp, 75, 12, 3, 4, 1, 1, unicodes_NotoSans_Regular_12_4bpp, kerning_NotoSans_Regular_12_4bpp, 0, 0);
 800078e:	4770      	bx	lr

08000790 <__tcf_9>:
  static touchgfx::InternalFlashFont NotoSans_Regular_18_4bpp(glyphs_NotoSans_Regular_18_4bpp, 29, 18, 4, 4, 0, 0, unicodes_NotoSans_Regular_18_4bpp, kerning_NotoSans_Regular_18_4bpp, 0, 0);
 8000790:	4770      	bx	lr

08000792 <__tcf_10>:
  static touchgfx::InternalFlashFont ipaexg_12_4bpp(glyphs_ipaexg_12_4bpp, 197, 12, 2, 4, 1, 1, unicodes_ipaexg_12_4bpp, kerning_ipaexg_12_4bpp, 0, 0);
 8000792:	4770      	bx	lr

08000794 <_Z29getFont_Asap_Bold_otf_12_4bppv>:
{
 8000794:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont Asap_Bold_otf_12_4bpp(glyphs_Asap_Bold_otf_12_4bpp, 15, 12, 2, 4, 1, 1, unicodes_Asap_Bold_otf_12_4bpp, kerning_Asap_Bold_otf_12_4bpp, 0, 0);
 8000796:	4d14      	ldr	r5, [pc, #80]	@ (80007e8 <_Z29getFont_Asap_Bold_otf_12_4bppv+0x54>)
{
 8000798:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont Asap_Bold_otf_12_4bpp(glyphs_Asap_Bold_otf_12_4bpp, 15, 12, 2, 4, 1, 1, unicodes_Asap_Bold_otf_12_4bpp, kerning_Asap_Bold_otf_12_4bpp, 0, 0);
 800079a:	682c      	ldr	r4, [r5, #0]
 800079c:	f3bf 8f5b 	dmb	ish
 80007a0:	f014 0401 	ands.w	r4, r4, #1
 80007a4:	d11c      	bne.n	80007e0 <_Z29getFont_Asap_Bold_otf_12_4bppv+0x4c>
 80007a6:	4628      	mov	r0, r5
 80007a8:	f01e f9bf 	bl	801eb2a <__cxa_guard_acquire>
 80007ac:	b1c0      	cbz	r0, 80007e0 <_Z29getFont_Asap_Bold_otf_12_4bppv+0x4c>
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <_Z29getFont_Asap_Bold_otf_12_4bppv+0x58>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	490f      	ldr	r1, [pc, #60]	@ (80007f0 <_Z29getFont_Asap_Bold_otf_12_4bppv+0x5c>)
 80007b4:	1d28      	adds	r0, r5, #4
 80007b6:	9305      	str	r3, [sp, #20]
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <_Z29getFont_Asap_Bold_otf_12_4bppv+0x60>)
 80007ba:	9304      	str	r3, [sp, #16]
 80007bc:	2301      	movs	r3, #1
 80007be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80007c2:	2302      	movs	r3, #2
 80007c4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80007c8:	e9cd 3200 	strd	r3, r2, [sp]
 80007cc:	230c      	movs	r3, #12
 80007ce:	220f      	movs	r2, #15
 80007d0:	f01b f984 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <_Z29getFont_Asap_Bold_otf_12_4bppv+0x64>)
 80007d6:	f01f faeb 	bl	801fdb0 <atexit>
 80007da:	4628      	mov	r0, r5
 80007dc:	f01e f9b1 	bl	801eb42 <__cxa_guard_release>
}
 80007e0:	4806      	ldr	r0, [pc, #24]	@ (80007fc <_Z29getFont_Asap_Bold_otf_12_4bppv+0x68>)
 80007e2:	b009      	add	sp, #36	@ 0x24
 80007e4:	bd30      	pop	{r4, r5, pc}
 80007e6:	bf00      	nop
 80007e8:	200016b0 	.word	0x200016b0
 80007ec:	0802e6c4 	.word	0x0802e6c4
 80007f0:	0802e6f4 	.word	0x0802e6f4
 80007f4:	08027098 	.word	0x08027098
 80007f8:	0800077d 	.word	0x0800077d
 80007fc:	200016b4 	.word	0x200016b4

08000800 <_Z29getFont_Asap_Bold_otf_15_4bppv>:
{
 8000800:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont Asap_Bold_otf_15_4bpp(glyphs_Asap_Bold_otf_15_4bpp, 37, 15, 3, 4, 1, 1, unicodes_Asap_Bold_otf_15_4bpp, kerning_Asap_Bold_otf_15_4bpp, 0, 0);
 8000802:	4d15      	ldr	r5, [pc, #84]	@ (8000858 <_Z29getFont_Asap_Bold_otf_15_4bppv+0x58>)
{
 8000804:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont Asap_Bold_otf_15_4bpp(glyphs_Asap_Bold_otf_15_4bpp, 37, 15, 3, 4, 1, 1, unicodes_Asap_Bold_otf_15_4bpp, kerning_Asap_Bold_otf_15_4bpp, 0, 0);
 8000806:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8000808:	f3bf 8f5b 	dmb	ish
 800080c:	f014 0401 	ands.w	r4, r4, #1
 8000810:	d11f      	bne.n	8000852 <_Z29getFont_Asap_Bold_otf_15_4bppv+0x52>
 8000812:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8000816:	f01e f988 	bl	801eb2a <__cxa_guard_acquire>
 800081a:	b1d0      	cbz	r0, 8000852 <_Z29getFont_Asap_Bold_otf_15_4bppv+0x52>
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <_Z29getFont_Asap_Bold_otf_15_4bppv+0x5c>)
 800081e:	2204      	movs	r2, #4
 8000820:	490f      	ldr	r1, [pc, #60]	@ (8000860 <_Z29getFont_Asap_Bold_otf_15_4bppv+0x60>)
 8000822:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8000826:	9305      	str	r3, [sp, #20]
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <_Z29getFont_Asap_Bold_otf_15_4bppv+0x64>)
 800082a:	9304      	str	r3, [sp, #16]
 800082c:	2301      	movs	r3, #1
 800082e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000832:	2303      	movs	r3, #3
 8000834:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000838:	e9cd 3200 	strd	r3, r2, [sp]
 800083c:	230f      	movs	r3, #15
 800083e:	2225      	movs	r2, #37	@ 0x25
 8000840:	f01b f94c 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000844:	4808      	ldr	r0, [pc, #32]	@ (8000868 <_Z29getFont_Asap_Bold_otf_15_4bppv+0x68>)
 8000846:	f01f fab3 	bl	801fdb0 <atexit>
 800084a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800084e:	f01e f978 	bl	801eb42 <__cxa_guard_release>
}
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <_Z29getFont_Asap_Bold_otf_15_4bppv+0x6c>)
 8000854:	b009      	add	sp, #36	@ 0x24
 8000856:	bd30      	pop	{r4, r5, pc}
 8000858:	200016b0 	.word	0x200016b0
 800085c:	0802e6c8 	.word	0x0802e6c8
 8000860:	0802e7c8 	.word	0x0802e7c8
 8000864:	0802720c 	.word	0x0802720c
 8000868:	08000781 	.word	0x08000781
 800086c:	200016d8 	.word	0x200016d8

08000870 <_Z29getFont_Asap_Bold_otf_18_4bppv>:
{
 8000870:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont Asap_Bold_otf_18_4bpp(glyphs_Asap_Bold_otf_18_4bpp, 29, 18, 4, 4, 1, 1, unicodes_Asap_Bold_otf_18_4bpp, kerning_Asap_Bold_otf_18_4bpp, 0, 0);
 8000872:	4d15      	ldr	r5, [pc, #84]	@ (80008c8 <_Z29getFont_Asap_Bold_otf_18_4bppv+0x58>)
{
 8000874:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont Asap_Bold_otf_18_4bpp(glyphs_Asap_Bold_otf_18_4bpp, 29, 18, 4, 4, 1, 1, unicodes_Asap_Bold_otf_18_4bpp, kerning_Asap_Bold_otf_18_4bpp, 0, 0);
 8000876:	6cac      	ldr	r4, [r5, #72]	@ 0x48
 8000878:	f3bf 8f5b 	dmb	ish
 800087c:	f014 0401 	ands.w	r4, r4, #1
 8000880:	d11e      	bne.n	80008c0 <_Z29getFont_Asap_Bold_otf_18_4bppv+0x50>
 8000882:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8000886:	f01e f950 	bl	801eb2a <__cxa_guard_acquire>
 800088a:	b1c8      	cbz	r0, 80008c0 <_Z29getFont_Asap_Bold_otf_18_4bppv+0x50>
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <_Z29getFont_Asap_Bold_otf_18_4bppv+0x5c>)
 800088e:	221d      	movs	r2, #29
 8000890:	490f      	ldr	r1, [pc, #60]	@ (80008d0 <_Z29getFont_Asap_Bold_otf_18_4bppv+0x60>)
 8000892:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 8000896:	9305      	str	r3, [sp, #20]
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <_Z29getFont_Asap_Bold_otf_18_4bppv+0x64>)
 800089a:	9304      	str	r3, [sp, #16]
 800089c:	2301      	movs	r3, #1
 800089e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80008a2:	2304      	movs	r3, #4
 80008a4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80008a8:	e9cd 3300 	strd	r3, r3, [sp]
 80008ac:	2312      	movs	r3, #18
 80008ae:	f01b f915 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80008b2:	4809      	ldr	r0, [pc, #36]	@ (80008d8 <_Z29getFont_Asap_Bold_otf_18_4bppv+0x68>)
 80008b4:	f01f fa7c 	bl	801fdb0 <atexit>
 80008b8:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80008bc:	f01e f941 	bl	801eb42 <__cxa_guard_release>
}
 80008c0:	4806      	ldr	r0, [pc, #24]	@ (80008dc <_Z29getFont_Asap_Bold_otf_18_4bppv+0x6c>)
 80008c2:	b009      	add	sp, #36	@ 0x24
 80008c4:	bd30      	pop	{r4, r5, pc}
 80008c6:	bf00      	nop
 80008c8:	200016b0 	.word	0x200016b0
 80008cc:	0802e6cc 	.word	0x0802e6cc
 80008d0:	0802e9d0 	.word	0x0802e9d0
 80008d4:	08027814 	.word	0x08027814
 80008d8:	08000783 	.word	0x08000783
 80008dc:	200016fc 	.word	0x200016fc

080008e0 <_Z29getFont_Asap_Bold_otf_46_4bppv>:
{
 80008e0:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont Asap_Bold_otf_46_4bpp(glyphs_Asap_Bold_otf_46_4bpp, 11, 46, 0, 4, 0, 0, unicodes_Asap_Bold_otf_46_4bpp, kerning_Asap_Bold_otf_46_4bpp, 0, 0);
 80008e2:	4d14      	ldr	r5, [pc, #80]	@ (8000934 <_Z29getFont_Asap_Bold_otf_46_4bppv+0x54>)
{
 80008e4:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont Asap_Bold_otf_46_4bpp(glyphs_Asap_Bold_otf_46_4bpp, 11, 46, 0, 4, 0, 0, unicodes_Asap_Bold_otf_46_4bpp, kerning_Asap_Bold_otf_46_4bpp, 0, 0);
 80008e6:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
 80008e8:	f3bf 8f5b 	dmb	ish
 80008ec:	f014 0401 	ands.w	r4, r4, #1
 80008f0:	d11d      	bne.n	800092e <_Z29getFont_Asap_Bold_otf_46_4bppv+0x4e>
 80008f2:	f105 006c 	add.w	r0, r5, #108	@ 0x6c
 80008f6:	f01e f918 	bl	801eb2a <__cxa_guard_acquire>
 80008fa:	b1c0      	cbz	r0, 800092e <_Z29getFont_Asap_Bold_otf_46_4bppv+0x4e>
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <_Z29getFont_Asap_Bold_otf_46_4bppv+0x58>)
 80008fe:	220b      	movs	r2, #11
 8000900:	490e      	ldr	r1, [pc, #56]	@ (800093c <_Z29getFont_Asap_Bold_otf_46_4bppv+0x5c>)
 8000902:	f105 0070 	add.w	r0, r5, #112	@ 0x70
 8000906:	9305      	str	r3, [sp, #20]
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <_Z29getFont_Asap_Bold_otf_46_4bppv+0x60>)
 800090a:	9402      	str	r4, [sp, #8]
 800090c:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8000910:	2304      	movs	r3, #4
 8000912:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000916:	e9cd 4300 	strd	r4, r3, [sp]
 800091a:	232e      	movs	r3, #46	@ 0x2e
 800091c:	f01b f8de 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000920:	4808      	ldr	r0, [pc, #32]	@ (8000944 <_Z29getFont_Asap_Bold_otf_46_4bppv+0x64>)
 8000922:	f01f fa45 	bl	801fdb0 <atexit>
 8000926:	f105 006c 	add.w	r0, r5, #108	@ 0x6c
 800092a:	f01e f90a 	bl	801eb42 <__cxa_guard_release>
}
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <_Z29getFont_Asap_Bold_otf_46_4bppv+0x68>)
 8000930:	b009      	add	sp, #36	@ 0x24
 8000932:	bd30      	pop	{r4, r5, pc}
 8000934:	200016b0 	.word	0x200016b0
 8000938:	0802e6d0 	.word	0x0802e6d0
 800093c:	0802eb68 	.word	0x0802eb68
 8000940:	08027e7c 	.word	0x08027e7c
 8000944:	08000785 	.word	0x08000785
 8000948:	20001720 	.word	0x20001720

0800094c <_Z28getFont_Asap_Regular_11_4bppv>:
{
 800094c:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont Asap_Regular_11_4bpp(glyphs_Asap_Regular_11_4bpp, 20, 11, 0, 4, 0, 1, unicodes_Asap_Regular_11_4bpp, kerning_Asap_Regular_11_4bpp, 0, 0);
 800094e:	4d15      	ldr	r5, [pc, #84]	@ (80009a4 <_Z28getFont_Asap_Regular_11_4bppv+0x58>)
{
 8000950:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont Asap_Regular_11_4bpp(glyphs_Asap_Regular_11_4bpp, 20, 11, 0, 4, 0, 1, unicodes_Asap_Regular_11_4bpp, kerning_Asap_Regular_11_4bpp, 0, 0);
 8000952:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 8000956:	f3bf 8f5b 	dmb	ish
 800095a:	f014 0401 	ands.w	r4, r4, #1
 800095e:	d11e      	bne.n	800099e <_Z28getFont_Asap_Regular_11_4bppv+0x52>
 8000960:	f105 0090 	add.w	r0, r5, #144	@ 0x90
 8000964:	f01e f8e1 	bl	801eb2a <__cxa_guard_acquire>
 8000968:	b1c8      	cbz	r0, 800099e <_Z28getFont_Asap_Regular_11_4bppv+0x52>
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <_Z28getFont_Asap_Regular_11_4bppv+0x5c>)
 800096c:	2214      	movs	r2, #20
 800096e:	490f      	ldr	r1, [pc, #60]	@ (80009ac <_Z28getFont_Asap_Regular_11_4bppv+0x60>)
 8000970:	f105 0094 	add.w	r0, r5, #148	@ 0x94
 8000974:	9305      	str	r3, [sp, #20]
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <_Z28getFont_Asap_Regular_11_4bppv+0x64>)
 8000978:	9304      	str	r3, [sp, #16]
 800097a:	2301      	movs	r3, #1
 800097c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8000980:	2304      	movs	r3, #4
 8000982:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000986:	e9cd 4300 	strd	r4, r3, [sp]
 800098a:	230b      	movs	r3, #11
 800098c:	f01b f8a6 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000990:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <_Z28getFont_Asap_Regular_11_4bppv+0x68>)
 8000992:	f01f fa0d 	bl	801fdb0 <atexit>
 8000996:	f105 0090 	add.w	r0, r5, #144	@ 0x90
 800099a:	f01e f8d2 	bl	801eb42 <__cxa_guard_release>
}
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <_Z28getFont_Asap_Regular_11_4bppv+0x6c>)
 80009a0:	b009      	add	sp, #36	@ 0x24
 80009a2:	bd30      	pop	{r4, r5, pc}
 80009a4:	200016b0 	.word	0x200016b0
 80009a8:	0802e6d4 	.word	0x0802e6d4
 80009ac:	0802ec04 	.word	0x0802ec04
 80009b0:	08028f60 	.word	0x08028f60
 80009b4:	08000787 	.word	0x08000787
 80009b8:	20001744 	.word	0x20001744

080009bc <_Z28getFont_Asap_Regular_12_4bppv>:
{
 80009bc:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont Asap_Regular_12_4bpp(glyphs_Asap_Regular_12_4bpp, 71, 12, 2, 4, 1, 1, unicodes_Asap_Regular_12_4bpp, kerning_Asap_Regular_12_4bpp, 0, 0);
 80009be:	4d16      	ldr	r5, [pc, #88]	@ (8000a18 <_Z28getFont_Asap_Regular_12_4bppv+0x5c>)
{
 80009c0:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont Asap_Regular_12_4bpp(glyphs_Asap_Regular_12_4bpp, 71, 12, 2, 4, 1, 1, unicodes_Asap_Regular_12_4bpp, kerning_Asap_Regular_12_4bpp, 0, 0);
 80009c2:	f8d5 40b4 	ldr.w	r4, [r5, #180]	@ 0xb4
 80009c6:	f3bf 8f5b 	dmb	ish
 80009ca:	f014 0401 	ands.w	r4, r4, #1
 80009ce:	d11f      	bne.n	8000a10 <_Z28getFont_Asap_Regular_12_4bppv+0x54>
 80009d0:	f105 00b4 	add.w	r0, r5, #180	@ 0xb4
 80009d4:	f01e f8a9 	bl	801eb2a <__cxa_guard_acquire>
 80009d8:	b1d0      	cbz	r0, 8000a10 <_Z28getFont_Asap_Regular_12_4bppv+0x54>
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <_Z28getFont_Asap_Regular_12_4bppv+0x60>)
 80009dc:	2204      	movs	r2, #4
 80009de:	4910      	ldr	r1, [pc, #64]	@ (8000a20 <_Z28getFont_Asap_Regular_12_4bppv+0x64>)
 80009e0:	f105 00b8 	add.w	r0, r5, #184	@ 0xb8
 80009e4:	9305      	str	r3, [sp, #20]
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <_Z28getFont_Asap_Regular_12_4bppv+0x68>)
 80009e8:	9304      	str	r3, [sp, #16]
 80009ea:	2301      	movs	r3, #1
 80009ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80009f0:	2302      	movs	r3, #2
 80009f2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80009f6:	e9cd 3200 	strd	r3, r2, [sp]
 80009fa:	230c      	movs	r3, #12
 80009fc:	2247      	movs	r2, #71	@ 0x47
 80009fe:	f01b f86d 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000a02:	4809      	ldr	r0, [pc, #36]	@ (8000a28 <_Z28getFont_Asap_Regular_12_4bppv+0x6c>)
 8000a04:	f01f f9d4 	bl	801fdb0 <atexit>
 8000a08:	f105 00b4 	add.w	r0, r5, #180	@ 0xb4
 8000a0c:	f01e f899 	bl	801eb42 <__cxa_guard_release>
}
 8000a10:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <_Z28getFont_Asap_Regular_12_4bppv+0x70>)
 8000a12:	b009      	add	sp, #36	@ 0x24
 8000a14:	bd30      	pop	{r4, r5, pc}
 8000a16:	bf00      	nop
 8000a18:	200016b0 	.word	0x200016b0
 8000a1c:	0802e6d8 	.word	0x0802e6d8
 8000a20:	0802ed1c 	.word	0x0802ed1c
 8000a24:	08029130 	.word	0x08029130
 8000a28:	08000789 	.word	0x08000789
 8000a2c:	20001768 	.word	0x20001768

08000a30 <_Z28getFont_Asap_Regular_15_4bppv>:
{
 8000a30:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont Asap_Regular_15_4bpp(glyphs_Asap_Regular_15_4bpp, 42, 15, 3, 4, 1, 1, unicodes_Asap_Regular_15_4bpp, kerning_Asap_Regular_15_4bpp, 0, 0);
 8000a32:	4d16      	ldr	r5, [pc, #88]	@ (8000a8c <_Z28getFont_Asap_Regular_15_4bppv+0x5c>)
{
 8000a34:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont Asap_Regular_15_4bpp(glyphs_Asap_Regular_15_4bpp, 42, 15, 3, 4, 1, 1, unicodes_Asap_Regular_15_4bpp, kerning_Asap_Regular_15_4bpp, 0, 0);
 8000a36:	f8d5 40d8 	ldr.w	r4, [r5, #216]	@ 0xd8
 8000a3a:	f3bf 8f5b 	dmb	ish
 8000a3e:	f014 0401 	ands.w	r4, r4, #1
 8000a42:	d11f      	bne.n	8000a84 <_Z28getFont_Asap_Regular_15_4bppv+0x54>
 8000a44:	f105 00d8 	add.w	r0, r5, #216	@ 0xd8
 8000a48:	f01e f86f 	bl	801eb2a <__cxa_guard_acquire>
 8000a4c:	b1d0      	cbz	r0, 8000a84 <_Z28getFont_Asap_Regular_15_4bppv+0x54>
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <_Z28getFont_Asap_Regular_15_4bppv+0x60>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	4910      	ldr	r1, [pc, #64]	@ (8000a94 <_Z28getFont_Asap_Regular_15_4bppv+0x64>)
 8000a54:	f105 00dc 	add.w	r0, r5, #220	@ 0xdc
 8000a58:	9305      	str	r3, [sp, #20]
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <_Z28getFont_Asap_Regular_15_4bppv+0x68>)
 8000a5c:	9304      	str	r3, [sp, #16]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000a64:	2303      	movs	r3, #3
 8000a66:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000a6a:	e9cd 3200 	strd	r3, r2, [sp]
 8000a6e:	230f      	movs	r3, #15
 8000a70:	222a      	movs	r2, #42	@ 0x2a
 8000a72:	f01b f833 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000a76:	4809      	ldr	r0, [pc, #36]	@ (8000a9c <_Z28getFont_Asap_Regular_15_4bppv+0x6c>)
 8000a78:	f01f f99a 	bl	801fdb0 <atexit>
 8000a7c:	f105 00d8 	add.w	r0, r5, #216	@ 0xd8
 8000a80:	f01e f85f 	bl	801eb42 <__cxa_guard_release>
}
 8000a84:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <_Z28getFont_Asap_Regular_15_4bppv+0x70>)
 8000a86:	b009      	add	sp, #36	@ 0x24
 8000a88:	bd30      	pop	{r4, r5, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200016b0 	.word	0x200016b0
 8000a90:	0802e6dc 	.word	0x0802e6dc
 8000a94:	0802f100 	.word	0x0802f100
 8000a98:	08029784 	.word	0x08029784
 8000a9c:	0800078b 	.word	0x0800078b
 8000aa0:	2000178c 	.word	0x2000178c

08000aa4 <_Z28getFont_Asap_Regular_18_4bppv>:
{
 8000aa4:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont Asap_Regular_18_4bpp(glyphs_Asap_Regular_18_4bpp, 29, 18, 4, 4, 0, 1, unicodes_Asap_Regular_18_4bpp, kerning_Asap_Regular_18_4bpp, 0, 0);
 8000aa6:	4d15      	ldr	r5, [pc, #84]	@ (8000afc <_Z28getFont_Asap_Regular_18_4bppv+0x58>)
{
 8000aa8:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont Asap_Regular_18_4bpp(glyphs_Asap_Regular_18_4bpp, 29, 18, 4, 4, 0, 1, unicodes_Asap_Regular_18_4bpp, kerning_Asap_Regular_18_4bpp, 0, 0);
 8000aaa:	f8d5 40fc 	ldr.w	r4, [r5, #252]	@ 0xfc
 8000aae:	f3bf 8f5b 	dmb	ish
 8000ab2:	f014 0401 	ands.w	r4, r4, #1
 8000ab6:	d11e      	bne.n	8000af6 <_Z28getFont_Asap_Regular_18_4bppv+0x52>
 8000ab8:	f105 00fc 	add.w	r0, r5, #252	@ 0xfc
 8000abc:	f01e f835 	bl	801eb2a <__cxa_guard_acquire>
 8000ac0:	b1c8      	cbz	r0, 8000af6 <_Z28getFont_Asap_Regular_18_4bppv+0x52>
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <_Z28getFont_Asap_Regular_18_4bppv+0x5c>)
 8000ac4:	221d      	movs	r2, #29
 8000ac6:	490f      	ldr	r1, [pc, #60]	@ (8000b04 <_Z28getFont_Asap_Regular_18_4bppv+0x60>)
 8000ac8:	f505 7080 	add.w	r0, r5, #256	@ 0x100
 8000acc:	9305      	str	r3, [sp, #20]
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <_Z28getFont_Asap_Regular_18_4bppv+0x64>)
 8000ad0:	9304      	str	r3, [sp, #16]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8000ad8:	2304      	movs	r3, #4
 8000ada:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000ade:	e9cd 3300 	strd	r3, r3, [sp]
 8000ae2:	2312      	movs	r3, #18
 8000ae4:	f01a fffa 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000ae8:	4808      	ldr	r0, [pc, #32]	@ (8000b0c <_Z28getFont_Asap_Regular_18_4bppv+0x68>)
 8000aea:	f01f f961 	bl	801fdb0 <atexit>
 8000aee:	f105 00fc 	add.w	r0, r5, #252	@ 0xfc
 8000af2:	f01e f826 	bl	801eb42 <__cxa_guard_release>
}
 8000af6:	4806      	ldr	r0, [pc, #24]	@ (8000b10 <_Z28getFont_Asap_Regular_18_4bppv+0x6c>)
 8000af8:	b009      	add	sp, #36	@ 0x24
 8000afa:	bd30      	pop	{r4, r5, pc}
 8000afc:	200016b0 	.word	0x200016b0
 8000b00:	0802e6e0 	.word	0x0802e6e0
 8000b04:	0802f34c 	.word	0x0802f34c
 8000b08:	08029dc4 	.word	0x08029dc4
 8000b0c:	0800078d 	.word	0x0800078d
 8000b10:	200017b0 	.word	0x200017b0

08000b14 <_Z32getFont_NotoSans_Regular_12_4bppv>:
{
 8000b14:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont NotoSans_Regular_12_4bpp(glyphs_NotoSans_Regular_12_4bpp, 75, 12, 3, 4, 1, 1, unicodes_NotoSans_Regular_12_4bpp, kerning_NotoSans_Regular_12_4bpp, 0, 0);
 8000b16:	4d16      	ldr	r5, [pc, #88]	@ (8000b70 <_Z32getFont_NotoSans_Regular_12_4bppv+0x5c>)
{
 8000b18:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont NotoSans_Regular_12_4bpp(glyphs_NotoSans_Regular_12_4bpp, 75, 12, 3, 4, 1, 1, unicodes_NotoSans_Regular_12_4bpp, kerning_NotoSans_Regular_12_4bpp, 0, 0);
 8000b1a:	f8d5 4120 	ldr.w	r4, [r5, #288]	@ 0x120
 8000b1e:	f3bf 8f5b 	dmb	ish
 8000b22:	f014 0401 	ands.w	r4, r4, #1
 8000b26:	d11f      	bne.n	8000b68 <_Z32getFont_NotoSans_Regular_12_4bppv+0x54>
 8000b28:	f505 7090 	add.w	r0, r5, #288	@ 0x120
 8000b2c:	f01d fffd 	bl	801eb2a <__cxa_guard_acquire>
 8000b30:	b1d0      	cbz	r0, 8000b68 <_Z32getFont_NotoSans_Regular_12_4bppv+0x54>
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_Z32getFont_NotoSans_Regular_12_4bppv+0x60>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	4910      	ldr	r1, [pc, #64]	@ (8000b78 <_Z32getFont_NotoSans_Regular_12_4bppv+0x64>)
 8000b38:	f505 7092 	add.w	r0, r5, #292	@ 0x124
 8000b3c:	9305      	str	r3, [sp, #20]
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <_Z32getFont_NotoSans_Regular_12_4bppv+0x68>)
 8000b40:	9304      	str	r3, [sp, #16]
 8000b42:	2301      	movs	r3, #1
 8000b44:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000b4e:	e9cd 3200 	strd	r3, r2, [sp]
 8000b52:	230c      	movs	r3, #12
 8000b54:	224b      	movs	r2, #75	@ 0x4b
 8000b56:	f01a ffc1 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000b5a:	4809      	ldr	r0, [pc, #36]	@ (8000b80 <_Z32getFont_NotoSans_Regular_12_4bppv+0x6c>)
 8000b5c:	f01f f928 	bl	801fdb0 <atexit>
 8000b60:	f505 7090 	add.w	r0, r5, #288	@ 0x120
 8000b64:	f01d ffed 	bl	801eb42 <__cxa_guard_release>
}
 8000b68:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <_Z32getFont_NotoSans_Regular_12_4bppv+0x70>)
 8000b6a:	b009      	add	sp, #36	@ 0x24
 8000b6c:	bd30      	pop	{r4, r5, pc}
 8000b6e:	bf00      	nop
 8000b70:	200016b0 	.word	0x200016b0
 8000b74:	0802e6e4 	.word	0x0802e6e4
 8000b78:	0802f4e4 	.word	0x0802f4e4
 8000b7c:	0802a3f4 	.word	0x0802a3f4
 8000b80:	0800078f 	.word	0x0800078f
 8000b84:	200017d4 	.word	0x200017d4

08000b88 <_Z32getFont_NotoSans_Regular_18_4bppv>:
{
 8000b88:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont NotoSans_Regular_18_4bpp(glyphs_NotoSans_Regular_18_4bpp, 29, 18, 4, 4, 0, 0, unicodes_NotoSans_Regular_18_4bpp, kerning_NotoSans_Regular_18_4bpp, 0, 0);
 8000b8a:	4d15      	ldr	r5, [pc, #84]	@ (8000be0 <_Z32getFont_NotoSans_Regular_18_4bppv+0x58>)
{
 8000b8c:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont NotoSans_Regular_18_4bpp(glyphs_NotoSans_Regular_18_4bpp, 29, 18, 4, 4, 0, 0, unicodes_NotoSans_Regular_18_4bpp, kerning_NotoSans_Regular_18_4bpp, 0, 0);
 8000b8e:	f8d5 4144 	ldr.w	r4, [r5, #324]	@ 0x144
 8000b92:	f3bf 8f5b 	dmb	ish
 8000b96:	f014 0401 	ands.w	r4, r4, #1
 8000b9a:	d11d      	bne.n	8000bd8 <_Z32getFont_NotoSans_Regular_18_4bppv+0x50>
 8000b9c:	f505 70a2 	add.w	r0, r5, #324	@ 0x144
 8000ba0:	f01d ffc3 	bl	801eb2a <__cxa_guard_acquire>
 8000ba4:	b1c0      	cbz	r0, 8000bd8 <_Z32getFont_NotoSans_Regular_18_4bppv+0x50>
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <_Z32getFont_NotoSans_Regular_18_4bppv+0x5c>)
 8000ba8:	221d      	movs	r2, #29
 8000baa:	490f      	ldr	r1, [pc, #60]	@ (8000be8 <_Z32getFont_NotoSans_Regular_18_4bppv+0x60>)
 8000bac:	f505 70a4 	add.w	r0, r5, #328	@ 0x148
 8000bb0:	9305      	str	r3, [sp, #20]
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <_Z32getFont_NotoSans_Regular_18_4bppv+0x64>)
 8000bb4:	9402      	str	r4, [sp, #8]
 8000bb6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8000bba:	2304      	movs	r3, #4
 8000bbc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000bc0:	e9cd 3300 	strd	r3, r3, [sp]
 8000bc4:	2312      	movs	r3, #18
 8000bc6:	f01a ff89 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000bca:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <_Z32getFont_NotoSans_Regular_18_4bppv+0x68>)
 8000bcc:	f01f f8f0 	bl	801fdb0 <atexit>
 8000bd0:	f505 70a2 	add.w	r0, r5, #324	@ 0x144
 8000bd4:	f01d ffb5 	bl	801eb42 <__cxa_guard_release>
}
 8000bd8:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <_Z32getFont_NotoSans_Regular_18_4bppv+0x6c>)
 8000bda:	b009      	add	sp, #36	@ 0x24
 8000bdc:	bd30      	pop	{r4, r5, pc}
 8000bde:	bf00      	nop
 8000be0:	200016b0 	.word	0x200016b0
 8000be4:	0802e6e8 	.word	0x0802e6e8
 8000be8:	0802f900 	.word	0x0802f900
 8000bec:	0802ac30 	.word	0x0802ac30
 8000bf0:	08000791 	.word	0x08000791
 8000bf4:	200017f8 	.word	0x200017f8

08000bf8 <_Z22getFont_ipaexg_12_4bppv>:
{
 8000bf8:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont ipaexg_12_4bpp(glyphs_ipaexg_12_4bpp, 197, 12, 2, 4, 1, 1, unicodes_ipaexg_12_4bpp, kerning_ipaexg_12_4bpp, 0, 0);
 8000bfa:	4d16      	ldr	r5, [pc, #88]	@ (8000c54 <_Z22getFont_ipaexg_12_4bppv+0x5c>)
{
 8000bfc:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont ipaexg_12_4bpp(glyphs_ipaexg_12_4bpp, 197, 12, 2, 4, 1, 1, unicodes_ipaexg_12_4bpp, kerning_ipaexg_12_4bpp, 0, 0);
 8000bfe:	f8d5 4168 	ldr.w	r4, [r5, #360]	@ 0x168
 8000c02:	f3bf 8f5b 	dmb	ish
 8000c06:	f014 0401 	ands.w	r4, r4, #1
 8000c0a:	d11f      	bne.n	8000c4c <_Z22getFont_ipaexg_12_4bppv+0x54>
 8000c0c:	f505 70b4 	add.w	r0, r5, #360	@ 0x168
 8000c10:	f01d ff8b 	bl	801eb2a <__cxa_guard_acquire>
 8000c14:	b1d0      	cbz	r0, 8000c4c <_Z22getFont_ipaexg_12_4bppv+0x54>
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <_Z22getFont_ipaexg_12_4bppv+0x60>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	4910      	ldr	r1, [pc, #64]	@ (8000c5c <_Z22getFont_ipaexg_12_4bppv+0x64>)
 8000c1c:	f505 70b6 	add.w	r0, r5, #364	@ 0x16c
 8000c20:	9305      	str	r3, [sp, #20]
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <_Z22getFont_ipaexg_12_4bppv+0x68>)
 8000c24:	9304      	str	r3, [sp, #16]
 8000c26:	2301      	movs	r3, #1
 8000c28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000c32:	e9cd 3200 	strd	r3, r2, [sp]
 8000c36:	230c      	movs	r3, #12
 8000c38:	22c5      	movs	r2, #197	@ 0xc5
 8000c3a:	f01a ff4f 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000c3e:	4809      	ldr	r0, [pc, #36]	@ (8000c64 <_Z22getFont_ipaexg_12_4bppv+0x6c>)
 8000c40:	f01f f8b6 	bl	801fdb0 <atexit>
 8000c44:	f505 70b4 	add.w	r0, r5, #360	@ 0x168
 8000c48:	f01d ff7b 	bl	801eb42 <__cxa_guard_release>
}
 8000c4c:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <_Z22getFont_ipaexg_12_4bppv+0x70>)
 8000c4e:	b009      	add	sp, #36	@ 0x24
 8000c50:	bd30      	pop	{r4, r5, pc}
 8000c52:	bf00      	nop
 8000c54:	200016b0 	.word	0x200016b0
 8000c58:	0802e6ec 	.word	0x0802e6ec
 8000c5c:	0802fa98 	.word	0x0802fa98
 8000c60:	0802b2f4 	.word	0x0802b2f4
 8000c64:	08000793 	.word	0x08000793
 8000c68:	2000181c 	.word	0x2000181c

08000c6c <_Z22getFont_ipaexg_18_4bppv>:
{
 8000c6c:	b530      	push	{r4, r5, lr}
  static touchgfx::InternalFlashFont ipaexg_18_4bpp(glyphs_ipaexg_18_4bpp, 27, 18, 2, 4, 1, 0, unicodes_ipaexg_18_4bpp, kerning_ipaexg_18_4bpp, 0, 0);
 8000c6e:	4d16      	ldr	r5, [pc, #88]	@ (8000cc8 <_Z22getFont_ipaexg_18_4bppv+0x5c>)
{
 8000c70:	b089      	sub	sp, #36	@ 0x24
  static touchgfx::InternalFlashFont ipaexg_18_4bpp(glyphs_ipaexg_18_4bpp, 27, 18, 2, 4, 1, 0, unicodes_ipaexg_18_4bpp, kerning_ipaexg_18_4bpp, 0, 0);
 8000c72:	f8d5 418c 	ldr.w	r4, [r5, #396]	@ 0x18c
 8000c76:	f3bf 8f5b 	dmb	ish
 8000c7a:	f014 0401 	ands.w	r4, r4, #1
 8000c7e:	d11f      	bne.n	8000cc0 <_Z22getFont_ipaexg_18_4bppv+0x54>
 8000c80:	f505 70c6 	add.w	r0, r5, #396	@ 0x18c
 8000c84:	f01d ff51 	bl	801eb2a <__cxa_guard_acquire>
 8000c88:	b1d0      	cbz	r0, 8000cc0 <_Z22getFont_ipaexg_18_4bppv+0x54>
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <_Z22getFont_ipaexg_18_4bppv+0x60>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4910      	ldr	r1, [pc, #64]	@ (8000cd0 <_Z22getFont_ipaexg_18_4bppv+0x64>)
 8000c90:	f505 70c8 	add.w	r0, r5, #400	@ 0x190
 8000c94:	9305      	str	r3, [sp, #20]
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <_Z22getFont_ipaexg_18_4bppv+0x68>)
 8000c98:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	221b      	movs	r2, #27
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2312      	movs	r3, #18
 8000caa:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000cae:	f01a ff15 	bl	801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8000cb2:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <_Z22getFont_ipaexg_18_4bppv+0x6c>)
 8000cb4:	f01f f87c 	bl	801fdb0 <atexit>
 8000cb8:	f505 70c6 	add.w	r0, r5, #396	@ 0x18c
 8000cbc:	f01d ff41 	bl	801eb42 <__cxa_guard_release>
  return ipaexg_18_4bpp;
}
 8000cc0:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <_Z22getFont_ipaexg_18_4bppv+0x70>)
 8000cc2:	b009      	add	sp, #36	@ 0x24
 8000cc4:	bd30      	pop	{r4, r5, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200016b0 	.word	0x200016b0
 8000ccc:	0802e6f0 	.word	0x0802e6f0
 8000cd0:	08030560 	.word	0x08030560
 8000cd4:	0802dcb0 	.word	0x0802dcb0
 8000cd8:	0800077f 	.word	0x0800077f
 8000cdc:	20001840 	.word	0x20001840

08000ce0 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
  const touchgfx::Bitmap::BitmapData* getInstance()
  {
    return bitmap_database;
  }
 8000ce0:	4800      	ldr	r0, [pc, #0]	@ (8000ce4 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8000ce2:	4770      	bx	lr
 8000ce4:	08020e64 	.word	0x08020e64

08000ce8 <_ZN14BitmapDatabase15getInstanceSizeEv>:
  uint16_t getInstanceSize()
  {
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
  }
 8000ce8:	2079      	movs	r0, #121	@ 0x79
 8000cea:	4770      	bx	lr

08000cec <_ZN8touchgfx5Texts11setLanguageEt>:
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    currentLanguage = id;
    currentLanguagePtr = languagesArray[currentLanguage];
 8000cec:	490a      	ldr	r1, [pc, #40]	@ (8000d18 <_ZN8touchgfx5Texts11setLanguageEt+0x2c>)
    currentLanguage = id;
 8000cee:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <_ZN8touchgfx5Texts11setLanguageEt+0x30>)
{
 8000cf0:	b538      	push	{r3, r4, r5, lr}
    currentLanguagePtr = languagesArray[currentLanguage];
 8000cf2:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    currentLanguage = id;
 8000cf6:	8010      	strh	r0, [r2, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 8000cf8:	6053      	str	r3, [r2, #4]

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 8000cfa:	f000 f823 	bl	8000d44 <_ZN17TypedTextDatabase11getInstanceEt>
 8000cfe:	4605      	mov	r5, r0
 8000d00:	f000 f828 	bl	8000d54 <_ZN17TypedTextDatabase8getFontsEv>
 8000d04:	4604      	mov	r4, r0
 8000d06:	f000 f823 	bl	8000d50 <_ZN17TypedTextDatabase15getInstanceSizeEv>
     * @param f    The fonts associated with the array.
     * @param n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
    {
        typedTexts = data;
 8000d0a:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <_ZN8touchgfx5Texts11setLanguageEt+0x34>)
 8000d0c:	601d      	str	r5, [r3, #0]
        fonts = f;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <_ZN8touchgfx5Texts11setLanguageEt+0x38>)
 8000d10:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
 8000d12:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>)
 8000d14:	8018      	strh	r0, [r3, #0]
            TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 8000d16:	bd38      	pop	{r3, r4, r5, pc}
 8000d18:	08033ef4 	.word	0x08033ef4
 8000d1c:	20001860 	.word	0x20001860
 8000d20:	20024eb4 	.word	0x20024eb4
 8000d24:	20024ebc 	.word	0x20024ebc
 8000d28:	20024eb8 	.word	0x20024eb8

08000d2c <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE+0x10>)
 8000d2e:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE+0x14>)
 8000d30:	8819      	ldrh	r1, [r3, #0]
 8000d32:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000d36:	605a      	str	r2, [r3, #4]
}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20001860 	.word	0x20001860
 8000d40:	08033ef4 	.word	0x08033ef4

08000d44 <_ZN17TypedTextDatabase11getInstanceEt>:
namespace TypedTextDatabase
{
  const touchgfx::TypedText::TypedTextData* getInstance(touchgfx::LanguageId id)
  {
    return typedTextDatabaseArray[id];
  }
 8000d44:	4b01      	ldr	r3, [pc, #4]	@ (8000d4c <_ZN17TypedTextDatabase11getInstanceEt+0x8>)
 8000d46:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000d4a:	4770      	bx	lr
 8000d4c:	08033f08 	.word	0x08033f08

08000d50 <_ZN17TypedTextDatabase15getInstanceSizeEv>:

  uint16_t getInstanceSize()
  {
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
  }
 8000d50:	2037      	movs	r0, #55	@ 0x37
 8000d52:	4770      	bx	lr

08000d54 <_ZN17TypedTextDatabase8getFontsEv>:
  const touchgfx::Font* const * getFonts()
  {
    return _fonts;
  }
 8000d54:	4800      	ldr	r0, [pc, #0]	@ (8000d58 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8000d56:	4770      	bx	lr
 8000d58:	20001878 	.word	0x20001878

08000d5c <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
}
 8000d5c:	b510      	push	{r4, lr}
};
 8000d5e:	4c13      	ldr	r4, [pc, #76]	@ (8000dac <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt+0x50>)
    &(getFont_Asap_Regular_12_4bpp()),
 8000d60:	f7ff fe2c 	bl	80009bc <_Z28getFont_Asap_Regular_12_4bppv>
};
 8000d64:	6020      	str	r0, [r4, #0]
    &(getFont_Asap_Regular_11_4bpp()),
 8000d66:	f7ff fdf1 	bl	800094c <_Z28getFont_Asap_Regular_11_4bppv>
};
 8000d6a:	6060      	str	r0, [r4, #4]
    &(getFont_Asap_Regular_18_4bpp()),
 8000d6c:	f7ff fe9a 	bl	8000aa4 <_Z28getFont_Asap_Regular_18_4bppv>
};
 8000d70:	60a0      	str	r0, [r4, #8]
    &(getFont_ipaexg_12_4bpp()),
 8000d72:	f7ff ff41 	bl	8000bf8 <_Z22getFont_ipaexg_12_4bppv>
};
 8000d76:	60e0      	str	r0, [r4, #12]
    &(getFont_ipaexg_18_4bpp()),
 8000d78:	f7ff ff78 	bl	8000c6c <_Z22getFont_ipaexg_18_4bppv>
};
 8000d7c:	6120      	str	r0, [r4, #16]
    &(getFont_NotoSans_Regular_12_4bpp()),
 8000d7e:	f7ff fec9 	bl	8000b14 <_Z32getFont_NotoSans_Regular_12_4bppv>
};
 8000d82:	6160      	str	r0, [r4, #20]
    &(getFont_NotoSans_Regular_18_4bpp()),
 8000d84:	f7ff ff00 	bl	8000b88 <_Z32getFont_NotoSans_Regular_18_4bppv>
};
 8000d88:	61a0      	str	r0, [r4, #24]
    &(getFont_Asap_Bold_otf_12_4bpp()),
 8000d8a:	f7ff fd03 	bl	8000794 <_Z29getFont_Asap_Bold_otf_12_4bppv>
};
 8000d8e:	61e0      	str	r0, [r4, #28]
    &(getFont_Asap_Bold_otf_18_4bpp()),
 8000d90:	f7ff fd6e 	bl	8000870 <_Z29getFont_Asap_Bold_otf_18_4bppv>
};
 8000d94:	6220      	str	r0, [r4, #32]
    &(getFont_Asap_Bold_otf_46_4bpp()),
 8000d96:	f7ff fda3 	bl	80008e0 <_Z29getFont_Asap_Bold_otf_46_4bppv>
};
 8000d9a:	6260      	str	r0, [r4, #36]	@ 0x24
    &(getFont_Asap_Regular_15_4bpp()),
 8000d9c:	f7ff fe48 	bl	8000a30 <_Z28getFont_Asap_Regular_15_4bppv>
};
 8000da0:	62a0      	str	r0, [r4, #40]	@ 0x28
    &(getFont_Asap_Bold_otf_15_4bpp())
 8000da2:	f7ff fd2d 	bl	8000800 <_Z29getFont_Asap_Bold_otf_15_4bppv>
};
 8000da6:	62e0      	str	r0, [r4, #44]	@ 0x2c
}
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	bf00      	nop
 8000dac:	20001878 	.word	0x20001878

08000db0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8000db0:	b570      	push	{r4, r5, r6, lr}
 8000db2:	461d      	mov	r5, r3
    {
        setXY(x, y);
 8000db4:	6803      	ldr	r3, [r0, #0]
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8000db6:	4604      	mov	r4, r0
 8000db8:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dbe:	4798      	blx	r3
        setWidth(width);
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc8:	4798      	blx	r3
        setHeight(height);
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	4620      	mov	r0, r4
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    };
 8000dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8000dd6:	4718      	bx	r3

08000dd8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8000dd8:	8081      	strh	r1, [r0, #4]
    }
 8000dda:	4770      	bx	lr

08000ddc <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8000ddc:	80c1      	strh	r1, [r0, #6]
    }
 8000dde:	4770      	bx	lr

08000de0 <_ZN8touchgfx8Drawable5setXYEss>:
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
    {
        setX(x);
 8000de0:	6803      	ldr	r3, [r0, #0]
    virtual void setXY(int16_t x, int16_t y)
 8000de2:	b570      	push	{r4, r5, r6, lr}
 8000de4:	4604      	mov	r4, r0
        setX(x);
 8000de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    virtual void setXY(int16_t x, int16_t y)
 8000de8:	4615      	mov	r5, r2
        setX(x);
 8000dea:	4798      	blx	r3
        setY(y);
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	4620      	mov	r0, r4
 8000df0:	4629      	mov	r1, r5
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    }
 8000df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8000df8:	4718      	bx	r3

08000dfa <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8000dfa:	8101      	strh	r1, [r0, #8]
    }
 8000dfc:	4770      	bx	lr

08000dfe <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8000dfe:	8141      	strh	r1, [r0, #10]
    }
 8000e00:	4770      	bx	lr

08000e02 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 8000e02:	4770      	bx	lr

08000e04 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8000e04:	4770      	bx	lr

08000e06 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8000e06:	4770      	bx	lr

08000e08 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 8000e08:	4770      	bx	lr

08000e0a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8000e0a:	4770      	bx	lr

08000e0c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8000e0c:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8000e0e:	88c4      	ldrh	r4, [r0, #6]
 8000e10:	6803      	ldr	r3, [r0, #0]
 8000e12:	1b12      	subs	r2, r2, r4
 8000e14:	8884      	ldrh	r4, [r0, #4]
 8000e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e18:	1b09      	subs	r1, r1, r4
 8000e1a:	b212      	sxth	r2, r2
    }
 8000e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8000e20:	b209      	sxth	r1, r1
 8000e22:	4718      	bx	r3

08000e24 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8000e24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e28:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	6203      	str	r3, [r0, #32]
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8000e30:	6813      	ldr	r3, [r2, #0]
 8000e32:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8000e34:	6010      	str	r0, [r2, #0]
    }
 8000e36:	4770      	bx	lr

08000e38 <_ZNK8touchgfx6Widget7getTypeEv>:
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_WIDGET;
    }
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4770      	bx	lr

08000e3c <_ZNK8touchgfx9Container7getTypeEv>:
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_CONTAINER;
    }
 8000e3c:	2012      	movs	r0, #18
 8000e3e:	4770      	bx	lr

08000e40 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
    {
        return pressed;
    }
 8000e40:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8000e44:	4770      	bx	lr

08000e46 <_ZNK8touchgfx6Button7getTypeEv>:
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_BUTTON;
    }
 8000e46:	2005      	movs	r0, #5
 8000e48:	4770      	bx	lr
	...

08000e4c <_ZN15CollapsibleMenuD1Ev>:
        menuElements[i].setMoveAnimationEndedAction(menuElementMoveAnimationEndedCallback);
        add(menuElements[i]);
    }
}

CollapsibleMenu::~CollapsibleMenu()
 8000e4c:	b538      	push	{r3, r4, r5, lr}
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <_ZN15CollapsibleMenuD1Ev+0x20>)
 8000e50:	4604      	mov	r4, r0
 8000e52:	f44f 7570 	mov.w	r5, #960	@ 0x3c0
 8000e56:	6003      	str	r3, [r0, #0]
 8000e58:	5963      	ldr	r3, [r4, r5]
 8000e5a:	1960      	adds	r0, r4, r5
 8000e5c:	3d64      	subs	r5, #100	@ 0x64
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4798      	blx	r3
{
}
 8000e62:	f115 0f28 	cmn.w	r5, #40	@ 0x28
 8000e66:	d1f7      	bne.n	8000e58 <_ZN15CollapsibleMenuD1Ev+0xc>
 8000e68:	4620      	mov	r0, r4
 8000e6a:	bd38      	pop	{r3, r4, r5, pc}
 8000e6c:	080217e0 	.word	0x080217e0

08000e70 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEED1Ev>:
     *
     *        Destructor. Destroys the FadeAnimator.
     */
    virtual ~FadeAnimator()
    {
    }
 8000e70:	4770      	bx	lr

08000e72 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21setMoveAnimationDelayEt>:
     *
     * @param delay The delay in ticks.
     */
    virtual void setMoveAnimationDelay(uint16_t delay)
    {
        moveAnimationDelay = delay;
 8000e72:	86c1      	strh	r1, [r0, #54]	@ 0x36
    }
 8000e74:	4770      	bx	lr

08000e76 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21setFadeAnimationDelayEt>:
     *
     * @param delay The delay in ticks.
     */
    virtual void setFadeAnimationDelay(uint16_t delay)
    {
        fadeAnimationDelay = delay;
 8000e76:	f8a0 1054 	strh.w	r1, [r0, #84]	@ 0x54
    }
 8000e7a:	4770      	bx	lr

08000e7c <_ZNK8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE9isRunningEv>:
     * @return true if the fade animation is running.
     * @deprecated use isFadeAnimationRunning()
     */
    virtual bool isRunning() const
    {
        return isFadeAnimationRunning();
 8000e7c:	6803      	ldr	r3, [r0, #0]
 8000e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000e82:	4718      	bx	r3

08000e84 <_ZNK8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE22isFadeAnimationRunningEv>:
     * @return true if the fade animation is running.
     */
    virtual bool isFadeAnimationRunning() const
    {
        return fadeAnimationRunning;
    }
 8000e84:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8000e88:	4770      	bx	lr

08000e8a <_ZN8touchgfx8CallbackI15CollapsibleMenuRKNS_12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEEEvvED1Ev>:
 *
 * @tparam dest_type The type of the class in which the member function resides.
 * @tparam T1        The type of the first argument in the member function, or void if none.
 */
template <class dest_type, typename T1>
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8000e8a:	4770      	bx	lr

08000e8c <_ZN8touchgfx8CallbackI15CollapsibleMenuRKNS_12MoveAnimatorINS_6ButtonEEEvvED1Ev>:
 8000e8c:	4770      	bx	lr

08000e8e <_ZN8touchgfx8CallbackI15CollapsibleMenuRKNS_14AbstractButtonEvvED1Ev>:
 8000e8e:	4770      	bx	lr

08000e90 <_ZN8touchgfx8CallbackI15CollapsibleMenuRKNS_12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEEEvvE7executeES8_>:
     *
     * @param t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid()
     */
    virtual void execute(T1 t1)
 8000e90:	b430      	push	{r4, r5}
    {
        (pobject->*pmemfun_1)(t1);
 8000e92:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8000e94:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8000e96:	68c2      	ldr	r2, [r0, #12]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	1055      	asrs	r5, r2, #1
 8000e9c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8000ea0:	07d2      	lsls	r2, r2, #31
 8000ea2:	bf48      	it	mi
 8000ea4:	5962      	ldrmi	r2, [r4, r5]
    }
 8000ea6:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8000ea8:	bf48      	it	mi
 8000eaa:	58d3      	ldrmi	r3, [r2, r3]
 8000eac:	4718      	bx	r3

08000eae <_ZNK8touchgfx8CallbackI15CollapsibleMenuRKNS_12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEEEvvE7isValidEv>:
     *
     *        Query if this object is valid.
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
 8000eae:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun_1 != 0);
 8000eb0:	6840      	ldr	r0, [r0, #4]
 8000eb2:	b130      	cbz	r0, 8000ec2 <_ZNK8touchgfx8CallbackI15CollapsibleMenuRKNS_12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEEEvvE7isValidEv+0x14>
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	b91a      	cbnz	r2, 8000ec0 <_ZNK8touchgfx8CallbackI15CollapsibleMenuRKNS_12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEEEvvE7isValidEv+0x12>
 8000eb8:	68d8      	ldr	r0, [r3, #12]
 8000eba:	f000 0001 	and.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	2001      	movs	r0, #1
    }
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN8touchgfx8CallbackI15CollapsibleMenuRKNS_12MoveAnimatorINS_6ButtonEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8000ec4:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8000ec6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8000ec8:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8000eca:	68c2      	ldr	r2, [r0, #12]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	1055      	asrs	r5, r2, #1
 8000ed0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8000ed4:	07d2      	lsls	r2, r2, #31
 8000ed6:	bf48      	it	mi
 8000ed8:	5962      	ldrmi	r2, [r4, r5]
    }
 8000eda:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8000edc:	bf48      	it	mi
 8000ede:	58d3      	ldrmi	r3, [r2, r3]
 8000ee0:	4718      	bx	r3

08000ee2 <_ZNK8touchgfx8CallbackI15CollapsibleMenuRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv>:
    virtual bool isValid() const
 8000ee2:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8000ee4:	6840      	ldr	r0, [r0, #4]
 8000ee6:	b130      	cbz	r0, 8000ef6 <_ZNK8touchgfx8CallbackI15CollapsibleMenuRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv+0x14>
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	b91a      	cbnz	r2, 8000ef4 <_ZNK8touchgfx8CallbackI15CollapsibleMenuRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv+0x12>
 8000eec:	68d8      	ldr	r0, [r3, #12]
 8000eee:	f000 0001 	and.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	2001      	movs	r0, #1
    }
 8000ef6:	4770      	bx	lr

08000ef8 <_ZN8touchgfx8CallbackI15CollapsibleMenuRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8000ef8:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8000efa:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8000efc:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8000efe:	68c2      	ldr	r2, [r0, #12]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	1055      	asrs	r5, r2, #1
 8000f04:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8000f08:	07d2      	lsls	r2, r2, #31
 8000f0a:	bf48      	it	mi
 8000f0c:	5962      	ldrmi	r2, [r4, r5]
    }
 8000f0e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8000f10:	bf48      	it	mi
 8000f12:	58d3      	ldrmi	r3, [r2, r3]
 8000f14:	4718      	bx	r3

08000f16 <_ZNK8touchgfx8CallbackI15CollapsibleMenuRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8000f16:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8000f18:	6840      	ldr	r0, [r0, #4]
 8000f1a:	b130      	cbz	r0, 8000f2a <_ZNK8touchgfx8CallbackI15CollapsibleMenuRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	b91a      	cbnz	r2, 8000f28 <_ZNK8touchgfx8CallbackI15CollapsibleMenuRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8000f20:	68d8      	ldr	r0, [r3, #12]
 8000f22:	f000 0001 	and.w	r0, r0, #1
 8000f26:	4770      	bx	lr
 8000f28:	2001      	movs	r0, #1
    }
 8000f2a:	4770      	bx	lr

08000f2c <_ZNK8touchgfx12MoveAnimatorINS_6ButtonEE21getMoveAnimationDelayEv>:
     * @return The current animation delay.
     */
    virtual uint16_t getMoveAnimationDelay() const
    {
        return moveAnimationDelay;
    }
 8000f2c:	8ec0      	ldrh	r0, [r0, #54]	@ 0x36
 8000f2e:	4770      	bx	lr

08000f30 <_ZNK8touchgfx12MoveAnimatorINS_6ButtonEE22isMoveAnimationRunningEv>:
     * @return true if the move animation is running.
     */
    virtual bool isMoveAnimationRunning() const
    {
        return moveAnimationRunning;
    }
 8000f30:	f890 0033 	ldrb.w	r0, [r0, #51]	@ 0x33
 8000f34:	4770      	bx	lr

08000f36 <_ZNK8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21getFadeAnimationDelayEv>:
    }
 8000f36:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
 8000f3a:	4770      	bx	lr

08000f3c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEED0Ev>:
    virtual ~FadeAnimator()
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	4604      	mov	r4, r0
    }
 8000f40:	2164      	movs	r1, #100	@ 0x64
 8000f42:	f01d fdf0 	bl	801eb26 <_ZdlPvj>
 8000f46:	4620      	mov	r0, r4
 8000f48:	bd10      	pop	{r4, pc}

08000f4a <_ZN8touchgfx8CallbackI15CollapsibleMenuRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8000f4a:	b510      	push	{r4, lr}
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	2110      	movs	r1, #16
 8000f50:	f01d fde9 	bl	801eb26 <_ZdlPvj>
 8000f54:	4620      	mov	r0, r4
 8000f56:	bd10      	pop	{r4, pc}

08000f58 <_ZN8touchgfx8CallbackI15CollapsibleMenuRKNS_12MoveAnimatorINS_6ButtonEEEvvED0Ev>:
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	f01d fde2 	bl	801eb26 <_ZdlPvj>
 8000f62:	4620      	mov	r0, r4
 8000f64:	bd10      	pop	{r4, pc}

08000f66 <_ZN8touchgfx8CallbackI15CollapsibleMenuRKNS_12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEEEvvED0Ev>:
 8000f66:	b510      	push	{r4, lr}
 8000f68:	4604      	mov	r4, r0
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	f01d fddb 	bl	801eb26 <_ZdlPvj>
 8000f70:	4620      	mov	r0, r4
 8000f72:	bd10      	pop	{r4, pc}

08000f74 <_ZN15CollapsibleMenuD0Ev>:
CollapsibleMenu::~CollapsibleMenu()
 8000f74:	b510      	push	{r4, lr}
 8000f76:	4604      	mov	r4, r0
}
 8000f78:	f7ff ff68 	bl	8000e4c <_ZN15CollapsibleMenuD1Ev>
 8000f7c:	f240 415c 	movw	r1, #1116	@ 0x45c
 8000f80:	4620      	mov	r0, r4
 8000f82:	f01d fdd0 	bl	801eb26 <_ZdlPvj>
 8000f86:	4620      	mov	r0, r4
 8000f88:	bd10      	pop	{r4, pc}

08000f8a <_ZN15CollapsibleMenu36menuElementMoveAnimationEndedHandlerERKN8touchgfx12MoveAnimatorINS0_6ButtonEEE>:
    return fadedOut;
}

void CollapsibleMenu::menuElementMoveAnimationEndedHandler(const MoveAnimator<Button>& element)
{
    if (currentAnimationState == ANIMATE_TO_COLLAPSED)
 8000f8a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8000f8e:	2b01      	cmp	r3, #1
{
 8000f90:	b510      	push	{r4, lr}
 8000f92:	4604      	mov	r4, r0
    if (currentAnimationState == ANIMATE_TO_COLLAPSED)
 8000f94:	d001      	beq.n	8000f9a <_ZN15CollapsibleMenu36menuElementMoveAnimationEndedHandlerERKN8touchgfx12MoveAnimatorINS0_6ButtonEEE+0x10>
    {
        currentAnimationState = NO_ANIMATION;
        isExpanded = false;
    }
    else if (currentAnimationState == ANIMATE_TO_EXPANDED)
 8000f96:	b1cb      	cbz	r3, 8000fcc <_ZN15CollapsibleMenu36menuElementMoveAnimationEndedHandlerERKN8touchgfx12MoveAnimatorINS0_6ButtonEEE+0x42>
    if (stateChangedAction && stateChangedAction->isValid())
    {
        stateChangedAction->execute(*this, isExpanded);
    }

}
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	2300      	movs	r3, #0
        currentAnimationState = NO_ANIMATION;
 8000f9c:	2205      	movs	r2, #5
    if (stateChangedAction && stateChangedAction->isValid())
 8000f9e:	f8d4 0458 	ldr.w	r0, [r4, #1112]	@ 0x458
        isExpanded = false;
 8000fa2:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        currentAnimationState = NO_ANIMATION;
 8000fa6:	f884 202c 	strb.w	r2, [r4, #44]	@ 0x2c
    if (stateChangedAction && stateChangedAction->isValid())
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d0f4      	beq.n	8000f98 <_ZN15CollapsibleMenu36menuElementMoveAnimationEndedHandlerERKN8touchgfx12MoveAnimatorINS0_6ButtonEEE+0xe>
 8000fae:	6803      	ldr	r3, [r0, #0]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	4798      	blx	r3
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d0ef      	beq.n	8000f98 <_ZN15CollapsibleMenu36menuElementMoveAnimationEndedHandlerERKN8touchgfx12MoveAnimatorINS0_6ButtonEEE+0xe>
        stateChangedAction->execute(*this, isExpanded);
 8000fb8:	f8d4 0458 	ldr.w	r0, [r4, #1112]	@ 0x458
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8000fc2:	6803      	ldr	r3, [r0, #0]
}
 8000fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        stateChangedAction->execute(*this, isExpanded);
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	4718      	bx	r3
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e7e5      	b.n	8000f9c <_ZN15CollapsibleMenu36menuElementMoveAnimationEndedHandlerERKN8touchgfx12MoveAnimatorINS0_6ButtonEEE+0x12>

08000fd0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        if (isVisible() && isTouchable())
 8000fd0:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8000fd4:	b11a      	cbz	r2, 8000fde <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8000fd6:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8000fda:	b102      	cbz	r2, 8000fde <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
            *last = this;
 8000fdc:	6018      	str	r0, [r3, #0]
    }
 8000fde:	4770      	bx	lr

08000fe0 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>:
{
 8000fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (currentAnimationState != NO_ANIMATION)
 8000fe4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460e      	mov	r6, r1
    if (currentAnimationState != NO_ANIMATION)
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	f040 80af 	bne.w	8001150 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x170>
    if (isExpanded)
 8000ff2:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000ff6:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
        if (selectedElementIndex > 0)
 8000ffa:	f890 3424 	ldrb.w	r3, [r0, #1060]	@ 0x424
    if (isExpanded)
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	f000 8087 	beq.w	8001112 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x132>
        if (selectedElementIndex > 0)
 8001004:	b19b      	cbz	r3, 800102e <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x4e>
            remove(menuElements[selectedElementIndex]);
 8001006:	2764      	movs	r7, #100	@ 0x64
 8001008:	fb07 0103 	mla	r1, r7, r3, r0
 800100c:	6803      	ldr	r3, [r0, #0]
 800100e:	313c      	adds	r1, #60	@ 0x3c
 8001010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001012:	4798      	blx	r3
            insert(&menuElements[selectedElementIndex - 1], menuElements[selectedElementIndex]);
 8001014:	f894 3424 	ldrb.w	r3, [r4, #1060]	@ 0x424
 8001018:	6821      	ldr	r1, [r4, #0]
 800101a:	4620      	mov	r0, r4
 800101c:	3b01      	subs	r3, #1
 800101e:	437b      	muls	r3, r7
 8001020:	6f8f      	ldr	r7, [r1, #120]	@ 0x78
 8001022:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8001026:	333c      	adds	r3, #60	@ 0x3c
 8001028:	4422      	add	r2, r4
 800102a:	18e1      	adds	r1, r4, r3
 800102c:	47b8      	blx	r7
        uint8_t oldSelectedElementIndex = selectedElementIndex;
 800102e:	f894 7424 	ldrb.w	r7, [r4, #1060]	@ 0x424
        for (int i = 0; i < size; i++)
 8001032:	462a      	mov	r2, r5
 8001034:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 8001038:	2300      	movs	r3, #0
 800103a:	428b      	cmp	r3, r1
 800103c:	da03      	bge.n	8001046 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x66>
            if (&button == &menuElements[i])
 800103e:	4296      	cmp	r6, r2
 8001040:	d12b      	bne.n	800109a <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xba>
                selectedElementIndex = i;
 8001042:	f884 3424 	strb.w	r3, [r4, #1060]	@ 0x424
        remove(menuElements[selectedElementIndex]);
 8001046:	2664      	movs	r6, #100	@ 0x64
 8001048:	f894 1424 	ldrb.w	r1, [r4, #1060]	@ 0x424
 800104c:	f04f 083c 	mov.w	r8, #60	@ 0x3c
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	4620      	mov	r0, r4
        for (int i = 0; i < size; i++)
 8001054:	f04f 0b00 	mov.w	fp, #0
        remove(menuElements[selectedElementIndex]);
 8001058:	fb16 8101 	smlabb	r1, r6, r1, r8
 800105c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800105e:	4421      	add	r1, r4
 8001060:	4798      	blx	r3
        add(menuElements[selectedElementIndex]);
 8001062:	f894 3424 	ldrb.w	r3, [r4, #1060]	@ 0x424
 8001066:	4620      	mov	r0, r4
 8001068:	fb16 8103 	smlabb	r1, r6, r3, r8
 800106c:	6823      	ldr	r3, [r4, #0]
        if (!moveAnimationRunning)
        {
            Application::getInstance()->registerTimerWidget(this);
        }

        moveAnimationCounter = 0;
 800106e:	465e      	mov	r6, fp
 8001070:	4421      	add	r1, r4
 8001072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001074:	4798      	blx	r3
        int delayCounter = 0;
 8001076:	4659      	mov	r1, fp
        for (int i = 0; i < size; i++)
 8001078:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800107c:	459b      	cmp	fp, r3
 800107e:	db0f      	blt.n	80010a0 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xc0>
        currentAnimationState = ANIMATE_TO_COLLAPSED;
 8001080:	2301      	movs	r3, #1
 8001082:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        if (timeout > 0)
 8001086:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001088:	2b00      	cmp	r3, #0
 800108a:	dd61      	ble.n	8001150 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x170>
            Application::getInstance()->unregisterTimerWidget(this);
 800108c:	f018 fd92 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8001090:	4621      	mov	r1, r4
}
 8001092:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            Application::getInstance()->unregisterTimerWidget(this);
 8001096:	f018 bdc3 	b.w	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
        for (int i = 0; i < size; i++)
 800109a:	3301      	adds	r3, #1
 800109c:	3264      	adds	r2, #100	@ 0x64
 800109e:	e7cc      	b.n	800103a <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x5a>
            if (i != oldSelectedElementIndex)
 80010a0:	455f      	cmp	r7, fp
 80010a2:	d02f      	beq.n	8001104 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x124>
                int endPosition = (expandDirection == LEFT) ? getWidth() - menuElements[i].getWidth() : 0;
 80010a4:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 80010a8:	bb83      	cbnz	r3, 800110c <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x12c>
 80010aa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80010ae:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80010b2:	eba3 0902 	sub.w	r9, r3, r2
                menuElements[i].setMoveAnimationDelay(2 * delayCounter++);
 80010b6:	682a      	ldr	r2, [r5, #0]
 80010b8:	f101 0a01 	add.w	sl, r1, #1
 80010bc:	0049      	lsls	r1, r1, #1
 80010be:	4628      	mov	r0, r5
 80010c0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
                menuElements[i].startMoveAnimation(endPosition, menuElements[i].getY(), duration, EasingEquations::cubicEaseOut);
 80010c2:	fa0f f989 	sxth.w	r9, r9
                menuElements[i].setMoveAnimationDelay(2 * delayCounter++);
 80010c6:	b289      	uxth	r1, r1
 80010c8:	4790      	blx	r2
        if (!moveAnimationRunning)
 80010ca:	f895 1033 	ldrb.w	r1, [r5, #51]	@ 0x33
        return rect.y;
 80010ce:	f9b5 8006 	ldrsh.w	r8, [r5, #6]
 80010d2:	b921      	cbnz	r1, 80010de <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xfe>
            Application::getInstance()->registerTimerWidget(this);
 80010d4:	f018 fd6e 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 80010d8:	4629      	mov	r1, r5
 80010da:	f018 fd71 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationStartX = T::getX();
        moveAnimationStartY = T::getY();
        moveAnimationEndX = endX;
        moveAnimationEndY = endY;
        moveAnimationDuration = duration;
 80010de:	2314      	movs	r3, #20
        moveAnimationStartX = T::getX();
 80010e0:	88a9      	ldrh	r1, [r5, #4]
        moveAnimationCounter = 0;
 80010e2:	86ae      	strh	r6, [r5, #52]	@ 0x34
        moveAnimationDuration = duration;
 80010e4:	872b      	strh	r3, [r5, #56]	@ 0x38
        moveAnimationXEquation = xProgressionEquation;
 80010e6:	4b3e      	ldr	r3, [pc, #248]	@ (80011e0 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x200>)
        moveAnimationStartX = T::getX();
 80010e8:	8769      	strh	r1, [r5, #58]	@ 0x3a
        moveAnimationXEquation = xProgressionEquation;
 80010ea:	646b      	str	r3, [r5, #68]	@ 0x44
        moveAnimationStartY = T::getY();
 80010ec:	88e9      	ldrh	r1, [r5, #6]
        moveAnimationYEquation = yProgressionEquation;
 80010ee:	4b3d      	ldr	r3, [pc, #244]	@ (80011e4 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x204>)
        moveAnimationStartY = T::getY();
 80010f0:	87a9      	strh	r1, [r5, #60]	@ 0x3c
 80010f2:	4651      	mov	r1, sl
        moveAnimationYEquation = yProgressionEquation;
 80010f4:	64ab      	str	r3, [r5, #72]	@ 0x48

        moveAnimationRunning = true;
 80010f6:	2301      	movs	r3, #1
        moveAnimationEndX = endX;
 80010f8:	f8a5 903e 	strh.w	r9, [r5, #62]	@ 0x3e
        moveAnimationEndY = endY;
 80010fc:	f8a5 8040 	strh.w	r8, [r5, #64]	@ 0x40
        moveAnimationRunning = true;
 8001100:	f885 3033 	strb.w	r3, [r5, #51]	@ 0x33
        for (int i = 0; i < size; i++)
 8001104:	f10b 0b01 	add.w	fp, fp, #1
 8001108:	3564      	adds	r5, #100	@ 0x64
 800110a:	e7b5      	b.n	8001078 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x98>
                int endPosition = (expandDirection == LEFT) ? getWidth() - menuElements[i].getWidth() : 0;
 800110c:	f04f 0900 	mov.w	r9, #0
 8001110:	e7d1      	b.n	80010b6 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xd6>
        return rect.width;
 8001112:	2264      	movs	r2, #100	@ 0x64
 8001114:	fb02 0303 	mla	r3, r2, r3, r0
        int posX = (expandDirection == LEFT) ? getWidth() - menuElements[selectedElementIndex].getWidth() : menuElements[selectedElementIndex].getWidth() + elementSpace;
 8001118:	f9b3 6044 	ldrsh.w	r6, [r3, #68]	@ 0x44
 800111c:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 8001120:	b9c3      	cbnz	r3, 8001154 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x174>
 8001122:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8001126:	1b9e      	subs	r6, r3, r6
 8001128:	f04f 0b00 	mov.w	fp, #0
 800112c:	465b      	mov	r3, fp
        moveAnimationCounter = 0;
 800112e:	46d8      	mov	r8, fp
        for (int i = 0; i < size; i++)
 8001130:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8001134:	4593      	cmp	fp, r2
 8001136:	db10      	blt.n	800115a <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x17a>
        currentAnimationState = ANIMATE_TO_EXPANDED;
 8001138:	2500      	movs	r5, #0
        if (timeout > 0)
 800113a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800113c:	42ab      	cmp	r3, r5
        currentAnimationState = ANIMATE_TO_EXPANDED;
 800113e:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
        if (timeout > 0)
 8001142:	dd05      	ble.n	8001150 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x170>
            Application::getInstance()->registerTimerWidget(this);
 8001144:	f018 fd36 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8001148:	4621      	mov	r1, r4
 800114a:	f018 fd39 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
            timeoutCounter = 0;
 800114e:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8001150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int posX = (expandDirection == LEFT) ? getWidth() - menuElements[selectedElementIndex].getWidth() : menuElements[selectedElementIndex].getWidth() + elementSpace;
 8001154:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8001156:	441e      	add	r6, r3
 8001158:	e7e6      	b.n	8001128 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x148>
            if (i != selectedElementIndex)
 800115a:	f894 2424 	ldrb.w	r2, [r4, #1060]	@ 0x424
 800115e:	455a      	cmp	r2, fp
 8001160:	d03b      	beq.n	80011da <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1fa>
                if (expandDirection == LEFT)
 8001162:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
 8001166:	b922      	cbnz	r2, 8001172 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x192>
                    posX -= menuElements[i].getWidth() + elementSpace;
 8001168:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 800116c:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 800116e:	440a      	add	r2, r1
 8001170:	1ab6      	subs	r6, r6, r2
                menuElements[i].setMoveAnimationDelay(2 * delayCounter++);
 8001172:	1c5f      	adds	r7, r3, #1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4628      	mov	r0, r5
                menuElements[i].startMoveAnimation(posX, menuElements[i].getY(), duration, EasingEquations::cubicEaseOut);
 8001178:	fa0f fa86 	sxth.w	sl, r6
                menuElements[i].setMoveAnimationDelay(2 * delayCounter++);
 800117c:	b299      	uxth	r1, r3
 800117e:	682b      	ldr	r3, [r5, #0]
 8001180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001182:	4798      	blx	r3
        if (!moveAnimationRunning)
 8001184:	f895 1033 	ldrb.w	r1, [r5, #51]	@ 0x33
        return rect.y;
 8001188:	f9b5 9006 	ldrsh.w	r9, [r5, #6]
 800118c:	b921      	cbnz	r1, 8001198 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1b8>
            Application::getInstance()->registerTimerWidget(this);
 800118e:	f018 fd11 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8001192:	4629      	mov	r1, r5
 8001194:	f018 fd14 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationDuration = duration;
 8001198:	2314      	movs	r3, #20
        moveAnimationStartX = T::getX();
 800119a:	88a9      	ldrh	r1, [r5, #4]
        moveAnimationCounter = 0;
 800119c:	f8a5 8034 	strh.w	r8, [r5, #52]	@ 0x34
        moveAnimationDuration = duration;
 80011a0:	872b      	strh	r3, [r5, #56]	@ 0x38
        moveAnimationXEquation = xProgressionEquation;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x200>)
        moveAnimationStartX = T::getX();
 80011a4:	8769      	strh	r1, [r5, #58]	@ 0x3a
        moveAnimationXEquation = xProgressionEquation;
 80011a6:	646b      	str	r3, [r5, #68]	@ 0x44
        moveAnimationYEquation = yProgressionEquation;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x204>)
        moveAnimationStartY = T::getY();
 80011aa:	88e9      	ldrh	r1, [r5, #6]
        moveAnimationYEquation = yProgressionEquation;
 80011ac:	64ab      	str	r3, [r5, #72]	@ 0x48
        moveAnimationRunning = true;
 80011ae:	2301      	movs	r3, #1
        moveAnimationStartY = T::getY();
 80011b0:	87a9      	strh	r1, [r5, #60]	@ 0x3c
        moveAnimationRunning = true;
 80011b2:	f885 3033 	strb.w	r3, [r5, #51]	@ 0x33
                if (expandDirection == RIGHT)
 80011b6:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
        moveAnimationEndX = endX;
 80011ba:	f8a5 a03e 	strh.w	sl, [r5, #62]	@ 0x3e
 80011be:	2b01      	cmp	r3, #1
        moveAnimationEndY = endY;
 80011c0:	f8a5 9040 	strh.w	r9, [r5, #64]	@ 0x40
 80011c4:	d104      	bne.n	80011d0 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1f0>
                    posX += menuElements[i].getWidth() + elementSpace;
 80011c6:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80011ca:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 80011cc:	4413      	add	r3, r2
 80011ce:	441e      	add	r6, r3
        for (int i = 0; i < size; i++)
 80011d0:	f10b 0b01 	add.w	fp, fp, #1
 80011d4:	3564      	adds	r5, #100	@ 0x64
 80011d6:	463b      	mov	r3, r7
 80011d8:	e7aa      	b.n	8001130 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x150>
 80011da:	461f      	mov	r7, r3
 80011dc:	e7f8      	b.n	80011d0 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1f0>
 80011de:	bf00      	nop
 80011e0:	0801b19d 	.word	0x0801b19d
 80011e4:	0801b59b 	.word	0x0801b59b

080011e8 <_ZN15CollapsibleMenuC1Ev>:
        touchable(false),
 80011e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 80011ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
CollapsibleMenu::CollapsibleMenu() :
 80011f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011f4:	8482      	strh	r2, [r0, #36]	@ 0x24
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
    {
        this->x = x;
 80011f6:	2300      	movs	r3, #0
    stateChangedAction(0)
 80011f8:	4a3f      	ldr	r2, [pc, #252]	@ (80012f8 <_ZN15CollapsibleMenuC1Ev+0x110>)
CollapsibleMenu::CollapsibleMenu() :
 80011fa:	4604      	mov	r4, r0
 80011fc:	f200 4524 	addw	r5, r0, #1060	@ 0x424
        nextDrawChainElement(0),
 8001200:	61c3      	str	r3, [r0, #28]
    stateChangedAction(0)
 8001202:	6002      	str	r2, [r0, #0]
    currentAnimationState(NO_ANIMATION),
 8001204:	2205      	movs	r2, #5
        firstChild(0)
 8001206:	6283      	str	r3, [r0, #40]	@ 0x28
 8001208:	8582      	strh	r2, [r0, #44]	@ 0x2c
    elementSpace(0),
 800120a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
    isExpanded(false),
 800120e:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
    timeoutCounter(0),
 8001212:	6383      	str	r3, [r0, #56]	@ 0x38
        fadeAnimationEndedCallback(0)
 8001214:	4e39      	ldr	r6, [pc, #228]	@ (80012fc <_ZN15CollapsibleMenuC1Ev+0x114>)
    timeout(0),
 8001216:	e9c0 230c 	strd	r2, r3, [r0, #48]	@ 0x30
        this->y = y;
        this->width = width;
 800121a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800121e:	f100 023c 	add.w	r2, r0, #60	@ 0x3c
        this->width = 0;
 8001222:	e9c0 3303 	strd	r3, r3, [r0, #12]
        nextSibling(0),
 8001226:	e9c0 3305 	strd	r3, r3, [r0, #20]
        visible(true)
 800122a:	2001      	movs	r0, #1
        this->x = x;
 800122c:	8093      	strh	r3, [r2, #4]
        this->y = y;
 800122e:	80d3      	strh	r3, [r2, #6]
        this->width = width;
 8001230:	8113      	strh	r3, [r2, #8]
        this->height = height;
 8001232:	8153      	strh	r3, [r2, #10]
        this->x = 0;
 8001234:	8193      	strh	r3, [r2, #12]
        this->y = 0;
 8001236:	81d3      	strh	r3, [r2, #14]
        this->width = 0;
 8001238:	8213      	strh	r3, [r2, #16]
        this->height = 0;
 800123a:	8253      	strh	r3, [r2, #18]
        nextDrawChainElement(0),
 800123c:	61d3      	str	r3, [r2, #28]
        visible(true)
 800123e:	f882 0025 	strb.w	r0, [r2, #37]	@ 0x25
    AbstractButton() : Widget(), action(), pressed(false)
 8001242:	6293      	str	r3, [r2, #40]	@ 0x28
 8001244:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
        touchable = touch;
 8001248:	f882 0024 	strb.w	r0, [r2, #36]	@ 0x24
 800124c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800124e:	8611      	strh	r1, [r2, #48]	@ 0x30
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8001250:	f882 1032 	strb.w	r1, [r2, #50]	@ 0x32
        moveAnimationRunning(false),
 8001254:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
        moveAnimationCounter(0),
 8001258:	8693      	strh	r3, [r2, #52]	@ 0x34
        moveAnimationDelay(0),
 800125a:	86d3      	strh	r3, [r2, #54]	@ 0x36
        moveAnimationEndedCallback(0)
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	6016      	str	r6, [r2, #0]
        fadeAnimationRunning(false),
 8001260:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
        fadeAnimationCounter(0),
 8001264:	f8a2 3052 	strh.w	r3, [r2, #82]	@ 0x52
        fadeAnimationDelay(0),
 8001268:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54
        fadeAnimationEndedCallback(0)
 800126c:	6613      	str	r3, [r2, #96]	@ 0x60
        nextSibling(0),
 800126e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    stateChangedAction(0)
 8001272:	3264      	adds	r2, #100	@ 0x64
 8001274:	42aa      	cmp	r2, r5
 8001276:	d1d9      	bne.n	800122c <_ZN15CollapsibleMenuC1Ev+0x44>
    {
 8001278:	4a21      	ldr	r2, [pc, #132]	@ (8001300 <_ZN15CollapsibleMenuC1Ev+0x118>)
 800127a:	f504 7570 	add.w	r5, r4, #960	@ 0x3c0
 800127e:	f1a4 0628 	sub.w	r6, r4, #40	@ 0x28
        visible = vis;
 8001282:	f04f 0900 	mov.w	r9, #0
 8001286:	f8c4 2428 	str.w	r2, [r4, #1064]	@ 0x428
        menuElements[i].setAction(onButtonPressed);
 800128a:	f504 6885 	add.w	r8, r4, #1064	@ 0x428
        this->pmemfun_1 = pmemfun_1;
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <_ZN15CollapsibleMenuC1Ev+0x11c>)
        menuElements[i].setFadeAnimationEndedAction(menuElementFadeAnimationEndedCallback);
 8001290:	f504 6789 	add.w	r7, r4, #1096	@ 0x448
    selectedElementIndex(0),
 8001294:	f884 3424 	strb.w	r3, [r4, #1060]	@ 0x424
 8001298:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
    {
 800129c:	4a1a      	ldr	r2, [pc, #104]	@ (8001308 <_ZN15CollapsibleMenuC1Ev+0x120>)
        this->pobject = pobject;
 800129e:	f8c4 442c 	str.w	r4, [r4, #1068]	@ 0x42c
    {
 80012a2:	f8c4 2438 	str.w	r2, [r4, #1080]	@ 0x438
        this->pmemfun_1 = pmemfun_1;
 80012a6:	4a19      	ldr	r2, [pc, #100]	@ (800130c <_ZN15CollapsibleMenuC1Ev+0x124>)
 80012a8:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 80012ac:	f8c4 2440 	str.w	r2, [r4, #1088]	@ 0x440
    {
 80012b0:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <_ZN15CollapsibleMenuC1Ev+0x128>)
        this->pobject = pobject;
 80012b2:	f8c4 443c 	str.w	r4, [r4, #1084]	@ 0x43c
    {
 80012b6:	f8c4 2448 	str.w	r2, [r4, #1096]	@ 0x448
        this->pmemfun_1 = pmemfun_1;
 80012ba:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <_ZN15CollapsibleMenuC1Ev+0x12c>)
 80012bc:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
        this->pobject = pobject;
 80012c0:	f8c4 444c 	str.w	r4, [r4, #1100]	@ 0x44c
        this->pmemfun_1 = pmemfun_1;
 80012c4:	f8c4 2450 	str.w	r2, [r4, #1104]	@ 0x450
 80012c8:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
    stateChangedAction(0)
 80012cc:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
        menuElements[i].setMoveAnimationEndedAction(menuElementMoveAnimationEndedCallback);
 80012d0:	f504 6387 	add.w	r3, r4, #1080	@ 0x438
 80012d4:	f885 9025 	strb.w	r9, [r5, #37]	@ 0x25
        action = &callback;
 80012d8:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
        add(menuElements[i]);
 80012dc:	4629      	mov	r1, r5
        fadeAnimationEndedCallback = &callback;
 80012de:	662f      	str	r7, [r5, #96]	@ 0x60
    for (int i = MAX_NUMBER_OF_ELEMENTS - 1; i >= 0; i--)
 80012e0:	3d64      	subs	r5, #100	@ 0x64
        moveAnimationEndedCallback = &callback;
 80012e2:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
        add(menuElements[i]);
 80012e6:	4620      	mov	r0, r4
 80012e8:	f011 fd32 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for (int i = MAX_NUMBER_OF_ELEMENTS - 1; i >= 0; i--)
 80012ec:	42ae      	cmp	r6, r5
 80012ee:	d1ef      	bne.n	80012d0 <_ZN15CollapsibleMenuC1Ev+0xe8>
}
 80012f0:	4620      	mov	r0, r4
 80012f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012f6:	bf00      	nop
 80012f8:	080217e0 	.word	0x080217e0
 80012fc:	080228a0 	.word	0x080228a0
 8001300:	08022930 	.word	0x08022930
 8001304:	08000fe1 	.word	0x08000fe1
 8001308:	08022948 	.word	0x08022948
 800130c:	08000f8b 	.word	0x08000f8b
 8001310:	08022960 	.word	0x08022960
 8001314:	0800146f 	.word	0x0800146f

08001318 <_ZN15CollapsibleMenu14addMenuElementERKN8touchgfx6BitmapES3_>:
{
 8001318:	b538      	push	{r3, r4, r5, lr}
    menuElements[size].setBitmaps(elementBitmap, elementPressedBitmap);
 800131a:	2564      	movs	r5, #100	@ 0x64
 800131c:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
{
 8001320:	4604      	mov	r4, r0
    menuElements[size].setBitmaps(elementBitmap, elementPressedBitmap);
 8001322:	fb05 0003 	mla	r0, r5, r3, r0
 8001326:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001328:	303c      	adds	r0, #60	@ 0x3c
 800132a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800132c:	4798      	blx	r3
    menuElements[size].setVisible(true);
 800132e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8001332:	2201      	movs	r2, #1
 8001334:	fb05 4503 	mla	r5, r5, r3, r4
    size++;
 8001338:	4413      	add	r3, r2
 800133a:	f885 2061 	strb.w	r2, [r5, #97]	@ 0x61
 800133e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8001342:	bd38      	pop	{r3, r4, r5, pc}

08001344 <_ZN15CollapsibleMenu15setElementSpaceEt>:
    elementSpace = space;
 8001344:	8601      	strh	r1, [r0, #48]	@ 0x30
}
 8001346:	4770      	bx	lr

08001348 <_ZN15CollapsibleMenu18setExpandDirectionENS_15ExpandDirectionE>:
    expandDirection = direction;
 8001348:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
}
 800134c:	4770      	bx	lr

0800134e <_ZN15CollapsibleMenu22finilizeInitializationEv>:
{
 800134e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001350:	4604      	mov	r4, r0
    for (int i = 0; i < size; i++)
 8001352:	2300      	movs	r3, #0
 8001354:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8001358:	4622      	mov	r2, r4
    int newHeight = 0;
 800135a:	461d      	mov	r5, r3
        if (i < size - 1)
 800135c:	1e46      	subs	r6, r0, #1
    int newWidth = 0;
 800135e:	4619      	mov	r1, r3
    for (int i = 0; i < size; i++)
 8001360:	4298      	cmp	r0, r3
 8001362:	dc11      	bgt.n	8001388 <_ZN15CollapsibleMenu22finilizeInitializationEv+0x3a>
    setWidth(newWidth);
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	b209      	sxth	r1, r1
 8001368:	4620      	mov	r0, r4
    for (int i = 0; i < size; i++)
 800136a:	2600      	movs	r6, #0
    setWidth(newWidth);
 800136c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800136e:	4798      	blx	r3
    setHeight(newHeight);
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	b229      	sxth	r1, r5
 8001374:	f104 053c 	add.w	r5, r4, #60	@ 0x3c
 8001378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800137a:	4620      	mov	r0, r4
 800137c:	4798      	blx	r3
    for (int i = 0; i < size; i++)
 800137e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8001382:	42b3      	cmp	r3, r6
 8001384:	dc11      	bgt.n	80013aa <_ZN15CollapsibleMenu22finilizeInitializationEv+0x5c>
}
 8001386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        newWidth += menuElements[i].getWidth();
 8001388:	f9b2 7044 	ldrsh.w	r7, [r2, #68]	@ 0x44
        if (i < size - 1)
 800138c:	429e      	cmp	r6, r3
 800138e:	f102 0264 	add.w	r2, r2, #100	@ 0x64
    for (int i = 0; i < size; i++)
 8001392:	f103 0301 	add.w	r3, r3, #1
        newWidth += menuElements[i].getWidth();
 8001396:	4439      	add	r1, r7
            newWidth += elementSpace;
 8001398:	bfc4      	itt	gt
 800139a:	8e27      	ldrhgt	r7, [r4, #48]	@ 0x30
 800139c:	19c9      	addgt	r1, r1, r7
        newHeight = (menuElements[i].getHeight() > newHeight) ? menuElements[i].getHeight() : newHeight;
 800139e:	f932 7c1e 	ldrsh.w	r7, [r2, #-30]
 80013a2:	42bd      	cmp	r5, r7
 80013a4:	bfb8      	it	lt
 80013a6:	463d      	movlt	r5, r7
    for (int i = 0; i < size; i++)
 80013a8:	e7da      	b.n	8001360 <_ZN15CollapsibleMenu22finilizeInitializationEv+0x12>
            menuElements[i].setXY(getWidth() - menuElements[i].getWidth(), 0);
 80013aa:	682b      	ldr	r3, [r5, #0]
        if (expandDirection == LEFT)
 80013ac:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
            menuElements[i].setXY(getWidth() - menuElements[i].getWidth(), 0);
 80013b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (expandDirection == LEFT)
 80013b2:	b942      	cbnz	r2, 80013c6 <_ZN15CollapsibleMenu22finilizeInitializationEv+0x78>
            menuElements[i].setXY(getWidth() - menuElements[i].getWidth(), 0);
 80013b4:	8921      	ldrh	r1, [r4, #8]
 80013b6:	8928      	ldrh	r0, [r5, #8]
 80013b8:	1a09      	subs	r1, r1, r0
 80013ba:	b209      	sxth	r1, r1
            menuElements[i].setXY(0, 0);
 80013bc:	4628      	mov	r0, r5
    for (int i = 0; i < size; i++)
 80013be:	3601      	adds	r6, #1
 80013c0:	3564      	adds	r5, #100	@ 0x64
            menuElements[i].setXY(0, 0);
 80013c2:	4798      	blx	r3
    for (int i = 0; i < size; i++)
 80013c4:	e7db      	b.n	800137e <_ZN15CollapsibleMenu22finilizeInitializationEv+0x30>
            menuElements[i].setXY(0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	4611      	mov	r1, r2
 80013ca:	e7f7      	b.n	80013bc <_ZN15CollapsibleMenu22finilizeInitializationEv+0x6e>

080013cc <_ZN15CollapsibleMenu7fadeOutEi>:
{
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < size; i++)
 80013ce:	2600      	movs	r6, #0
{
 80013d0:	4604      	mov	r4, r0
 80013d2:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 80013d6:	4637      	mov	r7, r6
    for (int i = 0; i < size; i++)
 80013d8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80013dc:	42b3      	cmp	r3, r6
 80013de:	dc03      	bgt.n	80013e8 <_ZN15CollapsibleMenu7fadeOutEi+0x1c>
    fadedOut = true;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f884 3033 	strb.w	r3, [r4, #51]	@ 0x33
}
 80013e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        menuElements[i].invalidate();
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	4628      	mov	r0, r5
 80013ec:	f885 7025 	strb.w	r7, [r5, #37]	@ 0x25
    for (int i = 0; i < size; i++)
 80013f0:	3601      	adds	r6, #1
        menuElements[i].invalidate();
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	3564      	adds	r5, #100	@ 0x64
 80013f6:	4798      	blx	r3
    for (int i = 0; i < size; i++)
 80013f8:	e7ee      	b.n	80013d8 <_ZN15CollapsibleMenu7fadeOutEi+0xc>

080013fa <_ZN15CollapsibleMenu10isFadedOutEv>:
}
 80013fa:	f890 0033 	ldrb.w	r0, [r0, #51]	@ 0x33
 80013fe:	4770      	bx	lr

08001400 <_ZN15CollapsibleMenu12collapseMenuEv>:
    }
}

void CollapsibleMenu::collapseMenu()
{
    if (isExpanded)
 8001400:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8001404:	b13b      	cbz	r3, 8001416 <_ZN15CollapsibleMenu12collapseMenuEv+0x16>
    {
        buttonPressedHandler(menuElements[selectedElementIndex]);
 8001406:	f890 3424 	ldrb.w	r3, [r0, #1060]	@ 0x424
 800140a:	2264      	movs	r2, #100	@ 0x64
 800140c:	fb02 0103 	mla	r1, r2, r3, r0
 8001410:	313c      	adds	r1, #60	@ 0x3c
 8001412:	f7ff bde5 	b.w	8000fe0 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>
    }
}
 8001416:	4770      	bx	lr

08001418 <_ZN15CollapsibleMenu15handleTickEventEv>:
    return selectedElementIndex;
}

void CollapsibleMenu::handleTickEvent()
{
    timeoutCounter++;
 8001418:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    if (timeoutCounter >= timeout)
 800141a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    timeoutCounter++;
 800141c:	3201      	adds	r2, #1
    if (timeoutCounter >= timeout)
 800141e:	429a      	cmp	r2, r3
    timeoutCounter++;
 8001420:	6382      	str	r2, [r0, #56]	@ 0x38
    if (timeoutCounter >= timeout)
 8001422:	db01      	blt.n	8001428 <_ZN15CollapsibleMenu15handleTickEventEv+0x10>
    {
        collapseMenu(); // Will also unregister time
 8001424:	f7ff bfec 	b.w	8001400 <_ZN15CollapsibleMenu12collapseMenuEv>
    }
}
 8001428:	4770      	bx	lr

0800142a <_ZN15CollapsibleMenu10expandMenuEv>:
    if (!isExpanded)
 800142a:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 800142e:	b93b      	cbnz	r3, 8001440 <_ZN15CollapsibleMenu10expandMenuEv+0x16>
        buttonPressedHandler(menuElements[selectedElementIndex]);
 8001430:	f890 3424 	ldrb.w	r3, [r0, #1060]	@ 0x424
 8001434:	2264      	movs	r2, #100	@ 0x64
 8001436:	fb02 0103 	mla	r1, r2, r3, r0
 800143a:	313c      	adds	r1, #60	@ 0x3c
 800143c:	f7ff bdd0 	b.w	8000fe0 <_ZN15CollapsibleMenu20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>
}
 8001440:	4770      	bx	lr

08001442 <_ZN15CollapsibleMenu10setTimeoutEi>:
    timeout = newTimeout;
 8001442:	6341      	str	r1, [r0, #52]	@ 0x34
}
 8001444:	4770      	bx	lr

08001446 <_ZN15CollapsibleMenu23anyFadeAnimationRunningEv>:
{
 8001446:	b570      	push	{r4, r5, r6, lr}
 8001448:	4604      	mov	r4, r0
 800144a:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
    for (int i = 0; i < size; i++)
 800144e:	2600      	movs	r6, #0
 8001450:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8001454:	42b3      	cmp	r3, r6
 8001456:	dc01      	bgt.n	800145c <_ZN15CollapsibleMenu23anyFadeAnimationRunningEv+0x16>
    return false;
 8001458:	2000      	movs	r0, #0
}
 800145a:	bd70      	pop	{r4, r5, r6, pc}
        if (menuElements[i].isRunning())
 800145c:	682b      	ldr	r3, [r5, #0]
 800145e:	4628      	mov	r0, r5
 8001460:	3564      	adds	r5, #100	@ 0x64
 8001462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001464:	4798      	blx	r3
 8001466:	2800      	cmp	r0, #0
 8001468:	d1f7      	bne.n	800145a <_ZN15CollapsibleMenu23anyFadeAnimationRunningEv+0x14>
    for (int i = 0; i < size; i++)
 800146a:	3601      	adds	r6, #1
 800146c:	e7f0      	b.n	8001450 <_ZN15CollapsibleMenu23anyFadeAnimationRunningEv+0xa>

0800146e <_ZN15CollapsibleMenu36menuElementFadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_12MoveAnimatorINS0_6ButtonEEEEE>:
{
 800146e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001470:	4604      	mov	r4, r0
    if (anyFadeAnimationRunning())
 8001472:	f7ff ffe8 	bl	8001446 <_ZN15CollapsibleMenu23anyFadeAnimationRunningEv>
 8001476:	4605      	mov	r5, r0
 8001478:	b940      	cbnz	r0, 800148c <_ZN15CollapsibleMenu36menuElementFadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_12MoveAnimatorINS0_6ButtonEEEEE+0x1e>
    if (currentAnimationState == FADE_IN)
 800147a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800147e:	2b03      	cmp	r3, #3
 8001480:	d105      	bne.n	800148e <_ZN15CollapsibleMenu36menuElementFadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_12MoveAnimatorINS0_6ButtonEEEEE+0x20>
        currentAnimationState = NO_ANIMATION;
 8001482:	2305      	movs	r3, #5
        fadedOut = false;
 8001484:	f884 0033 	strb.w	r0, [r4, #51]	@ 0x33
        currentAnimationState = NO_ANIMATION;
 8001488:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800148c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (currentAnimationState == FADE_OUT)
 800148e:	2b02      	cmp	r3, #2
 8001490:	d115      	bne.n	80014be <_ZN15CollapsibleMenu36menuElementFadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_12MoveAnimatorINS0_6ButtonEEEEE+0x50>
        currentAnimationState = NO_ANIMATION;
 8001492:	2305      	movs	r3, #5
 8001494:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8001498:	4607      	mov	r7, r0
 800149a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        fadedOut = true;
 800149e:	2301      	movs	r3, #1
 80014a0:	f884 3033 	strb.w	r3, [r4, #51]	@ 0x33
        for (int i = 0; i < size; i++)
 80014a4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80014a8:	429d      	cmp	r5, r3
 80014aa:	daef      	bge.n	800148c <_ZN15CollapsibleMenu36menuElementFadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_12MoveAnimatorINS0_6ButtonEEEEE+0x1e>
            menuElements[i].invalidate();
 80014ac:	6833      	ldr	r3, [r6, #0]
 80014ae:	4630      	mov	r0, r6
 80014b0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
        for (int i = 0; i < size; i++)
 80014b4:	3501      	adds	r5, #1
            menuElements[i].invalidate();
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	3664      	adds	r6, #100	@ 0x64
 80014ba:	4798      	blx	r3
        for (int i = 0; i < size; i++)
 80014bc:	e7f2      	b.n	80014a4 <_ZN15CollapsibleMenu36menuElementFadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_12MoveAnimatorINS0_6ButtonEEEEE+0x36>
    else if (currentAnimationState == FADE_IN_AND_EXPAND)
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d1e4      	bne.n	800148c <_ZN15CollapsibleMenu36menuElementFadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_12MoveAnimatorINS0_6ButtonEEEEE+0x1e>
        currentAnimationState = NO_ANIMATION;
 80014c2:	2305      	movs	r3, #5
        fadedOut = false;
 80014c4:	f884 0033 	strb.w	r0, [r4, #51]	@ 0x33
        expandMenu();
 80014c8:	4620      	mov	r0, r4
        currentAnimationState = NO_ANIMATION;
 80014ca:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 80014ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        expandMenu();
 80014d2:	f7ff bfaa 	b.w	800142a <_ZN15CollapsibleMenu10expandMenuEv>

080014d6 <_ZN15CollapsibleMenu23getSelectedElementIndexEv>:
}
 80014d6:	f890 0424 	ldrb.w	r0, [r0, #1060]	@ 0x424
 80014da:	4770      	bx	lr

080014dc <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv>:
     *
     *        Execute next step in move animation and stop the timer if necessary.
     */
    void nextMoveAnimationStep()
    {
        if (moveAnimationRunning)
 80014dc:	f890 3033 	ldrb.w	r3, [r0, #51]	@ 0x33
    void nextMoveAnimationStep()
 80014e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e4:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 80014e6:	b12b      	cbz	r3, 80014f4 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x18>
        {
            if (moveAnimationCounter < moveAnimationDelay)
 80014e8:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 80014ea:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80014ec:	428a      	cmp	r2, r1
 80014ee:	d203      	bcs.n	80014f8 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x1c>
            {
                // Just wait for the delay time to pass
                moveAnimationCounter++;
 80014f0:	3201      	adds	r2, #1
 80014f2:	8682      	strh	r2, [r0, #52]	@ 0x34
                        moveAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 80014f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80014f8:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80014fa:	18c8      	adds	r0, r1, r3
 80014fc:	4282      	cmp	r2, r0
 80014fe:	d917      	bls.n	8001530 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x54>
                    moveAnimationRunning = false;
 8001500:	2300      	movs	r3, #0
 8001502:	f884 3033 	strb.w	r3, [r4, #51]	@ 0x33
                    moveAnimationCounter = 0;
 8001506:	86a3      	strh	r3, [r4, #52]	@ 0x34
                    Application::getInstance()->unregisterTimerWidget(this);
 8001508:	f018 fb54 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800150c:	4621      	mov	r1, r4
 800150e:	f018 fb87 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8001512:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8001514:	2800      	cmp	r0, #0
 8001516:	d0ed      	beq.n	80014f4 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x18>
 8001518:	6803      	ldr	r3, [r0, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4798      	blx	r3
 800151e:	2800      	cmp	r0, #0
 8001520:	d0e8      	beq.n	80014f4 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x18>
                        moveAnimationEndedCallback->execute(*this);
 8001522:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8001524:	4621      	mov	r1, r4
 8001526:	6803      	ldr	r3, [r0, #0]
    }
 8001528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        moveAnimationEndedCallback->execute(*this);
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	4718      	bx	r3
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8001530:	1a52      	subs	r2, r2, r1
 8001532:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 8001534:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8001536:	b295      	uxth	r5, r2
 8001538:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800153a:	1a52      	subs	r2, r2, r1
 800153c:	4628      	mov	r0, r5
 800153e:	2100      	movs	r1, #0
 8001540:	b212      	sxth	r2, r2
 8001542:	47b0      	blx	r6
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8001544:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8001546:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800154a:	4606      	mov	r6, r0
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800154c:	2100      	movs	r1, #0
 800154e:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 8001550:	1ad2      	subs	r2, r2, r3
 8001552:	4628      	mov	r0, r5
 8001554:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8001556:	b212      	sxth	r2, r2
 8001558:	47b8      	blx	r7
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800155a:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 800155c:	18c2      	adds	r2, r0, r3
 800155e:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 8001560:	4620      	mov	r0, r4
 8001562:	18f1      	adds	r1, r6, r3
 8001564:	b212      	sxth	r2, r2
 8001566:	b209      	sxth	r1, r1
 8001568:	f7ff fc50 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 800156c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800156e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
                    moveAnimationCounter++;
 8001570:	3301      	adds	r3, #1
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8001572:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
                    moveAnimationCounter++;
 8001574:	b29b      	uxth	r3, r3
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8001576:	440a      	add	r2, r1
 8001578:	4293      	cmp	r3, r2
                    moveAnimationCounter++;
 800157a:	86a3      	strh	r3, [r4, #52]	@ 0x34
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800157c:	d9ba      	bls.n	80014f4 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x18>
 800157e:	e7bf      	b.n	8001500 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x24>

08001580 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv>:
     *
     *        Execute next step in fade animation and stop the timer if necessary.
     */
    void nextFadeAnimationStep()
    {
        if (fadeAnimationRunning)
 8001580:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
    void nextFadeAnimationStep()
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8001588:	b143      	cbz	r3, 800159c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv+0x1c>
        {
            if (fadeAnimationCounter < fadeAnimationDelay)
 800158a:	f8b0 0052 	ldrh.w	r0, [r0, #82]	@ 0x52
 800158e:	f8b4 1054 	ldrh.w	r1, [r4, #84]	@ 0x54
 8001592:	4288      	cmp	r0, r1
 8001594:	d203      	bcs.n	800159e <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv+0x1e>
            {
                // Just wait for the delay time to pass
                fadeAnimationCounter++;
 8001596:	3001      	adds	r0, #1
 8001598:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
                        fadeAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 800159c:	bd70      	pop	{r4, r5, r6, pc}
                if (fadeAnimationCounter <= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800159e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80015a2:	18ca      	adds	r2, r1, r3
 80015a4:	4290      	cmp	r0, r2
 80015a6:	d918      	bls.n	80015da <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv+0x5a>
                    fadeAnimationRunning = false;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
                    fadeAnimationDuration = 0;
 80015ae:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
                    Application::getInstance()->unregisterTimerWidget(this);
 80015b2:	f018 faff 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 80015b6:	4621      	mov	r1, r4
 80015b8:	f018 fb32 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 80015bc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80015be:	2800      	cmp	r0, #0
 80015c0:	d0ec      	beq.n	800159c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv+0x1c>
 80015c2:	6803      	ldr	r3, [r0, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	4798      	blx	r3
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d0e7      	beq.n	800159c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv+0x1c>
                        fadeAnimationEndedCallback->execute(*this);
 80015cc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80015ce:	4621      	mov	r1, r4
 80015d0:	6803      	ldr	r3, [r0, #0]
    }
 80015d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4718      	bx	r3
                    int16_t deltaAlpha = (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80015da:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 80015de:	1a40      	subs	r0, r0, r1
 80015e0:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 80015e4:	2100      	movs	r1, #0
 80015e6:	b280      	uxth	r0, r0
 80015e8:	1b52      	subs	r2, r2, r5
 80015ea:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
 80015ec:	b212      	sxth	r2, r2
 80015ee:	47a8      	blx	r5
                    T::setAlpha(fadeAnimationStartAlpha + deltaAlpha);
 80015f0:	f8b4 3058 	ldrh.w	r3, [r4, #88]	@ 0x58
 80015f4:	4418      	add	r0, r3
        this->alpha = alpha;
 80015f6:	f884 0032 	strb.w	r0, [r4, #50]	@ 0x32
                    T::invalidate();
 80015fa:	4620      	mov	r0, r4
 80015fc:	f018 fec5 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
                    fadeAnimationCounter++;
 8001600:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8001604:	f8b4 2054 	ldrh.w	r2, [r4, #84]	@ 0x54
                    fadeAnimationCounter++;
 8001608:	3301      	adds	r3, #1
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800160a:	f8b4 1056 	ldrh.w	r1, [r4, #86]	@ 0x56
                    fadeAnimationCounter++;
 800160e:	b29b      	uxth	r3, r3
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8001610:	440a      	add	r2, r1
 8001612:	4293      	cmp	r3, r2
                    fadeAnimationCounter++;
 8001614:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8001618:	d9c0      	bls.n	800159c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv+0x1c>
 800161a:	e7c5      	b.n	80015a8 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv+0x28>

0800161c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800161c:	b510      	push	{r4, lr}
 800161e:	4604      	mov	r4, r0
        nextMoveAnimationStep();
 8001620:	f7ff ff5c 	bl	80014dc <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv>
        nextFadeAnimationStep();
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff ffab 	bl	8001580 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv>
    }
 800162a:	bd10      	pop	{r4, pc}

0800162c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE18startFadeAnimationEhtPFstsstE>:
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 800162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162e:	461d      	mov	r5, r3
        if (!fadeAnimationRunning)
 8001630:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 8001634:	4604      	mov	r4, r0
 8001636:	460f      	mov	r7, r1
 8001638:	4616      	mov	r6, r2
        if (!fadeAnimationRunning)
 800163a:	b923      	cbnz	r3, 8001646 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE18startFadeAnimationEhtPFstsstE+0x1a>
            Application::getInstance()->registerTimerWidget(this);
 800163c:	f018 faba 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8001640:	4621      	mov	r1, r4
 8001642:	f018 fabd 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 8001646:	2300      	movs	r3, #0
        fadeAnimationDuration = duration;
 8001648:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
        fadeAnimationEndAlpha = endAlpha;
 800164c:	f8a4 705a 	strh.w	r7, [r4, #90]	@ 0x5a
        fadeAnimationCounter = 0;
 8001650:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
        fadeAnimationStartAlpha = T::getAlpha();
 8001654:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8001658:	65e5      	str	r5, [r4, #92]	@ 0x5c
        fadeAnimationStartAlpha = T::getAlpha();
 800165a:	f8a4 3058 	strh.w	r3, [r4, #88]	@ 0x58
        fadeAnimationRunning = true;
 800165e:	2301      	movs	r3, #1
 8001660:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 8001664:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001666:	b913      	cbnz	r3, 800166e <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE18startFadeAnimationEhtPFstsstE+0x42>
            nextFadeAnimationStep(); // Set end alpha and shut down
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff ff89 	bl	8001580 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE21nextFadeAnimationStepEv>
    }
 800166e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001670 <_ZN15CollapsibleMenu6fadeInEi>:
{
 8001670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < size; i++)
 8001674:	2300      	movs	r3, #0
{
 8001676:	4606      	mov	r6, r0
    for (int i = 0; i < size; i++)
 8001678:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800167c:	2464      	movs	r4, #100	@ 0x64
 800167e:	3061      	adds	r0, #97	@ 0x61
 8001680:	2501      	movs	r5, #1
 8001682:	429a      	cmp	r2, r3
 8001684:	dc1d      	bgt.n	80016c2 <_ZN15CollapsibleMenu6fadeInEi+0x52>
    if (isExpanded)
 8001686:	f896 702e 	ldrb.w	r7, [r6, #46]	@ 0x2e
 800168a:	f106 043c 	add.w	r4, r6, #60	@ 0x3c
 800168e:	b9ef      	cbnz	r7, 80016cc <_ZN15CollapsibleMenu6fadeInEi+0x5c>
            menuElements[i].startFadeAnimation(255, duration);
 8001690:	b28d      	uxth	r5, r1
                menuElements[i].startFadeAnimation(255, 1);
 8001692:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8001710 <_ZN15CollapsibleMenu6fadeInEi+0xa0>
        for (int i = 0; i < size; i++)
 8001696:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 800169a:	42bb      	cmp	r3, r7
 800169c:	dd1e      	ble.n	80016dc <_ZN15CollapsibleMenu6fadeInEi+0x6c>
            if (i == selectedElementIndex)
 800169e:	f896 2424 	ldrb.w	r2, [r6, #1060]	@ 0x424
                menuElements[i].setFadeAnimationDelay(0);
 80016a2:	6823      	ldr	r3, [r4, #0]
            if (i == selectedElementIndex)
 80016a4:	42ba      	cmp	r2, r7
                menuElements[i].setFadeAnimationDelay(0);
 80016a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if (i == selectedElementIndex)
 80016a8:	d12b      	bne.n	8001702 <_ZN15CollapsibleMenu6fadeInEi+0x92>
                menuElements[i].setFadeAnimationDelay(0);
 80016aa:	2100      	movs	r1, #0
 80016ac:	4620      	mov	r0, r4
 80016ae:	4798      	blx	r3
                menuElements[i].startFadeAnimation(255, duration);
 80016b0:	4643      	mov	r3, r8
 80016b2:	462a      	mov	r2, r5
                menuElements[i].startFadeAnimation(255, 1);
 80016b4:	4620      	mov	r0, r4
 80016b6:	21ff      	movs	r1, #255	@ 0xff
        for (int i = 0; i < size; i++)
 80016b8:	3701      	adds	r7, #1
 80016ba:	3464      	adds	r4, #100	@ 0x64
                menuElements[i].startFadeAnimation(255, 1);
 80016bc:	f7ff ffb6 	bl	800162c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE18startFadeAnimationEhtPFstsstE>
        for (int i = 0; i < size; i++)
 80016c0:	e7e9      	b.n	8001696 <_ZN15CollapsibleMenu6fadeInEi+0x26>
 80016c2:	fb04 f703 	mul.w	r7, r4, r3
    for (int i = 0; i < size; i++)
 80016c6:	3301      	adds	r3, #1
 80016c8:	55c5      	strb	r5, [r0, r7]
 80016ca:	e7da      	b.n	8001682 <_ZN15CollapsibleMenu6fadeInEi+0x12>
        for (int i = 0; i < size; i++)
 80016cc:	2700      	movs	r7, #0
            menuElements[i].startFadeAnimation(255, duration);
 80016ce:	b28d      	uxth	r5, r1
 80016d0:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8001710 <_ZN15CollapsibleMenu6fadeInEi+0xa0>
        for (int i = 0; i < size; i++)
 80016d4:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 80016d8:	42bb      	cmp	r3, r7
 80016da:	dc04      	bgt.n	80016e6 <_ZN15CollapsibleMenu6fadeInEi+0x76>
    currentAnimationState = FADE_IN;
 80016dc:	2303      	movs	r3, #3
 80016de:	f886 302c 	strb.w	r3, [r6, #44]	@ 0x2c
}
 80016e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            menuElements[i].setFadeAnimationDelay(0);
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	4620      	mov	r0, r4
 80016ea:	2100      	movs	r1, #0
        for (int i = 0; i < size; i++)
 80016ec:	3701      	adds	r7, #1
            menuElements[i].setFadeAnimationDelay(0);
 80016ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80016f0:	4798      	blx	r3
            menuElements[i].startFadeAnimation(255, duration);
 80016f2:	4620      	mov	r0, r4
 80016f4:	4643      	mov	r3, r8
 80016f6:	462a      	mov	r2, r5
 80016f8:	21ff      	movs	r1, #255	@ 0xff
 80016fa:	3464      	adds	r4, #100	@ 0x64
 80016fc:	f7ff ff96 	bl	800162c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_6ButtonEEEE18startFadeAnimationEhtPFstsstE>
        for (int i = 0; i < size; i++)
 8001700:	e7e8      	b.n	80016d4 <_ZN15CollapsibleMenu6fadeInEi+0x64>
                menuElements[i].setFadeAnimationDelay(duration);
 8001702:	4629      	mov	r1, r5
 8001704:	4620      	mov	r0, r4
 8001706:	4798      	blx	r3
                menuElements[i].startFadeAnimation(255, 1);
 8001708:	4643      	mov	r3, r8
 800170a:	2201      	movs	r2, #1
 800170c:	e7d2      	b.n	80016b4 <_ZN15CollapsibleMenu6fadeInEi+0x44>
 800170e:	bf00      	nop
 8001710:	0801b59b 	.word	0x0801b59b

08001714 <_ZN15CollapsibleMenu15fadeInAndExpandEi>:
{
 8001714:	b510      	push	{r4, lr}
 8001716:	4604      	mov	r4, r0
    fadeIn(duration);
 8001718:	f7ff ffaa 	bl	8001670 <_ZN15CollapsibleMenu6fadeInEi>
    currentAnimationState = FADE_IN_AND_EXPAND;
 800171c:	2304      	movs	r3, #4
 800171e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8001722:	bd10      	pop	{r4, pc}

08001724 <_ZN8touchgfx9Presenter8activateEv>:
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 8001724:	4770      	bx	lr

08001726 <_ZN8touchgfx9Presenter10deactivateEv>:
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 8001726:	4770      	bx	lr

08001728 <_ZN13ModelListener11timeUpdatedE4Time>:
    void bind(Model* m)
    {
        model = m;
    }

    virtual void timeUpdated(Time time) {}
 8001728:	b082      	sub	sp, #8
 800172a:	ab02      	add	r3, sp, #8
 800172c:	e903 0006 	stmdb	r3, {r1, r2}
 8001730:	b002      	add	sp, #8
 8001732:	4770      	bx	lr

08001734 <_ZN13ModelListener20screenSaverMinorTickEv>:

    virtual void mcuLoadUpdated(uint8_t mcuLoad) {}

    virtual void screenSaverMinorTick() {}
 8001734:	4770      	bx	lr

08001736 <_ZN13ModelListener20screenSaverMajorTickEv>:
    virtual void screenSaverMajorTick() {}
 8001736:	4770      	bx	lr

08001738 <_ZN13DemoPresenter14mcuLoadUpdatedEh>:
    static_cast<FrontendApplication*>(Application::getInstance())->gotoMainMenuScreen();
}

void DemoPresenter::mcuLoadUpdated(uint8_t mcuLoad)
{
    viewInterface.updateProcessorLoad(mcuLoad);
 8001738:	68c0      	ldr	r0, [r0, #12]
 800173a:	6803      	ldr	r3, [r0, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	4718      	bx	r3

08001740 <_ZThn4_N13DemoPresenter14mcuLoadUpdatedEh>:
{
public:
    DemoPresenter(DemoViewInterface& view);

    void backOptionSelected();
    virtual void mcuLoadUpdated(uint8_t mcuLoad);
 8001740:	f1a0 0004 	sub.w	r0, r0, #4
 8001744:	f7ff bff8 	b.w	8001738 <_ZN13DemoPresenter14mcuLoadUpdatedEh>

08001748 <_ZN13DemoPresenterD1Ev>:
class DemoPresenter : public Presenter, public ModelListener
 8001748:	4770      	bx	lr

0800174a <_ZThn4_N13DemoPresenterD1Ev>:
 800174a:	3804      	subs	r0, #4
 800174c:	4770      	bx	lr

0800174e <_ZN13DemoPresenterD0Ev>:
 800174e:	b510      	push	{r4, lr}
 8001750:	4604      	mov	r4, r0
 8001752:	2110      	movs	r1, #16
 8001754:	f01d f9e7 	bl	801eb26 <_ZdlPvj>
 8001758:	4620      	mov	r0, r4
 800175a:	bd10      	pop	{r4, pc}

0800175c <_ZThn4_N13DemoPresenterD0Ev>:
 800175c:	f1a0 0004 	sub.w	r0, r0, #4
 8001760:	e7f5      	b.n	800174e <_ZN13DemoPresenterD0Ev>
	...

08001764 <_ZN13DemoPresenterC1ER17DemoViewInterface>:
    ModelListener() : model(0) {}
 8001764:	2200      	movs	r2, #0
    viewInterface(view)
 8001766:	60c1      	str	r1, [r0, #12]
 8001768:	6082      	str	r2, [r0, #8]
 800176a:	4a04      	ldr	r2, [pc, #16]	@ (800177c <_ZN13DemoPresenterC1ER17DemoViewInterface+0x18>)
DemoPresenter::DemoPresenter(DemoViewInterface& view) :
 800176c:	b510      	push	{r4, lr}
    viewInterface(view)
 800176e:	f102 0408 	add.w	r4, r2, #8
 8001772:	3224      	adds	r2, #36	@ 0x24
 8001774:	6004      	str	r4, [r0, #0]
 8001776:	6042      	str	r2, [r0, #4]
}
 8001778:	bd10      	pop	{r4, pc}
 800177a:	bf00      	nop
 800177c:	08021868 	.word	0x08021868

08001780 <_ZN13DemoPresenter18backOptionSelectedEv>:
{
 8001780:	b508      	push	{r3, lr}
    static_cast<FrontendApplication*>(Application::getInstance())->gotoMainMenuScreen();
 8001782:	f018 fa17 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
}
 8001786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    static_cast<FrontendApplication*>(Application::getInstance())->gotoMainMenuScreen();
 800178a:	f000 bca5 	b.w	80020d8 <_ZN19FrontendApplication18gotoMainMenuScreenEv>
	...

08001790 <_ZN12DotIndicatorD1Ev>:

    add(unselectedDots);
    add(dotHighlighted);
}

DotIndicator::~DotIndicator()
 8001790:	b538      	push	{r3, r4, r5, lr}
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <_ZN12DotIndicatorD1Ev+0x20>)
 8001794:	4604      	mov	r4, r0
 8001796:	f44f 7505 	mov.w	r5, #532	@ 0x214
 800179a:	6003      	str	r3, [r0, #0]
 800179c:	5963      	ldr	r3, [r4, r5]
 800179e:	1960      	adds	r0, r4, r5
 80017a0:	3d2c      	subs	r5, #44	@ 0x2c
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4798      	blx	r3
{
}
 80017a6:	2d5c      	cmp	r5, #92	@ 0x5c
 80017a8:	d1f8      	bne.n	800179c <_ZN12DotIndicatorD1Ev+0xc>
 80017aa:	4620      	mov	r0, r4
 80017ac:	bd38      	pop	{r3, r4, r5, pc}
 80017ae:	bf00      	nop
 80017b0:	080218ac 	.word	0x080218ac

080017b4 <_ZN12DotIndicatorD0Ev>:
DotIndicator::~DotIndicator()
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4604      	mov	r4, r0
}
 80017b8:	f7ff ffea 	bl	8001790 <_ZN12DotIndicatorD1Ev>
 80017bc:	f44f 7111 	mov.w	r1, #580	@ 0x244
 80017c0:	4620      	mov	r0, r4
 80017c2:	f01d f9b0 	bl	801eb26 <_ZdlPvj>
 80017c6:	4620      	mov	r0, r4
 80017c8:	bd10      	pop	{r4, pc}
	...

080017cc <_ZN8touchgfx8DrawableC1Ev>:
        visible(true)
 80017cc:	4a06      	ldr	r2, [pc, #24]	@ (80017e8 <_ZN8touchgfx8DrawableC1Ev+0x1c>)
 80017ce:	6002      	str	r2, [r0, #0]
        this->x = x;
 80017d0:	2200      	movs	r2, #0
        this->width = width;
 80017d2:	e9c0 2201 	strd	r2, r2, [r0, #4]
        this->width = 0;
 80017d6:	e9c0 2203 	strd	r2, r2, [r0, #12]
        nextSibling(0),
 80017da:	e9c0 2205 	strd	r2, r2, [r0, #20]
        nextDrawChainElement(0),
 80017de:	61c2      	str	r2, [r0, #28]
        touchable(false),
 80017e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e4:	8482      	strh	r2, [r0, #36]	@ 0x24
    }
 80017e6:	4770      	bx	lr
 80017e8:	08026458 	.word	0x08026458

080017ec <_ZN12DotIndicatorC1Ev>:
DotIndicator::DotIndicator() :
 80017ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80017f0:	4604      	mov	r4, r0
 80017f2:	2500      	movs	r5, #0
 80017f4:	f7ff ffea 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    currentDot(0)
 80017f8:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <_ZN12DotIndicatorC1Ev+0xb4>)
 80017fa:	4627      	mov	r7, r4
 80017fc:	62a5      	str	r5, [r4, #40]	@ 0x28
 80017fe:	f104 085c 	add.w	r8, r4, #92	@ 0x5c
 8001802:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8001806:	f847 3b2c 	str.w	r3, [r7], #44
 800180a:	4638      	mov	r0, r7
 800180c:	f7ff ffde 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
     *        the specified Direction.
     *
     * @param d The direction to grow in when adding children.
     */
    ListLayout(const Direction d = SOUTH)
        : Container(), direction(d), offset(0)
 8001810:	4b24      	ldr	r3, [pc, #144]	@ (80018a4 <_ZN12DotIndicatorC1Ev+0xb8>)
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8001812:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 80018a8 <_ZN12DotIndicatorC1Ev+0xbc>
    Widget() : Drawable() { }
 8001816:	4640      	mov	r0, r8
 8001818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800181a:	2302      	movs	r3, #2
 800181c:	6565      	str	r5, [r4, #84]	@ 0x54
 800181e:	f504 7a10 	add.w	sl, r4, #576	@ 0x240
 8001822:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8001826:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800182a:	f104 0588 	add.w	r5, r4, #136	@ 0x88
 800182e:	f8ad 6004 	strh.w	r6, [sp, #4]
 8001832:	f7ff ffcb 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    {
        setBitmap(bmp);
 8001836:	a901      	add	r1, sp, #4
 8001838:	4640      	mov	r0, r8
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800183a:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
 800183e:	f8a4 6082 	strh.w	r6, [r4, #130]	@ 0x82
 8001842:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
        setBitmap(bmp);
 8001846:	f015 fd82 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800184a:	4628      	mov	r0, r5
 800184c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8001850:	f7ff ffbc 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8001854:	f8c5 9000 	str.w	r9, [r5]
 8001858:	84ee      	strh	r6, [r5, #38]	@ 0x26
        setBitmap(bmp);
 800185a:	4628      	mov	r0, r5
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800185c:	f885 6028 	strb.w	r6, [r5, #40]	@ 0x28
 8001860:	352c      	adds	r5, #44	@ 0x2c
        setBitmap(bmp);
 8001862:	a901      	add	r1, sp, #4
 8001864:	f015 fd73 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8001868:	45aa      	cmp	sl, r5
 800186a:	d1ee      	bne.n	800184a <_ZN12DotIndicatorC1Ev+0x5e>
    numberOfDots(0),
 800186c:	2500      	movs	r5, #0
    unselectedDots.setXY(0, 0);
 800186e:	4638      	mov	r0, r7
 8001870:	462a      	mov	r2, r5
 8001872:	4629      	mov	r1, r5
    numberOfDots(0),
 8001874:	f8a4 5240 	strh.w	r5, [r4, #576]	@ 0x240
    unselectedDots.setXY(0, 0);
 8001878:	f7ff fab2 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    dotHighlighted.setXY(0, 0);
 800187c:	462a      	mov	r2, r5
 800187e:	4629      	mov	r1, r5
 8001880:	4640      	mov	r0, r8
 8001882:	f7ff faad 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(unselectedDots);
 8001886:	4639      	mov	r1, r7
 8001888:	4620      	mov	r0, r4
 800188a:	f011 fa61 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(dotHighlighted);
 800188e:	4620      	mov	r0, r4
 8001890:	4641      	mov	r1, r8
 8001892:	f011 fa5d 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8001896:	4620      	mov	r0, r4
 8001898:	b002      	add	sp, #8
 800189a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800189e:	bf00      	nop
 80018a0:	080218ac 	.word	0x080218ac
 80018a4:	08025220 	.word	0x08025220
 80018a8:	08025fb8 	.word	0x08025fb8

080018ac <_ZN12DotIndicator20setHighlightPositionEh>:
void DotIndicator::setHighlightPosition(uint8_t index)
{
    currentDot = index;

    // note that index is unsigned
    if (index < numberOfDots)
 80018ac:	f890 3240 	ldrb.w	r3, [r0, #576]	@ 0x240
    currentDot = index;
 80018b0:	f880 1241 	strb.w	r1, [r0, #577]	@ 0x241
    if (index < numberOfDots)
 80018b4:	428b      	cmp	r3, r1
    {
        dotHighlighted.setX(index * dotNormal[0].getWidth());
 80018b6:	bf82      	ittt	hi
 80018b8:	f8b0 3090 	ldrhhi.w	r3, [r0, #144]	@ 0x90
 80018bc:	fb13 f301 	smulbbhi	r3, r3, r1
        rect.x = x;
 80018c0:	f8a0 3060 	strhhi.w	r3, [r0, #96]	@ 0x60
    }
    invalidate();
 80018c4:	6803      	ldr	r3, [r0, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	4718      	bx	r3
	...

080018cc <_ZN12DotIndicator15setNumberOfDotsEh>:
{
 80018cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ce:	4604      	mov	r4, r0
    numberOfDots = size;
 80018d0:	f880 1240 	strb.w	r1, [r0, #576]	@ 0x240
    assert(numberOfDots > 0 && "At least one dot is needed");
 80018d4:	b929      	cbnz	r1, 80018e2 <_ZN12DotIndicator15setNumberOfDotsEh+0x16>
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <_ZN12DotIndicator15setNumberOfDotsEh+0x70>)
 80018d8:	212c      	movs	r1, #44	@ 0x2c
 80018da:	4a19      	ldr	r2, [pc, #100]	@ (8001940 <_ZN12DotIndicator15setNumberOfDotsEh+0x74>)
    assert(numberOfDots <= MAX_SIZE && "Above maximum number of dots");
 80018dc:	4819      	ldr	r0, [pc, #100]	@ (8001944 <_ZN12DotIndicator15setNumberOfDotsEh+0x78>)
 80018de:	f01e fa49 	bl	801fd74 <__assert_func>
 80018e2:	290a      	cmp	r1, #10
 80018e4:	d903      	bls.n	80018ee <_ZN12DotIndicator15setNumberOfDotsEh+0x22>
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <_ZN12DotIndicator15setNumberOfDotsEh+0x7c>)
 80018e8:	212d      	movs	r1, #45	@ 0x2d
 80018ea:	4a15      	ldr	r2, [pc, #84]	@ (8001940 <_ZN12DotIndicator15setNumberOfDotsEh+0x74>)
 80018ec:	e7f6      	b.n	80018dc <_ZN12DotIndicator15setNumberOfDotsEh+0x10>
    unselectedDots.removeAll();
 80018ee:	f100 072c 	add.w	r7, r0, #44	@ 0x2c
 80018f2:	f104 0688 	add.w	r6, r4, #136	@ 0x88
    for (int i = 0; i < numberOfDots; i++)
 80018f6:	2500      	movs	r5, #0
    unselectedDots.removeAll();
 80018f8:	4638      	mov	r0, r7
 80018fa:	f011 fbe4 	bl	80130c6 <_ZN8touchgfx10ListLayout9removeAllEv>
    for (int i = 0; i < numberOfDots; i++)
 80018fe:	f894 3240 	ldrb.w	r3, [r4, #576]	@ 0x240
 8001902:	42ab      	cmp	r3, r5
 8001904:	dc13      	bgt.n	800192e <_ZN12DotIndicator15setNumberOfDotsEh+0x62>
    setWidth(unselectedDots.getWidth());
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	4620      	mov	r0, r4
 800190a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 800190e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001910:	4798      	blx	r3
    setHeight(unselectedDots.getHeight());
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	f9b4 1036 	ldrsh.w	r1, [r4, #54]	@ 0x36
 8001918:	4620      	mov	r0, r4
 800191a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191c:	4798      	blx	r3
    setHighlightPosition(currentDot = 0);
 800191e:	2100      	movs	r1, #0
 8001920:	4620      	mov	r0, r4
 8001922:	f884 1241 	strb.w	r1, [r4, #577]	@ 0x241
}
 8001926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    setHighlightPosition(currentDot = 0);
 800192a:	f7ff bfbf 	b.w	80018ac <_ZN12DotIndicator20setHighlightPositionEh>
        unselectedDots.add(dotNormal[i]);
 800192e:	4631      	mov	r1, r6
 8001930:	4638      	mov	r0, r7
    for (int i = 0; i < numberOfDots; i++)
 8001932:	3501      	adds	r5, #1
 8001934:	362c      	adds	r6, #44	@ 0x2c
        unselectedDots.add(dotNormal[i]);
 8001936:	f011 fc7d 	bl	8013234 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
    for (int i = 0; i < numberOfDots; i++)
 800193a:	e7e0      	b.n	80018fe <_ZN12DotIndicator15setNumberOfDotsEh+0x32>
 800193c:	08022970 	.word	0x08022970
 8001940:	080229a1 	.word	0x080229a1
 8001944:	080229cd 	.word	0x080229cd
 8001948:	08022a15 	.word	0x08022a15

0800194c <_ZN12DotIndicator10setBitmapsERKN8touchgfx6BitmapES3_>:
{
 800194c:	b570      	push	{r4, r5, r6, lr}
    dotHighlighted.setBitmap(highlightedDot);
 800194e:	2588      	movs	r5, #136	@ 0x88
{
 8001950:	4604      	mov	r4, r0
 8001952:	460e      	mov	r6, r1
    dotHighlighted.setBitmap(highlightedDot);
 8001954:	305c      	adds	r0, #92	@ 0x5c
 8001956:	4611      	mov	r1, r2
 8001958:	f015 fcf9 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        dotNormal[i].setBitmap(normalDot);
 800195c:	5963      	ldr	r3, [r4, r5]
 800195e:	1960      	adds	r0, r4, r5
    for (int i = 0; i < MAX_SIZE - 1; i++)
 8001960:	352c      	adds	r5, #44	@ 0x2c
        dotNormal[i].setBitmap(normalDot);
 8001962:	4631      	mov	r1, r6
 8001964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001966:	4798      	blx	r3
    for (int i = 0; i < MAX_SIZE - 1; i++)
 8001968:	f5b5 7f05 	cmp.w	r5, #532	@ 0x214
 800196c:	d1f6      	bne.n	800195c <_ZN12DotIndicator10setBitmapsERKN8touchgfx6BitmapES3_+0x10>
    if (numberOfDots > 0)
 800196e:	f894 1240 	ldrb.w	r1, [r4, #576]	@ 0x240
 8001972:	b121      	cbz	r1, 800197e <_ZN12DotIndicator10setBitmapsERKN8touchgfx6BitmapES3_+0x32>
        setNumberOfDots(numberOfDots);
 8001974:	4620      	mov	r0, r4
}
 8001976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setNumberOfDots(numberOfDots);
 800197a:	f7ff bfa7 	b.w	80018cc <_ZN12DotIndicator15setNumberOfDotsEh>
}
 800197e:	bd70      	pop	{r4, r5, r6, pc}

08001980 <_ZN12DotIndicator7goRightEv>:
    setHighlightPosition(currentDot = (currentDot + 1) % numberOfDots);
 8001980:	f890 1241 	ldrb.w	r1, [r0, #577]	@ 0x241
 8001984:	f890 2240 	ldrb.w	r2, [r0, #576]	@ 0x240
 8001988:	3101      	adds	r1, #1
{
 800198a:	b410      	push	{r4}
    setHighlightPosition(currentDot = (currentDot + 1) % numberOfDots);
 800198c:	fbb1 f4f2 	udiv	r4, r1, r2
 8001990:	fb02 1114 	mls	r1, r2, r4, r1
}
 8001994:	f85d 4b04 	ldr.w	r4, [sp], #4
    setHighlightPosition(currentDot = (currentDot + 1) % numberOfDots);
 8001998:	b2c9      	uxtb	r1, r1
 800199a:	f880 1241 	strb.w	r1, [r0, #577]	@ 0x241
 800199e:	f7ff bf85 	b.w	80018ac <_ZN12DotIndicator20setHighlightPositionEh>

080019a2 <_ZN12DotIndicator6goLeftEv>:
    setHighlightPosition(currentDot = (currentDot + numberOfDots - 1) % numberOfDots);
 80019a2:	f890 2240 	ldrb.w	r2, [r0, #576]	@ 0x240
 80019a6:	f890 1241 	ldrb.w	r1, [r0, #577]	@ 0x241
 80019aa:	4411      	add	r1, r2
 80019ac:	3901      	subs	r1, #1
{
 80019ae:	b410      	push	{r4}
    setHighlightPosition(currentDot = (currentDot + numberOfDots - 1) % numberOfDots);
 80019b0:	fb91 f4f2 	sdiv	r4, r1, r2
 80019b4:	fb02 1114 	mls	r1, r2, r4, r1
}
 80019b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    setHighlightPosition(currentDot = (currentDot + numberOfDots - 1) % numberOfDots);
 80019bc:	b2c9      	uxtb	r1, r1
 80019be:	f880 1241 	strb.w	r1, [r0, #577]	@ 0x241
 80019c2:	f7ff bf73 	b.w	80018ac <_ZN12DotIndicator20setHighlightPositionEh>

080019c6 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 80019c6:	4770      	bx	lr

080019c8 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 80019c8:	4770      	bx	lr

080019ca <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80019ca:	6041      	str	r1, [r0, #4]
    }
 80019cc:	4770      	bx	lr

080019ce <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 80019ce:	4770      	bx	lr

080019d0 <_ZN19FrontendApplicationD1Ev>:
 */
class FrontendApplication : public MVPApplication
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80019d0:	4770      	bx	lr

080019d2 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 80019d2:	4770      	bx	lr

080019d4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
    {
        done = true;
 80019d4:	2301      	movs	r3, #1
 80019d6:	7203      	strb	r3, [r0, #8]
    }
 80019d8:	4770      	bx	lr

080019da <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80019da:	4770      	bx	lr

080019dc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>:
 80019dc:	4770      	bx	lr

080019de <_ZN8touchgfx8CallbackI19FrontendApplicationvvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80019de:	4770      	bx	lr

080019e0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 80019e0:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80019e2:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80019e4:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 80019e6:	68c2      	ldr	r2, [r0, #12]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	1055      	asrs	r5, r2, #1
 80019ec:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80019f0:	07d2      	lsls	r2, r2, #31
 80019f2:	bf48      	it	mi
 80019f4:	5962      	ldrmi	r2, [r4, r5]
    }
 80019f6:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80019f8:	bf48      	it	mi
 80019fa:	58d3      	ldrmi	r3, [r2, r3]
 80019fc:	4718      	bx	r3

080019fe <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 80019fe:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8001a00:	6840      	ldr	r0, [r0, #4]
 8001a02:	b130      	cbz	r0, 8001a12 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x14>
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	b91a      	cbnz	r2, 8001a10 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x12>
 8001a08:	68d8      	ldr	r0, [r3, #12]
 8001a0a:	f000 0001 	and.w	r0, r0, #1
 8001a0e:	4770      	bx	lr
 8001a10:	2001      	movs	r0, #1
    }
 8001a12:	4770      	bx	lr

08001a14 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8001a14:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8001a16:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8001a18:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8001a1a:	68c2      	ldr	r2, [r0, #12]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	1055      	asrs	r5, r2, #1
 8001a20:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8001a24:	07d2      	lsls	r2, r2, #31
 8001a26:	bf48      	it	mi
 8001a28:	5962      	ldrmi	r2, [r4, r5]
    }
 8001a2a:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8001a2c:	bf48      	it	mi
 8001a2e:	58d3      	ldrmi	r3, [r2, r3]
 8001a30:	4718      	bx	r3

08001a32 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8001a32:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8001a34:	6840      	ldr	r0, [r0, #4]
 8001a36:	b130      	cbz	r0, 8001a46 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv+0x14>
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	b91a      	cbnz	r2, 8001a44 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv+0x12>
 8001a3c:	68d8      	ldr	r0, [r3, #12]
 8001a3e:	f000 0001 	and.w	r0, r0, #1
 8001a42:	4770      	bx	lr
 8001a44:	2001      	movs	r0, #1
    }
 8001a46:	4770      	bx	lr

08001a48 <_ZN8touchgfx8CallbackI19FrontendApplicationvvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8001a48:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8001a4a:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8001a4c:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 8001a4e:	68c2      	ldr	r2, [r0, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	1054      	asrs	r4, r2, #1
 8001a54:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8001a58:	07d2      	lsls	r2, r2, #31
 8001a5a:	bf48      	it	mi
 8001a5c:	590a      	ldrmi	r2, [r1, r4]
    }
 8001a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8001a62:	bf48      	it	mi
 8001a64:	58d3      	ldrmi	r3, [r2, r3]
 8001a66:	4718      	bx	r3

08001a68 <_ZNK8touchgfx8CallbackI19FrontendApplicationvvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8001a68:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8001a6a:	6840      	ldr	r0, [r0, #4]
 8001a6c:	b130      	cbz	r0, 8001a7c <_ZNK8touchgfx8CallbackI19FrontendApplicationvvvE7isValidEv+0x14>
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	b91a      	cbnz	r2, 8001a7a <_ZNK8touchgfx8CallbackI19FrontendApplicationvvvE7isValidEv+0x12>
 8001a72:	68d8      	ldr	r0, [r3, #12]
 8001a74:	f000 0001 	and.w	r0, r0, #1
 8001a78:	4770      	bx	lr
 8001a7a:	2001      	movs	r0, #1
    }
 8001a7c:	4770      	bx	lr

08001a7e <_ZN8touchgfx12NoTransitionD0Ev>:
    virtual ~NoTransition() { }
 8001a7e:	b510      	push	{r4, lr}
 8001a80:	4604      	mov	r4, r0
 8001a82:	210c      	movs	r1, #12
 8001a84:	f01d f84f 	bl	801eb26 <_ZdlPvj>
 8001a88:	4620      	mov	r0, r4
 8001a8a:	bd10      	pop	{r4, pc}

08001a8c <_ZN8touchgfx8CallbackI19FrontendApplicationvvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	4604      	mov	r4, r0
 8001a90:	2110      	movs	r1, #16
 8001a92:	f01d f848 	bl	801eb26 <_ZdlPvj>
 8001a96:	4620      	mov	r0, r4
 8001a98:	bd10      	pop	{r4, pc}

08001a9a <_ZN19FrontendApplicationD0Ev>:
 8001a9a:	b510      	push	{r4, lr}
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8001aa2:	f01d f840 	bl	801eb26 <_ZdlPvj>
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	bd10      	pop	{r4, pc}

08001aaa <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8001aaa:	b510      	push	{r4, lr}
 8001aac:	4604      	mov	r4, r0
 8001aae:	2110      	movs	r1, #16
 8001ab0:	f01d f839 	bl	801eb26 <_ZdlPvj>
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	bd10      	pop	{r4, pc}

08001ab8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvED0Ev>:
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	4604      	mov	r4, r0
 8001abc:	2110      	movs	r1, #16
 8001abe:	f01d f832 	bl	801eb26 <_ZdlPvj>
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	bd10      	pop	{r4, pc}
	...

08001ac8 <_ZN19FrontendApplication15handleTickEventEv>:
      lastClickTime(0)
{
}

void FrontendApplication::handleTickEvent()
{
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4604      	mov	r4, r0
    model.tick();
 8001acc:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8001ad0:	f009 ffbe 	bl	800ba50 <_ZN5Model4tickEv>
    MVPApplication::handleTickEvent();
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f017 ff77 	bl	80199c8 <_ZN8touchgfx11Application15handleTickEventEv>
    tickCounter++;
 8001ada:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 8001ade:	f894 515a 	ldrb.w	r5, [r4, #346]	@ 0x15a
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f8b4 115c 	ldrh.w	r1, [r4, #348]	@ 0x15c
 8001ae8:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150

    bool hasValue() const
    {
        return ((hours > 0) ||
                (minutes > 0) ||
                (seconds > 0) ||
 8001aec:	f8b4 3158 	ldrh.w	r3, [r4, #344]	@ 0x158
 8001af0:	b903      	cbnz	r3, 8001af4 <_ZN19FrontendApplication15handleTickEventEv+0x2c>
                (minutes > 0) ||
 8001af2:	b38d      	cbz	r5, 8001b58 <_ZN19FrontendApplication15handleTickEventEv+0x90>

    // Screen saver functionality:
    if (lastClickTime.hasValue() && (model.getCurrentTime() - lastClickTime) >= SCREEN_SAVER_TIMEOUT)
 8001af4:	f8d4 014c 	ldr.w	r0, [r4, #332]	@ 0x14c
        int diff = (hours - other.hours) * 60 * 60 * 1000 +
 8001af8:	f894 3158 	ldrb.w	r3, [r4, #344]	@ 0x158
 8001afc:	7982      	ldrb	r2, [r0, #6]
                   (minutes - other.minutes) * 60 * 1000 +
 8001afe:	f894 6159 	ldrb.w	r6, [r4, #345]	@ 0x159
        int diff = (hours - other.hours) * 60 * 60 * 1000 +
 8001b02:	1ad2      	subs	r2, r2, r3
                   (minutes - other.minutes) * 60 * 1000 +
 8001b04:	79c3      	ldrb	r3, [r0, #7]
 8001b06:	1b9b      	subs	r3, r3, r6
 8001b08:	f64e 2660 	movw	r6, #60000	@ 0xea60
 8001b0c:	4373      	muls	r3, r6
        int diff = (hours - other.hours) * 60 * 60 * 1000 +
 8001b0e:	4e1a      	ldr	r6, [pc, #104]	@ (8001b78 <_ZN19FrontendApplication15handleTickEventEv+0xb0>)
 8001b10:	fb06 3302 	mla	r3, r6, r2, r3
                   (seconds - other.seconds) * 1000 +
 8001b14:	7a02      	ldrb	r2, [r0, #8]
 8001b16:	1b52      	subs	r2, r2, r5
                   (minutes - other.minutes) * 60 * 1000 +
 8001b18:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 8001b1c:	fb05 3302 	mla	r3, r5, r2, r3
                   (milliseconds - other.milliseconds);
 8001b20:	8942      	ldrh	r2, [r0, #10]
 8001b22:	1a52      	subs	r2, r2, r1
        if (diff < 0)
 8001b24:	189b      	adds	r3, r3, r2
 8001b26:	d505      	bpl.n	8001b34 <_ZN19FrontendApplication15handleTickEventEv+0x6c>
            diff += 24 * 60 * 60 * 1000;
 8001b28:	f103 63a4 	add.w	r3, r3, #85983232	@ 0x5200000
 8001b2c:	f503 23cb 	add.w	r3, r3, #415744	@ 0x65800
 8001b30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b34:	4a11      	ldr	r2, [pc, #68]	@ (8001b7c <_ZN19FrontendApplication15handleTickEventEv+0xb4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	dd10      	ble.n	8001b5c <_ZN19FrontendApplication15handleTickEventEv+0x94>
    {
        screenSaverTick++;
 8001b3a:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
 8001b3e:	21b0      	movs	r1, #176	@ 0xb0
 8001b40:	3301      	adds	r3, #1
 8001b42:	fb93 f2f1 	sdiv	r2, r3, r1
 8001b46:	fb01 3212 	mls	r2, r1, r2, r3
 8001b4a:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        if (screenSaverTick % MINOR_TICK_FREQ == 0)
 8001b4e:	b932      	cbnz	r2, 8001b5e <_ZN19FrontendApplication15handleTickEventEv+0x96>
        {
            model.screenSaverMajorTick();
        }
    }

}
 8001b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            model.screenSaverMinorTick();
 8001b54:	f009 bfd6 	b.w	800bb04 <_ZN5Model20screenSaverMinorTickEv>
                (seconds > 0) ||
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d1cb      	bne.n	8001af4 <_ZN19FrontendApplication15handleTickEventEv+0x2c>
}
 8001b5c:	bd70      	pop	{r4, r5, r6, pc}
            model.screenSaverMinorTick();
 8001b5e:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 8001b62:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b66:	fb02 3311 	mls	r3, r2, r1, r3
        else if (screenSaverTick % MAJOR_TICK_FREQ == 0)
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f6      	bne.n	8001b5c <_ZN19FrontendApplication15handleTickEventEv+0x94>
}
 8001b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            model.screenSaverMajorTick();
 8001b72:	f009 bfcb 	b.w	800bb0c <_ZN5Model20screenSaverMajorTickEv>
 8001b76:	bf00      	nop
 8001b78:	0036ee80 	.word	0x0036ee80
 8001b7c:	0002bf1f 	.word	0x0002bf1f

08001b80 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	4616      	mov	r6, r2
 8001b84:	460c      	mov	r4, r1
 8001b86:	4605      	mov	r5, r0
    Application::getInstance()->clearAllTimerWidgets();
 8001b88:	f018 f814 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8001b8c:	f018 f85f 	bl	8019c4e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8001b90:	6830      	ldr	r0, [r6, #0]
 8001b92:	b110      	cbz	r0, 8001b9a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x1a>
    {
        (*currentTrans)->tearDown();
 8001b94:	6803      	ldr	r3, [r0, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4798      	blx	r3
    }
    if (*currentTrans)
 8001b9a:	6830      	ldr	r0, [r6, #0]
 8001b9c:	b110      	cbz	r0, 8001ba4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x24>
    {
        (*currentTrans)->~Transition();
 8001b9e:	6803      	ldr	r3, [r0, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4798      	blx	r3
    }
    if (*currentScreen)
 8001ba4:	6828      	ldr	r0, [r5, #0]
 8001ba6:	b110      	cbz	r0, 8001bae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x2e>
    {
        (*currentScreen)->tearDownScreen();
 8001ba8:	6803      	ldr	r3, [r0, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	4798      	blx	r3
    }
    if (*currentPresenter)
 8001bae:	6820      	ldr	r0, [r4, #0]
 8001bb0:	b110      	cbz	r0, 8001bb8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x38>
    {
        (*currentPresenter)->deactivate();
 8001bb2:	6803      	ldr	r3, [r0, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4798      	blx	r3
    }
    if (*currentScreen)
 8001bb8:	6828      	ldr	r0, [r5, #0]
 8001bba:	b110      	cbz	r0, 8001bc2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x42>
    {
        (*currentScreen)->~Screen();
 8001bbc:	6803      	ldr	r3, [r0, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4798      	blx	r3
    }
    if (*currentPresenter)
 8001bc2:	6820      	ldr	r0, [r4, #0]
 8001bc4:	b120      	cbz	r0, 8001bd0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x50>
    {
        (*currentPresenter)->~Presenter();
 8001bc6:	6803      	ldr	r3, [r0, #0]
    }
}
 8001bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*currentPresenter)->~Presenter();
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4718      	bx	r3
}
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}

08001bd2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
    newScreen->setupScreen();
 8001bd2:	6803      	ldr	r3, [r0, #0]
{
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	460e      	mov	r6, r1
    newScreen->setupScreen();
 8001bd8:	68db      	ldr	r3, [r3, #12]
{
 8001bda:	4614      	mov	r4, r2
 8001bdc:	4605      	mov	r5, r0
    newScreen->setupScreen();
 8001bde:	4798      	blx	r3
    newPresenter->activate();
 8001be0:	6833      	ldr	r3, [r6, #0]
 8001be2:	4630      	mov	r0, r6
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8001be8:	4621      	mov	r1, r4
 8001bea:	4628      	mov	r0, r5
 8001bec:	f019 f878 	bl	801ace0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	4798      	blx	r3

    Application::getInstance()->draw();
 8001bf8:	f017 ffdc 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8001bfc:	6803      	ldr	r3, [r0, #0]
}
 8001bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Application::getInstance()->draw();
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	4718      	bx	r3
	...

08001c08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv>:
     *
     * @see Transition::teadDown()
     */
    virtual void tearDown()
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x14>)
    virtual void tearDown()
 8001c0a:	4601      	mov	r1, r0
        if (HAL::USE_ANIMATION_STORAGE)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b123      	cbz	r3, 8001c1a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x12>
        {
            screenContainer->remove(snapshot);
 8001c10:	6840      	ldr	r0, [r0, #4]
 8001c12:	310c      	adds	r1, #12
 8001c14:	6803      	ldr	r3, [r0, #0]
 8001c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c18:	4718      	bx	r3
        }
    }
 8001c1a:	4770      	bx	lr
 8001c1c:	20024e33 	.word	0x20024e33

08001c20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE.part.0>:
            break;
        case WEST:
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
            break;
        case NORTH:
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE.part.0+0x10>)
 8001c22:	2100      	movs	r1, #0
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	6803      	ldr	r3, [r0, #0]
 8001c28:	4252      	negs	r2, r2
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2c:	b212      	sxth	r2, r2
 8001c2e:	4718      	bx	r3
 8001c30:	20024e2a 	.word	0x20024e2a

08001c34 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8001c34:	4603      	mov	r3, r0
 8001c36:	4608      	mov	r0, r1
        switch (direction)
 8001c38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d81b      	bhi.n	8001c78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x44>
 8001c40:	e8df f003 	tbb	[pc, r3]
 8001c44:	09021311 	.word	0x09021311
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8001c48:	680b      	ldr	r3, [r1, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	490b      	ldr	r1, [pc, #44]	@ (8001c7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x48>)
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c50:	f9b1 1000 	ldrsh.w	r1, [r1]
            break;
        case SOUTH:
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8001c54:	4718      	bx	r3
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x48>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	8819      	ldrh	r1, [r3, #0]
 8001c5c:	6803      	ldr	r3, [r0, #0]
 8001c5e:	4249      	negs	r1, r1
 8001c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c62:	b209      	sxth	r1, r1
 8001c64:	e7f6      	b.n	8001c54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x20>
 8001c66:	f7ff bfdb 	b.w	8001c20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE.part.0>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8001c6a:	680b      	ldr	r3, [r1, #0]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x4c>)
 8001c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c76:	e7ed      	b.n	8001c54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x20>
            break;
        default:
            // Nothing to do here
            break;
        }
    }
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20024e28 	.word	0x20024e28
 8001c80:	20024e2a 	.word	0x20024e2a

08001c84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE8tearDownEv>:
        if (HAL::USE_ANIMATION_STORAGE)
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE8tearDownEv+0x14>)
    virtual void tearDown()
 8001c86:	4601      	mov	r1, r0
        if (HAL::USE_ANIMATION_STORAGE)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b123      	cbz	r3, 8001c96 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE8tearDownEv+0x12>
            screenContainer->remove(snapshot);
 8001c8c:	6840      	ldr	r0, [r0, #4]
 8001c8e:	310c      	adds	r1, #12
 8001c90:	6803      	ldr	r3, [r0, #0]
 8001c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c94:	4718      	bx	r3
    }
 8001c96:	4770      	bx	lr
 8001c98:	20024e33 	.word	0x20024e33

08001c9c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4608      	mov	r0, r1
        switch (direction)
 8001ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d81b      	bhi.n	8001ce0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x44>
 8001ca8:	e8df f003 	tbb	[pc, r3]
 8001cac:	09021311 	.word	0x09021311
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8001cb0:	680b      	ldr	r3, [r1, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	490b      	ldr	r1, [pc, #44]	@ (8001ce4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x48>)
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb8:	f9b1 1000 	ldrsh.w	r1, [r1]
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8001cbc:	4718      	bx	r3
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x48>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	8819      	ldrh	r1, [r3, #0]
 8001cc4:	6803      	ldr	r3, [r0, #0]
 8001cc6:	4249      	negs	r1, r1
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	b209      	sxth	r1, r1
 8001ccc:	e7f6      	b.n	8001cbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x20>
 8001cce:	f7ff bfa7 	b.w	8001c20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE.part.0>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8001cd2:	680b      	ldr	r3, [r1, #0]
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x4c>)
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001cde:	e7ed      	b.n	8001cbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x20>
    }
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20024e28 	.word	0x20024e28
 8001ce8:	20024e2a 	.word	0x20024e2a

08001cec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv>:
        if (!HAL::USE_ANIMATION_STORAGE)
 8001cec:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x98>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
    virtual void handleTickEvent()
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	4604      	mov	r4, r0
        if (!HAL::USE_ANIMATION_STORAGE)
 8001cf4:	b913      	cbnz	r3, 8001cfc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x10>
            done = true;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	7203      	strb	r3, [r0, #8]
    }
 8001cfa:	bd10      	pop	{r4, pc}
        animationCounter++;
 8001cfc:	f890 0052 	ldrb.w	r0, [r0, #82]	@ 0x52
        if (animationCounter <= animationSteps)
 8001d00:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
        animationCounter++;
 8001d04:	3001      	adds	r0, #1
 8001d06:	b2c0      	uxtb	r0, r0
        if (animationCounter <= animationSteps)
 8001d08:	4298      	cmp	r0, r3
        animationCounter++;
 8001d0a:	f884 0052 	strb.w	r0, [r4, #82]	@ 0x52
        if (animationCounter <= animationSteps)
 8001d0e:	d829      	bhi.n	8001d64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x78>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8001d10:	f9b4 2054 	ldrsh.w	r2, [r4, #84]	@ 0x54
 8001d14:	2100      	movs	r1, #0
 8001d16:	f019 fa41 	bl	801b19c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
            if (calculatedValue % 2)
 8001d1a:	07c3      	lsls	r3, r0, #31
 8001d1c:	d506      	bpl.n	8001d2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x40>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d24:	bfc8      	it	gt
 8001d26:	2301      	movgt	r3, #1
 8001d28:	4418      	add	r0, r3
 8001d2a:	b200      	sxth	r0, r0
        switch (direction)
 8001d2c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8001d30:	4601      	mov	r1, r0
 8001d32:	f8a4 0056 	strh.w	r0, [r4, #86]	@ 0x56
        switch (direction)
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d91a      	bls.n	8001d70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x84>
 8001d3a:	3b02      	subs	r3, #2
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d81e      	bhi.n	8001d7e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x92>
            calculatedValue -= snapshot.getX();
 8001d40:	8a23      	ldrh	r3, [r4, #16]
            snapshot.moveRelative(calculatedValue, 0);
 8001d42:	2200      	movs	r2, #0
            calculatedValue -= snapshot.getX();
 8001d44:	1ac9      	subs	r1, r1, r3
 8001d46:	b209      	sxth	r1, r1
 8001d48:	f8a4 1056 	strh.w	r1, [r4, #86]	@ 0x56
            snapshot.moveRelative(0, calculatedValue);
 8001d4c:	f104 000c 	add.w	r0, r4, #12
 8001d50:	f018 fb4d 	bl	801a3ee <_ZN8touchgfx8Drawable12moveRelativeEss>
        screenContainer->forEachChild(&handleTickCallback);
 8001d54:	6860      	ldr	r0, [r4, #4]
 8001d56:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 8001d5a:	6803      	ldr	r3, [r0, #0]
    }
 8001d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        screenContainer->forEachChild(&handleTickCallback);
 8001d60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d62:	4718      	bx	r3
            done = true;
 8001d64:	2301      	movs	r3, #1
 8001d66:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
            return;
 8001d6e:	e7c4      	b.n	8001cfa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xe>
            calculatedValue -= snapshot.getY();
 8001d70:	8a63      	ldrh	r3, [r4, #18]
            snapshot.moveRelative(0, calculatedValue);
 8001d72:	2100      	movs	r1, #0
            calculatedValue -= snapshot.getY();
 8001d74:	1ac0      	subs	r0, r0, r3
 8001d76:	b202      	sxth	r2, r0
 8001d78:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 8001d7c:	e7e6      	b.n	8001d4c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x60>
            done = true;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	7223      	strb	r3, [r4, #8]
            break;
 8001d82:	e7e7      	b.n	8001d54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x68>
 8001d84:	20024e33 	.word	0x20024e33

08001d88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv>:
        if (!HAL::USE_ANIMATION_STORAGE)
 8001d88:	4b25      	ldr	r3, [pc, #148]	@ (8001e20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x98>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
    virtual void handleTickEvent()
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	4604      	mov	r4, r0
        if (!HAL::USE_ANIMATION_STORAGE)
 8001d90:	b913      	cbnz	r3, 8001d98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x10>
            done = true;
 8001d92:	2301      	movs	r3, #1
 8001d94:	7203      	strb	r3, [r0, #8]
    }
 8001d96:	bd10      	pop	{r4, pc}
        animationCounter++;
 8001d98:	f890 0052 	ldrb.w	r0, [r0, #82]	@ 0x52
        if (animationCounter <= animationSteps)
 8001d9c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
        animationCounter++;
 8001da0:	3001      	adds	r0, #1
 8001da2:	b2c0      	uxtb	r0, r0
        if (animationCounter <= animationSteps)
 8001da4:	4298      	cmp	r0, r3
        animationCounter++;
 8001da6:	f884 0052 	strb.w	r0, [r4, #82]	@ 0x52
        if (animationCounter <= animationSteps)
 8001daa:	d829      	bhi.n	8001e00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x78>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8001dac:	f9b4 2054 	ldrsh.w	r2, [r4, #84]	@ 0x54
 8001db0:	2100      	movs	r1, #0
 8001db2:	f019 f9f3 	bl	801b19c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
            if (calculatedValue % 2)
 8001db6:	07c3      	lsls	r3, r0, #31
 8001db8:	d506      	bpl.n	8001dc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x40>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dc0:	bfc8      	it	gt
 8001dc2:	2301      	movgt	r3, #1
 8001dc4:	4418      	add	r0, r3
 8001dc6:	b200      	sxth	r0, r0
        switch (direction)
 8001dc8:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8001dcc:	4601      	mov	r1, r0
 8001dce:	f8a4 0056 	strh.w	r0, [r4, #86]	@ 0x56
        switch (direction)
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d91a      	bls.n	8001e0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x84>
 8001dd6:	3b02      	subs	r3, #2
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d81e      	bhi.n	8001e1a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x92>
            calculatedValue -= snapshot.getX();
 8001ddc:	8a23      	ldrh	r3, [r4, #16]
            snapshot.moveRelative(calculatedValue, 0);
 8001dde:	2200      	movs	r2, #0
            calculatedValue -= snapshot.getX();
 8001de0:	1ac9      	subs	r1, r1, r3
 8001de2:	b209      	sxth	r1, r1
 8001de4:	f8a4 1056 	strh.w	r1, [r4, #86]	@ 0x56
            snapshot.moveRelative(0, calculatedValue);
 8001de8:	f104 000c 	add.w	r0, r4, #12
 8001dec:	f018 faff 	bl	801a3ee <_ZN8touchgfx8Drawable12moveRelativeEss>
        screenContainer->forEachChild(&handleTickCallback);
 8001df0:	6860      	ldr	r0, [r4, #4]
 8001df2:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 8001df6:	6803      	ldr	r3, [r0, #0]
    }
 8001df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        screenContainer->forEachChild(&handleTickCallback);
 8001dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001dfe:	4718      	bx	r3
            done = true;
 8001e00:	2301      	movs	r3, #1
 8001e02:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
            return;
 8001e0a:	e7c4      	b.n	8001d96 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0xe>
            calculatedValue -= snapshot.getY();
 8001e0c:	8a63      	ldrh	r3, [r4, #18]
            snapshot.moveRelative(0, calculatedValue);
 8001e0e:	2100      	movs	r1, #0
            calculatedValue -= snapshot.getY();
 8001e10:	1ac0      	subs	r0, r0, r3
 8001e12:	b202      	sxth	r2, r0
 8001e14:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 8001e18:	e7e6      	b.n	8001de8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x60>
            done = true;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	7223      	strb	r3, [r4, #8]
            break;
 8001e1e:	e7e7      	b.n	8001df0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x68>
 8001e20:	20024e33 	.word	0x20024e33

08001e24 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    virtual void handlePendingScreenTransition()
 8001e24:	b510      	push	{r4, lr}
 8001e26:	4604      	mov	r4, r0
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8001e28:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 8001e2c:	b158      	cbz	r0, 8001e46 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8001e2e:	6803      	ldr	r3, [r0, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	4798      	blx	r3
 8001e34:	b138      	cbz	r0, 8001e46 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
            pendingScreenTransitionCallback->execute();
 8001e36:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
 8001e3a:	6803      	ldr	r3, [r0, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
    }
 8001e46:	bd10      	pop	{r4, pc}

08001e48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE4initEv>:
    virtual void init()
 8001e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (HAL::USE_ANIMATION_STORAGE)
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE4initEv+0x34>)
    virtual void init()
 8001e4c:	4604      	mov	r4, r0
        if (HAL::USE_ANIMATION_STORAGE)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b18b      	cbz	r3, 8001e76 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE4initEv+0x2e>
    {
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE4initEv+0x38>)
        this->pmemfun_1 = pmemfun_1;
 8001e54:	2218      	movs	r2, #24
            screenContainer->forEachChild(&initCallback);
 8001e56:	4669      	mov	r1, sp
        this->pobject = pobject;
 8001e58:	e9cd 3000 	strd	r3, r0, [sp]
 8001e5c:	6840      	ldr	r0, [r0, #4]
        this->pmemfun_1 = pmemfun_1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e64:	6803      	ldr	r3, [r0, #0]
 8001e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e68:	4798      	blx	r3
            screenContainer->add(snapshot);
 8001e6a:	6860      	ldr	r0, [r4, #4]
 8001e6c:	f104 010c 	add.w	r1, r4, #12
 8001e70:	6803      	ldr	r3, [r0, #0]
 8001e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e74:	4798      	blx	r3
    }
 8001e76:	b004      	add	sp, #16
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20024e33 	.word	0x20024e33
 8001e80:	08023238 	.word	0x08023238

08001e84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv>:
    virtual void init()
 8001e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (HAL::USE_ANIMATION_STORAGE)
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x34>)
    virtual void init()
 8001e88:	4604      	mov	r4, r0
        if (HAL::USE_ANIMATION_STORAGE)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b18b      	cbz	r3, 8001eb2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x2e>
    {
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x38>)
        this->pmemfun_1 = pmemfun_1;
 8001e90:	2218      	movs	r2, #24
            screenContainer->forEachChild(&initCallback);
 8001e92:	4669      	mov	r1, sp
        this->pobject = pobject;
 8001e94:	e9cd 3000 	strd	r3, r0, [sp]
 8001e98:	6840      	ldr	r0, [r0, #4]
        this->pmemfun_1 = pmemfun_1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ea0:	6803      	ldr	r3, [r0, #0]
 8001ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ea4:	4798      	blx	r3
            screenContainer->add(snapshot);
 8001ea6:	6860      	ldr	r0, [r4, #4]
 8001ea8:	f104 010c 	add.w	r1, r4, #12
 8001eac:	6803      	ldr	r3, [r0, #0]
 8001eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eb0:	4798      	blx	r3
    }
 8001eb2:	b004      	add	sp, #16
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20024e33 	.word	0x20024e33
 8001ebc:	08023278 	.word	0x08023278

08001ec0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4608      	mov	r0, r1
    {
        if (&d == snapshotPtr)
 8001ec4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ec6:	428a      	cmp	r2, r1
    virtual void tickMoveDrawable(Drawable& d)
 8001ec8:	b410      	push	{r4}
        if (&d == snapshotPtr)
 8001eca:	d017      	beq.n	8001efc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x3c>
        {
            return;
        }

        switch (direction)
 8001ecc:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8001ed0:	2a01      	cmp	r2, #1
 8001ed2:	d90b      	bls.n	8001eec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2c>
 8001ed4:	3a02      	subs	r2, #2
 8001ed6:	2a01      	cmp	r2, #1
 8001ed8:	d80e      	bhi.n	8001ef8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x38>
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8001eda:	680a      	ldr	r2, [r1, #0]
 8001edc:	f9b3 1056 	ldrsh.w	r1, [r3, #86]	@ 0x56
 8001ee0:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8001ee2:	2200      	movs	r2, #0
            break;
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8001ee4:	4623      	mov	r3, r4
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
            break;
        }
    }
 8001ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
            d.moveRelative(0, calculatedValue);
 8001eea:	4718      	bx	r3
 8001eec:	680a      	ldr	r2, [r1, #0]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8001ef2:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	@ 0x56
 8001ef6:	e7f5      	b.n	8001ee4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x24>
            done = true;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	721a      	strb	r2, [r3, #8]
    }
 8001efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 8001f02:	4603      	mov	r3, r0
 8001f04:	4608      	mov	r0, r1
        if (&d == snapshotPtr)
 8001f06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f08:	428a      	cmp	r2, r1
    virtual void tickMoveDrawable(Drawable& d)
 8001f0a:	b410      	push	{r4}
        if (&d == snapshotPtr)
 8001f0c:	d017      	beq.n	8001f3e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x3c>
        switch (direction)
 8001f0e:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8001f12:	2a01      	cmp	r2, #1
 8001f14:	d90b      	bls.n	8001f2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x2c>
 8001f16:	3a02      	subs	r2, #2
 8001f18:	2a01      	cmp	r2, #1
 8001f1a:	d80e      	bhi.n	8001f3a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x38>
            d.moveRelative(calculatedValue, 0);
 8001f1c:	680a      	ldr	r2, [r1, #0]
 8001f1e:	f9b3 1056 	ldrsh.w	r1, [r3, #86]	@ 0x56
 8001f22:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8001f24:	2200      	movs	r2, #0
            d.moveRelative(0, calculatedValue);
 8001f26:	4623      	mov	r3, r4
    }
 8001f28:	f85d 4b04 	ldr.w	r4, [sp], #4
            d.moveRelative(0, calculatedValue);
 8001f2c:	4718      	bx	r3
 8001f2e:	680a      	ldr	r2, [r1, #0]
 8001f30:	2100      	movs	r1, #0
 8001f32:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8001f34:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	@ 0x56
 8001f38:	e7f5      	b.n	8001f26 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x24>
            done = true;
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	721a      	strb	r2, [r3, #8]
    }
 8001f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv>:
    transitionCallback = Callback< FrontendApplication >(this, &FrontendApplication::gotoMainMenuScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplication::gotoMainMenuScreenNoTransitionImpl()
{
 8001f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    makeTransition< MainMenuView, MainMenuPresenter, NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8001f48:	e9d0 4952 	ldrd	r4, r9, [r0, #328]	@ 0x148
{
 8001f4c:	4607      	mov	r7, r0
    makeTransition< MainMenuView, MainMenuPresenter, NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8001f4e:	f500 7598 	add.w	r5, r0, #304	@ 0x130
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8001f52:	68a0      	ldr	r0, [r4, #8]
 8001f54:	6803      	ldr	r3, [r0, #0]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4798      	blx	r3
 8001f5a:	f240 6373 	movw	r3, #1651	@ 0x673
 8001f5e:	4298      	cmp	r0, r3
 8001f60:	d805      	bhi.n	8001f6e <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0x2a>
 8001f62:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xc8>)
 8001f64:	21c2      	movs	r1, #194	@ 0xc2
 8001f66:	4a2a      	ldr	r2, [pc, #168]	@ (8002010 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xcc>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8001f68:	482a      	ldr	r0, [pc, #168]	@ (8002014 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xd0>)
 8001f6a:	f01d ff03 	bl	801fd74 <__assert_func>
 8001f6e:	6860      	ldr	r0, [r4, #4]
 8001f70:	6803      	ldr	r3, [r0, #0]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4798      	blx	r3
 8001f76:	2813      	cmp	r0, #19
 8001f78:	d803      	bhi.n	8001f82 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0x3e>
 8001f7a:	4b27      	ldr	r3, [pc, #156]	@ (8002018 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xd4>)
 8001f7c:	21c3      	movs	r1, #195	@ 0xc3
 8001f7e:	4a24      	ldr	r2, [pc, #144]	@ (8002010 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xcc>)
 8001f80:	e7f2      	b.n	8001f68 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8001f82:	68e0      	ldr	r0, [r4, #12]
 8001f84:	6803      	ldr	r3, [r0, #0]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4798      	blx	r3
 8001f8a:	280b      	cmp	r0, #11
 8001f8c:	d803      	bhi.n	8001f96 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0x52>
 8001f8e:	4b23      	ldr	r3, [pc, #140]	@ (800201c <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xd8>)
 8001f90:	21c4      	movs	r1, #196	@ 0xc4
 8001f92:	4a1f      	ldr	r2, [pc, #124]	@ (8002010 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xcc>)
 8001f94:	e7e8      	b.n	8001f68 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0x24>

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8001f96:	f8df b08c 	ldr.w	fp, [pc, #140]	@ 8002024 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xe0>
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8002028 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xe4>
        screenContainer(0), done(false)
 8001fa0:	f04f 0800 	mov.w	r8, #0
 8001fa4:	465a      	mov	r2, fp
 8001fa6:	4650      	mov	r0, sl
 8001fa8:	f7ff fdea 	bl	8001b80 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8001fac:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8001fae:	2100      	movs	r1, #0
 8001fb0:	6803      	ldr	r3, [r0, #0]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	4798      	blx	r3
    NoTransition() : Transition() { }
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <_ZN19FrontendApplication34gotoMainMenuScreenNoTransitionImplEv+0xdc>)
 8001fb8:	4605      	mov	r5, r0
 8001fba:	f8c0 8004 	str.w	r8, [r0, #4]
 8001fbe:	f880 8008 	strb.w	r8, [r0, #8]
 8001fc2:	4641      	mov	r1, r8
 8001fc4:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8001fc6:	68a0      	ldr	r0, [r4, #8]
 8001fc8:	6803      	ldr	r3, [r0, #0]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	4798      	blx	r3
 8001fce:	4606      	mov	r6, r0
 8001fd0:	f009 fb1e 	bl	800b610 <_ZN12MainMenuViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8001fd4:	6860      	ldr	r0, [r4, #4]
 8001fd6:	4641      	mov	r1, r8
 8001fd8:	6803      	ldr	r3, [r0, #0]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	4798      	blx	r3
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4631      	mov	r1, r6
 8001fe2:	f009 f9bb 	bl	800b35c <_ZN17MainMenuPresenterC1ER12MainMenuView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8001fe6:	1d23      	adds	r3, r4, #4
    *currentPresenter = newPresenter;
 8001fe8:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
    newPresenter->bind(model);
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8001fec:	462a      	mov	r2, r5
    *currentTrans = newTransition;
 8001fee:	f8cb 5000 	str.w	r5, [fp]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8001ff2:	4621      	mov	r1, r4
    *currentScreen = newScreen;
 8001ff4:	f8ca 6000 	str.w	r6, [sl]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8001ff8:	4630      	mov	r0, r6
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8001ffa:	f8c9 3000 	str.w	r3, [r9]
        model = m;
 8001ffe:	f8c4 9008 	str.w	r9, [r4, #8]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 8002002:	63f4      	str	r4, [r6, #60]	@ 0x3c
}
 8002004:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002008:	f7ff bde3 	b.w	8001bd2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
 800200c:	08022a50 	.word	0x08022a50
 8002010:	08022ade 	.word	0x08022ade
 8002014:	08022bb2 	.word	0x08022bb2
 8002018:	08022c05 	.word	0x08022c05
 800201c:	08022ca8 	.word	0x08022ca8
 8002020:	08023218 	.word	0x08023218
 8002024:	20024eac 	.word	0x20024eac
 8002028:	20024ea8 	.word	0x20024ea8

0800202c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	4604      	mov	r4, r0
 8002030:	4616      	mov	r6, r2
 8002032:	460d      	mov	r5, r1
        pendingScreenTransitionCallback(0)
 8002034:	f017 fe28 	bl	8019c88 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002038:	4a0b      	ldr	r2, [pc, #44]	@ (8002068 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x3c>)
        currentPresenter(0),
 800203a:	2300      	movs	r3, #0
}
 800203c:	4620      	mov	r0, r4
        instance = this;
 800203e:	6014      	str	r4, [r2, #0]
      lastClickTime(0)
 8002040:	4a0a      	ldr	r2, [pc, #40]	@ (800206c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x40>)
        hours = ms / 3600000;
 8002042:	f8a4 3158 	strh.w	r3, [r4, #344]	@ 0x158
 8002046:	6022      	str	r2, [r4, #0]
    Callback() : pobject(0), pmemfun_0(0) { }
 8002048:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x44>)
        seconds = ms / 1000;
 800204a:	f884 315a 	strb.w	r3, [r4, #346]	@ 0x15a
        milliseconds = ms;
 800204e:	f8a4 315c 	strh.w	r3, [r4, #348]	@ 0x15c
        pendingScreenTransitionCallback(0)
 8002052:	e9c4 334c 	strd	r3, r3, [r4, #304]	@ 0x130
 8002056:	e9c4 234e 	strd	r2, r3, [r4, #312]	@ 0x138
 800205a:	e9c4 3350 	strd	r3, r3, [r4, #320]	@ 0x140
      model(m),
 800205e:	e9c4 6552 	strd	r6, r5, [r4, #328]	@ 0x148
      screenSaverTick(0),
 8002062:	e9c4 3354 	strd	r3, r3, [r4, #336]	@ 0x150
}
 8002066:	bd70      	pop	{r4, r5, r6, pc}
 8002068:	20024eb0 	.word	0x20024eb0
 800206c:	0802193c 	.word	0x0802193c
 8002070:	08023200 	.word	0x08023200

08002074 <_ZN19FrontendApplication16resetScreenSaverEv>:
    lastClickTime = model.getCurrentTime();
 8002074:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c

    void tick();

    Time getCurrentTime() const
    {
        return currentTime;
 8002078:	7a1a      	ldrb	r2, [r3, #8]
 800207a:	88d9      	ldrh	r1, [r3, #6]
 800207c:	895b      	ldrh	r3, [r3, #10]
 800207e:	f8a0 1158 	strh.w	r1, [r0, #344]	@ 0x158
 8002082:	f8a0 315c 	strh.w	r3, [r0, #348]	@ 0x15c
    screenSaverTick = 0;
 8002086:	2300      	movs	r3, #0
    lastClickTime = model.getCurrentTime();
 8002088:	f880 215a 	strb.w	r2, [r0, #346]	@ 0x15a
    screenSaverTick = 0;
 800208c:	f8c0 3154 	str.w	r3, [r0, #340]	@ 0x154
}
 8002090:	4770      	bx	lr

08002092 <_ZN19FrontendApplication16handleClickEventERKN8touchgfx10ClickEventE>:
{
 8002092:	b510      	push	{r4, lr}
 8002094:	4604      	mov	r4, r0
    MVPApplication::handleClickEvent(evt);
 8002096:	f017 fc51 	bl	801993c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>
    resetScreenSaver();
 800209a:	4620      	mov	r0, r4
}
 800209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    resetScreenSaver();
 80020a0:	f7ff bfe8 	b.w	8002074 <_ZN19FrontendApplication16resetScreenSaverEv>

080020a4 <_ZN19FrontendApplication15handleDragEventERKN8touchgfx9DragEventE>:
{
 80020a4:	b510      	push	{r4, lr}
 80020a6:	4604      	mov	r4, r0
    MVPApplication::handleDragEvent(evt);
 80020a8:	f017 fc70 	bl	801998c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>
    resetScreenSaver();
 80020ac:	4620      	mov	r0, r4
}
 80020ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    resetScreenSaver();
 80020b2:	f7ff bfdf 	b.w	8002074 <_ZN19FrontendApplication16resetScreenSaverEv>
	...

080020b8 <_ZN19FrontendApplication30gotoMainMenuScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <_ZN19FrontendApplication30gotoMainMenuScreenNoTransitionEv+0x1c>)
 80020ba:	f8c0 013c 	str.w	r0, [r0, #316]	@ 0x13c
 80020be:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
    pendingScreenTransitionCallback = &transitionCallback;
 80020c8:	f500 739c 	add.w	r3, r0, #312	@ 0x138
 80020cc:	f8c0 3134 	str.w	r3, [r0, #308]	@ 0x134
}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	08001f45 	.word	0x08001f45

080020d8 <_ZN19FrontendApplication18gotoMainMenuScreenEv>:
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <_ZN19FrontendApplication18gotoMainMenuScreenEv+0x1c>)
 80020da:	f8c0 013c 	str.w	r0, [r0, #316]	@ 0x13c
 80020de:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144

void FrontendApplication::gotoMainMenuScreen()
{
    transitionCallback = Callback< FrontendApplication >(this, &FrontendApplication::gotoMainMenuScreenImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80020e8:	f500 739c 	add.w	r3, r0, #312	@ 0x138
 80020ec:	f8c0 3134 	str.w	r3, [r0, #308]	@ 0x134
}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	080021d9 	.word	0x080021d9

080020f8 <_ZN19FrontendApplication24gotoCustomControlsScreenEv>:
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <_ZN19FrontendApplication24gotoCustomControlsScreenEv+0x1c>)
 80020fa:	f8c0 013c 	str.w	r0, [r0, #316]	@ 0x13c
 80020fe:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
 8002102:	2300      	movs	r3, #0
 8002104:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
}

void FrontendApplication::gotoCustomControlsScreen()
{
    transitionCallback = Callback< FrontendApplication >(this, &FrontendApplication::gotoCustomControlsScreenImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002108:	f500 739c 	add.w	r3, r0, #312	@ 0x138
 800210c:	f8c0 3134 	str.w	r3, [r0, #308]	@ 0x134
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	08002685 	.word	0x08002685

08002118 <_ZN19FrontendApplication15gotoGraphScreenEv>:
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <_ZN19FrontendApplication15gotoGraphScreenEv+0x1c>)
 800211a:	f8c0 013c 	str.w	r0, [r0, #316]	@ 0x13c
 800211e:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
 8002122:	2300      	movs	r3, #0
 8002124:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
}

void FrontendApplication::gotoGraphScreen()
{
    transitionCallback = Callback< FrontendApplication >(this, &FrontendApplication::gotoGraphScreenImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002128:	f500 739c 	add.w	r3, r0, #312	@ 0x138
 800212c:	f8c0 3134 	str.w	r3, [r0, #308]	@ 0x134
}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	080025ad 	.word	0x080025ad

08002138 <_ZN19FrontendApplication24gotoEasingEquationScreenEv>:
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <_ZN19FrontendApplication24gotoEasingEquationScreenEv+0x1c>)
 800213a:	f8c0 013c 	str.w	r0, [r0, #316]	@ 0x13c
 800213e:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
 8002142:	2300      	movs	r3, #0
 8002144:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
}

void FrontendApplication::gotoEasingEquationScreen()
{
    transitionCallback = Callback< FrontendApplication >(this, &FrontendApplication::gotoEasingEquationScreenImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002148:	f500 739c 	add.w	r3, r0, #312	@ 0x138
 800214c:	f8c0 3134 	str.w	r3, [r0, #308]	@ 0x134
}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	080024d5 	.word	0x080024d5

08002158 <_ZN19FrontendApplication26gotoProductPresenterScreenEv>:
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <_ZN19FrontendApplication26gotoProductPresenterScreenEv+0x1c>)
 800215a:	f8c0 013c 	str.w	r0, [r0, #316]	@ 0x13c
 800215e:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
 8002162:	2300      	movs	r3, #0
 8002164:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
}

void FrontendApplication::gotoProductPresenterScreen()
{
    transitionCallback = Callback< FrontendApplication >(this, &FrontendApplication::gotoProductPresenterScreenImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002168:	f500 739c 	add.w	r3, r0, #312	@ 0x138
 800216c:	f8c0 3134 	str.w	r3, [r0, #308]	@ 0x134
}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	080023fd 	.word	0x080023fd

08002178 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>:
 8002178:	6803      	ldr	r3, [r0, #0]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	4718      	bx	r3
	...

08002180 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>:
    }
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev+0x14>)
    virtual ~SlideTransition()
 8002182:	b510      	push	{r4, lr}
 8002184:	4604      	mov	r4, r0
    }
 8002186:	f840 3b0c 	str.w	r3, [r0], #12
 800218a:	f014 fbd1 	bl	8016930 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800218e:	4620      	mov	r0, r4
 8002190:	bd10      	pop	{r4, pc}
 8002192:	bf00      	nop
 8002194:	08023290 	.word	0x08023290

08002198 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED0Ev>:
    virtual ~SlideTransition()
 8002198:	b510      	push	{r4, lr}
 800219a:	4604      	mov	r4, r0
    }
 800219c:	f7ff fff0 	bl	8002180 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>
 80021a0:	2158      	movs	r1, #88	@ 0x58
 80021a2:	4620      	mov	r0, r4
 80021a4:	f01c fcbf 	bl	801eb26 <_ZdlPvj>
 80021a8:	4620      	mov	r0, r4
 80021aa:	bd10      	pop	{r4, pc}

080021ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EED1Ev>:
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EED1Ev+0x14>)
    virtual ~SlideTransition()
 80021ae:	b510      	push	{r4, lr}
 80021b0:	4604      	mov	r4, r0
    }
 80021b2:	f840 3b0c 	str.w	r3, [r0], #12
 80021b6:	f014 fbbb 	bl	8016930 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80021ba:	4620      	mov	r0, r4
 80021bc:	bd10      	pop	{r4, pc}
 80021be:	bf00      	nop
 80021c0:	08023250 	.word	0x08023250

080021c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EED0Ev>:
    virtual ~SlideTransition()
 80021c4:	b510      	push	{r4, lr}
 80021c6:	4604      	mov	r4, r0
    }
 80021c8:	f7ff fff0 	bl	80021ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EED1Ev>
 80021cc:	2158      	movs	r1, #88	@ 0x58
 80021ce:	4620      	mov	r0, r4
 80021d0:	f01c fca9 	bl	801eb26 <_ZdlPvj>
 80021d4:	4620      	mov	r0, r4
 80021d6:	bd10      	pop	{r4, pc}

080021d8 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv>:
{
 80021d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    makeTransition< MainMenuView, MainMenuPresenter, SlideTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80021dc:	e9d0 5852 	ldrd	r5, r8, [r0, #328]	@ 0x148
{
 80021e0:	4607      	mov	r7, r0
    makeTransition< MainMenuView, MainMenuPresenter, SlideTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80021e2:	f500 7498 	add.w	r4, r0, #304	@ 0x130
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80021e6:	68a8      	ldr	r0, [r5, #8]
 80021e8:	6803      	ldr	r3, [r0, #0]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4798      	blx	r3
 80021ee:	f240 6373 	movw	r3, #1651	@ 0x673
 80021f2:	4298      	cmp	r0, r3
 80021f4:	d805      	bhi.n	8002202 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x2a>
 80021f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002320 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x148>)
 80021f8:	21c2      	movs	r1, #194	@ 0xc2
 80021fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002324 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x14c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80021fc:	484a      	ldr	r0, [pc, #296]	@ (8002328 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x150>)
 80021fe:	f01d fdb9 	bl	801fd74 <__assert_func>
 8002202:	6868      	ldr	r0, [r5, #4]
 8002204:	6803      	ldr	r3, [r0, #0]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4798      	blx	r3
 800220a:	2813      	cmp	r0, #19
 800220c:	d803      	bhi.n	8002216 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x3e>
 800220e:	4b47      	ldr	r3, [pc, #284]	@ (800232c <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x154>)
 8002210:	21c3      	movs	r1, #195	@ 0xc3
 8002212:	4a44      	ldr	r2, [pc, #272]	@ (8002324 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x14c>)
 8002214:	e7f2      	b.n	80021fc <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002216:	68e8      	ldr	r0, [r5, #12]
 8002218:	6803      	ldr	r3, [r0, #0]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4798      	blx	r3
 800221e:	2857      	cmp	r0, #87	@ 0x57
 8002220:	d803      	bhi.n	800222a <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x52>
 8002222:	4b43      	ldr	r3, [pc, #268]	@ (8002330 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x158>)
 8002224:	21c4      	movs	r1, #196	@ 0xc4
 8002226:	4a3f      	ldr	r2, [pc, #252]	@ (8002324 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x14c>)
 8002228:	e7e8      	b.n	80021fc <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x24>
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800222a:	4a42      	ldr	r2, [pc, #264]	@ (8002334 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x15c>)
 800222c:	4621      	mov	r1, r4
 800222e:	4842      	ldr	r0, [pc, #264]	@ (8002338 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x160>)
 8002230:	f04f 0900 	mov.w	r9, #0
 8002234:	f7ff fca4 	bl	8001b80 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8002238:	68e8      	ldr	r0, [r5, #12]
 800223a:	2100      	movs	r1, #0
 800223c:	6803      	ldr	r3, [r0, #0]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	4798      	blx	r3
          calculatedValue(0)
 8002242:	4b3e      	ldr	r3, [pc, #248]	@ (800233c <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x164>)
 8002244:	4606      	mov	r6, r0
 8002246:	4604      	mov	r4, r0
 8002248:	f8c0 9004 	str.w	r9, [r0, #4]
 800224c:	f880 9008 	strb.w	r9, [r0, #8]
 8002250:	f846 3b0c 	str.w	r3, [r6], #12
          snapshot(),
 8002254:	4630      	mov	r0, r6
 8002256:	f014 fbd5 	bl	8016a04 <_ZN8touchgfx14SnapshotWidgetC1Ev>
    {
 800225a:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x168>)
        this->pmemfun_1 = pmemfun_1;
 800225c:	221c      	movs	r2, #28
          snapshotPtr(&snapshot),
 800225e:	63e6      	str	r6, [r4, #60]	@ 0x3c
          animationCounter(0),
 8002260:	f884 9052 	strb.w	r9, [r4, #82]	@ 0x52
          calculatedValue(0)
 8002264:	f8a4 9056 	strh.w	r9, [r4, #86]	@ 0x56
        this->pobject = pobject;
 8002268:	e9c4 3410 	strd	r3, r4, [r4, #64]	@ 0x40
        this->pmemfun_1 = pmemfun_1;
 800226c:	2301      	movs	r3, #1
 800226e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
          direction(templateDirection),
 8002272:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002276:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
        if (HAL::USE_ANIMATION_STORAGE)
 800227a:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x16c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b303      	cbz	r3, 80022c2 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0xea>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002280:	f8df a0c4 	ldr.w	sl, [pc, #196]	@ 8002348 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x170>
 8002284:	464a      	mov	r2, r9
 8002286:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 800234c <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x174>
 800228a:	4649      	mov	r1, r9
 800228c:	f9ba 3000 	ldrsh.w	r3, [sl]
 8002290:	4630      	mov	r0, r6
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	f9bb 3000 	ldrsh.w	r3, [fp]
 8002298:	f7fe fd8a 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800229c:	4630      	mov	r0, r6
 800229e:	f014 fb49 	bl	8016934 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 80022a2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d836      	bhi.n	8002318 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x140>
 80022aa:	e8df f003 	tbb	[pc, r3]
 80022ae:	322f      	.short	0x322f
 80022b0:	0602      	.short	0x0602
                targetValue = -HAL::DISPLAY_WIDTH;
 80022b2:	f8bb 3000 	ldrh.w	r3, [fp]
                targetValue = -HAL::DISPLAY_HEIGHT;
 80022b6:	425b      	negs	r3, r3
 80022b8:	e001      	b.n	80022be <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0xe6>
                targetValue = HAL::DISPLAY_WIDTH;
 80022ba:	f8bb 3000 	ldrh.w	r3, [fp]
 80022be:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80022c2:	68a8      	ldr	r0, [r5, #8]
 80022c4:	2100      	movs	r1, #0
 80022c6:	6803      	ldr	r3, [r0, #0]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	4798      	blx	r3
 80022cc:	4606      	mov	r6, r0
 80022ce:	f009 f99f 	bl	800b610 <_ZN12MainMenuViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80022d2:	6868      	ldr	r0, [r5, #4]
 80022d4:	2100      	movs	r1, #0
 80022d6:	6803      	ldr	r3, [r0, #0]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	4798      	blx	r3
 80022dc:	4631      	mov	r1, r6
 80022de:	4605      	mov	r5, r0
 80022e0:	f009 f83c 	bl	800b35c <_ZN17MainMenuPresenterC1ER12MainMenuView>
    *currentTrans = newTransition;
 80022e4:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x15c>)
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80022e6:	4622      	mov	r2, r4
 80022e8:	4629      	mov	r1, r5
 80022ea:	4630      	mov	r0, r6
    *currentTrans = newTransition;
 80022ec:	601c      	str	r4, [r3, #0]
    *currentScreen = newScreen;
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0x160>)
    *currentPresenter = newPresenter;
 80022f0:	f8c7 5130 	str.w	r5, [r7, #304]	@ 0x130
    *currentScreen = newScreen;
 80022f4:	601e      	str	r6, [r3, #0]
    model->bind(newPresenter);
 80022f6:	1d2b      	adds	r3, r5, #4
        modelListener = listener;
 80022f8:	f8c8 3000 	str.w	r3, [r8]
 80022fc:	f8c5 8008 	str.w	r8, [r5, #8]
 8002300:	63f5      	str	r5, [r6, #60]	@ 0x3c
}
 8002302:	b003      	add	sp, #12
 8002304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8002308:	f7ff bc63 	b.w	8001bd2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
                targetValue = HAL::DISPLAY_HEIGHT;
 800230c:	f8ba 3000 	ldrh.w	r3, [sl]
 8002310:	e7d5      	b.n	80022be <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0xe6>
                targetValue = -HAL::DISPLAY_HEIGHT;
 8002312:	f8ba 3000 	ldrh.w	r3, [sl]
 8002316:	e7ce      	b.n	80022b6 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0xde>
                done = true;
 8002318:	2301      	movs	r3, #1
 800231a:	7223      	strb	r3, [r4, #8]
                break;
 800231c:	e7d1      	b.n	80022c2 <_ZN19FrontendApplication22gotoMainMenuScreenImplEv+0xea>
 800231e:	bf00      	nop
 8002320:	08022a50 	.word	0x08022a50
 8002324:	08022d4b 	.word	0x08022d4b
 8002328:	08022bb2 	.word	0x08022bb2
 800232c:	08022c05 	.word	0x08022c05
 8002330:	08022ca8 	.word	0x08022ca8
 8002334:	20024eac 	.word	0x20024eac
 8002338:	20024ea8 	.word	0x20024ea8
 800233c:	08023250 	.word	0x08023250
 8002340:	08023238 	.word	0x08023238
 8002344:	20024e33 	.word	0x20024e33
 8002348:	20024e2a 	.word	0x20024e2a
 800234c:	20024e28 	.word	0x20024e28

08002350 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 8002350:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
          calculatedValue(0)
 8002354:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0x98>)
 8002356:	2600      	movs	r6, #0
 8002358:	4605      	mov	r5, r0
    SlideTransition(const uint8_t transitionSteps = 20)
 800235a:	4604      	mov	r4, r0
 800235c:	6046      	str	r6, [r0, #4]
 800235e:	460f      	mov	r7, r1
 8002360:	7206      	strb	r6, [r0, #8]
          calculatedValue(0)
 8002362:	f845 3b0c 	str.w	r3, [r5], #12
          snapshot(),
 8002366:	4628      	mov	r0, r5
 8002368:	f014 fb4c 	bl	8016a04 <_ZN8touchgfx14SnapshotWidgetC1Ev>
    {
 800236c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0x9c>)
        this->pmemfun_1 = pmemfun_1;
 800236e:	221c      	movs	r2, #28
          snapshotPtr(&snapshot),
 8002370:	63e5      	str	r5, [r4, #60]	@ 0x3c
          animationSteps(transitionSteps),
 8002372:	f884 7051 	strb.w	r7, [r4, #81]	@ 0x51
          animationCounter(0),
 8002376:	f884 6052 	strb.w	r6, [r4, #82]	@ 0x52
          calculatedValue(0)
 800237a:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
        this->pobject = pobject;
 800237e:	e9c4 3410 	strd	r3, r4, [r4, #64]	@ 0x40
        this->pmemfun_1 = pmemfun_1;
 8002382:	2301      	movs	r3, #1
 8002384:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
          direction(templateDirection),
 8002388:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        if (HAL::USE_ANIMATION_STORAGE)
 800238c:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xa0>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b1fb      	cbz	r3, 80023d2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0x82>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002392:	4f18      	ldr	r7, [pc, #96]	@ (80023f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xa4>)
 8002394:	4632      	mov	r2, r6
 8002396:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 80023f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xa8>
 800239a:	4631      	mov	r1, r6
 800239c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023a0:	4628      	mov	r0, r5
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f9b8 3000 	ldrsh.w	r3, [r8]
 80023a8:	f7fe fd02 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 80023ac:	4628      	mov	r0, r5
 80023ae:	f014 fac1 	bl	8016934 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 80023b2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d813      	bhi.n	80023e2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0x92>
 80023ba:	e8df f003 	tbb	[pc, r3]
 80023be:	100e      	.short	0x100e
 80023c0:	0602      	.short	0x0602
                targetValue = -HAL::DISPLAY_WIDTH;
 80023c2:	f8b8 3000 	ldrh.w	r3, [r8]
                targetValue = -HAL::DISPLAY_HEIGHT;
 80023c6:	425b      	negs	r3, r3
 80023c8:	e001      	b.n	80023ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0x7e>
                targetValue = HAL::DISPLAY_WIDTH;
 80023ca:	f8b8 3000 	ldrh.w	r3, [r8]
 80023ce:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
    }
 80023d2:	4620      	mov	r0, r4
 80023d4:	b002      	add	sp, #8
 80023d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                targetValue = HAL::DISPLAY_HEIGHT;
 80023da:	883b      	ldrh	r3, [r7, #0]
 80023dc:	e7f7      	b.n	80023ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0x7e>
                targetValue = -HAL::DISPLAY_HEIGHT;
 80023de:	883b      	ldrh	r3, [r7, #0]
 80023e0:	e7f1      	b.n	80023c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0x76>
                done = true;
 80023e2:	2301      	movs	r3, #1
 80023e4:	7223      	strb	r3, [r4, #8]
                break;
 80023e6:	e7f4      	b.n	80023d2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0x82>
 80023e8:	08023290 	.word	0x08023290
 80023ec:	08023278 	.word	0x08023278
 80023f0:	20024e33 	.word	0x20024e33
 80023f4:	20024e2a 	.word	0x20024e2a
 80023f8:	20024e28 	.word	0x20024e28

080023fc <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv>:

void FrontendApplication::gotoProductPresenterScreenImpl()
{
 80023fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    makeTransition< ProductPresenterView, ProductPresenterPresenter, SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002400:	e9d0 4852 	ldrd	r4, r8, [r0, #328]	@ 0x148
{
 8002404:	4606      	mov	r6, r0
    makeTransition< ProductPresenterView, ProductPresenterPresenter, SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002406:	f500 7598 	add.w	r5, r0, #304	@ 0x130
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800240a:	68a0      	ldr	r0, [r4, #8]
 800240c:	6803      	ldr	r3, [r0, #0]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4798      	blx	r3
 8002412:	f5b0 6f10 	cmp.w	r0, #2304	@ 0x900
 8002416:	d205      	bcs.n	8002424 <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0x28>
 8002418:	4b27      	ldr	r3, [pc, #156]	@ (80024b8 <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0xbc>)
 800241a:	21c2      	movs	r1, #194	@ 0xc2
 800241c:	4a27      	ldr	r2, [pc, #156]	@ (80024bc <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0xc0>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800241e:	4828      	ldr	r0, [pc, #160]	@ (80024c0 <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0xc4>)
 8002420:	f01d fca8 	bl	801fd74 <__assert_func>
 8002424:	6860      	ldr	r0, [r4, #4]
 8002426:	6803      	ldr	r3, [r0, #0]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4798      	blx	r3
 800242c:	2813      	cmp	r0, #19
 800242e:	d803      	bhi.n	8002438 <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0x3c>
 8002430:	4b24      	ldr	r3, [pc, #144]	@ (80024c4 <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0xc8>)
 8002432:	21c3      	movs	r1, #195	@ 0xc3
 8002434:	4a21      	ldr	r2, [pc, #132]	@ (80024bc <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0xc0>)
 8002436:	e7f2      	b.n	800241e <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002438:	68e0      	ldr	r0, [r4, #12]
 800243a:	6803      	ldr	r3, [r0, #0]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4798      	blx	r3
 8002440:	2857      	cmp	r0, #87	@ 0x57
 8002442:	d803      	bhi.n	800244c <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0x50>
 8002444:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0xcc>)
 8002446:	21c4      	movs	r1, #196	@ 0xc4
 8002448:	4a1c      	ldr	r2, [pc, #112]	@ (80024bc <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0xc0>)
 800244a:	e7e8      	b.n	800241e <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0x22>
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800244c:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80024cc <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0xd0>
 8002450:	4629      	mov	r1, r5
 8002452:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 80024d0 <_ZN19FrontendApplication30gotoProductPresenterScreenImplEv+0xd4>
 8002456:	4652      	mov	r2, sl
 8002458:	4648      	mov	r0, r9
 800245a:	f7ff fb91 	bl	8001b80 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800245e:	2100      	movs	r1, #0
 8002460:	68e0      	ldr	r0, [r4, #12]
 8002462:	f7ff fe89 	bl	8002178 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>
 8002466:	2114      	movs	r1, #20
 8002468:	4607      	mov	r7, r0
 800246a:	f7ff ff71 	bl	8002350 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800246e:	68a0      	ldr	r0, [r4, #8]
 8002470:	2100      	movs	r1, #0
 8002472:	6803      	ldr	r3, [r0, #0]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	4798      	blx	r3
 8002478:	4605      	mov	r5, r0
 800247a:	f009 fc37 	bl	800bcec <_ZN20ProductPresenterViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800247e:	6860      	ldr	r0, [r4, #4]
 8002480:	2100      	movs	r1, #0
 8002482:	6803      	ldr	r3, [r0, #0]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	4798      	blx	r3
 8002488:	4604      	mov	r4, r0
 800248a:	4629      	mov	r1, r5
 800248c:	f009 fb5a 	bl	800bb44 <_ZN25ProductPresenterPresenterC1ER20ProductPresenterView>
    model->bind(newPresenter);
 8002490:	1d23      	adds	r3, r4, #4
    *currentPresenter = newPresenter;
 8002492:	f8c6 4130 	str.w	r4, [r6, #304]	@ 0x130
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8002496:	463a      	mov	r2, r7
    *currentTrans = newTransition;
 8002498:	f8ca 7000 	str.w	r7, [sl]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800249c:	4621      	mov	r1, r4
    *currentScreen = newScreen;
 800249e:	f8c9 5000 	str.w	r5, [r9]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80024a2:	4628      	mov	r0, r5
 80024a4:	f8c8 3000 	str.w	r3, [r8]
 80024a8:	f8c4 8008 	str.w	r8, [r4, #8]
 80024ac:	63ec      	str	r4, [r5, #60]	@ 0x3c
}
 80024ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024b2:	f7ff bb8e 	b.w	8001bd2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
 80024b6:	bf00      	nop
 80024b8:	08022a50 	.word	0x08022a50
 80024bc:	08022e33 	.word	0x08022e33
 80024c0:	08022bb2 	.word	0x08022bb2
 80024c4:	08022c05 	.word	0x08022c05
 80024c8:	08022ca8 	.word	0x08022ca8
 80024cc:	20024eac 	.word	0x20024eac
 80024d0:	20024ea8 	.word	0x20024ea8

080024d4 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv>:
{
 80024d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    makeTransition< EasingEquationView, EasingEquationPresenter, SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80024d8:	e9d0 4852 	ldrd	r4, r8, [r0, #328]	@ 0x148
{
 80024dc:	4606      	mov	r6, r0
    makeTransition< EasingEquationView, EasingEquationPresenter, SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80024de:	f500 7598 	add.w	r5, r0, #304	@ 0x130
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80024e2:	68a0      	ldr	r0, [r4, #8]
 80024e4:	6803      	ldr	r3, [r0, #0]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4798      	blx	r3
 80024ea:	f241 436b 	movw	r3, #5227	@ 0x146b
 80024ee:	4298      	cmp	r0, r3
 80024f0:	d805      	bhi.n	80024fe <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0x2a>
 80024f2:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0xbc>)
 80024f4:	21c2      	movs	r1, #194	@ 0xc2
 80024f6:	4a27      	ldr	r2, [pc, #156]	@ (8002594 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0xc0>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80024f8:	4827      	ldr	r0, [pc, #156]	@ (8002598 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0xc4>)
 80024fa:	f01d fc3b 	bl	801fd74 <__assert_func>
 80024fe:	6860      	ldr	r0, [r4, #4]
 8002500:	6803      	ldr	r3, [r0, #0]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4798      	blx	r3
 8002506:	2813      	cmp	r0, #19
 8002508:	d803      	bhi.n	8002512 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0x3e>
 800250a:	4b24      	ldr	r3, [pc, #144]	@ (800259c <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0xc8>)
 800250c:	21c3      	movs	r1, #195	@ 0xc3
 800250e:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0xc0>)
 8002510:	e7f2      	b.n	80024f8 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002512:	68e0      	ldr	r0, [r4, #12]
 8002514:	6803      	ldr	r3, [r0, #0]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4798      	blx	r3
 800251a:	2857      	cmp	r0, #87	@ 0x57
 800251c:	d803      	bhi.n	8002526 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0x52>
 800251e:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0xcc>)
 8002520:	21c4      	movs	r1, #196	@ 0xc4
 8002522:	4a1c      	ldr	r2, [pc, #112]	@ (8002594 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0xc0>)
 8002524:	e7e8      	b.n	80024f8 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0x24>
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8002526:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80025a4 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0xd0>
 800252a:	4629      	mov	r1, r5
 800252c:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80025a8 <_ZN19FrontendApplication28gotoEasingEquationScreenImplEv+0xd4>
 8002530:	4652      	mov	r2, sl
 8002532:	4648      	mov	r0, r9
 8002534:	f7ff fb24 	bl	8001b80 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8002538:	2100      	movs	r1, #0
 800253a:	68e0      	ldr	r0, [r4, #12]
 800253c:	f7ff fe1c 	bl	8002178 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>
 8002540:	2114      	movs	r1, #20
 8002542:	4607      	mov	r7, r0
 8002544:	f7ff ff04 	bl	8002350 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8002548:	68a0      	ldr	r0, [r4, #8]
 800254a:	2100      	movs	r1, #0
 800254c:	6803      	ldr	r3, [r0, #0]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	4798      	blx	r3
 8002552:	4605      	mov	r5, r0
 8002554:	f004 ff9a 	bl	800748c <_ZN18EasingEquationViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8002558:	6860      	ldr	r0, [r4, #4]
 800255a:	2100      	movs	r1, #0
 800255c:	6803      	ldr	r3, [r0, #0]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	4798      	blx	r3
 8002562:	4604      	mov	r4, r0
 8002564:	4629      	mov	r1, r5
 8002566:	f004 fbb9 	bl	8006cdc <_ZN23EasingEquationPresenterC1ER18EasingEquationView>
    model->bind(newPresenter);
 800256a:	1d23      	adds	r3, r4, #4
    *currentPresenter = newPresenter;
 800256c:	f8c6 4130 	str.w	r4, [r6, #304]	@ 0x130
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8002570:	463a      	mov	r2, r7
    *currentTrans = newTransition;
 8002572:	f8ca 7000 	str.w	r7, [sl]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8002576:	4621      	mov	r1, r4
    *currentScreen = newScreen;
 8002578:	f8c9 5000 	str.w	r5, [r9]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800257c:	4628      	mov	r0, r5
 800257e:	f8c8 3000 	str.w	r3, [r8]
 8002582:	f8c4 8008 	str.w	r8, [r4, #8]
 8002586:	63ec      	str	r4, [r5, #60]	@ 0x3c
}
 8002588:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800258c:	f7ff bb21 	b.w	8001bd2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
 8002590:	08022a50 	.word	0x08022a50
 8002594:	08022f2b 	.word	0x08022f2b
 8002598:	08022bb2 	.word	0x08022bb2
 800259c:	08022c05 	.word	0x08022c05
 80025a0:	08022ca8 	.word	0x08022ca8
 80025a4:	20024eac 	.word	0x20024eac
 80025a8:	20024ea8 	.word	0x20024ea8

080025ac <_ZN19FrontendApplication19gotoGraphScreenImplEv>:
{
 80025ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    makeTransition< GraphView, GraphPresenter, SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80025b0:	e9d0 4852 	ldrd	r4, r8, [r0, #328]	@ 0x148
{
 80025b4:	4606      	mov	r6, r0
    makeTransition< GraphView, GraphPresenter, SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80025b6:	f500 7598 	add.w	r5, r0, #304	@ 0x130
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80025ba:	68a0      	ldr	r0, [r4, #8]
 80025bc:	6803      	ldr	r3, [r0, #0]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4798      	blx	r3
 80025c2:	f641 0347 	movw	r3, #6215	@ 0x1847
 80025c6:	4298      	cmp	r0, r3
 80025c8:	d805      	bhi.n	80025d6 <_ZN19FrontendApplication19gotoGraphScreenImplEv+0x2a>
 80025ca:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <_ZN19FrontendApplication19gotoGraphScreenImplEv+0xbc>)
 80025cc:	21c2      	movs	r1, #194	@ 0xc2
 80025ce:	4a27      	ldr	r2, [pc, #156]	@ (800266c <_ZN19FrontendApplication19gotoGraphScreenImplEv+0xc0>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80025d0:	4827      	ldr	r0, [pc, #156]	@ (8002670 <_ZN19FrontendApplication19gotoGraphScreenImplEv+0xc4>)
 80025d2:	f01d fbcf 	bl	801fd74 <__assert_func>
 80025d6:	6860      	ldr	r0, [r4, #4]
 80025d8:	6803      	ldr	r3, [r0, #0]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4798      	blx	r3
 80025de:	2813      	cmp	r0, #19
 80025e0:	d803      	bhi.n	80025ea <_ZN19FrontendApplication19gotoGraphScreenImplEv+0x3e>
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <_ZN19FrontendApplication19gotoGraphScreenImplEv+0xc8>)
 80025e4:	21c3      	movs	r1, #195	@ 0xc3
 80025e6:	4a21      	ldr	r2, [pc, #132]	@ (800266c <_ZN19FrontendApplication19gotoGraphScreenImplEv+0xc0>)
 80025e8:	e7f2      	b.n	80025d0 <_ZN19FrontendApplication19gotoGraphScreenImplEv+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80025ea:	68e0      	ldr	r0, [r4, #12]
 80025ec:	6803      	ldr	r3, [r0, #0]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4798      	blx	r3
 80025f2:	2857      	cmp	r0, #87	@ 0x57
 80025f4:	d803      	bhi.n	80025fe <_ZN19FrontendApplication19gotoGraphScreenImplEv+0x52>
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <_ZN19FrontendApplication19gotoGraphScreenImplEv+0xcc>)
 80025f8:	21c4      	movs	r1, #196	@ 0xc4
 80025fa:	4a1c      	ldr	r2, [pc, #112]	@ (800266c <_ZN19FrontendApplication19gotoGraphScreenImplEv+0xc0>)
 80025fc:	e7e8      	b.n	80025d0 <_ZN19FrontendApplication19gotoGraphScreenImplEv+0x24>
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80025fe:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800267c <_ZN19FrontendApplication19gotoGraphScreenImplEv+0xd0>
 8002602:	4629      	mov	r1, r5
 8002604:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8002680 <_ZN19FrontendApplication19gotoGraphScreenImplEv+0xd4>
 8002608:	4652      	mov	r2, sl
 800260a:	4648      	mov	r0, r9
 800260c:	f7ff fab8 	bl	8001b80 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8002610:	2100      	movs	r1, #0
 8002612:	68e0      	ldr	r0, [r4, #12]
 8002614:	f7ff fdb0 	bl	8002178 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>
 8002618:	2114      	movs	r1, #20
 800261a:	4607      	mov	r7, r0
 800261c:	f7ff fe98 	bl	8002350 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8002620:	68a0      	ldr	r0, [r4, #8]
 8002622:	2100      	movs	r1, #0
 8002624:	6803      	ldr	r3, [r0, #0]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	4798      	blx	r3
 800262a:	4605      	mov	r5, r0
 800262c:	f006 fb94 	bl	8008d58 <_ZN9GraphViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8002630:	6860      	ldr	r0, [r4, #4]
 8002632:	2100      	movs	r1, #0
 8002634:	6803      	ldr	r3, [r0, #0]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	4798      	blx	r3
 800263a:	4604      	mov	r4, r0
 800263c:	4629      	mov	r1, r5
 800263e:	f006 f9c9 	bl	80089d4 <_ZN14GraphPresenterC1ER9GraphView>
    model->bind(newPresenter);
 8002642:	1d23      	adds	r3, r4, #4
    *currentPresenter = newPresenter;
 8002644:	f8c6 4130 	str.w	r4, [r6, #304]	@ 0x130
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8002648:	463a      	mov	r2, r7
    *currentTrans = newTransition;
 800264a:	f8ca 7000 	str.w	r7, [sl]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800264e:	4621      	mov	r1, r4
    *currentScreen = newScreen;
 8002650:	f8c9 5000 	str.w	r5, [r9]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8002654:	4628      	mov	r0, r5
 8002656:	f8c8 3000 	str.w	r3, [r8]
 800265a:	f8c4 8008 	str.w	r8, [r4, #8]
 800265e:	63ec      	str	r4, [r5, #60]	@ 0x3c
}
 8002660:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002664:	f7ff bab5 	b.w	8001bd2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
 8002668:	08022a50 	.word	0x08022a50
 800266c:	0802301f 	.word	0x0802301f
 8002670:	08022bb2 	.word	0x08022bb2
 8002674:	08022c05 	.word	0x08022c05
 8002678:	08022ca8 	.word	0x08022ca8
 800267c:	20024eac 	.word	0x20024eac
 8002680:	20024ea8 	.word	0x20024ea8

08002684 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv>:
{
 8002684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    makeTransition< CustomControlsView, CustomControlsPresenter, SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002688:	e9d0 4852 	ldrd	r4, r8, [r0, #328]	@ 0x148
{
 800268c:	4606      	mov	r6, r0
    makeTransition< CustomControlsView, CustomControlsPresenter, SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800268e:	f500 7598 	add.w	r5, r0, #304	@ 0x130
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002692:	68a0      	ldr	r0, [r4, #8]
 8002694:	6803      	ldr	r3, [r0, #0]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4798      	blx	r3
 800269a:	f641 230b 	movw	r3, #6667	@ 0x1a0b
 800269e:	4298      	cmp	r0, r3
 80026a0:	d805      	bhi.n	80026ae <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0x2a>
 80026a2:	4b27      	ldr	r3, [pc, #156]	@ (8002740 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0xbc>)
 80026a4:	21c2      	movs	r1, #194	@ 0xc2
 80026a6:	4a27      	ldr	r2, [pc, #156]	@ (8002744 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0xc0>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80026a8:	4827      	ldr	r0, [pc, #156]	@ (8002748 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0xc4>)
 80026aa:	f01d fb63 	bl	801fd74 <__assert_func>
 80026ae:	6860      	ldr	r0, [r4, #4]
 80026b0:	6803      	ldr	r3, [r0, #0]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4798      	blx	r3
 80026b6:	2813      	cmp	r0, #19
 80026b8:	d803      	bhi.n	80026c2 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0x3e>
 80026ba:	4b24      	ldr	r3, [pc, #144]	@ (800274c <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0xc8>)
 80026bc:	21c3      	movs	r1, #195	@ 0xc3
 80026be:	4a21      	ldr	r2, [pc, #132]	@ (8002744 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0xc0>)
 80026c0:	e7f2      	b.n	80026a8 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80026c2:	68e0      	ldr	r0, [r4, #12]
 80026c4:	6803      	ldr	r3, [r0, #0]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4798      	blx	r3
 80026ca:	2857      	cmp	r0, #87	@ 0x57
 80026cc:	d803      	bhi.n	80026d6 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0x52>
 80026ce:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0xcc>)
 80026d0:	21c4      	movs	r1, #196	@ 0xc4
 80026d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002744 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0xc0>)
 80026d4:	e7e8      	b.n	80026a8 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0x24>
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80026d6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8002754 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0xd0>
 80026da:	4629      	mov	r1, r5
 80026dc:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8002758 <_ZN19FrontendApplication28gotoCustomControlsScreenImplEv+0xd4>
 80026e0:	4652      	mov	r2, sl
 80026e2:	4648      	mov	r0, r9
 80026e4:	f7ff fa4c 	bl	8001b80 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80026e8:	2100      	movs	r1, #0
 80026ea:	68e0      	ldr	r0, [r4, #12]
 80026ec:	f7ff fd44 	bl	8002178 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>
 80026f0:	2114      	movs	r1, #20
 80026f2:	4607      	mov	r7, r0
 80026f4:	f7ff fe2c 	bl	8002350 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80026f8:	68a0      	ldr	r0, [r4, #8]
 80026fa:	2100      	movs	r1, #0
 80026fc:	6803      	ldr	r3, [r0, #0]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	4798      	blx	r3
 8002702:	4605      	mov	r5, r0
 8002704:	f001 f856 	bl	80037b4 <_ZN18CustomControlsViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8002708:	6860      	ldr	r0, [r4, #4]
 800270a:	2100      	movs	r1, #0
 800270c:	6803      	ldr	r3, [r0, #0]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	4798      	blx	r3
 8002712:	4604      	mov	r4, r0
 8002714:	4629      	mov	r1, r5
 8002716:	f000 fdd7 	bl	80032c8 <_ZN23CustomControlsPresenterC1ER18CustomControlsView>
    model->bind(newPresenter);
 800271a:	1d23      	adds	r3, r4, #4
    *currentPresenter = newPresenter;
 800271c:	f8c6 4130 	str.w	r4, [r6, #304]	@ 0x130
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8002720:	463a      	mov	r2, r7
    *currentTrans = newTransition;
 8002722:	f8ca 7000 	str.w	r7, [sl]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8002726:	4621      	mov	r1, r4
    *currentScreen = newScreen;
 8002728:	f8c9 5000 	str.w	r5, [r9]
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800272c:	4628      	mov	r0, r5
 800272e:	f8c8 3000 	str.w	r3, [r8]
 8002732:	f8c4 8008 	str.w	r8, [r4, #8]
 8002736:	63ec      	str	r4, [r5, #60]	@ 0x3c
}
 8002738:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800273c:	f7ff ba49 	b.w	8001bd2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
 8002740:	08022a50 	.word	0x08022a50
 8002744:	08023101 	.word	0x08023101
 8002748:	08022bb2 	.word	0x08022bb2
 800274c:	08022c05 	.word	0x08022c05
 8002750:	08022ca8 	.word	0x08022ca8
 8002754:	20024eac 	.word	0x20024eac
 8002758:	20024ea8 	.word	0x20024ea8

0800275c <_ZN14SwipeContainer14setSwipeCutoffEt>:
    endElasticWidth = width;
}

void SwipeContainer::setSwipeCutoff(uint16_t cutoff)
{
    swipeCutoff = cutoff;
 800275c:	8601      	strh	r1, [r0, #48]	@ 0x30
}
 800275e:	4770      	bx	lr

08002760 <_ZN14SwipeContainer3addERN8touchgfx8DrawableE>:
{
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	4604      	mov	r4, r0
    screens.add(screen);
 8002764:	f500 7020 	add.w	r0, r0, #640	@ 0x280
{
 8002768:	460d      	mov	r5, r1
    screens.add(screen);
 800276a:	f010 fd63 	bl	8013234 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
    numberOfScreens++;
 800276e:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
    dotIndicator.setNumberOfDots(numberOfScreens);
 8002772:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
    numberOfScreens++;
 8002776:	3101      	adds	r1, #1
 8002778:	b2c9      	uxtb	r1, r1
 800277a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
    dotIndicator.setNumberOfDots(numberOfScreens);
 800277e:	f7ff f8a5 	bl	80018cc <_ZN12DotIndicator15setNumberOfDotsEh>
    setWidth(screen.getWidth());
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8002788:	4620      	mov	r0, r4
 800278a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278c:	4798      	blx	r3
    setHeight(screen.getHeight());
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
 8002794:	4620      	mov	r0, r4
 8002796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setHeight(screen.getHeight());
 800279c:	4718      	bx	r3

0800279e <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE>:

void SwipeContainer::handleClickEvent(const ClickEvent& evt)
{
    // If an animation is already in progress do not
    // react to clicks
    if (currentState != NO_ANIMATION)
 800279e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80027a2:	2b04      	cmp	r3, #4
{
 80027a4:	b510      	push	{r4, lr}
 80027a6:	4604      	mov	r4, r0
    if (currentState != NO_ANIMATION)
 80027a8:	d12a      	bne.n	8002800 <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x62>
    {
        return;
    }

    if (evt.getType() == ClickEvent::RELEASED)
 80027aa:	790b      	ldrb	r3, [r1, #4]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d127      	bne.n	8002800 <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x62>
    {
        // Save current position for use during animation
        animateDistance = dragX;
 80027b0:	f9b0 3032 	ldrsh.w	r3, [r0, #50]	@ 0x32
        startX = screens.getX();
 80027b4:	f8b0 2284 	ldrh.w	r2, [r0, #644]	@ 0x284

        if (dragX < 0)
 80027b8:	2b00      	cmp	r3, #0
        animateDistance = dragX;
 80027ba:	8683      	strh	r3, [r0, #52]	@ 0x34
        startX = screens.getX();
 80027bc:	86c2      	strh	r2, [r0, #54]	@ 0x36
        if (dragX < 0)
 80027be:	da20      	bge.n	8002802 <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x64>
        {
            if (currentScreen == getNumberOfScreens() - 1 || dragX > -swipeCutoff)
 80027c0:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 80027c4:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 80027c8:	3a01      	subs	r2, #1
 80027ca:	4291      	cmp	r1, r2
 80027cc:	d015      	beq.n	80027fa <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x5c>
 80027ce:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 80027d0:	4252      	negs	r2, r2
 80027d2:	4293      	cmp	r3, r2
 80027d4:	dc11      	bgt.n	80027fa <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x5c>
            {
                currentState = ANIMATE_SWIPE_CANCELLED_LEFT;
            }
            else
            {
                currentState = ANIMATE_LEFT;
 80027d6:	2302      	movs	r3, #2
            }
            else
            {
                currentState = ANIMATE_RIGHT;

                if (menuChangeInitiatedAction && menuChangeInitiatedAction->isValid())
 80027d8:	f8d4 02b0 	ldr.w	r0, [r4, #688]	@ 0x2b0
                currentState = ANIMATE_RIGHT;
 80027dc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
                if (menuChangeInitiatedAction && menuChangeInitiatedAction->isValid())
 80027e0:	b170      	cbz	r0, 8002800 <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x62>
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4798      	blx	r3
 80027e8:	b150      	cbz	r0, 8002800 <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x62>
                {
                    menuChangeInitiatedAction->execute(*this);
 80027ea:	f8d4 02b0 	ldr.w	r0, [r4, #688]	@ 0x2b0
 80027ee:	4621      	mov	r1, r4
 80027f0:	6803      	ldr	r3, [r0, #0]
                }
            }
        }
    }
}
 80027f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    menuChangeInitiatedAction->execute(*this);
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4718      	bx	r3
                currentState = ANIMATE_SWIPE_CANCELLED_LEFT;
 80027fa:	2300      	movs	r3, #0
                currentState = ANIMATE_SWIPE_CANCELLED_RIGHT;
 80027fc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8002800:	bd10      	pop	{r4, pc}
        else if (dragX > 0)
 8002802:	d0fd      	beq.n	8002800 <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x62>
            if (currentScreen == 0 || dragX < swipeCutoff)
 8002804:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8002808:	b112      	cbz	r2, 8002810 <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x72>
 800280a:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 800280c:	4293      	cmp	r3, r2
 800280e:	da01      	bge.n	8002814 <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x76>
                currentState = ANIMATE_SWIPE_CANCELLED_RIGHT;
 8002810:	2301      	movs	r3, #1
 8002812:	e7f3      	b.n	80027fc <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x5e>
                currentState = ANIMATE_RIGHT;
 8002814:	2303      	movs	r3, #3
 8002816:	e7df      	b.n	80027d8 <_ZN14SwipeContainer16handleClickEventERKN8touchgfx10ClickEventE+0x3a>

08002818 <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE>:
}

void SwipeContainer::handleGestureEvent(const GestureEvent& evt)
{
    // Do not accept gestures while animating
    if (currentState != NO_ANIMATION)
 8002818:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800281c:	2b04      	cmp	r3, #4
{
 800281e:	b510      	push	{r4, lr}
 8002820:	4604      	mov	r4, r0
    if (currentState != NO_ANIMATION)
 8002822:	d124      	bne.n	800286e <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE+0x56>
    {
        return;
    }

    if (evt.getType() == evt.SWIPE_HORIZONTAL)
 8002824:	790b      	ldrb	r3, [r1, #4]
 8002826:	bb13      	cbnz	r3, 800286e <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE+0x56>
 8002828:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    {
        // Save current position for use during animation
        animateDistance = dragX;
 800282c:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
        startX = screens.getX();

        if (evt.getVelocity() < 0  && currentScreen < getNumberOfScreens() - 1)
 800282e:	2b00      	cmp	r3, #0
        animateDistance = dragX;
 8002830:	8682      	strh	r2, [r0, #52]	@ 0x34
        startX = screens.getX();
 8002832:	f8b0 2284 	ldrh.w	r2, [r0, #644]	@ 0x284
 8002836:	86c2      	strh	r2, [r0, #54]	@ 0x36
        if (evt.getVelocity() < 0  && currentScreen < getNumberOfScreens() - 1)
 8002838:	da18      	bge.n	800286c <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE+0x54>
 800283a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800283e:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8002842:	3b01      	subs	r3, #1
 8002844:	429a      	cmp	r2, r3
 8002846:	da12      	bge.n	800286e <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE+0x56>
        {
            currentState = ANIMATE_LEFT;
 8002848:	2302      	movs	r3, #2
        }
        else if (evt.getVelocity() > 0  && currentScreen > 0)
        {
            currentState = ANIMATE_RIGHT;

            if (menuChangeInitiatedAction && menuChangeInitiatedAction->isValid())
 800284a:	f8d4 02b0 	ldr.w	r0, [r4, #688]	@ 0x2b0
            currentState = ANIMATE_RIGHT;
 800284e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            if (menuChangeInitiatedAction && menuChangeInitiatedAction->isValid())
 8002852:	b160      	cbz	r0, 800286e <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE+0x56>
 8002854:	6803      	ldr	r3, [r0, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4798      	blx	r3
 800285a:	b140      	cbz	r0, 800286e <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE+0x56>
            {
                menuChangeInitiatedAction->execute(*this);
 800285c:	f8d4 02b0 	ldr.w	r0, [r4, #688]	@ 0x2b0
 8002860:	4621      	mov	r1, r4
 8002862:	6803      	ldr	r3, [r0, #0]
            }
        }
    }
}
 8002864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                menuChangeInitiatedAction->execute(*this);
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	4718      	bx	r3
        else if (evt.getVelocity() > 0  && currentScreen > 0)
 800286c:	d100      	bne.n	8002870 <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE+0x58>
}
 800286e:	bd10      	pop	{r4, pc}
        else if (evt.getVelocity() > 0  && currentScreen > 0)
 8002870:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0fa      	beq.n	800286e <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE+0x56>
            currentState = ANIMATE_RIGHT;
 8002878:	2303      	movs	r3, #3
 800287a:	e7e6      	b.n	800284a <_ZN14SwipeContainer18handleGestureEventERKN8touchgfx12GestureEventE+0x32>

0800287c <_ZN14SwipeContainerC1Ev>:
SwipeContainer::SwipeContainer() :
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    menuChangeEndedAction(0)
 800287e:	4b23      	ldr	r3, [pc, #140]	@ (800290c <_ZN14SwipeContainerC1Ev+0x90>)
        this->x = x;
 8002880:	2500      	movs	r5, #0
        touchable(false),
 8002882:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8002886:	f100 063c 	add.w	r6, r0, #60	@ 0x3c
 800288a:	6003      	str	r3, [r0, #0]
    currentState(NO_ANIMATION),
 800288c:	2304      	movs	r3, #4
SwipeContainer::SwipeContainer() :
 800288e:	4604      	mov	r4, r0
        nextDrawChainElement(0),
 8002890:	61c5      	str	r5, [r0, #28]
    currentState(NO_ANIMATION),
 8002892:	8583      	strh	r3, [r0, #44]	@ 0x2c
    swipeCutoff(80),
 8002894:	2350      	movs	r3, #80	@ 0x50
        touchable(false),
 8002896:	8487      	strh	r7, [r0, #36]	@ 0x24
 8002898:	6303      	str	r3, [r0, #48]	@ 0x30
    endElasticWidth(30),
 800289a:	231e      	movs	r3, #30
 800289c:	6285      	str	r5, [r0, #40]	@ 0x28
    animationCounter(0),
 800289e:	f880 502e 	strb.w	r5, [r0, #46]	@ 0x2e
    currentScreen(0),
 80028a2:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
    endElasticWidth(30),
 80028a6:	8743      	strh	r3, [r0, #58]	@ 0x3a
        this->width = width;
 80028a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
        this->width = 0;
 80028ac:	e9c0 5503 	strd	r5, r5, [r0, #12]
        nextSibling(0),
 80028b0:	e9c0 5505 	strd	r5, r5, [r0, #20]
    menuChangeEndedAction(0)
 80028b4:	4630      	mov	r0, r6
 80028b6:	f7fe ff99 	bl	80017ec <_ZN12DotIndicatorC1Ev>
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <_ZN14SwipeContainerC1Ev+0x94>)
        nextDrawChainElement(0),
 80028bc:	f8c4 529c 	str.w	r5, [r4, #668]	@ 0x29c
 80028c0:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80028c4:	2302      	movs	r3, #2
        touchable(false),
 80028c6:	f8a4 72a4 	strh.w	r7, [r4, #676]	@ 0x2a4
 80028ca:	f884 32ac 	strb.w	r3, [r4, #684]	@ 0x2ac
 80028ce:	f8c4 52a8 	str.w	r5, [r4, #680]	@ 0x2a8
 80028d2:	f8a4 52ae 	strh.w	r5, [r4, #686]	@ 0x2ae
        this->width = width;
 80028d6:	e9c4 55a1 	strd	r5, r5, [r4, #644]	@ 0x284
        this->width = 0;
 80028da:	e9c4 55a3 	strd	r5, r5, [r4, #652]	@ 0x28c
        nextSibling(0),
 80028de:	e9c4 55a5 	strd	r5, r5, [r4, #660]	@ 0x294
 80028e2:	e9c4 55ac 	strd	r5, r5, [r4, #688]	@ 0x2b0
    touchgfx::Application::getInstance()->registerTimerWidget(this);
 80028e6:	f017 f965 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 80028ea:	4621      	mov	r1, r4
 80028ec:	f017 f968 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        touchable = touch;
 80028f0:	2301      	movs	r3, #1
    Container::add(screens);
 80028f2:	f504 7120 	add.w	r1, r4, #640	@ 0x280
 80028f6:	4620      	mov	r0, r4
 80028f8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80028fc:	f010 fa28 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(dotIndicator);
 8002900:	4620      	mov	r0, r4
 8002902:	4631      	mov	r1, r6
 8002904:	f010 fa24 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002908:	4620      	mov	r0, r4
 800290a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800290c:	08021978 	.word	0x08021978
 8002910:	08025220 	.word	0x08025220

08002914 <_ZN14SwipeContainer23setEndSwipeElasticWidthEt>:
    endElasticWidth = width;
 8002914:	8741      	strh	r1, [r0, #58]	@ 0x3a
}
 8002916:	4770      	bx	lr

08002918 <_ZN14SwipeContainer22setDotIndicatorBitmapsERKN8touchgfx6BitmapES3_>:
    dotIndicator.setBitmaps(normalDot, highlightedDot);
 8002918:	303c      	adds	r0, #60	@ 0x3c
 800291a:	f7ff b817 	b.w	800194c <_ZN12DotIndicator10setBitmapsERKN8touchgfx6BitmapES3_>

0800291e <_ZN14SwipeContainer30setDotIndicatorXYWithCenteredXEtt>:
{
 800291e:	b508      	push	{r3, lr}
    dotIndicator.setXY(x - dotIndicator.getWidth() / 2, y);
 8002920:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	@ 0x44
 8002924:	b212      	sxth	r2, r2
 8002926:	303c      	adds	r0, #60	@ 0x3c
 8002928:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800292c:	eba1 0163 	sub.w	r1, r1, r3, asr #1
 8002930:	b209      	sxth	r1, r1
 8002932:	f7fe fa55 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
}
 8002936:	bd08      	pop	{r3, pc}

08002938 <_ZN14SwipeContainer13adjustScreensEv>:

void SwipeContainer::adjustScreens()
{
    screens.moveTo(-(currentScreen * getWidth()) + dragX, 0);
 8002938:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800293c:	8e41      	ldrh	r1, [r0, #50]	@ 0x32
{
 800293e:	b508      	push	{r3, lr}
    screens.moveTo(-(currentScreen * getWidth()) + dragX, 0);
 8002940:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8002944:	f500 7020 	add.w	r0, r0, #640	@ 0x280
 8002948:	fb02 1113 	mls	r1, r2, r3, r1
 800294c:	2200      	movs	r2, #0
 800294e:	b209      	sxth	r1, r1
 8002950:	f7fe fa5c 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
}
 8002954:	bd08      	pop	{r3, pc}

08002956 <_ZN14SwipeContainer17setSelectedScreenEh>:
{
 8002956:	b510      	push	{r4, lr}
 8002958:	4604      	mov	r4, r0
    currentScreen = screenIndex;
 800295a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
    dotIndicator.setHighlightPosition(currentScreen);
 800295e:	303c      	adds	r0, #60	@ 0x3c
 8002960:	f7fe ffa4 	bl	80018ac <_ZN12DotIndicator20setHighlightPositionEh>
    adjustScreens();
 8002964:	4620      	mov	r0, r4
}
 8002966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    adjustScreens();
 800296a:	f7ff bfe5 	b.w	8002938 <_ZN14SwipeContainer13adjustScreensEv>

0800296e <_ZN14SwipeContainer15handleDragEventERKN8touchgfx9DragEventE>:
    if (currentState != NO_ANIMATION)
 800296e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8002972:	2b04      	cmp	r3, #4
 8002974:	d119      	bne.n	80029aa <_ZN14SwipeContainer15handleDragEventERKN8touchgfx9DragEventE+0x3c>
    dragX += evt.getDeltaX();
 8002976:	88ca      	ldrh	r2, [r1, #6]
 8002978:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	894a      	ldrh	r2, [r1, #10]
    if (currentScreen == 0 && dragX > endElasticWidth)
 800297e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
    dragX += evt.getDeltaX();
 8002982:	4413      	add	r3, r2
 8002984:	b21b      	sxth	r3, r3
 8002986:	8643      	strh	r3, [r0, #50]	@ 0x32
    if (currentScreen == 0 && dragX > endElasticWidth)
 8002988:	b921      	cbnz	r1, 8002994 <_ZN14SwipeContainer15handleDragEventERKN8touchgfx9DragEventE+0x26>
 800298a:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
 800298c:	4293      	cmp	r3, r2
 800298e:	dd01      	ble.n	8002994 <_ZN14SwipeContainer15handleDragEventERKN8touchgfx9DragEventE+0x26>
        dragX = -endElasticWidth;
 8002990:	8642      	strh	r2, [r0, #50]	@ 0x32
 8002992:	e008      	b.n	80029a6 <_ZN14SwipeContainer15handleDragEventERKN8touchgfx9DragEventE+0x38>
    else if (currentScreen == getNumberOfScreens() - 1 && dragX < -endElasticWidth)
 8002994:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 8002998:	3a01      	subs	r2, #1
 800299a:	4291      	cmp	r1, r2
 800299c:	d103      	bne.n	80029a6 <_ZN14SwipeContainer15handleDragEventERKN8touchgfx9DragEventE+0x38>
 800299e:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
 80029a0:	4252      	negs	r2, r2
 80029a2:	4293      	cmp	r3, r2
 80029a4:	dbf4      	blt.n	8002990 <_ZN14SwipeContainer15handleDragEventERKN8touchgfx9DragEventE+0x22>
    adjustScreens();
 80029a6:	f7ff bfc7 	b.w	8002938 <_ZN14SwipeContainer13adjustScreensEv>
}
 80029aa:	4770      	bx	lr

080029ac <_ZN14SwipeContainer25animateSwipeCancelledLeftEv>:

void SwipeContainer::animateSwipeCancelledLeft()
{
 80029ac:	b538      	push	{r3, r4, r5, lr}
    uint8_t duration = 14;

    if (animationCounter <= duration)
 80029ae:	f890 502e 	ldrb.w	r5, [r0, #46]	@ 0x2e
{
 80029b2:	4604      	mov	r4, r0
    if (animationCounter <= duration)
 80029b4:	2d0e      	cmp	r5, #14
 80029b6:	d813      	bhi.n	80029e0 <_ZN14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
    {
        int16_t delta = EasingEquations::backEaseOut(animationCounter, 0, -animateDistance, duration);
 80029b8:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 80029ba:	230e      	movs	r3, #14
 80029bc:	2100      	movs	r1, #0
 80029be:	4628      	mov	r0, r5
 80029c0:	4252      	negs	r2, r2
 80029c2:	b212      	sxth	r2, r2
 80029c4:	f018 f9d4 	bl	801ad70 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
        dragX = animateDistance + delta;
 80029c8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80029ca:	4418      	add	r0, r3
 80029cc:	8660      	strh	r0, [r4, #50]	@ 0x32

        adjustScreens();
 80029ce:	4620      	mov	r0, r4
    {
        // Final step: stop the animation
        currentState = NO_ANIMATION;
        animationCounter = 0;
        dragX = 0;
        adjustScreens();
 80029d0:	f7ff ffb2 	bl	8002938 <_ZN14SwipeContainer13adjustScreensEv>
    }
    animationCounter++;
 80029d4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80029d8:	3301      	adds	r3, #1
 80029da:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 80029de:	bd38      	pop	{r3, r4, r5, pc}
        currentState = NO_ANIMATION;
 80029e0:	2304      	movs	r3, #4
 80029e2:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
        animationCounter = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
        dragX = 0;
 80029ec:	8643      	strh	r3, [r0, #50]	@ 0x32
 80029ee:	e7ef      	b.n	80029d0 <_ZN14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

080029f0 <_ZN14SwipeContainer26animateSwipeCancelledRightEv>:

void SwipeContainer::animateSwipeCancelledRight()
{
 80029f0:	b538      	push	{r3, r4, r5, lr}
    uint8_t duration = 14;

    if (animationCounter <= duration)
 80029f2:	f890 502e 	ldrb.w	r5, [r0, #46]	@ 0x2e
{
 80029f6:	4604      	mov	r4, r0
    if (animationCounter <= duration)
 80029f8:	2d0e      	cmp	r5, #14
 80029fa:	d812      	bhi.n	8002a22 <_ZN14SwipeContainer26animateSwipeCancelledRightEv+0x32>
    {
        int16_t delta = EasingEquations::backEaseOut(animationCounter, 0, animateDistance, duration);
 80029fc:	230e      	movs	r3, #14
 80029fe:	f9b0 2034 	ldrsh.w	r2, [r0, #52]	@ 0x34
 8002a02:	2100      	movs	r1, #0
 8002a04:	4628      	mov	r0, r5
 8002a06:	f018 f9b3 	bl	801ad70 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
        dragX = animateDistance - delta;
 8002a0a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8002a0c:	1a1b      	subs	r3, r3, r0

        adjustScreens();
 8002a0e:	4620      	mov	r0, r4
        dragX = animateDistance - delta;
 8002a10:	8663      	strh	r3, [r4, #50]	@ 0x32
    {
        // Final step: stop the animation
        currentState = NO_ANIMATION;
        animationCounter = 0;
        dragX = 0;
        adjustScreens();
 8002a12:	f7ff ff91 	bl	8002938 <_ZN14SwipeContainer13adjustScreensEv>
    }
    animationCounter++;
 8002a16:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8002a20:	bd38      	pop	{r3, r4, r5, pc}
        currentState = NO_ANIMATION;
 8002a22:	2304      	movs	r3, #4
 8002a24:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
        animationCounter = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
        dragX = 0;
 8002a2e:	8643      	strh	r3, [r0, #50]	@ 0x32
 8002a30:	e7ef      	b.n	8002a12 <_ZN14SwipeContainer26animateSwipeCancelledRightEv+0x22>

08002a32 <_ZN14SwipeContainer11animateLeftEv>:

void SwipeContainer::animateLeft()
{
 8002a32:	b538      	push	{r3, r4, r5, lr}
    uint8_t duration = 10;

    if (animationCounter <= duration)
 8002a34:	f890 502e 	ldrb.w	r5, [r0, #46]	@ 0x2e
{
 8002a38:	4604      	mov	r4, r0
    if (animationCounter <= duration)
 8002a3a:	2d0a      	cmp	r5, #10
 8002a3c:	d814      	bhi.n	8002a68 <_ZN14SwipeContainer11animateLeftEv+0x36>
    {
        int16_t delta = EasingEquations::cubicEaseOut(animationCounter, 0, getWidth() + animateDistance, duration);
 8002a3e:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8002a40:	2100      	movs	r1, #0
 8002a42:	8902      	ldrh	r2, [r0, #8]
 8002a44:	4628      	mov	r0, r5
 8002a46:	441a      	add	r2, r3
 8002a48:	230a      	movs	r3, #10
 8002a4a:	b212      	sxth	r2, r2
 8002a4c:	f018 fba6 	bl	801b19c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        dragX = animateDistance - delta;
 8002a50:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8002a52:	1a1b      	subs	r3, r3, r0

        adjustScreens();
 8002a54:	4620      	mov	r0, r4
        dragX = animateDistance - delta;
 8002a56:	8663      	strh	r3, [r4, #50]	@ 0x32
        adjustScreens();
 8002a58:	f7ff ff6e 	bl	8002938 <_ZN14SwipeContainer13adjustScreensEv>
        if (menuChangeEndedAction && menuChangeEndedAction->isValid())
        {
            menuChangeEndedAction->execute(*this);
        }
    }
    animationCounter++;
 8002a5c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8002a60:	3301      	adds	r3, #1
 8002a62:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
        currentState = NO_ANIMATION;
 8002a68:	2304      	movs	r3, #4
        animationCounter = 0;
 8002a6a:	2200      	movs	r2, #0
        currentState = NO_ANIMATION;
 8002a6c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
        currentScreen++;
 8002a70:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
        animationCounter = 0;
 8002a74:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
        currentScreen++;
 8002a78:	3301      	adds	r3, #1
        dragX = 0;
 8002a7a:	8642      	strh	r2, [r0, #50]	@ 0x32
        currentScreen++;
 8002a7c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        adjustScreens();
 8002a80:	f7ff ff5a 	bl	8002938 <_ZN14SwipeContainer13adjustScreensEv>
        dotIndicator.goRight();
 8002a84:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8002a88:	f7fe ff7a 	bl	8001980 <_ZN12DotIndicator7goRightEv>
        if (menuChangeEndedAction && menuChangeEndedAction->isValid())
 8002a8c:	f8d4 02b4 	ldr.w	r0, [r4, #692]	@ 0x2b4
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d0e3      	beq.n	8002a5c <_ZN14SwipeContainer11animateLeftEv+0x2a>
 8002a94:	6803      	ldr	r3, [r0, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4798      	blx	r3
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d0de      	beq.n	8002a5c <_ZN14SwipeContainer11animateLeftEv+0x2a>
            menuChangeEndedAction->execute(*this);
 8002a9e:	f8d4 02b4 	ldr.w	r0, [r4, #692]	@ 0x2b4
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	6803      	ldr	r3, [r0, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4798      	blx	r3
 8002aaa:	e7d7      	b.n	8002a5c <_ZN14SwipeContainer11animateLeftEv+0x2a>

08002aac <_ZN14SwipeContainer12animateRightEv>:

void SwipeContainer::animateRight()
{
 8002aac:	b538      	push	{r3, r4, r5, lr}
    uint8_t duration = 10;

    if (animationCounter <= duration)
 8002aae:	f890 502e 	ldrb.w	r5, [r0, #46]	@ 0x2e
{
 8002ab2:	4604      	mov	r4, r0
    if (animationCounter <= duration)
 8002ab4:	2d0a      	cmp	r5, #10
 8002ab6:	d814      	bhi.n	8002ae2 <_ZN14SwipeContainer12animateRightEv+0x36>
    {
        int16_t delta = EasingEquations::cubicEaseOut(animationCounter, 0, getWidth() - animateDistance, duration);
 8002ab8:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8002aba:	2100      	movs	r1, #0
 8002abc:	8902      	ldrh	r2, [r0, #8]
 8002abe:	4628      	mov	r0, r5
 8002ac0:	1ad2      	subs	r2, r2, r3
 8002ac2:	230a      	movs	r3, #10
 8002ac4:	b212      	sxth	r2, r2
 8002ac6:	f018 fb69 	bl	801b19c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        dragX = animateDistance + delta;
 8002aca:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8002acc:	4418      	add	r0, r3
 8002ace:	8660      	strh	r0, [r4, #50]	@ 0x32

        adjustScreens();
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff ff31 	bl	8002938 <_ZN14SwipeContainer13adjustScreensEv>
        if (menuChangeEndedAction && menuChangeEndedAction->isValid())
        {
            menuChangeEndedAction->execute(*this);
        }
    }
    animationCounter++;
 8002ad6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8002ada:	3301      	adds	r3, #1
 8002adc:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8002ae0:	bd38      	pop	{r3, r4, r5, pc}
        currentState = NO_ANIMATION;
 8002ae2:	2304      	movs	r3, #4
        animationCounter = 0;
 8002ae4:	2200      	movs	r2, #0
        currentState = NO_ANIMATION;
 8002ae6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
        currentScreen--;
 8002aea:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
        animationCounter = 0;
 8002aee:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
        currentScreen--;
 8002af2:	3b01      	subs	r3, #1
        dragX = 0;
 8002af4:	8642      	strh	r2, [r0, #50]	@ 0x32
        currentScreen--;
 8002af6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        adjustScreens();
 8002afa:	f7ff ff1d 	bl	8002938 <_ZN14SwipeContainer13adjustScreensEv>
        dotIndicator.goLeft();
 8002afe:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8002b02:	f7fe ff4e 	bl	80019a2 <_ZN12DotIndicator6goLeftEv>
        if (menuChangeEndedAction && menuChangeEndedAction->isValid())
 8002b06:	f8d4 02b4 	ldr.w	r0, [r4, #692]	@ 0x2b4
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d0e3      	beq.n	8002ad6 <_ZN14SwipeContainer12animateRightEv+0x2a>
 8002b0e:	6803      	ldr	r3, [r0, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4798      	blx	r3
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d0de      	beq.n	8002ad6 <_ZN14SwipeContainer12animateRightEv+0x2a>
            menuChangeEndedAction->execute(*this);
 8002b18:	f8d4 02b4 	ldr.w	r0, [r4, #692]	@ 0x2b4
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	6803      	ldr	r3, [r0, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4798      	blx	r3
 8002b24:	e7d7      	b.n	8002ad6 <_ZN14SwipeContainer12animateRightEv+0x2a>

08002b26 <_ZN14SwipeContainer15handleTickEventEv>:
    if (currentState == ANIMATE_SWIPE_CANCELLED_LEFT)
 8002b26:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8002b2a:	b90b      	cbnz	r3, 8002b30 <_ZN14SwipeContainer15handleTickEventEv+0xa>
        animateSwipeCancelledLeft();
 8002b2c:	f7ff bf3e 	b.w	80029ac <_ZN14SwipeContainer25animateSwipeCancelledLeftEv>
    else if (currentState == ANIMATE_SWIPE_CANCELLED_RIGHT)
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <_ZN14SwipeContainer15handleTickEventEv+0x12>
        animateSwipeCancelledRight();
 8002b34:	f7ff bf5c 	b.w	80029f0 <_ZN14SwipeContainer26animateSwipeCancelledRightEv>
    else if (currentState == ANIMATE_LEFT)
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d101      	bne.n	8002b40 <_ZN14SwipeContainer15handleTickEventEv+0x1a>
        animateLeft();
 8002b3c:	f7ff bf79 	b.w	8002a32 <_ZN14SwipeContainer11animateLeftEv>
    else if (currentState == ANIMATE_RIGHT)
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d101      	bne.n	8002b48 <_ZN14SwipeContainer15handleTickEventEv+0x22>
        animateRight();
 8002b44:	f7ff bfb2 	b.w	8002aac <_ZN14SwipeContainer12animateRightEv>
}
 8002b48:	4770      	bx	lr
	...

08002b4c <_ZN14SwipeContainerD1Ev>:
SwipeContainer::~SwipeContainer()
 8002b4c:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <_ZN14SwipeContainerD1Ev+0x20>)
 8002b4e:	b510      	push	{r4, lr}
 8002b50:	4604      	mov	r4, r0
 8002b52:	6003      	str	r3, [r0, #0]
    touchgfx::Application::getInstance()->unregisterTimerWidget(this);
 8002b54:	f017 f82e 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8002b58:	4621      	mov	r1, r4
 8002b5a:	f017 f861 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
}
 8002b5e:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8002b62:	f7fe fe15 	bl	8001790 <_ZN12DotIndicatorD1Ev>
 8002b66:	4620      	mov	r0, r4
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08021978 	.word	0x08021978

08002b70 <_ZN14SwipeContainerD0Ev>:
SwipeContainer::~SwipeContainer()
 8002b70:	b510      	push	{r4, lr}
 8002b72:	4604      	mov	r4, r0
}
 8002b74:	f7ff ffea 	bl	8002b4c <_ZN14SwipeContainerD1Ev>
 8002b78:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f01b ffd2 	bl	801eb26 <_ZdlPvj>
 8002b82:	4620      	mov	r0, r4
 8002b84:	bd10      	pop	{r4, pc}

08002b86 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        this->x = x;
 8002b86:	2200      	movs	r2, #0
 8002b88:	8002      	strh	r2, [r0, #0]
        this->y = y;
 8002b8a:	8042      	strh	r2, [r0, #2]
        this->width = width;
 8002b8c:	8082      	strh	r2, [r0, #4]
        this->height = height;
 8002b8e:	80c2      	strh	r2, [r0, #6]
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
    {
        return Rect(0, 0, 0, 0);
    }
 8002b90:	4770      	bx	lr

08002b92 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8002b92:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	4604      	mov	r4, r0
        setX(x);
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002b9a:	4615      	mov	r5, r2
        setX(x);
 8002b9c:	4798      	blx	r3
        setBaselineY(baselineY);
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8002ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8002baa:	4718      	bx	r3

08002bac <_ZNK8touchgfx8TextArea7getTypeEv>:
     * @return TYPE_TEXTAREA.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_TEXTAREA;
    }
 8002bac:	200d      	movs	r0, #13
 8002bae:	4770      	bx	lr

08002bb0 <_ZNK8touchgfx23TextAreaWithOneWildcard7getTypeEv>:
     * @return TYPE_TEXTAREAWITHONEWILDCARD.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_TEXTAREAWITHONEWILDCARD;
    }
 8002bb0:	200e      	movs	r0, #14
 8002bb2:	4770      	bx	lr

08002bb4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8002bb4:	4770      	bx	lr

08002bb6 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8002bb6:	b510      	push	{r4, lr}
 8002bb8:	4604      	mov	r4, r0
 8002bba:	2138      	movs	r1, #56	@ 0x38
 8002bbc:	f01b ffb3 	bl	801eb26 <_ZdlPvj>
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	bd10      	pop	{r4, pc}

08002bc4 <_ZN16CircularProgressD1Ev>:

    setWidth(background.getWidth());
    setHeight(background.getHeight());
}

CircularProgress::~CircularProgress()
 8002bc4:	b538      	push	{r3, r4, r5, lr}
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <_ZN16CircularProgressD1Ev+0x2c>)
 8002bc8:	4604      	mov	r4, r0
    AbstractPainterRGB565()
    {
        assert(HAL::lcd().bitDepth() == 16 && "The chosen painter only works with 16bpp displays");
    }

    virtual ~AbstractPainterRGB565() {}
 8002bca:	4d0a      	ldr	r5, [pc, #40]	@ (8002bf4 <_ZN16CircularProgressD1Ev+0x30>)
 8002bcc:	6003      	str	r3, [r0, #0]
 8002bce:	f840 5ffc 	str.w	r5, [r0, #252]!
 8002bd2:	f013 fd57 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f840 5fd0 	str.w	r5, [r0, #208]!
 8002bdc:	f013 fd52 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
 *        several parameters of the circle can be changed. Center, radius, line width, line cap
 *        and partial circle arc. This opens for creation of fascinating graphics.
 *
 * @see CanvasWidget
 */
class Circle : public CanvasWidget
 8002be0:	4620      	mov	r0, r4
 8002be2:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <_ZN16CircularProgressD1Ev+0x34>)
 8002be4:	f840 3f84 	str.w	r3, [r0, #132]!
 8002be8:	f013 fe30 	bl	801684c <_ZN8touchgfx12CanvasWidgetD1Ev>
{

}
 8002bec:	4620      	mov	r0, r4
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
 8002bf0:	08021a0c 	.word	0x08021a0c
 8002bf4:	08025ad0 	.word	0x08025ad0
 8002bf8:	08025af0 	.word	0x08025af0

08002bfc <_ZN16CircularProgressD0Ev>:
CircularProgress::~CircularProgress()
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	4604      	mov	r4, r0
}
 8002c00:	f7ff ffe0 	bl	8002bc4 <_ZN16CircularProgressD1Ev>
 8002c04:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f01b ff8c 	bl	801eb26 <_ZdlPvj>
 8002c0e:	4620      	mov	r0, r4
 8002c10:	bd10      	pop	{r4, pc}
	...

08002c14 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 8002c14:	b508      	push	{r3, lr}
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <_ZNK8touchgfx9TypedText11assertValidEv+0x28>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	b92b      	cbnz	r3, 8002c28 <_ZNK8touchgfx9TypedText11assertValidEv+0x14>
 8002c1c:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <_ZNK8touchgfx9TypedText11assertValidEv+0x2c>)
 8002c1e:	21cf      	movs	r1, #207	@ 0xcf
 8002c20:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <_ZNK8touchgfx9TypedText11assertValidEv+0x30>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8002c22:	4809      	ldr	r0, [pc, #36]	@ (8002c48 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>)
 8002c24:	f01d f8a6 	bl	801fd74 <__assert_func>
 8002c28:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <_ZNK8touchgfx9TypedText11assertValidEv+0x38>)
 8002c2a:	8802      	ldrh	r2, [r0, #0]
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d303      	bcc.n	8002c3a <_ZNK8touchgfx9TypedText11assertValidEv+0x26>
 8002c32:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 8002c34:	21d0      	movs	r1, #208	@ 0xd0
 8002c36:	4a03      	ldr	r2, [pc, #12]	@ (8002c44 <_ZNK8touchgfx9TypedText11assertValidEv+0x30>)
 8002c38:	e7f3      	b.n	8002c22 <_ZNK8touchgfx9TypedText11assertValidEv+0xe>
    }
 8002c3a:	bd08      	pop	{r3, pc}
 8002c3c:	20024eb4 	.word	0x20024eb4
 8002c40:	080232b0 	.word	0x080232b0
 8002c44:	080232f2 	.word	0x080232f2
 8002c48:	08023320 	.word	0x08023320
 8002c4c:	20024eb8 	.word	0x20024eb8
 8002c50:	08023373 	.word	0x08023373

08002c54 <_ZNK8touchgfx9TypedText7getFontEv>:
    const Font* getFont() const
 8002c54:	b510      	push	{r4, lr}
 8002c56:	4604      	mov	r4, r0
        assertValid();
 8002c58:	f7ff ffdc 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 8002c5c:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <_ZNK8touchgfx9TypedText7getFontEv+0x1c>)
 8002c5e:	8822      	ldrh	r2, [r4, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002c66:	4b03      	ldr	r3, [pc, #12]	@ (8002c74 <_ZNK8touchgfx9TypedText7getFontEv+0x20>)
 8002c68:	681b      	ldr	r3, [r3, #0]
    }
 8002c6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002c6e:	bd10      	pop	{r4, pc}
 8002c70:	20024eb4 	.word	0x20024eb4
 8002c74:	20024ebc 	.word	0x20024ebc

08002c78 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8002c78:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8002c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8002c7c:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
    virtual void setBaselineY(int16_t baselineY)
 8002c7e:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8002c80:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8002c82:	a801      	add	r0, sp, #4
    virtual void setBaselineY(int16_t baselineY)
 8002c84:	460d      	mov	r5, r1
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8002c86:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002c8a:	f7ff ffe3 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	4798      	blx	r3
 8002c94:	1a29      	subs	r1, r5, r0
 8002c96:	4633      	mov	r3, r6
 8002c98:	4620      	mov	r0, r4
 8002c9a:	b209      	sxth	r1, r1
    }
 8002c9c:	b002      	add	sp, #8
 8002c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8002ca2:	4718      	bx	r3

08002ca4 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	4604      	mov	r4, r0
        assertValid();
 8002ca8:	f7ff ffb4 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText(TypedTextId id) const
    {
        return currentLanguagePtr[id];
 8002cac:	4b02      	ldr	r3, [pc, #8]	@ (8002cb8 <_ZNK8touchgfx9TypedText7getTextEv+0x14>)
 8002cae:	8822      	ldrh	r2, [r4, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
    }
 8002cb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002cb6:	bd10      	pop	{r4, pc}
 8002cb8:	20001864 	.word	0x20001864

08002cbc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
    virtual uint16_t getTextWidth() const
 8002cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 8002cc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
 8002cc4:	8cc7      	ldrh	r7, [r0, #38]	@ 0x26
    virtual uint16_t getTextWidth() const
 8002cc6:	4604      	mov	r4, r0
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 8002cc8:	429f      	cmp	r7, r3
 8002cca:	d01c      	beq.n	8002d06 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x4a>
 8002ccc:	f100 0626 	add.w	r6, r0, #38	@ 0x26
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f7ff ffbf 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8002cd6:	6803      	ldr	r3, [r0, #0]
 8002cd8:	4605      	mov	r5, r0
        assertValid();
 8002cda:	4630      	mov	r0, r6
 8002cdc:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8002ce0:	f7ff ff98 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	f7ff ffdd 	bl	8002ca4 <_ZNK8touchgfx9TypedText7getTextEv>
        return typedTexts[typedTextId].direction;
 8002cea:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x50>)
 8002cec:	4602      	mov	r2, r0
 8002cee:	46c4      	mov	ip, r8
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8002cf8:	7859      	ldrb	r1, [r3, #1]
 8002cfa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002cfc:	f3c1 0181 	ubfx	r1, r1, #2, #2
    }
 8002d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 8002d04:	4760      	bx	ip
    }
 8002d06:	2000      	movs	r0, #0
 8002d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d0c:	20024eb4 	.word	0x20024eb4

08002d10 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 8002d10:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 8002d12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d16:	429a      	cmp	r2, r3
    virtual int16_t getTextHeight()
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	4604      	mov	r4, r0
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 8002d1c:	d009      	beq.n	8002d32 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x22>
 8002d1e:	3026      	adds	r0, #38	@ 0x26
 8002d20:	f7ff ffc0 	bl	8002ca4 <_ZNK8touchgfx9TypedText7getTextEv>
 8002d24:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002d26:	4601      	mov	r1, r0
 8002d28:	4620      	mov	r0, r4
    }
 8002d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 8002d2e:	f014 bac9 	b.w	80172c4 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>
    }
 8002d32:	2000      	movs	r0, #0
 8002d34:	bd10      	pop	{r4, pc}
	...

08002d38 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
    virtual void draw(const Rect& area) const
 8002d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (typedText.hasValidId())
 8002d3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
 8002d40:	8cc6      	ldrh	r6, [r0, #38]	@ 0x26
    virtual void draw(const Rect& area) const
 8002d42:	b08c      	sub	sp, #48	@ 0x30
 8002d44:	4604      	mov	r4, r0
        if (typedText.hasValidId())
 8002d46:	429e      	cmp	r6, r3
    virtual void draw(const Rect& area) const
 8002d48:	4688      	mov	r8, r1
        if (typedText.hasValidId())
 8002d4a:	d03d      	beq.n	8002dc8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x90>
            const Font* fontToDraw = typedText.getFont();
 8002d4c:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8002d50:	4628      	mov	r0, r5
 8002d52:	f7ff ff7f 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
            if (fontToDraw != 0)
 8002d56:	4607      	mov	r7, r0
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d035      	beq.n	8002dc8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x90>
        assertValid();
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f7ff ff59 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].alignment;
 8002d62:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x98>)
        assertValid();
 8002d64:	4628      	mov	r0, r5
                LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 8002d66:	f894 9030 	ldrb.w	r9, [r4, #48]	@ 0x30
        return typedTexts[typedTextId].alignment;
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8002d70:	785e      	ldrb	r6, [r3, #1]
        assertValid();
 8002d72:	f7ff ff4f 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 8002d76:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
        return typedTexts[typedTextId].alignment;
 8002d7a:	f3c6 0a01 	ubfx	sl, r6, #0, #2
        return typedTexts[typedTextId].direction;
 8002d7e:	f3c6 0681 	ubfx	r6, r6, #2, #2
            this->alignment = alignment;
            this->textDirection = textDirection;
            this->rotation = rotation;
            this->linespace = linespace;
            this->indentation = indentation;
            this->wideTextAction = wideTextAction;
 8002d82:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
    {
        return instance->lcdRef;
 8002d86:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x9c>)
 8002d88:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002d8a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
            this->textDirection = textDirection;
 8002d8c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
                HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), wildcard);
 8002d90:	ae05      	add	r6, sp, #20
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4630      	mov	r0, r6
            this->font = font;
 8002d96:	9707      	str	r7, [sp, #28]
            this->alignment = alignment;
 8002d98:	f88d a020 	strb.w	sl, [sp, #32]
            this->rotation = rotation;
 8002d9c:	f88d 9022 	strb.w	r9, [sp, #34]	@ 0x22
            this->linespace = linespace;
 8002da0:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 8002da4:	4621      	mov	r1, r4
 8002da6:	689f      	ldr	r7, [r3, #8]
 8002da8:	f017 fb99 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8002dac:	4628      	mov	r0, r5
 8002dae:	f7ff ff79 	bl	8002ca4 <_ZNK8touchgfx9TypedText7getTextEv>
 8002db2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002db4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8002db8:	ab07      	add	r3, sp, #28
 8002dba:	4638      	mov	r0, r7
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4643      	mov	r3, r8
 8002dc0:	e896 0006 	ldmia.w	r6, {r1, r2}
 8002dc4:	f015 ff84 	bl	8018cd0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
    }
 8002dc8:	b00c      	add	sp, #48	@ 0x30
 8002dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dce:	bf00      	nop
 8002dd0:	20024eb4 	.word	0x20024eb4
 8002dd4:	20024e34 	.word	0x20024e34

08002dd8 <_ZN8touchgfx7CWRUtil5isqrtEm>:
    }

    static uint32_t isqrt(uint32_t n)
    {
        uint32_t root = 0, bit, trial;
        bit = (n >= 0x10000) ? 1 << 30 : 1 << 14;
 8002dd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    static uint32_t isqrt(uint32_t n)
 8002ddc:	4603      	mov	r3, r0
        bit = (n >= 0x10000) ? 1 << 30 : 1 << 14;
 8002dde:	f04f 0000 	mov.w	r0, #0
 8002de2:	bf2c      	ite	cs
 8002de4:	f04f 4280 	movcs.w	r2, #1073741824	@ 0x40000000
 8002de8:	f44f 4280 	movcc.w	r2, #16384	@ 0x4000
        do
        {
            trial = root + bit;
 8002dec:	1881      	adds	r1, r0, r2
            if (n >= trial)
 8002dee:	428b      	cmp	r3, r1
            {
                n -= trial;
                root = trial + bit;
 8002df0:	bf24      	itt	cs
 8002df2:	1850      	addcs	r0, r2, r1
                n -= trial;
 8002df4:	1a5b      	subcs	r3, r3, r1
            }
            root >>= 1;
            bit >>= 2;
        }
        while (bit);
 8002df6:	0892      	lsrs	r2, r2, #2
            root >>= 1;
 8002df8:	ea4f 0050 	mov.w	r0, r0, lsr #1
        while (bit);
 8002dfc:	d1f6      	bne.n	8002dec <_ZN8touchgfx7CWRUtil5isqrtEm+0x14>
        return root;
    }
 8002dfe:	4770      	bx	lr

08002e00 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
        if (q10 < 0)
 8002e00:	2800      	cmp	r0, #0
    static int8_t arcsine(Q10 q10)
 8002e02:	b508      	push	{r3, lr}
        if (q10 < 0)
 8002e04:	da05      	bge.n	8002e12 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
            return -arcsine(-q10);
 8002e06:	4240      	negs	r0, r0
 8002e08:	f7ff fffa 	bl	8002e00 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8002e0c:	4240      	negs	r0, r0
            return 90 - arcsine(Q10(isqrt((1 << (Rasterizer::POLY_BASE_SHIFT * 4)) - int(q10) * int(q10))));
 8002e0e:	b240      	sxtb	r0, r0
    }
 8002e10:	bd08      	pop	{r3, pc}
        if (q10 > toQ10<int>(1))
 8002e12:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8002e16:	dc11      	bgt.n	8002e3c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
        if (int(q10) > 724)
 8002e18:	f5b0 7f35 	cmp.w	r0, #724	@ 0x2d4
 8002e1c:	dd09      	ble.n	8002e32 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
            return 90 - arcsine(Q10(isqrt((1 << (Rasterizer::POLY_BASE_SHIFT * 4)) - int(q10) * int(q10))));
 8002e1e:	4340      	muls	r0, r0
 8002e20:	f5c0 1080 	rsb	r0, r0, #1048576	@ 0x100000
 8002e24:	f7ff ffd8 	bl	8002dd8 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8002e28:	f7ff ffea 	bl	8002e00 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8002e2c:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8002e30:	e7ed      	b.n	8002e0e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
        int q7 = (int(q10) + 3) >> 3; // Round Q10 to nearest Q7
 8002e32:	3003      	adds	r0, #3
        return arcsineTable[q7];
 8002e34:	4b02      	ldr	r3, [pc, #8]	@ (8002e40 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
        int q7 = (int(q10) + 3) >> 3; // Round Q10 to nearest Q7
 8002e36:	10c0      	asrs	r0, r0, #3
        return arcsineTable[q7];
 8002e38:	5618      	ldrsb	r0, [r3, r0]
 8002e3a:	e7e9      	b.n	8002e10 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
            return 0;    // error
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	e7e7      	b.n	8002e10 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8002e40:	080234e8 	.word	0x080234e8

08002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
        assert(x >= 0 && y >= 0);
 8002e44:	ea51 0300 	orrs.w	r3, r1, r0
    static int _angle(Q5 x, Q5 y, Q5& d)
 8002e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	4615      	mov	r5, r2
        assert(x >= 0 && y >= 0);
 8002e4e:	d506      	bpl.n	8002e5e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8002e50:	4b11      	ldr	r3, [pc, #68]	@ (8002e98 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8002e52:	f240 314d 	movw	r1, #845	@ 0x34d
 8002e56:	4a11      	ldr	r2, [pc, #68]	@ (8002e9c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8002e58:	4811      	ldr	r0, [pc, #68]	@ (8002ea0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8002e5a:	f01c ff8b 	bl	801fd74 <__assert_func>
        if (x < y)
 8002e5e:	4281      	cmp	r1, r0
 8002e60:	dd07      	ble.n	8002e72 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
            return 90 - _angle(y, x, d);
 8002e62:	4601      	mov	r1, r0
 8002e64:	4620      	mov	r0, r4
 8002e66:	f7ff ffed 	bl	8002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8002e6a:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
    }
 8002e6e:	b003      	add	sp, #12
 8002e70:	bd30      	pop	{r4, r5, pc}
            return Q10(v * q5.v);
 8002e72:	4340      	muls	r0, r0
        return Q5(isqrt(uint32_t(int(value))));
 8002e74:	fb01 0001 	mla	r0, r1, r1, r0
 8002e78:	f7ff ffae 	bl	8002dd8 <_ZN8touchgfx7CWRUtil5isqrtEm>
        d = sqrtQ10(x * x + y * y);
 8002e7c:	6028      	str	r0, [r5, #0]
        if (d == 0)
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d0f5      	beq.n	8002e6e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
        Q10 dy = Q10(muldiv(int(y), int(_1 * _1), int(d), remainder));
 8002e82:	4602      	mov	r2, r0
 8002e84:	ab01      	add	r3, sp, #4
 8002e86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f017 fb83 	bl	801a596 <_ZN8touchgfx6muldivElllRl>
        return arcsine(dy);
 8002e90:	f7ff ffb6 	bl	8002e00 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8002e94:	e7eb      	b.n	8002e6e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8002e96:	bf00      	nop
 8002e98:	080233c5 	.word	0x080233c5
 8002e9c:	080233d6 	.word	0x080233d6
 8002ea0:	08023408 	.word	0x08023408

08002ea4 <_ZN16CircularProgressC1Ev>:
CircularProgress::CircularProgress()
 8002ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	b087      	sub	sp, #28
 8002eac:	f7fe fc8e 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
 8002eb0:	2500      	movs	r5, #0
 8002eb2:	4627      	mov	r7, r4
 8002eb4:	4ba3      	ldr	r3, [pc, #652]	@ (8003144 <_ZN16CircularProgressC1Ev+0x2a0>)
 8002eb6:	f64f 76ff 	movw	r6, #65535	@ 0xffff
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8002eba:	f8df 829c 	ldr.w	r8, [pc, #668]	@ 8003158 <_ZN16CircularProgressC1Ev+0x2b4>
 8002ebe:	f104 0958 	add.w	r9, r4, #88	@ 0x58
 8002ec2:	62a5      	str	r5, [r4, #40]	@ 0x28
 8002ec4:	f847 3b2c 	str.w	r3, [r7], #44
 8002ec8:	4638      	mov	r0, r7
 8002eca:	f8ad 6014 	strh.w	r6, [sp, #20]
 8002ece:	f7fe fc7d 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
        setBitmap(bmp);
 8002ed2:	a905      	add	r1, sp, #20
 8002ed4:	4638      	mov	r0, r7
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8002ed6:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8002eda:	f504 7b8e 	add.w	fp, r4, #284	@ 0x11c
 8002ede:	f8a4 6052 	strh.w	r6, [r4, #82]	@ 0x52
 8002ee2:	f504 7ab0 	add.w	sl, r4, #352	@ 0x160
 8002ee6:	f884 6054 	strb.w	r6, [r4, #84]	@ 0x54
        setBitmap(bmp);
 8002eea:	f014 fa30 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002eee:	4648      	mov	r0, r9
 8002ef0:	f8ad 6014 	strh.w	r6, [sp, #20]
 8002ef4:	f7fe fc6a 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8002ef8:	f8c4 8058 	str.w	r8, [r4, #88]	@ 0x58
 8002efc:	f104 0884 	add.w	r8, r4, #132	@ 0x84
        setBitmap(bmp);
 8002f00:	a905      	add	r1, sp, #20
 8002f02:	4648      	mov	r0, r9
 8002f04:	f8a4 607e 	strh.w	r6, [r4, #126]	@ 0x7e
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8002f08:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
        setBitmap(bmp);
 8002f0c:	f014 fa1f 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002f10:	4640      	mov	r0, r8
 8002f12:	f012 ff4d 	bl	8015db0 <_ZN8touchgfx6CircleC1Ev>
 8002f16:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8002f1a:	a905      	add	r1, sp, #20
 8002f1c:	22ff      	movs	r2, #255	@ 0xff
 8002f1e:	4618      	mov	r0, r3
 8002f20:	9302      	str	r3, [sp, #8]
 8002f22:	f8ad 6014 	strh.w	r6, [sp, #20]
 8002f26:	f012 f8d1 	bl	80150cc <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh>
 8002f2a:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
 8002f2e:	4629      	mov	r1, r5
 8002f30:	22ff      	movs	r2, #255	@ 0xff
 8002f32:	4618      	mov	r0, r3
 8002f34:	9303      	str	r3, [sp, #12]
 8002f36:	f012 f9b1 	bl	801529c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 8002f3a:	4658      	mov	r0, fp
 8002f3c:	f7fe fc46 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8002f40:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 8002f44:	4980      	ldr	r1, [pc, #512]	@ (8003148 <_ZN16CircularProgressC1Ev+0x2a4>)
 8002f46:	4650      	mov	r0, sl
        color = col;
 8002f48:	f8c4 5144 	str.w	r5, [r4, #324]	@ 0x144
 8002f4c:	f8c4 2148 	str.w	r2, [r4, #328]	@ 0x148
 8002f50:	f8a4 514c 	strh.w	r5, [r4, #332]	@ 0x14c
 8002f54:	f8c4 111c 	str.w	r1, [r4, #284]	@ 0x11c
 8002f58:	f8c4 5150 	str.w	r5, [r4, #336]	@ 0x150
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8002f5c:	f8a4 6142 	strh.w	r6, [r4, #322]	@ 0x142
 8002f60:	f7fe fc34 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
 8002f64:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8002f68:	4978      	ldr	r1, [pc, #480]	@ (800314c <_ZN16CircularProgressC1Ev+0x2a8>)
    background.setBitmap(Bitmap(BITMAP_CONTROLS_WHEEL_BACKGROUND_ID));
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
 8002f70:	2201      	movs	r2, #1
 8002f72:	f8c4 1160 	str.w	r1, [r4, #352]	@ 0x160
 8002f76:	a905      	add	r1, sp, #20
 8002f78:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
 8002f7c:	221e      	movs	r2, #30
 8002f7e:	f8c4 5188 	str.w	r5, [r4, #392]	@ 0x188
 8002f82:	f8a4 5190 	strh.w	r5, [r4, #400]	@ 0x190
 8002f86:	f8a4 6186 	strh.w	r6, [r4, #390]	@ 0x186
 8002f8a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002f8e:	f014 f9de 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setXY(0, 0);
 8002f92:	462a      	mov	r2, r5
 8002f94:	4629      	mov	r1, r5
 8002f96:	4638      	mov	r0, r7
 8002f98:	f7fd ff22 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(background);
 8002f9c:	4639      	mov	r1, r7
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f00f fed6 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002fa4:	2206      	movs	r2, #6
    centerImage.setBitmap(Bitmap(BITMAP_CONTROL_CENTER_BUTTON_ID));
 8002fa6:	a905      	add	r1, sp, #20
 8002fa8:	4648      	mov	r0, r9
 8002faa:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002fae:	f014 f9ce 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    centerImage.setXY(background.getX() + (background.getWidth() - centerImage.getWidth()) / 2, background.getY() + (background.getHeight() - centerImage.getHeight()) / 2);
 8002fb2:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	@ 0x62
 8002fb6:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8002fba:	f9b4 0060 	ldrsh.w	r0, [r4, #96]	@ 0x60
 8002fbe:	1a52      	subs	r2, r2, r1
 8002fc0:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8002fc2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8002fc6:	eb01 0262 	add.w	r2, r1, r2, asr #1
 8002fca:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8002fce:	1a09      	subs	r1, r1, r0
 8002fd0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8002fd2:	b212      	sxth	r2, r2
 8002fd4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002fd8:	eb00 0161 	add.w	r1, r0, r1, asr #1
 8002fdc:	4648      	mov	r0, r9
 8002fde:	b209      	sxth	r1, r1
 8002fe0:	f7fd fefe 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(centerImage);
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f00f feb2 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002fec:	2208      	movs	r2, #8
    bitmapPainter.setBitmap(Bitmap(BITMAP_CONTROL_COLOR_WHEEL_ID));
 8002fee:	a905      	add	r1, sp, #20
 8002ff0:	9802      	ldr	r0, [sp, #8]
 8002ff2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002ff6:	f012 f851 	bl	801509c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    colorPainter.setColor(Color::getColorFrom24BitRGB(0x11, 0x2C, 0x3C), 70);
 8002ffa:	223c      	movs	r2, #60	@ 0x3c
 8002ffc:	212c      	movs	r1, #44	@ 0x2c
 8002ffe:	2011      	movs	r0, #17
 8003000:	f019 fb62 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8003004:	9b03      	ldr	r3, [sp, #12]
 8003006:	4601      	mov	r1, r0
 8003008:	2246      	movs	r2, #70	@ 0x46
 800300a:	4618      	mov	r0, r3
 800300c:	f012 f938 	bl	8015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
    bar.setPosition(background.getX(), background.getY(), background.getWidth(), background.getHeight());
 8003010:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	@ 0x36
 8003014:	4640      	mov	r0, r8
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	@ 0x32
 800301c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 8003020:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	@ 0x30
 8003024:	f7fd fec4 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    bar.setCenter(bar.getWidth() / 2.0f, bar.getHeight() / 2.0f);
 8003028:	f9b4 308e 	ldrsh.w	r3, [r4, #142]	@ 0x8e
 800302c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
    bar.setPainter(bitmapPainter);
 8003030:	9902      	ldr	r1, [sp, #8]
    bar.setCenter(bar.getWidth() / 2.0f, bar.getHeight() / 2.0f);
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	f9b4 308c 	ldrsh.w	r3, [r4, #140]	@ 0x8c
    bar.setPainter(bitmapPainter);
 800303a:	4640      	mov	r0, r8
    bar.setCenter(bar.getWidth() / 2.0f, bar.getHeight() / 2.0f);
 800303c:	ee07 3a10 	vmov	s14, r3
 8003040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setRadius(const T r)
    {
        this->circleRadius = CWRUtil::toQ5<T>(r);
 8003044:	f44f 634e 	mov.w	r3, #3296	@ 0xce0
 8003048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800304c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003050:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 8003054:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003058:	ee27 7a26 	vmul.f32	s14, s14, s13
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800305c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8003060:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8003064:	eebe 7aed 	vcvt.s32.f32	s14, s14, #5
 8003068:	edc4 7a2e 	vstr	s15, [r4, #184]	@ 0xb8
 800306c:	ed84 7a2d 	vstr	s14, [r4, #180]	@ 0xb4
    bar.setPainter(bitmapPainter);
 8003070:	f013 fb0e 	bl	8016690 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    bar.setCapPrecision(15);
 8003074:	4640      	mov	r0, r8
 8003076:	210f      	movs	r1, #15
 8003078:	f012 feb6 	bl	8015de8 <_ZN8touchgfx6Circle15setCapPrecisionEi>
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 800307c:	4b34      	ldr	r3, [pc, #208]	@ (8003150 <_ZN16CircularProgressC1Ev+0x2ac>)
    add(bar);
 800307e:	4641      	mov	r1, r8
 8003080:	4620      	mov	r0, r4
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 8003082:	e9c4 3530 	strd	r3, r5, [r4, #192]	@ 0xc0
    Unicode::snprintf(percentageTextBuffer, 5, "%d", 100);
 8003086:	f504 75aa 	add.w	r5, r4, #340	@ 0x154
    add(bar);
 800308a:	f00f fe61 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Unicode::snprintf(percentageTextBuffer, 5, "%d", 100);
 800308e:	2364      	movs	r3, #100	@ 0x64
 8003090:	4a30      	ldr	r2, [pc, #192]	@ (8003154 <_ZN16CircularProgressC1Ev+0x2b0>)
 8003092:	2105      	movs	r1, #5
 8003094:	4628      	mov	r0, r5
 8003096:	f019 fb09 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    percentageText.setTypedText(TypedText(T_PERCENTAGE_BAR_READOUT));
 800309a:	4658      	mov	r0, fp
 800309c:	f04f 010e 	mov.w	r1, #14
        wildcard = value;
 80030a0:	f8c4 5150 	str.w	r5, [r4, #336]	@ 0x150
 80030a4:	f013 ffc4 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    percentageText.setXY(background.getX() + (background.getWidth() - percentageText.getWidth()) / 2, background.getY() + (background.getHeight() - percentageText.getHeight()) / 2 - 20);
 80030a8:	f9b4 2126 	ldrsh.w	r2, [r4, #294]	@ 0x126
 80030ac:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	@ 0x36
 80030b0:	4658      	mov	r0, fp
 80030b2:	f9b4 1124 	ldrsh.w	r1, [r4, #292]	@ 0x124
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 80030ba:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80030be:	3a14      	subs	r2, #20
 80030c0:	eb02 0263 	add.w	r2, r2, r3, asr #1
 80030c4:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 80030c8:	1a5b      	subs	r3, r3, r1
 80030ca:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 80030cc:	b212      	sxth	r2, r2
 80030ce:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80030d2:	eb01 0163 	add.w	r1, r1, r3, asr #1
 80030d6:	b209      	sxth	r1, r1
 80030d8:	f7fd fe82 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    percentageText.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 80030dc:	22ff      	movs	r2, #255	@ 0xff
 80030de:	4611      	mov	r1, r2
 80030e0:	4610      	mov	r0, r2
 80030e2:	f019 faf1 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    add(percentageText);
 80030e6:	4659      	mov	r1, fp
        this->color = color;
 80030e8:	f8c4 0144 	str.w	r0, [r4, #324]	@ 0x144
 80030ec:	4620      	mov	r0, r4
 80030ee:	f00f fe2f 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    headlineText.setTypedText(TypedText(T_PERCENTAGE_BAR_HEADLINE));
 80030f2:	4650      	mov	r0, sl
 80030f4:	f04f 010f 	mov.w	r1, #15
 80030f8:	f013 ff9a 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    headlineText.setXY(background.getX() + (background.getWidth() - headlineText.getWidth()) / 2, percentageText.getY() + 60);
 80030fc:	f9b4 1168 	ldrsh.w	r1, [r4, #360]	@ 0x168
 8003100:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 8003104:	4650      	mov	r0, sl
 8003106:	f8b4 2122 	ldrh.w	r2, [r4, #290]	@ 0x122
 800310a:	1a5b      	subs	r3, r3, r1
 800310c:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 800310e:	323c      	adds	r2, #60	@ 0x3c
 8003110:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003114:	b212      	sxth	r2, r2
 8003116:	eb01 0163 	add.w	r1, r1, r3, asr #1
 800311a:	b209      	sxth	r1, r1
 800311c:	f7fd fe60 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    headlineText.setColor(Color::getColorFrom24BitRGB(0x17, 0x3C, 0x51));
 8003120:	2251      	movs	r2, #81	@ 0x51
 8003122:	213c      	movs	r1, #60	@ 0x3c
 8003124:	2017      	movs	r0, #23
 8003126:	f019 facf 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    add(headlineText);
 800312a:	4651      	mov	r1, sl
 800312c:	f8c4 0188 	str.w	r0, [r4, #392]	@ 0x188
 8003130:	4620      	mov	r0, r4
 8003132:	f00f fe0d 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.width = width;
 8003136:	6b63      	ldr	r3, [r4, #52]	@ 0x34
}
 8003138:	4620      	mov	r0, r4
 800313a:	60a3      	str	r3, [r4, #8]
 800313c:	b007      	add	sp, #28
 800313e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003142:	bf00      	nop
 8003144:	08021a0c 	.word	0x08021a0c
 8003148:	08023474 	.word	0x08023474
 800314c:	08025e28 	.word	0x08025e28
 8003150:	fffff180 	.word	0xfffff180
 8003154:	08023468 	.word	0x08023468
 8003158:	08025fb8 	.word	0x08025fb8

0800315c <_ZN16CircularProgress11setBarAngleEi>:

    setBarAngle((int)angleInDegrees);
}

void CircularProgress::setBarAngle(int angleInDegrees)
{
 800315c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800315e:	014b      	lsls	r3, r1, #5
        if (circleArcAngleEnd == endAngleQ5)
 8003160:	f8d0 20c4 	ldr.w	r2, [r0, #196]	@ 0xc4
 8003164:	4605      	mov	r5, r0
 8003166:	460c      	mov	r4, r1
 8003168:	4293      	cmp	r3, r2
        CWRUtil::Q5 endAngleQ5 = CWRUtil::toQ5<T>(endAngle);
 800316a:	9301      	str	r3, [sp, #4]
        if (circleArcAngleEnd == endAngleQ5)
 800316c:	d00d      	beq.n	800318a <_ZN16CircularProgress11setBarAngleEi+0x2e>
    bar.updateArcEnd((int)angleInDegrees);
 800316e:	f100 0684 	add.w	r6, r0, #132	@ 0x84
        Rect minimalRect = getMinimalRectForUpdatedEndAngle(endAngleQ5);
 8003172:	aa01      	add	r2, sp, #4
 8003174:	a802      	add	r0, sp, #8
 8003176:	4631      	mov	r1, r6
 8003178:	f013 f8a2 	bl	80162c0 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>
        circleArcAngleEnd = endAngleQ5;
 800317c:	9b01      	ldr	r3, [sp, #4]
        invalidateRect(minimalRect);
 800317e:	a902      	add	r1, sp, #8
 8003180:	4630      	mov	r0, r6
        circleArcAngleEnd = endAngleQ5;
 8003182:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
        invalidateRect(minimalRect);
 8003186:	f017 f964 	bl	801a452 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>

    currentPercentage = (int)(100.0f * (angleInDegrees + END_DEGREE) / (END_DEGREE - START_DEGREE));
 800318a:	f104 0374 	add.w	r3, r4, #116	@ 0x74
 800318e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80031cc <_ZN16CircularProgress11setBarAngleEi+0x70>
 8003192:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80031d0 <_ZN16CircularProgress11setBarAngleEi+0x74>
    Unicode::snprintf(percentageTextBuffer, 5, "%d", currentPercentage);
 8003196:	2105      	movs	r1, #5
    currentPercentage = (int)(100.0f * (angleInDegrees + END_DEGREE) / (END_DEGREE - START_DEGREE));
 8003198:	ee07 3a90 	vmov	s15, r3
    Unicode::snprintf(percentageTextBuffer, 5, "%d", currentPercentage);
 800319c:	4a0d      	ldr	r2, [pc, #52]	@ (80031d4 <_ZN16CircularProgress11setBarAngleEi+0x78>)
 800319e:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
    currentPercentage = (int)(100.0f * (angleInDegrees + END_DEGREE) / (END_DEGREE - START_DEGREE));
 80031a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031ae:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80031b2:	ee17 3a90 	vmov	r3, s15
 80031b6:	edc5 7a65 	vstr	s15, [r5, #404]	@ 0x194
    Unicode::snprintf(percentageTextBuffer, 5, "%d", currentPercentage);
 80031ba:	f019 fa77 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    percentageText.invalidate();
 80031be:	f505 708e 	add.w	r0, r5, #284	@ 0x11c
}
 80031c2:	b004      	add	sp, #16
 80031c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    percentageText.invalidate();
 80031c8:	f017 b8df 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 80031cc:	42c80000 	.word	0x42c80000
 80031d0:	43680000 	.word	0x43680000
 80031d4:	08023468 	.word	0x08023468

080031d8 <_ZN16CircularProgress9updateBarEii>:
{
 80031d8:	b513      	push	{r0, r1, r4, lr}
 80031da:	4604      	mov	r4, r0
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80031dc:	f8d0 00b4 	ldr.w	r0, [r0, #180]	@ 0xb4
        Q5() : v(0) { }
 80031e0:	2300      	movs	r3, #0
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80031e2:	2800      	cmp	r0, #0
        Q5() : v(0) { }
 80031e4:	9301      	str	r3, [sp, #4]
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80031e6:	bfb8      	it	lt
 80031e8:	301f      	addlt	r0, #31
    int16_t vx = newX - centerX;
 80031ea:	eba1 1060 	sub.w	r0, r1, r0, asr #5
 80031ee:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 80031f2:	2900      	cmp	r1, #0
 80031f4:	b200      	sxth	r0, r0
 80031f6:	bfb8      	it	lt
 80031f8:	311f      	addlt	r1, #31
        if (x >= 0)
 80031fa:	0140      	lsls	r0, r0, #5
    int16_t vy = newY - centerY;
 80031fc:	eba2 1161 	sub.w	r1, r2, r1, asr #5
 8003200:	b209      	sxth	r1, r1
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8003202:	ea4f 1141 	mov.w	r1, r1, lsl #5
        if (x >= 0)
 8003206:	d427      	bmi.n	8003258 <_ZN16CircularProgress9updateBarEii+0x80>
            if (y >= 0)
 8003208:	4299      	cmp	r1, r3
                return 90 + _angle(x, y, d);
 800320a:	aa01      	add	r2, sp, #4
            if (y >= 0)
 800320c:	db1e      	blt.n	800324c <_ZN16CircularProgress9updateBarEii+0x74>
                return 90 + _angle(x, y, d);
 800320e:	f7ff fe19 	bl	8002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8003212:	f100 015a 	add.w	r1, r0, #90	@ 0x5a
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8003216:	9b01      	ldr	r3, [sp, #4]
    if (length < 50)
 8003218:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800321c:	db2c      	blt.n	8003278 <_ZN16CircularProgress9updateBarEii+0xa0>
    if (angleInDegrees > 180)
 800321e:	29b4      	cmp	r1, #180	@ 0xb4
        angleInDegrees -= 360;
 8003220:	bfc8      	it	gt
 8003222:	f5a1 71b4 	subgt.w	r1, r1, #360	@ 0x168
    if (angleInDegrees < START_DEGREE - 30)
 8003226:	f101 0392 	add.w	r3, r1, #146	@ 0x92
 800322a:	f5b3 7f92 	cmp.w	r3, #292	@ 0x124
 800322e:	d823      	bhi.n	8003278 <_ZN16CircularProgress9updateBarEii+0xa0>
    if (angleInDegrees > END_DEGREE)
 8003230:	2974      	cmp	r1, #116	@ 0x74
    setBarAngle((int)angleInDegrees);
 8003232:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 8003236:	4620      	mov	r0, r4
    if (angleInDegrees > END_DEGREE)
 8003238:	bfa8      	it	ge
 800323a:	2174      	movge	r1, #116	@ 0x74
    setBarAngle((int)angleInDegrees);
 800323c:	4299      	cmp	r1, r3
 800323e:	bfb8      	it	lt
 8003240:	4619      	movlt	r1, r3
}
 8003242:	b002      	add	sp, #8
 8003244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setBarAngle((int)angleInDegrees);
 8003248:	f7ff bf88 	b.w	800315c <_ZN16CircularProgress11setBarAngleEi>
                return 90 - _angle(x, -y, d);
 800324c:	4249      	negs	r1, r1
 800324e:	f7ff fdf9 	bl	8002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8003252:	f1c0 015a 	rsb	r1, r0, #90	@ 0x5a
 8003256:	e7de      	b.n	8003216 <_ZN16CircularProgress9updateBarEii+0x3e>
        if (y >= 0)
 8003258:	2900      	cmp	r1, #0
            return Q5(-v);
 800325a:	f1c0 0000 	rsb	r0, r0, #0
            return 270 - _angle(-x, y, d);
 800325e:	aa01      	add	r2, sp, #4
        if (y >= 0)
 8003260:	db04      	blt.n	800326c <_ZN16CircularProgress9updateBarEii+0x94>
            return 270 - _angle(-x, y, d);
 8003262:	f7ff fdef 	bl	8002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8003266:	f5c0 7187 	rsb	r1, r0, #270	@ 0x10e
 800326a:	e7d4      	b.n	8003216 <_ZN16CircularProgress9updateBarEii+0x3e>
        return 270 + _angle(-x, -y, d);
 800326c:	4249      	negs	r1, r1
 800326e:	f7ff fde9 	bl	8002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8003272:	f500 7187 	add.w	r1, r0, #270	@ 0x10e
 8003276:	e7ce      	b.n	8003216 <_ZN16CircularProgress9updateBarEii+0x3e>
}
 8003278:	b002      	add	sp, #8
 800327a:	bd10      	pop	{r4, pc}

0800327c <_ZN16CircularProgress15handleDragEventERKN8touchgfx9DragEventE>:
    updateBar(evt.getNewX(), evt.getNewY());
 800327c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003280:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003284:	f7ff bfa8 	b.w	80031d8 <_ZN16CircularProgress9updateBarEii>

08003288 <_ZN16CircularProgress16handleClickEventERKN8touchgfx10ClickEventE>:
    if (evt.getType() == ClickEvent::PRESSED)
 8003288:	790b      	ldrb	r3, [r1, #4]
 800328a:	b92b      	cbnz	r3, 8003298 <_ZN16CircularProgress16handleClickEventERKN8touchgfx10ClickEventE+0x10>
        updateBar(evt.getX(), evt.getY());
 800328c:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 8003290:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8003294:	f7ff bfa0 	b.w	80031d8 <_ZN16CircularProgress9updateBarEii>
}
 8003298:	4770      	bx	lr

0800329a <_ZN23CustomControlsPresenterD1Ev>:
{
}

CustomControlsPresenter::~CustomControlsPresenter()
{
}
 800329a:	4770      	bx	lr

0800329c <_ZN23CustomControlsPresenter10deactivateEv>:

void CustomControlsPresenter::activate()
{
}
 800329c:	4770      	bx	lr

0800329e <_ZN23CustomControlsPresenter20screenSaverMinorTickEv>:

}

void CustomControlsPresenter::screenSaverMinorTick()
{
    view.screenSaverMinorTick();
 800329e:	6900      	ldr	r0, [r0, #16]
 80032a0:	6803      	ldr	r3, [r0, #0]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	4718      	bx	r3

080032a6 <_ZThn4_N23CustomControlsPresenter20screenSaverMinorTickEv>:
    virtual ~CustomControlsPresenter();

    virtual void activate();
    virtual void deactivate();

    virtual void screenSaverMinorTick();
 80032a6:	f1a0 0004 	sub.w	r0, r0, #4
 80032aa:	f7ff bff8 	b.w	800329e <_ZN23CustomControlsPresenter20screenSaverMinorTickEv>

080032ae <_ZN23CustomControlsPresenterD0Ev>:
CustomControlsPresenter::~CustomControlsPresenter()
 80032ae:	b510      	push	{r4, lr}
 80032b0:	4604      	mov	r4, r0
}
 80032b2:	2114      	movs	r1, #20
 80032b4:	f01b fc37 	bl	801eb26 <_ZdlPvj>
 80032b8:	4620      	mov	r0, r4
 80032ba:	bd10      	pop	{r4, pc}

080032bc <_ZThn4_N23CustomControlsPresenterD0Ev>:
    virtual ~CustomControlsPresenter();
 80032bc:	f1a0 0004 	sub.w	r0, r0, #4
 80032c0:	f7ff bff5 	b.w	80032ae <_ZN23CustomControlsPresenterD0Ev>

080032c4 <_ZThn4_N23CustomControlsPresenterD1Ev>:
 80032c4:	3804      	subs	r0, #4
 80032c6:	4770      	bx	lr

080032c8 <_ZN23CustomControlsPresenterC1ER18CustomControlsView>:
CustomControlsPresenter::CustomControlsPresenter(CustomControlsView& v) :
 80032c8:	b538      	push	{r3, r4, r5, lr}
 80032ca:	460d      	mov	r5, r1
    view(v)
 80032cc:	3140      	adds	r1, #64	@ 0x40
CustomControlsPresenter::CustomControlsPresenter(CustomControlsView& v) :
 80032ce:	4604      	mov	r4, r0
    view(v)
 80032d0:	f7fe fa48 	bl	8001764 <_ZN13DemoPresenterC1ER17DemoViewInterface>
 80032d4:	4b04      	ldr	r3, [pc, #16]	@ (80032e8 <_ZN23CustomControlsPresenterC1ER18CustomControlsView+0x20>)
}
 80032d6:	4620      	mov	r0, r4
    view(v)
 80032d8:	6125      	str	r5, [r4, #16]
 80032da:	f103 0208 	add.w	r2, r3, #8
 80032de:	3328      	adds	r3, #40	@ 0x28
 80032e0:	6022      	str	r2, [r4, #0]
 80032e2:	6063      	str	r3, [r4, #4]
}
 80032e4:	bd38      	pop	{r3, r4, r5, pc}
 80032e6:	bf00      	nop
 80032e8:	08021a94 	.word	0x08021a94

080032ec <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80032ec:	4770      	bx	lr

080032ee <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80032ee:	4770      	bx	lr

080032f0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 80032f0:	4770      	bx	lr

080032f2 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80032f2:	4770      	bx	lr

080032f4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 80032f4:	4770      	bx	lr

080032f6 <_ZN8DemoViewI23CustomControlsPresenterED1Ev>:
#include <touchgfx/Color.hpp>

using namespace touchgfx;

template <class T>
class DemoView : public View<T>, public DemoViewInterface
 80032f6:	4770      	bx	lr

080032f8 <_ZThn64_N8DemoViewI23CustomControlsPresenterED1Ev>:
 80032f8:	3840      	subs	r0, #64	@ 0x40
 80032fa:	4770      	bx	lr

080032fc <_ZN18CustomControlsView11setupScreenEv>:
{
}

void CustomControlsView::setupScreen()
{
}
 80032fc:	4770      	bx	lr

080032fe <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEED1Ev>:
    }
 80032fe:	4770      	bx	lr

08003300 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 8003300:	86c1      	strh	r1, [r0, #54]	@ 0x36
    }
 8003302:	4770      	bx	lr

08003304 <_ZN8touchgfx8CallbackI18CustomControlsViewRK19ThreeWayProgressBarvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003304:	4770      	bx	lr

08003306 <_ZN8touchgfx8CallbackI18CustomControlsViewRK17VerticalSlideMenuvvED1Ev>:
 8003306:	4770      	bx	lr

08003308 <_ZN8touchgfx8CallbackI18CustomControlsViewRKNS_14AbstractButtonEvvED1Ev>:
 8003308:	4770      	bx	lr

0800330a <_ZN8touchgfx8CallbackI8DemoViewI23CustomControlsPresenterERKNS_14AbstractButtonEvvED1Ev>:
 800330a:	4770      	bx	lr

0800330c <_ZN8touchgfx8CallbackI18CustomControlsViewRK19ThreeWayProgressBarvvE7executeES4_>:
    virtual void execute(T1 t1)
 800330c:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800330e:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003310:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003312:	68c2      	ldr	r2, [r0, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	1055      	asrs	r5, r2, #1
 8003318:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800331c:	07d2      	lsls	r2, r2, #31
 800331e:	bf48      	it	mi
 8003320:	5962      	ldrmi	r2, [r4, r5]
    }
 8003322:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003324:	bf48      	it	mi
 8003326:	58d3      	ldrmi	r3, [r2, r3]
 8003328:	4718      	bx	r3

0800332a <_ZNK8touchgfx8CallbackI18CustomControlsViewRK19ThreeWayProgressBarvvE7isValidEv>:
    virtual bool isValid() const
 800332a:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 800332c:	6840      	ldr	r0, [r0, #4]
 800332e:	b130      	cbz	r0, 800333e <_ZNK8touchgfx8CallbackI18CustomControlsViewRK19ThreeWayProgressBarvvE7isValidEv+0x14>
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	b91a      	cbnz	r2, 800333c <_ZNK8touchgfx8CallbackI18CustomControlsViewRK19ThreeWayProgressBarvvE7isValidEv+0x12>
 8003334:	68d8      	ldr	r0, [r3, #12]
 8003336:	f000 0001 	and.w	r0, r0, #1
 800333a:	4770      	bx	lr
 800333c:	2001      	movs	r0, #1
    }
 800333e:	4770      	bx	lr

08003340 <_ZNK8touchgfx12FadeAnimatorINS_8TextAreaEE21getFadeAnimationDelayEv>:
    }
 8003340:	8ec0      	ldrh	r0, [r0, #54]	@ 0x36
 8003342:	4770      	bx	lr

08003344 <_ZNK8touchgfx12FadeAnimatorINS_8TextAreaEE9isRunningEv>:
        return isFadeAnimationRunning();
 8003344:	6803      	ldr	r3, [r0, #0]
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800334a:	4718      	bx	r3

0800334c <_ZNK8touchgfx12FadeAnimatorINS_8TextAreaEE22isFadeAnimationRunningEv>:
    }
 800334c:	f890 0032 	ldrb.w	r0, [r0, #50]	@ 0x32
 8003350:	4770      	bx	lr

08003352 <_ZN8touchgfx8CallbackI18CustomControlsViewRK17VerticalSlideMenuvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003352:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003354:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003356:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003358:	68c2      	ldr	r2, [r0, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	1055      	asrs	r5, r2, #1
 800335e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003362:	07d2      	lsls	r2, r2, #31
 8003364:	bf48      	it	mi
 8003366:	5962      	ldrmi	r2, [r4, r5]
    }
 8003368:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800336a:	bf48      	it	mi
 800336c:	58d3      	ldrmi	r3, [r2, r3]
 800336e:	4718      	bx	r3

08003370 <_ZNK8touchgfx8CallbackI18CustomControlsViewRK17VerticalSlideMenuvvE7isValidEv>:
    virtual bool isValid() const
 8003370:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8003372:	6840      	ldr	r0, [r0, #4]
 8003374:	b130      	cbz	r0, 8003384 <_ZNK8touchgfx8CallbackI18CustomControlsViewRK17VerticalSlideMenuvvE7isValidEv+0x14>
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	b91a      	cbnz	r2, 8003382 <_ZNK8touchgfx8CallbackI18CustomControlsViewRK17VerticalSlideMenuvvE7isValidEv+0x12>
 800337a:	68d8      	ldr	r0, [r3, #12]
 800337c:	f000 0001 	and.w	r0, r0, #1
 8003380:	4770      	bx	lr
 8003382:	2001      	movs	r0, #1
    }
 8003384:	4770      	bx	lr

08003386 <_ZN8touchgfx8CallbackI18CustomControlsViewRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003386:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003388:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800338a:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800338c:	68c2      	ldr	r2, [r0, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	1055      	asrs	r5, r2, #1
 8003392:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003396:	07d2      	lsls	r2, r2, #31
 8003398:	bf48      	it	mi
 800339a:	5962      	ldrmi	r2, [r4, r5]
    }
 800339c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800339e:	bf48      	it	mi
 80033a0:	58d3      	ldrmi	r3, [r2, r3]
 80033a2:	4718      	bx	r3

080033a4 <_ZNK8touchgfx8CallbackI18CustomControlsViewRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80033a4:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 80033a6:	6840      	ldr	r0, [r0, #4]
 80033a8:	b130      	cbz	r0, 80033b8 <_ZNK8touchgfx8CallbackI18CustomControlsViewRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	b91a      	cbnz	r2, 80033b6 <_ZNK8touchgfx8CallbackI18CustomControlsViewRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80033ae:	68d8      	ldr	r0, [r3, #12]
 80033b0:	f000 0001 	and.w	r0, r0, #1
 80033b4:	4770      	bx	lr
 80033b6:	2001      	movs	r0, #1
    }
 80033b8:	4770      	bx	lr

080033ba <_ZN8touchgfx8CallbackI8DemoViewI23CustomControlsPresenterERKNS_14AbstractButtonEvvE7executeES6_>:
    virtual void execute(T1 t1)
 80033ba:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80033bc:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80033be:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 80033c0:	68c2      	ldr	r2, [r0, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	1055      	asrs	r5, r2, #1
 80033c6:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80033ca:	07d2      	lsls	r2, r2, #31
 80033cc:	bf48      	it	mi
 80033ce:	5962      	ldrmi	r2, [r4, r5]
    }
 80033d0:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80033d2:	bf48      	it	mi
 80033d4:	58d3      	ldrmi	r3, [r2, r3]
 80033d6:	4718      	bx	r3

080033d8 <_ZNK8touchgfx8CallbackI8DemoViewI23CustomControlsPresenterERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80033d8:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 80033da:	6840      	ldr	r0, [r0, #4]
 80033dc:	b130      	cbz	r0, 80033ec <_ZNK8touchgfx8CallbackI8DemoViewI23CustomControlsPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	b91a      	cbnz	r2, 80033ea <_ZNK8touchgfx8CallbackI8DemoViewI23CustomControlsPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80033e2:	68d8      	ldr	r0, [r3, #12]
 80033e4:	f000 0001 	and.w	r0, r0, #1
 80033e8:	4770      	bx	lr
 80033ea:	2001      	movs	r0, #1
    }
 80033ec:	4770      	bx	lr

080033ee <_ZN8DemoViewI23CustomControlsPresenterE22gotoMenuClickedHandlerERKN8touchgfx14AbstractButtonE>:

    Callback<DemoView, const AbstractButton&> onGotoMenuButtonClicked;

    void gotoMenuClickedHandler(const AbstractButton& button)
    {
        View<T>::presenter->backOptionSelected();
 80033ee:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80033f0:	f7fe b9c6 	b.w	8001780 <_ZN13DemoPresenter18backOptionSelectedEv>

080033f4 <_ZN8DemoViewI23CustomControlsPresenterE19updateProcessorLoadEh>:
    }

    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 80033f4:	b510      	push	{r4, lr}
 80033f6:	4604      	mov	r4, r0
 80033f8:	460b      	mov	r3, r1
    {
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", mcuLoadInProcent);
 80033fa:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <_ZN8DemoViewI23CustomControlsPresenterE19updateProcessorLoadEh+0x1c>)
 80033fc:	2105      	movs	r1, #5
 80033fe:	30e4      	adds	r0, #228	@ 0xe4
 8003400:	f019 f954 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.invalidate();
 8003404:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
    }
 8003408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mcuLoadValueTxt.invalidate();
 800340c:	f016 bfbd 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8003410:	08023468 	.word	0x08023468

08003414 <_ZThn64_N8DemoViewI23CustomControlsPresenterE19updateProcessorLoadEh>:
    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 8003414:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 8003418:	e7ec      	b.n	80033f4 <_ZN8DemoViewI23CustomControlsPresenterE19updateProcessorLoadEh>
 800341a:	bf00      	nop

0800341c <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEED0Ev>:
    virtual ~FadeAnimator()
 800341c:	b510      	push	{r4, lr}
 800341e:	4604      	mov	r4, r0
    }
 8003420:	2148      	movs	r1, #72	@ 0x48
 8003422:	f01b fb80 	bl	801eb26 <_ZdlPvj>
 8003426:	4620      	mov	r0, r4
 8003428:	bd10      	pop	{r4, pc}

0800342a <_ZN8DemoViewI23CustomControlsPresenterED0Ev>:
class DemoView : public View<T>, public DemoViewInterface
 800342a:	b510      	push	{r4, lr}
 800342c:	4604      	mov	r4, r0
 800342e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003432:	f01b fb78 	bl	801eb26 <_ZdlPvj>
 8003436:	4620      	mov	r0, r4
 8003438:	bd10      	pop	{r4, pc}

0800343a <_ZThn64_N8DemoViewI23CustomControlsPresenterED0Ev>:
 800343a:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800343e:	e7f4      	b.n	800342a <_ZN8DemoViewI23CustomControlsPresenterED0Ev>

08003440 <_ZN8touchgfx8CallbackI8DemoViewI23CustomControlsPresenterERKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003440:	b510      	push	{r4, lr}
 8003442:	4604      	mov	r4, r0
 8003444:	2110      	movs	r1, #16
 8003446:	f01b fb6e 	bl	801eb26 <_ZdlPvj>
 800344a:	4620      	mov	r0, r4
 800344c:	bd10      	pop	{r4, pc}

0800344e <_ZN8touchgfx8CallbackI18CustomControlsViewRKNS_14AbstractButtonEvvED0Ev>:
 800344e:	b510      	push	{r4, lr}
 8003450:	4604      	mov	r4, r0
 8003452:	2110      	movs	r1, #16
 8003454:	f01b fb67 	bl	801eb26 <_ZdlPvj>
 8003458:	4620      	mov	r0, r4
 800345a:	bd10      	pop	{r4, pc}

0800345c <_ZN8touchgfx8CallbackI18CustomControlsViewRK17VerticalSlideMenuvvED0Ev>:
 800345c:	b510      	push	{r4, lr}
 800345e:	4604      	mov	r4, r0
 8003460:	2110      	movs	r1, #16
 8003462:	f01b fb60 	bl	801eb26 <_ZdlPvj>
 8003466:	4620      	mov	r0, r4
 8003468:	bd10      	pop	{r4, pc}

0800346a <_ZN8touchgfx8CallbackI18CustomControlsViewRK19ThreeWayProgressBarvvED0Ev>:
 800346a:	b510      	push	{r4, lr}
 800346c:	4604      	mov	r4, r0
 800346e:	2110      	movs	r1, #16
 8003470:	f01b fb59 	bl	801eb26 <_ZdlPvj>
 8003474:	4620      	mov	r0, r4
 8003476:	bd10      	pop	{r4, pc}

08003478 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu>:
 8003478:	230c      	movs	r3, #12
        slideMenu.animateUp();
    }
}

void CustomControlsView::slideMenuElementSelectedHandler(const VerticalSlideMenu& menu)
{
 800347a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int selectedElement = slideMenu.getSelectedElementIndex();

    // Setup menu up/down button. First set default then handle special cases
    menuUp.setBitmaps(Bitmap(BITMAP_CONTROL_MENU_ARROW_UP_ID), Bitmap(BITMAP_CONTROL_MENU_ARROW_UP_PRESSED_ID));
 800347c:	f500 77ac 	add.w	r7, r0, #344	@ 0x158
 8003480:	f8ad 3000 	strh.w	r3, [sp]
 8003484:	230e      	movs	r3, #14
{
 8003486:	4604      	mov	r4, r0
    {
        elementSelectedAction = &callback;
    }
    int getSelectedElementIndex()
    {
        return currentSelected;
 8003488:	f890 5981 	ldrb.w	r5, [r0, #2433]	@ 0x981
    menuUp.setBitmaps(Bitmap(BITMAP_CONTROL_MENU_ARROW_UP_ID), Bitmap(BITMAP_CONTROL_MENU_ARROW_UP_PRESSED_ID));
 800348c:	aa01      	add	r2, sp, #4
 800348e:	4669      	mov	r1, sp
 8003490:	4638      	mov	r0, r7
 8003492:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003496:	f013 fe53 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800349a:	2309      	movs	r3, #9
    menuDown.setBitmaps(Bitmap(BITMAP_CONTROL_MENU_ARROW_DOWN_ID), Bitmap(BITMAP_CONTROL_MENU_ARROW_DOWN_PRESSED_ID));
 800349c:	f504 76c6 	add.w	r6, r4, #396	@ 0x18c
 80034a0:	aa01      	add	r2, sp, #4
 80034a2:	4669      	mov	r1, sp
 80034a4:	f8ad 3000 	strh.w	r3, [sp]
 80034a8:	230b      	movs	r3, #11
 80034aa:	4630      	mov	r0, r6
 80034ac:	f8ad 3004 	strh.w	r3, [sp, #4]
 80034b0:	f013 fe46 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        touchable = touch;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f884 317c 	strb.w	r3, [r4, #380]	@ 0x17c
 80034ba:	f884 31b0 	strb.w	r3, [r4, #432]	@ 0x1b0
    menuUp.setTouchable(true);
    menuDown.setTouchable(true);

    if (selectedElement == 0)
 80034be:	2d00      	cmp	r5, #0
 80034c0:	d156      	bne.n	8003570 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0xf8>
 80034c2:	230d      	movs	r3, #13
    {
        menuUp.setBitmaps(Bitmap(BITMAP_CONTROL_MENU_ARROW_UP_INACTIVE_ID), Bitmap(BITMAP_CONTROL_MENU_ARROW_UP_INACTIVE_ID));
 80034c4:	aa01      	add	r2, sp, #4
 80034c6:	4669      	mov	r1, sp
 80034c8:	4638      	mov	r0, r7
 80034ca:	f8ad 3000 	strh.w	r3, [sp]
 80034ce:	f8ad 3004 	strh.w	r3, [sp, #4]
 80034d2:	f013 fe35 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80034d6:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
    {
        menuDown.setBitmaps(Bitmap(BITMAP_CONTROL_MENU_ARROW_DOWN_INACTIVE_ID), Bitmap(BITMAP_CONTROL_MENU_ARROW_DOWN_INACTIVE_ID));
        menuDown.setTouchable(false);
    }
    // Expand the active area of the buttons to make them easier to activate
    menuUp.setWidth(menuUp.getWidth() + 30);
 80034da:	f8b4 3160 	ldrh.w	r3, [r4, #352]	@ 0x160
    menuDown.setWidth(menuDown.getWidth() + 30);
    menuUp.invalidate();
 80034de:	4638      	mov	r0, r7
    datePicker.setVisible(selectedElement == 3);
    statusMessage.setVisible(false);

    datePicker.invalidate();
    gauge.invalidate();
    threeWayProgressBar.invalidate();
 80034e0:	f604 2714 	addw	r7, r4, #2580	@ 0xa14
    menuUp.setWidth(menuUp.getWidth() + 30);
 80034e4:	331e      	adds	r3, #30
        rect.width = width;
 80034e6:	f8a4 3160 	strh.w	r3, [r4, #352]	@ 0x160
    menuDown.setWidth(menuDown.getWidth() + 30);
 80034ea:	f8b4 3194 	ldrh.w	r3, [r4, #404]	@ 0x194
 80034ee:	331e      	adds	r3, #30
 80034f0:	f8a4 3194 	strh.w	r3, [r4, #404]	@ 0x194
    menuUp.invalidate();
 80034f4:	f016 ff49 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    menuDown.invalidate();
 80034f8:	4630      	mov	r0, r6
 80034fa:	f016 ff46 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    gauge.setVisible(selectedElement == 0);
 80034fe:	fab5 f385 	clz	r3, r5
    threeWayProgressBar.setVisible(selectedElement == 1);
 8003502:	1e6a      	subs	r2, r5, #1
        visible = vis;
 8003504:	f504 5680 	add.w	r6, r4, #4096	@ 0x1000
    gauge.setVisible(selectedElement == 0);
 8003508:	095b      	lsrs	r3, r3, #5
    percentageBar.setVisible(selectedElement == 2);
 800350a:	1ea9      	subs	r1, r5, #2
    datePicker.setVisible(selectedElement == 3);
 800350c:	1ee8      	subs	r0, r5, #3
    gauge.setVisible(selectedElement == 0);
 800350e:	f886 3825 	strb.w	r3, [r6, #2085]	@ 0x825
    threeWayProgressBar.setVisible(selectedElement == 1);
 8003512:	4253      	negs	r3, r2
 8003514:	4153      	adcs	r3, r2
 8003516:	f884 3a39 	strb.w	r3, [r4, #2617]	@ 0xa39
    percentageBar.setVisible(selectedElement == 2);
 800351a:	424b      	negs	r3, r1
 800351c:	414b      	adcs	r3, r1
    datePicker.setVisible(selectedElement == 3);
 800351e:	4245      	negs	r5, r0
 8003520:	4145      	adcs	r5, r0
    percentageBar.setVisible(selectedElement == 2);
 8003522:	f884 3ec5 	strb.w	r3, [r4, #3781]	@ 0xec5
 8003526:	2300      	movs	r3, #0
    datePicker.setVisible(selectedElement == 3);
 8003528:	f886 505d 	strb.w	r5, [r6, #93]	@ 0x5d
    datePicker.invalidate();
 800352c:	f504 5581 	add.w	r5, r4, #4128	@ 0x1020
 8003530:	f884 39f1 	strb.w	r3, [r4, #2545]	@ 0x9f1
 8003534:	3518      	adds	r5, #24
 8003536:	4628      	mov	r0, r5
 8003538:	f016 ff27 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    gauge.invalidate();
 800353c:	f504 50c0 	add.w	r0, r4, #6144	@ 0x1800
 8003540:	f016 ff23 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    threeWayProgressBar.invalidate();
 8003544:	4638      	mov	r0, r7
 8003546:	f016 ff20 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    percentageBar.invalidate();
 800354a:	f504 606a 	add.w	r0, r4, #3744	@ 0xea0
 800354e:	f016 ff1c 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    statusMessage.invalidate();
 8003552:	f604 10cc 	addw	r0, r4, #2508	@ 0x9cc
 8003556:	f016 ff18 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>

    currentAnimationState = NO_ANIMATION;
 800355a:	2302      	movs	r3, #2
 800355c:	f886 39e4 	strb.w	r3, [r6, #2532]	@ 0x9e4

    if (gauge.isVisible())
 8003560:	f896 3825 	ldrb.w	r3, [r6, #2085]	@ 0x825
 8003564:	b1bb      	cbz	r3, 8003596 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x11e>
    {
        currentAnimationState = ANIMATION_GAUGE;
 8003566:	2301      	movs	r3, #1
 8003568:	f886 39e4 	strb.w	r3, [r6, #2532]	@ 0x9e4
        // Start animation to a specific date
        datePicker.setday(23, 40, EasingEquations::backEaseInOut);
        datePicker.setMonth(1, 42, EasingEquations::backEaseInOut);
        datePicker.setYear(3, 38, EasingEquations::backEaseInOut);
    }
}
 800356c:	b003      	add	sp, #12
 800356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }

    int getSize()
    {
        return size;
 8003570:	f894 3980 	ldrb.w	r3, [r4, #2432]	@ 0x980
    else if (selectedElement == slideMenu.getSize() - 1)
 8003574:	3b01      	subs	r3, #1
 8003576:	42ab      	cmp	r3, r5
 8003578:	d1af      	bne.n	80034da <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x62>
 800357a:	230a      	movs	r3, #10
        menuDown.setBitmaps(Bitmap(BITMAP_CONTROL_MENU_ARROW_DOWN_INACTIVE_ID), Bitmap(BITMAP_CONTROL_MENU_ARROW_DOWN_INACTIVE_ID));
 800357c:	aa01      	add	r2, sp, #4
 800357e:	4669      	mov	r1, sp
 8003580:	4630      	mov	r0, r6
 8003582:	f8ad 3000 	strh.w	r3, [sp]
 8003586:	f8ad 3004 	strh.w	r3, [sp, #4]
 800358a:	f013 fdd9 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        touchable = touch;
 800358e:	2300      	movs	r3, #0
 8003590:	f884 31b0 	strb.w	r3, [r4, #432]	@ 0x1b0
    }
 8003594:	e7a1      	b.n	80034da <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x62>
    else if (threeWayProgressBar.isVisible())
 8003596:	f894 4a39 	ldrb.w	r4, [r4, #2617]	@ 0xa39
 800359a:	b12c      	cbz	r4, 80035a8 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x130>
        threeWayProgressBar.reset();
 800359c:	4638      	mov	r0, r7
}
 800359e:	b003      	add	sp, #12
 80035a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        threeWayProgressBar.reset();
 80035a4:	f001 bc50 	b.w	8004e48 <_ZN19ThreeWayProgressBar5resetEv>
    else if (datePicker.isVisible())
 80035a8:	f896 305d 	ldrb.w	r3, [r6, #93]	@ 0x5d
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0dd      	beq.n	800356c <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0xf4>
        datePicker.reset();
 80035b0:	4628      	mov	r0, r5
 80035b2:	f000 fd4a 	bl	800404a <_ZN10DatePicker5resetEv>
        datePicker.setday(14, 0, EasingEquations::backEaseInOut);
 80035b6:	4622      	mov	r2, r4
 80035b8:	4628      	mov	r0, r5
 80035ba:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x18c>)
 80035bc:	210e      	movs	r1, #14
 80035be:	f000 fd39 	bl	8004034 <_ZN10DatePicker6setdayEiiPFstsstE>
        datePicker.setMonth(6, 0, EasingEquations::backEaseInOut);
 80035c2:	4622      	mov	r2, r4
 80035c4:	4628      	mov	r0, r5
 80035c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x18c>)
 80035c8:	2106      	movs	r1, #6
 80035ca:	f000 fd36 	bl	800403a <_ZN10DatePicker8setMonthEiiPFstsstE>
        datePicker.setYear(8, 0, EasingEquations::backEaseInOut);
 80035ce:	4622      	mov	r2, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x18c>)
 80035d4:	2108      	movs	r1, #8
 80035d6:	f000 fd34 	bl	8004042 <_ZN10DatePicker7setYearEiiPFstsstE>
        datePicker.setday(23, 40, EasingEquations::backEaseInOut);
 80035da:	4628      	mov	r0, r5
 80035dc:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x18c>)
 80035de:	2228      	movs	r2, #40	@ 0x28
 80035e0:	2117      	movs	r1, #23
 80035e2:	f000 fd27 	bl	8004034 <_ZN10DatePicker6setdayEiiPFstsstE>
        datePicker.setMonth(1, 42, EasingEquations::backEaseInOut);
 80035e6:	4628      	mov	r0, r5
 80035e8:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x18c>)
 80035ea:	222a      	movs	r2, #42	@ 0x2a
 80035ec:	2101      	movs	r1, #1
 80035ee:	f000 fd24 	bl	800403a <_ZN10DatePicker8setMonthEiiPFstsstE>
        datePicker.setYear(3, 38, EasingEquations::backEaseInOut);
 80035f2:	4b04      	ldr	r3, [pc, #16]	@ (8003604 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu+0x18c>)
 80035f4:	2226      	movs	r2, #38	@ 0x26
 80035f6:	2103      	movs	r1, #3
 80035f8:	4628      	mov	r0, r5
}
 80035fa:	b003      	add	sp, #12
 80035fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        datePicker.setYear(3, 38, EasingEquations::backEaseInOut);
 8003600:	f000 bd1f 	b.w	8004042 <_ZN10DatePicker7setYearEiiPFstsstE>
 8003604:	0801add5 	.word	0x0801add5

08003608 <_ZN18CustomControlsView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>:
{
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4604      	mov	r4, r0
    threeWayProgressBar.stopAnimation();
 800360c:	f600 2014 	addw	r0, r0, #2580	@ 0xa14
{
 8003610:	460d      	mov	r5, r1
    threeWayProgressBar.stopAnimation();
 8003612:	f001 faff 	bl	8004c14 <_ZN19ThreeWayProgressBar13stopAnimationEv>
    if (&button == &menuUp)
 8003616:	f504 73ac 	add.w	r3, r4, #344	@ 0x158
 800361a:	429d      	cmp	r5, r3
 800361c:	d10a      	bne.n	8003634 <_ZN18CustomControlsView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x2c>
        currentAnimationState = NO_ANIMATION;
 800361e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8003622:	2202      	movs	r2, #2
        slideMenu.animateDown();
 8003624:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
        currentAnimationState = NO_ANIMATION;
 8003628:	f883 29e4 	strb.w	r2, [r3, #2532]	@ 0x9e4
}
 800362c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        slideMenu.animateDown();
 8003630:	f002 b8c0 	b.w	80057b4 <_ZN17VerticalSlideMenu11animateDownEv>
    else if (&button == &menuDown)
 8003634:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 8003638:	429d      	cmp	r5, r3
 800363a:	d10a      	bne.n	8003652 <_ZN18CustomControlsView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x4a>
        currentAnimationState = NO_ANIMATION;
 800363c:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8003640:	2202      	movs	r2, #2
        slideMenu.animateUp();
 8003642:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
        currentAnimationState = NO_ANIMATION;
 8003646:	f883 29e4 	strb.w	r2, [r3, #2532]	@ 0x9e4
}
 800364a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        slideMenu.animateUp();
 800364e:	f002 b82d 	b.w	80056ac <_ZN17VerticalSlideMenu9animateUpEv>
}
 8003652:	bd38      	pop	{r3, r4, r5, pc}

08003654 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE15handleTickEventEv>:
        if (fadeAnimationRunning)
 8003654:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
    virtual void handleTickEvent()
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 800365c:	b12b      	cbz	r3, 800366a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE15handleTickEventEv+0x16>
            if (fadeAnimationCounter < fadeAnimationDelay)
 800365e:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8003660:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8003662:	4288      	cmp	r0, r1
 8003664:	d202      	bcs.n	800366c <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE15handleTickEventEv+0x18>
                fadeAnimationCounter++;
 8003666:	3001      	adds	r0, #1
 8003668:	86a0      	strh	r0, [r4, #52]	@ 0x34
    }
 800366a:	bd70      	pop	{r4, r5, r6, pc}
                if (fadeAnimationCounter <= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800366c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800366e:	18ca      	adds	r2, r1, r3
 8003670:	4290      	cmp	r0, r2
 8003672:	d917      	bls.n	80036a4 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE15handleTickEventEv+0x50>
                    fadeAnimationRunning = false;
 8003674:	2300      	movs	r3, #0
 8003676:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
                    fadeAnimationDuration = 0;
 800367a:	8723      	strh	r3, [r4, #56]	@ 0x38
                    Application::getInstance()->unregisterTimerWidget(this);
 800367c:	f016 fa9a 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8003680:	4621      	mov	r1, r4
 8003682:	f016 facd 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8003686:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003688:	2800      	cmp	r0, #0
 800368a:	d0ee      	beq.n	800366a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE15handleTickEventEv+0x16>
 800368c:	6803      	ldr	r3, [r0, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4798      	blx	r3
 8003692:	2800      	cmp	r0, #0
 8003694:	d0e9      	beq.n	800366a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE15handleTickEventEv+0x16>
                        fadeAnimationEndedCallback->execute(*this);
 8003696:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003698:	4621      	mov	r1, r4
 800369a:	6803      	ldr	r3, [r0, #0]
    }
 800369c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4718      	bx	r3
                    int16_t deltaAlpha = (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80036a4:	8f65      	ldrh	r5, [r4, #58]	@ 0x3a
 80036a6:	1a40      	subs	r0, r0, r1
 80036a8:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80036aa:	2100      	movs	r1, #0
 80036ac:	b280      	uxth	r0, r0
 80036ae:	1b52      	subs	r2, r2, r5
 80036b0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80036b2:	b212      	sxth	r2, r2
 80036b4:	47a8      	blx	r5
                    T::setAlpha(fadeAnimationStartAlpha + deltaAlpha);
 80036b6:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 80036b8:	4418      	add	r0, r3
        this->alpha = alpha;
 80036ba:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
                    T::invalidate();
 80036be:	4620      	mov	r0, r4
 80036c0:	f016 fe63 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
                    fadeAnimationCounter++;
 80036c4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80036c6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
                    fadeAnimationCounter++;
 80036c8:	3301      	adds	r3, #1
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80036ca:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
                    fadeAnimationCounter++;
 80036cc:	b29b      	uxth	r3, r3
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80036ce:	440a      	add	r2, r1
 80036d0:	4293      	cmp	r3, r2
                    fadeAnimationCounter++;
 80036d2:	86a3      	strh	r3, [r4, #52]	@ 0x34
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80036d4:	d9c9      	bls.n	800366a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE15handleTickEventEv+0x16>
 80036d6:	e7cd      	b.n	8003674 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE15handleTickEventEv+0x20>

080036d8 <_ZN8touchgfx6WidgetC1Ev>:
        this->x = x;
 80036d8:	2200      	movs	r2, #0
        this->width = width;
 80036da:	e9c0 2201 	strd	r2, r2, [r0, #4]
        this->width = 0;
 80036de:	e9c0 2203 	strd	r2, r2, [r0, #12]
        nextSibling(0),
 80036e2:	e9c0 2205 	strd	r2, r2, [r0, #20]
        nextDrawChainElement(0),
 80036e6:	61c2      	str	r2, [r0, #28]
        touchable(false),
 80036e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036ec:	8482      	strh	r2, [r0, #36]	@ 0x24
 80036ee:	4a01      	ldr	r2, [pc, #4]	@ (80036f4 <_ZN8touchgfx6WidgetC1Ev+0x1c>)
 80036f0:	6002      	str	r2, [r0, #0]
 80036f2:	4770      	bx	lr
 80036f4:	0802354c 	.word	0x0802354c

080036f8 <_ZN8touchgfx6ButtonC1Ev>:
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 80036f8:	b510      	push	{r4, lr}
 80036fa:	4604      	mov	r4, r0
    AbstractButton() : Widget(), action(), pressed(false)
 80036fc:	f7ff ffec 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 8003700:	2300      	movs	r3, #0
 8003702:	4620      	mov	r0, r4
 8003704:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003706:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        touchable = touch;
 800370a:	2301      	movs	r3, #1
 800370c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8003710:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <_ZN8touchgfx6ButtonC1Ev+0x2c>)
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003718:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800371a:	8623      	strh	r3, [r4, #48]	@ 0x30
 800371c:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
 8003720:	bd10      	pop	{r4, pc}
 8003722:	bf00      	nop
 8003724:	08025f10 	.word	0x08025f10

08003728 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8003728:	b510      	push	{r4, lr}
 800372a:	4604      	mov	r4, r0
 800372c:	f7ff ffd4 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <_ZN8touchgfx8TextAreaC1Ev+0x24>)
 8003732:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    { }
 8003736:	4620      	mov	r0, r4
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800373e:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8003740:	2300      	movs	r3, #0
 8003742:	e9c4 320a 	strd	r3, r2, [r4, #40]	@ 0x28
 8003746:	8623      	strh	r3, [r4, #48]	@ 0x30
    { }
 8003748:	bd10      	pop	{r4, pc}
 800374a:	bf00      	nop
 800374c:	08025e28 	.word	0x08025e28

08003750 <_ZN5Utils19randomNumberBetweenEii>:
#endif

class Utils
{
public:
    static int randomNumberBetween(int lowest, int highest)
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return instance;
 8003752:	4f09      	ldr	r7, [pc, #36]	@ (8003778 <_ZN5Utils19randomNumberBetweenEii+0x28>)
 8003754:	4606      	mov	r6, r0
 8003756:	460d      	mov	r5, r1
    {
#ifdef SIMULATOR
        return (int)(lowest + (highest - lowest) * (rand() / (float)RAND_MAX));
#else
        uint32_t random = (touchgfx::HAL::getInstance()->getCPUCycles() * HAL::getInstance()->getCPUCycles());
 8003758:	6838      	ldr	r0, [r7, #0]
 800375a:	f011 f915 	bl	8014988 <_ZN8touchgfx3HAL12getCPUCyclesEv>
 800375e:	4604      	mov	r4, r0
 8003760:	6838      	ldr	r0, [r7, #0]
 8003762:	f011 f911 	bl	8014988 <_ZN8touchgfx3HAL12getCPUCyclesEv>
        return lowest + (random % (highest - lowest));
 8003766:	1ba9      	subs	r1, r5, r6
        uint32_t random = (touchgfx::HAL::getInstance()->getCPUCycles() * HAL::getInstance()->getCPUCycles());
 8003768:	fb00 f304 	mul.w	r3, r0, r4
        return lowest + (random % (highest - lowest));
 800376c:	fbb3 f2f1 	udiv	r2, r3, r1
 8003770:	fb01 3312 	mls	r3, r1, r2, r3
#endif
    }
 8003774:	1998      	adds	r0, r3, r6
 8003776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003778:	20024e34 	.word	0x20024e34

0800377c <_ZN18CustomControlsView20screenSaverMinorTickEv>:

void CustomControlsView::screenSaverMinorTick()
{
 800377c:	b510      	push	{r4, lr}
        return currentSelected;
 800377e:	f890 2981 	ldrb.w	r2, [r0, #2433]	@ 0x981
 8003782:	4604      	mov	r4, r0
    if (slideMenu.getSelectedElementIndex() == 0)
 8003784:	b932      	cbnz	r2, 8003794 <_ZN18CustomControlsView20screenSaverMinorTickEv+0x18>
    {
        buttonPressedHandler(menuDown);
 8003786:	f504 71c6 	add.w	r1, r4, #396	@ 0x18c
    }
    else if (slideMenu.getSelectedElementIndex() == slideMenu.getSize() - 1)
    {
        buttonPressedHandler(menuUp);
 800378a:	4620      	mov	r0, r4
        else
        {
            buttonPressedHandler(menuDown);
        }
    }
}
 800378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        buttonPressedHandler(menuUp);
 8003790:	f7ff bf3a 	b.w	8003608 <_ZN18CustomControlsView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>
        return size;
 8003794:	f890 3980 	ldrb.w	r3, [r0, #2432]	@ 0x980
    else if (slideMenu.getSelectedElementIndex() == slideMenu.getSize() - 1)
 8003798:	3b01      	subs	r3, #1
 800379a:	4293      	cmp	r3, r2
 800379c:	d102      	bne.n	80037a4 <_ZN18CustomControlsView20screenSaverMinorTickEv+0x28>
        buttonPressedHandler(menuUp);
 800379e:	f504 71ac 	add.w	r1, r4, #344	@ 0x158
 80037a2:	e7f2      	b.n	800378a <_ZN18CustomControlsView20screenSaverMinorTickEv+0xe>
        if (Utils::randomNumberBetween(0, 100) < 50)
 80037a4:	2164      	movs	r1, #100	@ 0x64
 80037a6:	2000      	movs	r0, #0
 80037a8:	f7ff ffd2 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 80037ac:	2831      	cmp	r0, #49	@ 0x31
 80037ae:	ddf6      	ble.n	800379e <_ZN18CustomControlsView20screenSaverMinorTickEv+0x22>
 80037b0:	e7e9      	b.n	8003786 <_ZN18CustomControlsView20screenSaverMinorTickEv+0xa>
	...

080037b4 <_ZN18CustomControlsViewC1Ev>:
CustomControlsView::CustomControlsView() :
 80037b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b8:	b08f      	sub	sp, #60	@ 0x3c
 80037ba:	4604      	mov	r4, r0
    View() : presenter(0)
 80037bc:	f017 f912 	bl	801a9e4 <_ZN8touchgfx6ScreenC1Ev>
        onGotoMenuButtonClicked(this, &DemoView::gotoMenuClickedHandler)
 80037c0:	4be1      	ldr	r3, [pc, #900]	@ (8003b48 <_ZN18CustomControlsViewC1Ev+0x394>)
 80037c2:	2500      	movs	r5, #0
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 80037c4:	f104 06e4 	add.w	r6, r4, #228	@ 0xe4
        onGotoMenuButtonClicked(this, &DemoView::gotoMenuClickedHandler)
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	3338      	adds	r3, #56	@ 0x38
 80037cc:	63e5      	str	r5, [r4, #60]	@ 0x3c
    tickCounter(0)
 80037ce:	f504 7980 	add.w	r9, r4, #256	@ 0x100
 80037d2:	6423      	str	r3, [r4, #64]	@ 0x40
 80037d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 80037d8:	4fdc      	ldr	r7, [pc, #880]	@ (8003b4c <_ZN18CustomControlsViewC1Ev+0x398>)
 80037da:	f504 7896 	add.w	r8, r4, #300	@ 0x12c
 80037de:	4618      	mov	r0, r3
 80037e0:	9307      	str	r3, [sp, #28]
 80037e2:	f7ff ff89 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
 80037e6:	f104 0378 	add.w	r3, r4, #120	@ 0x78
 80037ea:	f504 7ac6 	add.w	sl, r4, #396	@ 0x18c
 80037ee:	f504 7be8 	add.w	fp, r4, #464	@ 0x1d0
 80037f2:	4618      	mov	r0, r3
 80037f4:	9308      	str	r3, [sp, #32]
 80037f6:	f7ff ff97 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
 80037fa:	f104 03ac 	add.w	r3, r4, #172	@ 0xac
    TextAreaWithWildcardBase() : TextArea() {  }
 80037fe:	4618      	mov	r0, r3
 8003800:	9309      	str	r3, [sp, #36]	@ 0x24
 8003802:	f7ff ff91 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 8003806:	4bd2      	ldr	r3, [pc, #840]	@ (8003b50 <_ZN18CustomControlsViewC1Ev+0x39c>)
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 8003808:	4629      	mov	r1, r5
 800380a:	9808      	ldr	r0, [sp, #32]
 800380c:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
    {
 8003810:	4bd0      	ldr	r3, [pc, #832]	@ (8003b54 <_ZN18CustomControlsViewC1Ev+0x3a0>)
 8003812:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
        this->pobject = pobject;
 8003816:	e9c4 343c 	strd	r3, r4, [r4, #240]	@ 0xf0
        this->pmemfun_1 = pmemfun_1;
 800381a:	4bcf      	ldr	r3, [pc, #828]	@ (8003b58 <_ZN18CustomControlsViewC1Ev+0x3a4>)
 800381c:	e9c4 353e 	strd	r3, r5, [r4, #248]	@ 0xf8
        gotoMenuButton.setAction(onGotoMenuButtonClicked);
 8003820:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
        action = &callback;
 8003824:	66e3      	str	r3, [r4, #108]	@ 0x6c
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 8003826:	f013 fc03 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 800382a:	22ff      	movs	r2, #255	@ 0xff
 800382c:	4611      	mov	r1, r2
 800382e:	4610      	mov	r0, r2
 8003830:	f018 ff4a 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 8003834:	462b      	mov	r3, r5
 8003836:	4ac9      	ldr	r2, [pc, #804]	@ (8003b5c <_ZN18CustomControlsViewC1Ev+0x3a8>)
 8003838:	2105      	movs	r1, #5
        this->color = color;
 800383a:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 800383e:	4630      	mov	r0, r6
 8003840:	f018 ff34 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_VALUE));
 8003844:	9809      	ldr	r0, [sp, #36]	@ 0x24
        wildcard = value;
 8003846:	f8c4 60e0 	str.w	r6, [r4, #224]	@ 0xe0
 800384a:	f04f 0101 	mov.w	r1, #1
 800384e:	f013 fbef 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadValueTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 8003852:	22ff      	movs	r2, #255	@ 0xff
 8003854:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8003858:	4611      	mov	r1, r2
 800385a:	4610      	mov	r0, r2
 800385c:	f018 ff34 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8003860:	4bbf      	ldr	r3, [pc, #764]	@ (8003b60 <_ZN18CustomControlsViewC1Ev+0x3ac>)
 8003862:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
 8003866:	4648      	mov	r0, r9
 8003868:	f103 0208 	add.w	r2, r3, #8
 800386c:	3344      	adds	r3, #68	@ 0x44
 800386e:	f8ad 6034 	strh.w	r6, [sp, #52]	@ 0x34
 8003872:	6022      	str	r2, [r4, #0]
 8003874:	6423      	str	r3, [r4, #64]	@ 0x40
 8003876:	f7ff ff2f 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
        setBitmap(bmp);
 800387a:	a90d      	add	r1, sp, #52	@ 0x34
 800387c:	4648      	mov	r0, r9
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800387e:	f8c4 7100 	str.w	r7, [r4, #256]	@ 0x100
 8003882:	f8a4 6126 	strh.w	r6, [r4, #294]	@ 0x126
 8003886:	f884 6128 	strb.w	r6, [r4, #296]	@ 0x128
        setBitmap(bmp);
 800388a:	f013 fd60 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800388e:	4640      	mov	r0, r8
 8003890:	f8ad 6034 	strh.w	r6, [sp, #52]	@ 0x34
 8003894:	f7ff ff20 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
        setBitmap(bmp);
 8003898:	a90d      	add	r1, sp, #52	@ 0x34
 800389a:	4640      	mov	r0, r8
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800389c:	f8c4 712c 	str.w	r7, [r4, #300]	@ 0x12c
    currentAnimationState(NO_ANIMATION),
 80038a0:	f504 5780 	add.w	r7, r4, #4096	@ 0x1000
 80038a4:	f8a4 6152 	strh.w	r6, [r4, #338]	@ 0x152
 80038a8:	f884 6154 	strb.w	r6, [r4, #340]	@ 0x154
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80038ac:	1d26      	adds	r6, r4, #4
        setBitmap(bmp);
 80038ae:	f013 fd4e 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    tickCounter(0)
 80038b2:	f504 73ac 	add.w	r3, r4, #344	@ 0x158
 80038b6:	4618      	mov	r0, r3
 80038b8:	9305      	str	r3, [sp, #20]
 80038ba:	f7ff ff1d 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
 80038be:	4650      	mov	r0, sl
 80038c0:	f7ff ff1a 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
    {
 80038c4:	4ba7      	ldr	r3, [pc, #668]	@ (8003b64 <_ZN18CustomControlsViewC1Ev+0x3b0>)
 80038c6:	4658      	mov	r0, fp
        this->pobject = pobject;
 80038c8:	e9c4 3470 	strd	r3, r4, [r4, #448]	@ 0x1c0
        this->pmemfun_1 = pmemfun_1;
 80038cc:	4ba6      	ldr	r3, [pc, #664]	@ (8003b68 <_ZN18CustomControlsViewC1Ev+0x3b4>)
 80038ce:	e9c4 3572 	strd	r3, r5, [r4, #456]	@ 0x1c8
 80038d2:	f001 fd8b 	bl	80053ec <_ZN17VerticalSlideMenuC1Ev>
    {
 80038d6:	4ba5      	ldr	r3, [pc, #660]	@ (8003b6c <_ZN18CustomControlsViewC1Ev+0x3b8>)
        this->pmemfun_1 = pmemfun_1;
 80038d8:	f8c4 59c8 	str.w	r5, [r4, #2504]	@ 0x9c8
    {
 80038dc:	f8c4 39bc 	str.w	r3, [r4, #2492]	@ 0x9bc
        this->pmemfun_1 = pmemfun_1;
 80038e0:	4ba3      	ldr	r3, [pc, #652]	@ (8003b70 <_ZN18CustomControlsViewC1Ev+0x3bc>)
        this->pobject = pobject;
 80038e2:	f8c4 49c0 	str.w	r4, [r4, #2496]	@ 0x9c0
        this->pmemfun_1 = pmemfun_1;
 80038e6:	f8c4 39c4 	str.w	r3, [r4, #2500]	@ 0x9c4
 80038ea:	f604 13cc 	addw	r3, r4, #2508	@ 0x9cc
        fadeAnimationEndedCallback(0)
 80038ee:	4618      	mov	r0, r3
 80038f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80038f2:	f7ff ff19 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
 80038f6:	4b9f      	ldr	r3, [pc, #636]	@ (8003b74 <_ZN18CustomControlsViewC1Ev+0x3c0>)
        fadeAnimationRunning(false),
 80038f8:	f884 59fe 	strb.w	r5, [r4, #2558]	@ 0x9fe
        fadeAnimationEndedCallback(0)
 80038fc:	f8c4 39cc 	str.w	r3, [r4, #2508]	@ 0x9cc
 8003900:	f604 2314 	addw	r3, r4, #2580	@ 0xa14
        fadeAnimationCounter(0),
 8003904:	f8c4 5a00 	str.w	r5, [r4, #2560]	@ 0xa00
        fadeAnimationEndedCallback(0)
 8003908:	f8c4 5a10 	str.w	r5, [r4, #2576]	@ 0xa10
 800390c:	4618      	mov	r0, r3
 800390e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003910:	f001 fb24 	bl	8004f5c <_ZN19ThreeWayProgressBarC1Ev>
    {
 8003914:	4b98      	ldr	r3, [pc, #608]	@ (8003b78 <_ZN18CustomControlsViewC1Ev+0x3c4>)
        this->pmemfun_1 = pmemfun_1;
 8003916:	f8c4 5e9c 	str.w	r5, [r4, #3740]	@ 0xe9c
    {
 800391a:	f8c4 3e90 	str.w	r3, [r4, #3728]	@ 0xe90
        this->pmemfun_1 = pmemfun_1;
 800391e:	4b97      	ldr	r3, [pc, #604]	@ (8003b7c <_ZN18CustomControlsViewC1Ev+0x3c8>)
        this->pobject = pobject;
 8003920:	f8c4 4e94 	str.w	r4, [r4, #3732]	@ 0xe94
        this->pmemfun_1 = pmemfun_1;
 8003924:	f8c4 3e98 	str.w	r3, [r4, #3736]	@ 0xe98
 8003928:	f504 636a 	add.w	r3, r4, #3744	@ 0xea0
 800392c:	4618      	mov	r0, r3
 800392e:	9306      	str	r3, [sp, #24]
 8003930:	f7ff fab8 	bl	8002ea4 <_ZN16CircularProgressC1Ev>
 8003934:	f504 5381 	add.w	r3, r4, #4128	@ 0x1020
 8003938:	3318      	adds	r3, #24
 800393a:	4618      	mov	r0, r3
 800393c:	9304      	str	r3, [sp, #16]
 800393e:	f000 fc41 	bl	80041c4 <_ZN10DatePickerC1Ev>
 8003942:	f504 53c0 	add.w	r3, r4, #6144	@ 0x1800
 8003946:	4618      	mov	r0, r3
 8003948:	9303      	str	r3, [sp, #12]
 800394a:	f000 ff25 	bl	8004798 <_ZN5GaugeC1Ev>
    currentAnimationState(NO_ANIMATION),
 800394e:	f04f 0302 	mov.w	r3, #2
    menuBackground.setBitmap(Bitmap(BITMAP_CONTROLS_MENU_BACKGROUND_ID));
 8003952:	a90d      	add	r1, sp, #52	@ 0x34
 8003954:	4648      	mov	r0, r9
    currentAnimationState(NO_ANIMATION),
 8003956:	f887 39e4 	strb.w	r3, [r7, #2532]	@ 0x9e4
 800395a:	231c      	movs	r3, #28
    tickCounter(0)
 800395c:	f8c7 59ec 	str.w	r5, [r7, #2540]	@ 0x9ec
 8003960:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    menuBackground.setBitmap(Bitmap(BITMAP_CONTROLS_MENU_BACKGROUND_ID));
 8003964:	f013 fcf3 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    menuBackground.setXY(0, 0);
 8003968:	462a      	mov	r2, r5
 800396a:	4629      	mov	r1, r5
 800396c:	4648      	mov	r0, r9
 800396e:	f7fd fa37 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8003972:	4649      	mov	r1, r9
 8003974:	4630      	mov	r0, r6
 8003976:	f00f f9eb 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800397a:	231b      	movs	r3, #27
    background.setBitmap(Bitmap(BITMAP_CONTROLS_BACKGROUND_ID));
 800397c:	a90d      	add	r1, sp, #52	@ 0x34
 800397e:	4640      	mov	r0, r8
 8003980:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8003984:	f013 fce3 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setXY(menuBackground.getWidth(), 0);
 8003988:	462a      	mov	r2, r5
 800398a:	f9b4 1108 	ldrsh.w	r1, [r4, #264]	@ 0x108
 800398e:	4640      	mov	r0, r8
 8003990:	f7fd fa26 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8003994:	4641      	mov	r1, r8
 8003996:	4630      	mov	r0, r6
    menuUp.setAction(onButtonPressed);
 8003998:	f504 78e0 	add.w	r8, r4, #448	@ 0x1c0
 800399c:	f00f f9d8 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039a0:	f04f 020e 	mov.w	r2, #14
 80039a4:	230c      	movs	r3, #12
    menuUp.setBitmaps(Bitmap(BITMAP_CONTROL_MENU_ARROW_UP_ID), Bitmap(BITMAP_CONTROL_MENU_ARROW_UP_PRESSED_ID));
 80039a6:	a90c      	add	r1, sp, #48	@ 0x30
 80039a8:	9805      	ldr	r0, [sp, #20]
 80039aa:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80039ae:	aa0d      	add	r2, sp, #52	@ 0x34
 80039b0:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80039b4:	f013 fbc4 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    menuUp.setXY(menuBackground.getX(), menuBackground.getY());
 80039b8:	f9b4 2106 	ldrsh.w	r2, [r4, #262]	@ 0x106
 80039bc:	f9b4 1104 	ldrsh.w	r1, [r4, #260]	@ 0x104
 80039c0:	9805      	ldr	r0, [sp, #20]
 80039c2:	f7fd fa0d 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 80039c6:	9905      	ldr	r1, [sp, #20]
 80039c8:	4630      	mov	r0, r6
 80039ca:	f8c4 8180 	str.w	r8, [r4, #384]	@ 0x180
 80039ce:	f00f f9bf 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039d2:	2309      	movs	r3, #9
    menuDown.setBitmaps(Bitmap(BITMAP_CONTROL_MENU_ARROW_DOWN_ID), Bitmap(BITMAP_CONTROL_MENU_ARROW_DOWN_PRESSED_ID));
 80039d4:	aa0d      	add	r2, sp, #52	@ 0x34
 80039d6:	a90c      	add	r1, sp, #48	@ 0x30
 80039d8:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80039dc:	230b      	movs	r3, #11
 80039de:	4650      	mov	r0, sl
 80039e0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80039e4:	f013 fbac 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
    {
        return y + height;
 80039e8:	f8b4 3106 	ldrh.w	r3, [r4, #262]	@ 0x106
    menuDown.setXY(menuUp.getX(), menuBackground.getRect().bottom() - menuDown.getHeight());
 80039ec:	4650      	mov	r0, sl
 80039ee:	f8b4 210a 	ldrh.w	r2, [r4, #266]	@ 0x10a
 80039f2:	f9b4 115c 	ldrsh.w	r1, [r4, #348]	@ 0x15c
 80039f6:	441a      	add	r2, r3
 80039f8:	f8b4 3196 	ldrh.w	r3, [r4, #406]	@ 0x196
 80039fc:	1ad2      	subs	r2, r2, r3
 80039fe:	b212      	sxth	r2, r2
 8003a00:	f7fd f9ee 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8003a04:	4651      	mov	r1, sl
 8003a06:	4630      	mov	r0, r6
 8003a08:	f8c4 81b4 	str.w	r8, [r4, #436]	@ 0x1b4
 8003a0c:	f04f 0811 	mov.w	r8, #17
 8003a10:	f00f f99e 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    slideMenu.setPosition(menuBackground.getX() + ((menuBackground.getWidth() - Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_LARGE_ID).getWidth()) / 2) - 7, menuUp.getRect().bottom(), 60, menuDown.getY() - menuUp.getRect().bottom());
 8003a14:	a80d      	add	r0, sp, #52	@ 0x34
 8003a16:	f9b4 9108 	ldrsh.w	r9, [r4, #264]	@ 0x108
 8003a1a:	f8b4 a104 	ldrh.w	sl, [r4, #260]	@ 0x104
 8003a1e:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8003a22:	f018 ff53 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8003a26:	f8b4 315e 	ldrh.w	r3, [r4, #350]	@ 0x15e
 8003a2a:	eba9 0000 	sub.w	r0, r9, r0
 8003a2e:	f8b4 2162 	ldrh.w	r2, [r4, #354]	@ 0x162
 8003a32:	f1aa 0a07 	sub.w	sl, sl, #7
 8003a36:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003a3a:	f04f 0912 	mov.w	r9, #18
 8003a3e:	441a      	add	r2, r3
 8003a40:	f8b4 3192 	ldrh.w	r3, [r4, #402]	@ 0x192
 8003a44:	eb0a 0160 	add.w	r1, sl, r0, asr #1
 8003a48:	4658      	mov	r0, fp
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	b212      	sxth	r2, r2
 8003a4e:	b209      	sxth	r1, r1
 8003a50:	b21b      	sxth	r3, r3
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	233c      	movs	r3, #60	@ 0x3c
 8003a56:	f7fd f9ab 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    slideMenu.setup(numberOfElements, 0, Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_SMALL_ID), Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_LARGE_ID));
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	462a      	mov	r2, r5
 8003a5e:	4658      	mov	r0, fp
 8003a60:	f8ad 8000 	strh.w	r8, [sp]
 8003a64:	2104      	movs	r1, #4
 8003a66:	f001 fcf3 	bl	8005450 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_>
    slideMenu.setBitmapsForElement(0, BITMAP_CONTROL_MENU_ICON_GAUGE_SMALL_ID, BITMAP_CONTROL_MENU_ICON_GAUGE_LARGE_ID);
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4658      	mov	r0, fp
 8003a6e:	2313      	movs	r3, #19
 8003a70:	2214      	movs	r2, #20
 8003a72:	f001 fde5 	bl	8005640 <_ZN17VerticalSlideMenu20setBitmapsForElementEitt>
    slideMenu.setBitmapsForElement(1, BITMAP_CONTROL_MENU_ICON_THREE_WAY_SMALL_ID, BITMAP_CONTROL_MENU_ICON_THREE_WAY_LARGE_ID);
 8003a76:	4658      	mov	r0, fp
 8003a78:	2317      	movs	r3, #23
 8003a7a:	2218      	movs	r2, #24
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	f001 fddf 	bl	8005640 <_ZN17VerticalSlideMenu20setBitmapsForElementEitt>
    slideMenu.setBitmapsForElement(2, BITMAP_CONTROL_MENU_ICON_PERCENTAGE_SMALL_ID, BITMAP_CONTROL_MENU_ICON_PERCENTAGE_LARGE_ID);
 8003a82:	4658      	mov	r0, fp
 8003a84:	2315      	movs	r3, #21
 8003a86:	2216      	movs	r2, #22
 8003a88:	2102      	movs	r1, #2
 8003a8a:	f001 fdd9 	bl	8005640 <_ZN17VerticalSlideMenu20setBitmapsForElementEitt>
        slideMenu.setBitmapsForElement(3, BITMAP_CONTROL_MENU_ICON_DATEPICKER_SMALL_ID, BITMAP_CONTROL_MENU_ICON_DATEPICKER_LARGE_ID);
 8003a8e:	464a      	mov	r2, r9
 8003a90:	4643      	mov	r3, r8
 8003a92:	4658      	mov	r0, fp
 8003a94:	2103      	movs	r1, #3
    gotoMenuButton.setXY(HAL::DISPLAY_WIDTH - gotoMenuButton.getWidth() - 3, 2);
 8003a96:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8003b80 <_ZN18CustomControlsViewC1Ev+0x3cc>
        slideMenu.setBitmapsForElement(3, BITMAP_CONTROL_MENU_ICON_DATEPICKER_SMALL_ID, BITMAP_CONTROL_MENU_ICON_DATEPICKER_LARGE_ID);
 8003a9a:	f001 fdd1 	bl	8005640 <_ZN17VerticalSlideMenu20setBitmapsForElementEitt>
        animationDuration = duration;
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f8c4 3984 	str.w	r3, [r4, #2436]	@ 0x984
    slideMenu.setElementSelectedCallback(slideMenuElementSelectedCallback);
 8003aa8:	f604 13bc 	addw	r3, r4, #2492	@ 0x9bc
        elementSelectedAction = &callback;
 8003aac:	f8c4 31fc 	str.w	r3, [r4, #508]	@ 0x1fc
 8003ab0:	f00f f94e 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003ab4:	230f      	movs	r3, #15
    gotoMenuButton.setBitmaps(Bitmap(BITMAP_CONTROL_MENU_BUTTON_ID), Bitmap(BITMAP_CONTROL_MENU_BUTTON_PRESSED_ID));
 8003ab6:	aa0d      	add	r2, sp, #52	@ 0x34
 8003ab8:	a90c      	add	r1, sp, #48	@ 0x30
 8003aba:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8003abe:	2310      	movs	r3, #16
 8003ac0:	9807      	ldr	r0, [sp, #28]
 8003ac2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8003ac6:	f013 fb3b 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    gotoMenuButton.setXY(HAL::DISPLAY_WIDTH - gotoMenuButton.getWidth() - 3, 2);
 8003aca:	f8b8 1000 	ldrh.w	r1, [r8]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	@ 0x4c
 8003ad4:	3903      	subs	r1, #3
 8003ad6:	9807      	ldr	r0, [sp, #28]
 8003ad8:	1ac9      	subs	r1, r1, r3
 8003ada:	b209      	sxth	r1, r1
 8003adc:	f7fd f980 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8003ae0:	9907      	ldr	r1, [sp, #28]
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f00f f934 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    threeWayProgressBar.setXY(background.getX() + (background.getWidth() - threeWayProgressBar.getWidth()) / 2, background.getY() + (background.getHeight() - threeWayProgressBar.getHeight()) / 2);
 8003ae8:	f9b4 2a1e 	ldrsh.w	r2, [r4, #2590]	@ 0xa1e
 8003aec:	f9b4 3136 	ldrsh.w	r3, [r4, #310]	@ 0x136
 8003af0:	f9b4 1a1c 	ldrsh.w	r1, [r4, #2588]	@ 0xa1c
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	f8b4 2132 	ldrh.w	r2, [r4, #306]	@ 0x132
 8003afa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003afc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003b00:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8003b04:	f9b4 3134 	ldrsh.w	r3, [r4, #308]	@ 0x134
 8003b08:	1a5b      	subs	r3, r3, r1
 8003b0a:	f8b4 1130 	ldrh.w	r1, [r4, #304]	@ 0x130
 8003b0e:	b212      	sxth	r2, r2
 8003b10:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003b14:	eb01 0163 	add.w	r1, r1, r3, asr #1
 8003b18:	b209      	sxth	r1, r1
 8003b1a:	f7fd f961 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    threeWayProgressBar.setButtonClickedCallback(threeWayButtonPressedCallback);
 8003b1e:	f504 6369 	add.w	r3, r4, #3728	@ 0xe90
 8003b22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003b24:	4630      	mov	r0, r6

    void setActive(bool active);

    void setButtonClickedCallback(touchgfx::GenericCallback<const ThreeWayProgressBar&>& callback)
    {
        buttonClickedAction = &callback;
 8003b26:	f8c4 3a40 	str.w	r3, [r4, #2624]	@ 0xa40
        visible = vis;
 8003b2a:	f884 5a39 	strb.w	r5, [r4, #2617]	@ 0xa39
 8003b2e:	f00f f90f 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    percentageBar.setXY(background.getX() + (background.getWidth() - percentageBar.getWidth()) / 2, background.getY() + (background.getHeight() - percentageBar.getHeight()) / 2);
 8003b32:	f9b4 2eaa 	ldrsh.w	r2, [r4, #3754]	@ 0xeaa
 8003b36:	f9b4 3136 	ldrsh.w	r3, [r4, #310]	@ 0x136
 8003b3a:	f9b4 1ea8 	ldrsh.w	r1, [r4, #3752]	@ 0xea8
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	f8b4 2132 	ldrh.w	r2, [r4, #306]	@ 0x132
 8003b44:	e01e      	b.n	8003b84 <_ZN18CustomControlsViewC1Ev+0x3d0>
 8003b46:	bf00      	nop
 8003b48:	080235d0 	.word	0x080235d0
 8003b4c:	08025fb8 	.word	0x08025fb8
 8003b50:	08023474 	.word	0x08023474
 8003b54:	080235b8 	.word	0x080235b8
 8003b58:	080033ef 	.word	0x080033ef
 8003b5c:	08023468 	.word	0x08023468
 8003b60:	08021ad4 	.word	0x08021ad4
 8003b64:	0802361c 	.word	0x0802361c
 8003b68:	08003609 	.word	0x08003609
 8003b6c:	08023634 	.word	0x08023634
 8003b70:	08003479 	.word	0x08003479
 8003b74:	0802364c 	.word	0x0802364c
 8003b78:	080236d8 	.word	0x080236d8
 8003b7c:	08003dcd 	.word	0x08003dcd
 8003b80:	20024e28 	.word	0x20024e28
 8003b84:	9806      	ldr	r0, [sp, #24]
 8003b86:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003b8a:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8003b8e:	f9b4 3134 	ldrsh.w	r3, [r4, #308]	@ 0x134
 8003b92:	1a5b      	subs	r3, r3, r1
 8003b94:	f8b4 1130 	ldrh.w	r1, [r4, #304]	@ 0x130
 8003b98:	b212      	sxth	r2, r2
 8003b9a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003b9e:	eb01 0163 	add.w	r1, r1, r3, asr #1
 8003ba2:	b209      	sxth	r1, r1
 8003ba4:	f7fd f91c 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    percentageBar.setBarAngle(-40);
 8003ba8:	9806      	ldr	r0, [sp, #24]
 8003baa:	f06f 0127 	mvn.w	r1, #39	@ 0x27
 8003bae:	f7ff fad5 	bl	800315c <_ZN16CircularProgress11setBarAngleEi>
 8003bb2:	9906      	ldr	r1, [sp, #24]
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	f884 5ec5 	strb.w	r5, [r4, #3781]	@ 0xec5
 8003bba:	f00f f8c9 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    datePicker.setXY(background.getX() + (background.getWidth() - datePicker.getWidth()) / 2, background.getY() + (background.getHeight() - datePicker.getHeight()) / 2);
 8003bbe:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8003bc2:	f9b4 3136 	ldrsh.w	r3, [r4, #310]	@ 0x136
 8003bc6:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	@ 0x40
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	f8b4 2132 	ldrh.w	r2, [r4, #306]	@ 0x132
 8003bd0:	9804      	ldr	r0, [sp, #16]
 8003bd2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003bd6:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8003bda:	f9b4 3134 	ldrsh.w	r3, [r4, #308]	@ 0x134
 8003bde:	1a5b      	subs	r3, r3, r1
 8003be0:	f8b4 1130 	ldrh.w	r1, [r4, #304]	@ 0x130
 8003be4:	b212      	sxth	r2, r2
 8003be6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003bea:	eb01 0163 	add.w	r1, r1, r3, asr #1
 8003bee:	b209      	sxth	r1, r1
 8003bf0:	f7fd f8f6 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8003bf4:	9904      	ldr	r1, [sp, #16]
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f887 505d 	strb.w	r5, [r7, #93]	@ 0x5d
 8003bfc:	f00f f8a8 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    gauge.setBitmaps(Bitmap(BITMAP_GAUGE_BACKGROUND_ID), Bitmap(BITMAP_GAUGE_NEEDLE_PIN_ID));
 8003c00:	9803      	ldr	r0, [sp, #12]
 8003c02:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8003c06:	f04f 013f 	mov.w	r1, #63	@ 0x3f
 8003c0a:	f000 fccb 	bl	80045a4 <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapES1_>
    gauge.setXY(background.getX() + (background.getWidth() - gauge.getWidth()) / 2, background.getY() + (background.getHeight() - gauge.getHeight()) / 2);
 8003c0e:	f9b7 280a 	ldrsh.w	r2, [r7, #2058]	@ 0x80a
 8003c12:	f9b4 3136 	ldrsh.w	r3, [r4, #310]	@ 0x136
 8003c16:	f9b7 1808 	ldrsh.w	r1, [r7, #2056]	@ 0x808
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	f8b4 2132 	ldrh.w	r2, [r4, #306]	@ 0x132
 8003c20:	9803      	ldr	r0, [sp, #12]
 8003c22:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003c26:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8003c2a:	f9b4 3134 	ldrsh.w	r3, [r4, #308]	@ 0x134
 8003c2e:	1a5b      	subs	r3, r3, r1
 8003c30:	f8b4 1130 	ldrh.w	r1, [r4, #304]	@ 0x130
 8003c34:	b212      	sxth	r2, r2
 8003c36:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003c3a:	eb01 0163 	add.w	r1, r1, r3, asr #1
 8003c3e:	b209      	sxth	r1, r1
 8003c40:	f7fd f8ce 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    gauge.setLimits(0, 60, 240, 480);
 8003c44:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003c48:	223c      	movs	r2, #60	@ 0x3c
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	9803      	ldr	r0, [sp, #12]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	23f0      	movs	r3, #240	@ 0xf0
 8003c52:	f000 fe89 	bl	8004968 <_ZN5Gauge9setLimitsEiiii>
    gauge.setValue(40);
 8003c56:	9803      	ldr	r0, [sp, #12]
 8003c58:	2128      	movs	r1, #40	@ 0x28
 8003c5a:	f000 fd4d 	bl	80046f8 <_ZN5Gauge8setValueEi>
    gauge.setAnimationDuration(20);
 8003c5e:	9803      	ldr	r0, [sp, #12]
 8003c60:	2114      	movs	r1, #20
 8003c62:	f000 fd68 	bl	8004736 <_ZN5Gauge20setAnimationDurationEt>
 8003c66:	9903      	ldr	r1, [sp, #12]
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f887 5825 	strb.w	r5, [r7, #2085]	@ 0x825
 8003c6e:	f00f f86f 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    statusMessage.setPosition(background.getX() + 6, 20, 100, 48);
 8003c72:	f8b4 1130 	ldrh.w	r1, [r4, #304]	@ 0x130
 8003c76:	2330      	movs	r3, #48	@ 0x30
 8003c78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003c7a:	3106      	adds	r1, #6
 8003c7c:	2214      	movs	r2, #20
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2364      	movs	r3, #100	@ 0x64
 8003c82:	b209      	sxth	r1, r1
 8003c84:	f7fd f894 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    statusMessage.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 8003c88:	22ff      	movs	r2, #255	@ 0xff
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f018 fd1b 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8003c92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003c94:	f8c4 09f4 	str.w	r0, [r4, #2548]	@ 0x9f4
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f884 59f1 	strb.w	r5, [r4, #2545]	@ 0x9f1
 8003c9e:	f00f f857 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mcuLoadTxt.setXY(HAL::DISPLAY_WIDTH - 106, 258 - mcuLoadTxt.getTypedText().getFont()->getFontHeight());
 8003ca2:	f8b4 309e 	ldrh.w	r3, [r4, #158]	@ 0x9e
 8003ca6:	f8b8 5000 	ldrh.w	r5, [r8]
 8003caa:	a80d      	add	r0, sp, #52	@ 0x34
 8003cac:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8003cb0:	f7fe ffd0 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8003cb4:	6803      	ldr	r3, [r0, #0]
 8003cb6:	3d6a      	subs	r5, #106	@ 0x6a
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	b22d      	sxth	r5, r5
 8003cbc:	4798      	blx	r3
 8003cbe:	f5c0 7281 	rsb	r2, r0, #258	@ 0x102
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	9808      	ldr	r0, [sp, #32]
 8003cc6:	b212      	sxth	r2, r2
 8003cc8:	f7fd f88a 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    mcuLoadTxt.setColor(Color::getColorFrom24BitRGB(0x17, 0x3C, 0x51));
 8003ccc:	2251      	movs	r2, #81	@ 0x51
 8003cce:	213c      	movs	r1, #60	@ 0x3c
 8003cd0:	2017      	movs	r0, #23
 8003cd2:	f018 fcf9 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        return x + width;
 8003cd6:	f8b4 307c 	ldrh.w	r3, [r4, #124]	@ 0x7c
 8003cda:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
    mcuLoadValueTxt.setPosition(mcuLoadTxt.getRect().right(), mcuLoadTxt.getY(), 34, 14);
 8003cde:	220e      	movs	r2, #14
 8003ce0:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 8003ce4:	4419      	add	r1, r3
 8003ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ce8:	9200      	str	r2, [sp, #0]
 8003cea:	2322      	movs	r3, #34	@ 0x22
 8003cec:	f9b4 207e 	ldrsh.w	r2, [r4, #126]	@ 0x7e
 8003cf0:	b209      	sxth	r1, r1
 8003cf2:	f7fd f85d 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003cf6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8003cfa:	9908      	ldr	r1, [sp, #32]
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8003d02:	f00f f825 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003d06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f00f f821 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        barAnimationState[i] = NO_ANIMATION;
 8003d0e:	f240 2302 	movw	r3, #514	@ 0x202
    slideMenuElementSelectedHandler(slideMenu);
 8003d12:	4620      	mov	r0, r4
 8003d14:	4659      	mov	r1, fp
        barAnimationState[i] = NO_ANIMATION;
 8003d16:	f8a7 39f0 	strh.w	r3, [r7, #2544]	@ 0x9f0
 8003d1a:	f04f 0302 	mov.w	r3, #2
 8003d1e:	f887 39f2 	strb.w	r3, [r7, #2546]	@ 0x9f2
    slideMenuElementSelectedHandler(slideMenu);
 8003d22:	f7ff fba9 	bl	8003478 <_ZN18CustomControlsView31slideMenuElementSelectedHandlerERK17VerticalSlideMenu>
}
 8003d26:	4620      	mov	r0, r4
 8003d28:	b00f      	add	sp, #60	@ 0x3c
 8003d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop

08003d30 <_ZN18CustomControlsView17getAnimationStateEv>:
    if (currentAnimationState == ANIMATION_THREE_WAY_RUNNING)
 8003d30:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8003d34:	f893 09e4 	ldrb.w	r0, [r3, #2532]	@ 0x9e4
 8003d38:	b958      	cbnz	r0, 8003d52 <_ZN18CustomControlsView17getAnimationStateEv+0x22>
            if (barAnimationState[i] == ANIMATION_THREE_WAY_RUNNING)
 8003d3a:	f893 09f0 	ldrb.w	r0, [r3, #2544]	@ 0x9f0
 8003d3e:	b140      	cbz	r0, 8003d52 <_ZN18CustomControlsView17getAnimationStateEv+0x22>
 8003d40:	f893 09f1 	ldrb.w	r0, [r3, #2545]	@ 0x9f1
 8003d44:	b128      	cbz	r0, 8003d52 <_ZN18CustomControlsView17getAnimationStateEv+0x22>
 8003d46:	f893 09f2 	ldrb.w	r0, [r3, #2546]	@ 0x9f2
 8003d4a:	3800      	subs	r0, #0
 8003d4c:	bf18      	it	ne
 8003d4e:	2001      	movne	r0, #1
 8003d50:	0040      	lsls	r0, r0, #1
}
 8003d52:	4770      	bx	lr

08003d54 <_ZN18CustomControlsView23getRandomEasingEquationEv>:
{
 8003d54:	b508      	push	{r3, lr}
    switch (Utils::randomNumberBetween(0, 6))
 8003d56:	2106      	movs	r1, #6
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7ff fcf9 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 8003d5e:	3801      	subs	r0, #1
 8003d60:	2804      	cmp	r0, #4
 8003d62:	bf97      	itett	ls
 8003d64:	4b02      	ldrls	r3, [pc, #8]	@ (8003d70 <_ZN18CustomControlsView23getRandomEasingEquationEv+0x1c>)
 8003d66:	4803      	ldrhi	r0, [pc, #12]	@ (8003d74 <_ZN18CustomControlsView23getRandomEasingEquationEv+0x20>)
 8003d68:	eb03 0380 	addls.w	r3, r3, r0, lsl #2
 8003d6c:	6d18      	ldrls	r0, [r3, #80]	@ 0x50
}
 8003d6e:	bd08      	pop	{r3, pc}
 8003d70:	08021ad4 	.word	0x08021ad4
 8003d74:	0801b96d 	.word	0x0801b96d

08003d78 <_ZN18CustomControlsView33startThreeWayProgressBarAnimationEv>:
{
 8003d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d7c:	f500 55cf 	add.w	r5, r0, #6624	@ 0x19e0
 8003d80:	f500 57cf 	add.w	r7, r0, #6624	@ 0x19e0
 8003d84:	f500 58cf 	add.w	r8, r0, #6624	@ 0x19e0
    animationCounter = 0;
 8003d88:	f500 5980 	add.w	r9, r0, #4096	@ 0x1000
 8003d8c:	2600      	movs	r6, #0
{
 8003d8e:	4604      	mov	r4, r0
 8003d90:	3510      	adds	r5, #16
 8003d92:	370f      	adds	r7, #15
 8003d94:	f108 081c 	add.w	r8, r8, #28
    animationCounter = 0;
 8003d98:	f8c9 69e8 	str.w	r6, [r9, #2536]	@ 0x9e8
        animationEquation[i] = getRandomEasingEquation();
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f7ff ffd9 	bl	8003d54 <_ZN18CustomControlsView23getRandomEasingEquationEv>
        animationDuration[i] = Utils::randomNumberBetween(100, 200);
 8003da2:	21c8      	movs	r1, #200	@ 0xc8
        animationEquation[i] = getRandomEasingEquation();
 8003da4:	6128      	str	r0, [r5, #16]
        animationDuration[i] = Utils::randomNumberBetween(100, 200);
 8003da6:	2064      	movs	r0, #100	@ 0x64
 8003da8:	f7ff fcd2 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 8003dac:	f845 0f04 	str.w	r0, [r5, #4]!
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8003db0:	4545      	cmp	r5, r8
        barAnimationState[i] = ANIMATION_THREE_WAY_RUNNING;
 8003db2:	f807 6f01 	strb.w	r6, [r7, #1]!
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8003db6:	d1f1      	bne.n	8003d9c <_ZN18CustomControlsView33startThreeWayProgressBarAnimationEv+0x24>
    currentAnimationState = ANIMATION_THREE_WAY_RUNNING;
 8003db8:	f889 69e4 	strb.w	r6, [r9, #2532]	@ 0x9e4
    statusMessage.invalidate();
 8003dbc:	f604 10cc 	addw	r0, r4, #2508	@ 0x9cc
 8003dc0:	f884 69f1 	strb.w	r6, [r4, #2545]	@ 0x9f1
}
 8003dc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    statusMessage.invalidate();
 8003dc8:	f016 badf 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>

08003dcc <_ZN18CustomControlsView28threeWayButtonPressedHandlerERK19ThreeWayProgressBar>:
{
 8003dcc:	b510      	push	{r4, lr}
 8003dce:	4604      	mov	r4, r0
    threeWayProgressBar.setActive(true);
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	f600 2014 	addw	r0, r0, #2580	@ 0xa14
 8003dd6:	f000 ff75 	bl	8004cc4 <_ZN19ThreeWayProgressBar9setActiveEb>
    startThreeWayProgressBarAnimation();
 8003dda:	4620      	mov	r0, r4
}
 8003ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    startThreeWayProgressBarAnimation();
 8003de0:	f7ff bfca 	b.w	8003d78 <_ZN18CustomControlsView33startThreeWayProgressBarAnimationEv>

08003de4 <_ZN18CustomControlsView32stopThreeWayProgressBarAnimationEv>:
{
 8003de4:	b538      	push	{r3, r4, r5, lr}
    threeWayProgressBar.setActive(false);
 8003de6:	2100      	movs	r1, #0
{
 8003de8:	4604      	mov	r4, r0
    threeWayProgressBar.setActive(false);
 8003dea:	f600 2014 	addw	r0, r0, #2580	@ 0xa14
 8003dee:	f000 ff69 	bl	8004cc4 <_ZN19ThreeWayProgressBar9setActiveEb>
 8003df2:	2301      	movs	r3, #1
    statusMessage.setTypedText(TypedText(T_THREE_WAY_PROGRESS_BAR_STATUS));
 8003df4:	f604 15cc 	addw	r5, r4, #2508	@ 0x9cc
 8003df8:	f04f 010d 	mov.w	r1, #13
 8003dfc:	f884 39f1 	strb.w	r3, [r4, #2545]	@ 0x9f1
        this->alpha = alpha;
 8003e00:	23ff      	movs	r3, #255	@ 0xff
 8003e02:	4628      	mov	r0, r5
 8003e04:	f884 39fa 	strb.w	r3, [r4, #2554]	@ 0x9fa
 8003e08:	f013 f912 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        fadeAnimationDelay = delay;
 8003e0c:	2350      	movs	r3, #80	@ 0x50
 8003e0e:	f8a4 3a02 	strh.w	r3, [r4, #2562]	@ 0xa02
        if (!fadeAnimationRunning)
 8003e12:	f894 39fe 	ldrb.w	r3, [r4, #2558]	@ 0x9fe
 8003e16:	b923      	cbnz	r3, 8003e22 <_ZN18CustomControlsView32stopThreeWayProgressBarAnimationEv+0x3e>
            Application::getInstance()->registerTimerWidget(this);
 8003e18:	f015 fecc 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	f015 fecf 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 8003e22:	2300      	movs	r3, #0
        fadeAnimationStartAlpha = T::getAlpha();
 8003e24:	f894 29fa 	ldrb.w	r2, [r4, #2554]	@ 0x9fa
    statusMessage.invalidate();
 8003e28:	4628      	mov	r0, r5
        fadeAnimationCounter = 0;
 8003e2a:	f8a4 3a00 	strh.w	r3, [r4, #2560]	@ 0xa00
        fadeAnimationEndAlpha = endAlpha;
 8003e2e:	f8a4 3a08 	strh.w	r3, [r4, #2568]	@ 0xa08
        fadeAnimationDuration = duration;
 8003e32:	2328      	movs	r3, #40	@ 0x28
        fadeAnimationStartAlpha = T::getAlpha();
 8003e34:	f8a4 2a06 	strh.w	r2, [r4, #2566]	@ 0xa06
        fadeAnimationDuration = duration;
 8003e38:	f8a4 3a04 	strh.w	r3, [r4, #2564]	@ 0xa04
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <_ZN18CustomControlsView32stopThreeWayProgressBarAnimationEv+0x74>)
 8003e3e:	f8c4 3a0c 	str.w	r3, [r4, #2572]	@ 0xa0c
        fadeAnimationRunning = true;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f884 39fe 	strb.w	r3, [r4, #2558]	@ 0x9fe
    currentAnimationState = NO_ANIMATION;
 8003e48:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
    statusMessage.invalidate();
 8003e4c:	f016 fa9d 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    currentAnimationState = NO_ANIMATION;
 8003e50:	2302      	movs	r3, #2
 8003e52:	f884 39e4 	strb.w	r3, [r4, #2532]	@ 0x9e4
}
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	0801b155 	.word	0x0801b155

08003e5c <_ZN18CustomControlsView15handleTickEventEv>:
{
 8003e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tickCounter++;
 8003e60:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
{
 8003e64:	4605      	mov	r5, r0
    tickCounter++;
 8003e66:	f8d6 29ec 	ldr.w	r2, [r6, #2540]	@ 0x9ec
 8003e6a:	3201      	adds	r2, #1
 8003e6c:	f8c6 29ec 	str.w	r2, [r6, #2540]	@ 0x9ec
    if (getAnimationState() == ANIMATION_THREE_WAY_RUNNING)
 8003e70:	f7ff ff5e 	bl	8003d30 <_ZN18CustomControlsView17getAnimationStateEv>
 8003e74:	4604      	mov	r4, r0
 8003e76:	bb68      	cbnz	r0, 8003ed4 <_ZN18CustomControlsView15handleTickEventEv+0x78>
 8003e78:	f505 58cf 	add.w	r8, r5, #6624	@ 0x19e0
                barAnimationState[i] = NO_ANIMATION;
 8003e7c:	f04f 0a02 	mov.w	sl, #2
 8003e80:	f108 0810 	add.w	r8, r8, #16
 8003e84:	46c1      	mov	r9, r8
            if (animationCounter < animationDuration[i])
 8003e86:	f8d6 09e8 	ldr.w	r0, [r6, #2536]	@ 0x9e8
 8003e8a:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8003e8e:	4298      	cmp	r0, r3
 8003e90:	da1d      	bge.n	8003ece <_ZN18CustomControlsView15handleTickEventEv+0x72>
                int percentage = animationEquation[i](animationCounter, 0, 103, animationDuration[i]);
 8003e92:	2267      	movs	r2, #103	@ 0x67
 8003e94:	2100      	movs	r1, #0
 8003e96:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	b280      	uxth	r0, r0
 8003e9e:	47b8      	blx	r7
                threeWayProgressBar.setBarPercentage(i, percentage);
 8003ea0:	4621      	mov	r1, r4
                int percentage = animationEquation[i](animationCounter, 0, 103, animationDuration[i]);
 8003ea2:	4602      	mov	r2, r0
                threeWayProgressBar.setBarPercentage(i, percentage);
 8003ea4:	f605 2014 	addw	r0, r5, #2580	@ 0xa14
 8003ea8:	f000 fec8 	bl	8004c3c <_ZN19ThreeWayProgressBar16setBarPercentageEii>
            if (getAnimationState() != ANIMATION_THREE_WAY_RUNNING)
 8003eac:	4628      	mov	r0, r5
 8003eae:	f7ff ff3f 	bl	8003d30 <_ZN18CustomControlsView17getAnimationStateEv>
 8003eb2:	b110      	cbz	r0, 8003eba <_ZN18CustomControlsView15handleTickEventEv+0x5e>
                stopThreeWayProgressBarAnimation();
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f7ff ff95 	bl	8003de4 <_ZN18CustomControlsView32stopThreeWayProgressBarAnimationEv>
        for (int i = 0; i < NUMBER_OF_BARS; i++)
 8003eba:	3401      	adds	r4, #1
 8003ebc:	2c03      	cmp	r4, #3
 8003ebe:	d1e2      	bne.n	8003e86 <_ZN18CustomControlsView15handleTickEventEv+0x2a>
        animationCounter++;
 8003ec0:	f8d6 39e8 	ldr.w	r3, [r6, #2536]	@ 0x9e8
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	f8c6 39e8 	str.w	r3, [r6, #2536]	@ 0x9e8
}
 8003eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                barAnimationState[i] = NO_ANIMATION;
 8003ece:	f808 a004 	strb.w	sl, [r8, r4]
 8003ed2:	e7eb      	b.n	8003eac <_ZN18CustomControlsView15handleTickEventEv+0x50>
    else if (getAnimationState() == ANIMATION_GAUGE)
 8003ed4:	2801      	cmp	r0, #1
 8003ed6:	d1f8      	bne.n	8003eca <_ZN18CustomControlsView15handleTickEventEv+0x6e>
        if (tickCounter % 60 == 0)
 8003ed8:	233c      	movs	r3, #60	@ 0x3c
 8003eda:	fb92 f1f3 	sdiv	r1, r2, r3
 8003ede:	fb03 2611 	mls	r6, r3, r1, r2
 8003ee2:	2e00      	cmp	r6, #0
 8003ee4:	d1f1      	bne.n	8003eca <_ZN18CustomControlsView15handleTickEventEv+0x6e>
            if (gauge.getValue() > 50)
 8003ee6:	f505 54c0 	add.w	r4, r5, #6144	@ 0x1800
 8003eea:	4620      	mov	r0, r4
 8003eec:	f000 fc20 	bl	8004730 <_ZN5Gauge8getValueEv>
 8003ef0:	2832      	cmp	r0, #50	@ 0x32
 8003ef2:	dd0d      	ble.n	8003f10 <_ZN18CustomControlsView15handleTickEventEv+0xb4>
                gauge.setEasingEquation(EasingEquations::backEaseOut);
 8003ef4:	4915      	ldr	r1, [pc, #84]	@ (8003f4c <_ZN18CustomControlsView15handleTickEventEv+0xf0>)
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	f000 fc20 	bl	800473c <_ZN5Gauge17setEasingEquationEPFstsstE>
                gauge.setAnimationDuration(20);
 8003efc:	2114      	movs	r1, #20
 8003efe:	4620      	mov	r0, r4
 8003f00:	f000 fc19 	bl	8004736 <_ZN5Gauge20setAnimationDurationEt>
                gauge.setValue(0);
 8003f04:	4631      	mov	r1, r6
                gauge.setValue(newValue);
 8003f06:	4620      	mov	r0, r4
}
 8003f08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                gauge.setValue(newValue);
 8003f0c:	f000 bbf4 	b.w	80046f8 <_ZN5Gauge8setValueEi>
                int value = gauge.getValue();
 8003f10:	4620      	mov	r0, r4
 8003f12:	f000 fc0d 	bl	8004730 <_ZN5Gauge8getValueEv>
 8003f16:	4606      	mov	r6, r0
                int newValue = value + Utils::randomNumberBetween(-6, 18);
 8003f18:	2112      	movs	r1, #18
 8003f1a:	f06f 0005 	mvn.w	r0, #5
 8003f1e:	f7ff fc17 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 8003f22:	1987      	adds	r7, r0, r6
 8003f24:	4605      	mov	r5, r0
                if (newValue < value)
 8003f26:	42be      	cmp	r6, r7
 8003f28:	dd0a      	ble.n	8003f40 <_ZN18CustomControlsView15handleTickEventEv+0xe4>
                    gauge.setEasingEquation(EasingEquations::backEaseOut);
 8003f2a:	4908      	ldr	r1, [pc, #32]	@ (8003f4c <_ZN18CustomControlsView15handleTickEventEv+0xf0>)
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f000 fc05 	bl	800473c <_ZN5Gauge17setEasingEquationEPFstsstE>
                    gauge.setAnimationDuration((newValue - value) * 2);
 8003f32:	0069      	lsls	r1, r5, #1
 8003f34:	b289      	uxth	r1, r1
                    gauge.setAnimationDuration(newValue - value);
 8003f36:	4620      	mov	r0, r4
 8003f38:	f000 fbfd 	bl	8004736 <_ZN5Gauge20setAnimationDurationEt>
                gauge.setValue(newValue);
 8003f3c:	4639      	mov	r1, r7
 8003f3e:	e7e2      	b.n	8003f06 <_ZN18CustomControlsView15handleTickEventEv+0xaa>
                    gauge.setEasingEquation(EasingEquations::quadEaseOut);
 8003f40:	4903      	ldr	r1, [pc, #12]	@ (8003f50 <_ZN18CustomControlsView15handleTickEventEv+0xf4>)
 8003f42:	4620      	mov	r0, r4
 8003f44:	f000 fbfa 	bl	800473c <_ZN5Gauge17setEasingEquationEPFstsstE>
                    gauge.setAnimationDuration(newValue - value);
 8003f48:	b2a9      	uxth	r1, r5
 8003f4a:	e7f4      	b.n	8003f36 <_ZN18CustomControlsView15handleTickEventEv+0xda>
 8003f4c:	0801ad71 	.word	0x0801ad71
 8003f50:	0801b62f 	.word	0x0801b62f

08003f54 <_ZN18CustomControlsViewD1Ev>:
CustomControlsView::~CustomControlsView()
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <_ZN18CustomControlsViewD1Ev+0x40>)
 8003f56:	f103 0208 	add.w	r2, r3, #8
 8003f5a:	3344      	adds	r3, #68	@ 0x44
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	4604      	mov	r4, r0
 8003f60:	6002      	str	r2, [r0, #0]
 8003f62:	6403      	str	r3, [r0, #64]	@ 0x40
}
 8003f64:	f500 50c0 	add.w	r0, r0, #6144	@ 0x1800
 8003f68:	f000 fada 	bl	8004520 <_ZN5GaugeD1Ev>
 8003f6c:	f504 5081 	add.w	r0, r4, #4128	@ 0x1020
 8003f70:	3018      	adds	r0, #24
 8003f72:	f000 fa47 	bl	8004404 <_ZN10DatePickerD1Ev>
 8003f76:	f504 606a 	add.w	r0, r4, #3744	@ 0xea0
 8003f7a:	f7fe fe23 	bl	8002bc4 <_ZN16CircularProgressD1Ev>
 8003f7e:	f604 2014 	addw	r0, r4, #2580	@ 0xa14
 8003f82:	f000 fde3 	bl	8004b4c <_ZN19ThreeWayProgressBarD1Ev>
 8003f86:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8003f8a:	f001 f9df 	bl	800534c <_ZN17VerticalSlideMenuD1Ev>
 8003f8e:	4620      	mov	r0, r4
 8003f90:	bd10      	pop	{r4, pc}
 8003f92:	bf00      	nop
 8003f94:	08021ad4 	.word	0x08021ad4

08003f98 <_ZThn64_N18CustomControlsViewD1Ev>:

class CustomControlsView : public DemoView<CustomControlsPresenter>
{
public:
    CustomControlsView();
    virtual ~CustomControlsView();
 8003f98:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 8003f9c:	f7ff bfda 	b.w	8003f54 <_ZN18CustomControlsViewD1Ev>

08003fa0 <_ZN18CustomControlsViewD0Ev>:
CustomControlsView::~CustomControlsView()
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4604      	mov	r4, r0
}
 8003fa4:	f7ff ffd6 	bl	8003f54 <_ZN18CustomControlsViewD1Ev>
 8003fa8:	f641 210c 	movw	r1, #6668	@ 0x1a0c
 8003fac:	4620      	mov	r0, r4
 8003fae:	f01a fdba 	bl	801eb26 <_ZdlPvj>
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	bd10      	pop	{r4, pc}

08003fb6 <_ZThn64_N18CustomControlsViewD0Ev>:
 8003fb6:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 8003fba:	f7ff bff1 	b.w	8003fa0 <_ZN18CustomControlsViewD0Ev>

08003fbe <_ZN8touchgfx8CallbackI10DatePickerRK13WheelSelectorRKivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8003fbe:	4770      	bx	lr

08003fc0 <_ZN8touchgfx8CallbackI10DatePickerRK13WheelSelectorRKivE7executeES4_S6_>:
    virtual void execute(T1 t1, T2 t2)
 8003fc0:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 8003fc2:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 8003fc4:	4603      	mov	r3, r0
        (pobject->*pmemfun_2)(t1, t2);
 8003fc6:	68c4      	ldr	r4, [r0, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	1066      	asrs	r6, r4, #1
 8003fcc:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8003fd0:	07e4      	lsls	r4, r4, #31
 8003fd2:	bf44      	itt	mi
 8003fd4:	59ac      	ldrmi	r4, [r5, r6]
 8003fd6:	58e3      	ldrmi	r3, [r4, r3]
    }
 8003fd8:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 8003fda:	4718      	bx	r3

08003fdc <_ZNK8touchgfx8CallbackI10DatePickerRK13WheelSelectorRKivE7isValidEv>:
    virtual bool isValid() const
 8003fdc:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_2 != 0);
 8003fde:	6840      	ldr	r0, [r0, #4]
 8003fe0:	b130      	cbz	r0, 8003ff0 <_ZNK8touchgfx8CallbackI10DatePickerRK13WheelSelectorRKivE7isValidEv+0x14>
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	b91a      	cbnz	r2, 8003fee <_ZNK8touchgfx8CallbackI10DatePickerRK13WheelSelectorRKivE7isValidEv+0x12>
 8003fe6:	68d8      	ldr	r0, [r3, #12]
 8003fe8:	f000 0001 	and.w	r0, r0, #1
 8003fec:	4770      	bx	lr
 8003fee:	2001      	movs	r0, #1
    }
 8003ff0:	4770      	bx	lr

08003ff2 <_ZN8touchgfx8CallbackI10DatePickerRK13WheelSelectorRKivED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	f01a fd95 	bl	801eb26 <_ZdlPvj>
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	bd10      	pop	{r4, pc}

08004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
        this->x = x;
 8004000:	2300      	movs	r3, #0
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8004002:	b510      	push	{r4, lr}
        this->width = width;
 8004004:	e9c0 3301 	strd	r3, r3, [r0, #4]
        this->width = 0;
 8004008:	e9c0 3303 	strd	r3, r3, [r0, #12]
        nextSibling(0),
 800400c:	e9c0 3305 	strd	r3, r3, [r0, #20]
        nextDrawChainElement(0),
 8004010:	61c3      	str	r3, [r0, #28]
 8004012:	4604      	mov	r4, r0
 8004014:	4b05      	ldr	r3, [pc, #20]	@ (800402c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x2c>)
 8004016:	6003      	str	r3, [r0, #0]
        touchable(false),
 8004018:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 800401a:	6243      	str	r3, [r0, #36]	@ 0x24
 800401c:	23ff      	movs	r3, #255	@ 0xff
 800401e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
        setBitmap(bmp);
 8004022:	f013 f994 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004026:	4620      	mov	r0, r4
 8004028:	bd10      	pop	{r4, pc}
 800402a:	bf00      	nop
 800402c:	08025fb8 	.word	0x08025fb8
 8004030:	ffff0100 	.word	0xffff0100

08004034 <_ZN10DatePicker6setdayEiiPFstsstE>:

}

void DatePicker::setday(int index, int duration, EasingEquation equation)
{
    days.setSelectedIndex(index, duration, equation);
 8004034:	30dc      	adds	r0, #220	@ 0xdc
 8004036:	f001 bd2d 	b.w	8005a94 <_ZN13WheelSelector16setSelectedIndexEiiPFstsstE>

0800403a <_ZN10DatePicker8setMonthEiiPFstsstE>:
}

void DatePicker::setMonth(int index, int duration, EasingEquation equation)
{
    months.setSelectedIndex(index, duration, equation);
 800403a:	f500 6097 	add.w	r0, r0, #1208	@ 0x4b8
 800403e:	f001 bd29 	b.w	8005a94 <_ZN13WheelSelector16setSelectedIndexEiiPFstsstE>

08004042 <_ZN10DatePicker7setYearEiiPFstsstE>:
}

void DatePicker::setYear(int index, int duration, EasingEquation equation)
{
    years.setSelectedIndex(index, duration, equation);
 8004042:	f500 60c7 	add.w	r0, r0, #1592	@ 0x638
 8004046:	f001 bd25 	b.w	8005a94 <_ZN13WheelSelector16setSelectedIndexEiiPFstsstE>

0800404a <_ZN10DatePicker5resetEv>:
}

void DatePicker::reset()
{
 800404a:	b510      	push	{r4, lr}
 800404c:	4604      	mov	r4, r0
    days.reset();
 800404e:	30dc      	adds	r0, #220	@ 0xdc
 8004050:	f001 fd88 	bl	8005b64 <_ZN13WheelSelector5resetEv>
    months.reset();
 8004054:	f504 6097 	add.w	r0, r4, #1208	@ 0x4b8
 8004058:	f001 fd84 	bl	8005b64 <_ZN13WheelSelector5resetEv>
    years.reset();
 800405c:	f504 60c7 	add.w	r0, r4, #1592	@ 0x638
}
 8004060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    years.reset();
 8004064:	f001 bd7e 	b.w	8005b64 <_ZN13WheelSelector5resetEv>

08004068 <_ZN10DatePicker15getNumberOfDaysEtt>:
}

uint16_t DatePicker::getNumberOfDays(uint16_t month, uint16_t year)
{
    uint16_t result = 0;
    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
 8004068:	290c      	cmp	r1, #12
 800406a:	d81f      	bhi.n	80040ac <_ZN10DatePicker15getNumberOfDaysEtt+0x44>
 800406c:	2001      	movs	r0, #1
 800406e:	f241 53aa 	movw	r3, #5546	@ 0x15aa
 8004072:	4088      	lsls	r0, r1
 8004074:	4218      	tst	r0, r3
 8004076:	d11b      	bne.n	80040b0 <_ZN10DatePicker15getNumberOfDaysEtt+0x48>
 8004078:	f410 6025 	ands.w	r0, r0, #2640	@ 0xa50
 800407c:	d11a      	bne.n	80040b4 <_ZN10DatePicker15getNumberOfDaysEtt+0x4c>
 800407e:	2902      	cmp	r1, #2
 8004080:	d11d      	bne.n	80040be <_ZN10DatePicker15getNumberOfDaysEtt+0x56>
        result = 30;
    }
    else if (month == 2)
    {
        result = 28;
        if (year % 400 == 0)
 8004082:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004086:	fbb2 f3f1 	udiv	r3, r2, r1
 800408a:	fb01 2313 	mls	r3, r1, r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	b193      	cbz	r3, 80040b8 <_ZN10DatePicker15getNumberOfDaysEtt+0x50>
        {
            result++;
        }
        else if (year % 100 == 0)
 8004092:	2164      	movs	r1, #100	@ 0x64
 8004094:	fbb2 f3f1 	udiv	r3, r2, r1
 8004098:	fb01 2313 	mls	r3, r1, r3, r2
 800409c:	b29b      	uxth	r3, r3
 800409e:	b16b      	cbz	r3, 80040bc <_ZN10DatePicker15getNumberOfDaysEtt+0x54>
            result++;
 80040a0:	f012 0f03 	tst.w	r2, #3
 80040a4:	bf14      	ite	ne
 80040a6:	201c      	movne	r0, #28
 80040a8:	201d      	moveq	r0, #29
 80040aa:	4770      	bx	lr
 80040ac:	2000      	movs	r0, #0
 80040ae:	4770      	bx	lr
{
 80040b0:	201f      	movs	r0, #31
 80040b2:	4770      	bx	lr
 80040b4:	201e      	movs	r0, #30
 80040b6:	4770      	bx	lr
            result++;
 80040b8:	201d      	movs	r0, #29
 80040ba:	4770      	bx	lr
        result = 28;
 80040bc:	201c      	movs	r0, #28
        {
            result++;
        }
    }
    return result;
}
 80040be:	4770      	bx	lr

080040c0 <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi>:
{
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	4604      	mov	r4, r0
    int numberOfDaysInMonth = getNumberOfDays(months.getSelectedIndex() + 1, START_YEAR + years.getSelectedIndex());
 80040c4:	f500 6097 	add.w	r0, r0, #1208	@ 0x4b8
 80040c8:	f001 fc9e 	bl	8005a08 <_ZN13WheelSelector16getSelectedIndexEv>
 80040cc:	4605      	mov	r5, r0
 80040ce:	f504 60c7 	add.w	r0, r4, #1592	@ 0x638
 80040d2:	f001 fc99 	bl	8005a08 <_ZN13WheelSelector16getSelectedIndexEv>
 80040d6:	1c69      	adds	r1, r5, #1
 80040d8:	f200 72dc 	addw	r2, r0, #2012	@ 0x7dc
 80040dc:	4620      	mov	r0, r4
 80040de:	b289      	uxth	r1, r1
        days.fadeExtraText(0, 0, 16);
 80040e0:	34dc      	adds	r4, #220	@ 0xdc
    int numberOfDaysInMonth = getNumberOfDays(months.getSelectedIndex() + 1, START_YEAR + years.getSelectedIndex());
 80040e2:	b292      	uxth	r2, r2
 80040e4:	f7ff ffc0 	bl	8004068 <_ZN10DatePicker15getNumberOfDaysEtt>
    if (numberOfDaysInMonth == 28)
 80040e8:	281c      	cmp	r0, #28
        days.fadeExtraText(0, 0, 16);
 80040ea:	f04f 0310 	mov.w	r3, #16
    if (numberOfDaysInMonth == 28)
 80040ee:	d11d      	bne.n	800412c <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0x6c>
        days.fadeExtraText(0, 0, 16);
 80040f0:	2200      	movs	r2, #0
 80040f2:	4620      	mov	r0, r4
 80040f4:	4611      	mov	r1, r2
 80040f6:	f002 f9c5 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        days.fadeExtraText(1, 0, 16);
 80040fa:	2310      	movs	r3, #16
 80040fc:	2200      	movs	r2, #0
 80040fe:	2101      	movs	r1, #1
 8004100:	4620      	mov	r0, r4
 8004102:	f002 f9bf 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        days.fadeExtraText(2, 0, 16);
 8004106:	2310      	movs	r3, #16
 8004108:	2200      	movs	r2, #0
 800410a:	2102      	movs	r1, #2
 800410c:	4620      	mov	r0, r4
 800410e:	f002 f9b9 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        if (days.getSelectedIndex() > 27)
 8004112:	4620      	mov	r0, r4
 8004114:	f001 fc78 	bl	8005a08 <_ZN13WheelSelector16getSelectedIndexEv>
 8004118:	281b      	cmp	r0, #27
 800411a:	dd4f      	ble.n	80041bc <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0xfc>
            days.setSelectedIndex(27, 20);
 800411c:	4b28      	ldr	r3, [pc, #160]	@ (80041c0 <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0x100>)
 800411e:	2214      	movs	r2, #20
 8004120:	211b      	movs	r1, #27
            days.setSelectedIndex(28, 20);
 8004122:	4620      	mov	r0, r4
}
 8004124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            days.setSelectedIndex(28, 20);
 8004128:	f001 bcb4 	b.w	8005a94 <_ZN13WheelSelector16setSelectedIndexEiiPFstsstE>
    else if (numberOfDaysInMonth == 29)
 800412c:	281d      	cmp	r0, #29
        days.fadeExtraText(0, 255, 16);
 800412e:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8004132:	f04f 0100 	mov.w	r1, #0
    else if (numberOfDaysInMonth == 29)
 8004136:	d117      	bne.n	8004168 <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0xa8>
        days.fadeExtraText(0, 255, 16);
 8004138:	4620      	mov	r0, r4
 800413a:	f002 f9a3 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        days.fadeExtraText(1, 0, 16);
 800413e:	2310      	movs	r3, #16
 8004140:	2200      	movs	r2, #0
 8004142:	2101      	movs	r1, #1
 8004144:	4620      	mov	r0, r4
 8004146:	f002 f99d 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        days.fadeExtraText(2, 0, 16);
 800414a:	2310      	movs	r3, #16
 800414c:	2200      	movs	r2, #0
 800414e:	2102      	movs	r1, #2
 8004150:	4620      	mov	r0, r4
 8004152:	f002 f997 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        if (days.getSelectedIndex() > 28)
 8004156:	4620      	mov	r0, r4
 8004158:	f001 fc56 	bl	8005a08 <_ZN13WheelSelector16getSelectedIndexEv>
 800415c:	281c      	cmp	r0, #28
 800415e:	dd2d      	ble.n	80041bc <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0xfc>
            days.setSelectedIndex(28, 20);
 8004160:	4b17      	ldr	r3, [pc, #92]	@ (80041c0 <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0x100>)
 8004162:	2214      	movs	r2, #20
 8004164:	211c      	movs	r1, #28
 8004166:	e7dc      	b.n	8004122 <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0x62>
    else if (numberOfDaysInMonth == 30)
 8004168:	281e      	cmp	r0, #30
        days.fadeExtraText(0, 255, 16);
 800416a:	4620      	mov	r0, r4
    else if (numberOfDaysInMonth == 30)
 800416c:	d116      	bne.n	800419c <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0xdc>
        days.fadeExtraText(0, 255, 16);
 800416e:	f002 f989 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        days.fadeExtraText(1, 255, 16);
 8004172:	2310      	movs	r3, #16
 8004174:	22ff      	movs	r2, #255	@ 0xff
 8004176:	2101      	movs	r1, #1
 8004178:	4620      	mov	r0, r4
 800417a:	f002 f983 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        days.fadeExtraText(2, 0, 16);
 800417e:	2310      	movs	r3, #16
 8004180:	2200      	movs	r2, #0
 8004182:	2102      	movs	r1, #2
 8004184:	4620      	mov	r0, r4
 8004186:	f002 f97d 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        if (days.getSelectedIndex() > 29)
 800418a:	4620      	mov	r0, r4
 800418c:	f001 fc3c 	bl	8005a08 <_ZN13WheelSelector16getSelectedIndexEv>
 8004190:	281d      	cmp	r0, #29
 8004192:	dd13      	ble.n	80041bc <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0xfc>
            days.setSelectedIndex(29, 20);
 8004194:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0x100>)
 8004196:	2214      	movs	r2, #20
 8004198:	211d      	movs	r1, #29
 800419a:	e7c2      	b.n	8004122 <_ZN10DatePicker29selectedElementChangedHandlerERK13WheelSelectorRKi+0x62>
        days.fadeExtraText(0, 255, 16);
 800419c:	f002 f972 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        days.fadeExtraText(1, 255, 16);
 80041a0:	4620      	mov	r0, r4
 80041a2:	2310      	movs	r3, #16
 80041a4:	22ff      	movs	r2, #255	@ 0xff
 80041a6:	2101      	movs	r1, #1
 80041a8:	f002 f96c 	bl	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
        days.fadeExtraText(2, 255, 16);
 80041ac:	4620      	mov	r0, r4
 80041ae:	2310      	movs	r3, #16
 80041b0:	22ff      	movs	r2, #255	@ 0xff
 80041b2:	2102      	movs	r1, #2
}
 80041b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        days.fadeExtraText(2, 255, 16);
 80041b8:	f002 b964 	b.w	8006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>
}
 80041bc:	bd70      	pop	{r4, r5, r6, pc}
 80041be:	bf00      	nop
 80041c0:	0801add5 	.word	0x0801add5

080041c4 <_ZN10DatePickerC1Ev>:
DatePicker::DatePicker() :
 80041c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c8:	4604      	mov	r4, r0
 80041ca:	b08d      	sub	sp, #52	@ 0x34
        this->x = x;
 80041cc:	f04f 0900 	mov.w	r9, #0
    onSelectedElementChanged(this, &DatePicker::selectedElementChangedHandler)
 80041d0:	4a89      	ldr	r2, [pc, #548]	@ (80043f8 <_ZN10DatePickerC1Ev+0x234>)
 80041d2:	4680      	mov	r8, r0
 80041d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041d8:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80041dc:	f104 0b58 	add.w	fp, r4, #88	@ 0x58
 80041e0:	8483      	strh	r3, [r0, #36]	@ 0x24
 80041e2:	f104 0a84 	add.w	sl, r4, #132	@ 0x84
        nextDrawChainElement(0),
 80041e6:	f8c0 901c 	str.w	r9, [r0, #28]
 80041ea:	a90b      	add	r1, sp, #44	@ 0x2c
 80041ec:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
 80041f0:	f104 07dc 	add.w	r7, r4, #220	@ 0xdc
 80041f4:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 80041f8:	f504 6697 	add.w	r6, r4, #1208	@ 0x4b8
        this->width = width;
 80041fc:	e9c0 9901 	strd	r9, r9, [r0, #4]
        this->width = 0;
 8004200:	e9c0 9903 	strd	r9, r9, [r0, #12]
        nextSibling(0),
 8004204:	e9c0 9905 	strd	r9, r9, [r0, #20]
 8004208:	f848 2b2c 	str.w	r2, [r8], #44
 800420c:	4640      	mov	r0, r8
 800420e:	f7ff fef7 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004212:	a90b      	add	r1, sp, #44	@ 0x2c
 8004214:	4658      	mov	r0, fp
 8004216:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 800421a:	f7ff fef1 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800421e:	a90b      	add	r1, sp, #44	@ 0x2c
 8004220:	4650      	mov	r0, sl
 8004222:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 8004226:	f7ff feeb 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800422a:	f104 03b0 	add.w	r3, r4, #176	@ 0xb0
 800422e:	a90b      	add	r1, sp, #44	@ 0x2c
 8004230:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 8004234:	4618      	mov	r0, r3
 8004236:	9307      	str	r3, [sp, #28]
 8004238:	f504 65c7 	add.w	r5, r4, #1592	@ 0x638
 800423c:	f7ff fee0 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004240:	4638      	mov	r0, r7
 8004242:	f001 ff29 	bl	8006098 <_ZN18WheelSelectorExtraC1Ev>
 8004246:	4630      	mov	r0, r6
 8004248:	f001 fd42 	bl	8005cd0 <_ZN13WheelSelectorC1Ev>
 800424c:	4628      	mov	r0, r5
 800424e:	f001 fd3f 	bl	8005cd0 <_ZN13WheelSelectorC1Ev>
    {
 8004252:	4a6a      	ldr	r2, [pc, #424]	@ (80043fc <_ZN10DatePickerC1Ev+0x238>)
    background.setBitmap(Bitmap(BITMAP_DATEPICKER_MAIN_BACKGROUND_ID));
 8004254:	a90b      	add	r1, sp, #44	@ 0x2c
 8004256:	4640      	mov	r0, r8
 8004258:	f8c4 27b8 	str.w	r2, [r4, #1976]	@ 0x7b8
        this->pmemfun_2 = pmemfun_2;
 800425c:	4a68      	ldr	r2, [pc, #416]	@ (8004400 <_ZN10DatePickerC1Ev+0x23c>)
 800425e:	f8c4 97c4 	str.w	r9, [r4, #1988]	@ 0x7c4
 8004262:	f8c4 27c0 	str.w	r2, [r4, #1984]	@ 0x7c0
 8004266:	2221      	movs	r2, #33	@ 0x21
        this->pobject = pobject;
 8004268:	f8c4 47bc 	str.w	r4, [r4, #1980]	@ 0x7bc
 800426c:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8004270:	f013 f86d 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setXY(0, 0);
 8004274:	464a      	mov	r2, r9
 8004276:	4649      	mov	r1, r9
 8004278:	4640      	mov	r0, r8
 800427a:	f7fc fdb1 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(background);
 800427e:	4641      	mov	r1, r8
 8004280:	4620      	mov	r0, r4
 8004282:	f00e fd65 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    colortype normalTextColor = Color::getColorFrom24BitRGB(0x31, 0x31, 0x31);
 8004286:	2231      	movs	r2, #49	@ 0x31
 8004288:	4611      	mov	r1, r2
 800428a:	4610      	mov	r0, r2
 800428c:	f018 fa1c 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    colortype selectedTextColor = Color::getColorFrom24BitRGB(0x00, 0x8A, 0xFF);
 8004290:	22ff      	movs	r2, #255	@ 0xff
    colortype normalTextColor = Color::getColorFrom24BitRGB(0x31, 0x31, 0x31);
 8004292:	4680      	mov	r8, r0
    colortype selectedTextColor = Color::getColorFrom24BitRGB(0x00, 0x8A, 0xFF);
 8004294:	218a      	movs	r1, #138	@ 0x8a
 8004296:	4648      	mov	r0, r9
    days.setTextColor(normalTextColor, selectedTextColor, selectedBackgroundColor, 65, 32);
 8004298:	f04f 0920 	mov.w	r9, #32
    colortype selectedTextColor = Color::getColorFrom24BitRGB(0x00, 0x8A, 0xFF);
 800429c:	f018 fa14 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    colortype selectedBackgroundColor = Color::getColorFrom24BitRGB(0xF5, 0xF5, 0xF5);
 80042a0:	22f5      	movs	r2, #245	@ 0xf5
    colortype selectedTextColor = Color::getColorFrom24BitRGB(0x00, 0x8A, 0xFF);
 80042a2:	9008      	str	r0, [sp, #32]
    colortype selectedBackgroundColor = Color::getColorFrom24BitRGB(0xF5, 0xF5, 0xF5);
 80042a4:	4611      	mov	r1, r2
 80042a6:	4610      	mov	r0, r2
 80042a8:	f018 fa0e 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    days.setXY(13, 11);
 80042ac:	220b      	movs	r2, #11
    colortype selectedBackgroundColor = Color::getColorFrom24BitRGB(0xF5, 0xF5, 0xF5);
 80042ae:	9009      	str	r0, [sp, #36]	@ 0x24
    days.setXY(13, 11);
 80042b0:	210d      	movs	r1, #13
 80042b2:	4638      	mov	r0, r7
 80042b4:	f7fc fd94 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    days.setupDatePickerWheelDay(49, 156, 10, 72, T_DATEPICKER_DAY_28, T_DATEPICKER_DAY_29, T_DATEPICKER_DAY_30, T_DATEPICKER_DAY_31);
 80042b8:	2314      	movs	r3, #20
 80042ba:	2215      	movs	r2, #21
 80042bc:	2113      	movs	r1, #19
 80042be:	4638      	mov	r0, r7
 80042c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80042c4:	2312      	movs	r3, #18
 80042c6:	229c      	movs	r2, #156	@ 0x9c
 80042c8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80042cc:	2348      	movs	r3, #72	@ 0x48
 80042ce:	2131      	movs	r1, #49	@ 0x31
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	230a      	movs	r3, #10
 80042d4:	f001 ff55 	bl	8006182 <_ZN18WheelSelectorExtra23setupDatePickerWheelDayEiiii5TEXTSS0_S0_S0_>
    days.setTextColor(normalTextColor, selectedTextColor, selectedBackgroundColor, 65, 32);
 80042d8:	2341      	movs	r3, #65	@ 0x41
 80042da:	4641      	mov	r1, r8
 80042dc:	4638      	mov	r0, r7
 80042de:	e9cd 3900 	strd	r3, r9, [sp]
 80042e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042e6:	f001 fe44 	bl	8005f72 <_ZN18WheelSelectorExtra12setTextColorEN8touchgfx9colortypeES1_S1_ii>
    add(days);
 80042ea:	4639      	mov	r1, r7
 80042ec:	4620      	mov	r0, r4
    months.setElementSelectedCallback(onSelectedElementChanged);
 80042ee:	f504 67f7 	add.w	r7, r4, #1976	@ 0x7b8
    add(days);
 80042f2:	f00e fd2d 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    months.setXY(70, 11);
 80042f6:	4630      	mov	r0, r6
 80042f8:	220b      	movs	r2, #11
 80042fa:	2146      	movs	r1, #70	@ 0x46
 80042fc:	f7fc fd70 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    months.setup(129, 156, 10, 72, T_DATEPICKER_MONTHS);
 8004300:	2348      	movs	r3, #72	@ 0x48
 8004302:	2010      	movs	r0, #16
 8004304:	229c      	movs	r2, #156	@ 0x9c
 8004306:	2181      	movs	r1, #129	@ 0x81
 8004308:	e9cd 3000 	strd	r3, r0, [sp]
 800430c:	4630      	mov	r0, r6
 800430e:	230a      	movs	r3, #10
 8004310:	f001 fc2e 	bl	8005b70 <_ZN13WheelSelector5setupEiiii5TEXTS>
    months.setTextColor(normalTextColor, selectedTextColor, selectedBackgroundColor, 65, 32);
 8004314:	2341      	movs	r3, #65	@ 0x41
 8004316:	4641      	mov	r1, r8
 8004318:	4630      	mov	r0, r6
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004320:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004324:	f001 fb24 	bl	8005970 <_ZN13WheelSelector12setTextColorEN8touchgfx9colortypeES1_S1_ii>
    add(months);
 8004328:	4631      	mov	r1, r6
 800432a:	4620      	mov	r0, r4
     */
    void reset();

    void setElementSelectedCallback(touchgfx::GenericCallback<const WheelSelector&, const int&>& callback)
    {
        elementSelectedAction = &callback;
 800432c:	f8c4 7624 	str.w	r7, [r4, #1572]	@ 0x624
 8004330:	f00e fd0e 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    years.setXY(207, 11);
 8004334:	4628      	mov	r0, r5
 8004336:	220b      	movs	r2, #11
 8004338:	21cf      	movs	r1, #207	@ 0xcf
 800433a:	f7fc fd51 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    years.setup(79, 156, 10, 72, T_DATEPICKER_YEARS);
 800433e:	2611      	movs	r6, #17
 8004340:	2348      	movs	r3, #72	@ 0x48
 8004342:	4628      	mov	r0, r5
 8004344:	229c      	movs	r2, #156	@ 0x9c
 8004346:	214f      	movs	r1, #79	@ 0x4f
 8004348:	e9cd 3600 	strd	r3, r6, [sp]
 800434c:	230a      	movs	r3, #10
 800434e:	f001 fc0f 	bl	8005b70 <_ZN13WheelSelector5setupEiiii5TEXTS>
    years.setTextColor(normalTextColor, selectedTextColor, selectedBackgroundColor, 65, 32);
 8004352:	2341      	movs	r3, #65	@ 0x41
 8004354:	4641      	mov	r1, r8
 8004356:	4628      	mov	r0, r5
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	f8cd 9004 	str.w	r9, [sp, #4]
 800435e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004362:	f001 fb05 	bl	8005970 <_ZN13WheelSelector12setTextColorEN8touchgfx9colortypeES1_S1_ii>
    add(years);
 8004366:	4629      	mov	r1, r5
 8004368:	4620      	mov	r0, r4
 800436a:	f8c4 77a4 	str.w	r7, [r4, #1956]	@ 0x7a4
 800436e:	f00e fcef 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004372:	2322      	movs	r3, #34	@ 0x22
    shadowTop.setBitmap(Bitmap(BITMAP_DATEPICKER_TOP_SHADOW_OVERLAY_ID));
 8004374:	a90b      	add	r1, sp, #44	@ 0x2c
 8004376:	4658      	mov	r0, fp
 8004378:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800437c:	f012 ffe7 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    shadowTop.setXY(9, 11);
 8004380:	220b      	movs	r2, #11
 8004382:	4658      	mov	r0, fp
 8004384:	2109      	movs	r1, #9
 8004386:	f7fc fd2b 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(shadowTop);
 800438a:	4659      	mov	r1, fp
 800438c:	4620      	mov	r0, r4
 800438e:	f00e fcdf 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004392:	231f      	movs	r3, #31
    shadowBottom.setBitmap(Bitmap(BITMAP_DATEPICKER_BOTTOM_SHADOW_OVERLAY_ID));
 8004394:	a90b      	add	r1, sp, #44	@ 0x2c
 8004396:	4650      	mov	r0, sl
 8004398:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800439c:	f012 ffd7 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    shadowBottom.setXY(9, background.getHeight() - shadowBottom.getHeight() - 11);
 80043a0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80043a2:	4650      	mov	r0, sl
 80043a4:	f8b4 308e 	ldrh.w	r3, [r4, #142]	@ 0x8e
 80043a8:	2109      	movs	r1, #9
 80043aa:	3a0b      	subs	r2, #11
 80043ac:	1ad2      	subs	r2, r2, r3
 80043ae:	b212      	sxth	r2, r2
 80043b0:	f7fc fd16 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(shadowBottom);
 80043b4:	4651      	mov	r1, sl
 80043b6:	4620      	mov	r0, r4
 80043b8:	f00e fcca 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    glassOverlay.setBitmap(Bitmap(BITMAP_DATEPICKER_GLASS_OVERLAY_ID));
 80043bc:	a90b      	add	r1, sp, #44	@ 0x2c
 80043be:	9807      	ldr	r0, [sp, #28]
 80043c0:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 80043c4:	f012 ffc3 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    glassOverlay.setXY(9, (background.getHeight() - glassOverlay.getHeight()) / 2 + 3);
 80043c8:	f9b4 30ba 	ldrsh.w	r3, [r4, #186]	@ 0xba
 80043cc:	2109      	movs	r1, #9
 80043ce:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 80043d2:	9807      	ldr	r0, [sp, #28]
 80043d4:	1ad2      	subs	r2, r2, r3
 80043d6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80043da:	1052      	asrs	r2, r2, #1
 80043dc:	3203      	adds	r2, #3
 80043de:	b212      	sxth	r2, r2
 80043e0:	f7fc fcfe 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(glassOverlay);
 80043e4:	4620      	mov	r0, r4
 80043e6:	9907      	ldr	r1, [sp, #28]
 80043e8:	f00e fcb2 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.width = width;
 80043ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
}
 80043ee:	4620      	mov	r0, r4
 80043f0:	60a3      	str	r3, [r4, #8]
 80043f2:	b00d      	add	sp, #52	@ 0x34
 80043f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f8:	08021b40 	.word	0x08021b40
 80043fc:	080236f0 	.word	0x080236f0
 8004400:	080040c1 	.word	0x080040c1

08004404 <_ZN10DatePickerD1Ev>:
DatePicker::~DatePicker()
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <_ZN10DatePickerD1Ev+0x24>)
 8004406:	b510      	push	{r4, lr}
 8004408:	4604      	mov	r4, r0
 800440a:	6003      	str	r3, [r0, #0]
}
 800440c:	f500 60c7 	add.w	r0, r0, #1592	@ 0x638
 8004410:	f001 fa60 	bl	80058d4 <_ZN13WheelSelectorD1Ev>
 8004414:	f504 6097 	add.w	r0, r4, #1208	@ 0x4b8
 8004418:	f001 fa5c 	bl	80058d4 <_ZN13WheelSelectorD1Ev>
 800441c:	f104 00dc 	add.w	r0, r4, #220	@ 0xdc
 8004420:	f001 fd7e 	bl	8005f20 <_ZN18WheelSelectorExtraD1Ev>
 8004424:	4620      	mov	r0, r4
 8004426:	bd10      	pop	{r4, pc}
 8004428:	08021b40 	.word	0x08021b40

0800442c <_ZN10DatePickerD0Ev>:
DatePicker::~DatePicker()
 800442c:	b510      	push	{r4, lr}
 800442e:	4604      	mov	r4, r0
}
 8004430:	f7ff ffe8 	bl	8004404 <_ZN10DatePickerD1Ev>
 8004434:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
 8004438:	4620      	mov	r0, r4
 800443a:	f01a fb74 	bl	801eb26 <_ZdlPvj>
 800443e:	4620      	mov	r0, r4
 8004440:	bd10      	pop	{r4, pc}

08004442 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    virtual void setAlpha(uint8_t alpha)
    {
        this->alpha = alpha;
 8004442:	f880 102e 	strb.w	r1, [r0, #46]	@ 0x2e
    }
 8004446:	4770      	bx	lr

08004448 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     * @return The current alpha value.
     */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8004448:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 800444c:	4770      	bx	lr

0800444e <_ZNK8touchgfx5ShapeILt3EE12getNumPointsEv>:
     * @return The number points.
     */
    virtual int getNumPoints() const
    {
        return POINTS;
    }
 800444e:	2003      	movs	r0, #3
 8004450:	4770      	bx	lr

08004452 <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_>:
     * @param x The x coordinate in Q5 format.
     * @param y The y coordinate in Q5 format.
     */
    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
    {
        if (i >= 0 && i < POINTS)
 8004452:	2902      	cmp	r1, #2
 8004454:	bf9e      	ittt	ls
 8004456:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
        {
            xCorner[i] = x, yCorner[i] = y;
 800445a:	64c2      	strls	r2, [r0, #76]	@ 0x4c
 800445c:	6583      	strls	r3, [r0, #88]	@ 0x58
        }
    }
 800445e:	4770      	bx	lr

08004460 <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi>:
     *
     * @return The corner x coordinate.
     */
    virtual CWRUtil::Q5 getCornerX(int i) const
    {
        if (i >= 0 && i < POINTS)
 8004460:	2902      	cmp	r1, #2
        {
            return xCorner[i];
 8004462:	bf9a      	itte	ls
 8004464:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
 8004468:	6cc0      	ldrls	r0, [r0, #76]	@ 0x4c
        explicit Q5(int i) : v(i) { }
 800446a:	2000      	movhi	r0, #0
        }
        return CWRUtil::toQ5<int>(0);
    }
 800446c:	4770      	bx	lr

0800446e <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi>:
     *
     * @return The corner y coordinate.
     */
    virtual CWRUtil::Q5 getCornerY(int i) const
    {
        if (i >= 0 && i < POINTS)
 800446e:	2902      	cmp	r1, #2
        {
            return yCorner[i];
 8004470:	bf9a      	itte	ls
 8004472:	3116      	addls	r1, #22
 8004474:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
 8004478:	2000      	movhi	r0, #0
        }
        return CWRUtil::toQ5<int>(0);
    }
 800447a:	4770      	bx	lr

0800447c <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_>:
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
    {
        if (i >= 0 && i < POINTS)
 800447c:	2902      	cmp	r1, #2
 800447e:	bf9e      	ittt	ls
 8004480:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
        {
            xCache[i] = x, yCache[i] = y;
 8004484:	6642      	strls	r2, [r0, #100]	@ 0x64
 8004486:	6703      	strls	r3, [r0, #112]	@ 0x70
        }
    }
 8004488:	4770      	bx	lr

0800448a <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi>:
     *
     * @return The cached x coordinate.
     */
    virtual CWRUtil::Q5 getCacheX(int i) const
    {
        if (i >= 0 && i < POINTS)
 800448a:	2902      	cmp	r1, #2
        {
            return xCache[i];
 800448c:	bf9a      	itte	ls
 800448e:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
 8004492:	6e40      	ldrls	r0, [r0, #100]	@ 0x64
 8004494:	2000      	movhi	r0, #0
        }
        return CWRUtil::toQ5<int>(0);
    }
 8004496:	4770      	bx	lr

08004498 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi>:
     *
     * @return The cached y coordinate.
     */
    virtual CWRUtil::Q5 getCacheY(int i) const
    {
        if (i >= 0 && i < POINTS)
 8004498:	2902      	cmp	r1, #2
        {
            return yCache[i];
 800449a:	bf9a      	itte	ls
 800449c:	311c      	addls	r1, #28
 800449e:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
 80044a2:	2000      	movhi	r0, #0
        }
        return CWRUtil::toQ5<int>(0);
    }
 80044a4:	4770      	bx	lr
	...

080044a8 <_ZN8touchgfx5ShapeILt3EED1Ev>:
    }
 80044a8:	4b03      	ldr	r3, [pc, #12]	@ (80044b8 <_ZN8touchgfx5ShapeILt3EED1Ev+0x10>)
    virtual ~Shape()
 80044aa:	b510      	push	{r4, lr}
 80044ac:	4604      	mov	r4, r0
    }
 80044ae:	6003      	str	r3, [r0, #0]
 80044b0:	f011 fae2 	bl	8015a78 <_ZN8touchgfx13AbstractShapeD1Ev>
 80044b4:	4620      	mov	r0, r4
 80044b6:	bd10      	pop	{r4, pc}
 80044b8:	08023708 	.word	0x08023708

080044bc <_ZN8touchgfx5ShapeILt3EED0Ev>:
    virtual ~Shape()
 80044bc:	b510      	push	{r4, lr}
 80044be:	4604      	mov	r4, r0
    }
 80044c0:	f7ff fff2 	bl	80044a8 <_ZN8touchgfx5ShapeILt3EED1Ev>
 80044c4:	217c      	movs	r1, #124	@ 0x7c
 80044c6:	4620      	mov	r0, r4
 80044c8:	f01a fb2d 	bl	801eb26 <_ZdlPvj>
 80044cc:	4620      	mov	r0, r4
 80044ce:	bd10      	pop	{r4, pc}

080044d0 <_ZN5Gauge6NeedleD1Ev>:
     *
     *        The needle shape.
     *
     * @see Shape
     */
    class Needle : public Shape<3>
 80044d0:	4b03      	ldr	r3, [pc, #12]	@ (80044e0 <_ZN5Gauge6NeedleD1Ev+0x10>)
 80044d2:	b510      	push	{r4, lr}
 80044d4:	4604      	mov	r4, r0
 80044d6:	6003      	str	r3, [r0, #0]
 80044d8:	f7ff ffe6 	bl	80044a8 <_ZN8touchgfx5ShapeILt3EED1Ev>
 80044dc:	4620      	mov	r0, r4
 80044de:	bd10      	pop	{r4, pc}
 80044e0:	080237a8 	.word	0x080237a8

080044e4 <_ZN5Gauge6NeedleD0Ev>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4604      	mov	r4, r0
 80044e8:	f7ff fff2 	bl	80044d0 <_ZN5Gauge6NeedleD1Ev>
 80044ec:	217c      	movs	r1, #124	@ 0x7c
 80044ee:	4620      	mov	r0, r4
 80044f0:	f01a fb19 	bl	801eb26 <_ZdlPvj>
 80044f4:	4620      	mov	r0, r4
 80044f6:	bd10      	pop	{r4, pc}

080044f8 <_ZN5Gauge12NeedleShadowD1Ev>:
     *
     *        The needle shadow shape.
     *
     * @see Shape
     */
    class NeedleShadow : public Shape<3>
 80044f8:	4b03      	ldr	r3, [pc, #12]	@ (8004508 <_ZN5Gauge12NeedleShadowD1Ev+0x10>)
 80044fa:	b510      	push	{r4, lr}
 80044fc:	4604      	mov	r4, r0
 80044fe:	6003      	str	r3, [r0, #0]
 8004500:	f7ff ffd2 	bl	80044a8 <_ZN8touchgfx5ShapeILt3EED1Ev>
 8004504:	4620      	mov	r0, r4
 8004506:	bd10      	pop	{r4, pc}
 8004508:	08023848 	.word	0x08023848

0800450c <_ZN5Gauge12NeedleShadowD0Ev>:
 800450c:	b510      	push	{r4, lr}
 800450e:	4604      	mov	r4, r0
 8004510:	f7ff fff2 	bl	80044f8 <_ZN5Gauge12NeedleShadowD1Ev>
 8004514:	217c      	movs	r1, #124	@ 0x7c
 8004516:	4620      	mov	r0, r4
 8004518:	f01a fb05 	bl	801eb26 <_ZdlPvj>
 800451c:	4620      	mov	r0, r4
 800451e:	bd10      	pop	{r4, pc}

08004520 <_ZN5GaugeD1Ev>:
    add(needleShadow);
    add(needle);
    add(center);
}

Gauge::~Gauge()
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <_ZN5GaugeD1Ev+0x34>)
 8004524:	4604      	mov	r4, r0
 8004526:	4d0c      	ldr	r5, [pc, #48]	@ (8004558 <_ZN5GaugeD1Ev+0x38>)
 8004528:	6003      	str	r3, [r0, #0]
 800452a:	f500 70ce 	add.w	r0, r0, #412	@ 0x19c
 800452e:	6005      	str	r5, [r0, #0]
 8004530:	f012 f8a8 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
 8004534:	f504 70be 	add.w	r0, r4, #380	@ 0x17c
 8004538:	f8c4 517c 	str.w	r5, [r4, #380]	@ 0x17c
 800453c:	f012 f8a2 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
{
}
 8004540:	f504 7080 	add.w	r0, r4, #256	@ 0x100
 8004544:	f7ff ffd8 	bl	80044f8 <_ZN5Gauge12NeedleShadowD1Ev>
 8004548:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 800454c:	f7ff ffc0 	bl	80044d0 <_ZN5Gauge6NeedleD1Ev>
 8004550:	4620      	mov	r0, r4
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	08021bd0 	.word	0x08021bd0
 8004558:	08025ad0 	.word	0x08025ad0

0800455c <_ZN5GaugeD0Ev>:
Gauge::~Gauge()
 800455c:	b510      	push	{r4, lr}
 800455e:	4604      	mov	r4, r0
}
 8004560:	f7ff ffde 	bl	8004520 <_ZN5GaugeD1Ev>
 8004564:	f44f 71f2 	mov.w	r1, #484	@ 0x1e4
 8004568:	4620      	mov	r0, r4
 800456a:	f01a fadc 	bl	801eb26 <_ZdlPvj>
 800456e:	4620      	mov	r0, r4
 8004570:	bd10      	pop	{r4, pc}
	...

08004574 <_ZN8touchgfx5ShapeILt3EEC1Ev>:
class Shape : public AbstractShape
 8004574:	b510      	push	{r4, lr}
 8004576:	4604      	mov	r4, r0
 8004578:	f011 fa62 	bl	8015a40 <_ZN8touchgfx13AbstractShapeC1Ev>
 800457c:	4b08      	ldr	r3, [pc, #32]	@ (80045a0 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x2c>)
 800457e:	4620      	mov	r0, r4
 8004580:	6023      	str	r3, [r4, #0]
        Q5() : v(0) { }
 8004582:	2300      	movs	r3, #0
 8004584:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
 8004588:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
 800458c:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
 8004590:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
 8004594:	e9c4 331b 	strd	r3, r3, [r4, #108]	@ 0x6c
 8004598:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
 800459c:	bd10      	pop	{r4, pc}
 800459e:	bf00      	nop
 80045a0:	08023708 	.word	0x08023708

080045a4 <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapES1_>:


void Gauge::setBitmaps(Bitmap backgroundBmp, Bitmap centerBmp)
{
 80045a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    background.setBitmap(backgroundBmp);
 80045a6:	f100 052c 	add.w	r5, r0, #44	@ 0x2c
{
 80045aa:	4604      	mov	r4, r0
 80045ac:	f8ad 100c 	strh.w	r1, [sp, #12]
    background.setBitmap(backgroundBmp);
 80045b0:	a903      	add	r1, sp, #12
 80045b2:	4628      	mov	r0, r5
{
 80045b4:	f8ad 2008 	strh.w	r2, [sp, #8]
    background.setBitmap(backgroundBmp);
 80045b8:	f012 fec9 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setXY(0, 0);
 80045bc:	2200      	movs	r2, #0
 80045be:	4628      	mov	r0, r5

    center.setBitmap(centerBmp);
 80045c0:	f104 0558 	add.w	r5, r4, #88	@ 0x58
    background.setXY(0, 0);
 80045c4:	4611      	mov	r1, r2
    center.setXY((background.getWidth() - center.getWidth()) / 2, (background.getHeight() - center.getHeight()) / 2);

    colorPainter.setColor(Color::getColorFrom24BitRGB(0xAE, 0x18, 0x24));
    needle.setPosition(0, 0, background.getWidth(), background.getHeight());
 80045c6:	f104 0684 	add.w	r6, r4, #132	@ 0x84
    background.setXY(0, 0);
 80045ca:	f7fc fc09 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    center.setBitmap(centerBmp);
 80045ce:	4628      	mov	r0, r5
 80045d0:	a902      	add	r1, sp, #8
 80045d2:	f012 febc 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    center.setXY((background.getWidth() - center.getWidth()) / 2, (background.getHeight() - center.getHeight()) / 2);
 80045d6:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 80045da:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 80045de:	4628      	mov	r0, r5
 80045e0:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
    colorPainter.setColor(Color::getColorFrom24BitRGB(0xAE, 0x18, 0x24));
 80045e4:	f504 75be 	add.w	r5, r4, #380	@ 0x17c
    center.setXY((background.getWidth() - center.getWidth()) / 2, (background.getHeight() - center.getHeight()) / 2);
 80045e8:	1ad2      	subs	r2, r2, r3
 80045ea:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 80045ee:	1ac9      	subs	r1, r1, r3
 80045f0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80045f4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80045f8:	f342 024f 	sbfx	r2, r2, #1, #16
 80045fc:	f341 014f 	sbfx	r1, r1, #1, #16
 8004600:	f7fc fbee 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    colorPainter.setColor(Color::getColorFrom24BitRGB(0xAE, 0x18, 0x24));
 8004604:	2224      	movs	r2, #36	@ 0x24
 8004606:	2118      	movs	r1, #24
 8004608:	20ae      	movs	r0, #174	@ 0xae
 800460a:	f018 f85d 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800460e:	22ff      	movs	r2, #255	@ 0xff
 8004610:	4601      	mov	r1, r0
 8004612:	4628      	mov	r0, r5
 8004614:	f010 fe34 	bl	8015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
    needle.setPosition(0, 0, background.getWidth(), background.getHeight());
 8004618:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	@ 0x36
 800461c:	2200      	movs	r2, #0
 800461e:	4630      	mov	r0, r6
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	4611      	mov	r1, r2
 8004624:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 8004628:	f7fc fbc2 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    needle.setOrigin(background.getWidth() / 2, background.getHeight() / 2);
 800462c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8004630:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	@ 0x36
 8004634:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    void setOrigin(T x, T y)
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);

        if (dx == dxNew && dy == dyNew)
 8004638:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 800463c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8004640:	1052      	asrs	r2, r2, #1
 8004642:	105b      	asrs	r3, r3, #1
 8004644:	ebb0 1f42 	cmp.w	r0, r2, lsl #5
 8004648:	ea4f 1142 	mov.w	r1, r2, lsl #5
 800464c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8004650:	d103      	bne.n	800465a <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapES1_+0xb6>
 8004652:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapES1_+0xc0>
        }

        dx = dxNew;
        dy = dyNew;

        updateAbstractShapeCache();
 800465a:	4630      	mov	r0, r6
        dy = dyNew;
 800465c:	e9c4 132d 	strd	r1, r3, [r4, #180]	@ 0xb4
        updateAbstractShapeCache();
 8004660:	f011 fa14 	bl	8015a8c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    needle.setPainter(colorPainter);
 8004664:	4629      	mov	r1, r5
 8004666:	4630      	mov	r0, r6
 8004668:	f012 f812 	bl	8016690 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    shadowPainter.setColor(Color::getColorFrom24BitRGB(0x0, 0x0, 0x0), 60);
 800466c:	2200      	movs	r2, #0
 800466e:	f504 75ce 	add.w	r5, r4, #412	@ 0x19c
    needleShadow.setPosition(0, 0, background.getWidth(), background.getHeight());
 8004672:	f504 7680 	add.w	r6, r4, #256	@ 0x100
    shadowPainter.setColor(Color::getColorFrom24BitRGB(0x0, 0x0, 0x0), 60);
 8004676:	4611      	mov	r1, r2
 8004678:	4610      	mov	r0, r2
 800467a:	f018 f825 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800467e:	223c      	movs	r2, #60	@ 0x3c
 8004680:	4601      	mov	r1, r0
 8004682:	4628      	mov	r0, r5
 8004684:	f010 fdfc 	bl	8015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
    needleShadow.setPosition(0, 0, background.getWidth(), background.getHeight());
 8004688:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	@ 0x36
 800468c:	2200      	movs	r2, #0
 800468e:	4630      	mov	r0, r6
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	4611      	mov	r1, r2
 8004694:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 8004698:	f7fc fb8a 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    needleShadow.setOrigin(background.getWidth() / 2, background.getHeight() / 2);
 800469c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 80046a0:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	@ 0x36
 80046a4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        if (dx == dxNew && dy == dyNew)
 80046a8:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 80046ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80046b0:	1052      	asrs	r2, r2, #1
 80046b2:	105b      	asrs	r3, r3, #1
 80046b4:	ebb0 1f42 	cmp.w	r0, r2, lsl #5
 80046b8:	ea4f 1142 	mov.w	r1, r2, lsl #5
 80046bc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80046c0:	d103      	bne.n	80046ca <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapES1_+0x126>
 80046c2:	f8d4 2134 	ldr.w	r2, [r4, #308]	@ 0x134
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <_ZN5Gauge10setBitmapsEN8touchgfx6BitmapES1_+0x130>
        updateAbstractShapeCache();
 80046ca:	4630      	mov	r0, r6
        dy = dyNew;
 80046cc:	e9c4 134c 	strd	r1, r3, [r4, #304]	@ 0x130
        updateAbstractShapeCache();
 80046d0:	f011 f9dc 	bl	8015a8c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    needleShadow.setPainter(shadowPainter);
 80046d4:	4629      	mov	r1, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	f011 ffda 	bl	8016690 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>


    setWidth(background.getWidth());
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 80046e2:	4620      	mov	r0, r4
 80046e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e6:	4798      	blx	r3
    setHeight(background.getHeight());
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	f9b4 1036 	ldrsh.w	r1, [r4, #54]	@ 0x36
 80046ee:	4620      	mov	r0, r4
 80046f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f2:	4798      	blx	r3
}
 80046f4:	b004      	add	sp, #16
 80046f6:	bd70      	pop	{r4, r5, r6, pc}

080046f8 <_ZN5Gauge8setValueEi>:
    needleShadow.updateAngle((int)((currentValue - minValue) * degreesPerValue) + minDegree);
}

void Gauge::setValue(int newValue)
{
    if (newValue > maxValue)
 80046f8:	f8d0 31c0 	ldr.w	r3, [r0, #448]	@ 0x1c0
 80046fc:	428b      	cmp	r3, r1
{
 80046fe:	b510      	push	{r4, lr}
 8004700:	4604      	mov	r4, r0
    if (newValue > maxValue)
 8004702:	db04      	blt.n	800470e <_ZN5Gauge8setValueEi+0x16>
    {
        newValue = maxValue;
    }
    else if (newValue < minValue)
 8004704:	f8d0 31bc 	ldr.w	r3, [r0, #444]	@ 0x1bc
 8004708:	428b      	cmp	r3, r1
 800470a:	bfb8      	it	lt
 800470c:	460b      	movlt	r3, r1
    {
        newValue = minValue;
    }
    deltaValue = newValue - currentValue;
 800470e:	f8d4 21cc 	ldr.w	r2, [r4, #460]	@ 0x1cc
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	f8c4 31d0 	str.w	r3, [r4, #464]	@ 0x1d0

    Application::getInstance()->registerTimerWidget(this);
 8004718:	f015 fa4c 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800471c:	4621      	mov	r1, r4
 800471e:	f015 fa4f 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
    gaugeAnimationRunning = true;
 8004722:	2301      	movs	r3, #1
 8004724:	f884 31d8 	strb.w	r3, [r4, #472]	@ 0x1d8
    gaugeAnimationCounter = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	f8a4 31da 	strh.w	r3, [r4, #474]	@ 0x1da
}
 800472e:	bd10      	pop	{r4, pc}

08004730 <_ZN5Gauge8getValueEv>:

int Gauge::getValue()
{
    return currentValue;
}
 8004730:	f8d0 01cc 	ldr.w	r0, [r0, #460]	@ 0x1cc
 8004734:	4770      	bx	lr

08004736 <_ZN5Gauge20setAnimationDurationEt>:

void Gauge::setAnimationDuration(uint16_t animationDuration)
{
    gaugeAnimationDuration = animationDuration;
 8004736:	f8a0 11dc 	strh.w	r1, [r0, #476]	@ 0x1dc
}
 800473a:	4770      	bx	lr

0800473c <_ZN5Gauge17setEasingEquationEPFstsstE>:

void Gauge::setEasingEquation(EasingEquation newEasingEquation)
{
    easingEquation = newEasingEquation;
 800473c:	f8c0 11e0 	str.w	r1, [r0, #480]	@ 0x1e0
}
 8004740:	4770      	bx	lr

08004742 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE>:
        int numPoints = getNumPoints();
 8004742:	6803      	ldr	r3, [r0, #0]
    void setShape(ShapePoint<T>* points)
 8004744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        int numPoints = getNumPoints();
 8004748:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    void setShape(ShapePoint<T>* points)
 800474a:	4605      	mov	r5, r0
 800474c:	460c      	mov	r4, r1
        for (int i = 0; i < numPoints; i++)
 800474e:	2600      	movs	r6, #0
        int numPoints = getNumPoints();
 8004750:	4798      	blx	r3
 8004752:	4607      	mov	r7, r0
        for (int i = 0; i < numPoints; i++)
 8004754:	42be      	cmp	r6, r7
 8004756:	f104 0408 	add.w	r4, r4, #8
 800475a:	db04      	blt.n	8004766 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE+0x24>
        updateAbstractShapeCache();
 800475c:	4628      	mov	r0, r5
    }
 800475e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        updateAbstractShapeCache();
 8004762:	f011 b993 	b.w	8015a8c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 8004766:	ed14 7a01 	vldr	s14, [r4, #-4]
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 800476a:	4631      	mov	r1, r6
 800476c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8004770:	4628      	mov	r0, r5
 8004772:	eef0 6a47 	vmov.f32	s13, s14
 8004776:	682b      	ldr	r3, [r5, #0]
 8004778:	eeb0 7a67 	vmov.f32	s14, s15
        for (int i = 0; i < numPoints; i++)
 800477c:	3601      	adds	r6, #1
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 800477e:	f8d3 8080 	ldr.w	r8, [r3, #128]	@ 0x80
 8004782:	eefe 6aed 	vcvt.s32.f32	s13, s13, #5
 8004786:	eebe 7aed 	vcvt.s32.f32	s14, s14, #5
 800478a:	ee16 3a90 	vmov	r3, s13
 800478e:	ee17 2a10 	vmov	r2, s14
 8004792:	47c0      	blx	r8
        for (int i = 0; i < numPoints; i++)
 8004794:	e7de      	b.n	8004754 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE+0x12>
	...

08004798 <_ZN5GaugeC1Ev>:
Gauge::Gauge() :
 8004798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        touchable(false),
 800479c:	f44f 7380 	mov.w	r3, #256	@ 0x100
    easingEquation(EasingEquations::backEaseOut)
 80047a0:	4d3a      	ldr	r5, [pc, #232]	@ (800488c <_ZN5GaugeC1Ev+0xf4>)
Gauge::Gauge() :
 80047a2:	b086      	sub	sp, #24
 80047a4:	4604      	mov	r4, r0
        this->x = x;
 80047a6:	2600      	movs	r6, #0
    easingEquation(EasingEquations::backEaseOut)
 80047a8:	4607      	mov	r7, r0
 80047aa:	8483      	strh	r3, [r0, #36]	@ 0x24
 80047ac:	f105 0308 	add.w	r3, r5, #8
 80047b0:	f64f 78ff 	movw	r8, #65535	@ 0xffff
        nextDrawChainElement(0),
 80047b4:	61c6      	str	r6, [r0, #28]
 80047b6:	6286      	str	r6, [r0, #40]	@ 0x28
 80047b8:	4669      	mov	r1, sp
 80047ba:	f104 0a58 	add.w	sl, r4, #88	@ 0x58
 80047be:	f8ad 8000 	strh.w	r8, [sp]
 80047c2:	f504 7980 	add.w	r9, r4, #256	@ 0x100
        this->width = width;
 80047c6:	e9c0 6601 	strd	r6, r6, [r0, #4]
        this->width = 0;
 80047ca:	e9c0 6603 	strd	r6, r6, [r0, #12]
        nextSibling(0),
 80047ce:	e9c0 6605 	strd	r6, r6, [r0, #20]
 80047d2:	f847 3b2c 	str.w	r3, [r7], #44
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7ff fc12 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80047dc:	f8ad 8000 	strh.w	r8, [sp]
 80047e0:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 80047e4:	4669      	mov	r1, sp
 80047e6:	4650      	mov	r0, sl
 80047e8:	f7ff fc0a 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        {
 80047ec:	4640      	mov	r0, r8
 80047ee:	f7ff fec1 	bl	8004574 <_ZN8touchgfx5ShapeILt3EEC1Ev>
 80047f2:	4b27      	ldr	r3, [pc, #156]	@ (8004890 <_ZN5GaugeC1Ev+0xf8>)
            ShapePoint<float> points[3] = { { -2.5f, 0}, {0.0f, -70}, {2.5f, 0} };
 80047f4:	f105 0e90 	add.w	lr, r5, #144	@ 0x90
 80047f8:	46ec      	mov	ip, sp
        {
 80047fa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    {
    public:
        NeedleShadow()
        {
            ShapePoint<float> points[3] = { { -4, 0}, {0.0f, -80}, {4, 0} };
 80047fe:	35a8      	adds	r5, #168	@ 0xa8
            ShapePoint<float> points[3] = { { -2.5f, 0}, {0.0f, -70}, {2.5f, 0} };
 8004800:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004804:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004808:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800480c:	e88c 0003 	stmia.w	ip, {r0, r1}
            setShape(points);
 8004810:	4669      	mov	r1, sp
 8004812:	4640      	mov	r0, r8
 8004814:	f7ff ff95 	bl	8004742 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE>
        {
 8004818:	4648      	mov	r0, r9
 800481a:	f7ff feab 	bl	8004574 <_ZN8touchgfx5ShapeILt3EEC1Ev>
 800481e:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <_ZN5GaugeC1Ev+0xfc>)
            ShapePoint<float> points[3] = { { -4, 0}, {0.0f, -80}, {4, 0} };
 8004820:	46ec      	mov	ip, sp
        {
 8004822:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
            ShapePoint<float> points[3] = { { -4, 0}, {0.0f, -80}, {4, 0} };
 8004826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004828:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800482c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004830:	e88c 0003 	stmia.w	ip, {r0, r1}
            setShape(points);
 8004834:	4669      	mov	r1, sp
 8004836:	4648      	mov	r0, r9
 8004838:	f7ff ff83 	bl	8004742 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPNS0_10ShapePointIT_EE>
 800483c:	4631      	mov	r1, r6
 800483e:	22ff      	movs	r2, #255	@ 0xff
 8004840:	f504 70be 	add.w	r0, r4, #380	@ 0x17c
 8004844:	f010 fd2a 	bl	801529c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 8004848:	22ff      	movs	r2, #255	@ 0xff
 800484a:	4631      	mov	r1, r6
 800484c:	f504 70ce 	add.w	r0, r4, #412	@ 0x19c
 8004850:	f010 fd24 	bl	801529c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
    gaugeAnimationDuration(10),
 8004854:	230a      	movs	r3, #10
    add(background);
 8004856:	4639      	mov	r1, r7
 8004858:	4620      	mov	r0, r4
    gaugeAnimationDuration(10),
 800485a:	f8a4 31dc 	strh.w	r3, [r4, #476]	@ 0x1dc
    easingEquation(EasingEquations::backEaseOut)
 800485e:	4b0e      	ldr	r3, [pc, #56]	@ (8004898 <_ZN5GaugeC1Ev+0x100>)
    gaugeAnimationRunning(false),
 8004860:	f884 61d8 	strb.w	r6, [r4, #472]	@ 0x1d8
    easingEquation(EasingEquations::backEaseOut)
 8004864:	f8c4 31e0 	str.w	r3, [r4, #480]	@ 0x1e0
    add(background);
 8004868:	f00e fa72 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(needleShadow);
 800486c:	4649      	mov	r1, r9
 800486e:	4620      	mov	r0, r4
 8004870:	f00e fa6e 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(needle);
 8004874:	4641      	mov	r1, r8
 8004876:	4620      	mov	r0, r4
 8004878:	f00e fa6a 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(center);
 800487c:	4620      	mov	r0, r4
 800487e:	4651      	mov	r1, sl
 8004880:	f00e fa66 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004884:	4620      	mov	r0, r4
 8004886:	b006      	add	sp, #24
 8004888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488c:	08021bc8 	.word	0x08021bc8
 8004890:	080237a8 	.word	0x080237a8
 8004894:	08023848 	.word	0x08023848
 8004898:	0801ad71 	.word	0x0801ad71

0800489c <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>:
     * @note The area containing the AbstractShape is invalidated before and after the change.
     *
     * @see setAngle()
     */
    template <typename T>
    void updateAngle(T angle)
 800489c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
        if (shapeAngle != angleQ5)
 80048a0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    void updateAngle(T angle)
 80048a2:	4604      	mov	r4, r0
 80048a4:	014d      	lsls	r5, r1, #5
        if (shapeAngle != angleQ5)
 80048a6:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
 80048aa:	d030      	beq.n	800490e <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_+0x72>
        {
            Rect rectBefore = getMinimalRect();
 80048ac:	6803      	ldr	r3, [r0, #0]
 80048ae:	4601      	mov	r1, r0
 80048b0:	4668      	mov	r0, sp
 80048b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b4:	4798      	blx	r3

            shapeAngle = angleQ5;
            updateAbstractShapeCache();
 80048b6:	4620      	mov	r0, r4
            shapeAngle = angleQ5;
 80048b8:	63a5      	str	r5, [r4, #56]	@ 0x38
            updateAbstractShapeCache();
 80048ba:	f011 f8e7 	bl	8015a8c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>

            Rect rectAfter = getMinimalRect();
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	4621      	mov	r1, r4
 80048c2:	a802      	add	r0, sp, #8
 80048c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c6:	4798      	blx	r3
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
    {
        return ((width == 0) || (height == 0));
 80048c8:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
 80048cc:	f1be 0f00 	cmp.w	lr, #0
 80048d0:	d018      	beq.n	8004904 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_+0x68>
 80048d2:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80048d6:	b1af      	cbz	r7, 8004904 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_+0x68>
 80048d8:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 80048dc:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80048e0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80048e4:	f1b8 0f00 	cmp.w	r8, #0
 80048e8:	d004      	beq.n	80048f4 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_+0x58>
 80048ea:	f9bd c006 	ldrsh.w	ip, [sp, #6]
 80048ee:	f1bc 0f00 	cmp.w	ip, #0
 80048f2:	d10f      	bne.n	8004914 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_+0x78>
                x = other.x;
 80048f4:	f8ad 2000 	strh.w	r2, [sp]
                y = other.y;
 80048f8:	f8ad 3002 	strh.w	r3, [sp, #2]
                width = other.width;
 80048fc:	f8ad e004 	strh.w	lr, [sp, #4]
                height = other.height;
 8004900:	f8ad 7006 	strh.w	r7, [sp, #6]
            rectBefore.expandToFit(rectAfter);
            invalidateRect(rectBefore);
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	4669      	mov	r1, sp
 8004908:	4620      	mov	r0, r4
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	4798      	blx	r3
        }
    }
 800490e:	b004      	add	sp, #16
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                int16_t newX = MIN(x, other.x);
 8004914:	f9bd 0000 	ldrsh.w	r0, [sp]
 8004918:	461d      	mov	r5, r3
                int16_t newY = MIN(y, other.y);
 800491a:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800491e:	4290      	cmp	r0, r2
 8004920:	4606      	mov	r6, r0
        return x + width;
 8004922:	4440      	add	r0, r8
 8004924:	bfa8      	it	ge
 8004926:	4616      	movge	r6, r2
                int16_t newY = MIN(y, other.y);
 8004928:	428b      	cmp	r3, r1
        return x + width;
 800492a:	4472      	add	r2, lr
        return y + height;
 800492c:	443b      	add	r3, r7
 800492e:	bfa8      	it	ge
 8004930:	460d      	movge	r5, r1
 8004932:	4461      	add	r1, ip
                width = endPointX - newX;
 8004934:	b200      	sxth	r0, r0
                x = newX;
 8004936:	f8ad 6000 	strh.w	r6, [sp]
                width = endPointX - newX;
 800493a:	b212      	sxth	r2, r2
                y = newY;
 800493c:	f8ad 5002 	strh.w	r5, [sp, #2]
                height = endPointY - newY;
 8004940:	b209      	sxth	r1, r1
 8004942:	b21b      	sxth	r3, r3
                width = endPointX - newX;
 8004944:	4290      	cmp	r0, r2
 8004946:	bfac      	ite	ge
 8004948:	ebc6 0600 	rsbge	r6, r6, r0
 800494c:	ebc6 0602 	rsblt	r6, r6, r2
                height = endPointY - newY;
 8004950:	4299      	cmp	r1, r3
 8004952:	bfac      	ite	ge
 8004954:	ebc5 0501 	rsbge	r5, r5, r1
 8004958:	ebc5 0503 	rsblt	r5, r5, r3
                width = endPointX - newX;
 800495c:	f8ad 6004 	strh.w	r6, [sp, #4]
                height = endPointY - newY;
 8004960:	f8ad 5006 	strh.w	r5, [sp, #6]
    }
 8004964:	e7ce      	b.n	8004904 <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_+0x68>
	...

08004968 <_ZN5Gauge9setLimitsEiiii>:
{
 8004968:	b510      	push	{r4, lr}
 800496a:	4604      	mov	r4, r0
 800496c:	9802      	ldr	r0, [sp, #8]
    degreesPerValue = ((maxDegree - minDegree) / ((float)maxValue - minValue));
 800496e:	ee07 1a10 	vmov	s14, r1
    currentValue = minValue;
 8004972:	f8c4 11cc 	str.w	r1, [r4, #460]	@ 0x1cc
    degreesPerValue = ((maxDegree - minDegree) / ((float)maxValue - minValue));
 8004976:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    maxDegree = newMaxDegree;
 800497a:	e9c4 3071 	strd	r3, r0, [r4, #452]	@ 0x1c4
    degreesPerValue = ((maxDegree - minDegree) / ((float)maxValue - minValue));
 800497e:	1ac0      	subs	r0, r0, r3
 8004980:	ee07 0a90 	vmov	s15, r0
    needle.updateAngle((int)((currentValue - minValue) * degreesPerValue) + minDegree);
 8004984:	f104 0084 	add.w	r0, r4, #132	@ 0x84
    degreesPerValue = ((maxDegree - minDegree) / ((float)maxValue - minValue));
 8004988:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800498c:	ee07 2a90 	vmov	s15, r2
 8004990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    maxValue = newMaxValue;
 8004994:	e9c4 126f 	strd	r1, r2, [r4, #444]	@ 0x1bc
    degreesPerValue = ((maxDegree - minDegree) / ((float)maxValue - minValue));
 8004998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800499c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    needle.updateAngle((int)((currentValue - minValue) * degreesPerValue) + minDegree);
 80049a0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80049ec <_ZN5Gauge9setLimitsEiiii+0x84>
    degreesPerValue = ((maxDegree - minDegree) / ((float)maxValue - minValue));
 80049a4:	ed84 7a75 	vstr	s14, [r4, #468]	@ 0x1d4
    needle.updateAngle((int)((currentValue - minValue) * degreesPerValue) + minDegree);
 80049a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049ac:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80049b0:	ee17 1a90 	vmov	r1, s15
 80049b4:	4419      	add	r1, r3
 80049b6:	f7ff ff71 	bl	800489c <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>
    needleShadow.updateAngle((int)((currentValue - minValue) * degreesPerValue) + minDegree);
 80049ba:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 80049be:	f8d4 21bc 	ldr.w	r2, [r4, #444]	@ 0x1bc
 80049c2:	f504 7080 	add.w	r0, r4, #256	@ 0x100
 80049c6:	ed94 7a75 	vldr	s14, [r4, #468]	@ 0x1d4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 80049d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049e0:	ee17 1a90 	vmov	r1, s15
 80049e4:	4419      	add	r1, r3
 80049e6:	f7ff ff59 	bl	800489c <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>
}
 80049ea:	bd10      	pop	{r4, pc}
 80049ec:	00000000 	.word	0x00000000

080049f0 <_ZN5Gauge15handleTickEventEv>:

void Gauge::handleTickEvent()
{
 80049f0:	b538      	push	{r3, r4, r5, lr}
    if (gaugeAnimationRunning)
 80049f2:	f890 31d8 	ldrb.w	r3, [r0, #472]	@ 0x1d8
{
 80049f6:	4604      	mov	r4, r0
    if (gaugeAnimationRunning)
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d043      	beq.n	8004a84 <_ZN5Gauge15handleTickEventEv+0x94>
    {
        if (gaugeAnimationCounter <= gaugeAnimationDuration)
 80049fc:	f8b0 01da 	ldrh.w	r0, [r0, #474]	@ 0x1da
 8004a00:	f8b4 31dc 	ldrh.w	r3, [r4, #476]	@ 0x1dc
 8004a04:	4298      	cmp	r0, r3
 8004a06:	d83e      	bhi.n	8004a86 <_ZN5Gauge15handleTickEventEv+0x96>
        {
            int16_t delta = easingEquation(gaugeAnimationCounter, 0, deltaValue, gaugeAnimationDuration);
 8004a08:	f8d4 51e0 	ldr.w	r5, [r4, #480]	@ 0x1e0
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	f9b4 21d0 	ldrsh.w	r2, [r4, #464]	@ 0x1d0
 8004a12:	47a8      	blx	r5

            needle.updateAngle((int)(((currentValue + delta) - minValue) * degreesPerValue)  + minDegree);
 8004a14:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 8004a18:	f8d4 21bc 	ldr.w	r2, [r4, #444]	@ 0x1bc
            int16_t delta = easingEquation(gaugeAnimationCounter, 0, deltaValue, gaugeAnimationDuration);
 8004a1c:	4605      	mov	r5, r0
            needle.updateAngle((int)(((currentValue + delta) - minValue) * degreesPerValue)  + minDegree);
 8004a1e:	4403      	add	r3, r0
 8004a20:	ed94 7a75 	vldr	s14, [r4, #468]	@ 0x1d4
 8004a24:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 8004a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a3e:	ee17 1a90 	vmov	r1, s15
 8004a42:	4419      	add	r1, r3
 8004a44:	f7ff ff2a 	bl	800489c <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>
            needleShadow.updateAngle((int)(((currentValue + delta) - minValue) * degreesPerValue)  + minDegree);
 8004a48:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 8004a4c:	ed94 7a75 	vldr	s14, [r4, #468]	@ 0x1d4
 8004a50:	f504 7080 	add.w	r0, r4, #256	@ 0x100
 8004a54:	441d      	add	r5, r3
 8004a56:	f8d4 31bc 	ldr.w	r3, [r4, #444]	@ 0x1bc
 8004a5a:	1aed      	subs	r5, r5, r3
 8004a5c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 8004a60:	ee07 5a90 	vmov	s15, r5
 8004a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a70:	ee17 1a90 	vmov	r1, s15
 8004a74:	4419      	add	r1, r3
 8004a76:	f7ff ff11 	bl	800489c <_ZN8touchgfx13AbstractShape11updateAngleIiEEvT_>
            gaugeAnimationCounter++;
 8004a7a:	f8b4 31da 	ldrh.w	r3, [r4, #474]	@ 0x1da
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f8a4 31da 	strh.w	r3, [r4, #474]	@ 0x1da
            Application::getInstance()->unregisterTimerWidget(this);

            currentValue = currentValue + deltaValue;
        }
    }
}
 8004a84:	bd38      	pop	{r3, r4, r5, pc}
            gaugeAnimationRunning = false;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f884 31d8 	strb.w	r3, [r4, #472]	@ 0x1d8
            gaugeAnimationCounter = 0;
 8004a8c:	f8a4 31da 	strh.w	r3, [r4, #474]	@ 0x1da
            Application::getInstance()->unregisterTimerWidget(this);
 8004a90:	f015 f890 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8004a94:	4621      	mov	r1, r4
 8004a96:	f015 f8c3 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
            currentValue = currentValue + deltaValue;
 8004a9a:	e9d4 3273 	ldrd	r3, r2, [r4, #460]	@ 0x1cc
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f8c4 31cc 	str.w	r3, [r4, #460]	@ 0x1cc
}
 8004aa4:	e7ee      	b.n	8004a84 <_ZN5Gauge15handleTickEventEv+0x94>

08004aa6 <_ZN8touchgfx8CallbackI19ThreeWayProgressBarRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004aa6:	4770      	bx	lr

08004aa8 <_ZN8touchgfx8CallbackI19ThreeWayProgressBarRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004aa8:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8004aaa:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004aac:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8004aae:	68c2      	ldr	r2, [r0, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	1055      	asrs	r5, r2, #1
 8004ab4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004ab8:	07d2      	lsls	r2, r2, #31
 8004aba:	bf48      	it	mi
 8004abc:	5962      	ldrmi	r2, [r4, r5]
    }
 8004abe:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8004ac0:	bf48      	it	mi
 8004ac2:	58d3      	ldrmi	r3, [r2, r3]
 8004ac4:	4718      	bx	r3

08004ac6 <_ZNK8touchgfx8CallbackI19ThreeWayProgressBarRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004ac6:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8004ac8:	6840      	ldr	r0, [r0, #4]
 8004aca:	b130      	cbz	r0, 8004ada <_ZNK8touchgfx8CallbackI19ThreeWayProgressBarRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	b91a      	cbnz	r2, 8004ad8 <_ZNK8touchgfx8CallbackI19ThreeWayProgressBarRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8004ad0:	68d8      	ldr	r0, [r3, #12]
 8004ad2:	f000 0001 	and.w	r0, r0, #1
 8004ad6:	4770      	bx	lr
 8004ad8:	2001      	movs	r0, #1
    }
 8004ada:	4770      	bx	lr

08004adc <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21setMoveAnimationDelayEt>:
        moveAnimationDelay = delay;
 8004adc:	f8a0 10ce 	strh.w	r1, [r0, #206]	@ 0xce
    }
 8004ae0:	4770      	bx	lr

08004ae2 <_ZNK8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21getMoveAnimationDelayEv>:
    }
 8004ae2:	f8b0 00ce 	ldrh.w	r0, [r0, #206]	@ 0xce
 8004ae6:	4770      	bx	lr

08004ae8 <_ZNK8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE9isRunningEv>:
        return isMoveAnimationRunning();
 8004ae8:	6803      	ldr	r3, [r0, #0]
 8004aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aee:	4718      	bx	r3

08004af0 <_ZNK8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE22isMoveAnimationRunningEv>:
    }
 8004af0:	f890 00ca 	ldrb.w	r0, [r0, #202]	@ 0xca
 8004af4:	4770      	bx	lr

08004af6 <_ZN8touchgfx8CallbackI19ThreeWayProgressBarRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004af6:	b510      	push	{r4, lr}
 8004af8:	4604      	mov	r4, r0
 8004afa:	2110      	movs	r1, #16
 8004afc:	f01a f813 	bl	801eb26 <_ZdlPvj>
 8004b00:	4620      	mov	r0, r4
 8004b02:	bd10      	pop	{r4, pc}

08004b04 <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleED1Ev>:
    }
 8004b04:	4b03      	ldr	r3, [pc, #12]	@ (8004b14 <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleED1Ev+0x10>)
    virtual ~MoveAnimator()
 8004b06:	b510      	push	{r4, lr}
 8004b08:	4604      	mov	r4, r0
    }
 8004b0a:	6003      	str	r3, [r0, #0]
 8004b0c:	f000 fb58 	bl	80051c0 <_ZN25ThreeWayProgressBarCircleD1Ev>
 8004b10:	4620      	mov	r0, r4
 8004b12:	bd10      	pop	{r4, pc}
 8004b14:	080238e8 	.word	0x080238e8

08004b18 <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleED0Ev>:
    virtual ~MoveAnimator()
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	4604      	mov	r4, r0
    }
 8004b1c:	f7ff fff2 	bl	8004b04 <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleED1Ev>
 8004b20:	21e8      	movs	r1, #232	@ 0xe8
 8004b22:	4620      	mov	r0, r4
 8004b24:	f019 ffff 	bl	801eb26 <_ZdlPvj>
 8004b28:	4620      	mov	r0, r4
 8004b2a:	bd10      	pop	{r4, pc}

08004b2c <_ZN19ThreeWayProgressBar20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>:
    }
}


void ThreeWayProgressBar::buttonPressedHandler(const AbstractButton& button)
{
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	4604      	mov	r4, r0
    if (buttonClickedAction && buttonClickedAction->isValid())
 8004b30:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8004b32:	b150      	cbz	r0, 8004b4a <_ZN19ThreeWayProgressBar20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1e>
 8004b34:	6803      	ldr	r3, [r0, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4798      	blx	r3
 8004b3a:	b130      	cbz	r0, 8004b4a <_ZN19ThreeWayProgressBar20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1e>
    {
        buttonClickedAction->execute(*this);
 8004b3c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004b3e:	4621      	mov	r1, r4
 8004b40:	6803      	ldr	r3, [r0, #0]
    }
}
 8004b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        buttonClickedAction->execute(*this);
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4718      	bx	r3
}
 8004b4a:	bd10      	pop	{r4, pc}

08004b4c <_ZN19ThreeWayProgressBarD1Ev>:
ThreeWayProgressBar::~ThreeWayProgressBar()
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b8c <_ZN19ThreeWayProgressBarD1Ev+0x40>)
 8004b50:	f44f 757d 	mov.w	r5, #1012	@ 0x3f4
 8004b54:	4604      	mov	r4, r0
 8004b56:	6003      	str	r3, [r0, #0]
 8004b58:	f500 6088 	add.w	r0, r0, #1088	@ 0x440
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <_ZN19ThreeWayProgressBarD1Ev+0x44>)
 8004b5e:	6003      	str	r3, [r0, #0]
 8004b60:	f011 fd90 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
 8004b64:	5963      	ldr	r3, [r4, r5]
 8004b66:	1960      	adds	r0, r4, r5
 8004b68:	3d4c      	subs	r5, #76	@ 0x4c
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4798      	blx	r3
}
 8004b6e:	f5b5 7f44 	cmp.w	r5, #784	@ 0x310
 8004b72:	d1f7      	bne.n	8004b64 <_ZN19ThreeWayProgressBarD1Ev+0x18>
ThreeWayProgressBar::~ThreeWayProgressBar()
 8004b74:	f44f 751d 	mov.w	r5, #628	@ 0x274
 8004b78:	5963      	ldr	r3, [r4, r5]
 8004b7a:	1960      	adds	r0, r4, r5
 8004b7c:	3de8      	subs	r5, #232	@ 0xe8
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4798      	blx	r3
}
 8004b82:	f115 0f44 	cmn.w	r5, #68	@ 0x44
 8004b86:	d1f7      	bne.n	8004b78 <_ZN19ThreeWayProgressBarD1Ev+0x2c>
 8004b88:	4620      	mov	r0, r4
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	08021c90 	.word	0x08021c90
 8004b90:	08025ad0 	.word	0x08025ad0

08004b94 <_ZN19ThreeWayProgressBarD0Ev>:
ThreeWayProgressBar::~ThreeWayProgressBar()
 8004b94:	b510      	push	{r4, lr}
 8004b96:	4604      	mov	r4, r0
}
 8004b98:	f7ff ffd8 	bl	8004b4c <_ZN19ThreeWayProgressBarD1Ev>
 8004b9c:	f240 417c 	movw	r1, #1148	@ 0x47c
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f019 ffc0 	bl	801eb26 <_ZdlPvj>
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	bd10      	pop	{r4, pc}
	...

08004bac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     *        If the text changes due to a language change you may need to reposition the label
     *        text to stay horizontally centered.
     *
     * @note The method does not invalidate the button. This must be done manually.
     */
    void updateTextPosition()
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
        const Font* f = typedText.getFont();
 8004bae:	f100 0734 	add.w	r7, r0, #52	@ 0x34
    void updateTextPosition()
 8004bb2:	4606      	mov	r6, r0
        assertValid();
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f7fe f82d 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004bba:	4b13      	ldr	r3, [pc, #76]	@ (8004c08 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5c>)
 8004bbc:	8eb4      	ldrh	r4, [r6, #52]	@ 0x34
        assertValid();
 8004bbe:	4638      	mov	r0, r7
        return fonts[typedTexts[typedTextId].fontIdx];
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
 8004bc6:	4b11      	ldr	r3, [pc, #68]	@ (8004c0c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x60>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        assertValid();
 8004bce:	f7fe f821 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>)
        const Unicode::UnicodeChar* s = typedText.getText();
        textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	4639      	mov	r1, r7
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	4798      	blx	r3
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	4604      	mov	r4, r0
 8004be8:	4639      	mov	r1, r7
 8004bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bec:	4628      	mov	r0, r5
 8004bee:	4798      	blx	r3
 8004bf0:	fb14 f400 	smulbb	r4, r4, r0
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	4639      	mov	r1, r7
 8004bf8:	b2e4      	uxtb	r4, r4
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	4798      	blx	r3
 8004c00:	4404      	add	r4, r0
 8004c02:	f886 4041 	strb.w	r4, [r6, #65]	@ 0x41
    }
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c08:	20024eb4 	.word	0x20024eb4
 8004c0c:	20024ebc 	.word	0x20024ebc
 8004c10:	20001864 	.word	0x20001864

08004c14 <_ZN19ThreeWayProgressBar13stopAnimationEv>:
{
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	f100 05a4 	add.w	r5, r0, #164	@ 0xa4
 8004c1a:	f500 7457 	add.w	r4, r0, #860	@ 0x35c
        if (moveAnimationRunning)
 8004c1e:	f895 30ca 	ldrb.w	r3, [r5, #202]	@ 0xca
 8004c22:	b13b      	cbz	r3, 8004c34 <_ZN19ThreeWayProgressBar13stopAnimationEv+0x20>
            Application::getInstance()->unregisterTimerWidget(this);
 8004c24:	f014 ffc6 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8004c28:	4629      	mov	r1, r5
 8004c2a:	f014 fff9 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
            moveAnimationRunning = false;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f885 30ca 	strb.w	r3, [r5, #202]	@ 0xca
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8004c34:	35e8      	adds	r5, #232	@ 0xe8
 8004c36:	42a5      	cmp	r5, r4
 8004c38:	d1f1      	bne.n	8004c1e <_ZN19ThreeWayProgressBar13stopAnimationEv+0xa>
}
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}

08004c3c <_ZN19ThreeWayProgressBar16setBarPercentageEii>:
    invalidate();
}

void ThreeWayProgressBar::setBarPercentage(int barIndex, int percentage)
{
    if (percentage > 100)
 8004c3c:	2a64      	cmp	r2, #100	@ 0x64
    {
        percentage = 100;
    }

    bars[barIndex].updateArcEnd((int)((barIndex * 120) + (120 * percentage / 100.f)));
 8004c3e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8004cc0 <_ZN19ThreeWayProgressBar16setBarPercentageEii+0x84>
{
 8004c42:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (percentage > 100)
 8004c46:	bfa8      	it	ge
 8004c48:	2264      	movge	r2, #100	@ 0x64
    bars[barIndex].updateArcEnd((int)((barIndex * 120) + (120 * percentage / 100.f)));
 8004c4a:	2378      	movs	r3, #120	@ 0x78
 8004c4c:	254c      	movs	r5, #76	@ 0x4c
{
 8004c4e:	4604      	mov	r4, r0
    if (percentage > 100)
 8004c50:	4617      	mov	r7, r2
    bars[barIndex].updateArcEnd((int)((barIndex * 120) + (120 * percentage / 100.f)));
 8004c52:	435a      	muls	r2, r3
 8004c54:	434b      	muls	r3, r1
{
 8004c56:	460e      	mov	r6, r1
    bars[barIndex].updateArcEnd((int)((barIndex * 120) + (120 * percentage / 100.f)));
 8004c58:	ee07 2a10 	vmov	s14, r2
 8004c5c:	434d      	muls	r5, r1
 8004c5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c62:	f505 7857 	add.w	r8, r5, #860	@ 0x35c
 8004c66:	4480      	add	r8, r0
 8004c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c6c:	ee07 3a10 	vmov	s14, r3
        if (circleArcAngleEnd == endAngleQ5)
 8004c70:	f8d8 2040 	ldr.w	r2, [r8, #64]	@ 0x40
 8004c74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c80:	ee17 3a90 	vmov	r3, s15
 8004c84:	015b      	lsls	r3, r3, #5
 8004c86:	4293      	cmp	r3, r2
        CWRUtil::Q5 endAngleQ5 = CWRUtil::toQ5<T>(endAngle);
 8004c88:	9301      	str	r3, [sp, #4]
        if (circleArcAngleEnd == endAngleQ5)
 8004c8a:	d00e      	beq.n	8004caa <_ZN19ThreeWayProgressBar16setBarPercentageEii+0x6e>
        Rect minimalRect = getMinimalRectForUpdatedEndAngle(endAngleQ5);
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	a802      	add	r0, sp, #8
 8004c90:	aa01      	add	r2, sp, #4
        circleArcAngleEnd = endAngleQ5;
 8004c92:	4425      	add	r5, r4
        Rect minimalRect = getMinimalRectForUpdatedEndAngle(endAngleQ5);
 8004c94:	f011 fb14 	bl	80162c0 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>
        circleArcAngleEnd = endAngleQ5;
 8004c98:	9b01      	ldr	r3, [sp, #4]
        invalidateRect(minimalRect);
 8004c9a:	a902      	add	r1, sp, #8
 8004c9c:	4640      	mov	r0, r8
        circleArcAngleEnd = endAngleQ5;
 8004c9e:	f8c5 339c 	str.w	r3, [r5, #924]	@ 0x39c
        invalidateRect(minimalRect);
 8004ca2:	f8d5 335c 	ldr.w	r3, [r5, #860]	@ 0x35c
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	4798      	blx	r3
    circles[barIndex].setPercentage(percentage);
 8004caa:	23e8      	movs	r3, #232	@ 0xe8
 8004cac:	4639      	mov	r1, r7
 8004cae:	fb03 4006 	mla	r0, r3, r6, r4
 8004cb2:	30a4      	adds	r0, #164	@ 0xa4
}
 8004cb4:	b004      	add	sp, #16
 8004cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    circles[barIndex].setPercentage(percentage);
 8004cba:	f000 bab3 	b.w	8005224 <_ZN25ThreeWayProgressBarCircle13setPercentageEi>
 8004cbe:	bf00      	nop
 8004cc0:	42c80000 	.word	0x42c80000

08004cc4 <_ZN19ThreeWayProgressBar9setActiveEb>:
{
 8004cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    centerButton.setTouchable(!active);
 8004cc8:	f081 0301 	eor.w	r3, r1, #1
{
 8004ccc:	4604      	mov	r4, r0
 8004cce:	460d      	mov	r5, r1
 8004cd0:	f100 07a4 	add.w	r7, r0, #164	@ 0xa4
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8004cd4:	2600      	movs	r6, #0
        touchable = touch;
 8004cd6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
        if (active)
 8004cda:	b155      	cbz	r5, 8004cf2 <_ZN19ThreeWayProgressBar9setActiveEb+0x2e>
        visible = vis;
 8004cdc:	234c      	movs	r3, #76	@ 0x4c
 8004cde:	f204 3281 	addw	r2, r4, #897	@ 0x381
 8004ce2:	2101      	movs	r1, #1
            setBarPercentage(i, 0);
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	4373      	muls	r3, r6
 8004ce8:	54d1      	strb	r1, [r2, r3]
 8004cea:	2200      	movs	r2, #0
 8004cec:	4631      	mov	r1, r6
 8004cee:	f7ff ffa5 	bl	8004c3c <_ZN19ThreeWayProgressBar16setBarPercentageEii>
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8004cf2:	3601      	adds	r6, #1
        circles[i].setActive(active);
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	4629      	mov	r1, r5
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8004cf8:	37e8      	adds	r7, #232	@ 0xe8
        circles[i].setActive(active);
 8004cfa:	f000 fa69 	bl	80051d0 <_ZN25ThreeWayProgressBarCircle9setActiveEb>
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8004cfe:	2e03      	cmp	r6, #3
 8004d00:	d1eb      	bne.n	8004cda <_ZN19ThreeWayProgressBar9setActiveEb+0x16>
        typedText = t;
 8004d02:	350b      	adds	r5, #11
        updateTextPosition();
 8004d04:	f104 0060 	add.w	r0, r4, #96	@ 0x60
        typedText = t;
 8004d08:	f8a4 5094 	strh.w	r5, [r4, #148]	@ 0x94
        updateTextPosition();
 8004d0c:	f7ff ff4e 	bl	8004bac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    invalidate();
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	4620      	mov	r0, r4
 8004d14:	695b      	ldr	r3, [r3, #20]
}
 8004d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    invalidate();
 8004d1a:	4718      	bx	r3

08004d1c <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv>:
        if (moveAnimationRunning)
 8004d1c:	f890 30ca 	ldrb.w	r3, [r0, #202]	@ 0xca
    void nextMoveAnimationStep()
 8004d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d24:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 8004d26:	b143      	cbz	r3, 8004d3a <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv+0x1e>
            if (moveAnimationCounter < moveAnimationDelay)
 8004d28:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	@ 0xcc
 8004d2c:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	@ 0xce
 8004d30:	428a      	cmp	r2, r1
 8004d32:	d204      	bcs.n	8004d3e <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv+0x22>
                moveAnimationCounter++;
 8004d34:	3201      	adds	r2, #1
 8004d36:	f8a0 20cc 	strh.w	r2, [r0, #204]	@ 0xcc
    }
 8004d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8004d3e:	f8b0 30d0 	ldrh.w	r3, [r0, #208]	@ 0xd0
 8004d42:	18c8      	adds	r0, r1, r3
 8004d44:	4282      	cmp	r2, r0
 8004d46:	d91a      	bls.n	8004d7e <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv+0x62>
                    moveAnimationRunning = false;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
                    moveAnimationCounter = 0;
 8004d4e:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
                    Application::getInstance()->unregisterTimerWidget(this);
 8004d52:	f014 ff2f 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8004d56:	4621      	mov	r1, r4
 8004d58:	f014 ff62 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8004d5c:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d0ea      	beq.n	8004d3a <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv+0x1e>
 8004d64:	6803      	ldr	r3, [r0, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4798      	blx	r3
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d0e5      	beq.n	8004d3a <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv+0x1e>
                        moveAnimationEndedCallback->execute(*this);
 8004d6e:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 8004d72:	4621      	mov	r1, r4
 8004d74:	6803      	ldr	r3, [r0, #0]
    }
 8004d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        moveAnimationEndedCallback->execute(*this);
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4718      	bx	r3
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8004d7e:	1a52      	subs	r2, r2, r1
 8004d80:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	@ 0xd2
 8004d84:	f8d4 60dc 	ldr.w	r6, [r4, #220]	@ 0xdc
 8004d88:	b295      	uxth	r5, r2
 8004d8a:	f8b4 20d6 	ldrh.w	r2, [r4, #214]	@ 0xd6
 8004d8e:	1a52      	subs	r2, r2, r1
 8004d90:	4628      	mov	r0, r5
 8004d92:	2100      	movs	r1, #0
 8004d94:	b212      	sxth	r2, r2
 8004d96:	47b0      	blx	r6
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8004d98:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	@ 0xd4
 8004d9c:	f8b4 20d8 	ldrh.w	r2, [r4, #216]	@ 0xd8
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8004da0:	4606      	mov	r6, r0
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8004da2:	2100      	movs	r1, #0
 8004da4:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8004da8:	1ad2      	subs	r2, r2, r3
 8004daa:	4628      	mov	r0, r5
 8004dac:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	@ 0xd0
 8004db0:	b212      	sxth	r2, r2
 8004db2:	47b8      	blx	r7
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8004db4:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	@ 0xd4
 8004db8:	18c2      	adds	r2, r0, r3
 8004dba:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	@ 0xd2
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	18f1      	adds	r1, r6, r3
 8004dc2:	b212      	sxth	r2, r2
 8004dc4:	b209      	sxth	r1, r1
 8004dc6:	f7fc f821 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 8004dca:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	@ 0xcc
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8004dce:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	@ 0xce
                    moveAnimationCounter++;
 8004dd2:	3301      	adds	r3, #1
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8004dd4:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	@ 0xd0
                    moveAnimationCounter++;
 8004dd8:	b29b      	uxth	r3, r3
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8004dda:	440a      	add	r2, r1
 8004ddc:	4293      	cmp	r3, r2
                    moveAnimationCounter++;
 8004dde:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8004de2:	d9aa      	bls.n	8004d3a <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv+0x1e>
 8004de4:	e7b0      	b.n	8004d48 <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv+0x2c>

08004de6 <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004de6:	b508      	push	{r3, lr}
        nextMoveAnimationStep();
 8004de8:	f7ff ff98 	bl	8004d1c <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv>
    }
 8004dec:	bd08      	pop	{r3, pc}

08004dee <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 8004dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df0:	461d      	mov	r5, r3
        if (!moveAnimationRunning)
 8004df2:	f890 30ca 	ldrb.w	r3, [r0, #202]	@ 0xca
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 8004df6:	4604      	mov	r4, r0
 8004df8:	460f      	mov	r7, r1
 8004dfa:	4616      	mov	r6, r2
        if (!moveAnimationRunning)
 8004dfc:	b923      	cbnz	r3, 8004e08 <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE18startMoveAnimationEsstPFstsstES4_+0x1a>
            Application::getInstance()->registerTimerWidget(this);
 8004dfe:	f014 fed9 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8004e02:	4621      	mov	r1, r4
 8004e04:	f014 fedc 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 8004e08:	2300      	movs	r3, #0
        moveAnimationEndX = endX;
 8004e0a:	f8a4 70d6 	strh.w	r7, [r4, #214]	@ 0xd6
        moveAnimationEndY = endY;
 8004e0e:	f8a4 60d8 	strh.w	r6, [r4, #216]	@ 0xd8
        moveAnimationCounter = 0;
 8004e12:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
        moveAnimationStartX = T::getX();
 8004e16:	88a3      	ldrh	r3, [r4, #4]
        moveAnimationDuration = duration;
 8004e18:	f8a4 50d0 	strh.w	r5, [r4, #208]	@ 0xd0
        moveAnimationStartX = T::getX();
 8004e1c:	f8a4 30d2 	strh.w	r3, [r4, #210]	@ 0xd2
        moveAnimationStartY = T::getY();
 8004e20:	88e3      	ldrh	r3, [r4, #6]
 8004e22:	f8a4 30d4 	strh.w	r3, [r4, #212]	@ 0xd4
        moveAnimationXEquation = xProgressionEquation;
 8004e26:	9b06      	ldr	r3, [sp, #24]
 8004e28:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
        moveAnimationYEquation = yProgressionEquation;
 8004e2c:	9b07      	ldr	r3, [sp, #28]
 8004e2e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
        moveAnimationRunning = true;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 8004e38:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	@ 0xce
 8004e3c:	432b      	orrs	r3, r5
 8004e3e:	d102      	bne.n	8004e46 <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE18startMoveAnimationEsstPFstsstES4_+0x58>
            nextMoveAnimationStep(); // Set end position and shut down
 8004e40:	4620      	mov	r0, r4
 8004e42:	f7ff ff6b 	bl	8004d1c <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE21nextMoveAnimationStepEv>
    }
 8004e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e48 <_ZN19ThreeWayProgressBar5resetEv>:
{
 8004e48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e4c:	f100 06a4 	add.w	r6, r0, #164	@ 0xa4
 8004e50:	4604      	mov	r4, r0
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8004e52:	2500      	movs	r5, #0
        circles[i].moveTo(background.getX() + ((background.getWidth() - circles[i].getWidth()) / 2) + (-30 + ((i + 1) % 3) * 30), background.getY() + (background.getHeight() - circles[i].getHeight()) / 2);
 8004e54:	2703      	movs	r7, #3
 8004e56:	46b0      	mov	r8, r6
 8004e58:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
 8004e5c:	3501      	adds	r5, #1
 8004e5e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 8004e62:	4640      	mov	r0, r8
 8004e64:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8004e6c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004e70:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8004e74:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	@ 0x3c
 8004e78:	1a5b      	subs	r3, r3, r1
 8004e7a:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8004e7c:	b212      	sxth	r2, r2
 8004e7e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004e82:	eb01 0163 	add.w	r1, r1, r3, asr #1
 8004e86:	fbb5 f3f7 	udiv	r3, r5, r7
 8004e8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004e8e:	1aeb      	subs	r3, r5, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8004e96:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8004e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9e:	b209      	sxth	r1, r1
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea2:	4798      	blx	r3
        circles[i].setPercentage(0);
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	2100      	movs	r1, #0
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8004ea8:	f108 08e8 	add.w	r8, r8, #232	@ 0xe8
        circles[i].setPercentage(0);
 8004eac:	f000 f9ba 	bl	8005224 <_ZN25ThreeWayProgressBarCircle13setPercentageEi>
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8004eb0:	2d03      	cmp	r5, #3
 8004eb2:	d1d1      	bne.n	8004e58 <_ZN19ThreeWayProgressBar5resetEv+0x10>
    circles[1].setIcon(BITMAP_SMALL_CIRCLE_PAPERS_ICON_INACTIVE_ID, BITMAP_SMALL_CIRCLE_PAPERS_ICON_ACTIVE_ID);
 8004eb4:	f504 78c6 	add.w	r8, r4, #396	@ 0x18c
    circles[2].setIcon(BITMAP_SMALL_CIRCLE_FOLDER_ICON_INACTIVE_ID, BITMAP_SMALL_CIRCLE_FOLDER_ICON_ACTIVE_ID);
 8004eb8:	f504 771d 	add.w	r7, r4, #628	@ 0x274
    circles[0].setIcon(BITMAP_SMALL_CIRCLE_BIN_ICON_INACTIVE_ID, BITMAP_SMALL_CIRCLE_BIN_ICON_ACTIVE_ID);
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	2273      	movs	r2, #115	@ 0x73
 8004ec0:	2174      	movs	r1, #116	@ 0x74
    circles[0].startMoveAnimation(circles[0].getX(), circles[0].getY() - radius, 30, EasingEquations::cubicEaseInOut, EasingEquations::cubicEaseInOut);
 8004ec2:	4d25      	ldr	r5, [pc, #148]	@ (8004f58 <_ZN19ThreeWayProgressBar5resetEv+0x110>)
    circles[0].setIcon(BITMAP_SMALL_CIRCLE_BIN_ICON_INACTIVE_ID, BITMAP_SMALL_CIRCLE_BIN_ICON_ACTIVE_ID);
 8004ec4:	f000 f997 	bl	80051f6 <_ZN25ThreeWayProgressBarCircle7setIconEtt>
    circles[1].setIcon(BITMAP_SMALL_CIRCLE_PAPERS_ICON_INACTIVE_ID, BITMAP_SMALL_CIRCLE_PAPERS_ICON_ACTIVE_ID);
 8004ec8:	4640      	mov	r0, r8
 8004eca:	2277      	movs	r2, #119	@ 0x77
 8004ecc:	2178      	movs	r1, #120	@ 0x78
 8004ece:	f000 f992 	bl	80051f6 <_ZN25ThreeWayProgressBarCircle7setIconEtt>
    circles[2].setIcon(BITMAP_SMALL_CIRCLE_FOLDER_ICON_INACTIVE_ID, BITMAP_SMALL_CIRCLE_FOLDER_ICON_ACTIVE_ID);
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	2275      	movs	r2, #117	@ 0x75
 8004ed6:	2176      	movs	r1, #118	@ 0x76
 8004ed8:	f000 f98d 	bl	80051f6 <_ZN25ThreeWayProgressBarCircle7setIconEtt>
    circles[0].startMoveAnimation(circles[0].getX(), circles[0].getY() - radius, 30, EasingEquations::cubicEaseInOut, EasingEquations::cubicEaseInOut);
 8004edc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ede:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	@ 0xaa
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	1ad2      	subs	r2, r2, r3
 8004ee6:	231e      	movs	r3, #30
 8004ee8:	e9cd 5500 	strd	r5, r5, [sp]
 8004eec:	b212      	sxth	r2, r2
 8004eee:	f9b4 10a8 	ldrsh.w	r1, [r4, #168]	@ 0xa8
 8004ef2:	f7ff ff7c 	bl	8004dee <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE18startMoveAnimationEsstPFstsstES4_>
    circles[1].startMoveAnimation(background.getX() + background.getWidth() - circles[1].getWidth(), 158, 30, EasingEquations::cubicEaseInOut, EasingEquations::cubicEaseInOut);
 8004ef6:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8004ef8:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8004efa:	4640      	mov	r0, r8
 8004efc:	229e      	movs	r2, #158	@ 0x9e
 8004efe:	4419      	add	r1, r3
 8004f00:	f8b4 3194 	ldrh.w	r3, [r4, #404]	@ 0x194
 8004f04:	1ac9      	subs	r1, r1, r3
 8004f06:	231e      	movs	r3, #30
 8004f08:	e9cd 5500 	strd	r5, r5, [sp]
 8004f0c:	b209      	sxth	r1, r1
 8004f0e:	f7ff ff6e 	bl	8004dee <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE18startMoveAnimationEsstPFstsstES4_>
    circles[2].startMoveAnimation(background.getX(), 158, 30, EasingEquations::cubicEaseInOut, EasingEquations::cubicEaseInOut);
 8004f12:	231e      	movs	r3, #30
 8004f14:	229e      	movs	r2, #158	@ 0x9e
 8004f16:	4638      	mov	r0, r7
 8004f18:	e9cd 5500 	strd	r5, r5, [sp]
 8004f1c:	2500      	movs	r5, #0
 8004f1e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8004f22:	f7ff ff64 	bl	8004dee <_ZN8touchgfx12MoveAnimatorI25ThreeWayProgressBarCircleE18startMoveAnimationEsstPFstsstES4_>
        circles[i].setActive(false);
 8004f26:	4630      	mov	r0, r6
 8004f28:	4629      	mov	r1, r5
 8004f2a:	f884 5381 	strb.w	r5, [r4, #897]	@ 0x381
 8004f2e:	f000 f94f 	bl	80051d0 <_ZN25ThreeWayProgressBarCircle9setActiveEb>
 8004f32:	4629      	mov	r1, r5
 8004f34:	4640      	mov	r0, r8
 8004f36:	f884 53cd 	strb.w	r5, [r4, #973]	@ 0x3cd
 8004f3a:	f000 f949 	bl	80051d0 <_ZN25ThreeWayProgressBarCircle9setActiveEb>
 8004f3e:	4629      	mov	r1, r5
 8004f40:	4638      	mov	r0, r7
 8004f42:	f884 5419 	strb.w	r5, [r4, #1049]	@ 0x419
 8004f46:	f000 f943 	bl	80051d0 <_ZN25ThreeWayProgressBarCircle9setActiveEb>
    setActive(false);
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4620      	mov	r0, r4
}
 8004f4e:	b002      	add	sp, #8
 8004f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    setActive(false);
 8004f54:	f7ff beb6 	b.w	8004cc4 <_ZN19ThreeWayProgressBar9setActiveEb>
 8004f58:	0801b1ed 	.word	0x0801b1ed

08004f5c <_ZN19ThreeWayProgressBarC1Ev>:
        touchable(false),
 8004f5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8004f60:	4a91      	ldr	r2, [pc, #580]	@ (80051a8 <_ZN19ThreeWayProgressBarC1Ev+0x24c>)
ThreeWayProgressBar::ThreeWayProgressBar() :
 8004f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f66:	4604      	mov	r4, r0
        this->x = x;
 8004f68:	2500      	movs	r5, #0
    buttonPressedCallback(this, &ThreeWayProgressBar::buttonPressedHandler)
 8004f6a:	f100 0b34 	add.w	fp, r0, #52	@ 0x34
 8004f6e:	f104 08a4 	add.w	r8, r4, #164	@ 0xa4
 8004f72:	f104 0a60 	add.w	sl, r4, #96	@ 0x60
 8004f76:	4626      	mov	r6, r4
 8004f78:	f504 7957 	add.w	r9, r4, #860	@ 0x35c
 8004f7c:	4647      	mov	r7, r8
ThreeWayProgressBar::ThreeWayProgressBar() :
 8004f7e:	ed2d 8b02 	vpush	{d8}
 8004f82:	8483      	strh	r3, [r0, #36]	@ 0x24
 8004f84:	b085      	sub	sp, #20
    buttonPressedCallback(this, &ThreeWayProgressBar::buttonPressedHandler)
 8004f86:	4b89      	ldr	r3, [pc, #548]	@ (80051ac <_ZN19ThreeWayProgressBarC1Ev+0x250>)
 8004f88:	6342      	str	r2, [r0, #52]	@ 0x34
        setBitmap(bmp);
 8004f8a:	a903      	add	r1, sp, #12
 8004f8c:	4a88      	ldr	r2, [pc, #544]	@ (80051b0 <_ZN19ThreeWayProgressBarC1Ev+0x254>)
 8004f8e:	6003      	str	r3, [r0, #0]
 8004f90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f94:	6582      	str	r2, [r0, #88]	@ 0x58
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8004f96:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
        nextDrawChainElement(0),
 8004f9a:	61c5      	str	r5, [r0, #28]
 8004f9c:	6285      	str	r5, [r0, #40]	@ 0x28
    buttonClickedAction(0),
 8004f9e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8004fa0:	6505      	str	r5, [r0, #80]	@ 0x50
 8004fa2:	f8ad 300c 	strh.w	r3, [sp, #12]
        this->width = width;
 8004fa6:	e9c0 5501 	strd	r5, r5, [r0, #4]
        this->width = 0;
 8004faa:	e9c0 5503 	strd	r5, r5, [r0, #12]
        nextSibling(0),
 8004fae:	e9c0 5505 	strd	r5, r5, [r0, #20]
        this->width = width;
 8004fb2:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
        this->width = 0;
 8004fb6:	e9c0 5510 	strd	r5, r5, [r0, #64]	@ 0x40
 8004fba:	e9c0 5512 	strd	r5, r5, [r0, #72]	@ 0x48
        setBitmap(bmp);
 8004fbe:	4658      	mov	r0, fp
 8004fc0:	f012 f9c5 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    buttonPressedCallback(this, &ThreeWayProgressBar::buttonPressedHandler)
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	f012 fb05 	bl	80175d4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        moveAnimationEndedCallback(0)
 8004fca:	4638      	mov	r0, r7
 8004fcc:	37e8      	adds	r7, #232	@ 0xe8
 8004fce:	f000 f939 	bl	8005244 <_ZN25ThreeWayProgressBarCircleC1Ev>
 8004fd2:	4b78      	ldr	r3, [pc, #480]	@ (80051b4 <_ZN19ThreeWayProgressBarC1Ev+0x258>)
        moveAnimationRunning(false),
 8004fd4:	f807 5c1e 	strb.w	r5, [r7, #-30]
        moveAnimationEndedCallback(0)
 8004fd8:	f847 3ce8 	str.w	r3, [r7, #-232]
        moveAnimationCounter(0),
 8004fdc:	f827 5c1c 	strh.w	r5, [r7, #-28]
        moveAnimationDelay(0),
 8004fe0:	f827 5c1a 	strh.w	r5, [r7, #-26]
        moveAnimationEndedCallback(0)
 8004fe4:	f847 5c04 	str.w	r5, [r7, #-4]
 8004fe8:	454f      	cmp	r7, r9
 8004fea:	d1ee      	bne.n	8004fca <_ZN19ThreeWayProgressBarC1Ev+0x6e>
 8004fec:	4638      	mov	r0, r7
 8004fee:	f504 6988 	add.w	r9, r4, #1088	@ 0x440
 8004ff2:	f010 fedd 	bl	8015db0 <_ZN8touchgfx6CircleC1Ev>
 8004ff6:	f504 706a 	add.w	r0, r4, #936	@ 0x3a8
 8004ffa:	f010 fed9 	bl	8015db0 <_ZN8touchgfx6CircleC1Ev>
 8004ffe:	f504 707d 	add.w	r0, r4, #1012	@ 0x3f4
 8005002:	f010 fed5 	bl	8015db0 <_ZN8touchgfx6CircleC1Ev>
 8005006:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800500a:	22ff      	movs	r2, #255	@ 0xff
 800500c:	a903      	add	r1, sp, #12
 800500e:	4648      	mov	r0, r9
 8005010:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005014:	f010 f85a 	bl	80150cc <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh>
    {
 8005018:	4b67      	ldr	r3, [pc, #412]	@ (80051b8 <_ZN19ThreeWayProgressBarC1Ev+0x25c>)
    background.setBitmap(Bitmap(BITMAP_CONTROLS_WHEEL_BACKGROUND_ID));
 800501a:	a903      	add	r1, sp, #12
 800501c:	4658      	mov	r0, fp
 800501e:	f8c4 346c 	str.w	r3, [r4, #1132]	@ 0x46c
        bars[i].setCenter(bars[i].getWidth() / 2.0f, bars[i].getHeight() / 2.0f);
 8005022:	eeb6 8a00 	vmov.f32	s16, #96	@ 0x3f000000  0.5
        this->pmemfun_1 = pmemfun_1;
 8005026:	4b65      	ldr	r3, [pc, #404]	@ (80051bc <_ZN19ThreeWayProgressBarC1Ev+0x260>)
 8005028:	f8c4 5478 	str.w	r5, [r4, #1144]	@ 0x478
    radius = 103;
 800502c:	2500      	movs	r5, #0
 800502e:	f8c4 3474 	str.w	r3, [r4, #1140]	@ 0x474
 8005032:	231e      	movs	r3, #30
        this->pobject = pobject;
 8005034:	f8c4 4470 	str.w	r4, [r4, #1136]	@ 0x470
 8005038:	f8ad 300c 	strh.w	r3, [sp, #12]
    background.setBitmap(Bitmap(BITMAP_CONTROLS_WHEEL_BACKGROUND_ID));
 800503c:	f012 f987 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setXY(14, 14);
 8005040:	220e      	movs	r2, #14
 8005042:	4658      	mov	r0, fp
 8005044:	4611      	mov	r1, r2
 8005046:	f7fb fecb 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(background);
 800504a:	4659      	mov	r1, fp
 800504c:	4620      	mov	r0, r4
 800504e:	f00d fe7f 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005052:	2306      	movs	r3, #6
    centerButton.setBitmaps(Bitmap(BITMAP_CONTROL_CENTER_BUTTON_ID), Bitmap(BITMAP_CONTROL_CENTER_BUTTON_PRESSED_ID));
 8005054:	4650      	mov	r0, sl
 8005056:	aa03      	add	r2, sp, #12
 8005058:	f8ad 3008 	strh.w	r3, [sp, #8]
 800505c:	2307      	movs	r3, #7
 800505e:	a902      	add	r1, sp, #8
 8005060:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005064:	f012 f86c 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    centerButton.setXY(background.getX() + (background.getWidth() - centerButton.getWidth()) / 2, background.getY() + (background.getHeight() - centerButton.getHeight()) / 2);
 8005068:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	@ 0x6a
 800506c:	4650      	mov	r0, sl
 800506e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 8005072:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	@ 0x68
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800507a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800507e:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8005082:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	@ 0x3c
 8005086:	1a5b      	subs	r3, r3, r1
 8005088:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800508a:	b212      	sxth	r2, r2
 800508c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005090:	eb01 0163 	add.w	r1, r1, r3, asr #1
 8005094:	b209      	sxth	r1, r1
 8005096:	f7fb fea3 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    centerButton.setAction(buttonPressedCallback);
 800509a:	f204 436c 	addw	r3, r4, #1132	@ 0x46c
    centerButton.setLabelColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 800509e:	22ff      	movs	r2, #255	@ 0xff
 80050a0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 80050a4:	4611      	mov	r1, r2
 80050a6:	4610      	mov	r0, r2
 80050a8:	f017 fb0e 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    centerButton.setLabelColorPressed(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 80050ac:	22ff      	movs	r2, #255	@ 0xff
        color = col;
 80050ae:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98
 80050b2:	4611      	mov	r1, r2
 80050b4:	4610      	mov	r0, r2
 80050b6:	f017 fb07 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    add(centerButton);
 80050ba:	4651      	mov	r1, sl
        colorPressed = col;
 80050bc:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c
 80050c0:	4620      	mov	r0, r4
 80050c2:	f00d fe45 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80050c6:	2308      	movs	r3, #8
    bitmapPainter.setBitmap(Bitmap(BITMAP_CONTROL_COLOR_WHEEL_ID));
 80050c8:	a903      	add	r1, sp, #12
 80050ca:	4648      	mov	r0, r9
 80050cc:	f8ad 300c 	strh.w	r3, [sp, #12]
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 80050d0:	f44f 7a48 	mov.w	sl, #800	@ 0x320
 80050d4:	f00f ffe2 	bl	801509c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    radius = 103;
 80050d8:	2367      	movs	r3, #103	@ 0x67
 80050da:	6323      	str	r3, [r4, #48]	@ 0x30
        bars[i].setPosition(background.getX(), background.getY(), background.getWidth(), background.getHeight());
 80050dc:	f506 7757 	add.w	r7, r6, #860	@ 0x35c
 80050e0:	f8d6 335c 	ldr.w	r3, [r6, #860]	@ 0x35c
 80050e4:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	@ 0x3e
 80050e8:	4638      	mov	r0, r7
 80050ea:	9200      	str	r2, [sp, #0]
 80050ec:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	@ 0x3a
 80050f0:	f8d3 b028 	ldr.w	fp, [r3, #40]	@ 0x28
 80050f4:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 80050f8:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	@ 0x3c
 80050fc:	47d8      	blx	fp
        bars[i].setCenter(bars[i].getWidth() / 2.0f, bars[i].getHeight() / 2.0f);
 80050fe:	f9b6 3366 	ldrsh.w	r3, [r6, #870]	@ 0x366
        bars[i].setPainter(bitmapPainter);
 8005102:	4649      	mov	r1, r9
 8005104:	4638      	mov	r0, r7
        bars[i].setCenter(bars[i].getWidth() / 2.0f, bars[i].getHeight() / 2.0f);
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	f9b6 3364 	ldrsh.w	r3, [r6, #868]	@ 0x364
 800510e:	ee07 3a10 	vmov	s14, r3
 8005112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005116:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005118:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800511c:	f8c6 a3a0 	str.w	sl, [r6, #928]	@ 0x3a0
 8005120:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005124:	015b      	lsls	r3, r3, #5
 8005126:	ee27 7a08 	vmul.f32	s14, s14, s16
        this->circleRadius = CWRUtil::toQ5<T>(r);
 800512a:	f8c6 3394 	str.w	r3, [r6, #916]	@ 0x394
 800512e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
        bars[i].setPainter(bitmapPainter);
 8005132:	f8d6 335c 	ldr.w	r3, [r6, #860]	@ 0x35c
 8005136:	eebe 7aed 	vcvt.s32.f32	s14, s14, #5
 800513a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800513c:	edc6 7ae4 	vstr	s15, [r6, #912]	@ 0x390
 8005140:	ed86 7ae3 	vstr	s14, [r6, #908]	@ 0x38c
 8005144:	4798      	blx	r3
        bars[i].setCapPrecision(15);
 8005146:	210f      	movs	r1, #15
 8005148:	4638      	mov	r0, r7
 800514a:	f010 fe4d 	bl	8015de8 <_ZN8touchgfx6Circle15setCapPrecisionEi>
        visible = vis;
 800514e:	2300      	movs	r3, #0
        add(bars[i]);
 8005150:	4639      	mov	r1, r7
 8005152:	4620      	mov	r0, r4
 8005154:	f886 3381 	strb.w	r3, [r6, #897]	@ 0x381
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 8005158:	e9c6 55e6 	strd	r5, r5, [r6, #920]	@ 0x398
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 800515c:	f505 6570 	add.w	r5, r5, #3840	@ 0xf00
        add(bars[i]);
 8005160:	f00d fdf6 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for (int i = 0; i < NUMBER_OF_BARS; i++)
 8005164:	364c      	adds	r6, #76	@ 0x4c
 8005166:	f5b5 5f34 	cmp.w	r5, #11520	@ 0x2d00
 800516a:	d1b7      	bne.n	80050dc <_ZN19ThreeWayProgressBarC1Ev+0x180>
        add(circles[i]);
 800516c:	4641      	mov	r1, r8
 800516e:	4620      	mov	r0, r4
 8005170:	f00d fdee 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005174:	f504 71c6 	add.w	r1, r4, #396	@ 0x18c
 8005178:	4620      	mov	r0, r4
 800517a:	f00d fde9 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800517e:	f504 711d 	add.w	r1, r4, #628	@ 0x274
 8005182:	4620      	mov	r0, r4
 8005184:	f00d fde4 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    setWidth(background.getWidth() + 28);
 8005188:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
    reset();
 800518a:	4620      	mov	r0, r4
    setWidth(background.getWidth() + 28);
 800518c:	331c      	adds	r3, #28
        rect.width = width;
 800518e:	8123      	strh	r3, [r4, #8]
    setHeight(background.getHeight() + 28);
 8005190:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005192:	331c      	adds	r3, #28
        rect.height = height;
 8005194:	8163      	strh	r3, [r4, #10]
    reset();
 8005196:	f7ff fe57 	bl	8004e48 <_ZN19ThreeWayProgressBar5resetEv>
}
 800519a:	4620      	mov	r0, r4
 800519c:	b005      	add	sp, #20
 800519e:	ecbd 8b02 	vpop	{d8}
 80051a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a6:	bf00      	nop
 80051a8:	08025fb8 	.word	0x08025fb8
 80051ac:	08021c90 	.word	0x08021c90
 80051b0:	ffff0100 	.word	0xffff0100
 80051b4:	080238e8 	.word	0x080238e8
 80051b8:	08023988 	.word	0x08023988
 80051bc:	08004b2d 	.word	0x08004b2d

080051c0 <_ZN25ThreeWayProgressBarCircleD1Ev>:
    setHeight(background.getHeight());
}

ThreeWayProgressBarCircle::~ThreeWayProgressBarCircle()
{
}
 80051c0:	4770      	bx	lr

080051c2 <_ZN25ThreeWayProgressBarCircleD0Ev>:
ThreeWayProgressBarCircle::~ThreeWayProgressBarCircle()
 80051c2:	b510      	push	{r4, lr}
 80051c4:	4604      	mov	r4, r0
}
 80051c6:	21cc      	movs	r1, #204	@ 0xcc
 80051c8:	f019 fcad 	bl	801eb26 <_ZdlPvj>
 80051cc:	4620      	mov	r0, r4
 80051ce:	bd10      	pop	{r4, pc}

080051d0 <_ZN25ThreeWayProgressBarCircle9setActiveEb>:
    setActive(false);
    icon.setXY((background.getWidth() - icon.getWidth()) / 2, 4);
}

void ThreeWayProgressBarCircle::setActive(bool active)
{
 80051d0:	b513      	push	{r0, r1, r4, lr}
    active ? icon.setBitmap(Bitmap(iconActiveBmp)) : icon.setBitmap(Bitmap(iconBmp));
 80051d2:	f100 045c 	add.w	r4, r0, #92	@ 0x5c
 80051d6:	b161      	cbz	r1, 80051f2 <_ZN25ThreeWayProgressBarCircle9setActiveEb+0x22>
 80051d8:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80051da:	4620      	mov	r0, r4
 80051dc:	a901      	add	r1, sp, #4
 80051de:	f8ad 3004 	strh.w	r3, [sp, #4]
 80051e2:	f012 f8b4 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    icon.invalidate();
 80051e6:	4620      	mov	r0, r4
}
 80051e8:	b002      	add	sp, #8
 80051ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    icon.invalidate();
 80051ee:	f015 b8cc 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    active ? icon.setBitmap(Bitmap(iconActiveBmp)) : icon.setBitmap(Bitmap(iconBmp));
 80051f2:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80051f4:	e7f1      	b.n	80051da <_ZN25ThreeWayProgressBarCircle9setActiveEb+0xa>

080051f6 <_ZN25ThreeWayProgressBarCircle7setIconEtt>:
{
 80051f6:	b510      	push	{r4, lr}
 80051f8:	4604      	mov	r4, r0
    iconBmp = newIconBmp;
 80051fa:	8581      	strh	r1, [r0, #44]	@ 0x2c
    iconActiveBmp = newIconActiveBmp;
 80051fc:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    setActive(false);
 80051fe:	2100      	movs	r1, #0
 8005200:	f7ff ffe6 	bl	80051d0 <_ZN25ThreeWayProgressBarCircle9setActiveEb>
    icon.setXY((background.getWidth() - icon.getWidth()) / 2, 4);
 8005204:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8005208:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	@ 0x64
 800520c:	2204      	movs	r2, #4
 800520e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8005212:	1ac9      	subs	r1, r1, r3
 8005214:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005218:	f341 014f 	sbfx	r1, r1, #1, #16
 800521c:	f7fb fde0 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
}
 8005220:	bd10      	pop	{r4, pc}
	...

08005224 <_ZN25ThreeWayProgressBarCircle13setPercentageEi>:

void ThreeWayProgressBarCircle::setPercentage(int percentage)
{
 8005224:	b510      	push	{r4, lr}
 8005226:	4604      	mov	r4, r0
 8005228:	460b      	mov	r3, r1
    Unicode::snprintf(textBuffer, 5, "%d", percentage);
 800522a:	4a05      	ldr	r2, [pc, #20]	@ (8005240 <_ZN25ThreeWayProgressBarCircle13setPercentageEi+0x1c>)
 800522c:	2105      	movs	r1, #5
 800522e:	30c0      	adds	r0, #192	@ 0xc0
 8005230:	f017 fa3c 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    text.invalidate();
 8005234:	f104 0088 	add.w	r0, r4, #136	@ 0x88
}
 8005238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    text.invalidate();
 800523c:	f015 b8a5 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8005240:	08023468 	.word	0x08023468

08005244 <_ZN25ThreeWayProgressBarCircleC1Ev>:
ThreeWayProgressBarCircle::ThreeWayProgressBarCircle()
 8005244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	b085      	sub	sp, #20
 800524c:	f7fc fabe 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
 8005250:	2500      	movs	r5, #0
 8005252:	4626      	mov	r6, r4
 8005254:	4b3a      	ldr	r3, [pc, #232]	@ (8005340 <_ZN25ThreeWayProgressBarCircleC1Ev+0xfc>)
 8005256:	f64f 77ff 	movw	r7, #65535	@ 0xffff
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800525a:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 8005348 <_ZN25ThreeWayProgressBarCircleC1Ev+0x104>
 800525e:	f104 095c 	add.w	r9, r4, #92	@ 0x5c
 8005262:	62a5      	str	r5, [r4, #40]	@ 0x28
 8005264:	f846 3b30 	str.w	r3, [r6], #48
 8005268:	4630      	mov	r0, r6
 800526a:	f8ad 700c 	strh.w	r7, [sp, #12]
 800526e:	f7fc faad 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
        setBitmap(bmp);
 8005272:	a903      	add	r1, sp, #12
 8005274:	4630      	mov	r0, r6
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8005276:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 800527a:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
 800527e:	f884 7058 	strb.w	r7, [r4, #88]	@ 0x58
        setBitmap(bmp);
 8005282:	f012 f864 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8005286:	4648      	mov	r0, r9
 8005288:	f8ad 700c 	strh.w	r7, [sp, #12]
 800528c:	f7fc fa9e 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8005290:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
 8005294:	f104 0888 	add.w	r8, r4, #136	@ 0x88
        setBitmap(bmp);
 8005298:	a903      	add	r1, sp, #12
 800529a:	4648      	mov	r0, r9
 800529c:	f8a4 7082 	strh.w	r7, [r4, #130]	@ 0x82
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 80052a0:	f884 7084 	strb.w	r7, [r4, #132]	@ 0x84
        setBitmap(bmp);
 80052a4:	f012 f853 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80052a8:	4640      	mov	r0, r8
 80052aa:	f7fc fa8f 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80052ae:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
    background.setBitmap(Bitmap(BITMAP_CONTROLS_THREE_WAY_SMALL_CIRCLE_ID));
 80052b2:	a903      	add	r1, sp, #12
 80052b4:	4630      	mov	r0, r6
 80052b6:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 80052ba:	4b22      	ldr	r3, [pc, #136]	@ (8005344 <_ZN25ThreeWayProgressBarCircleC1Ev+0x100>)
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 80052bc:	f8a4 70ae 	strh.w	r7, [r4, #174]	@ 0xae
 80052c0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 80052c4:	231d      	movs	r3, #29
        color = col;
 80052c6:	f8c4 50b0 	str.w	r5, [r4, #176]	@ 0xb0
 80052ca:	f8a4 50b8 	strh.w	r5, [r4, #184]	@ 0xb8
 80052ce:	f8c4 50bc 	str.w	r5, [r4, #188]	@ 0xbc
 80052d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80052d6:	f012 f83a 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setXY(0, 0);
 80052da:	462a      	mov	r2, r5
 80052dc:	4629      	mov	r1, r5
 80052de:	4630      	mov	r0, r6
 80052e0:	f7fb fd7e 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(background);
 80052e4:	4631      	mov	r1, r6
 80052e6:	4620      	mov	r0, r4
 80052e8:	f00d fd32 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(icon);
 80052ec:	4649      	mov	r1, r9
 80052ee:	4620      	mov	r0, r4
 80052f0:	f00d fd2e 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    text.setTypedText(TypedText(T_THREE_WAY_PROGRESS_BAR_PERCENTAGE));
 80052f4:	4640      	mov	r0, r8
 80052f6:	f04f 010a 	mov.w	r1, #10
 80052fa:	f011 fe99 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    text.setWildcard(textBuffer);
 80052fe:	f104 03c0 	add.w	r3, r4, #192	@ 0xc0
    text.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 8005302:	22ff      	movs	r2, #255	@ 0xff
        wildcard = value;
 8005304:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
 8005308:	4611      	mov	r1, r2
 800530a:	4610      	mov	r0, r2
 800530c:	f017 f9dc 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    text.setPosition(18, 37, 30, 14);
 8005310:	230e      	movs	r3, #14
 8005312:	2225      	movs	r2, #37	@ 0x25
        this->color = color;
 8005314:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 8005318:	2112      	movs	r1, #18
 800531a:	4640      	mov	r0, r8
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	231e      	movs	r3, #30
 8005320:	f7fb fd46 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(text);
 8005324:	4641      	mov	r1, r8
 8005326:	4620      	mov	r0, r4
 8005328:	f00d fd12 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    setPercentage(0);
 800532c:	4620      	mov	r0, r4
 800532e:	4629      	mov	r1, r5
 8005330:	f7ff ff78 	bl	8005224 <_ZN25ThreeWayProgressBarCircle13setPercentageEi>
        rect.width = width;
 8005334:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
}
 8005336:	4620      	mov	r0, r4
 8005338:	60a3      	str	r3, [r4, #8]
 800533a:	b005      	add	sp, #20
 800533c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005340:	08021d20 	.word	0x08021d20
 8005344:	08023474 	.word	0x08023474
 8005348:	08025fb8 	.word	0x08025fb8

0800534c <_ZN17VerticalSlideMenuD1Ev>:
        images[i].setAnimationEndedCallback(animationEndedCallback);
        add(images[i]);
    }
}

VerticalSlideMenu::~VerticalSlideMenu()
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4b07      	ldr	r3, [pc, #28]	@ (800536c <_ZN17VerticalSlideMenuD1Ev+0x20>)
 8005350:	4604      	mov	r4, r0
 8005352:	f44f 65de 	mov.w	r5, #1776	@ 0x6f0
 8005356:	6003      	str	r3, [r0, #0]
 8005358:	5963      	ldr	r3, [r4, r5]
 800535a:	1960      	adds	r0, r4, r5
 800535c:	3dc0      	subs	r5, #192	@ 0xc0
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4798      	blx	r3
{
}
 8005362:	f115 0f90 	cmn.w	r5, #144	@ 0x90
 8005366:	d1f7      	bne.n	8005358 <_ZN17VerticalSlideMenuD1Ev+0xc>
 8005368:	4620      	mov	r0, r4
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	08021db0 	.word	0x08021db0

08005370 <_ZN8touchgfx8CallbackI17VerticalSlideMenuRKNS_18ZoomAnimationImageEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005370:	4770      	bx	lr

08005372 <_ZN8touchgfx8CallbackI17VerticalSlideMenuRKNS_18ZoomAnimationImageEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8005372:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8005374:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8005376:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8005378:	68c2      	ldr	r2, [r0, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	1055      	asrs	r5, r2, #1
 800537e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005382:	07d2      	lsls	r2, r2, #31
 8005384:	bf48      	it	mi
 8005386:	5962      	ldrmi	r2, [r4, r5]
    }
 8005388:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800538a:	bf48      	it	mi
 800538c:	58d3      	ldrmi	r3, [r2, r3]
 800538e:	4718      	bx	r3

08005390 <_ZNK8touchgfx8CallbackI17VerticalSlideMenuRKNS_18ZoomAnimationImageEvvE7isValidEv>:
    virtual bool isValid() const
 8005390:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8005392:	6840      	ldr	r0, [r0, #4]
 8005394:	b130      	cbz	r0, 80053a4 <_ZNK8touchgfx8CallbackI17VerticalSlideMenuRKNS_18ZoomAnimationImageEvvE7isValidEv+0x14>
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	b91a      	cbnz	r2, 80053a2 <_ZNK8touchgfx8CallbackI17VerticalSlideMenuRKNS_18ZoomAnimationImageEvvE7isValidEv+0x12>
 800539a:	68d8      	ldr	r0, [r3, #12]
 800539c:	f000 0001 	and.w	r0, r0, #1
 80053a0:	4770      	bx	lr
 80053a2:	2001      	movs	r0, #1
    }
 80053a4:	4770      	bx	lr

080053a6 <_ZN8touchgfx8CallbackI17VerticalSlideMenuRKNS_18ZoomAnimationImageEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80053a6:	b510      	push	{r4, lr}
 80053a8:	4604      	mov	r4, r0
 80053aa:	2110      	movs	r1, #16
 80053ac:	f019 fbbb 	bl	801eb26 <_ZdlPvj>
 80053b0:	4620      	mov	r0, r4
 80053b2:	bd10      	pop	{r4, pc}

080053b4 <_ZN17VerticalSlideMenuD0Ev>:
VerticalSlideMenu::~VerticalSlideMenu()
 80053b4:	b510      	push	{r4, lr}
 80053b6:	4604      	mov	r4, r0
}
 80053b8:	f7ff ffc8 	bl	800534c <_ZN17VerticalSlideMenuD1Ev>
 80053bc:	f240 71ec 	movw	r1, #2028	@ 0x7ec
 80053c0:	4620      	mov	r0, r4
 80053c2:	f019 fbb0 	bl	801eb26 <_ZdlPvj>
 80053c6:	4620      	mov	r0, r4
 80053c8:	bd10      	pop	{r4, pc}

080053ca <_ZN17VerticalSlideMenu21animationEndedHandlerERKN8touchgfx18ZoomAnimationImageE>:
    }
    currentSelected--;
}

void VerticalSlideMenu::animationEndedHandler(const ZoomAnimationImage& image)
{
 80053ca:	b510      	push	{r4, lr}
 80053cc:	4604      	mov	r4, r0
    if (elementSelectedAction && elementSelectedAction->isValid())
 80053ce:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80053d0:	b150      	cbz	r0, 80053e8 <_ZN17VerticalSlideMenu21animationEndedHandlerERKN8touchgfx18ZoomAnimationImageE+0x1e>
 80053d2:	6803      	ldr	r3, [r0, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4798      	blx	r3
 80053d8:	b130      	cbz	r0, 80053e8 <_ZN17VerticalSlideMenu21animationEndedHandlerERKN8touchgfx18ZoomAnimationImageE+0x1e>
    {
        elementSelectedAction->execute(*this);
 80053da:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80053dc:	4621      	mov	r1, r4
 80053de:	6803      	ldr	r3, [r0, #0]
    }

}
 80053e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        elementSelectedAction->execute(*this);
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	4718      	bx	r3
}
 80053e8:	bd10      	pop	{r4, pc}
	...

080053ec <_ZN17VerticalSlideMenuC1Ev>:
        this->x = x;
 80053ec:	2300      	movs	r3, #0
        touchable(false),
 80053ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
VerticalSlideMenu::VerticalSlideMenu() :
 80053f2:	b570      	push	{r4, r5, r6, lr}
        this->width = width;
 80053f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
        this->width = 0;
 80053f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
        nextSibling(0),
 80053fc:	e9c0 3305 	strd	r3, r3, [r0, #20]
        nextDrawChainElement(0),
 8005400:	61c3      	str	r3, [r0, #28]
    animationEndedCallback(this, &VerticalSlideMenu::animationEndedHandler)
 8005402:	4605      	mov	r5, r0
 8005404:	6283      	str	r3, [r0, #40]	@ 0x28
VerticalSlideMenu::VerticalSlideMenu() :
 8005406:	4604      	mov	r4, r0
    animationEndedCallback(this, &VerticalSlideMenu::animationEndedHandler)
 8005408:	4b0e      	ldr	r3, [pc, #56]	@ (8005444 <_ZN17VerticalSlideMenuC1Ev+0x58>)
 800540a:	f500 66f6 	add.w	r6, r0, #1968	@ 0x7b0
        touchable(false),
 800540e:	8482      	strh	r2, [r0, #36]	@ 0x24
 8005410:	f845 3b30 	str.w	r3, [r5], #48
 8005414:	4628      	mov	r0, r5
 8005416:	35c0      	adds	r5, #192	@ 0xc0
 8005418:	f00d fb32 	bl	8012a80 <_ZN8touchgfx18ZoomAnimationImageC1Ev>
 800541c:	42b5      	cmp	r5, r6
 800541e:	d1f9      	bne.n	8005414 <_ZN17VerticalSlideMenuC1Ev+0x28>
    animationDuration(10),
 8005420:	220a      	movs	r2, #10
    size(0),
 8005422:	2300      	movs	r3, #0
}
 8005424:	4620      	mov	r0, r4
        this->pobject = pobject;
 8005426:	f8c4 47e0 	str.w	r4, [r4, #2016]	@ 0x7e0
    animationDuration(10),
 800542a:	f8c4 27b4 	str.w	r2, [r4, #1972]	@ 0x7b4
    {
 800542e:	4a06      	ldr	r2, [pc, #24]	@ (8005448 <_ZN17VerticalSlideMenuC1Ev+0x5c>)
    size(0),
 8005430:	f884 37b0 	strb.w	r3, [r4, #1968]	@ 0x7b0
 8005434:	f8c4 27dc 	str.w	r2, [r4, #2012]	@ 0x7dc
        this->pmemfun_1 = pmemfun_1;
 8005438:	4a04      	ldr	r2, [pc, #16]	@ (800544c <_ZN17VerticalSlideMenuC1Ev+0x60>)
 800543a:	f8c4 37e8 	str.w	r3, [r4, #2024]	@ 0x7e8
 800543e:	f8c4 27e4 	str.w	r2, [r4, #2020]	@ 0x7e4
}
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	08021db0 	.word	0x08021db0
 8005448:	08023a90 	.word	0x08023a90
 800544c:	080053cb 	.word	0x080053cb

08005450 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_>:
    assert(selectedElementIndex < numberOfElements);
 8005450:	428a      	cmp	r2, r1
{
 8005452:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005456:	4604      	mov	r4, r0
 8005458:	4615      	mov	r5, r2
 800545a:	f8ad 3004 	strh.w	r3, [sp, #4]
    assert(selectedElementIndex < numberOfElements);
 800545e:	db05      	blt.n	800546c <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x1c>
 8005460:	4b73      	ldr	r3, [pc, #460]	@ (8005630 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x1e0>)
 8005462:	2120      	movs	r1, #32
 8005464:	4a73      	ldr	r2, [pc, #460]	@ (8005634 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x1e4>)
    assert(numberOfElements <= MAX_SIZE);
 8005466:	4874      	ldr	r0, [pc, #464]	@ (8005638 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x1e8>)
 8005468:	f01a fc84 	bl	801fd74 <__assert_func>
 800546c:	290a      	cmp	r1, #10
 800546e:	dd03      	ble.n	8005478 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x28>
 8005470:	4b72      	ldr	r3, [pc, #456]	@ (800563c <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x1ec>)
 8005472:	2121      	movs	r1, #33	@ 0x21
 8005474:	4a6f      	ldr	r2, [pc, #444]	@ (8005634 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x1e4>)
 8005476:	e7f6      	b.n	8005466 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x16>
    imagesYPositionDelta = 16;
 8005478:	2310      	movs	r3, #16
    size = numberOfElements;
 800547a:	f880 17b0 	strb.w	r1, [r0, #1968]	@ 0x7b0
    images[currentSelected].setWidth(largeImageWidth);
 800547e:	27c0      	movs	r7, #192	@ 0xc0
    images[currentSelected].setAnimationEndedCallback(animationEndedCallback);
 8005480:	f204 76dc 	addw	r6, r4, #2012	@ 0x7dc
    imagesYPositionDelta = 16;
 8005484:	f8c0 37c4 	str.w	r3, [r0, #1988]	@ 0x7c4
    smallImageWidth = smallBmp.getWidth();
 8005488:	a801      	add	r0, sp, #4
 800548a:	f017 fa1f 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800548e:	f8c4 07bc 	str.w	r0, [r4, #1980]	@ 0x7bc
    smallImageHeight = smallBmp.getHeight();
 8005492:	a801      	add	r0, sp, #4
 8005494:	f017 fa52 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8005498:	f8c4 07d0 	str.w	r0, [r4, #2000]	@ 0x7d0
    largeImageWidth = largeBmp.getWidth();
 800549c:	a808      	add	r0, sp, #32
 800549e:	f017 fa15 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80054a2:	f8c4 07c0 	str.w	r0, [r4, #1984]	@ 0x7c0
    largeImageHeight = largeBmp.getHeight();
 80054a6:	a808      	add	r0, sp, #32
 80054a8:	f017 fa48 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
    largeImageX = (getWidth() - largeImageWidth) / 2;
 80054ac:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80054b0:	f8d4 17c0 	ldr.w	r1, [r4, #1984]	@ 0x7c0
    largeImageHeight = largeBmp.getHeight();
 80054b4:	f8c4 07c8 	str.w	r0, [r4, #1992]	@ 0x7c8
    largeImageX = (getWidth() - largeImageWidth) / 2;
 80054b8:	1a5a      	subs	r2, r3, r1
    currentSelected = selectedElementIndex;
 80054ba:	f884 57b1 	strb.w	r5, [r4, #1969]	@ 0x7b1
 80054be:	b2ed      	uxtb	r5, r5
    largeImageX = (getWidth() - largeImageWidth) / 2;
 80054c0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    images[currentSelected].setWidth(largeImageWidth);
 80054c4:	437d      	muls	r5, r7
 80054c6:	b209      	sxth	r1, r1
    largeImageX = (getWidth() - largeImageWidth) / 2;
 80054c8:	1052      	asrs	r2, r2, #1
 80054ca:	f8c4 27d4 	str.w	r2, [r4, #2004]	@ 0x7d4
    largeImageY = (getHeight() - largeImageHeight) / 2;
 80054ce:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80054d2:	1a12      	subs	r2, r2, r0
 80054d4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80054d8:	1052      	asrs	r2, r2, #1
 80054da:	f8c4 27b8 	str.w	r2, [r4, #1976]	@ 0x7b8
    smallImageX = (getWidth() - smallImageWidth) / 2;
 80054de:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	@ 0x7bc
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80054e8:	105b      	asrs	r3, r3, #1
 80054ea:	f8c4 37cc 	str.w	r3, [r4, #1996]	@ 0x7cc
    fixedCenterCorrection = (largeImageHeight - smallImageHeight) / 2;
 80054ee:	f8d4 37d0 	ldr.w	r3, [r4, #2000]	@ 0x7d0
 80054f2:	1ac0      	subs	r0, r0, r3
 80054f4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80054f8:	1040      	asrs	r0, r0, #1
 80054fa:	f8c4 07d8 	str.w	r0, [r4, #2008]	@ 0x7d8
    images[currentSelected].setWidth(largeImageWidth);
 80054fe:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8005502:	4425      	add	r5, r4
 8005504:	4420      	add	r0, r4
 8005506:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    images[currentSelected].setHeight(largeImageHeight);
 8005508:	2530      	movs	r5, #48	@ 0x30
    images[currentSelected].setWidth(largeImageWidth);
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	4798      	blx	r3
    images[currentSelected].setHeight(largeImageHeight);
 800550e:	f894 37b1 	ldrb.w	r3, [r4, #1969]	@ 0x7b1
 8005512:	f9b4 17c8 	ldrsh.w	r1, [r4, #1992]	@ 0x7c8
 8005516:	fb17 5003 	smlabb	r0, r7, r3, r5
 800551a:	fb07 4303 	mla	r3, r7, r3, r4
 800551e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005520:	4420      	add	r0, r4
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	4798      	blx	r3
    images[currentSelected].setXY(largeImageX, largeImageY);
 8005526:	f894 37b1 	ldrb.w	r3, [r4, #1969]	@ 0x7b1
 800552a:	f9b4 27b8 	ldrsh.w	r2, [r4, #1976]	@ 0x7b8
 800552e:	fb17 5003 	smlabb	r0, r7, r3, r5
 8005532:	fb07 4303 	mla	r3, r7, r3, r4
 8005536:	f9b4 17d4 	ldrsh.w	r1, [r4, #2004]	@ 0x7d4
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	4420      	add	r0, r4
 800553e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005540:	4798      	blx	r3
    images[currentSelected].setAnimationEndedCallback(animationEndedCallback);
 8005542:	f894 37b1 	ldrb.w	r3, [r4, #1969]	@ 0x7b1
    add(images[currentSelected]);
 8005546:	4620      	mov	r0, r4
     *
     * @see GenericCallback
     */
    void setAnimationEndedCallback(touchgfx::GenericCallback< const ZoomAnimationImage& >& callback)
    {
        animationEndedAction = &callback;
 8005548:	fb07 4203 	mla	r2, r7, r3, r4
 800554c:	fb17 5103 	smlabb	r1, r7, r3, r5
 8005550:	f8c2 60ec 	str.w	r6, [r2, #236]	@ 0xec
 8005554:	4421      	add	r1, r4
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800555a:	4798      	blx	r3
    for (int i = currentSelected - 1; i >= 0; i--)
 800555c:	f894 87b1 	ldrb.w	r8, [r4, #1969]	@ 0x7b1
 8005560:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 8005564:	eb04 1585 	add.w	r5, r4, r5, lsl #6
 8005568:	f1a5 07c0 	sub.w	r7, r5, #192	@ 0xc0
 800556c:	f1b8 0f00 	cmp.w	r8, #0
 8005570:	d110      	bne.n	8005594 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x144>
    for (int i = currentSelected + 1; i < size; i++)
 8005572:	f894 57b1 	ldrb.w	r5, [r4, #1969]	@ 0x7b1
 8005576:	f105 0801 	add.w	r8, r5, #1
 800557a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800557e:	eb04 1585 	add.w	r5, r4, r5, lsl #6
 8005582:	f894 37b0 	ldrb.w	r3, [r4, #1968]	@ 0x7b0
 8005586:	f105 07c0 	add.w	r7, r5, #192	@ 0xc0
 800558a:	4543      	cmp	r3, r8
 800558c:	dc28      	bgt.n	80055e0 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x190>
}
 800558e:	b002      	add	sp, #8
 8005590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        images[i].setWidth(smallImageWidth);
 8005594:	3d90      	subs	r5, #144	@ 0x90
 8005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005598:	f9b4 17bc 	ldrsh.w	r1, [r4, #1980]	@ 0x7bc
 800559c:	f108 38ff 	add.w	r8, r8, #4294967295
 80055a0:	4628      	mov	r0, r5
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	4798      	blx	r3
        images[i].setHeight(smallImageHeight);
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	4628      	mov	r0, r5
 80055aa:	f9b4 17d0 	ldrsh.w	r1, [r4, #2000]	@ 0x7d0
 80055ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b0:	4798      	blx	r3
        images[i].setXY(smallImageX, images[i + 1].getY() - imagesYPositionDelta - images[i].getHeight());
 80055b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80055b4:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 80055b8:	4628      	mov	r0, r5
 80055ba:	f9b4 17cc 	ldrsh.w	r1, [r4, #1996]	@ 0x7cc
 80055be:	1ad2      	subs	r2, r2, r3
 80055c0:	f8d4 37c4 	ldr.w	r3, [r4, #1988]	@ 0x7c4
 80055c4:	1ad2      	subs	r2, r2, r3
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	b212      	sxth	r2, r2
 80055ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055cc:	4798      	blx	r3
 80055ce:	f8c7 60ec 	str.w	r6, [r7, #236]	@ 0xec
        add(images[i]);
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	4629      	mov	r1, r5
 80055d6:	4620      	mov	r0, r4
 80055d8:	463d      	mov	r5, r7
 80055da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055dc:	4798      	blx	r3
    for (int i = currentSelected - 1; i >= 0; i--)
 80055de:	e7c3      	b.n	8005568 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x118>
        images[i].setWidth(smallImageWidth);
 80055e0:	35f0      	adds	r5, #240	@ 0xf0
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	f9b4 17bc 	ldrsh.w	r1, [r4, #1980]	@ 0x7bc
    for (int i = currentSelected + 1; i < size; i++)
 80055e8:	f108 0801 	add.w	r8, r8, #1
        images[i].setWidth(smallImageWidth);
 80055ec:	4628      	mov	r0, r5
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f0:	4798      	blx	r3
        images[i].setHeight(smallImageHeight);
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	4628      	mov	r0, r5
 80055f6:	f9b4 17d0 	ldrsh.w	r1, [r4, #2000]	@ 0x7d0
 80055fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fc:	4798      	blx	r3
        images[i].setXY(smallImageX, images[i - 1].getY() + images[i - 1].getHeight() + imagesYPositionDelta);
 80055fe:	f837 3c86 	ldrh.w	r3, [r7, #-134]
 8005602:	f837 2c8a 	ldrh.w	r2, [r7, #-138]
 8005606:	4628      	mov	r0, r5
 8005608:	f9b4 17cc 	ldrsh.w	r1, [r4, #1996]	@ 0x7cc
 800560c:	441a      	add	r2, r3
 800560e:	f8d4 37c4 	ldr.w	r3, [r4, #1988]	@ 0x7c4
 8005612:	441a      	add	r2, r3
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	b212      	sxth	r2, r2
 8005618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561a:	4798      	blx	r3
 800561c:	f8c7 60ec 	str.w	r6, [r7, #236]	@ 0xec
        add(images[i]);
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	4629      	mov	r1, r5
 8005624:	4620      	mov	r0, r4
    for (int i = currentSelected + 1; i < size; i++)
 8005626:	463d      	mov	r5, r7
        add(images[i]);
 8005628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800562a:	4798      	blx	r3
    for (int i = currentSelected + 1; i < size; i++)
 800562c:	e7a9      	b.n	8005582 <_ZN17VerticalSlideMenu5setupEiiN8touchgfx6BitmapES1_+0x132>
 800562e:	bf00      	nop
 8005630:	08023998 	.word	0x08023998
 8005634:	080239c0 	.word	0x080239c0
 8005638:	08023a0c 	.word	0x08023a0c
 800563c:	08023a69 	.word	0x08023a69

08005640 <_ZN17VerticalSlideMenu20setBitmapsForElementEitt>:
{
 8005640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return rect.width;
 8005642:	24c0      	movs	r4, #192	@ 0xc0
 8005644:	f8ad 2000 	strh.w	r2, [sp]
    images[elementIndex].setBitmaps(Bitmap(smallBmp), Bitmap(largeBmp));
 8005648:	aa01      	add	r2, sp, #4
 800564a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800564e:	4361      	muls	r1, r4
 8005650:	1845      	adds	r5, r0, r1
 8005652:	3130      	adds	r1, #48	@ 0x30
 8005654:	1844      	adds	r4, r0, r1
 8005656:	4669      	mov	r1, sp
 8005658:	f9b5 7038 	ldrsh.w	r7, [r5, #56]	@ 0x38
 800565c:	4620      	mov	r0, r4
        return rect.height;
 800565e:	f9b5 603a 	ldrsh.w	r6, [r5, #58]	@ 0x3a
 8005662:	f00d fab7 	bl	8012bd4 <_ZN8touchgfx18ZoomAnimationImage10setBitmapsERKNS_6BitmapES3_>
    images[elementIndex].setWidth(oldWidth);
 8005666:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005668:	4639      	mov	r1, r7
 800566a:	4620      	mov	r0, r4
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	4798      	blx	r3
    images[elementIndex].setHeight(oldHeight);
 8005670:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005672:	4631      	mov	r1, r6
 8005674:	4620      	mov	r0, r4
 8005676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005678:	b003      	add	sp, #12
 800567a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    images[elementIndex].setHeight(oldHeight);
 800567e:	4718      	bx	r3

08005680 <_ZN17VerticalSlideMenu9animatingEv>:

bool VerticalSlideMenu::animating()
{
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4604      	mov	r4, r0
 8005684:	f100 0530 	add.w	r5, r0, #48	@ 0x30
    for (int i = 0; i < size; i++)
 8005688:	2600      	movs	r6, #0
 800568a:	f894 37b0 	ldrb.w	r3, [r4, #1968]	@ 0x7b0
 800568e:	42b3      	cmp	r3, r6
 8005690:	dc01      	bgt.n	8005696 <_ZN17VerticalSlideMenu9animatingEv+0x16>
        if (images[i].isRunning())
        {
            return true;
        }
    }
    return false;
 8005692:	2000      	movs	r0, #0
}
 8005694:	bd70      	pop	{r4, r5, r6, pc}
        if (images[i].isRunning())
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	4628      	mov	r0, r5
 800569a:	35c0      	adds	r5, #192	@ 0xc0
 800569c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056a0:	4798      	blx	r3
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d1f6      	bne.n	8005694 <_ZN17VerticalSlideMenu9animatingEv+0x14>
    for (int i = 0; i < size; i++)
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7ef      	b.n	800568a <_ZN17VerticalSlideMenu9animatingEv+0xa>
	...

080056ac <_ZN17VerticalSlideMenu9animateUpEv>:
{
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	b089      	sub	sp, #36	@ 0x24
 80056b2:	4605      	mov	r5, r0
    if (animating() || currentSelected == size - 1)
 80056b4:	f7ff ffe4 	bl	8005680 <_ZN17VerticalSlideMenu9animatingEv>
 80056b8:	4607      	mov	r7, r0
 80056ba:	b990      	cbnz	r0, 80056e2 <_ZN17VerticalSlideMenu9animateUpEv+0x36>
 80056bc:	f895 37b0 	ldrb.w	r3, [r5, #1968]	@ 0x7b0
 80056c0:	f895 27b1 	ldrb.w	r2, [r5, #1969]	@ 0x7b1
 80056c4:	3b01      	subs	r3, #1
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d00b      	beq.n	80056e2 <_ZN17VerticalSlideMenu9animateUpEv+0x36>
 80056ca:	46a8      	mov	r8, r5
 80056cc:	4e38      	ldr	r6, [pc, #224]	@ (80057b0 <_ZN17VerticalSlideMenu9animateUpEv+0x104>)
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() - smallImageHeight - imagesYPositionDelta, smallImageWidth, smallImageHeight, animationDuration,
 80056ce:	4681      	mov	r9, r0
    for (int i = 0; i < size; i++)
 80056d0:	f895 37b0 	ldrb.w	r3, [r5, #1968]	@ 0x7b0
 80056d4:	42bb      	cmp	r3, r7
 80056d6:	dc07      	bgt.n	80056e8 <_ZN17VerticalSlideMenu9animateUpEv+0x3c>
    currentSelected++;
 80056d8:	f895 37b1 	ldrb.w	r3, [r5, #1969]	@ 0x7b1
 80056dc:	3301      	adds	r3, #1
 80056de:	f885 37b1 	strb.w	r3, [r5, #1969]	@ 0x7b1
}
 80056e2:	b009      	add	sp, #36	@ 0x24
 80056e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return rect.y;
 80056e8:	f9b8 3036 	ldrsh.w	r3, [r8, #54]	@ 0x36
            images[i].moveTo(images[i].getX(), images[i].getY() - images[i].getHeight() - imagesYPositionDelta);
 80056ec:	f108 0030 	add.w	r0, r8, #48	@ 0x30
        return rect.height;
 80056f0:	f9b8 e03a 	ldrsh.w	lr, [r8, #58]	@ 0x3a
 80056f4:	f8d5 27c4 	ldr.w	r2, [r5, #1988]	@ 0x7c4
        if (images[i].getY() + images[i].getHeight() < 0)
 80056f8:	eb13 0f0e 	cmn.w	r3, lr
            images[i].moveTo(images[i].getX(), images[i].getY() - images[i].getHeight() - imagesYPositionDelta);
 80056fc:	f8b8 c036 	ldrh.w	ip, [r8, #54]	@ 0x36
 8005700:	b294      	uxth	r4, r2
        return rect.x;
 8005702:	f9b8 1034 	ldrsh.w	r1, [r8, #52]	@ 0x34
        if (images[i].getY() + images[i].getHeight() < 0)
 8005706:	d50c      	bpl.n	8005722 <_ZN17VerticalSlideMenu9animateUpEv+0x76>
            images[i].moveTo(images[i].getX(), images[i].getY() - images[i].getHeight() - imagesYPositionDelta);
 8005708:	ebac 0204 	sub.w	r2, ip, r4
 800570c:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8005710:	eba2 020e 	sub.w	r2, r2, lr
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	b212      	sxth	r2, r2
 8005718:	4798      	blx	r3
    for (int i = 0; i < size; i++)
 800571a:	3701      	adds	r7, #1
 800571c:	f108 08c0 	add.w	r8, r8, #192	@ 0xc0
 8005720:	e7d6      	b.n	80056d0 <_ZN17VerticalSlideMenu9animateUpEv+0x24>
        else if (images[i].getY() - images[i].getHeight() - imagesYPositionDelta > getHeight())
 8005722:	eba3 030e 	sub.w	r3, r3, lr
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 800572c:	4293      	cmp	r3, r2
 800572e:	dceb      	bgt.n	8005708 <_ZN17VerticalSlideMenu9animateUpEv+0x5c>
        else if (i == currentSelected + 1)
 8005730:	f895 b7b1 	ldrb.w	fp, [r5, #1969]	@ 0x7b1
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() - largeImageHeight - imagesYPositionDelta + fixedCenterCorrection, largeImageWidth, largeImageHeight, animationDuration,
 8005734:	f8b5 e7b4 	ldrh.w	lr, [r5, #1972]	@ 0x7b4
        else if (i == currentSelected + 1)
 8005738:	f10b 0301 	add.w	r3, fp, #1
 800573c:	42bb      	cmp	r3, r7
 800573e:	d115      	bne.n	800576c <_ZN17VerticalSlideMenu9animateUpEv+0xc0>
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() - largeImageHeight - imagesYPositionDelta + fixedCenterCorrection, largeImageWidth, largeImageHeight, animationDuration,
 8005740:	f8d5 37c8 	ldr.w	r3, [r5, #1992]	@ 0x7c8
 8005744:	f8d5 27d8 	ldr.w	r2, [r5, #2008]	@ 0x7d8
 8005748:	441c      	add	r4, r3
 800574a:	b21b      	sxth	r3, r3
 800574c:	1b12      	subs	r2, r2, r4
 800574e:	2400      	movs	r4, #0
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	4462      	add	r2, ip
 8005754:	e9cd 6605 	strd	r6, r6, [sp, #20]
 8005758:	e9cd 6603 	strd	r6, r6, [sp, #12]
 800575c:	e9cd e401 	strd	lr, r4, [sp, #4]
 8005760:	f9b5 37c0 	ldrsh.w	r3, [r5, #1984]	@ 0x7c0
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() - smallImageHeight - imagesYPositionDelta, smallImageWidth, smallImageHeight, animationDuration,
 8005764:	b212      	sxth	r2, r2
 8005766:	f00d f95f 	bl	8012a28 <_ZN8touchgfx18ZoomAnimationImage25startZoomAndMoveAnimationEsssstNS0_8ZoomModeEPFstsstES3_S3_S3_>
 800576a:	e7d6      	b.n	800571a <_ZN17VerticalSlideMenu9animateUpEv+0x6e>
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() - smallImageHeight - imagesYPositionDelta - fixedCenterCorrection, smallImageWidth, smallImageHeight, animationDuration,
 800576c:	f8d5 27d0 	ldr.w	r2, [r5, #2000]	@ 0x7d0
        else if (i == currentSelected)
 8005770:	45bb      	cmp	fp, r7
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() - smallImageHeight - imagesYPositionDelta - fixedCenterCorrection, smallImageWidth, smallImageHeight, animationDuration,
 8005772:	f9b5 37bc 	ldrsh.w	r3, [r5, #1980]	@ 0x7bc
 8005776:	4414      	add	r4, r2
 8005778:	fa0f fa82 	sxth.w	sl, r2
 800577c:	b2a4      	uxth	r4, r4
        else if (i == currentSelected)
 800577e:	d10d      	bne.n	800579c <_ZN17VerticalSlideMenu9animateUpEv+0xf0>
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() - smallImageHeight - imagesYPositionDelta - fixedCenterCorrection, smallImageWidth, smallImageHeight, animationDuration,
 8005780:	f8d5 27d8 	ldr.w	r2, [r5, #2008]	@ 0x7d8
 8005784:	4414      	add	r4, r2
 8005786:	ebac 0204 	sub.w	r2, ip, r4
 800578a:	2400      	movs	r4, #0
 800578c:	e9cd 6605 	strd	r6, r6, [sp, #20]
 8005790:	e9cd 6603 	strd	r6, r6, [sp, #12]
 8005794:	9402      	str	r4, [sp, #8]
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() - smallImageHeight - imagesYPositionDelta, smallImageWidth, smallImageHeight, animationDuration,
 8005796:	e9cd ae00 	strd	sl, lr, [sp]
 800579a:	e7e3      	b.n	8005764 <_ZN17VerticalSlideMenu9animateUpEv+0xb8>
 800579c:	ebac 0204 	sub.w	r2, ip, r4
 80057a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80057a4:	e9cd 6605 	strd	r6, r6, [sp, #20]
 80057a8:	e9cd 6603 	strd	r6, r6, [sp, #12]
 80057ac:	e7f3      	b.n	8005796 <_ZN17VerticalSlideMenu9animateUpEv+0xea>
 80057ae:	bf00      	nop
 80057b0:	0801b59b 	.word	0x0801b59b

080057b4 <_ZN17VerticalSlideMenu11animateDownEv>:
{
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	b08d      	sub	sp, #52	@ 0x34
 80057ba:	4604      	mov	r4, r0
    if (animating() || currentSelected == 0)
 80057bc:	f7ff ff60 	bl	8005680 <_ZN17VerticalSlideMenu9animatingEv>
 80057c0:	4606      	mov	r6, r0
 80057c2:	b968      	cbnz	r0, 80057e0 <_ZN17VerticalSlideMenu11animateDownEv+0x2c>
 80057c4:	f894 37b1 	ldrb.w	r3, [r4, #1969]	@ 0x7b1
 80057c8:	b153      	cbz	r3, 80057e0 <_ZN17VerticalSlideMenu11animateDownEv+0x2c>
 80057ca:	4627      	mov	r7, r4
 80057cc:	4d40      	ldr	r5, [pc, #256]	@ (80058d0 <_ZN17VerticalSlideMenu11animateDownEv+0x11c>)
    for (int i = 0; i < size; i++)
 80057ce:	f894 37b0 	ldrb.w	r3, [r4, #1968]	@ 0x7b0
 80057d2:	42b3      	cmp	r3, r6
 80057d4:	dc07      	bgt.n	80057e6 <_ZN17VerticalSlideMenu11animateDownEv+0x32>
    currentSelected--;
 80057d6:	f894 37b1 	ldrb.w	r3, [r4, #1969]	@ 0x7b1
 80057da:	3b01      	subs	r3, #1
 80057dc:	f884 37b1 	strb.w	r3, [r4, #1969]	@ 0x7b1
}
 80057e0:	b00d      	add	sp, #52	@ 0x34
 80057e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return rect.y;
 80057e6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
            images[i].moveTo(images[i].getX(), images[i].getY() + images[i].getHeight() + imagesYPositionDelta);
 80057ea:	f107 0830 	add.w	r8, r7, #48	@ 0x30
        if (images[i].getY() > getHeight())
 80057ee:	f9b4 e00a 	ldrsh.w	lr, [r4, #10]
            images[i].moveTo(images[i].getX(), images[i].getY() + images[i].getHeight() + imagesYPositionDelta);
 80057f2:	f8d4 07c4 	ldr.w	r0, [r4, #1988]	@ 0x7c4
        if (images[i].getY() > getHeight())
 80057f6:	4596      	cmp	lr, r2
            images[i].moveTo(images[i].getX(), images[i].getY() + images[i].getHeight() + imagesYPositionDelta);
 80057f8:	f8b7 c036 	ldrh.w	ip, [r7, #54]	@ 0x36
 80057fc:	b283      	uxth	r3, r0
        return rect.x;
 80057fe:	f9b7 a034 	ldrsh.w	sl, [r7, #52]	@ 0x34
        return rect.height;
 8005802:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	@ 0x3a
        if (images[i].getY() > getHeight())
 8005806:	da0b      	bge.n	8005820 <_ZN17VerticalSlideMenu11animateDownEv+0x6c>
            images[i].moveTo(images[i].getX(), images[i].getY() + images[i].getHeight() + imagesYPositionDelta);
 8005808:	eb0c 0201 	add.w	r2, ip, r1
 800580c:	4640      	mov	r0, r8
 800580e:	4651      	mov	r1, sl
 8005810:	441a      	add	r2, r3
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	b212      	sxth	r2, r2
 8005816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005818:	4798      	blx	r3
    for (int i = 0; i < size; i++)
 800581a:	3601      	adds	r6, #1
 800581c:	37c0      	adds	r7, #192	@ 0xc0
 800581e:	e7d6      	b.n	80057ce <_ZN17VerticalSlideMenu11animateDownEv+0x1a>
        else if (images[i].getY() + 2 * images[i].getHeight() + imagesYPositionDelta < 0)
 8005820:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8005824:	42c2      	cmn	r2, r0
 8005826:	d4ef      	bmi.n	8005808 <_ZN17VerticalSlideMenu11animateDownEv+0x54>
        else if (i == currentSelected - 1)
 8005828:	f894 e7b1 	ldrb.w	lr, [r4, #1969]	@ 0x7b1
 800582c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8005830:	42b2      	cmp	r2, r6
 8005832:	d12b      	bne.n	800588c <_ZN17VerticalSlideMenu11animateDownEv+0xd8>
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() + largeImageHeight + imagesYPositionDelta - fixedCenterCorrection, Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_LARGE_ID).getWidth(), Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_LARGE_ID).getHeight(), animationDuration,
 8005834:	f8d4 27c8 	ldr.w	r2, [r4, #1992]	@ 0x7c8
 8005838:	eb03 0b02 	add.w	fp, r3, r2
 800583c:	f8d4 37d8 	ldr.w	r3, [r4, #2008]	@ 0x7d8
 8005840:	ebab 0b03 	sub.w	fp, fp, r3
 8005844:	44e3      	add	fp, ip
 8005846:	fa0f f38b 	sxth.w	r3, fp
 800584a:	f04f 0b11 	mov.w	fp, #17
 800584e:	9309      	str	r3, [sp, #36]	@ 0x24
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() + smallImageHeight + imagesYPositionDelta  + fixedCenterCorrection, Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_SMALL_ID).getWidth(), Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_SMALL_ID).getHeight(), animationDuration,
 8005850:	a80a      	add	r0, sp, #40	@ 0x28
 8005852:	f8ad b028 	strh.w	fp, [sp, #40]	@ 0x28
 8005856:	f017 f839 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800585a:	4681      	mov	r9, r0
 800585c:	a80b      	add	r0, sp, #44	@ 0x2c
 800585e:	f8ad b02c 	strh.w	fp, [sp, #44]	@ 0x2c
 8005862:	f017 f86b 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8005866:	2200      	movs	r2, #0
 8005868:	b200      	sxth	r0, r0
 800586a:	9202      	str	r2, [sp, #8]
 800586c:	fa0f f389 	sxth.w	r3, r9
 8005870:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8005874:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8005878:	f8b4 27b4 	ldrh.w	r2, [r4, #1972]	@ 0x7b4
 800587c:	9000      	str	r0, [sp, #0]
 800587e:	9201      	str	r2, [sp, #4]
 8005880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() + smallImageHeight + imagesYPositionDelta, images[i].getWidth(), images[i].getHeight(), animationDuration,
 8005882:	4651      	mov	r1, sl
 8005884:	4640      	mov	r0, r8
 8005886:	f00d f8cf 	bl	8012a28 <_ZN8touchgfx18ZoomAnimationImage25startZoomAndMoveAnimationEsssstNS0_8ZoomModeEPFstsstES3_S3_S3_>
 800588a:	e7c6      	b.n	800581a <_ZN17VerticalSlideMenu11animateDownEv+0x66>
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() + smallImageHeight + imagesYPositionDelta  + fixedCenterCorrection, Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_SMALL_ID).getWidth(), Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_SMALL_ID).getHeight(), animationDuration,
 800588c:	f8d4 07d0 	ldr.w	r0, [r4, #2000]	@ 0x7d0
        else if (i == currentSelected)
 8005890:	45b6      	cmp	lr, r6
 8005892:	eb03 0200 	add.w	r2, r3, r0
 8005896:	b292      	uxth	r2, r2
 8005898:	d10a      	bne.n	80058b0 <_ZN17VerticalSlideMenu11animateDownEv+0xfc>
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() + smallImageHeight + imagesYPositionDelta  + fixedCenterCorrection, Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_SMALL_ID).getWidth(), Bitmap(BITMAP_CONTROL_MENU_ICON_DATEPICKER_SMALL_ID).getHeight(), animationDuration,
 800589a:	f8d4 37d8 	ldr.w	r3, [r4, #2008]	@ 0x7d8
 800589e:	eb02 0b03 	add.w	fp, r2, r3
 80058a2:	44e3      	add	fp, ip
 80058a4:	fa0f f38b 	sxth.w	r3, fp
 80058a8:	f04f 0b12 	mov.w	fp, #18
 80058ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ae:	e7cf      	b.n	8005850 <_ZN17VerticalSlideMenu11animateDownEv+0x9c>
            images[i].startZoomAndMoveAnimation(images[i].getX(), images[i].getY() + smallImageHeight + imagesYPositionDelta, images[i].getWidth(), images[i].getHeight(), animationDuration,
 80058b0:	2000      	movs	r0, #0
 80058b2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80058b6:	4462      	add	r2, ip
 80058b8:	9002      	str	r0, [sp, #8]
 80058ba:	b212      	sxth	r2, r2
 80058bc:	e9cd 5505 	strd	r5, r5, [sp, #20]
 80058c0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80058c4:	f8b4 07b4 	ldrh.w	r0, [r4, #1972]	@ 0x7b4
 80058c8:	e9cd 1000 	strd	r1, r0, [sp]
 80058cc:	e7d9      	b.n	8005882 <_ZN17VerticalSlideMenu11animateDownEv+0xce>
 80058ce:	bf00      	nop
 80058d0:	0801b59b 	.word	0x0801b59b

080058d4 <_ZN13WheelSelectorD1Ev>:
{
}

WheelSelector::~WheelSelector()
{
}
 80058d4:	4770      	bx	lr

080058d6 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED1Ev>:
    }
 80058d6:	4770      	bx	lr

080058d8 <_ZNK8touchgfx12MoveAnimatorINS_8TextAreaEE9isRunningEv>:
        return isMoveAnimationRunning();
 80058d8:	6803      	ldr	r3, [r0, #0]
 80058da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058de:	4718      	bx	r3

080058e0 <_ZNK8touchgfx12MoveAnimatorINS_8TextAreaEE22isMoveAnimationRunningEv>:
    }
 80058e0:	f890 0032 	ldrb.w	r0, [r0, #50]	@ 0x32
 80058e4:	4770      	bx	lr

080058e6 <_ZN8touchgfx8CallbackI13WheelSelectorRKNS_12MoveAnimatorINS_8TextAreaEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80058e6:	4770      	bx	lr

080058e8 <_ZN8touchgfx8CallbackI13WheelSelectorRKNS_12MoveAnimatorINS_8TextAreaEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 80058e8:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80058ea:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80058ec:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 80058ee:	68c2      	ldr	r2, [r0, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	1055      	asrs	r5, r2, #1
 80058f4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80058f8:	07d2      	lsls	r2, r2, #31
 80058fa:	bf48      	it	mi
 80058fc:	5962      	ldrmi	r2, [r4, r5]
    }
 80058fe:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8005900:	bf48      	it	mi
 8005902:	58d3      	ldrmi	r3, [r2, r3]
 8005904:	4718      	bx	r3

08005906 <_ZNK8touchgfx8CallbackI13WheelSelectorRKNS_12MoveAnimatorINS_8TextAreaEEEvvE7isValidEv>:
    virtual bool isValid() const
 8005906:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8005908:	6840      	ldr	r0, [r0, #4]
 800590a:	b130      	cbz	r0, 800591a <_ZNK8touchgfx8CallbackI13WheelSelectorRKNS_12MoveAnimatorINS_8TextAreaEEEvvE7isValidEv+0x14>
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	b91a      	cbnz	r2, 8005918 <_ZNK8touchgfx8CallbackI13WheelSelectorRKNS_12MoveAnimatorINS_8TextAreaEEEvvE7isValidEv+0x12>
 8005910:	68d8      	ldr	r0, [r3, #12]
 8005912:	f000 0001 	and.w	r0, r0, #1
 8005916:	4770      	bx	lr
 8005918:	2001      	movs	r0, #1
    }
 800591a:	4770      	bx	lr

0800591c <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21setMoveAnimationDelayEt>:
        moveAnimationDelay = delay;
 800591c:	86c1      	strh	r1, [r0, #54]	@ 0x36
    }
 800591e:	4770      	bx	lr

08005920 <_ZNK8touchgfx12MoveAnimatorINS_8TextAreaEE21getMoveAnimationDelayEv>:
    }
 8005920:	8ec0      	ldrh	r0, [r0, #54]	@ 0x36
 8005922:	4770      	bx	lr

08005924 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED0Ev>:
    virtual ~MoveAnimator()
 8005924:	b510      	push	{r4, lr}
 8005926:	4604      	mov	r4, r0
    }
 8005928:	2150      	movs	r1, #80	@ 0x50
 800592a:	f019 f8fc 	bl	801eb26 <_ZdlPvj>
 800592e:	4620      	mov	r0, r4
 8005930:	bd10      	pop	{r4, pc}

08005932 <_ZN8touchgfx8CallbackI13WheelSelectorRKNS_12MoveAnimatorINS_8TextAreaEEEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005932:	b510      	push	{r4, lr}
 8005934:	4604      	mov	r4, r0
 8005936:	2110      	movs	r1, #16
 8005938:	f019 f8f5 	bl	801eb26 <_ZdlPvj>
 800593c:	4620      	mov	r0, r4
 800593e:	bd10      	pop	{r4, pc}

08005940 <_ZN13WheelSelectorD0Ev>:
WheelSelector::~WheelSelector()
 8005940:	b510      	push	{r4, lr}
 8005942:	4604      	mov	r4, r0
}
 8005944:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8005948:	f019 f8ed 	bl	801eb26 <_ZdlPvj>
 800594c:	4620      	mov	r0, r4
 800594e:	bd10      	pop	{r4, pc}

08005950 <_ZN13WheelSelector15handleDragEventERKN8touchgfx9DragEventE>:
    text.invalidate(); // This also overlaps with textSelected which is therefore also redrawn
}

void WheelSelector::handleDragEvent(const DragEvent& evt)
{
    if (currentAnimationState == ANIMATING_DRAG)
 8005950:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8005954:	2a02      	cmp	r2, #2
 8005956:	d10a      	bne.n	800596e <_ZN13WheelSelector15handleDragEventERKN8touchgfx9DragEventE+0x1e>
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
    {
        return _newY - _oldY;
 8005958:	898a      	ldrh	r2, [r1, #12]
 800595a:	8909      	ldrh	r1, [r1, #8]
    {
        moveText(text.getY() + evt.getDeltaY());
 800595c:	6803      	ldr	r3, [r0, #0]
 800595e:	1a52      	subs	r2, r2, r1
 8005960:	f9b0 1062 	ldrsh.w	r1, [r0, #98]	@ 0x62
 8005964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005968:	fa01 f182 	sxtah	r1, r1, r2
 800596c:	4718      	bx	r3
    }
}
 800596e:	4770      	bx	lr

08005970 <_ZN13WheelSelector12setTextColorEN8touchgfx9colortypeES1_S1_ii>:
{
 8005970:	b470      	push	{r4, r5, r6}
    if (normalColor != selectedColor)
 8005972:	b296      	uxth	r6, r2
 8005974:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
 8005978:	b289      	uxth	r1, r1
 800597a:	42b1      	cmp	r1, r6
{
 800597c:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
    if (normalColor != selectedColor)
 8005980:	d01b      	beq.n	80059ba <_ZN13WheelSelector12setTextColorEN8touchgfx9colortypeES1_S1_ii+0x4a>
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
    {
        this->color = color;
 8005982:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
        textSelectedBackground.setHeight(selectedHeight);
 8005986:	b221      	sxth	r1, r4
        textSelectedContainer.setY(textContainer.getY() + selectedAreaYOffset);
 8005988:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
        selectedAreaYOffset = selectedYOffset;
 800598a:	f8c0 5158 	str.w	r5, [r0, #344]	@ 0x158
        textSelectedContainer.setY(textContainer.getY() + selectedAreaYOffset);
 800598e:	fa13 f385 	uxtah	r3, r3, r5
        rect.height = height;
 8005992:	f8a0 1132 	strh.w	r1, [r0, #306]	@ 0x132
 8005996:	f8a0 10b6 	strh.w	r1, [r0, #182]	@ 0xb6
        rect.y = y;
 800599a:	f8a0 30b2 	strh.w	r3, [r0, #178]	@ 0xb2
        textSelected.setY(text.getY() - selectedAreaYOffset);
 800599e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	@ 0x62
 80059a2:	f8c0 2100 	str.w	r2, [r0, #256]	@ 0x100
 80059a6:	1b5b      	subs	r3, r3, r5
 80059a8:	f8a0 30de 	strh.w	r3, [r0, #222]	@ 0xde
    }
 80059ac:	2301      	movs	r3, #1
        visible = vis;
 80059ae:	f880 30d1 	strb.w	r3, [r0, #209]	@ 0xd1
    text.invalidate(); // This also overlaps with textSelected which is therefore also redrawn
 80059b2:	305c      	adds	r0, #92	@ 0x5c
}
 80059b4:	bc70      	pop	{r4, r5, r6}
    text.invalidate(); // This also overlaps with textSelected which is therefore also redrawn
 80059b6:	f014 bce8 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 80059ba:	2300      	movs	r3, #0
 80059bc:	e7f7      	b.n	80059ae <_ZN13WheelSelector12setTextColorEN8touchgfx9colortypeES1_S1_ii+0x3e>
	...

080059c0 <_ZN13WheelSelector4snapEv>:
        animateMoveText(newYPosition, duration, EasingEquations::cubicEaseOut);
    }
}

void WheelSelector::snap()
{
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	4605      	mov	r5, r0
    int deltaUp = (spaceBetweenTextRows - (text.getY() - selectedTextYPosition)) % spaceBetweenTextRows;
 80059c4:	f8d0 0160 	ldr.w	r0, [r0, #352]	@ 0x160
 80059c8:	f9b5 1062 	ldrsh.w	r1, [r5, #98]	@ 0x62
 80059cc:	f8d5 415c 	ldr.w	r4, [r5, #348]	@ 0x15c

    int deltaDown = spaceBetweenTextRows - deltaUp;

    if (deltaUp < deltaDown)
    {
        animateMoveText(text.getY() + deltaUp, 10, EasingEquations::backEaseInOut);
 80059d0:	682b      	ldr	r3, [r5, #0]
    int deltaUp = (spaceBetweenTextRows - (text.getY() - selectedTextYPosition)) % spaceBetweenTextRows;
 80059d2:	1b0c      	subs	r4, r1, r4
        animateMoveText(text.getY() + deltaUp, 10, EasingEquations::backEaseInOut);
 80059d4:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
    int deltaUp = (spaceBetweenTextRows - (text.getY() - selectedTextYPosition)) % spaceBetweenTextRows;
 80059d8:	1b04      	subs	r4, r0, r4
        animateMoveText(text.getY() + deltaUp, 10, EasingEquations::backEaseInOut);
 80059da:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <_ZN13WheelSelector4snapEv+0x44>)
    int deltaUp = (spaceBetweenTextRows - (text.getY() - selectedTextYPosition)) % spaceBetweenTextRows;
 80059dc:	fb94 f2f0 	sdiv	r2, r4, r0
 80059e0:	fb00 4412 	mls	r4, r0, r2, r4
        animateMoveText(text.getY() + deltaUp, 10, EasingEquations::backEaseInOut);
 80059e4:	220a      	movs	r2, #10
    deltaUp = (deltaUp > 0) ? deltaUp : spaceBetweenTextRows + deltaUp;
 80059e6:	2c00      	cmp	r4, #0
 80059e8:	bfd8      	it	le
 80059ea:	1824      	addle	r4, r4, r0
    int deltaDown = spaceBetweenTextRows - deltaUp;
 80059ec:	1b00      	subs	r0, r0, r4
    if (deltaUp < deltaDown)
 80059ee:	4284      	cmp	r4, r0
    }
    else
    {
        animateMoveText(text.getY() - deltaDown, 10, EasingEquations::backEaseInOut);
 80059f0:	bfac      	ite	ge
 80059f2:	1a09      	subge	r1, r1, r0
        animateMoveText(text.getY() + deltaUp, 10, EasingEquations::backEaseInOut);
 80059f4:	1909      	addlt	r1, r1, r4
        animateMoveText(text.getY() - deltaDown, 10, EasingEquations::backEaseInOut);
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b0      	blx	r6
    }
    currentAnimationState = ANIMATING_SNAP;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
}
 8005a00:	bd70      	pop	{r4, r5, r6, pc}
 8005a02:	bf00      	nop
 8005a04:	0801add5 	.word	0x0801add5

08005a08 <_ZN13WheelSelector16getSelectedIndexEv>:

int WheelSelector::getSelectedIndex()
{
    return (selectedTextYPosition - text.getY()) / spaceBetweenTextRows;
 8005a08:	f9b0 2062 	ldrsh.w	r2, [r0, #98]	@ 0x62
 8005a0c:	f8d0 315c 	ldr.w	r3, [r0, #348]	@ 0x15c
 8005a10:	f8d0 0160 	ldr.w	r0, [r0, #352]	@ 0x160
 8005a14:	1a9b      	subs	r3, r3, r2
}
 8005a16:	fb93 f0f0 	sdiv	r0, r3, r0
 8005a1a:	4770      	bx	lr

08005a1c <_ZN13WheelSelector20textMoveEndedHandlerERKN8touchgfx12MoveAnimatorINS0_8TextAreaEEE>:
    }

}

void WheelSelector::textMoveEndedHandler(const MoveAnimator<TextArea>& textArea)
{
 8005a1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
    if (currentAnimationState == ANIMATING_GESTURE)
 8005a22:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8005a26:	b973      	cbnz	r3, 8005a46 <_ZN13WheelSelector20textMoveEndedHandlerERKN8touchgfx12MoveAnimatorINS0_8TextAreaEEE+0x2a>
    {
        if (!textArea.isRunning() && !textSelected.isRunning())
 8005a28:	680b      	ldr	r3, [r1, #0]
 8005a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a2c:	4798      	blx	r3
 8005a2e:	bb18      	cbnz	r0, 8005a78 <_ZN13WheelSelector20textMoveEndedHandlerERKN8touchgfx12MoveAnimatorINS0_8TextAreaEEE+0x5c>
 8005a30:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8005a34:	f7ff ff50 	bl	80058d8 <_ZNK8touchgfx12MoveAnimatorINS_8TextAreaEE9isRunningEv>
 8005a38:	b9f0      	cbnz	r0, 8005a78 <_ZN13WheelSelector20textMoveEndedHandlerERKN8touchgfx12MoveAnimatorINS0_8TextAreaEEE+0x5c>
        {
            snap();
 8005a3a:	4620      	mov	r0, r4
    }
    else
    {
        currentAnimationState = NO_ANIMATION;
    }
}
 8005a3c:	b002      	add	sp, #8
 8005a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            snap();
 8005a42:	f7ff bfbd 	b.w	80059c0 <_ZN13WheelSelector4snapEv>
    else if (currentAnimationState == ANIMATING_SNAP)
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	f04f 0303 	mov.w	r3, #3
        currentAnimationState = NO_ANIMATION;
 8005a4c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    else if (currentAnimationState == ANIMATING_SNAP)
 8005a50:	d112      	bne.n	8005a78 <_ZN13WheelSelector20textMoveEndedHandlerERKN8touchgfx12MoveAnimatorINS0_8TextAreaEEE+0x5c>
        if (elementSelectedAction && elementSelectedAction->isValid())
 8005a52:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
 8005a56:	b178      	cbz	r0, 8005a78 <_ZN13WheelSelector20textMoveEndedHandlerERKN8touchgfx12MoveAnimatorINS0_8TextAreaEEE+0x5c>
 8005a58:	6803      	ldr	r3, [r0, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4798      	blx	r3
 8005a5e:	b158      	cbz	r0, 8005a78 <_ZN13WheelSelector20textMoveEndedHandlerERKN8touchgfx12MoveAnimatorINS0_8TextAreaEEE+0x5c>
            elementSelectedAction->execute(*this, getSelectedIndex());
 8005a60:	f8d4 516c 	ldr.w	r5, [r4, #364]	@ 0x16c
 8005a64:	4620      	mov	r0, r4
 8005a66:	4621      	mov	r1, r4
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	689e      	ldr	r6, [r3, #8]
 8005a6c:	f7ff ffcc 	bl	8005a08 <_ZN13WheelSelector16getSelectedIndexEv>
 8005a70:	aa01      	add	r2, sp, #4
 8005a72:	9001      	str	r0, [sp, #4]
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b0      	blx	r6
}
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}

08005a7c <_ZN13WheelSelector18adjustForBoundriesERi>:

void WheelSelector::adjustForBoundries(int& newYValue)
{
    if (newYValue > topCutOff)
 8005a7c:	680a      	ldr	r2, [r1, #0]
 8005a7e:	f8d0 3164 	ldr.w	r3, [r0, #356]	@ 0x164
 8005a82:	429a      	cmp	r2, r3
 8005a84:	dd01      	ble.n	8005a8a <_ZN13WheelSelector18adjustForBoundriesERi+0xe>
    {
        newYValue = topCutOff;
    }
    else if (newYValue < bottomCutOff)
    {
        newYValue = bottomCutOff;
 8005a86:	600b      	str	r3, [r1, #0]
    }
}
 8005a88:	e003      	b.n	8005a92 <_ZN13WheelSelector18adjustForBoundriesERi+0x16>
    else if (newYValue < bottomCutOff)
 8005a8a:	f8d0 3168 	ldr.w	r3, [r0, #360]	@ 0x168
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	dbf9      	blt.n	8005a86 <_ZN13WheelSelector18adjustForBoundriesERi+0xa>
}
 8005a92:	4770      	bx	lr

08005a94 <_ZN13WheelSelector16setSelectedIndexEiiPFstsstE>:
{
 8005a94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a96:	4615      	mov	r5, r2
 8005a98:	461e      	mov	r6, r3
    int newYPosition = selectedTextYPosition - (spaceBetweenTextRows * index);
 8005a9a:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	@ 0x15c
 8005a9e:	fb02 3311 	mls	r3, r2, r1, r3
    adjustForBoundries(newYPosition);
 8005aa2:	a901      	add	r1, sp, #4
    int newYPosition = selectedTextYPosition - (spaceBetweenTextRows * index);
 8005aa4:	9301      	str	r3, [sp, #4]
    adjustForBoundries(newYPosition);
 8005aa6:	f7ff ffe9 	bl	8005a7c <_ZN13WheelSelector18adjustForBoundriesERi>
    if (duration == 0)
 8005aaa:	6803      	ldr	r3, [r0, #0]
 8005aac:	b935      	cbnz	r5, 8005abc <_ZN13WheelSelector16setSelectedIndexEiiPFstsstE+0x28>
        moveText(newYPosition);
 8005aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ab2:	9901      	ldr	r1, [sp, #4]
}
 8005ab4:	b002      	add	sp, #8
 8005ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        moveText(newYPosition);
 8005aba:	4718      	bx	r3
        animateMoveText(newYPosition, duration, equation);
 8005abc:	f8d3 4090 	ldr.w	r4, [r3, #144]	@ 0x90
        currentAnimationState = ANIMATING_GESTURE;
 8005ac0:	2200      	movs	r2, #0
        animateMoveText(newYPosition, duration, equation);
 8005ac2:	4633      	mov	r3, r6
 8005ac4:	9901      	ldr	r1, [sp, #4]
        currentAnimationState = ANIMATING_GESTURE;
 8005ac6:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
        animateMoveText(newYPosition, duration, equation);
 8005aca:	46a4      	mov	ip, r4
 8005acc:	462a      	mov	r2, r5
}
 8005ace:	b002      	add	sp, #8
 8005ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        animateMoveText(newYPosition, duration, equation);
 8005ad4:	4760      	bx	ip

08005ad6 <_ZN13WheelSelector8moveTextEi>:

void WheelSelector::moveText(int newYPosition)
{
 8005ad6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ad8:	9101      	str	r1, [sp, #4]
    adjustForBoundries(newYPosition);
 8005ada:	a901      	add	r1, sp, #4
 8005adc:	f7ff ffce 	bl	8005a7c <_ZN13WheelSelector18adjustForBoundriesERi>

    text.moveTo(text.getX(), newYPosition);
 8005ae0:	9d01      	ldr	r5, [sp, #4]
{
 8005ae2:	4604      	mov	r4, r0
    text.moveTo(text.getX(), newYPosition);
 8005ae4:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	@ 0x60
 8005ae8:	b22a      	sxth	r2, r5
 8005aea:	305c      	adds	r0, #92	@ 0x5c
 8005aec:	f7fb f98e 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
    if (textSelectedContainer.isVisible())
 8005af0:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8005af4:	b14b      	cbz	r3, 8005b0a <_ZN13WheelSelector8moveTextEi+0x34>
    {
        textSelected.moveTo(text.getX(), newYPosition - selectedAreaYOffset);
 8005af6:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8005afa:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8005afe:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8005b02:	1aea      	subs	r2, r5, r3
 8005b04:	b212      	sxth	r2, r2
 8005b06:	f7fb f981 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
    }
}
 8005b0a:	b003      	add	sp, #12
 8005b0c:	bd30      	pop	{r4, r5, pc}
	...

08005b10 <_ZN13WheelSelector18handleGestureEventERKN8touchgfx12GestureEventE>:
    if (evt.getType() == GestureEvent::SWIPE_VERTICAL)
 8005b10:	790b      	ldrb	r3, [r1, #4]
 8005b12:	2b01      	cmp	r3, #1
{
 8005b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (evt.getType() == GestureEvent::SWIPE_VERTICAL)
 8005b16:	d121      	bne.n	8005b5c <_ZN13WheelSelector18handleGestureEventERKN8touchgfx12GestureEventE+0x4c>
        currentAnimationState = ANIMATING_GESTURE;
 8005b18:	2200      	movs	r2, #0
        return rect.y;
 8005b1a:	f9b0 4062 	ldrsh.w	r4, [r0, #98]	@ 0x62
 8005b1e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
        adjustForBoundries(newYPosition);
 8005b22:	a901      	add	r1, sp, #4
        currentAnimationState = ANIMATING_GESTURE;
 8005b24:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
        int newYPosition = text.getY() + delta;
 8005b28:	2205      	movs	r2, #5
 8005b2a:	fb13 4302 	smlabb	r3, r3, r2, r4
 8005b2e:	9301      	str	r3, [sp, #4]
        adjustForBoundries(newYPosition);
 8005b30:	f7ff ffa4 	bl	8005a7c <_ZN13WheelSelector18adjustForBoundriesERi>
        int distanceToMove = newYPosition - text.getY();
 8005b34:	9901      	ldr	r1, [sp, #4]
        int duration = distanceToMoveABS / 10;
 8005b36:	230a      	movs	r3, #10
        int distanceToMove = newYPosition - text.getY();
 8005b38:	1b0a      	subs	r2, r1, r4
        int distanceToMoveABS = (distanceToMove > 0) ? distanceToMove : -distanceToMove;
 8005b3a:	2a00      	cmp	r2, #0
 8005b3c:	bfb8      	it	lt
 8005b3e:	4252      	neglt	r2, r2
        int duration = distanceToMoveABS / 10;
 8005b40:	fbb2 f2f3 	udiv	r2, r2, r3
        animateMoveText(newYPosition, duration, EasingEquations::cubicEaseOut);
 8005b44:	6803      	ldr	r3, [r0, #0]
 8005b46:	2a02      	cmp	r2, #2
 8005b48:	f8d3 4090 	ldr.w	r4, [r3, #144]	@ 0x90
 8005b4c:	bfb8      	it	lt
 8005b4e:	2202      	movlt	r2, #2
 8005b50:	4b03      	ldr	r3, [pc, #12]	@ (8005b60 <_ZN13WheelSelector18handleGestureEventERKN8touchgfx12GestureEventE+0x50>)
 8005b52:	46a4      	mov	ip, r4
}
 8005b54:	b003      	add	sp, #12
 8005b56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        animateMoveText(newYPosition, duration, EasingEquations::cubicEaseOut);
 8005b5a:	4760      	bx	ip
}
 8005b5c:	b003      	add	sp, #12
 8005b5e:	bd30      	pop	{r4, r5, pc}
 8005b60:	0801b19d 	.word	0x0801b19d

08005b64 <_ZN13WheelSelector5resetEv>:
    }
}

void WheelSelector::reset()
{
    moveText(selectedTextYPosition);
 8005b64:	6802      	ldr	r2, [r0, #0]
 8005b66:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8005b6a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8005b6e:	4710      	bx	r2

08005b70 <_ZN13WheelSelector5setupEiiii5TEXTS>:
{
 8005b70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005b74:	461f      	mov	r7, r3
    setWidth(width);
 8005b76:	6803      	ldr	r3, [r0, #0]
{
 8005b78:	4604      	mov	r4, r0
    setWidth(width);
 8005b7a:	b209      	sxth	r1, r1
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
{
 8005b7e:	4615      	mov	r5, r2
 8005b80:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005b82:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
    setWidth(width);
 8005b86:	4798      	blx	r3
    setHeight(height);
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	b229      	sxth	r1, r5
 8005b8c:	4620      	mov	r0, r4
    textContainer.setPosition(0, 0, getWidth(), getHeight());
 8005b8e:	f104 0530 	add.w	r5, r4, #48	@ 0x30
    setHeight(height);
 8005b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b94:	4798      	blx	r3
        touchable = touch;
 8005b96:	2301      	movs	r3, #1
    textContainer.setPosition(0, 0, getWidth(), getHeight());
 8005b98:	2200      	movs	r2, #0
    selectedTextYPosition = textYPosition;
 8005b9a:	f8c4 615c 	str.w	r6, [r4, #348]	@ 0x15c
 8005b9e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    textContainer.setPosition(0, 0, getWidth(), getHeight());
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8005ba8:	4611      	mov	r1, r2
    text.setTypedText(TypedText(wheelText));
 8005baa:	f104 065c 	add.w	r6, r4, #92	@ 0x5c
    textContainer.setPosition(0, 0, getWidth(), getHeight());
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8005bb4:	f7fb f8fc 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(textContainer);
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	4629      	mov	r1, r5
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc0:	4798      	blx	r3
    text.setTypedText(TypedText(wheelText));
 8005bc2:	4641      	mov	r1, r8
 8005bc4:	4630      	mov	r0, r6
    text.setMoveAnimationEndedAction(textMoveEndedCallback);
 8005bc6:	f504 78b8 	add.w	r8, r4, #368	@ 0x170
    text.setTypedText(TypedText(wheelText));
 8005bca:	f011 fa31 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    text.setXY(textXPosition, selectedTextYPosition);
 8005bce:	f9b4 215c 	ldrsh.w	r2, [r4, #348]	@ 0x15c
 8005bd2:	b239      	sxth	r1, r7
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7fb f903 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    textContainer.add(text);
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
        moveAnimationEndedCallback = &callback;
 8005bde:	f8c4 80a8 	str.w	r8, [r4, #168]	@ 0xa8
 8005be2:	f00d f8b5 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    spaceBetweenTextRows = text.getTypedText().getFont()->getMinimumTextHeight() * 2; // For blank lines between texts;
 8005be6:	f8b4 3082 	ldrh.w	r3, [r4, #130]	@ 0x82
 8005bea:	a803      	add	r0, sp, #12
    textSelectedContainer.setPosition(textContainer.getX(), textContainer.getY(), textContainer.getWidth(), 0);
 8005bec:	2500      	movs	r5, #0
    spaceBetweenTextRows = text.getTypedText().getFont()->getMinimumTextHeight() * 2; // For blank lines between texts;
 8005bee:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005bf2:	f7fd f82f 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8005bf6:	6803      	ldr	r3, [r0, #0]
    textSelectedContainer.setPosition(textContainer.getX(), textContainer.getY(), textContainer.getWidth(), 0);
 8005bf8:	f104 06ac 	add.w	r6, r4, #172	@ 0xac
    textSelectedBackground.setPosition(0, 0, textSelectedContainer.getWidth(), 0);
 8005bfc:	f504 7794 	add.w	r7, r4, #296	@ 0x128
    spaceBetweenTextRows = text.getTypedText().getFont()->getMinimumTextHeight() * 2; // For blank lines between texts;
 8005c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c02:	4798      	blx	r3
 8005c04:	0040      	lsls	r0, r0, #1
 8005c06:	f8c4 0160 	str.w	r0, [r4, #352]	@ 0x160
    textSelectedContainer.setPosition(textContainer.getX(), textContainer.getY(), textContainer.getWidth(), 0);
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	9500      	str	r5, [sp, #0]
 8005c0e:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8005c12:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	@ 0x38
 8005c16:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8005c1a:	f7fb f8c9 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(textSelectedContainer);
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	4631      	mov	r1, r6
 8005c22:	4620      	mov	r0, r4
 8005c24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c26:	4798      	blx	r3
    textSelectedBackground.setPosition(0, 0, textSelectedContainer.getWidth(), 0);
 8005c28:	462a      	mov	r2, r5
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	9500      	str	r5, [sp, #0]
 8005c30:	f9b4 30b4 	ldrsh.w	r3, [r4, #180]	@ 0xb4
 8005c34:	f7fb f8bc 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    textSelectedContainer.add(textSelectedBackground);
 8005c38:	4639      	mov	r1, r7
    textSelected.setTypedText(text.getTypedText());
 8005c3a:	f104 07d8 	add.w	r7, r4, #216	@ 0xd8
    textSelectedContainer.add(textSelectedBackground);
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f00d f886 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textSelected.setTypedText(text.getTypedText());
 8005c44:	f8b4 1082 	ldrh.w	r1, [r4, #130]	@ 0x82
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f011 f9f1 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    textSelected.setXY(text.getX(), text.getY());
 8005c4e:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 8005c52:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8005c56:	4638      	mov	r0, r7
 8005c58:	f7fb f8c2 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    textSelectedContainer.add(textSelected);
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f8c4 8124 	str.w	r8, [r4, #292]	@ 0x124
 8005c64:	f00d f874 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    topCutOff = selectedTextYPosition + (spaceBetweenTextRows / 2);
 8005c68:	f8d4 2160 	ldr.w	r2, [r4, #352]	@ 0x160
 8005c6c:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
    reset();
 8005c70:	4620      	mov	r0, r4
    topCutOff = selectedTextYPosition + (spaceBetweenTextRows / 2);
 8005c72:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
        visible = vis;
 8005c76:	f884 50d1 	strb.w	r5, [r4, #209]	@ 0xd1
 8005c7a:	eb03 0361 	add.w	r3, r3, r1, asr #1
    bottomCutOff = topCutOff - text.getHeight() - (spaceBetweenTextRows / 3);
 8005c7e:	f9b4 1066 	ldrsh.w	r1, [r4, #102]	@ 0x66
    topCutOff = selectedTextYPosition + (spaceBetweenTextRows / 2);
 8005c82:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
    bottomCutOff = topCutOff - text.getHeight() - (spaceBetweenTextRows / 3);
 8005c86:	1a5b      	subs	r3, r3, r1
 8005c88:	f06f 0102 	mvn.w	r1, #2
 8005c8c:	fb92 f2f1 	sdiv	r2, r2, r1
 8005c90:	4413      	add	r3, r2
 8005c92:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
}
 8005c96:	b004      	add	sp, #16
 8005c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    reset();
 8005c9c:	f7ff bf62 	b.w	8005b64 <_ZN13WheelSelector5resetEv>

08005ca0 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev>:
    MoveAnimator() :
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	f7fb fd92 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
        moveAnimationEndedCallback(0)
 8005ca8:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev+0x2c>)
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8005caa:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 8005cae:	4620      	mov	r0, r4
        moveAnimationEndedCallback(0)
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cb6:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e9c4 320a 	strd	r3, r2, [r4, #40]	@ 0x28
 8005cbe:	8623      	strh	r3, [r4, #48]	@ 0x30
        moveAnimationRunning(false),
 8005cc0:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
        moveAnimationCounter(0),
 8005cc4:	6363      	str	r3, [r4, #52]	@ 0x34
        moveAnimationEndedCallback(0)
 8005cc6:	64e3      	str	r3, [r4, #76]	@ 0x4c
    }
 8005cc8:	bd10      	pop	{r4, pc}
 8005cca:	bf00      	nop
 8005ccc:	08023aa8 	.word	0x08023aa8

08005cd0 <_ZN13WheelSelectorC1Ev>:
WheelSelector::WheelSelector() :
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	f7fb fd7a 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    textMoveEndedCallback(this, &WheelSelector::textMoveEndedHandler)
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d44 <_ZN13WheelSelectorC1Ev+0x74>)
 8005cda:	2500      	movs	r5, #0
 8005cdc:	4e1a      	ldr	r6, [pc, #104]	@ (8005d48 <_ZN13WheelSelectorC1Ev+0x78>)
 8005cde:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8005ce2:	6023      	str	r3, [r4, #0]
    currentAnimationState(NO_ANIMATION),
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	62a5      	str	r5, [r4, #40]	@ 0x28
 8005ce8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8005cec:	f7fb fd6e 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    textMoveEndedCallback(this, &WheelSelector::textMoveEndedHandler)
 8005cf0:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8005cf4:	6326      	str	r6, [r4, #48]	@ 0x30
 8005cf6:	65a5      	str	r5, [r4, #88]	@ 0x58
 8005cf8:	f7ff ffd2 	bl	8005ca0 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev>
 8005cfc:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8005d00:	f7fb fd64 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
 8005d04:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8005d08:	f8c4 60ac 	str.w	r6, [r4, #172]	@ 0xac
 8005d0c:	f8c4 50d4 	str.w	r5, [r4, #212]	@ 0xd4
 8005d10:	f7ff ffc6 	bl	8005ca0 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev>
 8005d14:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 8005d18:	f7fb fd58 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d4c <_ZN13WheelSelectorC1Ev+0x7c>)
}
 8005d1e:	4620      	mov	r0, r4
        color = col;
 8005d20:	f8c4 5150 	str.w	r5, [r4, #336]	@ 0x150
 8005d24:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005d28:	23ff      	movs	r3, #255	@ 0xff
 8005d2a:	f884 5154 	strb.w	r5, [r4, #340]	@ 0x154
 8005d2e:	f884 314e 	strb.w	r3, [r4, #334]	@ 0x14e
    {
 8005d32:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <_ZN13WheelSelectorC1Ev+0x80>)
    elementSelectedAction(0),
 8005d34:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
        this->pobject = pobject;
 8005d38:	e9c4 345c 	strd	r3, r4, [r4, #368]	@ 0x170
        this->pmemfun_1 = pmemfun_1;
 8005d3c:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <_ZN13WheelSelectorC1Ev+0x84>)
 8005d3e:	e9c4 355e 	strd	r3, r5, [r4, #376]	@ 0x178
}
 8005d42:	bd70      	pop	{r4, r5, r6, pc}
 8005d44:	08021e40 	.word	0x08021e40
 8005d48:	080250b0 	.word	0x080250b0
 8005d4c:	08025ea4 	.word	0x08025ea4
 8005d50:	08023b34 	.word	0x08023b34
 8005d54:	08005a1d 	.word	0x08005a1d

08005d58 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE19cancelMoveAnimationEv>:
        if (moveAnimationRunning)
 8005d58:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
    void cancelMoveAnimation()
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 8005d60:	b13b      	cbz	r3, 8005d72 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE19cancelMoveAnimationEv+0x1a>
            Application::getInstance()->unregisterTimerWidget(this);
 8005d62:	f013 ff27 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8005d66:	4621      	mov	r1, r4
 8005d68:	f013 ff5a 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
            moveAnimationRunning = false;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
    }
 8005d72:	bd10      	pop	{r4, pc}

08005d74 <_ZN13WheelSelector16handleClickEventERKN8touchgfx10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return _type;
 8005d74:	790b      	ldrb	r3, [r1, #4]
{
 8005d76:	b510      	push	{r4, lr}
 8005d78:	4604      	mov	r4, r0
    if (evt.getType() == ClickEvent::PRESSED)
 8005d7a:	b973      	cbnz	r3, 8005d9a <_ZN13WheelSelector16handleClickEventERKN8touchgfx10ClickEventE+0x26>
        if (currentAnimationState != NO_ANIMATION)
 8005d7c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d006      	beq.n	8005d92 <_ZN13WheelSelector16handleClickEventERKN8touchgfx10ClickEventE+0x1e>
            text.cancelMoveAnimation();
 8005d84:	305c      	adds	r0, #92	@ 0x5c
 8005d86:	f7ff ffe7 	bl	8005d58 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE19cancelMoveAnimationEv>
            textSelected.cancelMoveAnimation();
 8005d8a:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8005d8e:	f7ff ffe3 	bl	8005d58 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE19cancelMoveAnimationEv>
        currentAnimationState = ANIMATING_DRAG;
 8005d92:	2302      	movs	r3, #2
 8005d94:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8005d98:	bd10      	pop	{r4, pc}
    else if (evt.getType() == ClickEvent::RELEASED && currentAnimationState == ANIMATING_DRAG)
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d1fc      	bne.n	8005d98 <_ZN13WheelSelector16handleClickEventERKN8touchgfx10ClickEventE+0x24>
 8005d9e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d1f8      	bne.n	8005d98 <_ZN13WheelSelector16handleClickEventERKN8touchgfx10ClickEventE+0x24>
}
 8005da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        snap();
 8005daa:	f7ff be09 	b.w	80059c0 <_ZN13WheelSelector4snapEv>

08005dae <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv>:
        if (moveAnimationRunning)
 8005dae:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
    void nextMoveAnimationStep()
 8005db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db6:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 8005db8:	b12b      	cbz	r3, 8005dc6 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x18>
            if (moveAnimationCounter < moveAnimationDelay)
 8005dba:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 8005dbc:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8005dbe:	428a      	cmp	r2, r1
 8005dc0:	d203      	bcs.n	8005dca <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x1c>
                moveAnimationCounter++;
 8005dc2:	3201      	adds	r2, #1
 8005dc4:	8682      	strh	r2, [r0, #52]	@ 0x34
    }
 8005dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8005dca:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8005dcc:	18c8      	adds	r0, r1, r3
 8005dce:	4282      	cmp	r2, r0
 8005dd0:	d917      	bls.n	8005e02 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x54>
                    moveAnimationRunning = false;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
                    moveAnimationCounter = 0;
 8005dd8:	86a3      	strh	r3, [r4, #52]	@ 0x34
                    Application::getInstance()->unregisterTimerWidget(this);
 8005dda:	f013 feeb 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8005dde:	4621      	mov	r1, r4
 8005de0:	f013 ff1e 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8005de4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0ed      	beq.n	8005dc6 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x18>
 8005dea:	6803      	ldr	r3, [r0, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	4798      	blx	r3
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d0e8      	beq.n	8005dc6 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x18>
                        moveAnimationEndedCallback->execute(*this);
 8005df4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005df6:	4621      	mov	r1, r4
 8005df8:	6803      	ldr	r3, [r0, #0]
    }
 8005dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        moveAnimationEndedCallback->execute(*this);
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4718      	bx	r3
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8005e02:	1a52      	subs	r2, r2, r1
 8005e04:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 8005e06:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8005e08:	b295      	uxth	r5, r2
 8005e0a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005e0c:	1a52      	subs	r2, r2, r1
 8005e0e:	4628      	mov	r0, r5
 8005e10:	2100      	movs	r1, #0
 8005e12:	b212      	sxth	r2, r2
 8005e14:	47b0      	blx	r6
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8005e16:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8005e18:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8005e1c:	4606      	mov	r6, r0
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8005e1e:	2100      	movs	r1, #0
 8005e20:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 8005e22:	1ad2      	subs	r2, r2, r3
 8005e24:	4628      	mov	r0, r5
 8005e26:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8005e28:	b212      	sxth	r2, r2
 8005e2a:	47b8      	blx	r7
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8005e2c:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8005e2e:	18c2      	adds	r2, r0, r3
 8005e30:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 8005e32:	4620      	mov	r0, r4
 8005e34:	18f1      	adds	r1, r6, r3
 8005e36:	b212      	sxth	r2, r2
 8005e38:	b209      	sxth	r1, r1
 8005e3a:	f7fa ffe7 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 8005e3e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8005e40:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
                    moveAnimationCounter++;
 8005e42:	3301      	adds	r3, #1
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8005e44:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
                    moveAnimationCounter++;
 8005e46:	b29b      	uxth	r3, r3
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8005e48:	440a      	add	r2, r1
 8005e4a:	4293      	cmp	r3, r2
                    moveAnimationCounter++;
 8005e4c:	86a3      	strh	r3, [r4, #52]	@ 0x34
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8005e4e:	d9ba      	bls.n	8005dc6 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x18>
 8005e50:	e7bf      	b.n	8005dd2 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x24>

08005e52 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8005e52:	b508      	push	{r3, lr}
        nextMoveAnimationStep();
 8005e54:	f7ff ffab 	bl	8005dae <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv>
    }
 8005e58:	bd08      	pop	{r3, pc}

08005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 8005e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5c:	461d      	mov	r5, r3
        if (!moveAnimationRunning)
 8005e5e:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 8005e62:	4604      	mov	r4, r0
 8005e64:	460f      	mov	r7, r1
 8005e66:	4616      	mov	r6, r2
        if (!moveAnimationRunning)
 8005e68:	b923      	cbnz	r3, 8005e74 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_+0x1a>
            Application::getInstance()->registerTimerWidget(this);
 8005e6a:	f013 fea3 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8005e6e:	4621      	mov	r1, r4
 8005e70:	f013 fea6 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 8005e74:	2300      	movs	r3, #0
        moveAnimationEndX = endX;
 8005e76:	87e7      	strh	r7, [r4, #62]	@ 0x3e
        moveAnimationEndY = endY;
 8005e78:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
        moveAnimationCounter = 0;
 8005e7c:	86a3      	strh	r3, [r4, #52]	@ 0x34
        moveAnimationStartX = T::getX();
 8005e7e:	88a3      	ldrh	r3, [r4, #4]
        moveAnimationDuration = duration;
 8005e80:	8725      	strh	r5, [r4, #56]	@ 0x38
        moveAnimationStartX = T::getX();
 8005e82:	8763      	strh	r3, [r4, #58]	@ 0x3a
        moveAnimationStartY = T::getY();
 8005e84:	88e3      	ldrh	r3, [r4, #6]
 8005e86:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        moveAnimationXEquation = xProgressionEquation;
 8005e88:	9b06      	ldr	r3, [sp, #24]
 8005e8a:	6463      	str	r3, [r4, #68]	@ 0x44
        moveAnimationYEquation = yProgressionEquation;
 8005e8c:	9b07      	ldr	r3, [sp, #28]
 8005e8e:	64a3      	str	r3, [r4, #72]	@ 0x48
        moveAnimationRunning = true;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 8005e96:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005e98:	432b      	orrs	r3, r5
 8005e9a:	d102      	bne.n	8005ea2 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_+0x48>
            nextMoveAnimationStep(); // Set end position and shut down
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff ff86 	bl	8005dae <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv>
    }
 8005ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ea4 <_ZN13WheelSelector15animateMoveTextEiiPFstsstE>:
{
 8005ea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    text.startMoveAnimation(text.getX(), newYPosition, duration, EasingEquations::linearEaseNone, equation);
 8005ea8:	b296      	uxth	r6, r2
 8005eaa:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8005ef0 <_ZN13WheelSelector15animateMoveTextEiiPFstsstE+0x4c>
{
 8005eae:	4604      	mov	r4, r0
    text.startMoveAnimation(text.getX(), newYPosition, duration, EasingEquations::linearEaseNone, equation);
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	b20a      	sxth	r2, r1
 8005eb4:	f8cd 8000 	str.w	r8, [sp]
{
 8005eb8:	460d      	mov	r5, r1
 8005eba:	461f      	mov	r7, r3
    text.startMoveAnimation(text.getX(), newYPosition, duration, EasingEquations::linearEaseNone, equation);
 8005ebc:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	@ 0x60
 8005ec0:	4633      	mov	r3, r6
 8005ec2:	305c      	adds	r0, #92	@ 0x5c
 8005ec4:	f7ff ffc9 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
    if (textSelectedContainer.isVisible())
 8005ec8:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8005ecc:	b163      	cbz	r3, 8005ee8 <_ZN13WheelSelector15animateMoveTextEiiPFstsstE+0x44>
        textSelected.startMoveAnimation(text.getX(), newYPosition - selectedAreaYOffset, duration, EasingEquations::linearEaseNone, equation);
 8005ece:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8005ed2:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8005ed6:	1aea      	subs	r2, r5, r3
 8005ed8:	4633      	mov	r3, r6
 8005eda:	e9cd 8700 	strd	r8, r7, [sp]
 8005ede:	b212      	sxth	r2, r2
 8005ee0:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8005ee4:	f7ff ffb9 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
}
 8005ee8:	b002      	add	sp, #8
 8005eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eee:	bf00      	nop
 8005ef0:	0801b59b 	.word	0x0801b59b

08005ef4 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEED1Ev>:
    }
 8005ef4:	4770      	bx	lr

08005ef6 <_ZNK8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE9isRunningEv>:
        return isFadeAnimationRunning();
 8005ef6:	6803      	ldr	r3, [r0, #0]
 8005ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005efc:	4718      	bx	r3

08005efe <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 8005efe:	f8a0 1054 	strh.w	r1, [r0, #84]	@ 0x54
    }
 8005f02:	4770      	bx	lr

08005f04 <_ZNK8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21getFadeAnimationDelayEv>:
    }
 8005f04:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
 8005f08:	4770      	bx	lr

08005f0a <_ZNK8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE22isFadeAnimationRunningEv>:
    }
 8005f0a:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8005f0e:	4770      	bx	lr

08005f10 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEED0Ev>:
    virtual ~FadeAnimator()
 8005f10:	b510      	push	{r4, lr}
 8005f12:	4604      	mov	r4, r0
    }
 8005f14:	2164      	movs	r1, #100	@ 0x64
 8005f16:	f018 fe06 	bl	801eb26 <_ZdlPvj>
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	bd10      	pop	{r4, pc}
	...

08005f20 <_ZN18WheelSelectorExtraD1Ev>:
WheelSelectorExtra::WheelSelectorExtra() :
    WheelSelector()
{
}

WheelSelectorExtra::~WheelSelectorExtra()
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <_ZN18WheelSelectorExtraD1Ev+0x38>)
 8005f24:	4605      	mov	r5, r0
 8005f26:	f44f 745d 	mov.w	r4, #884	@ 0x374
 8005f2a:	6003      	str	r3, [r0, #0]
 8005f2c:	592b      	ldr	r3, [r5, r4]
 8005f2e:	1928      	adds	r0, r5, r4
 8005f30:	3c64      	subs	r4, #100	@ 0x64
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4798      	blx	r3
{
}
 8005f36:	f5b4 7f12 	cmp.w	r4, #584	@ 0x248
 8005f3a:	d1f7      	bne.n	8005f2c <_ZN18WheelSelectorExtraD1Ev+0xc>
WheelSelectorExtra::~WheelSelectorExtra()
 8005f3c:	592b      	ldr	r3, [r5, r4]
 8005f3e:	1928      	adds	r0, r5, r4
 8005f40:	3c64      	subs	r4, #100	@ 0x64
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4798      	blx	r3
}
 8005f46:	f5b4 7f8e 	cmp.w	r4, #284	@ 0x11c
 8005f4a:	d1f7      	bne.n	8005f3c <_ZN18WheelSelectorExtraD1Ev+0x1c>
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f7ff fcc1 	bl	80058d4 <_ZN13WheelSelectorD1Ev>
 8005f52:	4628      	mov	r0, r5
 8005f54:	bd38      	pop	{r3, r4, r5, pc}
 8005f56:	bf00      	nop
 8005f58:	08021edc 	.word	0x08021edc

08005f5c <_ZN18WheelSelectorExtraD0Ev>:
WheelSelectorExtra::~WheelSelectorExtra()
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4604      	mov	r4, r0
}
 8005f60:	f7ff ffde 	bl	8005f20 <_ZN18WheelSelectorExtraD1Ev>
 8005f64:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f018 fddc 	bl	801eb26 <_ZdlPvj>
 8005f6e:	4620      	mov	r0, r4
 8005f70:	bd10      	pop	{r4, pc}

08005f72 <_ZN18WheelSelectorExtra12setTextColorEN8touchgfx9colortypeES1_S1_ii>:
    adjustBottomCutOff();
    reset();
}

void WheelSelectorExtra::setTextColor(colortype normalColor, colortype selectedColor, colortype selectedBackgroundColor, int selectedYOffset /*= 0*/, int selectedHeight /*= 0*/)
{
 8005f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f74:	4605      	mov	r5, r0
    WheelSelector::setTextColor(normalColor, selectedColor, selectedBackgroundColor, selectedYOffset, selectedHeight);
 8005f76:	e9dd 6408 	ldrd	r6, r4, [sp, #32]
 8005f7a:	f505 7796 	add.w	r7, r5, #300	@ 0x12c
 8005f7e:	e9cd 6400 	strd	r6, r4, [sp]
 8005f82:	462c      	mov	r4, r5
 8005f84:	f7ff fcf4 	bl	8005970 <_ZN13WheelSelector12setTextColorEN8touchgfx9colortypeES1_S1_ii>
    for (int i = 0; i < NUMBER_OF_EXTRA_TEXTS; i++)
    {
        textExtra[i].setColor(text.getColor());
        textExtraSelected[i].setY(textExtra[i].getY() - selectedYOffset);
 8005f88:	f8b4 1186 	ldrh.w	r1, [r4, #390]	@ 0x186
 8005f8c:	f504 702b 	add.w	r0, r4, #684	@ 0x2ac
        return color;
 8005f90:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
    for (int i = 0; i < NUMBER_OF_EXTRA_TEXTS; i++)
 8005f94:	3464      	adds	r4, #100	@ 0x64
        textExtraSelected[i].setY(textExtra[i].getY() - selectedYOffset);
 8005f96:	1b89      	subs	r1, r1, r6
        this->color = color;
 8005f98:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 8005f9c:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
 8005fa0:	b209      	sxth	r1, r1
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa4:	4798      	blx	r3
        return color;
 8005fa6:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
        this->color = color;
 8005faa:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    for (int i = 0; i < NUMBER_OF_EXTRA_TEXTS; i++)
 8005fae:	42bc      	cmp	r4, r7
 8005fb0:	d1ea      	bne.n	8005f88 <_ZN18WheelSelectorExtra12setTextColorEN8touchgfx9colortypeES1_S1_ii+0x16>
        textExtraSelected[i].setColor(textSelected.getColor());
    }
}
 8005fb2:	b003      	add	sp, #12
 8005fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fb6 <_ZN18WheelSelectorExtra8moveTextEi>:

void WheelSelectorExtra::moveText(int newYPosition)
{
 8005fb6:	b513      	push	{r0, r1, r4, lr}
 8005fb8:	4604      	mov	r4, r0
 8005fba:	9101      	str	r1, [sp, #4]
    adjustForBoundries(newYPosition);
 8005fbc:	a901      	add	r1, sp, #4
 8005fbe:	f7ff fd5d 	bl	8005a7c <_ZN13WheelSelector18adjustForBoundriesERi>

    text.moveTo(text.getX(), newYPosition);
 8005fc2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8005fc6:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8005fca:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8005fce:	f7fa ff1d 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
    textExtra[0].moveTo(text.getX(), newYPosition + text.getHeight());
 8005fd2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8005fd6:	9a01      	ldr	r2, [sp, #4]
 8005fd8:	f504 70c0 	add.w	r0, r4, #384	@ 0x180
 8005fdc:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8005fe0:	441a      	add	r2, r3
 8005fe2:	b212      	sxth	r2, r2
 8005fe4:	f7fa ff12 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
    textExtra[1].moveTo(text.getX(), newYPosition + text.getHeight() + textExtra[0].getHeight());
 8005fe8:	f8b4 318a 	ldrh.w	r3, [r4, #394]	@ 0x18a
 8005fec:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 8005ff0:	f504 70f2 	add.w	r0, r4, #484	@ 0x1e4
 8005ff4:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8005ff8:	441a      	add	r2, r3
 8005ffa:	9b01      	ldr	r3, [sp, #4]
 8005ffc:	441a      	add	r2, r3
 8005ffe:	f8d4 31e4 	ldr.w	r3, [r4, #484]	@ 0x1e4
 8006002:	b212      	sxth	r2, r2
 8006004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006006:	4798      	blx	r3
    textExtra[2].moveTo(text.getX(), newYPosition + text.getHeight() + textExtra[0].getHeight() + textExtra[1].getHeight());
 8006008:	f8b4 318a 	ldrh.w	r3, [r4, #394]	@ 0x18a
 800600c:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 8006010:	f504 7012 	add.w	r0, r4, #584	@ 0x248
 8006014:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8006018:	441a      	add	r2, r3
 800601a:	9b01      	ldr	r3, [sp, #4]
 800601c:	441a      	add	r2, r3
 800601e:	f8b4 31ee 	ldrh.w	r3, [r4, #494]	@ 0x1ee
 8006022:	441a      	add	r2, r3
 8006024:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
 8006028:	b212      	sxth	r2, r2
 800602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602c:	4798      	blx	r3

    textSelected.moveTo(text.getX(), newYPosition - selectedAreaYOffset);
 800602e:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8006032:	9a01      	ldr	r2, [sp, #4]
 8006034:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8006038:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 800603c:	1ad2      	subs	r2, r2, r3
 800603e:	b212      	sxth	r2, r2
 8006040:	f7fa fee4 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
    textExtraSelected[0].moveTo(text.getX(), textExtra[0].getY() - selectedAreaYOffset);
 8006044:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8006048:	f8b4 2186 	ldrh.w	r2, [r4, #390]	@ 0x186
 800604c:	f504 702b 	add.w	r0, r4, #684	@ 0x2ac
 8006050:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8006054:	1ad2      	subs	r2, r2, r3
 8006056:	b212      	sxth	r2, r2
 8006058:	f7fa fed8 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
    textExtraSelected[1].moveTo(text.getX(), textExtra[1].getY() - selectedAreaYOffset);
 800605c:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8006060:	f8b4 21ea 	ldrh.w	r2, [r4, #490]	@ 0x1ea
 8006064:	f504 7044 	add.w	r0, r4, #784	@ 0x310
 8006068:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 800606c:	1ad2      	subs	r2, r2, r3
 800606e:	f8d4 3310 	ldr.w	r3, [r4, #784]	@ 0x310
 8006072:	b212      	sxth	r2, r2
 8006074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006076:	4798      	blx	r3
    textExtraSelected[2].moveTo(text.getX(), textExtra[2].getY() - selectedAreaYOffset);
 8006078:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 800607c:	f8b4 224e 	ldrh.w	r2, [r4, #590]	@ 0x24e
 8006080:	f504 705d 	add.w	r0, r4, #884	@ 0x374
 8006084:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8006088:	1ad2      	subs	r2, r2, r3
 800608a:	f8d4 3374 	ldr.w	r3, [r4, #884]	@ 0x374
 800608e:	b212      	sxth	r2, r2
 8006090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006092:	4798      	blx	r3
}
 8006094:	b002      	add	sp, #8
 8006096:	bd10      	pop	{r4, pc}

08006098 <_ZN18WheelSelectorExtraC1Ev>:
WheelSelectorExtra::WheelSelectorExtra() :
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	4606      	mov	r6, r0
        moveAnimationRunning(false),
 800609e:	2500      	movs	r5, #0
    WheelSelector()
 80060a0:	f7ff fe16 	bl	8005cd0 <_ZN13WheelSelectorC1Ev>
        fadeAnimationEndedCallback(0)
 80060a4:	4f1e      	ldr	r7, [pc, #120]	@ (8006120 <_ZN18WheelSelectorExtraC1Ev+0x88>)
 80060a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006124 <_ZN18WheelSelectorExtraC1Ev+0x8c>)
 80060a8:	f506 74c0 	add.w	r4, r6, #384	@ 0x180
 80060ac:	f506 782b 	add.w	r8, r6, #684	@ 0x2ac
 80060b0:	6033      	str	r3, [r6, #0]
        moveAnimationEndedCallback(0)
 80060b2:	4620      	mov	r0, r4
 80060b4:	3464      	adds	r4, #100	@ 0x64
 80060b6:	f7fd fb37 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
        moveAnimationRunning(false),
 80060ba:	f804 5c32 	strb.w	r5, [r4, #-50]
        moveAnimationCounter(0),
 80060be:	f824 5c30 	strh.w	r5, [r4, #-48]
        moveAnimationDelay(0),
 80060c2:	f824 5c2e 	strh.w	r5, [r4, #-46]
        moveAnimationEndedCallback(0)
 80060c6:	f844 5c18 	str.w	r5, [r4, #-24]
 80060ca:	f844 7c64 	str.w	r7, [r4, #-100]
        fadeAnimationRunning(false),
 80060ce:	f804 5c14 	strb.w	r5, [r4, #-20]
        fadeAnimationCounter(0),
 80060d2:	f824 5c12 	strh.w	r5, [r4, #-18]
        fadeAnimationDelay(0),
 80060d6:	f824 5c10 	strh.w	r5, [r4, #-16]
        fadeAnimationEndedCallback(0)
 80060da:	f844 5c04 	str.w	r5, [r4, #-4]
 80060de:	4544      	cmp	r4, r8
 80060e0:	d1e7      	bne.n	80060b2 <_ZN18WheelSelectorExtraC1Ev+0x1a>
 80060e2:	f506 7876 	add.w	r8, r6, #984	@ 0x3d8
        moveAnimationRunning(false),
 80060e6:	2500      	movs	r5, #0
        moveAnimationEndedCallback(0)
 80060e8:	4620      	mov	r0, r4
 80060ea:	3464      	adds	r4, #100	@ 0x64
 80060ec:	f7fd fb1c 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
        moveAnimationRunning(false),
 80060f0:	f804 5c32 	strb.w	r5, [r4, #-50]
        moveAnimationCounter(0),
 80060f4:	f824 5c30 	strh.w	r5, [r4, #-48]
        moveAnimationDelay(0),
 80060f8:	f824 5c2e 	strh.w	r5, [r4, #-46]
        moveAnimationEndedCallback(0)
 80060fc:	f844 5c18 	str.w	r5, [r4, #-24]
 8006100:	f844 7c64 	str.w	r7, [r4, #-100]
        fadeAnimationRunning(false),
 8006104:	f804 5c14 	strb.w	r5, [r4, #-20]
        fadeAnimationCounter(0),
 8006108:	f824 5c12 	strh.w	r5, [r4, #-18]
        fadeAnimationDelay(0),
 800610c:	f824 5c10 	strh.w	r5, [r4, #-16]
        fadeAnimationEndedCallback(0)
 8006110:	f844 5c04 	str.w	r5, [r4, #-4]
 8006114:	4544      	cmp	r4, r8
 8006116:	d1e7      	bne.n	80060e8 <_ZN18WheelSelectorExtraC1Ev+0x50>
}
 8006118:	4630      	mov	r0, r6
 800611a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800611e:	bf00      	nop
 8006120:	08023c10 	.word	0x08023c10
 8006124:	08021edc 	.word	0x08021edc

08006128 <_ZN18WheelSelectorExtra18adjustBottomCutOffEv>:
    adjustBottomCutOff();
}

void WheelSelectorExtra::adjustBottomCutOff()
{
    bottomCutOff = topCutOff - (textExtra[2].getRect().bottom() - text.getY()) +  - (spaceBetweenTextRows / 3);
 8006128:	f06f 0302 	mvn.w	r3, #2
 800612c:	f8d0 1160 	ldr.w	r1, [r0, #352]	@ 0x160
 8006130:	f8d0 2164 	ldr.w	r2, [r0, #356]	@ 0x164
 8006134:	fb91 f1f3 	sdiv	r1, r1, r3
{
 8006138:	b530      	push	{r4, r5, lr}
        return y + height;
 800613a:	f8b0 3252 	ldrh.w	r3, [r0, #594]	@ 0x252
 800613e:	f8b0 524e 	ldrh.w	r5, [r0, #590]	@ 0x24e
    bottomCutOff = topCutOff - (textExtra[2].getRect().bottom() - text.getY()) +  - (spaceBetweenTextRows / 3);
 8006142:	f9b0 4062 	ldrsh.w	r4, [r0, #98]	@ 0x62
 8006146:	442b      	add	r3, r5
 8006148:	b21b      	sxth	r3, r3
 800614a:	1b1b      	subs	r3, r3, r4
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	440b      	add	r3, r1
 8006150:	f8c0 3168 	str.w	r3, [r0, #360]	@ 0x168
    for (int i = 0; i < NUMBER_OF_EXTRA_TEXTS; i++)
    {
        if (!textExtraIsVisible[i])
 8006154:	f890 33d8 	ldrb.w	r3, [r0, #984]	@ 0x3d8
 8006158:	b133      	cbz	r3, 8006168 <_ZN18WheelSelectorExtra18adjustBottomCutOffEv+0x40>
 800615a:	f890 33d9 	ldrb.w	r3, [r0, #985]	@ 0x3d9
 800615e:	b173      	cbz	r3, 800617e <_ZN18WheelSelectorExtra18adjustBottomCutOffEv+0x56>
 8006160:	f890 33da 	ldrb.w	r3, [r0, #986]	@ 0x3da
 8006164:	b953      	cbnz	r3, 800617c <_ZN18WheelSelectorExtra18adjustBottomCutOffEv+0x54>
    for (int i = 0; i < NUMBER_OF_EXTRA_TEXTS; i++)
 8006166:	2302      	movs	r3, #2
        return rect.y;
 8006168:	2564      	movs	r5, #100	@ 0x64
 800616a:	fb05 0303 	mla	r3, r5, r3, r0
        {
            bottomCutOff = topCutOff - (textExtra[i].getY() - text.getY()) +  - (spaceBetweenTextRows / 3);
 800616e:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	@ 0x186
 8006172:	1b1b      	subs	r3, r3, r4
 8006174:	1ad2      	subs	r2, r2, r3
 8006176:	440a      	add	r2, r1
 8006178:	f8c0 2168 	str.w	r2, [r0, #360]	@ 0x168
            break;
        }
    }
}
 800617c:	bd30      	pop	{r4, r5, pc}
    for (int i = 0; i < NUMBER_OF_EXTRA_TEXTS; i++)
 800617e:	2301      	movs	r3, #1
 8006180:	e7f2      	b.n	8006168 <_ZN18WheelSelectorExtra18adjustBottomCutOffEv+0x40>

08006182 <_ZN18WheelSelectorExtra23setupDatePickerWheelDayEiiii5TEXTSS0_S0_S0_>:
{
 8006182:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006186:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 800618a:	4604      	mov	r4, r0
 800618c:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
        textExtraIsVisible[i] = true;
 8006190:	f04f 0b01 	mov.w	fp, #1
    WheelSelector::setup(width, height, textXPosition, textYPositionOfIndex0Selected, wheelText);
 8006194:	9501      	str	r5, [sp, #4]
 8006196:	f504 792b 	add.w	r9, r4, #684	@ 0x2ac
 800619a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
        textContainer.add(textExtra[i]);
 800619c:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
{
 80061a0:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
    WheelSelector::setup(width, height, textXPosition, textYPositionOfIndex0Selected, wheelText);
 80061a4:	9500      	str	r5, [sp, #0]
    textExtra[0].setTypedText(TypedText(wheelTextExtra0));
 80061a6:	f504 75c0 	add.w	r5, r4, #384	@ 0x180
{
 80061aa:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
    WheelSelector::setup(width, height, textXPosition, textYPositionOfIndex0Selected, wheelText);
 80061ae:	f7ff fcdf 	bl	8005b70 <_ZN13WheelSelector5setupEiiii5TEXTS>
    textExtra[0].setTypedText(TypedText(wheelTextExtra0));
 80061b2:	4639      	mov	r1, r7
 80061b4:	4628      	mov	r0, r5
    textExtra[1].setTypedText(TypedText(wheelTextExtra1));
 80061b6:	f504 77f2 	add.w	r7, r4, #484	@ 0x1e4
    textExtra[0].setTypedText(TypedText(wheelTextExtra0));
 80061ba:	f010 ff39 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    textExtra[1].setTypedText(TypedText(wheelTextExtra1));
 80061be:	4631      	mov	r1, r6
    textExtra[2].setTypedText(TypedText(wheelTextExtra2));
 80061c0:	f504 7612 	add.w	r6, r4, #584	@ 0x248
    textExtra[1].setTypedText(TypedText(wheelTextExtra1));
 80061c4:	4638      	mov	r0, r7
 80061c6:	f010 ff33 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    textExtra[2].setTypedText(TypedText(wheelTextExtra2));
 80061ca:	4641      	mov	r1, r8
 80061cc:	4630      	mov	r0, r6
 80061ce:	f204 38d7 	addw	r8, r4, #983	@ 0x3d7
 80061d2:	f010 ff2d 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80061d6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 80061da:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
    textExtra[0].setXY(text.getX(), text.getRect().bottom());
 80061de:	4628      	mov	r0, r5
 80061e0:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 80061e4:	441a      	add	r2, r3
 80061e6:	b212      	sxth	r2, r2
 80061e8:	f7fa fdfa 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 80061ec:	f8b4 318a 	ldrh.w	r3, [r4, #394]	@ 0x18a
 80061f0:	f8b4 2186 	ldrh.w	r2, [r4, #390]	@ 0x186
    textExtra[1].setXY(text.getX(), textExtra[0].getRect().bottom());
 80061f4:	4638      	mov	r0, r7
 80061f6:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
        textExtra[i].setMoveAnimationEndedAction(textMoveEndedCallback);
 80061fa:	f504 77b8 	add.w	r7, r4, #368	@ 0x170
 80061fe:	441a      	add	r2, r3
    textExtra[1].setXY(text.getX(), textExtra[0].getRect().bottom());
 8006200:	f8d4 31e4 	ldr.w	r3, [r4, #484]	@ 0x1e4
 8006204:	b212      	sxth	r2, r2
 8006206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006208:	4798      	blx	r3
 800620a:	f8b4 31ea 	ldrh.w	r3, [r4, #490]	@ 0x1ea
 800620e:	f8b4 21ee 	ldrh.w	r2, [r4, #494]	@ 0x1ee
    textExtra[2].setXY(text.getX(), textExtra[1].getRect().bottom());
 8006212:	4630      	mov	r0, r6
 8006214:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8006218:	441a      	add	r2, r3
 800621a:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
 800621e:	b212      	sxth	r2, r2
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006222:	4798      	blx	r3
        textExtraSelected[i].setTypedText(textExtra[i].getTypedText());
 8006224:	f505 7696 	add.w	r6, r5, #300	@ 0x12c
        textContainer.add(textExtra[i]);
 8006228:	4629      	mov	r1, r5
 800622a:	4650      	mov	r0, sl
        textExtraIsVisible[i] = true;
 800622c:	f808 bf01 	strb.w	fp, [r8, #1]!
        moveAnimationEndedCallback = &callback;
 8006230:	64ef      	str	r7, [r5, #76]	@ 0x4c
    for (int i = 0; i < NUMBER_OF_EXTRA_TEXTS; i++)
 8006232:	3564      	adds	r5, #100	@ 0x64
        textContainer.add(textExtra[i]);
 8006234:	f00c fd8c 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        textExtraSelected[i].setTypedText(textExtra[i].getTypedText());
 8006238:	f835 1c3e 	ldrh.w	r1, [r5, #-62]
 800623c:	4630      	mov	r0, r6
 800623e:	f010 fef7 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        textExtraSelected[i].setX(textExtra[i].getX());
 8006242:	f8d5 30c8 	ldr.w	r3, [r5, #200]	@ 0xc8
 8006246:	f935 1c60 	ldrsh.w	r1, [r5, #-96]
 800624a:	4630      	mov	r0, r6
 800624c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624e:	4798      	blx	r3
 8006250:	f8c5 7114 	str.w	r7, [r5, #276]	@ 0x114
        textSelectedContainer.add(textExtraSelected[i]);
 8006254:	4631      	mov	r1, r6
 8006256:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800625a:	f00c fd79 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for (int i = 0; i < NUMBER_OF_EXTRA_TEXTS; i++)
 800625e:	454d      	cmp	r5, r9
 8006260:	d1e0      	bne.n	8006224 <_ZN18WheelSelectorExtra23setupDatePickerWheelDayEiiii5TEXTSS0_S0_S0_+0xa2>
    adjustBottomCutOff();
 8006262:	4620      	mov	r0, r4
 8006264:	f7ff ff60 	bl	8006128 <_ZN18WheelSelectorExtra18adjustBottomCutOffEv>
}
 8006268:	b003      	add	sp, #12
 800626a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reset();
 800626e:	f7ff bc79 	b.w	8005b64 <_ZN13WheelSelector5resetEv>
	...

08006274 <_ZN18WheelSelectorExtra15animateMoveTextEiiPFstsstE>:
{
 8006274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    text.startMoveAnimation(text.getX(), newYPosition, duration, EasingEquations::linearEaseNone, equation);
 8006278:	b296      	uxth	r6, r2
 800627a:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8006390 <_ZN18WheelSelectorExtra15animateMoveTextEiiPFstsstE+0x11c>
{
 800627e:	4604      	mov	r4, r0
 8006280:	461f      	mov	r7, r3
 8006282:	4689      	mov	r9, r1
    text.startMoveAnimation(text.getX(), newYPosition, duration, EasingEquations::linearEaseNone, equation);
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	b20a      	sxth	r2, r1
 8006288:	4633      	mov	r3, r6
 800628a:	f8cd 8000 	str.w	r8, [sp]
 800628e:	305c      	adds	r0, #92	@ 0x5c
 8006290:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    textExtra[0].startMoveAnimation(text.getX(), newYPosition + text.getHeight(), duration, EasingEquations::linearEaseNone, equation);
 8006294:	fa1f f589 	uxth.w	r5, r9
    text.startMoveAnimation(text.getX(), newYPosition, duration, EasingEquations::linearEaseNone, equation);
 8006298:	f7ff fddf 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
    textExtra[0].startMoveAnimation(text.getX(), newYPosition + text.getHeight(), duration, EasingEquations::linearEaseNone, equation);
 800629c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 80062a0:	f504 70c0 	add.w	r0, r4, #384	@ 0x180
 80062a4:	fa13 f289 	uxtah	r2, r3, r9
 80062a8:	4633      	mov	r3, r6
 80062aa:	e9cd 8700 	strd	r8, r7, [sp]
 80062ae:	b212      	sxth	r2, r2
 80062b0:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 80062b4:	f7ff fdd1 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
    textExtra[1].startMoveAnimation(text.getX(), newYPosition + text.getHeight() + textExtra[0].getHeight(), duration, EasingEquations::linearEaseNone, equation);
 80062b8:	f8b4 318a 	ldrh.w	r3, [r4, #394]	@ 0x18a
 80062bc:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 80062c0:	f504 70f2 	add.w	r0, r4, #484	@ 0x1e4
 80062c4:	441a      	add	r2, r3
 80062c6:	4633      	mov	r3, r6
 80062c8:	442a      	add	r2, r5
 80062ca:	e9cd 8700 	strd	r8, r7, [sp]
 80062ce:	b212      	sxth	r2, r2
 80062d0:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 80062d4:	f7ff fdc1 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
    textExtra[2].startMoveAnimation(text.getX(), newYPosition + text.getHeight() + textExtra[0].getHeight() + textExtra[1].getHeight(), duration, EasingEquations::linearEaseNone, equation);
 80062d8:	f8b4 318a 	ldrh.w	r3, [r4, #394]	@ 0x18a
 80062dc:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 80062e0:	f504 7012 	add.w	r0, r4, #584	@ 0x248
 80062e4:	441a      	add	r2, r3
 80062e6:	f8b4 31ee 	ldrh.w	r3, [r4, #494]	@ 0x1ee
 80062ea:	442a      	add	r2, r5
 80062ec:	441a      	add	r2, r3
 80062ee:	4633      	mov	r3, r6
 80062f0:	e9cd 8700 	strd	r8, r7, [sp]
 80062f4:	b212      	sxth	r2, r2
 80062f6:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 80062fa:	f7ff fdae 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
    textSelected.startMoveAnimation(text.getX(), newYPosition - selectedAreaYOffset, duration, EasingEquations::linearEaseNone, equation);
 80062fe:	f8d4 2158 	ldr.w	r2, [r4, #344]	@ 0x158
 8006302:	4633      	mov	r3, r6
 8006304:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8006308:	1aaa      	subs	r2, r5, r2
 800630a:	e9cd 8700 	strd	r8, r7, [sp]
 800630e:	b212      	sxth	r2, r2
 8006310:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8006314:	f7ff fda1 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
    textExtraSelected[0].startMoveAnimation(text.getX(), newYPosition + text.getHeight() - selectedAreaYOffset, duration, EasingEquations::linearEaseNone, equation);
 8006318:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 800631c:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8006320:	f504 702b 	add.w	r0, r4, #684	@ 0x2ac
 8006324:	442a      	add	r2, r5
 8006326:	1ad2      	subs	r2, r2, r3
 8006328:	4633      	mov	r3, r6
 800632a:	e9cd 8700 	strd	r8, r7, [sp]
 800632e:	b212      	sxth	r2, r2
 8006330:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8006334:	f7ff fd91 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
    textExtraSelected[1].startMoveAnimation(text.getX(), newYPosition + text.getHeight() + textExtra[0].getHeight() - selectedAreaYOffset, duration, EasingEquations::linearEaseNone, equation);
 8006338:	f8b4 318a 	ldrh.w	r3, [r4, #394]	@ 0x18a
 800633c:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 8006340:	f504 7044 	add.w	r0, r4, #784	@ 0x310
 8006344:	441a      	add	r2, r3
 8006346:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 800634a:	442a      	add	r2, r5
 800634c:	1ad2      	subs	r2, r2, r3
 800634e:	4633      	mov	r3, r6
 8006350:	e9cd 8700 	strd	r8, r7, [sp]
 8006354:	b212      	sxth	r2, r2
 8006356:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 800635a:	f7ff fd7e 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
    textExtraSelected[2].startMoveAnimation(text.getX(), newYPosition + text.getHeight() + textExtra[0].getHeight() + textExtra[1].getHeight() - selectedAreaYOffset, duration, EasingEquations::linearEaseNone, equation);
 800635e:	f8b4 218a 	ldrh.w	r2, [r4, #394]	@ 0x18a
 8006362:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8006366:	f504 705d 	add.w	r0, r4, #884	@ 0x374
 800636a:	4413      	add	r3, r2
 800636c:	18ea      	adds	r2, r5, r3
 800636e:	f8b4 31ee 	ldrh.w	r3, [r4, #494]	@ 0x1ee
 8006372:	441a      	add	r2, r3
 8006374:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8006378:	1ad2      	subs	r2, r2, r3
 800637a:	4633      	mov	r3, r6
 800637c:	e9cd 8700 	strd	r8, r7, [sp]
 8006380:	b212      	sxth	r2, r2
 8006382:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	@ 0x60
 8006386:	f7ff fd68 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
}
 800638a:	b003      	add	sp, #12
 800638c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006390:	0801b59b 	.word	0x0801b59b

08006394 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 8006394:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
    void nextFadeAnimationStep()
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 800639c:	b143      	cbz	r3, 80063b0 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv+0x1c>
            if (fadeAnimationCounter < fadeAnimationDelay)
 800639e:	f8b0 0052 	ldrh.w	r0, [r0, #82]	@ 0x52
 80063a2:	f8b4 1054 	ldrh.w	r1, [r4, #84]	@ 0x54
 80063a6:	4288      	cmp	r0, r1
 80063a8:	d203      	bcs.n	80063b2 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv+0x1e>
                fadeAnimationCounter++;
 80063aa:	3001      	adds	r0, #1
 80063ac:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
    }
 80063b0:	bd70      	pop	{r4, r5, r6, pc}
                if (fadeAnimationCounter <= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80063b2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80063b6:	18ca      	adds	r2, r1, r3
 80063b8:	4290      	cmp	r0, r2
 80063ba:	d918      	bls.n	80063ee <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv+0x5a>
                    fadeAnimationRunning = false;
 80063bc:	2300      	movs	r3, #0
 80063be:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
                    fadeAnimationDuration = 0;
 80063c2:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
                    Application::getInstance()->unregisterTimerWidget(this);
 80063c6:	f013 fbf5 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 80063ca:	4621      	mov	r1, r4
 80063cc:	f013 fc28 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 80063d0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d0ec      	beq.n	80063b0 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv+0x1c>
 80063d6:	6803      	ldr	r3, [r0, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	4798      	blx	r3
 80063dc:	2800      	cmp	r0, #0
 80063de:	d0e7      	beq.n	80063b0 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv+0x1c>
                        fadeAnimationEndedCallback->execute(*this);
 80063e0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80063e2:	4621      	mov	r1, r4
 80063e4:	6803      	ldr	r3, [r0, #0]
    }
 80063e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	4718      	bx	r3
                    int16_t deltaAlpha = (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80063ee:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 80063f2:	1a40      	subs	r0, r0, r1
 80063f4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 80063f8:	2100      	movs	r1, #0
 80063fa:	b280      	uxth	r0, r0
 80063fc:	1b52      	subs	r2, r2, r5
 80063fe:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
 8006400:	b212      	sxth	r2, r2
 8006402:	47a8      	blx	r5
                    T::setAlpha(fadeAnimationStartAlpha + deltaAlpha);
 8006404:	f8b4 3058 	ldrh.w	r3, [r4, #88]	@ 0x58
 8006408:	4418      	add	r0, r3
        this->alpha = alpha;
 800640a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
                    T::invalidate();
 800640e:	4620      	mov	r0, r4
 8006410:	f013 ffbb 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
                    fadeAnimationCounter++;
 8006414:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8006418:	f8b4 2054 	ldrh.w	r2, [r4, #84]	@ 0x54
                    fadeAnimationCounter++;
 800641c:	3301      	adds	r3, #1
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800641e:	f8b4 1056 	ldrh.w	r1, [r4, #86]	@ 0x56
                    fadeAnimationCounter++;
 8006422:	b29b      	uxth	r3, r3
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8006424:	440a      	add	r2, r1
 8006426:	4293      	cmp	r3, r2
                    fadeAnimationCounter++;
 8006428:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800642c:	d9c0      	bls.n	80063b0 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv+0x1c>
 800642e:	e7c5      	b.n	80063bc <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv+0x28>

08006430 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8006430:	b510      	push	{r4, lr}
 8006432:	4604      	mov	r4, r0
        nextMoveAnimationStep();
 8006434:	f7ff fcbb 	bl	8005dae <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv>
        nextFadeAnimationStep();
 8006438:	4620      	mov	r0, r4
 800643a:	f7ff ffab 	bl	8006394 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv>
    }
 800643e:	bd10      	pop	{r4, pc}

08006440 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE18startFadeAnimationEhtPFstsstE>:
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	461d      	mov	r5, r3
        if (!fadeAnimationRunning)
 8006444:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 8006448:	4604      	mov	r4, r0
 800644a:	460f      	mov	r7, r1
 800644c:	4616      	mov	r6, r2
        if (!fadeAnimationRunning)
 800644e:	b923      	cbnz	r3, 800645a <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE18startFadeAnimationEhtPFstsstE+0x1a>
            Application::getInstance()->registerTimerWidget(this);
 8006450:	f013 fbb0 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8006454:	4621      	mov	r1, r4
 8006456:	f013 fbb3 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 800645a:	2300      	movs	r3, #0
        fadeAnimationDuration = duration;
 800645c:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
        fadeAnimationEndAlpha = endAlpha;
 8006460:	f8a4 705a 	strh.w	r7, [r4, #90]	@ 0x5a
        fadeAnimationCounter = 0;
 8006464:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
        fadeAnimationStartAlpha = T::getAlpha();
 8006468:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 800646c:	65e5      	str	r5, [r4, #92]	@ 0x5c
        fadeAnimationStartAlpha = T::getAlpha();
 800646e:	f8a4 3058 	strh.w	r3, [r4, #88]	@ 0x58
        fadeAnimationRunning = true;
 8006472:	2301      	movs	r3, #1
 8006474:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 8006478:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800647a:	b913      	cbnz	r3, 8006482 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE18startFadeAnimationEhtPFstsstE+0x42>
            nextFadeAnimationStep(); // Set end alpha and shut down
 800647c:	4620      	mov	r0, r4
 800647e:	f7ff ff89 	bl	8006394 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE21nextFadeAnimationStepEv>
    }
 8006482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006484 <_ZN18WheelSelectorExtra13fadeExtraTextEiht>:
    assert(extraTextIndex < NUMBER_OF_EXTRA_TEXTS);
 8006484:	2902      	cmp	r1, #2
{
 8006486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800648a:	4607      	mov	r7, r0
 800648c:	460c      	mov	r4, r1
 800648e:	4615      	mov	r5, r2
 8006490:	4698      	mov	r8, r3
    assert(extraTextIndex < NUMBER_OF_EXTRA_TEXTS);
 8006492:	dd05      	ble.n	80064a0 <_ZN18WheelSelectorExtra13fadeExtraTextEiht+0x1c>
 8006494:	4b11      	ldr	r3, [pc, #68]	@ (80064dc <_ZN18WheelSelectorExtra13fadeExtraTextEiht+0x58>)
 8006496:	2165      	movs	r1, #101	@ 0x65
 8006498:	4a11      	ldr	r2, [pc, #68]	@ (80064e0 <_ZN18WheelSelectorExtra13fadeExtraTextEiht+0x5c>)
 800649a:	4812      	ldr	r0, [pc, #72]	@ (80064e4 <_ZN18WheelSelectorExtra13fadeExtraTextEiht+0x60>)
 800649c:	f019 fc6a 	bl	801fd74 <__assert_func>
    textExtra[extraTextIndex].startFadeAnimation(endAlpha, duration);
 80064a0:	2664      	movs	r6, #100	@ 0x64
 80064a2:	4642      	mov	r2, r8
 80064a4:	4b10      	ldr	r3, [pc, #64]	@ (80064e8 <_ZN18WheelSelectorExtra13fadeExtraTextEiht+0x64>)
    textExtraIsVisible[extraTextIndex] = (endAlpha != 0);
 80064a6:	443c      	add	r4, r7
 80064a8:	434e      	muls	r6, r1
    textExtra[extraTextIndex].startFadeAnimation(endAlpha, duration);
 80064aa:	4629      	mov	r1, r5
 80064ac:	f506 70c0 	add.w	r0, r6, #384	@ 0x180
    textExtraSelected[extraTextIndex].startFadeAnimation(endAlpha, duration);
 80064b0:	f506 762b 	add.w	r6, r6, #684	@ 0x2ac
    textExtra[extraTextIndex].startFadeAnimation(endAlpha, duration);
 80064b4:	4438      	add	r0, r7
 80064b6:	f7ff ffc3 	bl	8006440 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE18startFadeAnimationEhtPFstsstE>
    textExtraSelected[extraTextIndex].startFadeAnimation(endAlpha, duration);
 80064ba:	19b8      	adds	r0, r7, r6
 80064bc:	4642      	mov	r2, r8
 80064be:	4629      	mov	r1, r5
 80064c0:	4b09      	ldr	r3, [pc, #36]	@ (80064e8 <_ZN18WheelSelectorExtra13fadeExtraTextEiht+0x64>)
 80064c2:	f7ff ffbd 	bl	8006440 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_8TextAreaEEEE18startFadeAnimationEhtPFstsstE>
    textExtraIsVisible[extraTextIndex] = (endAlpha != 0);
 80064c6:	3d00      	subs	r5, #0
    adjustBottomCutOff();
 80064c8:	4638      	mov	r0, r7
    textExtraIsVisible[extraTextIndex] = (endAlpha != 0);
 80064ca:	bf18      	it	ne
 80064cc:	2501      	movne	r5, #1
 80064ce:	f884 53d8 	strb.w	r5, [r4, #984]	@ 0x3d8
}
 80064d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    adjustBottomCutOff();
 80064d6:	f7ff be27 	b.w	8006128 <_ZN18WheelSelectorExtra18adjustBottomCutOffEv>
 80064da:	bf00      	nop
 80064dc:	08023b44 	.word	0x08023b44
 80064e0:	08023b6b 	.word	0x08023b6b
 80064e4:	08023baa 	.word	0x08023baa
 80064e8:	0801b59b 	.word	0x0801b59b

080064ec <_ZN20EasingEquationButtonD1Ev>:
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TextArea.hpp>

using namespace touchgfx;

class EasingEquationButton : public Container
 80064ec:	4770      	bx	lr

080064ee <_ZN20EasingEquationButtonD0Ev>:
 80064ee:	b510      	push	{r4, lr}
 80064f0:	4604      	mov	r4, r0
 80064f2:	21e4      	movs	r1, #228	@ 0xe4
 80064f4:	f018 fb17 	bl	801eb26 <_ZdlPvj>
 80064f8:	4620      	mov	r0, r4
 80064fa:	bd10      	pop	{r4, pc}

080064fc <_ZN20EasingEquationButtonC1Ev>:
#include <gui/easing_equation_screen/EasingEquationSelector.hpp>
#include <touchgfx/Bitmap.hpp>
#include <BitmapDatabase.hpp>
#include <touchgfx/Color.hpp>

EasingEquationButton::EasingEquationButton()
 80064fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	4604      	mov	r4, r0
 8006502:	2500      	movs	r5, #0
 8006504:	f7fb f962 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
 8006508:	4b2c      	ldr	r3, [pc, #176]	@ (80065bc <_ZN20EasingEquationButtonC1Ev+0xc0>)
 800650a:	4626      	mov	r6, r4
 800650c:	62a5      	str	r5, [r4, #40]	@ 0x28
 800650e:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8006512:	f04f 38ff 	mov.w	r8, #4294967295
 8006516:	f846 3b2c 	str.w	r3, [r6], #44
 800651a:	4630      	mov	r0, r6
 800651c:	f7fb f956 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
        touchable = touch;
 8006520:	2301      	movs	r3, #1
 8006522:	f104 077c 	add.w	r7, r4, #124	@ 0x7c
    AbstractButton() : Widget(), action(), pressed(false)
 8006526:	6565      	str	r5, [r4, #84]	@ 0x54
 8006528:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800652c:	f44f 097f 	mov.w	r9, #16711680	@ 0xff0000
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    RadioButton() : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 8006530:	4b23      	ldr	r3, [pc, #140]	@ (80065c0 <_ZN20EasingEquationButtonC1Ev+0xc4>)
 8006532:	4638      	mov	r0, r7
 8006534:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8006538:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800653a:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800653e:	f8a4 a05a 	strh.w	sl, [r4, #90]	@ 0x5a
 8006542:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
 8006546:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006548:	f8df b078 	ldr.w	fp, [pc, #120]	@ 80065c4 <_ZN20EasingEquationButtonC1Ev+0xc8>
 800654c:	e9c4 8317 	strd	r8, r3, [r4, #92]	@ 0x5c
 8006550:	f7fb f93c 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
 8006554:	f8a4 80a2 	strh.w	r8, [r4, #162]	@ 0xa2
 8006558:	f104 08b0 	add.w	r8, r4, #176	@ 0xb0
 800655c:	f8c4 b07c 	str.w	fp, [r4, #124]	@ 0x7c
        color = col;
 8006560:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
 8006564:	4640      	mov	r0, r8
 8006566:	f8c4 90a8 	str.w	r9, [r4, #168]	@ 0xa8
 800656a:	f8a4 50ac 	strh.w	r5, [r4, #172]	@ 0xac
 800656e:	f7fb f92d 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
{
    buttonText.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 8006572:	22ff      	movs	r2, #255	@ 0xff
 8006574:	f8c4 b0b0 	str.w	fp, [r4, #176]	@ 0xb0
 8006578:	4611      	mov	r1, r2
 800657a:	4610      	mov	r0, r2
 800657c:	f8a4 a0d6 	strh.w	sl, [r4, #214]	@ 0xd6
 8006580:	f8a4 50e0 	strh.w	r5, [r4, #224]	@ 0xe0
 8006584:	e9c4 5936 	strd	r5, r9, [r4, #216]	@ 0xd8
 8006588:	f016 f89e 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    buttonTextShadow.setColor(Color::getColorFrom24BitRGB(0x0, 0x0, 0x0));
 800658c:	462a      	mov	r2, r5
 800658e:	4629      	mov	r1, r5
        this->color = color;
 8006590:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
 8006594:	4628      	mov	r0, r5
 8006596:	f016 f897 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>

    add(radioButton);
 800659a:	4631      	mov	r1, r6
 800659c:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
 80065a0:	4620      	mov	r0, r4
 80065a2:	f00c fbd5 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(buttonTextShadow);
 80065a6:	4641      	mov	r1, r8
 80065a8:	4620      	mov	r0, r4
 80065aa:	f00c fbd1 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(buttonText);
 80065ae:	4620      	mov	r0, r4
 80065b0:	4639      	mov	r1, r7
 80065b2:	f00c fbcd 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80065b6:	4620      	mov	r0, r4
 80065b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	08023ca8 	.word	0x08023ca8
 80065c0:	0802609c 	.word	0x0802609c
 80065c4:	08025e28 	.word	0x08025e28

080065c8 <_ZN20EasingEquationButton5setupE23EasingEquationSelectionRKN8touchgfx6BitmapES4_S4_S4_>:

void EasingEquationButton::setup(EasingEquationSelection newEasingEquation, const Bitmap& bmpUnselected, const Bitmap& bmpUnselectedPressed, const Bitmap& bmpSelected, const Bitmap& bmpSelectedPressed)
{
 80065c8:	b084      	sub	sp, #16
 80065ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065cc:	ad07      	add	r5, sp, #28
 80065ce:	4604      	mov	r4, r0
    radioButton.setBitmaps(bmpUnselected, bmpUnselectedPressed, bmpSelected, bmpSelectedPressed);
 80065d0:	302c      	adds	r0, #44	@ 0x2c
    setWidth(radioButton.getWidth());
    setHeight(radioButton.getHeight());

    easingEquation = newEasingEquation;
 80065d2:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
{
 80065d6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    radioButton.setBitmaps(bmpUnselected, bmpUnselectedPressed, bmpSelected, bmpSelectedPressed);
 80065da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80065e4:	f011 f821 	bl	801762a <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    setWidth(radioButton.getWidth());
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 80065ee:	4620      	mov	r0, r4
 80065f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f2:	4798      	blx	r3
    setHeight(radioButton.getHeight());
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	f9b4 1036 	ldrsh.w	r1, [r4, #54]	@ 0x36
 80065fa:	4620      	mov	r0, r4
 80065fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fe:	4798      	blx	r3
    easingEquation = newEasingEquation;
 8006600:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006604:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    buttonText.setTypedText(TypedText(newEasingEquation.EasingEquationShortName));
 8006608:	f104 067c 	add.w	r6, r4, #124	@ 0x7c
 800660c:	f8bd 102a 	ldrh.w	r1, [sp, #42]	@ 0x2a
    buttonText.resizeToCurrentText();
    buttonTextShadow.setTypedText(buttonText.getTypedText());
 8006610:	f104 05b0 	add.w	r5, r4, #176	@ 0xb0
    buttonText.setTypedText(TypedText(newEasingEquation.EasingEquationShortName));
 8006614:	4630      	mov	r0, r6
 8006616:	f010 fd0b 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    buttonText.resizeToCurrentText();
 800661a:	4630      	mov	r0, r6
 800661c:	f010 fcde 	bl	8016fdc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    buttonTextShadow.setTypedText(buttonText.getTypedText());
 8006620:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	@ 0xa2
 8006624:	4628      	mov	r0, r5
 8006626:	f010 fd03 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    buttonTextShadow.resizeToCurrentText();
 800662a:	4628      	mov	r0, r5
 800662c:	f010 fcd6 	bl	8016fdc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    buttonText.setXY((getWidth() - buttonText.getWidth()) / 2, (getHeight() - buttonText.getHeight()) / 2);
 8006630:	f9b4 3086 	ldrsh.w	r3, [r4, #134]	@ 0x86
 8006634:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8006638:	4630      	mov	r0, r6
 800663a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	f9b4 3084 	ldrsh.w	r3, [r4, #132]	@ 0x84
 8006644:	1ac9      	subs	r1, r1, r3
 8006646:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800664a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800664e:	f342 024f 	sbfx	r2, r2, #1, #16
 8006652:	f341 014f 	sbfx	r1, r1, #1, #16
 8006656:	f7fa fbc3 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    buttonTextShadow.setXY(buttonText.getX() + 1, buttonText.getY() + 1);
 800665a:	f8b4 2082 	ldrh.w	r2, [r4, #130]	@ 0x82
 800665e:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 8006662:	4628      	mov	r0, r5
 8006664:	3201      	adds	r2, #1
 8006666:	3101      	adds	r1, #1
 8006668:	b212      	sxth	r2, r2
 800666a:	b209      	sxth	r1, r1
 800666c:	f7fa fbb8 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>

    invalidate();
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	4620      	mov	r0, r4
 8006674:	695b      	ldr	r3, [r3, #20]
}
 8006676:	b002      	add	sp, #8
 8006678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800667c:	b004      	add	sp, #16
    invalidate();
 800667e:	4718      	bx	r3

08006680 <_ZN20EasingEquationButton14getRadioButtonEv>:

RadioButton& EasingEquationButton::getRadioButton()
{
    return radioButton;
}
 8006680:	302c      	adds	r0, #44	@ 0x2c
 8006682:	4770      	bx	lr

08006684 <_ZNK20EasingEquationButton17getEasingEquationEv>:

const EasingEquationSelection& EasingEquationButton::getEasingEquation() const
{
    return easingEquation;
}
 8006684:	306c      	adds	r0, #108	@ 0x6c
 8006686:	4770      	bx	lr

08006688 <_ZN20EasingEquationButton12setTextColorEN8touchgfx9colortypeES1_>:

void EasingEquationButton::setTextColor(colortype textColor, colortype shadowColor)
{
 8006688:	b510      	push	{r4, lr}
 800668a:	4604      	mov	r4, r0
 800668c:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 8006690:	f8c0 20d8 	str.w	r2, [r0, #216]	@ 0xd8
    buttonText.setColor(textColor);
    buttonTextShadow.setColor(shadowColor);

    buttonText.invalidate();
 8006694:	307c      	adds	r0, #124	@ 0x7c
 8006696:	f013 fe78 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    buttonTextShadow.invalidate();
 800669a:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
}
 800669e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    buttonTextShadow.invalidate();
 80066a2:	f013 be72 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>

080066a6 <_ZN20EasingEquationButton20setTextShadowVisibleEb>:
        visible = vis;
 80066a6:	f880 10d5 	strb.w	r1, [r0, #213]	@ 0xd5

void EasingEquationButton::setTextShadowVisible(bool textShadowVisible)
{
    buttonTextShadow.setVisible(textShadowVisible);
    buttonTextShadow.invalidate();
 80066aa:	30b0      	adds	r0, #176	@ 0xb0
 80066ac:	f013 be6d 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>

080066b0 <_ZN19EasingEquationGraphD1Ev>:
class EasingEquationGraph : public Container
{
public:

    EasingEquationGraph();
    virtual ~EasingEquationGraph() { }
 80066b0:	4b08      	ldr	r3, [pc, #32]	@ (80066d4 <_ZN19EasingEquationGraphD1Ev+0x24>)
 80066b2:	b510      	push	{r4, lr}
 80066b4:	6003      	str	r3, [r0, #0]
 80066b6:	4604      	mov	r4, r0
 80066b8:	4b07      	ldr	r3, [pc, #28]	@ (80066d8 <_ZN19EasingEquationGraphD1Ev+0x28>)
 80066ba:	f500 7074 	add.w	r0, r0, #976	@ 0x3d0
 80066be:	6003      	str	r3, [r0, #0]
 80066c0:	f00f ffe0 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
 *        points with different x values. Points on the graph can be added and removed and the
 *        coordinate system of the graph can easily be setup.
 *
 * @see CanvasWidget
 */
class GraphLine : public AbstractGraph
 80066c4:	4620      	mov	r0, r4
 80066c6:	4b05      	ldr	r3, [pc, #20]	@ (80066dc <_ZN19EasingEquationGraphD1Ev+0x2c>)
 80066c8:	f840 3f2c 	str.w	r3, [r0, #44]!
 80066cc:	f001 fa2e 	bl	8007b2c <_ZN13AbstractGraphD1Ev>
 80066d0:	4620      	mov	r0, r4
 80066d2:	bd10      	pop	{r4, pc}
 80066d4:	08023d38 	.word	0x08023d38
 80066d8:	08025ad0 	.word	0x08025ad0
 80066dc:	0802230c 	.word	0x0802230c

080066e0 <_ZN19EasingEquationGraphD0Ev>:
 80066e0:	b510      	push	{r4, lr}
 80066e2:	4604      	mov	r4, r0
 80066e4:	f7ff ffe4 	bl	80066b0 <_ZN19EasingEquationGraphD1Ev>
 80066e8:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 80066ec:	4620      	mov	r0, r4
 80066ee:	f018 fa1a 	bl	801eb26 <_ZdlPvj>
 80066f2:	4620      	mov	r0, r4
 80066f4:	bd10      	pop	{r4, pc}
	...

080066f8 <_ZN19EasingEquationGraphC1Ev>:
#include <gui/easing_equation_screen/EasingEquationGraph.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <math.h>

EasingEquationGraph::EasingEquationGraph()
 80066f8:	b538      	push	{r3, r4, r5, lr}
        touchable(false),
 80066fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
        this->x = x;
 80066fe:	2500      	movs	r5, #0
 8006700:	4604      	mov	r4, r0
 8006702:	8483      	strh	r3, [r0, #36]	@ 0x24
 8006704:	4b0e      	ldr	r3, [pc, #56]	@ (8006740 <_ZN19EasingEquationGraphC1Ev+0x48>)
        nextDrawChainElement(0),
 8006706:	61c5      	str	r5, [r0, #28]
 8006708:	6285      	str	r5, [r0, #40]	@ 0x28
        this->width = width;
 800670a:	e9c0 5501 	strd	r5, r5, [r0, #4]
        this->width = 0;
 800670e:	e9c0 5503 	strd	r5, r5, [r0, #12]
        nextSibling(0),
 8006712:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8006716:	f840 3b2c 	str.w	r3, [r0], #44
 800671a:	f001 f9eb 	bl	8007af4 <_ZN13AbstractGraphC1Ev>
 800671e:	4b09      	ldr	r3, [pc, #36]	@ (8006744 <_ZN19EasingEquationGraphC1Ev+0x4c>)
 8006720:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8006724:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006726:	f504 7374 	add.w	r3, r4, #976	@ 0x3d0
        Q5() : v(0) { }
 800672a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800672e:	3010      	adds	r0, #16
 8006730:	4298      	cmp	r0, r3
 8006732:	d1fa      	bne.n	800672a <_ZN19EasingEquationGraphC1Ev+0x32>
 8006734:	22ff      	movs	r2, #255	@ 0xff
 8006736:	2100      	movs	r1, #0
 8006738:	f00e fdb0 	bl	801529c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
{

}
 800673c:	4620      	mov	r0, r4
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	08023d38 	.word	0x08023d38
 8006744:	0802230c 	.word	0x0802230c

08006748 <_ZN19EasingEquationGraph5setupEiiN8touchgfx9colortypeEt>:

void EasingEquationGraph::setup(int newWidth, int newHeight, colortype lineColor, uint16_t lineWidth)
{
 8006748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800674a:	461d      	mov	r5, r3
    setWidth(newWidth);
 800674c:	6803      	ldr	r3, [r0, #0]
{
 800674e:	4604      	mov	r4, r0
 8006750:	4616      	mov	r6, r2
    setWidth(newWidth);
 8006752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006754:	b209      	sxth	r1, r1
{
 8006756:	f8bd 7020 	ldrh.w	r7, [sp, #32]
    setWidth(newWidth);
 800675a:	4798      	blx	r3
    setHeight(newHeight);
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	b231      	sxth	r1, r6

    graphLinePainter.setColor(lineColor);
 8006760:	f504 7674 	add.w	r6, r4, #976	@ 0x3d0
    setHeight(newHeight);
 8006764:	4620      	mov	r0, r4
 8006766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006768:	4798      	blx	r3
    graphLinePainter.setColor(lineColor);
 800676a:	4629      	mov	r1, r5
 800676c:	22ff      	movs	r2, #255	@ 0xff
 800676e:	4630      	mov	r0, r6
 8006770:	f00e fd86 	bl	8015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>

    graphLine.setPosition(0, 0, getWidth(), getHeight());
 8006774:	f104 052c 	add.w	r5, r4, #44	@ 0x2c
 8006778:	2200      	movs	r2, #0
 800677a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800677e:	4628      	mov	r0, r5
 8006780:	4611      	mov	r1, r2
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8006788:	f7fa fb12 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    graphLine.setPainter(graphLinePainter);
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	f00f ff7e 	bl	8016690 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    graphLine.setBuffer(graphBuffer, NUMBER_OF_POINTS);
 8006794:	2234      	movs	r2, #52	@ 0x34
 8006796:	f104 0190 	add.w	r1, r4, #144	@ 0x90
 800679a:	4628      	mov	r0, r5
 800679c:	f001 fabf 	bl	8007d1e <_ZN13AbstractGraph9setBufferEPNS_10GraphPointEi>
     */
    template <class T>
    void setLineWidth(T width)
    {
        CWRUtil::Q5 newLineWidth = CWRUtil::toQ5(width);
        if (lineWidth == newLineWidth)
 80067a0:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80067a2:	017b      	lsls	r3, r7, #5
 80067a4:	ebb2 1f47 	cmp.w	r2, r7, lsl #5
 80067a8:	d008      	beq.n	80067bc <_ZN19EasingEquationGraph5setupEiiN8touchgfx9colortypeEt+0x74>
            return;
        }

        lineWidth = newLineWidth;

        if (numPoints > 0)
 80067aa:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
        lineWidth = newLineWidth;
 80067ac:	67e3      	str	r3, [r4, #124]	@ 0x7c
        if (numPoints > 0)
 80067ae:	2a00      	cmp	r2, #0
 80067b0:	dd04      	ble.n	80067bc <_ZN19EasingEquationGraph5setupEiiN8touchgfx9colortypeEt+0x74>
        {
            updateAndInvalidateCacheForLinesBetweenIndeces(0, numPoints - 1);
 80067b2:	3a01      	subs	r2, #1
 80067b4:	2100      	movs	r1, #0
 80067b6:	4628      	mov	r0, r5
 80067b8:	f001 fa3f 	bl	8007c3a <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii>
    graphLine.setLineWidth(lineWidth);
    add(graphLine);
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	4629      	mov	r1, r5
 80067c0:	4620      	mov	r0, r4
 80067c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
}
 80067c4:	b003      	add	sp, #12
 80067c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    add(graphLine);
 80067ca:	4718      	bx	r3

080067cc <_ZN19EasingEquationGraph8setRangeEiiii>:

void EasingEquationGraph::setRange(int left, int right, int top, int bottom)
{
    graphLine.setRange(left, right, top, bottom);
 80067cc:	302c      	adds	r0, #44	@ 0x2c
 80067ce:	f001 bac6 	b.w	8007d5e <_ZN13AbstractGraph8setRangeEiiii>

080067d2 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt3EEERKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80067d2:	4770      	bx	lr

080067d4 <_ZN8touchgfx16RadioButtonGroupILt3EED1Ev>:
     *
     *        Destructor.
     */
    virtual ~RadioButtonGroup()
    {
    }
 80067d4:	4770      	bx	lr

080067d6 <_ZNK8touchgfx16RadioButtonGroupILt3EE27getSelectedRadioButtonIndexEv>:
     *
     *        Gets the index of the selected RadioButton.
     *
     * @return the index of the selected RadioButton. Returns -1 if no RadioButton is selected.
     */
    virtual int32_t getSelectedRadioButtonIndex() const
 80067d6:	4603      	mov	r3, r0
    {
        for (uint16_t i = 0; i < size; i++)
 80067d8:	8a01      	ldrh	r1, [r0, #16]
 80067da:	2000      	movs	r0, #0
    virtual int32_t getSelectedRadioButtonIndex() const
 80067dc:	b510      	push	{r4, lr}
        for (uint16_t i = 0; i < size; i++)
 80067de:	b282      	uxth	r2, r0
 80067e0:	4291      	cmp	r1, r2
 80067e2:	d802      	bhi.n	80067ea <_ZNK8touchgfx16RadioButtonGroupILt3EE27getSelectedRadioButtonIndexEv+0x14>
            if (radioButtons[i]->getSelected())
            {
                return i;
            }
        }
        return -1;
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
    }
 80067e8:	bd10      	pop	{r4, pc}
     *
     * @return The current selected state.
     */
    bool getSelected() const
    {
        return selected;
 80067ea:	f853 4f04 	ldr.w	r4, [r3, #4]!
            if (radioButtons[i]->getSelected())
 80067ee:	1c42      	adds	r2, r0, #1
 80067f0:	f894 4037 	ldrb.w	r4, [r4, #55]	@ 0x37
 80067f4:	2c00      	cmp	r4, #0
 80067f6:	d1f7      	bne.n	80067e8 <_ZNK8touchgfx16RadioButtonGroupILt3EE27getSelectedRadioButtonIndexEv+0x12>
 80067f8:	4610      	mov	r0, r2
 80067fa:	e7f0      	b.n	80067de <_ZNK8touchgfx16RadioButtonGroupILt3EE27getSelectedRadioButtonIndexEv+0x8>

080067fc <_ZN28EasingEquationInOrOutOrInOutD1Ev>:
#include <gui/easing_equation_screen/EasingEquations.hpp>
#include <touchgfx/widgets/AbstractButton.hpp>

using namespace touchgfx;

class EasingEquationInOrOutOrInOut : public Container
 80067fc:	4770      	bx	lr

080067fe <_ZN8touchgfx8CallbackI28EasingEquationInOrOutOrInOutRKNS_14AbstractButtonEvvED1Ev>:
 80067fe:	4770      	bx	lr

08006800 <_ZN8touchgfx8CallbackI28EasingEquationInOrOutOrInOutRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006800:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8006802:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006804:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8006806:	68c2      	ldr	r2, [r0, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	1055      	asrs	r5, r2, #1
 800680c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006810:	07d2      	lsls	r2, r2, #31
 8006812:	bf48      	it	mi
 8006814:	5962      	ldrmi	r2, [r4, r5]
    }
 8006816:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8006818:	bf48      	it	mi
 800681a:	58d3      	ldrmi	r3, [r2, r3]
 800681c:	4718      	bx	r3

0800681e <_ZNK8touchgfx8CallbackI28EasingEquationInOrOutOrInOutRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800681e:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8006820:	6840      	ldr	r0, [r0, #4]
 8006822:	b130      	cbz	r0, 8006832 <_ZNK8touchgfx8CallbackI28EasingEquationInOrOutOrInOutRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	b91a      	cbnz	r2, 8006830 <_ZNK8touchgfx8CallbackI28EasingEquationInOrOutOrInOutRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8006828:	68d8      	ldr	r0, [r3, #12]
 800682a:	f000 0001 	and.w	r0, r0, #1
 800682e:	4770      	bx	lr
 8006830:	2001      	movs	r0, #1
    }
 8006832:	4770      	bx	lr

08006834 <_ZNK8touchgfx16RadioButtonGroupILt3EE14getRadioButtonEt>:
        return (size > index) ? radioButtons[index] : 0;
 8006834:	8a03      	ldrh	r3, [r0, #16]
 8006836:	428b      	cmp	r3, r1
 8006838:	bf86      	itte	hi
 800683a:	eb00 0081 	addhi.w	r0, r0, r1, lsl #2
 800683e:	6840      	ldrhi	r0, [r0, #4]
 8006840:	2000      	movls	r0, #0
    }
 8006842:	4770      	bx	lr

08006844 <_ZNK8touchgfx16RadioButtonGroupILt3EE22getSelectedRadioButtonEv>:
     *
     * @return a pointer to the selected RadioButton. Returns 0 if no RadioButton is selected.
     */
    virtual RadioButton* getSelectedRadioButton() const
    {
        int32_t index = getSelectedRadioButtonIndex();
 8006844:	6803      	ldr	r3, [r0, #0]
    virtual RadioButton* getSelectedRadioButton() const
 8006846:	b510      	push	{r4, lr}
        int32_t index = getSelectedRadioButtonIndex();
 8006848:	691b      	ldr	r3, [r3, #16]
    virtual RadioButton* getSelectedRadioButton() const
 800684a:	4604      	mov	r4, r0
        int32_t index = getSelectedRadioButtonIndex();
 800684c:	4798      	blx	r3
        return (index < 0) ? 0 : getRadioButton(index);
 800684e:	1e01      	subs	r1, r0, #0
 8006850:	db06      	blt.n	8006860 <_ZNK8touchgfx16RadioButtonGroupILt3EE22getSelectedRadioButtonEv+0x1c>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	4620      	mov	r0, r4
 8006856:	b289      	uxth	r1, r1
 8006858:	68db      	ldr	r3, [r3, #12]
    }
 800685a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return (index < 0) ? 0 : getRadioButton(index);
 800685e:	4718      	bx	r3
    }
 8006860:	2000      	movs	r0, #0
 8006862:	bd10      	pop	{r4, pc}

08006864 <_ZN8touchgfx16RadioButtonGroupILt3EE21setDeselectionEnabledEb>:
     *        Sets whether or not it is possible to deselect RadioButtons by clicking them when
     *        they are selected.
     *
     * @param deselectionEnabled true if it should be possible to deselect by click.
     */
    virtual void setDeselectionEnabled(bool deselectionEnabled)
 8006864:	8a03      	ldrh	r3, [r0, #16]
 8006866:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    {
        for (uint16_t i = 0; i < size; i++)
 800686a:	4298      	cmp	r0, r3
 800686c:	d100      	bne.n	8006870 <_ZN8touchgfx16RadioButtonGroupILt3EE21setDeselectionEnabledEb+0xc>
        {
            radioButtons[i]->setDeselectionEnabled(deselectionEnabled);
        }
    }
 800686e:	4770      	bx	lr
        deselectionEnabled = state;
 8006870:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006874:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
        for (uint16_t i = 0; i < size; i++)
 8006878:	e7f7      	b.n	800686a <_ZN8touchgfx16RadioButtonGroupILt3EE21setDeselectionEnabledEb+0x6>

0800687a <_ZNK8touchgfx16RadioButtonGroupILt3EE21getDeselectionEnabledEv>:
     *
     *        Gets the current deselectionEnabled state.
     *
     * @return The current deselectionEnabled state.
     */
    virtual bool getDeselectionEnabled() const
 800687a:	4603      	mov	r3, r0
    {
        return (size > 0) ? radioButtons[0]->getDeselectionEnabled() : false;
 800687c:	8a00      	ldrh	r0, [r0, #16]
 800687e:	b110      	cbz	r0, 8006886 <_ZNK8touchgfx16RadioButtonGroupILt3EE21getDeselectionEnabledEv+0xc>
        return deselectionEnabled;
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
    }
 8006886:	4770      	bx	lr

08006888 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt3EEERKNS_14AbstractButtonEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8006888:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800688a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800688c:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800688e:	68c2      	ldr	r2, [r0, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	1055      	asrs	r5, r2, #1
 8006894:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006898:	07d2      	lsls	r2, r2, #31
 800689a:	bf48      	it	mi
 800689c:	5962      	ldrmi	r2, [r4, r5]
    }
 800689e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80068a0:	bf48      	it	mi
 80068a2:	58d3      	ldrmi	r3, [r2, r3]
 80068a4:	4718      	bx	r3

080068a6 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt3EEERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80068a6:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 80068a8:	6840      	ldr	r0, [r0, #4]
 80068aa:	b130      	cbz	r0, 80068ba <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt3EEERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	b91a      	cbnz	r2, 80068b8 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt3EEERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80068b0:	68d8      	ldr	r0, [r3, #12]
 80068b2:	f000 0001 	and.w	r0, r0, #1
 80068b6:	4770      	bx	lr
 80068b8:	2001      	movs	r0, #1
    }
 80068ba:	4770      	bx	lr

080068bc <_ZN8touchgfx8CallbackI28EasingEquationInOrOutOrInOutRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80068bc:	b510      	push	{r4, lr}
 80068be:	4604      	mov	r4, r0
 80068c0:	2110      	movs	r1, #16
 80068c2:	f018 f930 	bl	801eb26 <_ZdlPvj>
 80068c6:	4620      	mov	r0, r4
 80068c8:	bd10      	pop	{r4, pc}

080068ca <_ZN8touchgfx16RadioButtonGroupILt3EED0Ev>:
    virtual ~RadioButtonGroup()
 80068ca:	b510      	push	{r4, lr}
 80068cc:	4604      	mov	r4, r0
    }
 80068ce:	213c      	movs	r1, #60	@ 0x3c
 80068d0:	f018 f929 	bl	801eb26 <_ZdlPvj>
 80068d4:	4620      	mov	r0, r4
 80068d6:	bd10      	pop	{r4, pc}

080068d8 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt3EEERKNS_14AbstractButtonEvvED0Ev>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	4604      	mov	r4, r0
 80068dc:	2110      	movs	r1, #16
 80068de:	f018 f922 	bl	801eb26 <_ZdlPvj>
 80068e2:	4620      	mov	r0, r4
 80068e4:	bd10      	pop	{r4, pc}

080068e6 <_ZN28EasingEquationInOrOutOrInOutD0Ev>:
 80068e6:	b510      	push	{r4, lr}
 80068e8:	4604      	mov	r4, r0
 80068ea:	f44f 714a 	mov.w	r1, #808	@ 0x328
 80068ee:	f018 f91a 	bl	801eb26 <_ZdlPvj>
 80068f2:	4620      	mov	r0, r4
 80068f4:	bd10      	pop	{r4, pc}

080068f6 <_ZN8touchgfx16RadioButtonGroupILt3EE11setSelectedERNS_11RadioButtonE>:
    virtual void setSelected(RadioButton& radioButton)
 80068f6:	b570      	push	{r4, r5, r6, lr}
 80068f8:	460d      	mov	r5, r1
 80068fa:	4604      	mov	r4, r0
        radioButton.setSelected(true);
 80068fc:	2101      	movs	r1, #1
 80068fe:	4628      	mov	r0, r5
 8006900:	f010 ff64 	bl	80177cc <_ZN8touchgfx11RadioButton11setSelectedEb>
        radioButtonClickedHandler(radioButton);
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	4629      	mov	r1, r5
 8006908:	4620      	mov	r0, r4
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800690c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        radioButtonClickedHandler(radioButton);
 8006910:	4718      	bx	r3
	...

08006914 <_ZN8touchgfx16RadioButtonGroupILt3EE3addERNS_11RadioButtonE>:
    virtual void add(RadioButton& radioButton)
 8006914:	b508      	push	{r3, lr}
        assert(size < CAPACITY && "RadioButtonGroup capacity exceeded!");
 8006916:	8a03      	ldrh	r3, [r0, #16]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d905      	bls.n	8006928 <_ZN8touchgfx16RadioButtonGroupILt3EE3addERNS_11RadioButtonE+0x14>
 800691c:	4b08      	ldr	r3, [pc, #32]	@ (8006940 <_ZN8touchgfx16RadioButtonGroupILt3EE3addERNS_11RadioButtonE+0x2c>)
 800691e:	2154      	movs	r1, #84	@ 0x54
 8006920:	4a08      	ldr	r2, [pc, #32]	@ (8006944 <_ZN8touchgfx16RadioButtonGroupILt3EE3addERNS_11RadioButtonE+0x30>)
 8006922:	4809      	ldr	r0, [pc, #36]	@ (8006948 <_ZN8touchgfx16RadioButtonGroupILt3EE3addERNS_11RadioButtonE+0x34>)
 8006924:	f019 fa26 	bl	801fd74 <__assert_func>
        radioButton.setAction(radioButtonClicked);
 8006928:	f100 0214 	add.w	r2, r0, #20
        action = &callback;
 800692c:	628a      	str	r2, [r1, #40]	@ 0x28
        radioButton.setDeselectedAction(radioButtonUnselected);
 800692e:	f100 0224 	add.w	r2, r0, #36	@ 0x24
        deselectedAction = &callback;
 8006932:	63ca      	str	r2, [r1, #60]	@ 0x3c
        radioButtons[size++] = &radioButton;
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	8202      	strh	r2, [r0, #16]
 8006938:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800693c:	6041      	str	r1, [r0, #4]
    }
 800693e:	bd08      	pop	{r3, pc}
 8006940:	08023dc0 	.word	0x08023dc0
 8006944:	08023df9 	.word	0x08023df9
 8006948:	08023e67 	.word	0x08023e67

0800694c <_ZN8touchgfx16RadioButtonGroupILt3EE25radioButtonClickedHandlerERKNS_14AbstractButtonE>:
     *        Handles the event that a RadioButton has been selected. deselects all other
     *        RadioButtons.
     *
     * @param radioButton the RadioButton that has been selected.
     */
    virtual void radioButtonClickedHandler(const AbstractButton& radioButton)
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	4604      	mov	r4, r0
 8006950:	460d      	mov	r5, r1
    {
        // Deselect other radio buttons
        for (uint16_t i = 0; i < size; i++)
 8006952:	2600      	movs	r6, #0
 8006954:	8a22      	ldrh	r2, [r4, #16]
 8006956:	b2b3      	uxth	r3, r6
 8006958:	429a      	cmp	r2, r3
 800695a:	d80c      	bhi.n	8006976 <_ZN8touchgfx16RadioButtonGroupILt3EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x2a>
                    radioButtons[i]->setSelected(false);
                }
            }
        }

        if (radioButtonSelectedCallback && radioButtonSelectedCallback->isValid())
 800695c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800695e:	b1c0      	cbz	r0, 8006992 <_ZN8touchgfx16RadioButtonGroupILt3EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x46>
 8006960:	6803      	ldr	r3, [r0, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	4798      	blx	r3
 8006966:	b1a0      	cbz	r0, 8006992 <_ZN8touchgfx16RadioButtonGroupILt3EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x46>
 8006968:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        {
            radioButtonSelectedCallback->execute(radioButton);
 800696a:	4629      	mov	r1, r5
 800696c:	6803      	ldr	r3, [r0, #0]
        }
    }
 800696e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonSelectedCallback->execute(radioButton);
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	4718      	bx	r3
            if (radioButtons[i] != &radioButton)
 8006976:	b2b3      	uxth	r3, r6
 8006978:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800697c:	6858      	ldr	r0, [r3, #4]
 800697e:	42a8      	cmp	r0, r5
 8006980:	d005      	beq.n	800698e <_ZN8touchgfx16RadioButtonGroupILt3EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x42>
                if (radioButtons[i]->getSelected())
 8006982:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 8006986:	b113      	cbz	r3, 800698e <_ZN8touchgfx16RadioButtonGroupILt3EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x42>
                    radioButtons[i]->setSelected(false);
 8006988:	2100      	movs	r1, #0
 800698a:	f010 ff1f 	bl	80177cc <_ZN8touchgfx11RadioButton11setSelectedEb>
        for (uint16_t i = 0; i < size; i++)
 800698e:	3601      	adds	r6, #1
 8006990:	e7e0      	b.n	8006954 <_ZN8touchgfx16RadioButtonGroupILt3EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x8>
    }
 8006992:	bd70      	pop	{r4, r5, r6, pc}

08006994 <_ZN8touchgfx16RadioButtonGroupILt3EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE>:
     *
     *        Handles the event that a RadioButton has been deselected.
     *
     * @param radioButton the RadioButton that has been deselected.
     */
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4604      	mov	r4, r0
    {
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 8006998:	6b80      	ldr	r0, [r0, #56]	@ 0x38
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 800699a:	460d      	mov	r5, r1
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 800699c:	b150      	cbz	r0, 80069b4 <_ZN8touchgfx16RadioButtonGroupILt3EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x20>
 800699e:	6803      	ldr	r3, [r0, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	4798      	blx	r3
 80069a4:	b130      	cbz	r0, 80069b4 <_ZN8touchgfx16RadioButtonGroupILt3EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x20>
 80069a6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        {
            radioButtonDeselectedCallback->execute(radioButton);
 80069a8:	4629      	mov	r1, r5
 80069aa:	6803      	ldr	r3, [r0, #0]
        }
    }
 80069ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonDeselectedCallback->execute(radioButton);
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	4718      	bx	r3
    }
 80069b4:	bd70      	pop	{r4, r5, r6, pc}

080069b6 <_ZN28EasingEquationInOrOutOrInOut26setInOrOutSelectedCallbackERN8touchgfx15GenericCallbackI22EasingEquationsInOrOutvvEE>:
    setButtonColors();
}

void EasingEquationInOrOutOrInOut::setInOrOutSelectedCallback(GenericCallback<EasingEquationsInOrOut>& callback)
{
    inOrOutSelectedCallback = &callback;
 80069b6:	f8c0 1324 	str.w	r1, [r0, #804]	@ 0x324
}
 80069ba:	4770      	bx	lr

080069bc <_ZN28EasingEquationInOrOutOrInOut11selectFirstEv>:
        inOrOutSelectedCallback->execute(inOrOut);
    }
}

void EasingEquationInOrOutOrInOut::selectFirst()
{
 80069bc:	b510      	push	{r4, lr}
 80069be:	4604      	mov	r4, r0
    buttons.setSelected(in.getRadioButton());
 80069c0:	302c      	adds	r0, #44	@ 0x2c
 80069c2:	f7ff fe5d 	bl	8006680 <_ZN20EasingEquationButton14getRadioButtonEv>
 80069c6:	4601      	mov	r1, r0
 80069c8:	f504 7036 	add.w	r0, r4, #728	@ 0x2d8
 80069cc:	f7ff ff93 	bl	80068f6 <_ZN8touchgfx16RadioButtonGroupILt3EE11setSelectedERNS_11RadioButtonE>
}
 80069d0:	bd10      	pop	{r4, pc}

080069d2 <_ZN28EasingEquationInOrOutOrInOut15setButtonColorsEv>:

void EasingEquationInOrOutOrInOut::setButtonColors()
{
 80069d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d4:	4604      	mov	r4, r0
    int selected = buttons.getSelectedRadioButtonIndex();
 80069d6:	f500 7036 	add.w	r0, r0, #728	@ 0x2d8
 80069da:	f7ff fefc 	bl	80067d6 <_ZNK8touchgfx16RadioButtonGroupILt3EE27getSelectedRadioButtonIndexEv>

    in.setTextColor(Color::getColorFrom24BitRGB(0x9D, 0xC9, 0xD1), 0);
 80069de:	22d1      	movs	r2, #209	@ 0xd1
 80069e0:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
    int selected = buttons.getSelectedRadioButtonIndex();
 80069e4:	4605      	mov	r5, r0
    in.setTextColor(Color::getColorFrom24BitRGB(0x9D, 0xC9, 0xD1), 0);
 80069e6:	21c9      	movs	r1, #201	@ 0xc9
 80069e8:	209d      	movs	r0, #157	@ 0x9d
 80069ea:	f015 fe6d 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    out.setTextColor(Color::getColorFrom24BitRGB(0x9D, 0xC9, 0xD1), 0);
 80069ee:	f504 7688 	add.w	r6, r4, #272	@ 0x110
    in.setTextColor(Color::getColorFrom24BitRGB(0x9D, 0xC9, 0xD1), 0);
 80069f2:	4601      	mov	r1, r0
 80069f4:	2200      	movs	r2, #0
 80069f6:	4638      	mov	r0, r7
    inOut.setTextColor(Color::getColorFrom24BitRGB(0x9D, 0xC9, 0xD1), 0);
 80069f8:	f504 74fa 	add.w	r4, r4, #500	@ 0x1f4
    in.setTextColor(Color::getColorFrom24BitRGB(0x9D, 0xC9, 0xD1), 0);
 80069fc:	f7ff fe44 	bl	8006688 <_ZN20EasingEquationButton12setTextColorEN8touchgfx9colortypeES1_>
    out.setTextColor(Color::getColorFrom24BitRGB(0x9D, 0xC9, 0xD1), 0);
 8006a00:	22d1      	movs	r2, #209	@ 0xd1
 8006a02:	21c9      	movs	r1, #201	@ 0xc9
 8006a04:	209d      	movs	r0, #157	@ 0x9d
 8006a06:	f015 fe5f 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4601      	mov	r1, r0
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7ff fe3a 	bl	8006688 <_ZN20EasingEquationButton12setTextColorEN8touchgfx9colortypeES1_>
    inOut.setTextColor(Color::getColorFrom24BitRGB(0x9D, 0xC9, 0xD1), 0);
 8006a14:	22d1      	movs	r2, #209	@ 0xd1
 8006a16:	21c9      	movs	r1, #201	@ 0xc9
 8006a18:	209d      	movs	r0, #157	@ 0x9d
 8006a1a:	f015 fe55 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4601      	mov	r1, r0
 8006a22:	4620      	mov	r0, r4
 8006a24:	f7ff fe30 	bl	8006688 <_ZN20EasingEquationButton12setTextColorEN8touchgfx9colortypeES1_>

    switch (selected)
 8006a28:	2d01      	cmp	r5, #1
 8006a2a:	d00e      	beq.n	8006a4a <_ZN28EasingEquationInOrOutOrInOut15setButtonColorsEv+0x78>
 8006a2c:	2d02      	cmp	r5, #2
 8006a2e:	d015      	beq.n	8006a5c <_ZN28EasingEquationInOrOutOrInOut15setButtonColorsEv+0x8a>
 8006a30:	b9ed      	cbnz	r5, 8006a6e <_ZN28EasingEquationInOrOutOrInOut15setButtonColorsEv+0x9c>
    {
    case 0:
        in.setTextColor(Color::getColorFrom24BitRGB(0xFF, 0x61, 0x14), 0);
 8006a32:	2214      	movs	r2, #20
 8006a34:	2161      	movs	r1, #97	@ 0x61
 8006a36:	20ff      	movs	r0, #255	@ 0xff
 8006a38:	f015 fe46 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006a3c:	462a      	mov	r2, r5
 8006a3e:	4601      	mov	r1, r0
 8006a40:	4638      	mov	r0, r7
        inOut.setTextColor(Color::getColorFrom24BitRGB(0xFF, 0x61, 0x14), 0);
        break;
    default:
        break;
    }
}
 8006a42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        inOut.setTextColor(Color::getColorFrom24BitRGB(0xFF, 0x61, 0x14), 0);
 8006a46:	f7ff be1f 	b.w	8006688 <_ZN20EasingEquationButton12setTextColorEN8touchgfx9colortypeES1_>
        out.setTextColor(Color::getColorFrom24BitRGB(0xFF, 0x61, 0x14), 0);
 8006a4a:	2214      	movs	r2, #20
 8006a4c:	2161      	movs	r1, #97	@ 0x61
 8006a4e:	20ff      	movs	r0, #255	@ 0xff
 8006a50:	f015 fe3a 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006a54:	2200      	movs	r2, #0
 8006a56:	4601      	mov	r1, r0
 8006a58:	4630      	mov	r0, r6
 8006a5a:	e7f2      	b.n	8006a42 <_ZN28EasingEquationInOrOutOrInOut15setButtonColorsEv+0x70>
        inOut.setTextColor(Color::getColorFrom24BitRGB(0xFF, 0x61, 0x14), 0);
 8006a5c:	2214      	movs	r2, #20
 8006a5e:	2161      	movs	r1, #97	@ 0x61
 8006a60:	20ff      	movs	r0, #255	@ 0xff
 8006a62:	f015 fe31 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006a66:	2200      	movs	r2, #0
 8006a68:	4601      	mov	r1, r0
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	e7e9      	b.n	8006a42 <_ZN28EasingEquationInOrOutOrInOut15setButtonColorsEv+0x70>
}
 8006a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a70 <_ZN28EasingEquationInOrOutOrInOut8selectedERKN8touchgfx14AbstractButtonE>:
{
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	460c      	mov	r4, r1
 8006a74:	4605      	mov	r5, r0
    EasingEquationsInOrOut inOrOut = (&btn == &(in.getRadioButton())) ? EASING_EQUATION_IN : (&btn == &(out.getRadioButton())) ? EASING_EQUATION_OUT : EASING_EQUATION_IN_OUT;
 8006a76:	302c      	adds	r0, #44	@ 0x2c
 8006a78:	f7ff fe02 	bl	8006680 <_ZN20EasingEquationButton14getRadioButtonEv>
 8006a7c:	4284      	cmp	r4, r0
 8006a7e:	d019      	beq.n	8006ab4 <_ZN28EasingEquationInOrOutOrInOut8selectedERKN8touchgfx14AbstractButtonE+0x44>
 8006a80:	f505 7088 	add.w	r0, r5, #272	@ 0x110
 8006a84:	f7ff fdfc 	bl	8006680 <_ZN20EasingEquationButton14getRadioButtonEv>
 8006a88:	4284      	cmp	r4, r0
 8006a8a:	bf14      	ite	ne
 8006a8c:	2402      	movne	r4, #2
 8006a8e:	2401      	moveq	r4, #1
    setButtonColors();
 8006a90:	4628      	mov	r0, r5
 8006a92:	f7ff ff9e 	bl	80069d2 <_ZN28EasingEquationInOrOutOrInOut15setButtonColorsEv>
    if (inOrOutSelectedCallback && inOrOutSelectedCallback->isValid())
 8006a96:	f8d5 0324 	ldr.w	r0, [r5, #804]	@ 0x324
 8006a9a:	b168      	cbz	r0, 8006ab8 <_ZN28EasingEquationInOrOutOrInOut8selectedERKN8touchgfx14AbstractButtonE+0x48>
 8006a9c:	6803      	ldr	r3, [r0, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4798      	blx	r3
 8006aa2:	b148      	cbz	r0, 8006ab8 <_ZN28EasingEquationInOrOutOrInOut8selectedERKN8touchgfx14AbstractButtonE+0x48>
        inOrOutSelectedCallback->execute(inOrOut);
 8006aa4:	f8d5 0324 	ldr.w	r0, [r5, #804]	@ 0x324
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	6803      	ldr	r3, [r0, #0]
}
 8006aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        inOrOutSelectedCallback->execute(inOrOut);
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	4718      	bx	r3
    EasingEquationsInOrOut inOrOut = (&btn == &(in.getRadioButton())) ? EASING_EQUATION_IN : (&btn == &(out.getRadioButton())) ? EASING_EQUATION_OUT : EASING_EQUATION_IN_OUT;
 8006ab4:	2400      	movs	r4, #0
 8006ab6:	e7eb      	b.n	8006a90 <_ZN28EasingEquationInOrOutOrInOut8selectedERKN8touchgfx14AbstractButtonE+0x20>
}
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006abc <_ZN28EasingEquationInOrOutOrInOutC1Ev>:
        touchable(false),
 8006abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
EasingEquationInOrOutOrInOut::EasingEquationInOrOutOrInOut() :
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	4604      	mov	r4, r0
        this->x = x;
 8006ac6:	2500      	movs	r5, #0
    inOrOutSelectedCallback(0)
 8006ac8:	4606      	mov	r6, r0
 8006aca:	8483      	strh	r3, [r0, #36]	@ 0x24
 8006acc:	4b75      	ldr	r3, [pc, #468]	@ (8006ca4 <_ZN28EasingEquationInOrOutOrInOutC1Ev+0x1e8>)
 8006ace:	f504 7888 	add.w	r8, r4, #272	@ 0x110
EasingEquationInOrOutOrInOut::EasingEquationInOrOutOrInOut() :
 8006ad2:	b097      	sub	sp, #92	@ 0x5c
    inOrOutSelectedCallback(0)
 8006ad4:	f504 77fa 	add.w	r7, r4, #500	@ 0x1f4
        nextDrawChainElement(0),
 8006ad8:	61c5      	str	r5, [r0, #28]
 8006ada:	f504 7a36 	add.w	sl, r4, #728	@ 0x2d8
 8006ade:	6285      	str	r5, [r0, #40]	@ 0x28
 8006ae0:	f04f 092d 	mov.w	r9, #45	@ 0x2d
 8006ae4:	f04f 0b2c 	mov.w	fp, #44	@ 0x2c
        this->width = width;
 8006ae8:	e9c0 5501 	strd	r5, r5, [r0, #4]
        this->width = 0;
 8006aec:	e9c0 5503 	strd	r5, r5, [r0, #12]
        nextSibling(0),
 8006af0:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8006af4:	f846 3b2c 	str.w	r3, [r6], #44
 8006af8:	4630      	mov	r0, r6
 8006afa:	f7ff fcff 	bl	80064fc <_ZN20EasingEquationButtonC1Ev>
 8006afe:	4640      	mov	r0, r8
 8006b00:	f7ff fcfc 	bl	80064fc <_ZN20EasingEquationButtonC1Ev>
 8006b04:	4638      	mov	r0, r7
 8006b06:	f7ff fcf9 	bl	80064fc <_ZN20EasingEquationButtonC1Ev>
    {
 8006b0a:	4a67      	ldr	r2, [pc, #412]	@ (8006ca8 <_ZN28EasingEquationInOrOutOrInOutC1Ev+0x1ec>)
        radioButtonDeselectedCallback(0)
 8006b0c:	4b67      	ldr	r3, [pc, #412]	@ (8006cac <_ZN28EasingEquationInOrOutOrInOutC1Ev+0x1f0>)
        this->pmemfun_1 = pmemfun_1;
 8006b0e:	2124      	movs	r1, #36	@ 0x24
    EasingEquationSelection selections[] =
 8006b10:	f8df e1a4 	ldr.w	lr, [pc, #420]	@ 8006cb8 <_ZN28EasingEquationInOrOutOrInOutC1Ev+0x1fc>
 8006b14:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
 8006b18:	2301      	movs	r3, #1
        size(0),
 8006b1a:	f8a4 52e8 	strh.w	r5, [r4, #744]	@ 0x2e8
    inOrOutSelectedCallback(0)
 8006b1e:	f8c4 5324 	str.w	r5, [r4, #804]	@ 0x324
        this->pobject = pobject;
 8006b22:	e9c4 2abb 	strd	r2, sl, [r4, #748]	@ 0x2ec
 8006b26:	e9c4 2abf 	strd	r2, sl, [r4, #764]	@ 0x2fc
        this->pmemfun_1 = pmemfun_1;
 8006b2a:	2228      	movs	r2, #40	@ 0x28
 8006b2c:	e9c4 13bd 	strd	r1, r3, [r4, #756]	@ 0x2f4
 8006b30:	e9c4 23c1 	strd	r2, r3, [r4, #772]	@ 0x304
    {
 8006b34:	4b5e      	ldr	r3, [pc, #376]	@ (8006cb0 <_ZN28EasingEquationInOrOutOrInOutC1Ev+0x1f4>)
    EasingEquationSelection selections[] =
 8006b36:	eb0d 0c02 	add.w	ip, sp, r2
        this->pobject = pobject;
 8006b3a:	e9c4 34c5 	strd	r3, r4, [r4, #788]	@ 0x314
        this->pmemfun_1 = pmemfun_1;
 8006b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8006cb4 <_ZN28EasingEquationInOrOutOrInOutC1Ev+0x1f8>)
 8006b40:	e9c4 35c7 	strd	r3, r5, [r4, #796]	@ 0x31c
 8006b44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006b48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006b4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
        radioButtonDeselectedCallback(0)
 8006b50:	e9c4 55c3 	strd	r5, r5, [r4, #780]	@ 0x30c
 8006b54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006b58:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8006b5c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8006b60:	f04f 032e 	mov.w	r3, #46	@ 0x2e
    in.setup(selections[0], Bitmap(BITMAP_EASING_BOTTOM_MENU_ID), Bitmap(BITMAP_EASING_BOTTOM_MENU_ACTIVE_ID),
 8006b64:	4630      	mov	r0, r6
 8006b66:	f8ad b018 	strh.w	fp, [sp, #24]
 8006b6a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006b6e:	ab09      	add	r3, sp, #36	@ 0x24
 8006b70:	f8ad 901c 	strh.w	r9, [sp, #28]
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	ab08      	add	r3, sp, #32
 8006b78:	f8ad 9024 	strh.w	r9, [sp, #36]	@ 0x24
 8006b7c:	9303      	str	r3, [sp, #12]
 8006b7e:	ab07      	add	r3, sp, #28
 8006b80:	9302      	str	r3, [sp, #8]
 8006b82:	ab06      	add	r3, sp, #24
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b8e:	f7ff fd1b 	bl	80065c8 <_ZN20EasingEquationButton5setupE23EasingEquationSelectionRKN8touchgfx6BitmapES4_S4_S4_>
    in.setXY(0, 0);
 8006b92:	462a      	mov	r2, r5
 8006b94:	4629      	mov	r1, r5
 8006b96:	4630      	mov	r0, r6
 8006b98:	f7fa f922 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    in.setTextShadowVisible(false);
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff fd81 	bl	80066a6 <_ZN20EasingEquationButton20setTextShadowVisibleEb>
 8006ba4:	f04f 032e 	mov.w	r3, #46	@ 0x2e
    out.setup(selections[1], Bitmap(BITMAP_EASING_BOTTOM_MENU_ID), Bitmap(BITMAP_EASING_BOTTOM_MENU_ACTIVE_ID),
 8006ba8:	4640      	mov	r0, r8
 8006baa:	f8ad b018 	strh.w	fp, [sp, #24]
 8006bae:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006bb2:	ab09      	add	r3, sp, #36	@ 0x24
 8006bb4:	f8ad 901c 	strh.w	r9, [sp, #28]
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	ab08      	add	r3, sp, #32
 8006bbc:	f8ad 9024 	strh.w	r9, [sp, #36]	@ 0x24
 8006bc0:	9303      	str	r3, [sp, #12]
 8006bc2:	ab07      	add	r3, sp, #28
 8006bc4:	9302      	str	r3, [sp, #8]
 8006bc6:	ab06      	add	r3, sp, #24
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	ab0e      	add	r3, sp, #56	@ 0x38
 8006bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bd2:	f7ff fcf9 	bl	80065c8 <_ZN20EasingEquationButton5setupE23EasingEquationSelectionRKN8touchgfx6BitmapES4_S4_S4_>
        return x + width;
 8006bd6:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8006bd8:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
    out.setXY(in.getRect().right(), 0);
 8006bda:	462a      	mov	r2, r5
 8006bdc:	4640      	mov	r0, r8
 8006bde:	4419      	add	r1, r3
 8006be0:	b209      	sxth	r1, r1
 8006be2:	f7fa f8fd 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    out.setTextShadowVisible(false);
 8006be6:	4629      	mov	r1, r5
 8006be8:	4640      	mov	r0, r8
 8006bea:	f7ff fd5c 	bl	80066a6 <_ZN20EasingEquationButton20setTextShadowVisibleEb>
 8006bee:	f04f 032e 	mov.w	r3, #46	@ 0x2e
    inOut.setup(selections[2], Bitmap(BITMAP_EASING_BOTTOM_MENU_ID), Bitmap(BITMAP_EASING_BOTTOM_MENU_ACTIVE_ID),
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f8ad b018 	strh.w	fp, [sp, #24]
 8006bf8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006bfc:	ab09      	add	r3, sp, #36	@ 0x24
 8006bfe:	f8ad 901c 	strh.w	r9, [sp, #28]
 8006c02:	9304      	str	r3, [sp, #16]
 8006c04:	ab08      	add	r3, sp, #32
 8006c06:	f8ad 9024 	strh.w	r9, [sp, #36]	@ 0x24
 8006c0a:	9303      	str	r3, [sp, #12]
 8006c0c:	ab07      	add	r3, sp, #28
 8006c0e:	9302      	str	r3, [sp, #8]
 8006c10:	ab06      	add	r3, sp, #24
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	ab12      	add	r3, sp, #72	@ 0x48
 8006c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c1c:	f7ff fcd4 	bl	80065c8 <_ZN20EasingEquationButton5setupE23EasingEquationSelectionRKN8touchgfx6BitmapES4_S4_S4_>
 8006c20:	f8b4 3118 	ldrh.w	r3, [r4, #280]	@ 0x118
 8006c24:	f8b4 1114 	ldrh.w	r1, [r4, #276]	@ 0x114
    inOut.setXY(out.getRect().right(), 0);
 8006c28:	462a      	mov	r2, r5
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	4419      	add	r1, r3
 8006c2e:	b209      	sxth	r1, r1
 8006c30:	f7fa f8d6 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    inOut.setTextShadowVisible(false);
 8006c34:	4629      	mov	r1, r5
 8006c36:	4638      	mov	r0, r7
 8006c38:	f7ff fd35 	bl	80066a6 <_ZN20EasingEquationButton20setTextShadowVisibleEb>
    buttons.setRadioButtonSelectedHandler(onSelected);
 8006c3c:	f504 7345 	add.w	r3, r4, #788	@ 0x314
    buttons.add(in.getRadioButton());
 8006c40:	4630      	mov	r0, r6
        radioButtonSelectedCallback = &callback;
 8006c42:	f8c4 330c 	str.w	r3, [r4, #780]	@ 0x30c
 8006c46:	f7ff fd1b 	bl	8006680 <_ZN20EasingEquationButton14getRadioButtonEv>
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	f7ff fe61 	bl	8006914 <_ZN8touchgfx16RadioButtonGroupILt3EE3addERNS_11RadioButtonE>
    buttons.add(out.getRadioButton());
 8006c52:	4640      	mov	r0, r8
 8006c54:	f7ff fd14 	bl	8006680 <_ZN20EasingEquationButton14getRadioButtonEv>
 8006c58:	4601      	mov	r1, r0
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	f7ff fe5a 	bl	8006914 <_ZN8touchgfx16RadioButtonGroupILt3EE3addERNS_11RadioButtonE>
    buttons.add(inOut.getRadioButton());
 8006c60:	4638      	mov	r0, r7
 8006c62:	f7ff fd0d 	bl	8006680 <_ZN20EasingEquationButton14getRadioButtonEv>
 8006c66:	4601      	mov	r1, r0
 8006c68:	4650      	mov	r0, sl
 8006c6a:	f7ff fe53 	bl	8006914 <_ZN8touchgfx16RadioButtonGroupILt3EE3addERNS_11RadioButtonE>
    add(in);
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4620      	mov	r0, r4
 8006c72:	f00c f86d 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(out);
 8006c76:	4641      	mov	r1, r8
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f00c f869 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(inOut);
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4620      	mov	r0, r4
 8006c82:	f00c f865 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8006c86:	f8b4 31fc 	ldrh.w	r3, [r4, #508]	@ 0x1fc
 8006c8a:	f8b4 21f8 	ldrh.w	r2, [r4, #504]	@ 0x1f8
    setButtonColors();
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4413      	add	r3, r2
        rect.width = width;
 8006c92:	8123      	strh	r3, [r4, #8]
        rect.height = height;
 8006c94:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006c96:	8163      	strh	r3, [r4, #10]
 8006c98:	f7ff fe9b 	bl	80069d2 <_ZN28EasingEquationInOrOutOrInOut15setButtonColorsEv>
}
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	b017      	add	sp, #92	@ 0x5c
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca4:	08023f38 	.word	0x08023f38
 8006ca8:	08023ed4 	.word	0x08023ed4
 8006cac:	08023eec 	.word	0x08023eec
 8006cb0:	08023f20 	.word	0x08023f20
 8006cb4:	08006a71 	.word	0x08006a71
 8006cb8:	08021f74 	.word	0x08021f74

08006cbc <_ZN23EasingEquationPresenterD1Ev>:
{
}

EasingEquationPresenter::~EasingEquationPresenter()
{
}
 8006cbc:	4770      	bx	lr

08006cbe <_ZN23EasingEquationPresenter10deactivateEv>:

void EasingEquationPresenter::activate()
{
}
 8006cbe:	4770      	bx	lr

08006cc0 <_ZN23EasingEquationPresenterD0Ev>:
EasingEquationPresenter::~EasingEquationPresenter()
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	4604      	mov	r4, r0
}
 8006cc4:	2114      	movs	r1, #20
 8006cc6:	f017 ff2e 	bl	801eb26 <_ZdlPvj>
 8006cca:	4620      	mov	r0, r4
 8006ccc:	bd10      	pop	{r4, pc}

08006cce <_ZThn4_N23EasingEquationPresenterD0Ev>:

class EasingEquationPresenter : public DemoPresenter
{
public:
    EasingEquationPresenter(EasingEquationView& v);
    virtual ~EasingEquationPresenter();
 8006cce:	f1a0 0004 	sub.w	r0, r0, #4
 8006cd2:	f7ff bff5 	b.w	8006cc0 <_ZN23EasingEquationPresenterD0Ev>

08006cd6 <_ZThn4_N23EasingEquationPresenterD1Ev>:
 8006cd6:	3804      	subs	r0, #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <_ZN23EasingEquationPresenterC1ER18EasingEquationView>:
EasingEquationPresenter::EasingEquationPresenter(EasingEquationView& v) :
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	460d      	mov	r5, r1
    view(v)
 8006ce0:	3140      	adds	r1, #64	@ 0x40
EasingEquationPresenter::EasingEquationPresenter(EasingEquationView& v) :
 8006ce2:	4604      	mov	r4, r0
    view(v)
 8006ce4:	f7fa fd3e 	bl	8001764 <_ZN13DemoPresenterC1ER17DemoViewInterface>
 8006ce8:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <_ZN23EasingEquationPresenterC1ER18EasingEquationView+0x20>)
}
 8006cea:	4620      	mov	r0, r4
    view(v)
 8006cec:	6125      	str	r5, [r4, #16]
 8006cee:	f103 0208 	add.w	r2, r3, #8
 8006cf2:	3324      	adds	r3, #36	@ 0x24
 8006cf4:	6022      	str	r2, [r4, #0]
 8006cf6:	6063      	str	r3, [r4, #4]
}
 8006cf8:	bd38      	pop	{r3, r4, r5, pc}
 8006cfa:	bf00      	nop
 8006cfc:	08021fa4 	.word	0x08021fa4

08006d00 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt11EEERKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006d00:	4770      	bx	lr

08006d02 <_ZN8touchgfx16RadioButtonGroupILt11EED1Ev>:
    }
 8006d02:	4770      	bx	lr

08006d04 <_ZN22EasingEquationSelectorD1Ev>:
#include <touchgfx/widgets/RadioButtonGroup.hpp>
#include <gui/easing_equation_screen/EasingEquationButton.hpp>

using namespace touchgfx;

class EasingEquationSelector : public Container
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4b07      	ldr	r3, [pc, #28]	@ (8006d24 <_ZN22EasingEquationSelectorD1Ev+0x20>)
 8006d08:	4604      	mov	r4, r0
 8006d0a:	f44f 6526 	mov.w	r5, #2656	@ 0xa60
 8006d0e:	6003      	str	r3, [r0, #0]
 8006d10:	5963      	ldr	r3, [r4, r5]
 8006d12:	1960      	adds	r0, r4, r5
 8006d14:	3de4      	subs	r5, #228	@ 0xe4
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4798      	blx	r3
 8006d1a:	2d94      	cmp	r5, #148	@ 0x94
 8006d1c:	d1f8      	bne.n	8006d10 <_ZN22EasingEquationSelectorD1Ev+0xc>
 8006d1e:	4620      	mov	r0, r4
 8006d20:	bd38      	pop	{r3, r4, r5, pc}
 8006d22:	bf00      	nop
 8006d24:	0802409c 	.word	0x0802409c

08006d28 <_ZN8touchgfx8CallbackI22EasingEquationSelectorRKNS_14AbstractButtonEvvED1Ev>:
 8006d28:	4770      	bx	lr

08006d2a <_ZN8touchgfx8CallbackI22EasingEquationSelectorRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006d2a:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8006d2c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006d2e:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8006d30:	68c2      	ldr	r2, [r0, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	1055      	asrs	r5, r2, #1
 8006d36:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006d3a:	07d2      	lsls	r2, r2, #31
 8006d3c:	bf48      	it	mi
 8006d3e:	5962      	ldrmi	r2, [r4, r5]
    }
 8006d40:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8006d42:	bf48      	it	mi
 8006d44:	58d3      	ldrmi	r3, [r2, r3]
 8006d46:	4718      	bx	r3

08006d48 <_ZNK8touchgfx8CallbackI22EasingEquationSelectorRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006d48:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8006d4a:	6840      	ldr	r0, [r0, #4]
 8006d4c:	b130      	cbz	r0, 8006d5c <_ZNK8touchgfx8CallbackI22EasingEquationSelectorRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	b91a      	cbnz	r2, 8006d5a <_ZNK8touchgfx8CallbackI22EasingEquationSelectorRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8006d52:	68d8      	ldr	r0, [r3, #12]
 8006d54:	f000 0001 	and.w	r0, r0, #1
 8006d58:	4770      	bx	lr
 8006d5a:	2001      	movs	r0, #1
    }
 8006d5c:	4770      	bx	lr

08006d5e <_ZNK8touchgfx16RadioButtonGroupILt11EE14getRadioButtonEt>:
        return (size > index) ? radioButtons[index] : 0;
 8006d5e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006d60:	428b      	cmp	r3, r1
 8006d62:	bf86      	itte	hi
 8006d64:	eb00 0081 	addhi.w	r0, r0, r1, lsl #2
 8006d68:	6840      	ldrhi	r0, [r0, #4]
 8006d6a:	2000      	movls	r0, #0
    }
 8006d6c:	4770      	bx	lr

08006d6e <_ZNK8touchgfx16RadioButtonGroupILt11EE27getSelectedRadioButtonIndexEv>:
    virtual int32_t getSelectedRadioButtonIndex() const
 8006d6e:	4603      	mov	r3, r0
        for (uint16_t i = 0; i < size; i++)
 8006d70:	8e01      	ldrh	r1, [r0, #48]	@ 0x30
 8006d72:	2000      	movs	r0, #0
    virtual int32_t getSelectedRadioButtonIndex() const
 8006d74:	b510      	push	{r4, lr}
        for (uint16_t i = 0; i < size; i++)
 8006d76:	b282      	uxth	r2, r0
 8006d78:	4291      	cmp	r1, r2
 8006d7a:	d802      	bhi.n	8006d82 <_ZNK8touchgfx16RadioButtonGroupILt11EE27getSelectedRadioButtonIndexEv+0x14>
        return -1;
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8006d80:	bd10      	pop	{r4, pc}
        return selected;
 8006d82:	f853 4f04 	ldr.w	r4, [r3, #4]!
            if (radioButtons[i]->getSelected())
 8006d86:	1c42      	adds	r2, r0, #1
 8006d88:	f894 4037 	ldrb.w	r4, [r4, #55]	@ 0x37
 8006d8c:	2c00      	cmp	r4, #0
 8006d8e:	d1f7      	bne.n	8006d80 <_ZNK8touchgfx16RadioButtonGroupILt11EE27getSelectedRadioButtonIndexEv+0x12>
 8006d90:	4610      	mov	r0, r2
 8006d92:	e7f0      	b.n	8006d76 <_ZNK8touchgfx16RadioButtonGroupILt11EE27getSelectedRadioButtonIndexEv+0x8>

08006d94 <_ZNK8touchgfx16RadioButtonGroupILt11EE22getSelectedRadioButtonEv>:
        int32_t index = getSelectedRadioButtonIndex();
 8006d94:	6803      	ldr	r3, [r0, #0]
    virtual RadioButton* getSelectedRadioButton() const
 8006d96:	b510      	push	{r4, lr}
        int32_t index = getSelectedRadioButtonIndex();
 8006d98:	691b      	ldr	r3, [r3, #16]
    virtual RadioButton* getSelectedRadioButton() const
 8006d9a:	4604      	mov	r4, r0
        int32_t index = getSelectedRadioButtonIndex();
 8006d9c:	4798      	blx	r3
        return (index < 0) ? 0 : getRadioButton(index);
 8006d9e:	1e01      	subs	r1, r0, #0
 8006da0:	db06      	blt.n	8006db0 <_ZNK8touchgfx16RadioButtonGroupILt11EE22getSelectedRadioButtonEv+0x1c>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	4620      	mov	r0, r4
 8006da6:	b289      	uxth	r1, r1
 8006da8:	68db      	ldr	r3, [r3, #12]
    }
 8006daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return (index < 0) ? 0 : getRadioButton(index);
 8006dae:	4718      	bx	r3
    }
 8006db0:	2000      	movs	r0, #0
 8006db2:	bd10      	pop	{r4, pc}

08006db4 <_ZN8touchgfx16RadioButtonGroupILt11EE21setDeselectionEnabledEb>:
    virtual void setDeselectionEnabled(bool deselectionEnabled)
 8006db4:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006db6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        for (uint16_t i = 0; i < size; i++)
 8006dba:	4298      	cmp	r0, r3
 8006dbc:	d100      	bne.n	8006dc0 <_ZN8touchgfx16RadioButtonGroupILt11EE21setDeselectionEnabledEb+0xc>
    }
 8006dbe:	4770      	bx	lr
        deselectionEnabled = state;
 8006dc0:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006dc4:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
        for (uint16_t i = 0; i < size; i++)
 8006dc8:	e7f7      	b.n	8006dba <_ZN8touchgfx16RadioButtonGroupILt11EE21setDeselectionEnabledEb+0x6>

08006dca <_ZNK8touchgfx16RadioButtonGroupILt11EE21getDeselectionEnabledEv>:
    virtual bool getDeselectionEnabled() const
 8006dca:	4603      	mov	r3, r0
        return (size > 0) ? radioButtons[0]->getDeselectionEnabled() : false;
 8006dcc:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 8006dce:	b110      	cbz	r0, 8006dd6 <_ZNK8touchgfx16RadioButtonGroupILt11EE21getDeselectionEnabledEv+0xc>
        return deselectionEnabled;
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
    }
 8006dd6:	4770      	bx	lr

08006dd8 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt11EEERKNS_14AbstractButtonEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8006dd8:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8006dda:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006ddc:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8006dde:	68c2      	ldr	r2, [r0, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	1055      	asrs	r5, r2, #1
 8006de4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006de8:	07d2      	lsls	r2, r2, #31
 8006dea:	bf48      	it	mi
 8006dec:	5962      	ldrmi	r2, [r4, r5]
    }
 8006dee:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8006df0:	bf48      	it	mi
 8006df2:	58d3      	ldrmi	r3, [r2, r3]
 8006df4:	4718      	bx	r3

08006df6 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt11EEERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006df6:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8006df8:	6840      	ldr	r0, [r0, #4]
 8006dfa:	b130      	cbz	r0, 8006e0a <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt11EEERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	b91a      	cbnz	r2, 8006e08 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt11EEERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8006e00:	68d8      	ldr	r0, [r3, #12]
 8006e02:	f000 0001 	and.w	r0, r0, #1
 8006e06:	4770      	bx	lr
 8006e08:	2001      	movs	r0, #1
    }
 8006e0a:	4770      	bx	lr

08006e0c <_ZN8touchgfx8CallbackI22EasingEquationSelectorRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	4604      	mov	r4, r0
 8006e10:	2110      	movs	r1, #16
 8006e12:	f017 fe88 	bl	801eb26 <_ZdlPvj>
 8006e16:	4620      	mov	r0, r4
 8006e18:	bd10      	pop	{r4, pc}

08006e1a <_ZN22EasingEquationSelectorD0Ev>:
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	f7ff ff71 	bl	8006d04 <_ZN22EasingEquationSelectorD1Ev>
 8006e22:	f640 3158 	movw	r1, #2904	@ 0xb58
 8006e26:	4620      	mov	r0, r4
 8006e28:	f017 fe7d 	bl	801eb26 <_ZdlPvj>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	bd10      	pop	{r4, pc}

08006e30 <_ZN8touchgfx16RadioButtonGroupILt11EED0Ev>:
    virtual ~RadioButtonGroup()
 8006e30:	b510      	push	{r4, lr}
 8006e32:	4604      	mov	r4, r0
    }
 8006e34:	215c      	movs	r1, #92	@ 0x5c
 8006e36:	f017 fe76 	bl	801eb26 <_ZdlPvj>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	bd10      	pop	{r4, pc}

08006e3e <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt11EEERKNS_14AbstractButtonEvvED0Ev>:
 8006e3e:	b510      	push	{r4, lr}
 8006e40:	4604      	mov	r4, r0
 8006e42:	2110      	movs	r1, #16
 8006e44:	f017 fe6f 	bl	801eb26 <_ZdlPvj>
 8006e48:	4620      	mov	r0, r4
 8006e4a:	bd10      	pop	{r4, pc}

08006e4c <_ZN8touchgfx16RadioButtonGroupILt11EE11setSelectedERNS_11RadioButtonE>:
    virtual void setSelected(RadioButton& radioButton)
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	460d      	mov	r5, r1
 8006e50:	4604      	mov	r4, r0
        radioButton.setSelected(true);
 8006e52:	2101      	movs	r1, #1
 8006e54:	4628      	mov	r0, r5
 8006e56:	f010 fcb9 	bl	80177cc <_ZN8touchgfx11RadioButton11setSelectedEb>
        radioButtonClickedHandler(radioButton);
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4620      	mov	r0, r4
 8006e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8006e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        radioButtonClickedHandler(radioButton);
 8006e66:	4718      	bx	r3

08006e68 <_ZN22EasingEquationSelector8selectedERKN8touchgfx14AbstractButtonE>:
    this->easingEquationSelected = &callback;
    equationsGroup.setRadioButtonSelectedHandler(onSelected);
}

void EasingEquationSelector::selected(const AbstractButton& btn)
{
 8006e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	460e      	mov	r6, r1
 8006e70:	f500 75bc 	add.w	r5, r0, #376	@ 0x178
 8006e74:	f600 3844 	addw	r8, r0, #2884	@ 0xb44
    for (int i = 0; i < NUMBER_OF_EQUATION_TYPES; i++)
    {
        if (&btn == &buttons[i].getRadioButton())
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f7ff fc01 	bl	8006680 <_ZN20EasingEquationButton14getRadioButtonEv>
 8006e7e:	4286      	cmp	r6, r0
 8006e80:	d111      	bne.n	8006ea6 <_ZN22EasingEquationSelector8selectedERKN8touchgfx14AbstractButtonE+0x3e>
        {
            if (easingEquationSelected && easingEquationSelected->isValid())
 8006e82:	f8d4 0b54 	ldr.w	r0, [r4, #2900]	@ 0xb54
 8006e86:	b170      	cbz	r0, 8006ea6 <_ZN22EasingEquationSelector8selectedERKN8touchgfx14AbstractButtonE+0x3e>
 8006e88:	6803      	ldr	r3, [r0, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4798      	blx	r3
 8006e8e:	b150      	cbz	r0, 8006ea6 <_ZN22EasingEquationSelector8selectedERKN8touchgfx14AbstractButtonE+0x3e>
            {
                easingEquationSelected->execute(buttons[i].getEasingEquation());
 8006e90:	f8d4 7b54 	ldr.w	r7, [r4, #2900]	@ 0xb54
 8006e94:	4628      	mov	r0, r5
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8006e9c:	f7ff fbf2 	bl	8006684 <_ZNK20EasingEquationButton17getEasingEquationEv>
 8006ea0:	4601      	mov	r1, r0
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	47c8      	blx	r9
    for (int i = 0; i < NUMBER_OF_EQUATION_TYPES; i++)
 8006ea6:	35e4      	adds	r5, #228	@ 0xe4
 8006ea8:	4545      	cmp	r5, r8
 8006eaa:	d1e5      	bne.n	8006e78 <_ZN22EasingEquationSelector8selectedERKN8touchgfx14AbstractButtonE+0x10>
            }
        }
    }
}
 8006eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006eb0 <_ZN8touchgfx16RadioButtonGroupILt11EE3addERNS_11RadioButtonE>:
    virtual void add(RadioButton& radioButton)
 8006eb0:	b508      	push	{r3, lr}
        assert(size < CAPACITY && "RadioButtonGroup capacity exceeded!");
 8006eb2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006eb4:	2b0a      	cmp	r3, #10
 8006eb6:	d905      	bls.n	8006ec4 <_ZN8touchgfx16RadioButtonGroupILt11EE3addERNS_11RadioButtonE+0x14>
 8006eb8:	4b08      	ldr	r3, [pc, #32]	@ (8006edc <_ZN8touchgfx16RadioButtonGroupILt11EE3addERNS_11RadioButtonE+0x2c>)
 8006eba:	2154      	movs	r1, #84	@ 0x54
 8006ebc:	4a08      	ldr	r2, [pc, #32]	@ (8006ee0 <_ZN8touchgfx16RadioButtonGroupILt11EE3addERNS_11RadioButtonE+0x30>)
 8006ebe:	4809      	ldr	r0, [pc, #36]	@ (8006ee4 <_ZN8touchgfx16RadioButtonGroupILt11EE3addERNS_11RadioButtonE+0x34>)
 8006ec0:	f018 ff58 	bl	801fd74 <__assert_func>
        radioButton.setAction(radioButtonClicked);
 8006ec4:	f100 0234 	add.w	r2, r0, #52	@ 0x34
 8006ec8:	628a      	str	r2, [r1, #40]	@ 0x28
        radioButton.setDeselectedAction(radioButtonUnselected);
 8006eca:	f100 0244 	add.w	r2, r0, #68	@ 0x44
        deselectedAction = &callback;
 8006ece:	63ca      	str	r2, [r1, #60]	@ 0x3c
        radioButtons[size++] = &radioButton;
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	8602      	strh	r2, [r0, #48]	@ 0x30
 8006ed4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006ed8:	6041      	str	r1, [r0, #4]
    }
 8006eda:	bd08      	pop	{r3, pc}
 8006edc:	08023dc0 	.word	0x08023dc0
 8006ee0:	08023fc0 	.word	0x08023fc0
 8006ee4:	08023e67 	.word	0x08023e67

08006ee8 <_ZN8touchgfx16RadioButtonGroupILt11EE25radioButtonClickedHandlerERKNS_14AbstractButtonE>:
    virtual void radioButtonClickedHandler(const AbstractButton& radioButton)
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4604      	mov	r4, r0
 8006eec:	460d      	mov	r5, r1
        for (uint16_t i = 0; i < size; i++)
 8006eee:	2600      	movs	r6, #0
 8006ef0:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8006ef2:	b2b3      	uxth	r3, r6
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d80c      	bhi.n	8006f12 <_ZN8touchgfx16RadioButtonGroupILt11EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x2a>
        if (radioButtonSelectedCallback && radioButtonSelectedCallback->isValid())
 8006ef8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006efa:	b1c0      	cbz	r0, 8006f2e <_ZN8touchgfx16RadioButtonGroupILt11EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x46>
 8006efc:	6803      	ldr	r3, [r0, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	4798      	blx	r3
 8006f02:	b1a0      	cbz	r0, 8006f2e <_ZN8touchgfx16RadioButtonGroupILt11EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x46>
 8006f04:	6d60      	ldr	r0, [r4, #84]	@ 0x54
            radioButtonSelectedCallback->execute(radioButton);
 8006f06:	4629      	mov	r1, r5
 8006f08:	6803      	ldr	r3, [r0, #0]
    }
 8006f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonSelectedCallback->execute(radioButton);
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4718      	bx	r3
            if (radioButtons[i] != &radioButton)
 8006f12:	b2b3      	uxth	r3, r6
 8006f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f18:	6858      	ldr	r0, [r3, #4]
 8006f1a:	42a8      	cmp	r0, r5
 8006f1c:	d005      	beq.n	8006f2a <_ZN8touchgfx16RadioButtonGroupILt11EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x42>
                if (radioButtons[i]->getSelected())
 8006f1e:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 8006f22:	b113      	cbz	r3, 8006f2a <_ZN8touchgfx16RadioButtonGroupILt11EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x42>
                    radioButtons[i]->setSelected(false);
 8006f24:	2100      	movs	r1, #0
 8006f26:	f010 fc51 	bl	80177cc <_ZN8touchgfx11RadioButton11setSelectedEb>
        for (uint16_t i = 0; i < size; i++)
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7e0      	b.n	8006ef0 <_ZN8touchgfx16RadioButtonGroupILt11EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x8>
    }
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}

08006f30 <_ZN8touchgfx16RadioButtonGroupILt11EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE>:
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	4604      	mov	r4, r0
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 8006f34:	6d80      	ldr	r0, [r0, #88]	@ 0x58
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 8006f36:	460d      	mov	r5, r1
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 8006f38:	b150      	cbz	r0, 8006f50 <_ZN8touchgfx16RadioButtonGroupILt11EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x20>
 8006f3a:	6803      	ldr	r3, [r0, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	4798      	blx	r3
 8006f40:	b130      	cbz	r0, 8006f50 <_ZN8touchgfx16RadioButtonGroupILt11EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x20>
 8006f42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
            radioButtonDeselectedCallback->execute(radioButton);
 8006f44:	4629      	mov	r1, r5
 8006f46:	6803      	ldr	r3, [r0, #0]
    }
 8006f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonDeselectedCallback->execute(radioButton);
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	4718      	bx	r3
    }
 8006f50:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f54 <_ZN22EasingEquationSelectorC1Ev>:
EasingEquationSelector::EasingEquationSelector() :
 8006f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        touchable(false),
 8006f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
        this->x = x;
 8006f5c:	2500      	movs	r5, #0
    easingEquationSelected(0)
 8006f5e:	4a52      	ldr	r2, [pc, #328]	@ (80070a8 <_ZN22EasingEquationSelectorC1Ev+0x154>)
 8006f60:	4680      	mov	r8, r0
 8006f62:	2601      	movs	r6, #1
        nextDrawChainElement(0),
 8006f64:	61c5      	str	r5, [r0, #28]
        touchable(false),
 8006f66:	8483      	strh	r3, [r0, #36]	@ 0x24
 8006f68:	f100 075c 	add.w	r7, r0, #92	@ 0x5c
 8006f6c:	6285      	str	r5, [r0, #40]	@ 0x28
EasingEquationSelector::EasingEquationSelector() :
 8006f6e:	4604      	mov	r4, r0
 8006f70:	b0b7      	sub	sp, #220	@ 0xdc
    easingEquationSelected(0)
 8006f72:	f504 798e 	add.w	r9, r4, #284	@ 0x11c
 8006f76:	f604 3a44 	addw	sl, r4, #2884	@ 0xb44
        this->width = width;
 8006f7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
        this->width = 0;
 8006f7e:	e9c0 5503 	strd	r5, r5, [r0, #12]
        nextSibling(0),
 8006f82:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8006f86:	f848 2b2c 	str.w	r2, [r8], #44
        touchable(false),
 8006f8a:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
 8006f8e:	4b47      	ldr	r3, [pc, #284]	@ (80070ac <_ZN22EasingEquationSelectorC1Ev+0x158>)
        nextDrawChainElement(0),
 8006f90:	6485      	str	r5, [r0, #72]	@ 0x48
 8006f92:	6545      	str	r5, [r0, #84]	@ 0x54
 8006f94:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8006f96:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
 8006f9a:	f8a0 505a 	strh.w	r5, [r0, #90]	@ 0x5a
        this->width = width;
 8006f9e:	e9c0 550c 	strd	r5, r5, [r0, #48]	@ 0x30
        this->width = 0;
 8006fa2:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
        nextSibling(0),
 8006fa6:	e9c0 5510 	strd	r5, r5, [r0, #64]	@ 0x40
 8006faa:	4638      	mov	r0, r7
 8006fac:	f00c fce2 	bl	8013974 <_ZN8touchgfx19ScrollableContainerC1Ev>
        radioButtonDeselectedCallback(0)
 8006fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80070b0 <_ZN22EasingEquationSelectorC1Ev+0x15c>)
        this->pmemfun_1 = pmemfun_1;
 8006fb2:	2224      	movs	r2, #36	@ 0x24
        size(0),
 8006fb4:	f8a4 514c 	strh.w	r5, [r4, #332]	@ 0x14c
        radioButtonDeselectedCallback(0)
 8006fb8:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
    {
 8006fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80070b4 <_ZN22EasingEquationSelectorC1Ev+0x160>)
        this->pobject = pobject;
 8006fbe:	e9c4 3954 	strd	r3, r9, [r4, #336]	@ 0x150
 8006fc2:	e9c4 3958 	strd	r3, r9, [r4, #352]	@ 0x160
        this->pmemfun_1 = pmemfun_1;
 8006fc6:	2328      	movs	r3, #40	@ 0x28
 8006fc8:	e9c4 2656 	strd	r2, r6, [r4, #344]	@ 0x158
 8006fcc:	e9c4 365a 	strd	r3, r6, [r4, #360]	@ 0x168
 8006fd0:	f504 76bc 	add.w	r6, r4, #376	@ 0x178
 8006fd4:	e9c4 555c 	strd	r5, r5, [r4, #368]	@ 0x170
 8006fd8:	4635      	mov	r5, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	35e4      	adds	r5, #228	@ 0xe4
 8006fde:	f7ff fa8d 	bl	80064fc <_ZN20EasingEquationButtonC1Ev>
 8006fe2:	4555      	cmp	r5, sl
 8006fe4:	d1f9      	bne.n	8006fda <_ZN22EasingEquationSelectorC1Ev+0x86>
    {
 8006fe6:	4b34      	ldr	r3, [pc, #208]	@ (80070b8 <_ZN22EasingEquationSelectorC1Ev+0x164>)
        this->pmemfun_1 = pmemfun_1;
 8006fe8:	2500      	movs	r5, #0
 8006fea:	f04f 0b32 	mov.w	fp, #50	@ 0x32
 8006fee:	f04f 0a33 	mov.w	sl, #51	@ 0x33
    {
 8006ff2:	f8c4 3b44 	str.w	r3, [r4, #2884]	@ 0xb44
    EasingEquationSelection selections[] =
 8006ff6:	22b0      	movs	r2, #176	@ 0xb0
        this->pmemfun_1 = pmemfun_1;
 8006ff8:	4b30      	ldr	r3, [pc, #192]	@ (80070bc <_ZN22EasingEquationSelectorC1Ev+0x168>)
 8006ffa:	a80a      	add	r0, sp, #40	@ 0x28
 8006ffc:	4930      	ldr	r1, [pc, #192]	@ (80070c0 <_ZN22EasingEquationSelectorC1Ev+0x16c>)
        this->pobject = pobject;
 8006ffe:	f8c4 4b48 	str.w	r4, [r4, #2888]	@ 0xb48
        this->pmemfun_1 = pmemfun_1;
 8007002:	f8c4 3b4c 	str.w	r3, [r4, #2892]	@ 0xb4c
 8007006:	f8c4 5b50 	str.w	r5, [r4, #2896]	@ 0xb50
    easingEquationSelected(0)
 800700a:	f8c4 5b54 	str.w	r5, [r4, #2900]	@ 0xb54
    EasingEquationSelection selections[] =
 800700e:	f019 f97a 	bl	8020306 <memcpy>
        buttons[i].setup(selections[i], Bitmap(BITMAP_EASING_SIDE_MENU_BUTTON_ID), Bitmap(BITMAP_EASING_SIDE_MENU_BUTTON_ACTIVE_ID),
 8007012:	aa09      	add	r2, sp, #36	@ 0x24
 8007014:	f04f 0334 	mov.w	r3, #52	@ 0x34
 8007018:	4630      	mov	r0, r6
 800701a:	f8ad b018 	strh.w	fp, [sp, #24]
 800701e:	9204      	str	r2, [sp, #16]
 8007020:	aa08      	add	r2, sp, #32
 8007022:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007026:	ab36      	add	r3, sp, #216	@ 0xd8
 8007028:	9203      	str	r2, [sp, #12]
 800702a:	aa07      	add	r2, sp, #28
 800702c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8007030:	f8ad a01c 	strh.w	sl, [sp, #28]
 8007034:	9202      	str	r2, [sp, #8]
 8007036:	aa06      	add	r2, sp, #24
 8007038:	3bb0      	subs	r3, #176	@ 0xb0
 800703a:	f8ad a024 	strh.w	sl, [sp, #36]	@ 0x24
 800703e:	9201      	str	r2, [sp, #4]
    for (int i = 0; i < NUMBER_OF_EQUATION_TYPES; i++)
 8007040:	3501      	adds	r5, #1
        buttons[i].setup(selections[i], Bitmap(BITMAP_EASING_SIDE_MENU_BUTTON_ID), Bitmap(BITMAP_EASING_SIDE_MENU_BUTTON_ACTIVE_ID),
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	9200      	str	r2, [sp, #0]
 8007046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007048:	f7ff fabe 	bl	80065c8 <_ZN20EasingEquationButton5setupE23EasingEquationSelectionRKN8touchgfx6BitmapES4_S4_S4_>
        equationsGroup.add(buttons[i].getRadioButton());
 800704c:	4630      	mov	r0, r6
 800704e:	f7ff fb17 	bl	8006680 <_ZN20EasingEquationButton14getRadioButtonEv>
 8007052:	4601      	mov	r1, r0
 8007054:	4648      	mov	r0, r9
 8007056:	f7ff ff2b 	bl	8006eb0 <_ZN8touchgfx16RadioButtonGroupILt11EE3addERNS_11RadioButtonE>
        easings.add(buttons[i]);
 800705a:	4631      	mov	r1, r6
 800705c:	4640      	mov	r0, r8
    for (int i = 0; i < NUMBER_OF_EQUATION_TYPES; i++)
 800705e:	36e4      	adds	r6, #228	@ 0xe4
        easings.add(buttons[i]);
 8007060:	f00c f8e8 	bl	8013234 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
    for (int i = 0; i < NUMBER_OF_EQUATION_TYPES; i++)
 8007064:	2d0b      	cmp	r5, #11
 8007066:	d1d4      	bne.n	8007012 <_ZN22EasingEquationSelectorC1Ev+0xbe>
    easings.setHeight(easings.getHeight() + 40);
 8007068:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
    scrollable.setPosition(0, 0, easings.getWidth(), HAL::DISPLAY_HEIGHT);
 800706a:	2200      	movs	r2, #0
 800706c:	4638      	mov	r0, r7
    easings.setHeight(easings.getHeight() + 40);
 800706e:	3328      	adds	r3, #40	@ 0x28
    scrollable.setPosition(0, 0, easings.getWidth(), HAL::DISPLAY_HEIGHT);
 8007070:	4611      	mov	r1, r2
        rect.height = height;
 8007072:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8007074:	4b13      	ldr	r3, [pc, #76]	@ (80070c4 <_ZN22EasingEquationSelectorC1Ev+0x170>)
 8007076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 8007080:	f7f9 fe96 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollable.setScrollbarsVisible(false);
 8007084:	4638      	mov	r0, r7
 8007086:	2100      	movs	r1, #0
 8007088:	f00d f895 	bl	80141b6 <_ZN8touchgfx19ScrollableContainer20setScrollbarsVisibleEb>
    scrollable.add(easings);
 800708c:	4641      	mov	r1, r8
 800708e:	4638      	mov	r0, r7
 8007090:	f00c f9c7 	bl	8013422 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    add(scrollable);
 8007094:	4620      	mov	r0, r4
 8007096:	4639      	mov	r1, r7
 8007098:	f00b fe5a 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.width = width;
 800709c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
}
 800709e:	4620      	mov	r0, r4
 80070a0:	60a3      	str	r3, [r4, #8]
 80070a2:	b037      	add	sp, #220	@ 0xdc
 80070a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a8:	0802409c 	.word	0x0802409c
 80070ac:	08025220 	.word	0x08025220
 80070b0:	08024050 	.word	0x08024050
 80070b4:	08024038 	.word	0x08024038
 80070b8:	08024084 	.word	0x08024084
 80070bc:	08006e69 	.word	0x08006e69
 80070c0:	08021fe0 	.word	0x08021fe0
 80070c4:	20024e2a 	.word	0x20024e2a

080070c8 <_ZN22EasingEquationSelector33setEasingEquationSelectedCallbackERN8touchgfx15GenericCallbackIRK23EasingEquationSelectionvvEE>:
    equationsGroup.setRadioButtonSelectedHandler(onSelected);
 80070c8:	f600 3344 	addw	r3, r0, #2884	@ 0xb44
    this->easingEquationSelected = &callback;
 80070cc:	f8c0 1b54 	str.w	r1, [r0, #2900]	@ 0xb54
        radioButtonSelectedCallback = &callback;
 80070d0:	f8c0 3170 	str.w	r3, [r0, #368]	@ 0x170
}
 80070d4:	4770      	bx	lr

080070d6 <_ZN22EasingEquationSelector6selectEi>:

void EasingEquationSelector::select(int index)
{
    equationsGroup.setSelected(buttons[index].getRadioButton());
 80070d6:	23e4      	movs	r3, #228	@ 0xe4
{
 80070d8:	b510      	push	{r4, lr}
 80070da:	4604      	mov	r4, r0
    equationsGroup.setSelected(buttons[index].getRadioButton());
 80070dc:	fb03 0001 	mla	r0, r3, r1, r0
 80070e0:	f500 70bc 	add.w	r0, r0, #376	@ 0x178
 80070e4:	f7ff facc 	bl	8006680 <_ZN20EasingEquationButton14getRadioButtonEv>
 80070e8:	4601      	mov	r1, r0
 80070ea:	f504 708e 	add.w	r0, r4, #284	@ 0x11c
 80070ee:	f7ff fead 	bl	8006e4c <_ZN8touchgfx16RadioButtonGroupILt11EE11setSelectedERNS_11RadioButtonE>
}
 80070f2:	bd10      	pop	{r4, pc}

080070f4 <_ZN8DemoViewI23EasingEquationPresenterED1Ev>:
class DemoView : public View<T>, public DemoViewInterface
 80070f4:	4770      	bx	lr

080070f6 <_ZThn64_N8DemoViewI23EasingEquationPresenterED1Ev>:
 80070f6:	3840      	subs	r0, #64	@ 0x40
 80070f8:	4770      	bx	lr

080070fa <_ZN18EasingEquationView11setupScreenEv>:
{
}

void EasingEquationView::setupScreen()
{
}
 80070fa:	4770      	bx	lr

080070fc <_ZN8touchgfx8CallbackI18EasingEquationView22EasingEquationsInOrOutvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80070fc:	4770      	bx	lr

080070fe <_ZN8touchgfx8CallbackI18EasingEquationViewRK23EasingEquationSelectionvvED1Ev>:
 80070fe:	4770      	bx	lr

08007100 <_ZN8touchgfx8CallbackI8DemoViewI23EasingEquationPresenterERKNS_14AbstractButtonEvvED1Ev>:
 8007100:	4770      	bx	lr

08007102 <_ZN8touchgfx8CallbackI18EasingEquationView22EasingEquationsInOrOutvvE7executeES2_>:
    virtual void execute(T1 t1)
 8007102:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8007104:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8007106:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8007108:	68c2      	ldr	r2, [r0, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	1055      	asrs	r5, r2, #1
 800710e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8007112:	07d2      	lsls	r2, r2, #31
 8007114:	bf48      	it	mi
 8007116:	5962      	ldrmi	r2, [r4, r5]
    }
 8007118:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800711a:	bf48      	it	mi
 800711c:	58d3      	ldrmi	r3, [r2, r3]
 800711e:	4718      	bx	r3

08007120 <_ZNK8touchgfx8CallbackI18EasingEquationView22EasingEquationsInOrOutvvE7isValidEv>:
    virtual bool isValid() const
 8007120:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8007122:	6840      	ldr	r0, [r0, #4]
 8007124:	b130      	cbz	r0, 8007134 <_ZNK8touchgfx8CallbackI18EasingEquationView22EasingEquationsInOrOutvvE7isValidEv+0x14>
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	b91a      	cbnz	r2, 8007132 <_ZNK8touchgfx8CallbackI18EasingEquationView22EasingEquationsInOrOutvvE7isValidEv+0x12>
 800712a:	68d8      	ldr	r0, [r3, #12]
 800712c:	f000 0001 	and.w	r0, r0, #1
 8007130:	4770      	bx	lr
 8007132:	2001      	movs	r0, #1
    }
 8007134:	4770      	bx	lr

08007136 <_ZN8touchgfx8CallbackI18EasingEquationViewRK23EasingEquationSelectionvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007136:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8007138:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800713a:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800713c:	68c2      	ldr	r2, [r0, #12]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	1055      	asrs	r5, r2, #1
 8007142:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8007146:	07d2      	lsls	r2, r2, #31
 8007148:	bf48      	it	mi
 800714a:	5962      	ldrmi	r2, [r4, r5]
    }
 800714c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800714e:	bf48      	it	mi
 8007150:	58d3      	ldrmi	r3, [r2, r3]
 8007152:	4718      	bx	r3

08007154 <_ZNK8touchgfx8CallbackI18EasingEquationViewRK23EasingEquationSelectionvvE7isValidEv>:
    virtual bool isValid() const
 8007154:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8007156:	6840      	ldr	r0, [r0, #4]
 8007158:	b130      	cbz	r0, 8007168 <_ZNK8touchgfx8CallbackI18EasingEquationViewRK23EasingEquationSelectionvvE7isValidEv+0x14>
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	b91a      	cbnz	r2, 8007166 <_ZNK8touchgfx8CallbackI18EasingEquationViewRK23EasingEquationSelectionvvE7isValidEv+0x12>
 800715e:	68d8      	ldr	r0, [r3, #12]
 8007160:	f000 0001 	and.w	r0, r0, #1
 8007164:	4770      	bx	lr
 8007166:	2001      	movs	r0, #1
    }
 8007168:	4770      	bx	lr

0800716a <_ZN8touchgfx8CallbackI8DemoViewI23EasingEquationPresenterERKNS_14AbstractButtonEvvE7executeES6_>:
    virtual void execute(T1 t1)
 800716a:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800716c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800716e:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8007170:	68c2      	ldr	r2, [r0, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	1055      	asrs	r5, r2, #1
 8007176:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800717a:	07d2      	lsls	r2, r2, #31
 800717c:	bf48      	it	mi
 800717e:	5962      	ldrmi	r2, [r4, r5]
    }
 8007180:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8007182:	bf48      	it	mi
 8007184:	58d3      	ldrmi	r3, [r2, r3]
 8007186:	4718      	bx	r3

08007188 <_ZNK8touchgfx8CallbackI8DemoViewI23EasingEquationPresenterERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8007188:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 800718a:	6840      	ldr	r0, [r0, #4]
 800718c:	b130      	cbz	r0, 800719c <_ZNK8touchgfx8CallbackI8DemoViewI23EasingEquationPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	b91a      	cbnz	r2, 800719a <_ZNK8touchgfx8CallbackI8DemoViewI23EasingEquationPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8007192:	68d8      	ldr	r0, [r3, #12]
 8007194:	f000 0001 	and.w	r0, r0, #1
 8007198:	4770      	bx	lr
 800719a:	2001      	movs	r0, #1
    }
 800719c:	4770      	bx	lr

0800719e <_ZN8DemoViewI23EasingEquationPresenterE22gotoMenuClickedHandlerERKN8touchgfx14AbstractButtonE>:
        View<T>::presenter->backOptionSelected();
 800719e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80071a0:	f7fa baee 	b.w	8001780 <_ZN13DemoPresenter18backOptionSelectedEv>

080071a4 <_ZN8DemoViewI23EasingEquationPresenterE19updateProcessorLoadEh>:
    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 80071a4:	b510      	push	{r4, lr}
 80071a6:	4604      	mov	r4, r0
 80071a8:	460b      	mov	r3, r1
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", mcuLoadInProcent);
 80071aa:	4a05      	ldr	r2, [pc, #20]	@ (80071c0 <_ZN8DemoViewI23EasingEquationPresenterE19updateProcessorLoadEh+0x1c>)
 80071ac:	2105      	movs	r1, #5
 80071ae:	30e4      	adds	r0, #228	@ 0xe4
 80071b0:	f015 fa7c 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.invalidate();
 80071b4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
    }
 80071b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mcuLoadValueTxt.invalidate();
 80071bc:	f013 b8e5 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 80071c0:	08023468 	.word	0x08023468

080071c4 <_ZThn64_N8DemoViewI23EasingEquationPresenterE19updateProcessorLoadEh>:
    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 80071c4:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 80071c8:	e7ec      	b.n	80071a4 <_ZN8DemoViewI23EasingEquationPresenterE19updateProcessorLoadEh>
 80071ca:	bf00      	nop

080071cc <_ZN8touchgfx8CallbackI18EasingEquationViewRK23EasingEquationSelectionvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80071cc:	b510      	push	{r4, lr}
 80071ce:	4604      	mov	r4, r0
 80071d0:	2110      	movs	r1, #16
 80071d2:	f017 fca8 	bl	801eb26 <_ZdlPvj>
 80071d6:	4620      	mov	r0, r4
 80071d8:	bd10      	pop	{r4, pc}

080071da <_ZN8touchgfx8CallbackI18EasingEquationView22EasingEquationsInOrOutvvED0Ev>:
 80071da:	b510      	push	{r4, lr}
 80071dc:	4604      	mov	r4, r0
 80071de:	2110      	movs	r1, #16
 80071e0:	f017 fca1 	bl	801eb26 <_ZdlPvj>
 80071e4:	4620      	mov	r0, r4
 80071e6:	bd10      	pop	{r4, pc}

080071e8 <_ZN8DemoViewI23EasingEquationPresenterED0Ev>:
class DemoView : public View<T>, public DemoViewInterface
 80071e8:	b510      	push	{r4, lr}
 80071ea:	4604      	mov	r4, r0
 80071ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80071f0:	f017 fc99 	bl	801eb26 <_ZdlPvj>
 80071f4:	4620      	mov	r0, r4
 80071f6:	bd10      	pop	{r4, pc}

080071f8 <_ZThn64_N8DemoViewI23EasingEquationPresenterED0Ev>:
 80071f8:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 80071fc:	e7f4      	b.n	80071e8 <_ZN8DemoViewI23EasingEquationPresenterED0Ev>

080071fe <_ZN8touchgfx8CallbackI8DemoViewI23EasingEquationPresenterERKNS_14AbstractButtonEvvED0Ev>:
 80071fe:	b510      	push	{r4, lr}
 8007200:	4604      	mov	r4, r0
 8007202:	2110      	movs	r1, #16
 8007204:	f017 fc8f 	bl	801eb26 <_ZdlPvj>
 8007208:	4620      	mov	r0, r4
 800720a:	bd10      	pop	{r4, pc}

0800720c <_ZN18EasingEquationView15handleTickEventEv>:
    graph.invalidate();
    drawGraph = true;
}

void EasingEquationView::handleTickEvent()
{
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tickCounter++;
 800720e:	f8d0 5100 	ldr.w	r5, [r0, #256]	@ 0x100
{
 8007212:	4604      	mov	r4, r0
    tickCounter++;
 8007214:	3501      	adds	r5, #1
 8007216:	f8c0 5100 	str.w	r5, [r0, #256]	@ 0x100

    if (tickCounter % 2 == 0)
 800721a:	f015 0501 	ands.w	r5, r5, #1
 800721e:	d153      	bne.n	80072c8 <_ZN18EasingEquationView15handleTickEventEv+0xbc>
    {
        int moveAnimationDuration = NUMBER_OF_STEPS;

        if (moveAnimationCounter <= moveAnimationDuration)
 8007220:	f8d0 0104 	ldr.w	r0, [r0, #260]	@ 0x104
 8007224:	2832      	cmp	r0, #50	@ 0x32
 8007226:	dc50      	bgt.n	80072ca <_ZN18EasingEquationView15handleTickEventEv+0xbe>
        visible = vis;
 8007228:	f504 5680 	add.w	r6, r4, #4096	@ 0x1000
 800722c:	2301      	movs	r3, #1
        {
            graphDot.setVisible(true);

            int deltaDot = easingEquation(moveAnimationCounter, 0, 258, moveAnimationDuration);
 800722e:	4629      	mov	r1, r5
 8007230:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007234:	6ab7      	ldr	r7, [r6, #40]	@ 0x28
 8007236:	b280      	uxth	r0, r0
 8007238:	f886 3441 	strb.w	r3, [r6, #1089]	@ 0x441
 800723c:	2332      	movs	r3, #50	@ 0x32
 800723e:	47b8      	blx	r7
            dot.moveTo(150 + deltaDot, dot.getY());
 8007240:	f100 0196 	add.w	r1, r0, #150	@ 0x96
 8007244:	f9b4 213a 	ldrsh.w	r2, [r4, #314]	@ 0x13a
 8007248:	f504 709a 	add.w	r0, r4, #308	@ 0x134
 800724c:	b209      	sxth	r1, r1
 800724e:	f7f9 fddd 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>

            int deltaGraphDot = easingEquation(moveAnimationCounter, 0, 100 * GRAPH_MULT, moveAnimationDuration);
 8007252:	4629      	mov	r1, r5
 8007254:	2332      	movs	r3, #50	@ 0x32
 8007256:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800725a:	6ab7      	ldr	r7, [r6, #40]	@ 0x28
 800725c:	f8b4 0104 	ldrh.w	r0, [r4, #260]	@ 0x104
 8007260:	47b8      	blx	r7
        return y + height;
 8007262:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 8007264:	8e72      	ldrh	r2, [r6, #50]	@ 0x32
 8007266:	4605      	mov	r5, r0
            graphDot.moveTo(graph.getX() + 4 * moveAnimationCounter - (graphDot.getWidth() / 2) - 1, graph.getRect().bottom() - (deltaGraphDot / GRAPH_MULT) + GRAPH_Y_VALUE_OFFSET - (graphDot.getHeight() / 2) - 1);
 8007268:	8e31      	ldrh	r1, [r6, #48]	@ 0x30
 800726a:	441a      	add	r2, r3
 800726c:	f9b6 3426 	ldrsh.w	r3, [r6, #1062]	@ 0x426
 8007270:	3901      	subs	r1, #1
 8007272:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007276:	3a1f      	subs	r2, #31
 8007278:	eba2 0263 	sub.w	r2, r2, r3, asr #1
 800727c:	f06f 0305 	mvn.w	r3, #5
 8007280:	fb90 f3f3 	sdiv	r3, r0, r3
 8007284:	441a      	add	r2, r3
 8007286:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 800728a:	f504 50a0 	add.w	r0, r4, #5120	@ 0x1400
 800728e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007292:	f9b6 3424 	ldrsh.w	r3, [r6, #1060]	@ 0x424
 8007296:	b212      	sxth	r2, r2
 8007298:	301c      	adds	r0, #28
 800729a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800729e:	eba1 0163 	sub.w	r1, r1, r3, asr #1
 80072a2:	b209      	sxth	r1, r1
 80072a4:	f7f9 fdb2 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>

            if (drawGraph)
 80072a8:	f896 3448 	ldrb.w	r3, [r6, #1096]	@ 0x448
 80072ac:	b13b      	cbz	r3, 80072be <_ZN18EasingEquationView15handleTickEventEv+0xb2>
    void setup(int newWidth, int newHeight, colortype lineColor, uint16_t lineWidth);

    template <class T>
    bool addValue(T x, T y)
    {
        return graphLine.addValue(x, y);
 80072ae:	f504 5082 	add.w	r0, r4, #4160	@ 0x1040
 80072b2:	462a      	mov	r2, r5
 80072b4:	f8d4 1104 	ldr.w	r1, [r4, #260]	@ 0x104
 80072b8:	3018      	adds	r0, #24
 80072ba:	f000 fb45 	bl	8007948 <_ZN13AbstractGraph8addValueEii>
            {
                graph.addValue(moveAnimationCounter, deltaGraphDot);
            }

            moveAnimationCounter++;
 80072be:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 80072c2:	3301      	adds	r3, #1
 80072c4:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
            // End of animation
            moveAnimationCounter = 0;
            drawGraph = false;
        }
    }
}
 80072c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else if (moveAnimationCounter <= moveAnimationDuration + PAUSE_DURATION)
 80072ca:	2846      	cmp	r0, #70	@ 0x46
            moveAnimationCounter++;
 80072cc:	bfd3      	iteet	le
 80072ce:	3001      	addle	r0, #1
            moveAnimationCounter = 0;
 80072d0:	f8c4 5104 	strgt.w	r5, [r4, #260]	@ 0x104
            drawGraph = false;
 80072d4:	f504 5480 	addgt.w	r4, r4, #4096	@ 0x1000
            moveAnimationCounter++;
 80072d8:	f8c4 0104 	strle.w	r0, [r4, #260]	@ 0x104
            drawGraph = false;
 80072dc:	bfc8      	it	gt
 80072de:	f884 5448 	strbgt.w	r5, [r4, #1096]	@ 0x448
}
 80072e2:	e7f1      	b.n	80072c8 <_ZN18EasingEquationView15handleTickEventEv+0xbc>

080072e4 <_ZN18EasingEquationViewD1Ev>:
EasingEquationView::~EasingEquationView()
 80072e4:	4b09      	ldr	r3, [pc, #36]	@ (800730c <_ZN18EasingEquationViewD1Ev+0x28>)
 80072e6:	f103 0208 	add.w	r2, r3, #8
 80072ea:	3340      	adds	r3, #64	@ 0x40
 80072ec:	b510      	push	{r4, lr}
 80072ee:	4604      	mov	r4, r0
 80072f0:	6002      	str	r2, [r0, #0]
 80072f2:	6403      	str	r3, [r0, #64]	@ 0x40
}
 80072f4:	f500 5081 	add.w	r0, r0, #4128	@ 0x1020
 80072f8:	300c      	adds	r0, #12
 80072fa:	f7ff f9d9 	bl	80066b0 <_ZN19EasingEquationGraphD1Ev>
 80072fe:	f504 70b0 	add.w	r0, r4, #352	@ 0x160
 8007302:	f7ff fcff 	bl	8006d04 <_ZN22EasingEquationSelectorD1Ev>
 8007306:	4620      	mov	r0, r4
 8007308:	bd10      	pop	{r4, pc}
 800730a:	bf00      	nop
 800730c:	08022090 	.word	0x08022090

08007310 <_ZThn64_N18EasingEquationViewD1Ev>:

class EasingEquationView : public DemoView<EasingEquationPresenter>
{
public:
    EasingEquationView();
    virtual ~EasingEquationView();
 8007310:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 8007314:	f7ff bfe6 	b.w	80072e4 <_ZN18EasingEquationViewD1Ev>

08007318 <_ZN18EasingEquationViewD0Ev>:
EasingEquationView::~EasingEquationView()
 8007318:	b510      	push	{r4, lr}
 800731a:	4604      	mov	r4, r0
}
 800731c:	f7ff ffe2 	bl	80072e4 <_ZN18EasingEquationViewD1Ev>
 8007320:	f241 416c 	movw	r1, #5228	@ 0x146c
 8007324:	4620      	mov	r0, r4
 8007326:	f017 fbfe 	bl	801eb26 <_ZdlPvj>
 800732a:	4620      	mov	r0, r4
 800732c:	bd10      	pop	{r4, pc}

0800732e <_ZThn64_N18EasingEquationViewD0Ev>:
 800732e:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 8007332:	f7ff bff1 	b.w	8007318 <_ZN18EasingEquationViewD0Ev>

08007336 <_ZN18EasingEquationView20updateEasingEquationEv>:
{
 8007336:	b538      	push	{r3, r4, r5, lr}
 8007338:	4604      	mov	r4, r0
    dot.moveTo(150, 197);
 800733a:	22c5      	movs	r2, #197	@ 0xc5
 800733c:	2196      	movs	r1, #150	@ 0x96
 800733e:	f500 709a 	add.w	r0, r0, #308	@ 0x134
        return graphLine.deleteValue(x);
    }

    void clear()
    {
        graphLine.clearGraph();
 8007342:	f504 5581 	add.w	r5, r4, #4128	@ 0x1020
 8007346:	f7f9 fd61 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
    moveAnimationCounter = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8007350:	350c      	adds	r5, #12
 8007352:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
    drawGraph = true;
 8007356:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800735a:	f000 fa3b 	bl	80077d4 <_ZN13AbstractGraph10clearGraphEv>
    graph.invalidate();
 800735e:	4628      	mov	r0, r5
 8007360:	f013 f813 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    drawGraph = true;
 8007364:	2301      	movs	r3, #1
 8007366:	f884 3448 	strb.w	r3, [r4, #1096]	@ 0x448
}
 800736a:	bd38      	pop	{r3, r4, r5, pc}

0800736c <_ZN18EasingEquationView15inOrOutSelectedE22EasingEquationsInOrOut>:
    inOrOutType = newInOrOutType;
 800736c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8007370:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
    if (newInOrOutType == EASING_EQUATION_IN)
 8007374:	b919      	cbnz	r1, 800737e <_ZN18EasingEquationView15inOrOutSelectedE22EasingEquationsInOrOut+0x12>
        easingEquation = easingEquationSelection.in;
 8007376:	695a      	ldr	r2, [r3, #20]
 8007378:	629a      	str	r2, [r3, #40]	@ 0x28
    updateEasingEquation();
 800737a:	f7ff bfdc 	b.w	8007336 <_ZN18EasingEquationView20updateEasingEquationEv>
    else if (newInOrOutType == EASING_EQUATION_OUT)
 800737e:	2901      	cmp	r1, #1
        easingEquation = easingEquationSelection.out;
 8007380:	bf0c      	ite	eq
 8007382:	699a      	ldreq	r2, [r3, #24]
        easingEquation = easingEquationSelection.inOut;
 8007384:	69da      	ldrne	r2, [r3, #28]
 8007386:	e7f7      	b.n	8007378 <_ZN18EasingEquationView15inOrOutSelectedE22EasingEquationsInOrOut+0xc>

08007388 <_ZN18EasingEquationView22easingEquationSelectedERK23EasingEquationSelection>:
{
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    this->easingEquationSelection = selection;
 800738a:	f500 5780 	add.w	r7, r0, #4096	@ 0x1000
{
 800738e:	4605      	mov	r5, r0
 8007390:	460c      	mov	r4, r1
    this->easingEquationSelection = selection;
 8007392:	f107 0614 	add.w	r6, r7, #20
 8007396:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8007398:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    easingEquationName.setTypedText(TypedText(selection.EasingEquationName));
 800739c:	f505 667e 	add.w	r6, r5, #4064	@ 0xfe0
 80073a0:	89a1      	ldrh	r1, [r4, #12]
 80073a2:	4630      	mov	r0, r6
 80073a4:	f00f fe44 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    easingEquationName.invalidate();
 80073a8:	4630      	mov	r0, r6
 80073aa:	f012 ffee 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    inOrOutSelected(this->inOrOutType);
 80073ae:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80073b2:	4628      	mov	r0, r5
}
 80073b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    inOrOutSelected(this->inOrOutType);
 80073b8:	f7ff bfd8 	b.w	800736c <_ZN18EasingEquationView15inOrOutSelectedE22EasingEquationsInOrOut>

080073bc <_ZN8DemoViewI23EasingEquationPresenterEC1Ev>:
    DemoView() :
 80073bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c0:	4604      	mov	r4, r0
 80073c2:	f013 fb0f 	bl	801a9e4 <_ZN8touchgfx6ScreenC1Ev>
        onGotoMenuButtonClicked(this, &DemoView::gotoMenuClickedHandler)
 80073c6:	4b2b      	ldr	r3, [pc, #172]	@ (8007474 <_ZN8DemoViewI23EasingEquationPresenterEC1Ev+0xb8>)
 80073c8:	2500      	movs	r5, #0
    AbstractButton() : Widget(), action(), pressed(false)
 80073ca:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 80073ce:	f104 0978 	add.w	r9, r4, #120	@ 0x78
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	3338      	adds	r3, #56	@ 0x38
 80073d6:	63e5      	str	r5, [r4, #60]	@ 0x3c
        touchable = touch;
 80073d8:	f04f 0801 	mov.w	r8, #1
 80073dc:	6423      	str	r3, [r4, #64]	@ 0x40
 80073de:	f104 07ac 	add.w	r7, r4, #172	@ 0xac
 80073e2:	f7fc f979 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 80073e6:	4b24      	ldr	r3, [pc, #144]	@ (8007478 <_ZN8DemoViewI23EasingEquationPresenterEC1Ev+0xbc>)
 80073e8:	4648      	mov	r0, r9
 80073ea:	66e5      	str	r5, [r4, #108]	@ 0x6c
 80073ec:	6463      	str	r3, [r4, #68]	@ 0x44
 80073ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80073f2:	f884 5070 	strb.w	r5, [r4, #112]	@ 0x70
 80073f6:	26ff      	movs	r6, #255	@ 0xff
 80073f8:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 80073fc:	f8a4 3074 	strh.w	r3, [r4, #116]	@ 0x74
 8007400:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
 8007404:	f884 8068 	strb.w	r8, [r4, #104]	@ 0x68
 8007408:	f7fc f98e 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
    TextAreaWithWildcardBase() : TextArea() {  }
 800740c:	4638      	mov	r0, r7
 800740e:	f7fc f98b 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 8007412:	4b1a      	ldr	r3, [pc, #104]	@ (800747c <_ZN8DemoViewI23EasingEquationPresenterEC1Ev+0xc0>)
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 8007414:	4629      	mov	r1, r5
 8007416:	4648      	mov	r0, r9
 8007418:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 800741c:	f104 09e4 	add.w	r9, r4, #228	@ 0xe4
    {
 8007420:	4b17      	ldr	r3, [pc, #92]	@ (8007480 <_ZN8DemoViewI23EasingEquationPresenterEC1Ev+0xc4>)
 8007422:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
        this->pobject = pobject;
 8007426:	e9c4 343c 	strd	r3, r4, [r4, #240]	@ 0xf0
        this->pmemfun_1 = pmemfun_1;
 800742a:	4b16      	ldr	r3, [pc, #88]	@ (8007484 <_ZN8DemoViewI23EasingEquationPresenterEC1Ev+0xc8>)
 800742c:	e9c4 353e 	strd	r3, r5, [r4, #248]	@ 0xf8
        gotoMenuButton.setAction(onGotoMenuButtonClicked);
 8007430:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
        action = &callback;
 8007434:	66e3      	str	r3, [r4, #108]	@ 0x6c
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 8007436:	f00f fdfb 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 800743a:	4632      	mov	r2, r6
 800743c:	4631      	mov	r1, r6
 800743e:	4630      	mov	r0, r6
 8007440:	f015 f942 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 8007444:	462b      	mov	r3, r5
 8007446:	4a10      	ldr	r2, [pc, #64]	@ (8007488 <_ZN8DemoViewI23EasingEquationPresenterEC1Ev+0xcc>)
 8007448:	2105      	movs	r1, #5
 800744a:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 800744e:	4648      	mov	r0, r9
 8007450:	f015 f92c 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_VALUE));
 8007454:	4641      	mov	r1, r8
 8007456:	4638      	mov	r0, r7
        wildcard = value;
 8007458:	f8c4 90e0 	str.w	r9, [r4, #224]	@ 0xe0
 800745c:	f00f fde8 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadValueTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 8007460:	4632      	mov	r2, r6
 8007462:	4631      	mov	r1, r6
 8007464:	4630      	mov	r0, r6
 8007466:	f015 f92f 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800746a:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
    }
 800746e:	4620      	mov	r0, r4
 8007470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007474:	08024144 	.word	0x08024144
 8007478:	08025f10 	.word	0x08025f10
 800747c:	08023474 	.word	0x08023474
 8007480:	0802412c 	.word	0x0802412c
 8007484:	0800719f 	.word	0x0800719f
 8007488:	08023468 	.word	0x08023468

0800748c <_ZN18EasingEquationViewC1Ev>:
EasingEquationView::EasingEquationView() :
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	b089      	sub	sp, #36	@ 0x24
 8007492:	4604      	mov	r4, r0
    onInOrOutSelected(this, &EasingEquationView::inOrOutSelected)
 8007494:	f7ff ff92 	bl	80073bc <_ZN8DemoViewI23EasingEquationPresenterEC1Ev>
 8007498:	4bac      	ldr	r3, [pc, #688]	@ (800774c <_ZN18EasingEquationViewC1Ev+0x2c0>)
    tickCounter(0),
 800749a:	2600      	movs	r6, #0
    onInOrOutSelected(this, &EasingEquationView::inOrOutSelected)
 800749c:	f504 7b84 	add.w	fp, r4, #264	@ 0x108
 80074a0:	f103 0208 	add.w	r2, r3, #8
 80074a4:	3340      	adds	r3, #64	@ 0x40
 80074a6:	f504 7a9a 	add.w	sl, r4, #308	@ 0x134
 80074aa:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80074ae:	6022      	str	r2, [r4, #0]
 80074b0:	a907      	add	r1, sp, #28
 80074b2:	6423      	str	r3, [r4, #64]	@ 0x40
 80074b4:	4658      	mov	r0, fp
 80074b6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80074ba:	f504 5881 	add.w	r8, r4, #4128	@ 0x1020
 80074be:	f504 59a0 	add.w	r9, r4, #5120	@ 0x1400
 80074c2:	1d27      	adds	r7, r4, #4
 80074c4:	f108 080c 	add.w	r8, r8, #12
 80074c8:	f109 091c 	add.w	r9, r9, #28
    moveAnimationCounter(0),
 80074cc:	e9c4 6640 	strd	r6, r6, [r4, #256]	@ 0x100
    onInOrOutSelected(this, &EasingEquationView::inOrOutSelected)
 80074d0:	f7fc fd96 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80074d4:	a907      	add	r1, sp, #28
 80074d6:	4650      	mov	r0, sl
 80074d8:	f8ad 501c 	strh.w	r5, [sp, #28]
 80074dc:	f7fc fd90 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80074e0:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 80074e4:	4618      	mov	r0, r3
 80074e6:	9303      	str	r3, [sp, #12]
 80074e8:	f7ff fd34 	bl	8006f54 <_ZN22EasingEquationSelectorC1Ev>
 80074ec:	f604 43b8 	addw	r3, r4, #3256	@ 0xcb8
 80074f0:	4618      	mov	r0, r3
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	f7ff fae2 	bl	8006abc <_ZN28EasingEquationInOrOutOrInOutC1Ev>
 80074f8:	f504 637e 	add.w	r3, r4, #4064	@ 0xfe0
 80074fc:	4618      	mov	r0, r3
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	f7fc f912 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
 8007504:	4640      	mov	r0, r8
 8007506:	f7ff f8f7 	bl	80066f8 <_ZN19EasingEquationGraphC1Ev>
 800750a:	a907      	add	r1, sp, #28
 800750c:	4648      	mov	r0, r9
 800750e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8007512:	f7fc fd75 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
    {
 8007516:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
 800751a:	4b8d      	ldr	r3, [pc, #564]	@ (8007750 <_ZN18EasingEquationViewC1Ev+0x2c4>)
    background.setBitmap(Bitmap(BITMAP_EASING_BACKGROUND_ID));
 800751c:	a907      	add	r1, sp, #28
 800751e:	4658      	mov	r0, fp
        this->pobject = pobject;
 8007520:	f8c5 4450 	str.w	r4, [r5, #1104]	@ 0x450
    {
 8007524:	f8c5 344c 	str.w	r3, [r5, #1100]	@ 0x44c
        this->pmemfun_1 = pmemfun_1;
 8007528:	4b8a      	ldr	r3, [pc, #552]	@ (8007754 <_ZN18EasingEquationViewC1Ev+0x2c8>)
 800752a:	f8c5 6458 	str.w	r6, [r5, #1112]	@ 0x458
 800752e:	f8c5 3454 	str.w	r3, [r5, #1108]	@ 0x454
    {
 8007532:	4b89      	ldr	r3, [pc, #548]	@ (8007758 <_ZN18EasingEquationViewC1Ev+0x2cc>)
        this->pobject = pobject;
 8007534:	f8c5 4460 	str.w	r4, [r5, #1120]	@ 0x460
    {
 8007538:	f8c5 345c 	str.w	r3, [r5, #1116]	@ 0x45c
        this->pmemfun_1 = pmemfun_1;
 800753c:	4b87      	ldr	r3, [pc, #540]	@ (800775c <_ZN18EasingEquationViewC1Ev+0x2d0>)
 800753e:	f8c5 6468 	str.w	r6, [r5, #1128]	@ 0x468
 8007542:	f8c5 3464 	str.w	r3, [r5, #1124]	@ 0x464
 8007546:	232b      	movs	r3, #43	@ 0x2b
 8007548:	f8ad 301c 	strh.w	r3, [sp, #28]
 800754c:	f00f feff 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setXY(0, 0);
 8007550:	4632      	mov	r2, r6
 8007552:	4631      	mov	r1, r6
 8007554:	4658      	mov	r0, fp
 8007556:	f7f9 fc43 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 800755a:	4659      	mov	r1, fp
 800755c:	4638      	mov	r0, r7
    mcuLoadValueTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_VALUE_SMALL));
 800755e:	f104 0bac 	add.w	fp, r4, #172	@ 0xac
 8007562:	f00b fbf5 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    selector.setXY(0, 0);
 8007566:	4632      	mov	r2, r6
 8007568:	4631      	mov	r1, r6
 800756a:	9803      	ldr	r0, [sp, #12]
 800756c:	f7f9 fc38 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    selector.setEasingEquationSelectedCallback(onEasingEquationSelected);
 8007570:	f504 51a2 	add.w	r1, r4, #5184	@ 0x1440
 8007574:	9803      	ldr	r0, [sp, #12]
 8007576:	310c      	adds	r1, #12
 8007578:	f7ff fda6 	bl	80070c8 <_ZN22EasingEquationSelector33setEasingEquationSelectedCallbackERN8touchgfx15GenericCallbackIRK23EasingEquationSelectionvvEE>
 800757c:	9903      	ldr	r1, [sp, #12]
 800757e:	4638      	mov	r0, r7
 8007580:	f00b fbe6 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    inOrOut.setXY(selector.getRect().right(), HAL::DISPLAY_HEIGHT - inOrOut.getHeight());
 8007584:	4b76      	ldr	r3, [pc, #472]	@ (8007760 <_ZN18EasingEquationViewC1Ev+0x2d4>)
        return x + width;
 8007586:	f8b4 1164 	ldrh.w	r1, [r4, #356]	@ 0x164
 800758a:	881a      	ldrh	r2, [r3, #0]
 800758c:	f8b4 3cc2 	ldrh.w	r3, [r4, #3266]	@ 0xcc2
 8007590:	9804      	ldr	r0, [sp, #16]
 8007592:	1ad2      	subs	r2, r2, r3
 8007594:	f8b4 3168 	ldrh.w	r3, [r4, #360]	@ 0x168
 8007598:	4419      	add	r1, r3
 800759a:	b212      	sxth	r2, r2
 800759c:	b209      	sxth	r1, r1
 800759e:	f7f9 fc1f 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    inOrOut.setInOrOutSelectedCallback(onInOrOutSelected);
 80075a2:	f504 51a2 	add.w	r1, r4, #5184	@ 0x1440
 80075a6:	9804      	ldr	r0, [sp, #16]
 80075a8:	311c      	adds	r1, #28
 80075aa:	f7ff fa04 	bl	80069b6 <_ZN28EasingEquationInOrOutOrInOut26setInOrOutSelectedCallbackERN8touchgfx15GenericCallbackI22EasingEquationsInOrOutvvEE>
 80075ae:	9904      	ldr	r1, [sp, #16]
 80075b0:	4638      	mov	r0, r7
 80075b2:	f00b fbcd 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    easingEquation = EasingEquations::cubicEaseInOut;
 80075b6:	4b6b      	ldr	r3, [pc, #428]	@ (8007764 <_ZN18EasingEquationViewC1Ev+0x2d8>)
    dot.setBitmap(Bitmap(BITMAP_EASING_DOT_ID));
 80075b8:	a907      	add	r1, sp, #28
 80075ba:	4650      	mov	r0, sl
    easingEquation = EasingEquations::cubicEaseInOut;
 80075bc:	62ab      	str	r3, [r5, #40]	@ 0x28
 80075be:	232f      	movs	r3, #47	@ 0x2f
 80075c0:	f8ad 301c 	strh.w	r3, [sp, #28]
    dot.setBitmap(Bitmap(BITMAP_EASING_DOT_ID));
 80075c4:	f00f fec3 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    dot.setXY(150, 197);
 80075c8:	22c5      	movs	r2, #197	@ 0xc5
 80075ca:	4650      	mov	r0, sl
 80075cc:	2196      	movs	r1, #150	@ 0x96
 80075ce:	f7f9 fc07 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 80075d2:	4651      	mov	r1, sl
    mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT_SMALL));
 80075d4:	f104 0a78 	add.w	sl, r4, #120	@ 0x78
 80075d8:	4638      	mov	r0, r7
 80075da:	f00b fbb9 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80075de:	f04f 0102 	mov.w	r1, #2
 80075e2:	4650      	mov	r0, sl
 80075e4:	f00f fd24 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    mcuLoadTxt.resizeToCurrentText();
 80075e8:	4650      	mov	r0, sl
 80075ea:	f00f fcf7 	bl	8016fdc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    mcuLoadValueTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_VALUE_SMALL));
 80075ee:	f04f 0103 	mov.w	r1, #3
 80075f2:	4658      	mov	r0, fp
 80075f4:	f00f fd1c 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    mcuLoadTxt.setXY(246, 20 - mcuLoadTxt.getTypedText().getFont()->getFontHeight());
 80075f8:	f8b4 309e 	ldrh.w	r3, [r4, #158]	@ 0x9e
 80075fc:	a807      	add	r0, sp, #28
 80075fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007602:	f7fb fb27 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8007606:	6803      	ldr	r3, [r0, #0]
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	4798      	blx	r3
 800760c:	f1c0 0214 	rsb	r2, r0, #20
 8007610:	21f6      	movs	r1, #246	@ 0xf6
 8007612:	4650      	mov	r0, sl
 8007614:	b212      	sxth	r2, r2
 8007616:	f7f9 fbe3 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    mcuLoadTxt.setColor(Color::getColorFrom24BitRGB(0x41, 0x5D, 0x62));
 800761a:	2262      	movs	r2, #98	@ 0x62
 800761c:	215d      	movs	r1, #93	@ 0x5d
 800761e:	2041      	movs	r0, #65	@ 0x41
 8007620:	f015 f852 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007624:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 8007628:	f8b4 107c 	ldrh.w	r1, [r4, #124]	@ 0x7c
 800762c:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
    mcuLoadValueTxt.setPosition(mcuLoadTxt.getRect().right(), mcuLoadTxt.getY(), 30, 14);
 8007630:	4658      	mov	r0, fp
 8007632:	4419      	add	r1, r3
 8007634:	230e      	movs	r3, #14
 8007636:	b209      	sxth	r1, r1
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	231e      	movs	r3, #30
 800763c:	f9b4 207e 	ldrsh.w	r2, [r4, #126]	@ 0x7e
 8007640:	f7f9 fbb6 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007644:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8007648:	4651      	mov	r1, sl
 800764a:	4638      	mov	r0, r7
 800764c:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
    gotoMenuButton.setBitmaps(Bitmap(BITMAP_EASING_MENU_BUTTON_ID), Bitmap(BITMAP_EASING_MENU_BUTTON_PRESSED_ID));
 8007650:	f104 0a44 	add.w	sl, r4, #68	@ 0x44
 8007654:	f00b fb7c 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8007658:	4659      	mov	r1, fp
 800765a:	4638      	mov	r0, r7
    gotoMenuButton.setXY(HAL::DISPLAY_WIDTH - gotoMenuButton.getWidth(), 0);
 800765c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8007768 <_ZN18EasingEquationViewC1Ev+0x2dc>
 8007660:	f00b fb76 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8007664:	2330      	movs	r3, #48	@ 0x30
    gotoMenuButton.setBitmaps(Bitmap(BITMAP_EASING_MENU_BUTTON_ID), Bitmap(BITMAP_EASING_MENU_BUTTON_PRESSED_ID));
 8007666:	aa07      	add	r2, sp, #28
 8007668:	a906      	add	r1, sp, #24
 800766a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800766e:	2331      	movs	r3, #49	@ 0x31
 8007670:	4650      	mov	r0, sl
 8007672:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007676:	f00f fd63 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    gotoMenuButton.setXY(HAL::DISPLAY_WIDTH - gotoMenuButton.getWidth(), 0);
 800767a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	@ 0x4c
 800767e:	4632      	mov	r2, r6
 8007680:	f8bb 1000 	ldrh.w	r1, [fp]
 8007684:	4650      	mov	r0, sl
 8007686:	1ac9      	subs	r1, r1, r3
 8007688:	b209      	sxth	r1, r1
 800768a:	f7f9 fba9 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 800768e:	4651      	mov	r1, sl
 8007690:	4638      	mov	r0, r7
 8007692:	f00b fb5d 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8007696:	f8b4 3168 	ldrh.w	r3, [r4, #360]	@ 0x168
 800769a:	f8b4 1164 	ldrh.w	r1, [r4, #356]	@ 0x164
    easingEquationName.setPosition(selector.getRect().right() + 80, 28, HAL::DISPLAY_WIDTH - (selector.getRect().right() + (80 * 2)), 24);
 800769e:	2218      	movs	r2, #24
 80076a0:	9805      	ldr	r0, [sp, #20]
 80076a2:	4419      	add	r1, r3
 80076a4:	f8bb 3000 	ldrh.w	r3, [fp]
 80076a8:	9200      	str	r2, [sp, #0]
 80076aa:	221c      	movs	r2, #28
 80076ac:	b289      	uxth	r1, r1
 80076ae:	3ba0      	subs	r3, #160	@ 0xa0
 80076b0:	1a5b      	subs	r3, r3, r1
 80076b2:	3150      	adds	r1, #80	@ 0x50
 80076b4:	b21b      	sxth	r3, r3
 80076b6:	b209      	sxth	r1, r1
 80076b8:	f7f9 fb7a 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    easingEquationName.setColor(Color::getColorFrom24BitRGB(0x41, 0x5D, 0x62));
 80076bc:	2262      	movs	r2, #98	@ 0x62
 80076be:	215d      	movs	r1, #93	@ 0x5d
 80076c0:	2041      	movs	r0, #65	@ 0x41
 80076c2:	f015 f801 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    easingEquationName.setTypedText(TypedText(T_EASING_EQUATION_SINUSOIDAL));
 80076c6:	f04f 0120 	mov.w	r1, #32
 80076ca:	60a8      	str	r0, [r5, #8]
 80076cc:	9805      	ldr	r0, [sp, #20]
 80076ce:	f00f fcaf 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80076d2:	9905      	ldr	r1, [sp, #20]
 80076d4:	4638      	mov	r0, r7
 80076d6:	f00b fb3b 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graph.setXY(185, 164 - 100 + GRAPH_Y_VALUE_OFFSET);
 80076da:	4640      	mov	r0, r8
 80076dc:	2222      	movs	r2, #34	@ 0x22
 80076de:	21b9      	movs	r1, #185	@ 0xb9
 80076e0:	f7f9 fb7e 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    graph.setup((NUMBER_OF_STEPS + 1) * 4, 100 - (2 * GRAPH_Y_VALUE_OFFSET), Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF), 2);
 80076e4:	22ff      	movs	r2, #255	@ 0xff
 80076e6:	4611      	mov	r1, r2
 80076e8:	4610      	mov	r0, r2
 80076ea:	f014 ffed 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80076ee:	2202      	movs	r2, #2
 80076f0:	4603      	mov	r3, r0
 80076f2:	21cc      	movs	r1, #204	@ 0xcc
 80076f4:	4640      	mov	r0, r8
 80076f6:	9200      	str	r2, [sp, #0]
 80076f8:	22a0      	movs	r2, #160	@ 0xa0
 80076fa:	f7ff f825 	bl	8006748 <_ZN19EasingEquationGraph5setupEiiN8touchgfx9colortypeEt>
    graph.setRange(0, NUMBER_OF_STEPS + 1, (100 - GRAPH_Y_VALUE_OFFSET) * GRAPH_MULT, GRAPH_Y_VALUE_OFFSET * GRAPH_MULT);
 80076fe:	f06f 03b3 	mvn.w	r3, #179	@ 0xb3
 8007702:	2233      	movs	r2, #51	@ 0x33
 8007704:	4631      	mov	r1, r6
 8007706:	4640      	mov	r0, r8
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 800770e:	f7ff f85d 	bl	80067cc <_ZN19EasingEquationGraph8setRangeEiiii>
 8007712:	4641      	mov	r1, r8
 8007714:	4638      	mov	r0, r7
 8007716:	f00b fb1b 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800771a:	2341      	movs	r3, #65	@ 0x41
    graphDot.setBitmap(Bitmap(BITMAP_GRAPHDOT_ID));
 800771c:	a907      	add	r1, sp, #28
 800771e:	4648      	mov	r0, r9
 8007720:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007724:	f00f fe13 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8007728:	4649      	mov	r1, r9
 800772a:	4638      	mov	r0, r7
        visible = vis;
 800772c:	f885 6441 	strb.w	r6, [r5, #1089]	@ 0x441
 8007730:	f00b fb0e 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    selector.select(1);
 8007734:	2101      	movs	r1, #1
 8007736:	9803      	ldr	r0, [sp, #12]
 8007738:	f7ff fccd 	bl	80070d6 <_ZN22EasingEquationSelector6selectEi>
    inOrOut.selectFirst();
 800773c:	9804      	ldr	r0, [sp, #16]
 800773e:	f7ff f93d 	bl	80069bc <_ZN28EasingEquationInOrOutOrInOut11selectFirstEv>
}
 8007742:	4620      	mov	r0, r4
 8007744:	b009      	add	sp, #36	@ 0x24
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	bf00      	nop
 800774c:	08022090 	.word	0x08022090
 8007750:	08024190 	.word	0x08024190
 8007754:	08007389 	.word	0x08007389
 8007758:	080241a8 	.word	0x080241a8
 800775c:	0800736d 	.word	0x0800736d
 8007760:	20024e2a 	.word	0x20024e2a
 8007764:	0801b1ed 	.word	0x0801b1ed
 8007768:	20024e28 	.word	0x20024e28

0800776c <_ZN13AbstractGraph4setXEs>:
        rect.x = x;
 800776c:	8081      	strh	r1, [r0, #4]
}

void AbstractGraph::setX(int16_t x)
{
    CanvasWidget::setX(x);
    if (linkedGraph)
 800776e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007770:	b110      	cbz	r0, 8007778 <_ZN13AbstractGraph4setXEs+0xc>
    {
        linkedGraph->setX(x);
 8007772:	6803      	ldr	r3, [r0, #0]
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	4718      	bx	r3
    }
}
 8007778:	4770      	bx	lr

0800777a <_ZN13AbstractGraph4setYEs>:
        rect.y = y;
 800777a:	80c1      	strh	r1, [r0, #6]

void AbstractGraph::setY(int16_t y)
{
    CanvasWidget::setY(y);
    if (linkedGraph)
 800777c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800777e:	b110      	cbz	r0, 8007786 <_ZN13AbstractGraph4setYEs+0xc>
    {
        linkedGraph->setY(y);
 8007780:	6803      	ldr	r3, [r0, #0]
 8007782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007784:	4718      	bx	r3
    }
}
 8007786:	4770      	bx	lr

08007788 <_ZN13AbstractGraph8setWidthEs>:

void AbstractGraph::setWidth(int16_t width)
{
    assignWidth(width);
 8007788:	6803      	ldr	r3, [r0, #0]
{
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
    assignWidth(width);
 800778e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007792:	4798      	blx	r3
    if (numPoints > 0)
 8007794:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8007796:	2a00      	cmp	r2, #0
 8007798:	dd08      	ble.n	80077ac <_ZN13AbstractGraph8setWidthEs+0x24>
    {
        updateAndInvalidateCacheForLinesBetweenIndeces(0, numPoints - 1);
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	4620      	mov	r0, r4
 800779e:	3a01      	subs	r2, #1
 80077a0:	2100      	movs	r1, #0
 80077a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
}
 80077a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        updateAndInvalidateCacheForLinesBetweenIndeces(0, numPoints - 1);
 80077aa:	4718      	bx	r3
}
 80077ac:	bd10      	pop	{r4, pc}

080077ae <_ZN13AbstractGraph9setHeightEs>:

void AbstractGraph::setHeight(int16_t height)
{
    assignHeight(height);
 80077ae:	6803      	ldr	r3, [r0, #0]
{
 80077b0:	b510      	push	{r4, lr}
 80077b2:	4604      	mov	r4, r0
    assignHeight(height);
 80077b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80077b8:	4798      	blx	r3
    if (numPoints > 0)
 80077ba:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80077bc:	2a00      	cmp	r2, #0
 80077be:	dd08      	ble.n	80077d2 <_ZN13AbstractGraph9setHeightEs+0x24>
    {
        updateAndInvalidateCacheForLinesBetweenIndeces(0, numPoints - 1);
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	4620      	mov	r0, r4
 80077c4:	3a01      	subs	r2, #1
 80077c6:	2100      	movs	r1, #0
 80077c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
}
 80077cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        updateAndInvalidateCacheForLinesBetweenIndeces(0, numPoints - 1);
 80077d0:	4718      	bx	r3
}
 80077d2:	bd10      	pop	{r4, pc}

080077d4 <_ZN13AbstractGraph10clearGraphEv>:

void AbstractGraph::clearGraph()
{
    numPoints = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	64c3      	str	r3, [r0, #76]	@ 0x4c
    if (linkedGraph)
 80077d8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80077da:	b110      	cbz	r0, 80077e2 <_ZN13AbstractGraph10clearGraphEv+0xe>
    {
        linkedGraph->clearGraph();
 80077dc:	6803      	ldr	r3, [r0, #0]
 80077de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077e0:	4718      	bx	r3
    }
}
 80077e2:	4770      	bx	lr

080077e4 <_ZN13AbstractGraph11deleteValueEi>:
    return true;
}

bool AbstractGraph::deleteValue(int x)
{
    int index = findX(x);
 80077e4:	6803      	ldr	r3, [r0, #0]
{
 80077e6:	b570      	push	{r4, r5, r6, lr}
 80077e8:	4604      	mov	r4, r0
    int index = findX(x);
 80077ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
{
 80077ee:	460e      	mov	r6, r1
    int index = findX(x);
 80077f0:	4798      	blx	r3
    if (index < numPoints && points[index].x == x)
 80077f2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    int index = findX(x);
 80077f4:	4605      	mov	r5, r0
    if (index < numPoints && points[index].x == x)
 80077f6:	4283      	cmp	r3, r0
 80077f8:	dd28      	ble.n	800784c <_ZN13AbstractGraph11deleteValueEi+0x68>
 80077fa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80077fc:	0103      	lsls	r3, r0, #4
 80077fe:	58d3      	ldr	r3, [r2, r3]
 8007800:	42b3      	cmp	r3, r6
 8007802:	d123      	bne.n	800784c <_ZN13AbstractGraph11deleteValueEi+0x68>
    {
        // Point with given X found in graph line
        if (index > 0)
 8007804:	2800      	cmp	r0, #0
 8007806:	dd05      	ble.n	8007814 <_ZN13AbstractGraph11deleteValueEi+0x30>
        {
            invalidateLineFromIndex(index - 1);
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	1e41      	subs	r1, r0, #1
 800780c:	4620      	mov	r0, r4
 800780e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007812:	4798      	blx	r3
        }
        invalidateLineFromIndex(index);
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	4629      	mov	r1, r5
 8007818:	4620      	mov	r0, r4
 800781a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800781e:	4798      	blx	r3
        deletePointAtIndex(index);
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	4629      	mov	r1, r5
 8007824:	4620      	mov	r0, r4
 8007826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800782a:	4798      	blx	r3
        if (numPoints > 0)
 800782c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800782e:	2b00      	cmp	r3, #0
 8007830:	dd0a      	ble.n	8007848 <_ZN13AbstractGraph11deleteValueEi+0x64>
        {
            updateAndInvalidateCacheForLinesBetweenIndeces(MAX(0, index - 1), index);
 8007832:	2d01      	cmp	r5, #1
 8007834:	4629      	mov	r1, r5
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	462a      	mov	r2, r5
 800783a:	bfb8      	it	lt
 800783c:	2101      	movlt	r1, #1
 800783e:	4620      	mov	r0, r4
 8007840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007844:	3901      	subs	r1, #1
 8007846:	4798      	blx	r3
        }
        return true;
 8007848:	2001      	movs	r0, #1
    }
    return false;
}
 800784a:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 800784c:	2000      	movs	r0, #0
 800784e:	e7fc      	b.n	800784a <_ZN13AbstractGraph11deleteValueEi+0x66>

08007850 <_ZNK13AbstractGraph31invalidateRectContainingIndicesEii>:
    return true;
}

void AbstractGraph::invalidateRectContainingIndices(int firstIndex, int lastIndex) const
{
    Rect minimalRect = getMinimalRectContainingIndices(firstIndex, lastIndex);
 8007850:	6803      	ldr	r3, [r0, #0]
{
 8007852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007854:	4604      	mov	r4, r0
    Rect minimalRect = getMinimalRectContainingIndices(firstIndex, lastIndex);
 8007856:	f8d3 7088 	ldr.w	r7, [r3, #136]	@ 0x88
{
 800785a:	460d      	mov	r5, r1
    Rect minimalRect = getMinimalRectContainingIndices(firstIndex, lastIndex);
 800785c:	4613      	mov	r3, r2
{
 800785e:	4616      	mov	r6, r2
    Rect minimalRect = getMinimalRectContainingIndices(firstIndex, lastIndex);
 8007860:	460a      	mov	r2, r1
 8007862:	4601      	mov	r1, r0
 8007864:	4668      	mov	r0, sp
 8007866:	47b8      	blx	r7
    invalidateRect(minimalRect);
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	4620      	mov	r0, r4
 800786c:	4669      	mov	r1, sp
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	4798      	blx	r3

    if (linkedGraph)
 8007872:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007874:	b128      	cbz	r0, 8007882 <_ZNK13AbstractGraph31invalidateRectContainingIndicesEii+0x32>
    {
        linkedGraph->invalidateRectContainingIndices(firstIndex, lastIndex);
 8007876:	6803      	ldr	r3, [r0, #0]
 8007878:	4632      	mov	r2, r6
 800787a:	4629      	mov	r1, r5
 800787c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007880:	4798      	blx	r3
    }
}
 8007882:	b003      	add	sp, #12
 8007884:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007886 <_ZNK13AbstractGraph14getMinimalRectEv>:

    invalidateRectContainingIndices(firstIndex, lastIndex);
}

Rect AbstractGraph::getMinimalRect() const
{
 8007886:	b538      	push	{r3, r4, r5, lr}
    if (numPoints < 1 || graphWidth == 0 || graphHeight == 0)
 8007888:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
{
 800788a:	4604      	mov	r4, r0
    if (numPoints < 1 || graphWidth == 0 || graphHeight == 0)
 800788c:	2b00      	cmp	r3, #0
 800788e:	dd03      	ble.n	8007898 <_ZNK13AbstractGraph14getMinimalRectEv+0x12>
 8007890:	6dcd      	ldr	r5, [r1, #92]	@ 0x5c
 8007892:	b10d      	cbz	r5, 8007898 <_ZNK13AbstractGraph14getMinimalRectEv+0x12>
 8007894:	6e0d      	ldr	r5, [r1, #96]	@ 0x60
 8007896:	b935      	cbnz	r5, 80078a6 <_ZNK13AbstractGraph14getMinimalRectEv+0x20>
        this->x = x;
 8007898:	2300      	movs	r3, #0
 800789a:	8023      	strh	r3, [r4, #0]
        this->y = y;
 800789c:	8063      	strh	r3, [r4, #2]
        this->width = width;
 800789e:	80a3      	strh	r3, [r4, #4]
        this->height = height;
 80078a0:	80e3      	strh	r3, [r4, #6]
    {
        return Rect(0, 0, 0, 0);
    }
    return getMinimalRectContainingIndices(0, numPoints - 1);
}
 80078a2:	4620      	mov	r0, r4
 80078a4:	bd38      	pop	{r3, r4, r5, pc}
    return getMinimalRectContainingIndices(0, numPoints - 1);
 80078a6:	680a      	ldr	r2, [r1, #0]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	f8d2 5088 	ldr.w	r5, [r2, #136]	@ 0x88
 80078ae:	2200      	movs	r2, #0
 80078b0:	47a8      	blx	r5
 80078b2:	e7f6      	b.n	80078a2 <_ZNK13AbstractGraph14getMinimalRectEv+0x1c>

080078b4 <_ZN13AbstractGraph12setNumPointsEi>:

void AbstractGraph::setNumPoints(int numPointsUsed)
{
    numPoints = numPointsUsed;
 80078b4:	64c1      	str	r1, [r0, #76]	@ 0x4c
    if (linkedGraph)
 80078b6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80078b8:	b118      	cbz	r0, 80078c2 <_ZN13AbstractGraph12setNumPointsEi+0xe>
    {
        linkedGraph->setNumPoints(numPointsUsed);
 80078ba:	6803      	ldr	r3, [r0, #0]
 80078bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078c0:	4718      	bx	r3
    }
}
 80078c2:	4770      	bx	lr

080078c4 <_ZN13AbstractGraph23invalidateLineFromIndexEi>:

void AbstractGraph::invalidateLineFromIndex(int index)
{
    invalidateRectContainingIndices(index, index + 1);
 80078c4:	6803      	ldr	r3, [r0, #0]
 80078c6:	1c4a      	adds	r2, r1, #1
{
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	4605      	mov	r5, r0
    invalidateRectContainingIndices(index, index + 1);
 80078cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
{
 80078d0:	460c      	mov	r4, r1
    invalidateRectContainingIndices(index, index + 1);
 80078d2:	4798      	blx	r3
    if (linkedGraph)
 80078d4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80078d6:	b130      	cbz	r0, 80078e6 <_ZN13AbstractGraph23invalidateLineFromIndexEi+0x22>
    {
        linkedGraph->invalidateLineFromIndex(index);
 80078d8:	6803      	ldr	r3, [r0, #0]
 80078da:	4621      	mov	r1, r4
 80078dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
    }
}
 80078e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        linkedGraph->invalidateLineFromIndex(index);
 80078e4:	4718      	bx	r3
}
 80078e6:	bd70      	pop	{r4, r5, r6, pc}

080078e8 <_ZN13AbstractGraph5findXEi>:
        points[i] = points[i + 1];
    }
}

int AbstractGraph::findX(int x)
{
 80078e8:	4603      	mov	r3, r0
    // No points, or x larger than all existing x coordinates
    if (numPoints == 0 || x > points[numPoints - 1].x)
 80078ea:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
{
 80078ec:	b530      	push	{r4, r5, lr}
    if (numPoints == 0 || x > points[numPoints - 1].x)
 80078ee:	b158      	cbz	r0, 8007908 <_ZN13AbstractGraph5findXEi+0x20>
 80078f0:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80078f2:	eb04 1300 	add.w	r3, r4, r0, lsl #4
 80078f6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80078fa:	428b      	cmp	r3, r1
 80078fc:	db04      	blt.n	8007908 <_ZN13AbstractGraph5findXEi+0x20>
        return numPoints;
    }

    // Setup search limits
    int loIndex = 0;
    int hiIndex = numPoints - 1;
 80078fe:	1e42      	subs	r2, r0, #1
    int loIndex = 0;
 8007900:	2300      	movs	r3, #0
    while (loIndex <= hiIndex)
 8007902:	4293      	cmp	r3, r2
 8007904:	dd01      	ble.n	800790a <_ZN13AbstractGraph5findXEi+0x22>
 8007906:	4618      	mov	r0, r3
            return midIndex;
        }
    }
    // Return first index over wanted x coordinate
    return loIndex;
}
 8007908:	bd30      	pop	{r4, r5, pc}
        int midIndex = (loIndex + hiIndex) / 2;
 800790a:	1898      	adds	r0, r3, r2
 800790c:	1040      	asrs	r0, r0, #1
        int midX = points[midIndex].x;
 800790e:	0105      	lsls	r5, r0, #4
 8007910:	5965      	ldr	r5, [r4, r5]
        if (x < midX)
 8007912:	42a9      	cmp	r1, r5
 8007914:	da01      	bge.n	800791a <_ZN13AbstractGraph5findXEi+0x32>
            hiIndex = midIndex - 1;
 8007916:	1e42      	subs	r2, r0, #1
 8007918:	e7f3      	b.n	8007902 <_ZN13AbstractGraph5findXEi+0x1a>
        else if (x > midX)
 800791a:	ddf5      	ble.n	8007908 <_ZN13AbstractGraph5findXEi+0x20>
            loIndex = midIndex + 1;
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	e7f0      	b.n	8007902 <_ZN13AbstractGraph5findXEi+0x1a>

08007920 <_ZN13AbstractGraph11assignWidthEs>:
 8007920:	014b      	lsls	r3, r1, #5
        rect.width = width;
 8007922:	8101      	strh	r1, [r0, #8]
}

void AbstractGraph::assignWidth(int16_t width)
{
    CanvasWidget::setWidth(width);
    widgetWidth = CWRUtil::toQ5(getWidth());
 8007924:	6543      	str	r3, [r0, #84]	@ 0x54
    if (linkedGraph)
 8007926:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007928:	b118      	cbz	r0, 8007932 <_ZN13AbstractGraph11assignWidthEs+0x12>
    {
        linkedGraph->assignWidth(width);
 800792a:	6803      	ldr	r3, [r0, #0]
 800792c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007930:	4718      	bx	r3
    }
}
 8007932:	4770      	bx	lr

08007934 <_ZN13AbstractGraph12assignHeightEs>:
 8007934:	014b      	lsls	r3, r1, #5
        rect.height = height;
 8007936:	8141      	strh	r1, [r0, #10]

void AbstractGraph::assignHeight(int16_t height)
{
    CanvasWidget::setHeight(height);
    widgetHeight = CWRUtil::toQ5(getHeight());
 8007938:	6583      	str	r3, [r0, #88]	@ 0x58
    if (linkedGraph)
 800793a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800793c:	b118      	cbz	r0, 8007946 <_ZN13AbstractGraph12assignHeightEs+0x12>
    {
        linkedGraph->assignHeight(height);
 800793e:	6803      	ldr	r3, [r0, #0]
 8007940:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007944:	4718      	bx	r3
    }
}
 8007946:	4770      	bx	lr

08007948 <_ZN13AbstractGraph8addValueEii>:
{
 8007948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800794c:	4617      	mov	r7, r2
 800794e:	4604      	mov	r4, r0
 8007950:	460e      	mov	r6, r1
    if (numPoints >= maxPoints)
 8007952:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	@ 0x48
 8007956:	4293      	cmp	r3, r2
 8007958:	da66      	bge.n	8007a28 <_ZN13AbstractGraph8addValueEii+0xe0>
    if (numPoints == 0 || x > points[numPoints - 1].x)
 800795a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
        int index = findX(x);
 800795c:	6805      	ldr	r5, [r0, #0]
    if (numPoints == 0 || x > points[numPoints - 1].x)
 800795e:	b12b      	cbz	r3, 800796c <_ZN13AbstractGraph8addValueEii+0x24>
 8007960:	eb02 1c03 	add.w	ip, r2, r3, lsl #4
 8007964:	f85c cc10 	ldr.w	ip, [ip, #-16]
 8007968:	458c      	cmp	ip, r1
 800796a:	da14      	bge.n	8007996 <_ZN13AbstractGraph8addValueEii+0x4e>
        points[numPoints].x = x;
 800796c:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8007970:	0118      	lsls	r0, r3, #4
 8007972:	5016      	str	r6, [r2, r0]
        setNumPoints(numPoints + 1);
 8007974:	4620      	mov	r0, r4
 8007976:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
        points[numPoints].y = y;
 800797a:	604f      	str	r7, [r1, #4]
        setNumPoints(numPoints + 1);
 800797c:	1c59      	adds	r1, r3, #1
 800797e:	4790      	blx	r2
        updateAndInvalidateCacheForLinesBetweenIndeces(numPoints - 2, numPoints - 1);
 8007980:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	1e4a      	subs	r2, r1, #1
 8007986:	3902      	subs	r1, #2
 8007988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800798c:	4620      	mov	r0, r4
 800798e:	4798      	blx	r3
    return true;
 8007990:	2001      	movs	r0, #1
}
 8007992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        int index = findX(x);
 8007996:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800799a:	4798      	blx	r3
        assert(points[index].x >= x && "Bug in binary search algorithm");
 800799c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800799e:	ea4f 1800 	mov.w	r8, r0, lsl #4
        int index = findX(x);
 80079a2:	4605      	mov	r5, r0
        assert(points[index].x >= x && "Bug in binary search algorithm");
 80079a4:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 80079a8:	f853 3008 	ldr.w	r3, [r3, r8]
 80079ac:	42b3      	cmp	r3, r6
 80079ae:	da05      	bge.n	80079bc <_ZN13AbstractGraph8addValueEii+0x74>
 80079b0:	4b1e      	ldr	r3, [pc, #120]	@ (8007a2c <_ZN13AbstractGraph8addValueEii+0xe4>)
 80079b2:	21a4      	movs	r1, #164	@ 0xa4
 80079b4:	4a1e      	ldr	r2, [pc, #120]	@ (8007a30 <_ZN13AbstractGraph8addValueEii+0xe8>)
 80079b6:	481f      	ldr	r0, [pc, #124]	@ (8007a34 <_ZN13AbstractGraph8addValueEii+0xec>)
 80079b8:	f018 f9dc 	bl	801fd74 <__assert_func>
        if (points[index].x > x)
 80079bc:	dd17      	ble.n	80079ee <_ZN13AbstractGraph8addValueEii+0xa6>
            invalidateLineFromIndex(index);
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	4601      	mov	r1, r0
 80079c2:	4620      	mov	r0, r4
 80079c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079c8:	4798      	blx	r3
            insertPointAtIndex(index);
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	4629      	mov	r1, r5
 80079ce:	4620      	mov	r0, r4
 80079d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079d4:	4798      	blx	r3
            points[index].x = x;
 80079d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
            updateAndInvalidateCacheForLinesBetweenIndeces(index - 1, index + 1);
 80079d8:	1e69      	subs	r1, r5, #1
            points[index].x = x;
 80079da:	eb03 0208 	add.w	r2, r3, r8
 80079de:	f843 6008 	str.w	r6, [r3, r8]
            updateAndInvalidateCacheForLinesBetweenIndeces(index - 1, index + 1);
 80079e2:	6823      	ldr	r3, [r4, #0]
            points[index].y = y;
 80079e4:	6057      	str	r7, [r2, #4]
            updateAndInvalidateCacheForLinesBetweenIndeces(index - 1, index + 1);
 80079e6:	1c6a      	adds	r2, r5, #1
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ec:	e7ce      	b.n	800798c <_ZN13AbstractGraph8addValueEii+0x44>
            if (points[index].y != y)
 80079ee:	6853      	ldr	r3, [r2, #4]
 80079f0:	42bb      	cmp	r3, r7
 80079f2:	d0cd      	beq.n	8007990 <_ZN13AbstractGraph8addValueEii+0x48>
                invalidateLineFromIndex(index - 1);
 80079f4:	f100 39ff 	add.w	r9, r0, #4294967295
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	4620      	mov	r0, r4
 80079fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a00:	4649      	mov	r1, r9
 8007a02:	4798      	blx	r3
                invalidateLineFromIndex(index);
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	4629      	mov	r1, r5
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a0e:	4798      	blx	r3
                points[index].x = x; // Actually not necessary
 8007a10:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                updateAndInvalidateCacheForLinesBetweenIndeces(index - 1, index + 1);
 8007a12:	4649      	mov	r1, r9
                points[index].x = x; // Actually not necessary
 8007a14:	eb03 0208 	add.w	r2, r3, r8
 8007a18:	f843 6008 	str.w	r6, [r3, r8]
                updateAndInvalidateCacheForLinesBetweenIndeces(index - 1, index + 1);
 8007a1c:	6823      	ldr	r3, [r4, #0]
                points[index].y = y;
 8007a1e:	6057      	str	r7, [r2, #4]
                updateAndInvalidateCacheForLinesBetweenIndeces(index - 1, index + 1);
 8007a20:	1c6a      	adds	r2, r5, #1
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a26:	e7b1      	b.n	800798c <_ZN13AbstractGraph8addValueEii+0x44>
        return false;
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7b2      	b.n	8007992 <_ZN13AbstractGraph8addValueEii+0x4a>
 8007a2c:	080241b8 	.word	0x080241b8
 8007a30:	080241f1 	.word	0x080241f1
 8007a34:	08024220 	.word	0x08024220

08007a38 <_ZN13AbstractGraph18insertPointAtIndexEi>:
{
 8007a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(numPoints < maxPoints && "Unable to insert more points in array");
 8007a3c:	e9d0 3712 	ldrd	r3, r7, [r0, #72]	@ 0x48
{
 8007a40:	4605      	mov	r5, r0
 8007a42:	460e      	mov	r6, r1
    assert(numPoints < maxPoints && "Unable to insert more points in array");
 8007a44:	429f      	cmp	r7, r3
 8007a46:	db06      	blt.n	8007a56 <_ZN13AbstractGraph18insertPointAtIndexEi+0x1e>
 8007a48:	4b12      	ldr	r3, [pc, #72]	@ (8007a94 <_ZN13AbstractGraph18insertPointAtIndexEi+0x5c>)
 8007a4a:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8007a4e:	4a12      	ldr	r2, [pc, #72]	@ (8007a98 <_ZN13AbstractGraph18insertPointAtIndexEi+0x60>)
    assert(index >= 0 && index <= numPoints && "Illegal index"); // Allow insert at first position outside array
 8007a50:	4812      	ldr	r0, [pc, #72]	@ (8007a9c <_ZN13AbstractGraph18insertPointAtIndexEi+0x64>)
 8007a52:	f018 f98f 	bl	801fd74 <__assert_func>
 8007a56:	2900      	cmp	r1, #0
 8007a58:	db01      	blt.n	8007a5e <_ZN13AbstractGraph18insertPointAtIndexEi+0x26>
 8007a5a:	428f      	cmp	r7, r1
 8007a5c:	da17      	bge.n	8007a8e <_ZN13AbstractGraph18insertPointAtIndexEi+0x56>
 8007a5e:	4b10      	ldr	r3, [pc, #64]	@ (8007aa0 <_ZN13AbstractGraph18insertPointAtIndexEi+0x68>)
 8007a60:	f240 1161 	movw	r1, #353	@ 0x161
 8007a64:	4a0c      	ldr	r2, [pc, #48]	@ (8007a98 <_ZN13AbstractGraph18insertPointAtIndexEi+0x60>)
 8007a66:	e7f3      	b.n	8007a50 <_ZN13AbstractGraph18insertPointAtIndexEi+0x18>
        points[i] = points[i - 1];
 8007a68:	6c6c      	ldr	r4, [r5, #68]	@ 0x44
 8007a6a:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    for (int i = numPoints; i > index; i--)
 8007a6e:	f10c 3cff 	add.w	ip, ip, #4294967295
        points[i] = points[i - 1];
 8007a72:	e914 000f 	ldmdb	r4, {r0, r1, r2, r3}
 8007a76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = numPoints; i > index; i--)
 8007a7a:	45b4      	cmp	ip, r6
 8007a7c:	d1f4      	bne.n	8007a68 <_ZN13AbstractGraph18insertPointAtIndexEi+0x30>
    setNumPoints(numPoints + 1);
 8007a7e:	682b      	ldr	r3, [r5, #0]
 8007a80:	1c79      	adds	r1, r7, #1
 8007a82:	4628      	mov	r0, r5
 8007a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
}
 8007a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    setNumPoints(numPoints + 1);
 8007a8c:	4718      	bx	r3
 8007a8e:	46bc      	mov	ip, r7
 8007a90:	e7f3      	b.n	8007a7a <_ZN13AbstractGraph18insertPointAtIndexEi+0x42>
 8007a92:	bf00      	nop
 8007a94:	0802426f 	.word	0x0802426f
 8007a98:	080242b0 	.word	0x080242b0
 8007a9c:	08024220 	.word	0x08024220
 8007aa0:	080242e4 	.word	0x080242e4

08007aa4 <_ZN13AbstractGraph18deletePointAtIndexEi>:
{
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(index >= 0 && index < numPoints && "Illegal index");
 8007aa6:	1e0c      	subs	r4, r1, #0
{
 8007aa8:	4606      	mov	r6, r0
    assert(index >= 0 && index < numPoints && "Illegal index");
 8007aaa:	db02      	blt.n	8007ab2 <_ZN13AbstractGraph18deletePointAtIndexEi+0xe>
 8007aac:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007aae:	42a1      	cmp	r1, r4
 8007ab0:	dc06      	bgt.n	8007ac0 <_ZN13AbstractGraph18deletePointAtIndexEi+0x1c>
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae8 <_ZN13AbstractGraph18deletePointAtIndexEi+0x44>)
 8007ab4:	f240 116b 	movw	r1, #363	@ 0x16b
 8007ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8007aec <_ZN13AbstractGraph18deletePointAtIndexEi+0x48>)
 8007aba:	480d      	ldr	r0, [pc, #52]	@ (8007af0 <_ZN13AbstractGraph18deletePointAtIndexEi+0x4c>)
 8007abc:	f018 f95a 	bl	801fd74 <__assert_func>
    setNumPoints(numPoints - 1);
 8007ac0:	6803      	ldr	r3, [r0, #0]
 8007ac2:	3901      	subs	r1, #1
 8007ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac8:	4798      	blx	r3
    for (int i = index; i < numPoints; i++)
 8007aca:	6cf7      	ldr	r7, [r6, #76]	@ 0x4c
 8007acc:	42bc      	cmp	r4, r7
 8007ace:	db00      	blt.n	8007ad2 <_ZN13AbstractGraph18deletePointAtIndexEi+0x2e>
}
 8007ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        points[i] = points[i + 1];
 8007ad2:	6c75      	ldr	r5, [r6, #68]	@ 0x44
 8007ad4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
    for (int i = index; i < numPoints; i++)
 8007ad8:	3401      	adds	r4, #1
        points[i] = points[i + 1];
 8007ada:	f105 0310 	add.w	r3, r5, #16
 8007ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ae0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (int i = index; i < numPoints; i++)
 8007ae4:	e7f2      	b.n	8007acc <_ZN13AbstractGraph18deletePointAtIndexEi+0x28>
 8007ae6:	bf00      	nop
 8007ae8:	08024318 	.word	0x08024318
 8007aec:	0802434b 	.word	0x0802434b
 8007af0:	08024220 	.word	0x08024220

08007af4 <_ZN13AbstractGraphC1Ev>:
AbstractGraph::AbstractGraph() :
 8007af4:	b510      	push	{r4, lr}
 8007af6:	4604      	mov	r4, r0
    CanvasWidget(), linkedGraph(0), left(-1), right(-1), top(-1), bottom(-1), points(0), maxPoints(0), lineWidth(0)
 8007af8:	f00e fe8a 	bl	8016810 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8007afc:	4b0a      	ldr	r3, [pc, #40]	@ (8007b28 <_ZN13AbstractGraphC1Ev+0x34>)
 8007afe:	f04f 32ff 	mov.w	r2, #4294967295
    clearGraph();
 8007b02:	4620      	mov	r0, r4
    CanvasWidget(), linkedGraph(0), left(-1), right(-1), top(-1), bottom(-1), points(0), maxPoints(0), lineWidth(0)
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	2300      	movs	r3, #0
 8007b08:	e9c4 220e 	strd	r2, r2, [r4, #56]	@ 0x38
 8007b0c:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8007b10:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 8007b14:	64a3      	str	r3, [r4, #72]	@ 0x48
        Q5() : v(0) { }
 8007b16:	6623      	str	r3, [r4, #96]	@ 0x60
 8007b18:	e9c4 3314 	strd	r3, r3, [r4, #80]	@ 0x50
 8007b1c:	e9c4 3316 	strd	r3, r3, [r4, #88]	@ 0x58
    clearGraph();
 8007b20:	f7ff fe58 	bl	80077d4 <_ZN13AbstractGraph10clearGraphEv>
}
 8007b24:	4620      	mov	r0, r4
 8007b26:	bd10      	pop	{r4, pc}
 8007b28:	080220e4 	.word	0x080220e4

08007b2c <_ZN13AbstractGraphD1Ev>:
AbstractGraph::~AbstractGraph()
 8007b2c:	4b03      	ldr	r3, [pc, #12]	@ (8007b3c <_ZN13AbstractGraphD1Ev+0x10>)
 8007b2e:	b510      	push	{r4, lr}
 8007b30:	4604      	mov	r4, r0
 8007b32:	6003      	str	r3, [r0, #0]
}
 8007b34:	f00e fe8a 	bl	801684c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8007b38:	4620      	mov	r0, r4
 8007b3a:	bd10      	pop	{r4, pc}
 8007b3c:	080220e4 	.word	0x080220e4

08007b40 <_ZNK13AbstractGraph7widgetXEi>:
{
 8007b40:	4602      	mov	r2, r0
            return v;
 8007b42:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
    if (graphWidth == 0)
 8007b44:	b130      	cbz	r0, 8007b54 <_ZNK13AbstractGraph7widgetXEi+0x14>
    return CWRUtil::toQ5(x - left) * widgetWidth / graphWidth;
 8007b46:	6b53      	ldr	r3, [r2, #52]	@ 0x34
            return Q10(v * q5.v);
 8007b48:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007b4a:	1acb      	subs	r3, r1, r3
 8007b4c:	4353      	muls	r3, r2
 8007b4e:	015b      	lsls	r3, r3, #5
            return Q5(v / int(q5));
 8007b50:	fb93 f0f0 	sdiv	r0, r3, r0
}
 8007b54:	4770      	bx	lr

08007b56 <_ZNK13AbstractGraph7widgetYEi>:
{
 8007b56:	4602      	mov	r2, r0
            return v;
 8007b58:	6e00      	ldr	r0, [r0, #96]	@ 0x60
    if (graphHeight == 0)
 8007b5a:	b130      	cbz	r0, 8007b6a <_ZNK13AbstractGraph7widgetYEi+0x14>
    return CWRUtil::toQ5(y - top) * widgetHeight / graphHeight;
 8007b5c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
            return Q10(v * q5.v);
 8007b5e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007b60:	1acb      	subs	r3, r1, r3
 8007b62:	4353      	muls	r3, r2
 8007b64:	015b      	lsls	r3, r3, #5
            return Q5(v / int(q5));
 8007b66:	fb93 f0f0 	sdiv	r0, r3, r0
}
 8007b6a:	4770      	bx	lr

08007b6c <_ZNK13AbstractGraph12widgetXindexEi>:
    return widgetX(points[index].x);
 8007b6c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007b6e:	0109      	lsls	r1, r1, #4
 8007b70:	5859      	ldr	r1, [r3, r1]
 8007b72:	f7ff bfe5 	b.w	8007b40 <_ZNK13AbstractGraph7widgetXEi>

08007b76 <_ZNK13AbstractGraph14xAboveIncomingEi>:
    }
    CWRUtil::Q5 yBelowOutgoing(int index) const
    {
        return widgetYindex(index) + points[index].dx;
    }
    CWRUtil::Q5 xAboveIncoming(int index) const
 8007b76:	b538      	push	{r3, r4, r5, lr}
 8007b78:	4605      	mov	r5, r0
 8007b7a:	460c      	mov	r4, r1
    {
        return widgetXindex(index) + points[index - 1].dy;
 8007b7c:	f7ff fff6 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v + q5.v);
 8007b80:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8007b82:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8007b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
    }
 8007b8a:	4418      	add	r0, r3
 8007b8c:	bd38      	pop	{r3, r4, r5, pc}

08007b8e <_ZNK13AbstractGraph14xAboveOutgoingEi>:
    CWRUtil::Q5 xAboveOutgoing(int index) const
 8007b8e:	b538      	push	{r3, r4, r5, lr}
 8007b90:	4605      	mov	r5, r0
 8007b92:	460c      	mov	r4, r1
        return widgetXindex(index) + points[index].dy;
 8007b94:	f7ff ffea 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 8007b98:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8007b9a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8007b9e:	68cb      	ldr	r3, [r1, #12]
    }
 8007ba0:	4418      	add	r0, r3
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}

08007ba4 <_ZNK13AbstractGraph14xBelowIncomingEi>:
    CWRUtil::Q5 yAboveIncoming(int index) const
    {
        return widgetYindex(index) - points[index - 1].dx;
    }
    CWRUtil::Q5 xBelowIncoming(int index) const
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	460c      	mov	r4, r1
    {
        return widgetXindex(index) - points[index - 1].dy;
 8007baa:	f7ff ffdf 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v - q5.v);
 8007bae:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8007bb0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8007bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    }
 8007bb8:	1ac0      	subs	r0, r0, r3
 8007bba:	bd38      	pop	{r3, r4, r5, pc}

08007bbc <_ZNK13AbstractGraph14xBelowOutgoingEi>:
    CWRUtil::Q5 xBelowOutgoing(int index) const
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	460c      	mov	r4, r1
        return widgetXindex(index) - points[index].dy;
 8007bc2:	f7ff ffd3 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 8007bc6:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8007bc8:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8007bcc:	68cb      	ldr	r3, [r1, #12]
    }
 8007bce:	1ac0      	subs	r0, r0, r3
 8007bd0:	bd38      	pop	{r3, r4, r5, pc}

08007bd2 <_ZNK13AbstractGraph12widgetYindexEi>:
    return widgetY(points[index].y);
 8007bd2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007bd4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007bd8:	6859      	ldr	r1, [r3, #4]
 8007bda:	f7ff bfbc 	b.w	8007b56 <_ZNK13AbstractGraph7widgetYEi>

08007bde <_ZNK13AbstractGraph14yAboveOutgoingEi>:
    CWRUtil::Q5 yAboveOutgoing(int index) const
 8007bde:	b538      	push	{r3, r4, r5, lr}
 8007be0:	4605      	mov	r5, r0
 8007be2:	460c      	mov	r4, r1
        return widgetYindex(index) - points[index].dx;
 8007be4:	f7ff fff5 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
 8007be8:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8007bea:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8007bee:	688b      	ldr	r3, [r1, #8]
    }
 8007bf0:	1ac0      	subs	r0, r0, r3
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}

08007bf4 <_ZNK13AbstractGraph14yAboveIncomingEi>:
    CWRUtil::Q5 yAboveIncoming(int index) const
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	460c      	mov	r4, r1
        return widgetYindex(index) - points[index - 1].dx;
 8007bfa:	f7ff ffea 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
 8007bfe:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8007c00:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8007c04:	f851 3c08 	ldr.w	r3, [r1, #-8]
    }
 8007c08:	1ac0      	subs	r0, r0, r3
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}

08007c0c <_ZNK13AbstractGraph14yBelowIncomingEi>:
    CWRUtil::Q5 yBelowIncoming(int index) const
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4605      	mov	r5, r0
 8007c10:	460c      	mov	r4, r1
    {
        return widgetYindex(index) + points[index - 1].dx;
 8007c12:	f7ff ffde 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v + q5.v);
 8007c16:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8007c18:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8007c1c:	f851 3c08 	ldr.w	r3, [r1, #-8]
    }
 8007c20:	4418      	add	r0, r3
 8007c22:	bd38      	pop	{r3, r4, r5, pc}

08007c24 <_ZNK13AbstractGraph14yBelowOutgoingEi>:
    CWRUtil::Q5 yBelowOutgoing(int index) const
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4605      	mov	r5, r0
 8007c28:	460c      	mov	r4, r1
        return widgetYindex(index) + points[index].dx;
 8007c2a:	f7ff ffd2 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
 8007c2e:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8007c30:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8007c34:	688b      	ldr	r3, [r1, #8]
    }
 8007c36:	4418      	add	r0, r3
 8007c38:	bd38      	pop	{r3, r4, r5, pc}

08007c3a <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii>:
    if (lastIndex >= numPoints)
 8007c3a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8007c3c:	4293      	cmp	r3, r2
{
 8007c3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c42:	4616      	mov	r6, r2
    if (firstIndex < 0)
 8007c44:	ea21 77e1 	bic.w	r7, r1, r1, asr #31
        lastIndex = numPoints - 1;
 8007c48:	bfd8      	it	le
 8007c4a:	f103 36ff 	addle.w	r6, r3, #4294967295
{
 8007c4e:	4604      	mov	r4, r0
    if (firstIndex > lastIndex)
 8007c50:	42be      	cmp	r6, r7
 8007c52:	db62      	blt.n	8007d1a <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii+0xe0>
    if (getWidth() == 0 || getHeight() == 0 || left == right || top == bottom)
 8007c54:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d05e      	beq.n	8007d1a <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii+0xe0>
 8007c5c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d05a      	beq.n	8007d1a <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii+0xe0>
 8007c64:	e9d0 230d 	ldrd	r2, r3, [r0, #52]	@ 0x34
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d056      	beq.n	8007d1a <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii+0xe0>
 8007c6c:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	@ 0x3c
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d052      	beq.n	8007d1a <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii+0xe0>
 8007c74:	46b9      	mov	r9, r7
    for (int index = firstIndex; index < lastIndex; index++)
 8007c76:	454e      	cmp	r6, r9
 8007c78:	d108      	bne.n	8007c8c <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii+0x52>
    invalidateRectContainingIndices(firstIndex, lastIndex);
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	4620      	mov	r0, r4
 8007c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8007c86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    invalidateRectContainingIndices(firstIndex, lastIndex);
 8007c8a:	4718      	bx	r3
        CWRUtil::Q5 dy = (widgetYindex(index + 1) - widgetYindex(index));
 8007c8c:	f109 0801 	add.w	r8, r9, #1
 8007c90:	4620      	mov	r0, r4
 8007c92:	4641      	mov	r1, r8
 8007c94:	f7ff ff9d 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
 8007c98:	4605      	mov	r5, r0
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f7ff ff98 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
        CWRUtil::Q5 dx = (widgetXindex(index + 1) - widgetXindex(index));
 8007ca2:	4641      	mov	r1, r8
            return Q5(v - q5.v);
 8007ca4:	1a2d      	subs	r5, r5, r0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f7ff ff60 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 8007cac:	4682      	mov	sl, r0
 8007cae:	4649      	mov	r1, r9
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f7ff ff5b 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q10(v * q5.v);
 8007cb6:	fb05 f205 	mul.w	r2, r5, r5
            return Q5(v - q5.v);
 8007cba:	ebaa 0300 	sub.w	r3, sl, r0
        bit = (n >= 0x10000) ? 1 << 30 : 1 << 14;
 8007cbe:	2000      	movs	r0, #0
            return Q10(v + q10.v);
 8007cc0:	fb03 2203 	mla	r2, r3, r3, r2
        bit = (n >= 0x10000) ? 1 << 30 : 1 << 14;
 8007cc4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007cc8:	bfac      	ite	ge
 8007cca:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
 8007cce:	f44f 4180 	movlt.w	r1, #16384	@ 0x4000
            trial = root + bit;
 8007cd2:	eb00 0c01 	add.w	ip, r0, r1
            if (n >= trial)
 8007cd6:	4594      	cmp	ip, r2
                root = trial + bit;
 8007cd8:	bf9c      	itt	ls
 8007cda:	eb01 000c 	addls.w	r0, r1, ip
                n -= trial;
 8007cde:	eba2 020c 	subls.w	r2, r2, ip
        while (bit);
 8007ce2:	0889      	lsrs	r1, r1, #2
            root >>= 1;
 8007ce4:	ea4f 0050 	mov.w	r0, r0, lsr #1
        while (bit);
 8007ce8:	d1f3      	bne.n	8007cd2 <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii+0x98>
        if (d != 0) // Should not happen, but if range is zero high/wide it does
 8007cea:	b1a0      	cbz	r0, 8007d16 <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii+0xdc>
            points[index].dy = (lineWidth * dy / d) / 2;
 8007cec:	ea4f 1108 	mov.w	r1, r8, lsl #4
 8007cf0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007cf2:	3910      	subs	r1, #16
 8007cf4:	440a      	add	r2, r1
            return Q10(v * q5.v);
 8007cf6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007cf8:	434d      	muls	r5, r1
            return Q5(v / int(q5));
 8007cfa:	fb95 f5f0 	sdiv	r5, r5, r0
            return Q5(v / i);
 8007cfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d02:	106d      	asrs	r5, r5, #1
 8007d04:	60d5      	str	r5, [r2, #12]
            return Q10(v * q5.v);
 8007d06:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007d08:	434b      	muls	r3, r1
            return Q5(v / int(q5));
 8007d0a:	fb93 f3f0 	sdiv	r3, r3, r0
            return Q5(v / i);
 8007d0e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007d12:	105b      	asrs	r3, r3, #1
            points[index].dx = (lineWidth * dx / d) / 2;
 8007d14:	6093      	str	r3, [r2, #8]
        bit = (n >= 0x10000) ? 1 << 30 : 1 << 14;
 8007d16:	46c1      	mov	r9, r8
 8007d18:	e7ad      	b.n	8007c76 <_ZN13AbstractGraph46updateAndInvalidateCacheForLinesBetweenIndecesEii+0x3c>
}
 8007d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d1e <_ZN13AbstractGraph9setBufferEPNS_10GraphPointEi>:
    numPoints = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	64c3      	str	r3, [r0, #76]	@ 0x4c
    maxPoints = numPointsInBuffer;
 8007d22:	e9c0 1211 	strd	r1, r2, [r0, #68]	@ 0x44
    if (linkedGraph)
 8007d26:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d1f9      	bne.n	8007d20 <_ZN13AbstractGraph9setBufferEPNS_10GraphPointEi+0x2>
}
 8007d2c:	4770      	bx	lr

08007d2e <_ZN13AbstractGraph14setLinkedGraphERS_>:
    if (linkedGraph == &other)
 8007d2e:	4603      	mov	r3, r0
 8007d30:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007d32:	4288      	cmp	r0, r1
 8007d34:	d002      	beq.n	8007d3c <_ZN13AbstractGraph14setLinkedGraphERS_+0xe>
    if (linkedGraph != 0)
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d1f9      	bne.n	8007d2e <_ZN13AbstractGraph14setLinkedGraphERS_>
        linkedGraph = &other;
 8007d3a:	6319      	str	r1, [r3, #48]	@ 0x30
}
 8007d3c:	4770      	bx	lr

08007d3e <_ZN13AbstractGraph11assignRangeEiiii>:
{
 8007d3e:	b570      	push	{r4, r5, r6, lr}
 8007d40:	9e04      	ldr	r6, [sp, #16]
    graphWidth = CWRUtil::toQ5(newRight - newLeft);
 8007d42:	1a55      	subs	r5, r2, r1
    graphHeight = CWRUtil::toQ5(newBottom - newTop);
 8007d44:	1af4      	subs	r4, r6, r3
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8007d46:	016d      	lsls	r5, r5, #5
 8007d48:	0164      	lsls	r4, r4, #5
    right = newRight;
 8007d4a:	e9c0 120d 	strd	r1, r2, [r0, #52]	@ 0x34
    bottom = newBottom;
 8007d4e:	e9c0 360f 	strd	r3, r6, [r0, #60]	@ 0x3c
    graphHeight = CWRUtil::toQ5(newBottom - newTop);
 8007d52:	e9c0 5417 	strd	r5, r4, [r0, #92]	@ 0x5c
    if (linkedGraph)
 8007d56:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d1f6      	bne.n	8007d4a <_ZN13AbstractGraph11assignRangeEiiii+0xc>
}
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}

08007d5e <_ZN13AbstractGraph8setRangeEiiii>:
{
 8007d5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d60:	4604      	mov	r4, r0
 8007d62:	9806      	ldr	r0, [sp, #24]
    if (left != newLleft || right != newRight || top != newTop || bottom != newBottom)
 8007d64:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8007d66:	428d      	cmp	r5, r1
 8007d68:	d108      	bne.n	8007d7c <_ZN13AbstractGraph8setRangeEiiii+0x1e>
 8007d6a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007d6c:	4295      	cmp	r5, r2
 8007d6e:	d105      	bne.n	8007d7c <_ZN13AbstractGraph8setRangeEiiii+0x1e>
 8007d70:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8007d72:	429d      	cmp	r5, r3
 8007d74:	d102      	bne.n	8007d7c <_ZN13AbstractGraph8setRangeEiiii+0x1e>
 8007d76:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8007d78:	4285      	cmp	r5, r0
 8007d7a:	d010      	beq.n	8007d9e <_ZN13AbstractGraph8setRangeEiiii+0x40>
        assignRange(newLleft, newRight, newTop, newBottom);
 8007d7c:	9000      	str	r0, [sp, #0]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f7ff ffdd 	bl	8007d3e <_ZN13AbstractGraph11assignRangeEiiii>
        if (numPoints > 0)
 8007d84:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	dd09      	ble.n	8007d9e <_ZN13AbstractGraph8setRangeEiiii+0x40>
            updateAndInvalidateCacheForLinesBetweenIndeces(0, numPoints - 1);
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	3a01      	subs	r2, #1
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4620      	mov	r0, r4
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007d96:	b003      	add	sp, #12
 8007d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            updateAndInvalidateCacheForLinesBetweenIndeces(0, numPoints - 1);
 8007d9c:	4718      	bx	r3
}
 8007d9e:	b003      	add	sp, #12
 8007da0:	bd30      	pop	{r4, r5, pc}

08007da2 <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE>:
{
 8007da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (numPoints < 2)
 8007da6:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
{
 8007da8:	b0af      	sub	sp, #188	@ 0xbc
 8007daa:	4604      	mov	r4, r0
 8007dac:	4689      	mov	r9, r1
    if (numPoints < 2)
 8007dae:	2e01      	cmp	r6, #1
 8007db0:	dc04      	bgt.n	8007dbc <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x1a>
        return true;
 8007db2:	2401      	movs	r4, #1
}
 8007db4:	4620      	mov	r0, r4
 8007db6:	b02f      	add	sp, #188	@ 0xbc
 8007db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int lastIndex = numPoints - 1;
 8007dbc:	3e01      	subs	r6, #1
    int firstIndex = 0;
 8007dbe:	2500      	movs	r5, #0
 8007dc0:	46a8      	mov	r8, r5
            invalidatedArea.x > (widgetXindex(firstIndex + 1) + lineWidth / 2).to<int>())
 8007dc2:	3501      	adds	r5, #1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f9b9 7000 	ldrsh.w	r7, [r9]
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7ff fece 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 8007dd0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007dd2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8007dd6:	eb10 0063 	adds.w	r0, r0, r3, asr #1
            return Q5(v / i);
 8007dda:	ea4f 0a63 	mov.w	sl, r3, asr #1
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8007dde:	bf48      	it	mi
 8007de0:	301f      	addmi	r0, #31
    while (firstIndex < lastIndex &&
 8007de2:	ebb7 1f60 	cmp.w	r7, r0, asr #5
 8007de6:	dd18      	ble.n	8007e1a <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x78>
 8007de8:	42b5      	cmp	r5, r6
 8007dea:	dbe9      	blt.n	8007dc0 <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x1e>
    while (lastIndex > firstIndex &&
 8007dec:	42ae      	cmp	r6, r5
 8007dee:	dde0      	ble.n	8007db2 <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x10>
            invalidatedArea.right() < (widgetXindex(lastIndex - 1) - lineWidth / 2).to<int>())
 8007df0:	f106 38ff 	add.w	r8, r6, #4294967295
        return x + width;
 8007df4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	44bb      	add	fp, r7
 8007dfe:	f7ff feb5 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 8007e02:	ebb0 000a 	subs.w	r0, r0, sl
 8007e06:	fa0f fb8b 	sxth.w	fp, fp
 8007e0a:	bf48      	it	mi
 8007e0c:	301f      	addmi	r0, #31
    while (lastIndex > firstIndex &&
 8007e0e:	ebbb 1f60 	cmp.w	fp, r0, asr #5
 8007e12:	f280 8095 	bge.w	8007f40 <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x19e>
        lastIndex--;
 8007e16:	4646      	mov	r6, r8
 8007e18:	e7e8      	b.n	8007dec <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x4a>
 8007e1a:	4645      	mov	r5, r8
 8007e1c:	e7e6      	b.n	8007dec <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x4a>
            canvas.lineTo(xAboveOutgoing(index), yAboveOutgoing(index));
 8007e1e:	4639      	mov	r1, r7
 8007e20:	4620      	mov	r0, r4
 8007e22:	f7ff feb4 	bl	8007b8e <_ZNK13AbstractGraph14xAboveOutgoingEi>
 8007e26:	4681      	mov	r9, r0
 8007e28:	4639      	mov	r1, r7
 8007e2a:	4620      	mov	r0, r4
            canvas.lineTo(xAboveIncoming(index + 1), yAboveIncoming(index + 1));
 8007e2c:	3701      	adds	r7, #1
            canvas.lineTo(xAboveOutgoing(index), yAboveOutgoing(index));
 8007e2e:	f7ff fed6 	bl	8007bde <_ZNK13AbstractGraph14yAboveOutgoingEi>
 8007e32:	4649      	mov	r1, r9
 8007e34:	4602      	mov	r2, r0
 8007e36:	4668      	mov	r0, sp
 8007e38:	f00d fbe2 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
            canvas.lineTo(xAboveIncoming(index + 1), yAboveIncoming(index + 1));
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7ff fe99 	bl	8007b76 <_ZNK13AbstractGraph14xAboveIncomingEi>
 8007e44:	4681      	mov	r9, r0
 8007e46:	4639      	mov	r1, r7
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f7ff fed3 	bl	8007bf4 <_ZNK13AbstractGraph14yAboveIncomingEi>
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4602      	mov	r2, r0
 8007e52:	4668      	mov	r0, sp
 8007e54:	f00d fbd4 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
        for (int index = firstIndex + 1; index < lastIndex; index++)
 8007e58:	42be      	cmp	r6, r7
 8007e5a:	d1e0      	bne.n	8007e1e <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x7c>
        if (lineWidth == 0)
 8007e5c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d14b      	bne.n	8007efa <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x158>
            CWRUtil::Q5 xBelow = xBelowIncoming(lastIndex);
 8007e62:	4631      	mov	r1, r6
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7ff fe9d 	bl	8007ba4 <_ZNK13AbstractGraph14xBelowIncomingEi>
 8007e6a:	4607      	mov	r7, r0
            if (xBelow > xAboveIncoming(lastIndex))
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7ff fe81 	bl	8007b76 <_ZNK13AbstractGraph14xAboveIncomingEi>
 8007e74:	4287      	cmp	r7, r0
 8007e76:	dd08      	ble.n	8007e8a <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0xe8>
                canvas.lineTo(xBelow, yBelowIncoming(lastIndex));
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f7ff fec6 	bl	8007c0c <_ZNK13AbstractGraph14yBelowIncomingEi>
 8007e80:	4639      	mov	r1, r7
 8007e82:	4602      	mov	r2, r0
 8007e84:	4668      	mov	r0, sp
 8007e86:	f00d fbbb 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
            canvas.lineTo(xAboveIncoming(lastIndex), widgetY(bottom));
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f7ff fe72 	bl	8007b76 <_ZNK13AbstractGraph14xAboveIncomingEi>
 8007e92:	4606      	mov	r6, r0
 8007e94:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8007e96:	4620      	mov	r0, r4
 8007e98:	f7ff fe5d 	bl	8007b56 <_ZNK13AbstractGraph7widgetYEi>
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	4668      	mov	r0, sp
 8007ea2:	f00d fbad 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
            canvas.lineTo(xAboveOutgoing(firstIndex), widgetY(bottom));
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f7ff fe70 	bl	8007b8e <_ZNK13AbstractGraph14xAboveOutgoingEi>
 8007eae:	4606      	mov	r6, r0
 8007eb0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f7ff fe4f 	bl	8007b56 <_ZNK13AbstractGraph7widgetYEi>
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4602      	mov	r2, r0
 8007ebc:	4668      	mov	r0, sp
 8007ebe:	f00d fb9f 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
            xBelow = xBelowOutgoing(firstIndex);
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7ff fe79 	bl	8007bbc <_ZNK13AbstractGraph14xBelowOutgoingEi>
 8007eca:	4607      	mov	r7, r0
            if (xBelow < xAboveOutgoing(firstIndex))
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f7ff fe5d 	bl	8007b8e <_ZNK13AbstractGraph14xAboveOutgoingEi>
 8007ed4:	4287      	cmp	r7, r0
 8007ed6:	da08      	bge.n	8007eea <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x148>
                canvas.lineTo(xBelow, yBelowOutgoing(firstIndex));
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7ff fea2 	bl	8007c24 <_ZNK13AbstractGraph14yBelowOutgoingEi>
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	4668      	mov	r0, sp
 8007ee6:	f00d fb8b 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
        return canvas.render();
 8007eea:	4668      	mov	r0, sp
 8007eec:	f00d fd0a 	bl	8015904 <_ZN8touchgfx6Canvas6renderEv>
 8007ef0:	4604      	mov	r4, r0
    }
 8007ef2:	4668      	mov	r0, sp
 8007ef4:	f00d fd46 	bl	8015984 <_ZN8touchgfx6CanvasD1Ev>
 8007ef8:	e75c      	b.n	8007db4 <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x12>
            for (int index = lastIndex - 1; index >= firstIndex; index--)
 8007efa:	4646      	mov	r6, r8
 8007efc:	42ae      	cmp	r6, r5
 8007efe:	dbf4      	blt.n	8007eea <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x148>
                canvas.lineTo(xBelowIncoming(index + 1), yBelowIncoming(index + 1));
 8007f00:	f106 0801 	add.w	r8, r6, #1
 8007f04:	4620      	mov	r0, r4
 8007f06:	4641      	mov	r1, r8
 8007f08:	f7ff fe4c 	bl	8007ba4 <_ZNK13AbstractGraph14xBelowIncomingEi>
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	4641      	mov	r1, r8
 8007f10:	4620      	mov	r0, r4
 8007f12:	f7ff fe7b 	bl	8007c0c <_ZNK13AbstractGraph14yBelowIncomingEi>
 8007f16:	4639      	mov	r1, r7
 8007f18:	4602      	mov	r2, r0
 8007f1a:	4668      	mov	r0, sp
 8007f1c:	f00d fb70 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
                canvas.lineTo(xBelowOutgoing(index), yBelowOutgoing(index));
 8007f20:	4631      	mov	r1, r6
 8007f22:	4620      	mov	r0, r4
 8007f24:	f7ff fe4a 	bl	8007bbc <_ZNK13AbstractGraph14xBelowOutgoingEi>
 8007f28:	4607      	mov	r7, r0
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f7ff fe79 	bl	8007c24 <_ZNK13AbstractGraph14yBelowOutgoingEi>
 8007f32:	4639      	mov	r1, r7
 8007f34:	4602      	mov	r2, r0
 8007f36:	4668      	mov	r0, sp
            for (int index = lastIndex - 1; index >= firstIndex; index--)
 8007f38:	3e01      	subs	r6, #1
                canvas.lineTo(xBelowOutgoing(index), yBelowOutgoing(index));
 8007f3a:	f00d fb61 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
            for (int index = lastIndex - 1; index >= firstIndex; index--)
 8007f3e:	e7dd      	b.n	8007efc <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x15a>
        Canvas canvas(this, invalidatedArea);
 8007f40:	464a      	mov	r2, r9
 8007f42:	4621      	mov	r1, r4
 8007f44:	4668      	mov	r0, sp
 8007f46:	f00d fa27 	bl	8015398 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
        canvas.moveTo(xAboveOutgoing(firstIndex), yAboveOutgoing(firstIndex));
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f7ff fe1e 	bl	8007b8e <_ZNK13AbstractGraph14xAboveOutgoingEi>
 8007f52:	4607      	mov	r7, r0
 8007f54:	4629      	mov	r1, r5
 8007f56:	4620      	mov	r0, r4
 8007f58:	f7ff fe41 	bl	8007bde <_ZNK13AbstractGraph14yAboveOutgoingEi>
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4668      	mov	r0, sp
        canvas.lineTo(xAboveIncoming(firstIndex + 1), yAboveIncoming(firstIndex + 1));
 8007f62:	1c6f      	adds	r7, r5, #1
        canvas.moveTo(xAboveOutgoing(firstIndex), yAboveOutgoing(firstIndex));
 8007f64:	f00d fbc7 	bl	80156f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
        canvas.lineTo(xAboveIncoming(firstIndex + 1), yAboveIncoming(firstIndex + 1));
 8007f68:	e768      	b.n	8007e3c <_ZNK13AbstractGraph16drawCanvasWidgetERKN8touchgfx4RectE+0x9a>
	...

08007f6c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
 8007f6c:	4b03      	ldr	r3, [pc, #12]	@ (8007f7c <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x10>)
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	4604      	mov	r4, r0
 8007f72:	6003      	str	r3, [r0, #0]
 8007f74:	f00e fb86 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bd10      	pop	{r4, pc}
 8007f7c:	08025ad0 	.word	0x08025ad0

08007f80 <_ZN5GraphD1Ev>:
{
public:
    static const int NUMBER_OF_POINTS = 17;

    Graph();
    virtual ~Graph() { }
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4b1a      	ldr	r3, [pc, #104]	@ (8007fec <_ZN5GraphD1Ev+0x6c>)
 8007f84:	4604      	mov	r4, r0
 *        The PainterRGB565 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB565 : public AbstractPainterRGB565
 8007f86:	4d1a      	ldr	r5, [pc, #104]	@ (8007ff0 <_ZN5GraphD1Ev+0x70>)
 8007f88:	6003      	str	r3, [r0, #0]
 *        PainterVerticalAlpha will paint using the given color at y coordinate 0 fading
 *        the color to invisible at the given y coordinate.
 *
 * @see AbstractPainter
 */
class PainterVerticalAlpha :
 8007f8a:	f500 704f 	add.w	r0, r0, #828	@ 0x33c
 8007f8e:	4b19      	ldr	r3, [pc, #100]	@ (8007ff4 <_ZN5GraphD1Ev+0x74>)
 8007f90:	6003      	str	r3, [r0, #0]
 8007f92:	f7ff ffeb 	bl	8007f6c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8007f96:	f8c4 531c 	str.w	r5, [r4, #796]	@ 0x31c
 8007f9a:	f504 7047 	add.w	r0, r4, #796	@ 0x31c
 8007f9e:	f7ff ffe5 	bl	8007f6c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8007fa2:	f8c4 52fc 	str.w	r5, [r4, #764]	@ 0x2fc
 8007fa6:	f504 703f 	add.w	r0, r4, #764	@ 0x2fc
 8007faa:	f7ff ffdf 	bl	8007f6c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8007fae:	f8c4 52dc 	str.w	r5, [r4, #732]	@ 0x2dc
 *        points with different x values. Points on the graph can be added and removed and the
 *        coordinate system of the graph can easily be setup.
 *
 * @see CanvasWidget
 */
class GraphDots : public AbstractGraph
 8007fb2:	4d11      	ldr	r5, [pc, #68]	@ (8007ff8 <_ZN5GraphD1Ev+0x78>)
 8007fb4:	f504 7037 	add.w	r0, r4, #732	@ 0x2dc
 8007fb8:	f7ff ffd8 	bl	8007f6c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8007fbc:	f504 70b0 	add.w	r0, r4, #352	@ 0x160
 8007fc0:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
 8007fc4:	f7ff fdb2 	bl	8007b2c <_ZN13AbstractGraphD1Ev>
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f840 5ff4 	str.w	r5, [r0, #244]!
 8007fce:	f7ff fdad 	bl	8007b2c <_ZN13AbstractGraphD1Ev>
 8007fd2:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8007fd6:	f000 f9ad 	bl	8008334 <_ZN10GraphBelowD1Ev>
 8007fda:	4620      	mov	r0, r4
 8007fdc:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <_ZN5GraphD1Ev+0x7c>)
 8007fde:	f840 3f2c 	str.w	r3, [r0, #44]!
 8007fe2:	f7ff fda3 	bl	8007b2c <_ZN13AbstractGraphD1Ev>
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}
 8007fea:	bf00      	nop
 8007fec:	08024388 	.word	0x08024388
 8007ff0:	080258e4 	.word	0x080258e4
 8007ff4:	080224e4 	.word	0x080224e4
 8007ff8:	08022254 	.word	0x08022254
 8007ffc:	0802230c 	.word	0x0802230c

08008000 <_ZN5GraphD0Ev>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4604      	mov	r4, r0
 8008004:	f7ff ffbc 	bl	8007f80 <_ZN5GraphD1Ev>
 8008008:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 800800c:	4620      	mov	r0, r4
 800800e:	f016 fd8a 	bl	801eb26 <_ZdlPvj>
 8008012:	4620      	mov	r0, r4
 8008014:	bd10      	pop	{r4, pc}

08008016 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 8008016:	b510      	push	{r4, lr}
 8008018:	4604      	mov	r4, r0
 800801a:	f7ff ffa7 	bl	8007f6c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800801e:	2114      	movs	r1, #20
 8008020:	4620      	mov	r0, r4
 8008022:	f016 fd80 	bl	801eb26 <_ZdlPvj>
 8008026:	4620      	mov	r0, r4
 8008028:	bd10      	pop	{r4, pc}
	...

0800802c <_ZN5GraphC1Ev>:
#include <gui/graph_screen/Graph.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <math.h>

Graph::Graph() :
 800802c:	b538      	push	{r3, r4, r5, lr}
        touchable(false),
 800802e:	f44f 7380 	mov.w	r3, #256	@ 0x100
        this->x = x;
 8008032:	2500      	movs	r5, #0
 8008034:	4604      	mov	r4, r0
 8008036:	8483      	strh	r3, [r0, #36]	@ 0x24
    myAlpha(255)
 8008038:	4b20      	ldr	r3, [pc, #128]	@ (80080bc <_ZN5GraphC1Ev+0x90>)
        nextDrawChainElement(0),
 800803a:	61c5      	str	r5, [r0, #28]
 800803c:	6285      	str	r5, [r0, #40]	@ 0x28
        this->width = width;
 800803e:	e9c0 5501 	strd	r5, r5, [r0, #4]
        this->width = 0;
 8008042:	e9c0 5503 	strd	r5, r5, [r0, #12]
        nextSibling(0),
 8008046:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800804a:	f840 3b2c 	str.w	r3, [r0], #44
 800804e:	f7ff fd51 	bl	8007af4 <_ZN13AbstractGraphC1Ev>
 8008052:	4b1b      	ldr	r3, [pc, #108]	@ (80080c0 <_ZN5GraphC1Ev+0x94>)
 8008054:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8008058:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800805a:	f7ff fd4b 	bl	8007af4 <_ZN13AbstractGraphC1Ev>
*        points with different x values. Points on the graph can be added and removed and the
*        coordinate system of the graph can easily be setup.
*
* @see CanvasWidget
*/
class GraphBelow : public GraphLine
 800805e:	4b19      	ldr	r3, [pc, #100]	@ (80080c4 <_ZN5GraphC1Ev+0x98>)
 8008060:	f104 00f4 	add.w	r0, r4, #244	@ 0xf4
 8008064:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8008068:	f000 fab6 	bl	80085d8 <_ZN9GraphDotsC1Ev>
 800806c:	f504 70b0 	add.w	r0, r4, #352	@ 0x160
 8008070:	f000 fab2 	bl	80085d8 <_ZN9GraphDotsC1Ev>
 8008074:	f504 70e6 	add.w	r0, r4, #460	@ 0x1cc
 8008078:	f504 7337 	add.w	r3, r4, #732	@ 0x2dc
        Q5() : v(0) { }
 800807c:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8008080:	3010      	adds	r0, #16
 8008082:	4298      	cmp	r0, r3
 8008084:	d1fa      	bne.n	800807c <_ZN5GraphC1Ev+0x50>
 8008086:	22ff      	movs	r2, #255	@ 0xff
 8008088:	2100      	movs	r1, #0
 800808a:	f00d f907 	bl	801529c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 800808e:	22ff      	movs	r2, #255	@ 0xff
 8008090:	2100      	movs	r1, #0
 8008092:	f504 703f 	add.w	r0, r4, #764	@ 0x2fc
 8008096:	f00d f901 	bl	801529c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 800809a:	22ff      	movs	r2, #255	@ 0xff
 800809c:	2100      	movs	r1, #0
 800809e:	f504 7047 	add.w	r0, r4, #796	@ 0x31c
 80080a2:	f00d f8fb 	bl	801529c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 80080a6:	2264      	movs	r2, #100	@ 0x64
 80080a8:	2100      	movs	r1, #0
 80080aa:	f504 704f 	add.w	r0, r4, #828	@ 0x33c
 80080ae:	f002 fd9b 	bl	800abe8 <_ZN20PainterVerticalAlphaC1EN8touchgfx9colortypeEi>
 80080b2:	23ff      	movs	r3, #255	@ 0xff
{

}
 80080b4:	4620      	mov	r0, r4
    myAlpha(255)
 80080b6:	f884 3358 	strb.w	r3, [r4, #856]	@ 0x358
}
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	08024388 	.word	0x08024388
 80080c0:	0802230c 	.word	0x0802230c
 80080c4:	0802219c 	.word	0x0802219c

080080c8 <_ZN5Graph14setLineVisibleEb>:
        visible = vis;
 80080c8:	f880 1051 	strb.w	r1, [r0, #81]	@ 0x51
}

void Graph::setLineVisible(bool lineVisible)
{
    graphLine.setVisible(lineVisible);
}
 80080cc:	4770      	bx	lr

080080ce <_ZN5Graph14setDotsVisibleEb>:
 80080ce:	f880 1119 	strb.w	r1, [r0, #281]	@ 0x119

void Graph::setDotsVisible(bool dotsVisible)
{
    graphDots.setVisible(dotsVisible);
}
 80080d2:	4770      	bx	lr

080080d4 <_ZN5Graph24setDotsBackgroundVisibleEb>:
 80080d4:	f880 1185 	strb.w	r1, [r0, #389]	@ 0x185

void Graph::setDotsBackgroundVisible(bool dotsBackgroundVisible)
{
    graphDotsBackground.setVisible(dotsBackgroundVisible);
}
 80080d8:	4770      	bx	lr

080080da <_ZN5Graph14setAreaVisibleEb>:
 80080da:	f880 10b5 	strb.w	r1, [r0, #181]	@ 0xb5

void Graph::setAreaVisible(bool areaVisible)
{
    graphArea.setVisible(areaVisible);
}
 80080de:	4770      	bx	lr

080080e0 <_ZN13AbstractGraph12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 80080e0:	b410      	push	{r4}
        if (lineWidth == newLineWidth)
 80080e2:	6d04      	ldr	r4, [r0, #80]	@ 0x50
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80080e4:	014a      	lsls	r2, r1, #5
 80080e6:	ebb4 1f41 	cmp.w	r4, r1, lsl #5
 80080ea:	d00b      	beq.n	8008104 <_ZN13AbstractGraph12setLineWidthIiEEvT_+0x24>
        lineWidth = newLineWidth;
 80080ec:	6502      	str	r2, [r0, #80]	@ 0x50
        if (numPoints > 0)
 80080ee:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	dd07      	ble.n	8008104 <_ZN13AbstractGraph12setLineWidthIiEEvT_+0x24>
            updateAndInvalidateCacheForLinesBetweenIndeces(0, numPoints - 1);
 80080f4:	6803      	ldr	r3, [r0, #0]
 80080f6:	3a01      	subs	r2, #1
 80080f8:	2100      	movs	r1, #0
    }
 80080fa:	f85d 4b04 	ldr.w	r4, [sp], #4
            updateAndInvalidateCacheForLinesBetweenIndeces(0, numPoints - 1);
 80080fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008102:	4718      	bx	r3
    }
 8008104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008108:	4770      	bx	lr

0800810a <_ZN5Graph5setupEiiN8touchgfx9colortypeES1_>:
{
 800810a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810e:	461d      	mov	r5, r3
    setWidth(newWidth);
 8008110:	6803      	ldr	r3, [r0, #0]
{
 8008112:	b085      	sub	sp, #20
 8008114:	4604      	mov	r4, r0
    setWidth(newWidth);
 8008116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008118:	b209      	sxth	r1, r1
{
 800811a:	4616      	mov	r6, r2
 800811c:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
    setWidth(newWidth);
 800811e:	4798      	blx	r3
    setHeight(newHeight);
 8008120:	6823      	ldr	r3, [r4, #0]
    graphLinePainter.setColor(lineColor);
 8008122:	f504 7937 	add.w	r9, r4, #732	@ 0x2dc
    setHeight(newHeight);
 8008126:	b231      	sxth	r1, r6
 8008128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812a:	4620      	mov	r0, r4
    graphAreaPainter.setColor(lineColor, getHeight());
 800812c:	f504 7b4f 	add.w	fp, r4, #828	@ 0x33c
    setHeight(newHeight);
 8008130:	4798      	blx	r3
    graphDotsPainter.setColor(lineColor);
 8008132:	f504 7a3f 	add.w	sl, r4, #764	@ 0x2fc
    graphLinePainter.setColor(lineColor);
 8008136:	4629      	mov	r1, r5
 8008138:	4648      	mov	r0, r9
 800813a:	22ff      	movs	r2, #255	@ 0xff
 800813c:	f00d f8a0 	bl	8015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
    graphAreaPainter.setColor(lineColor, getHeight());
 8008140:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8008144:	4629      	mov	r1, r5
 8008146:	4658      	mov	r0, fp
 8008148:	f002 fce4 	bl	800ab14 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi>
    graphDotsPainter.setColor(lineColor);
 800814c:	4629      	mov	r1, r5
 800814e:	4650      	mov	r0, sl
 8008150:	22ff      	movs	r2, #255	@ 0xff
 8008152:	f00d f895 	bl	8015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
    graphDotsBackgroundPainter.setColor(backgroundColor);
 8008156:	f504 7347 	add.w	r3, r4, #796	@ 0x31c
    graphLine.setLinkedGraph(graphArea);
 800815a:	f104 052c 	add.w	r5, r4, #44	@ 0x2c
 800815e:	f104 0890 	add.w	r8, r4, #144	@ 0x90
    graphLine.setLinkedGraph(graphDots);
 8008162:	f104 06f4 	add.w	r6, r4, #244	@ 0xf4
    graphDotsBackgroundPainter.setColor(backgroundColor);
 8008166:	4618      	mov	r0, r3
 8008168:	22ff      	movs	r2, #255	@ 0xff
 800816a:	4639      	mov	r1, r7
 800816c:	9303      	str	r3, [sp, #12]
    graphLine.setLinkedGraph(graphDotsBackground);
 800816e:	f504 77b0 	add.w	r7, r4, #352	@ 0x160
    graphDotsBackgroundPainter.setColor(backgroundColor);
 8008172:	f00d f885 	bl	8015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
    graphLine.setLinkedGraph(graphArea);
 8008176:	4641      	mov	r1, r8
 8008178:	4628      	mov	r0, r5
 800817a:	f7ff fdd8 	bl	8007d2e <_ZN13AbstractGraph14setLinkedGraphERS_>
    graphLine.setLinkedGraph(graphDots);
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	f7ff fdd4 	bl	8007d2e <_ZN13AbstractGraph14setLinkedGraphERS_>
    graphLine.setLinkedGraph(graphDotsBackground);
 8008186:	4639      	mov	r1, r7
 8008188:	4628      	mov	r0, r5
 800818a:	f7ff fdd0 	bl	8007d2e <_ZN13AbstractGraph14setLinkedGraphERS_>
    graphLine.setPosition(0, 0, getWidth(), getHeight());
 800818e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8008192:	2200      	movs	r2, #0
 8008194:	4628      	mov	r0, r5
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	4611      	mov	r1, r2
 800819a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800819e:	f7f8 fe07 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    graphLine.setPainter(graphLinePainter);
 80081a2:	4649      	mov	r1, r9
 80081a4:	4628      	mov	r0, r5
    graphLine.setRange(-2, 216, 400, 0);
 80081a6:	f04f 0900 	mov.w	r9, #0
    graphLine.setPainter(graphLinePainter);
 80081aa:	f00e fa71 	bl	8016690 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    graphLine.setBuffer(graphBuffer, NUMBER_OF_POINTS);
 80081ae:	2211      	movs	r2, #17
 80081b0:	f504 71e6 	add.w	r1, r4, #460	@ 0x1cc
 80081b4:	4628      	mov	r0, r5
 80081b6:	f7ff fdb2 	bl	8007d1e <_ZN13AbstractGraph9setBufferEPNS_10GraphPointEi>
    graphLine.setLineWidth(1);
 80081ba:	4628      	mov	r0, r5
 80081bc:	2101      	movs	r1, #1
 80081be:	f7ff ff8f 	bl	80080e0 <_ZN13AbstractGraph12setLineWidthIiEEvT_>
    graphLine.setRange(-2, 216, 400, 0);
 80081c2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80081c6:	22d8      	movs	r2, #216	@ 0xd8
 80081c8:	4628      	mov	r0, r5
 80081ca:	f06f 0101 	mvn.w	r1, #1
 80081ce:	f8cd 9000 	str.w	r9, [sp]
 80081d2:	f7ff fdc4 	bl	8007d5e <_ZN13AbstractGraph8setRangeEiiii>
    graphArea.setPainter(graphAreaPainter);
 80081d6:	4659      	mov	r1, fp
 80081d8:	4640      	mov	r0, r8
 80081da:	f00e fa59 	bl	8016690 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    graphArea.setLineWidth(0);
 80081de:	4649      	mov	r1, r9
 80081e0:	4640      	mov	r0, r8
 80081e2:	f7ff ff7d 	bl	80080e0 <_ZN13AbstractGraph12setLineWidthIiEEvT_>
    graphDots.setPainter(graphDotsPainter);
 80081e6:	4651      	mov	r1, sl
 80081e8:	4630      	mov	r0, r6
 80081ea:	f00e fa51 	bl	8016690 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    graphDots.setLineWidth(7);
 80081ee:	4630      	mov	r0, r6
 80081f0:	2107      	movs	r1, #7
 80081f2:	f7ff ff75 	bl	80080e0 <_ZN13AbstractGraph12setLineWidthIiEEvT_>
    graphDots.setDotShape(0, 90);
 80081f6:	225a      	movs	r2, #90	@ 0x5a
 80081f8:	4649      	mov	r1, r9
 80081fa:	4630      	mov	r0, r6
 80081fc:	f000 f9fa 	bl	80085f4 <_ZN9GraphDots11setDotShapeEii>
    graphDotsBackground.setPainter(graphDotsBackgroundPainter);
 8008200:	9903      	ldr	r1, [sp, #12]
 8008202:	4638      	mov	r0, r7
 8008204:	f00e fa44 	bl	8016690 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    graphDotsBackground.setLineWidth(9);
 8008208:	4638      	mov	r0, r7
 800820a:	2109      	movs	r1, #9
 800820c:	f7ff ff68 	bl	80080e0 <_ZN13AbstractGraph12setLineWidthIiEEvT_>
    graphDots.setDotShape(0, 30);
 8008210:	221e      	movs	r2, #30
 8008212:	4649      	mov	r1, r9
 8008214:	4630      	mov	r0, r6
 8008216:	f000 f9ed 	bl	80085f4 <_ZN9GraphDots11setDotShapeEii>
    add(graphArea);
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	4641      	mov	r1, r8
 800821e:	4620      	mov	r0, r4
 8008220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008222:	4798      	blx	r3
    add(graphLine);
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	4629      	mov	r1, r5
 8008228:	4620      	mov	r0, r4
 800822a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800822c:	4798      	blx	r3
    add(graphDotsBackground);
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	4639      	mov	r1, r7
 8008232:	4620      	mov	r0, r4
 8008234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008236:	4798      	blx	r3
    add(graphDots);
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	4631      	mov	r1, r6
 800823c:	4620      	mov	r0, r4
 800823e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
}
 8008240:	b005      	add	sp, #20
 8008242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    add(graphDots);
 8008246:	4718      	bx	r3

08008248 <_ZN5Graph11setDotShapeEiii>:

void Graph::setDotShape(int startAngle, int angleStep, int lineWidth)
{
 8008248:	b538      	push	{r3, r4, r5, lr}
    graphDots.setDotShape(startAngle, angleStep);
 800824a:	f100 04f4 	add.w	r4, r0, #244	@ 0xf4
{
 800824e:	461d      	mov	r5, r3
    graphDots.setDotShape(startAngle, angleStep);
 8008250:	4620      	mov	r0, r4
 8008252:	f000 f9cf 	bl	80085f4 <_ZN9GraphDots11setDotShapeEii>
    graphDots.setLineWidth(lineWidth);
 8008256:	4620      	mov	r0, r4
 8008258:	4629      	mov	r1, r5
 800825a:	f7ff ff41 	bl	80080e0 <_ZN13AbstractGraph12setLineWidthIiEEvT_>
    graphDots.invalidate();
 800825e:	4620      	mov	r0, r4
}
 8008260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    graphDots.invalidate();
 8008264:	f00e ba16 	b.w	8016694 <_ZNK8touchgfx12CanvasWidget10invalidateEv>

08008268 <_ZN5Graph21setDotBackgroundShapeEiii>:

void Graph::setDotBackgroundShape(int startAngle, int angleStep, int lineWidth)
{
 8008268:	b570      	push	{r4, r5, r6, lr}
    graphDotsBackground.setDotShape(startAngle, angleStep);
 800826a:	f500 76b0 	add.w	r6, r0, #352	@ 0x160
{
 800826e:	461d      	mov	r5, r3
 8008270:	4604      	mov	r4, r0
    graphDotsBackground.setDotShape(startAngle, angleStep);
 8008272:	4630      	mov	r0, r6
 8008274:	f000 f9be 	bl	80085f4 <_ZN9GraphDots11setDotShapeEii>
    graphDotsBackground.setLineWidth(lineWidth);
 8008278:	4630      	mov	r0, r6
 800827a:	4629      	mov	r1, r5
 800827c:	f7ff ff30 	bl	80080e0 <_ZN13AbstractGraph12setLineWidthIiEEvT_>
    graphDots.invalidate();
 8008280:	f104 00f4 	add.w	r0, r4, #244	@ 0xf4
}
 8008284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    graphDots.invalidate();
 8008288:	f00e ba04 	b.w	8016694 <_ZNK8touchgfx12CanvasWidget10invalidateEv>

0800828c <_ZNK10GraphBelow31getMinimalRectContainingIndicesEii>:
    }
    return true;
}

Rect GraphBelow::getMinimalRectContainingIndices(int firstIndex, int lastIndex) const
{
 800828c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	4689      	mov	r9, r1
 8008292:	469a      	mov	sl, r3
    int minX = widgetXindex(firstIndex).to<int>();
 8008294:	4611      	mov	r1, r2
{
 8008296:	4680      	mov	r8, r0
    int minX = widgetXindex(firstIndex).to<int>();
 8008298:	4648      	mov	r0, r9
{
 800829a:	4616      	mov	r6, r2
    int minX = widgetXindex(firstIndex).to<int>();
 800829c:	f7ff fc66 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80082a0:	1e07      	subs	r7, r0, #0
    int maxX = widgetXindex(lastIndex).to<int>();
 80082a2:	4651      	mov	r1, sl
 80082a4:	4648      	mov	r0, r9
 80082a6:	bfb8      	it	lt
 80082a8:	371f      	addlt	r7, #31
 80082aa:	f7ff fc5f 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 80082ae:	1e05      	subs	r5, r0, #0
    int zeroY = widgetY(0).to<int>();
 80082b0:	f04f 0100 	mov.w	r1, #0
 80082b4:	4648      	mov	r0, r9
 80082b6:	ea4f 1767 	mov.w	r7, r7, asr #5
 80082ba:	bfb8      	it	lt
 80082bc:	351f      	addlt	r5, #31
 80082be:	f7ff fc4a 	bl	8007b56 <_ZNK13AbstractGraph7widgetYEi>
 80082c2:	1e04      	subs	r4, r0, #0
    int firstY = widgetYindex(firstIndex).to<int>();
 80082c4:	4631      	mov	r1, r6
 80082c6:	4648      	mov	r0, r9
 80082c8:	ea4f 1565 	mov.w	r5, r5, asr #5
 80082cc:	bfb8      	it	lt
 80082ce:	341f      	addlt	r4, #31
 80082d0:	f7ff fc7f 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	ea4f 1464 	mov.w	r4, r4, asr #5
 80082da:	bfb8      	it	lt
 80082dc:	301f      	addlt	r0, #31
 80082de:	46a3      	mov	fp, r4
 80082e0:	1140      	asrs	r0, r0, #5
    int minY = MIN(zeroY, firstY);
 80082e2:	4284      	cmp	r4, r0
 80082e4:	bfa8      	it	ge
 80082e6:	4683      	movge	fp, r0
    int maxY = MAX(zeroY, firstY);
 80082e8:	4284      	cmp	r4, r0
 80082ea:	bfb8      	it	lt
 80082ec:	4604      	movlt	r4, r0
    for (int index = firstIndex + 1; index <= lastIndex; index++)
 80082ee:	3601      	adds	r6, #1
 80082f0:	4556      	cmp	r6, sl
 80082f2:	dd0f      	ble.n	8008314 <_ZNK10GraphBelow31getMinimalRectContainingIndicesEii+0x88>
        int y = widgetYindex(index).to<int>();
        minY = MIN(minY, y);
        maxY = MAX(maxY, y);
    }

    return Rect(minX, minY, maxX - minX + 1, maxY - minY + 1);
 80082f4:	3501      	adds	r5, #1
 80082f6:	3401      	adds	r4, #1
}
 80082f8:	4640      	mov	r0, r8
    return Rect(minX, minY, maxX - minX + 1, maxY - minY + 1);
 80082fa:	f8a8 7000 	strh.w	r7, [r8]
 80082fe:	1bed      	subs	r5, r5, r7
 8008300:	eba4 040b 	sub.w	r4, r4, fp
 8008304:	f8a8 b002 	strh.w	fp, [r8, #2]
        this->width = width;
 8008308:	f8a8 5004 	strh.w	r5, [r8, #4]
        this->height = height;
 800830c:	f8a8 4006 	strh.w	r4, [r8, #6]
}
 8008310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int y = widgetYindex(index).to<int>();
 8008314:	4631      	mov	r1, r6
 8008316:	4648      	mov	r0, r9
 8008318:	f7ff fc5b 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
 800831c:	1e02      	subs	r2, r0, #0
 800831e:	bfb8      	it	lt
 8008320:	321f      	addlt	r2, #31
 8008322:	1152      	asrs	r2, r2, #5
        minY = MIN(minY, y);
 8008324:	4593      	cmp	fp, r2
 8008326:	bfa8      	it	ge
 8008328:	4693      	movge	fp, r2
        maxY = MAX(maxY, y);
 800832a:	4294      	cmp	r4, r2
 800832c:	bfb8      	it	lt
 800832e:	4614      	movlt	r4, r2
 8008330:	e7dd      	b.n	80082ee <_ZNK10GraphBelow31getMinimalRectContainingIndicesEii+0x62>
	...

08008334 <_ZN10GraphBelowD1Ev>:
 8008334:	4b03      	ldr	r3, [pc, #12]	@ (8008344 <_ZN10GraphBelowD1Ev+0x10>)
GraphBelow::~GraphBelow()
 8008336:	b510      	push	{r4, lr}
 8008338:	4604      	mov	r4, r0
 800833a:	6003      	str	r3, [r0, #0]
 800833c:	f7ff fbf6 	bl	8007b2c <_ZN13AbstractGraphD1Ev>
}
 8008340:	4620      	mov	r0, r4
 8008342:	bd10      	pop	{r4, pc}
 8008344:	0802230c 	.word	0x0802230c

08008348 <_ZN10GraphBelowD0Ev>:
GraphBelow::~GraphBelow()
 8008348:	b510      	push	{r4, lr}
 800834a:	4604      	mov	r4, r0
}
 800834c:	f7ff fff2 	bl	8008334 <_ZN10GraphBelowD1Ev>
 8008350:	2164      	movs	r1, #100	@ 0x64
 8008352:	4620      	mov	r0, r4
 8008354:	f016 fbe7 	bl	801eb26 <_ZdlPvj>
 8008358:	4620      	mov	r0, r4
 800835a:	bd10      	pop	{r4, pc}

0800835c <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE>:
{
 800835c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (numPoints < 2)
 8008360:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
{
 8008362:	b0af      	sub	sp, #188	@ 0xbc
 8008364:	4604      	mov	r4, r0
 8008366:	460f      	mov	r7, r1
    if (numPoints < 2)
 8008368:	2e01      	cmp	r6, #1
 800836a:	dc04      	bgt.n	8008376 <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0x1a>
        return true;
 800836c:	2401      	movs	r4, #1
}
 800836e:	4620      	mov	r0, r4
 8008370:	b02f      	add	sp, #188	@ 0xbc
 8008372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int lastIndex = numPoints - 1;
 8008376:	3e01      	subs	r6, #1
    int firstIndex = 0;
 8008378:	2500      	movs	r5, #0
 800837a:	46a8      	mov	r8, r5
            invalidatedArea.x > (widgetXindex(firstIndex + 1) + lineWidth / 2).to<int>())
 800837c:	3501      	adds	r5, #1
 800837e:	4620      	mov	r0, r4
 8008380:	f9b7 9000 	ldrsh.w	r9, [r7]
 8008384:	4629      	mov	r1, r5
 8008386:	f7ff fbf1 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 800838a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800838c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8008390:	eb10 0063 	adds.w	r0, r0, r3, asr #1
 8008394:	bf48      	it	mi
 8008396:	301f      	addmi	r0, #31
    while (firstIndex < lastIndex &&
 8008398:	ebb9 1f60 	cmp.w	r9, r0, asr #5
 800839c:	dd1b      	ble.n	80083d6 <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0x7a>
 800839e:	42b5      	cmp	r5, r6
 80083a0:	dbeb      	blt.n	800837a <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0x1e>
    while (lastIndex > firstIndex &&
 80083a2:	42ae      	cmp	r6, r5
 80083a4:	dde2      	ble.n	800836c <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0x10>
            invalidatedArea.right() < (widgetXindex(lastIndex - 1) - lineWidth / 2).to<int>())
 80083a6:	f106 39ff 	add.w	r9, r6, #4294967295
        return x + width;
 80083aa:	88bb      	ldrh	r3, [r7, #4]
 80083ac:	f8b7 8000 	ldrh.w	r8, [r7]
 80083b0:	4620      	mov	r0, r4
 80083b2:	4649      	mov	r1, r9
 80083b4:	4498      	add	r8, r3
 80083b6:	f7ff fbd9 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 80083ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80083bc:	fa0f f888 	sxth.w	r8, r8
 80083c0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80083c4:	ebb0 0063 	subs.w	r0, r0, r3, asr #1
 80083c8:	bf48      	it	mi
 80083ca:	301f      	addmi	r0, #31
    while (lastIndex > firstIndex &&
 80083cc:	ebb8 1f60 	cmp.w	r8, r0, asr #5
 80083d0:	da38      	bge.n	8008444 <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0xe8>
        lastIndex--;
 80083d2:	464e      	mov	r6, r9
 80083d4:	e7e5      	b.n	80083a2 <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0x46>
 80083d6:	4645      	mov	r5, r8
 80083d8:	e7e3      	b.n	80083a2 <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0x46>
            canvas.lineTo(widgetXindex(index), widgetYindex(index));
 80083da:	4639      	mov	r1, r7
 80083dc:	4620      	mov	r0, r4
 80083de:	f7ff fbc5 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 80083e2:	4680      	mov	r8, r0
 80083e4:	4639      	mov	r1, r7
 80083e6:	4620      	mov	r0, r4
        for (int index = firstIndex + 1; index <= lastIndex; index++)
 80083e8:	3701      	adds	r7, #1
            canvas.lineTo(widgetXindex(index), widgetYindex(index));
 80083ea:	f7ff fbf2 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
 80083ee:	4641      	mov	r1, r8
 80083f0:	4602      	mov	r2, r0
 80083f2:	4668      	mov	r0, sp
 80083f4:	f00d f904 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
        for (int index = firstIndex + 1; index <= lastIndex; index++)
 80083f8:	42be      	cmp	r6, r7
 80083fa:	daee      	bge.n	80083da <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0x7e>
        canvas.lineTo(widgetXindex(lastIndex), widgetY(0));
 80083fc:	4631      	mov	r1, r6
 80083fe:	4620      	mov	r0, r4
 8008400:	f7ff fbb4 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 8008404:	4606      	mov	r6, r0
 8008406:	2100      	movs	r1, #0
 8008408:	4620      	mov	r0, r4
 800840a:	f7ff fba4 	bl	8007b56 <_ZNK13AbstractGraph7widgetYEi>
 800840e:	4631      	mov	r1, r6
 8008410:	4602      	mov	r2, r0
 8008412:	4668      	mov	r0, sp
 8008414:	f00d f8f4 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
        canvas.lineTo(widgetXindex(firstIndex), widgetY(0));
 8008418:	4629      	mov	r1, r5
 800841a:	4620      	mov	r0, r4
 800841c:	f7ff fba6 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 8008420:	4605      	mov	r5, r0
 8008422:	2100      	movs	r1, #0
 8008424:	4620      	mov	r0, r4
 8008426:	f7ff fb96 	bl	8007b56 <_ZNK13AbstractGraph7widgetYEi>
 800842a:	4629      	mov	r1, r5
 800842c:	4602      	mov	r2, r0
 800842e:	4668      	mov	r0, sp
 8008430:	f00d f8e6 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
        return canvas.render();
 8008434:	4668      	mov	r0, sp
 8008436:	f00d fa65 	bl	8015904 <_ZN8touchgfx6Canvas6renderEv>
 800843a:	4604      	mov	r4, r0
    }
 800843c:	4668      	mov	r0, sp
 800843e:	f00d faa1 	bl	8015984 <_ZN8touchgfx6CanvasD1Ev>
 8008442:	e794      	b.n	800836e <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0x12>
        Canvas canvas(this, invalidatedArea);
 8008444:	463a      	mov	r2, r7
 8008446:	4621      	mov	r1, r4
 8008448:	4668      	mov	r0, sp
 800844a:	f00c ffa5 	bl	8015398 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
        canvas.moveTo(widgetXindex(firstIndex), widgetYindex(firstIndex));
 800844e:	4629      	mov	r1, r5
 8008450:	4620      	mov	r0, r4
 8008452:	f7ff fb8b 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 8008456:	4607      	mov	r7, r0
 8008458:	4629      	mov	r1, r5
 800845a:	4620      	mov	r0, r4
 800845c:	f7ff fbb9 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
 8008460:	4639      	mov	r1, r7
 8008462:	4602      	mov	r2, r0
 8008464:	4668      	mov	r0, sp
        for (int index = firstIndex + 1; index <= lastIndex; index++)
 8008466:	1c6f      	adds	r7, r5, #1
        canvas.moveTo(widgetXindex(firstIndex), widgetYindex(firstIndex));
 8008468:	f00d f945 	bl	80156f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
        for (int index = firstIndex + 1; index <= lastIndex; index++)
 800846c:	e7c4      	b.n	80083f8 <_ZNK10GraphBelow16drawCanvasWidgetERKN8touchgfx4RectE+0x9c>

0800846e <_ZNK9GraphDots31getMinimalRectContainingIndicesEii>:
    }
    return true;
}

Rect GraphDots::getMinimalRectContainingIndices(int firstIndex, int lastIndex) const
{
 800846e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008472:	460e      	mov	r6, r1
 8008474:	4680      	mov	r8, r0
    int minX = (widgetXindex(firstIndex) - lineWidth / 2).to<int>();
 8008476:	4611      	mov	r1, r2
{
 8008478:	4693      	mov	fp, r2
    int minX = (widgetXindex(firstIndex) - lineWidth / 2).to<int>();
 800847a:	4630      	mov	r0, r6
{
 800847c:	469a      	mov	sl, r3
    int minX = (widgetXindex(firstIndex) - lineWidth / 2).to<int>();
 800847e:	f7ff fb75 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 8008482:	6d33      	ldr	r3, [r6, #80]	@ 0x50
    int maxX = (widgetXindex(lastIndex) + lineWidth / 2).to<int>();
 8008484:	4651      	mov	r1, sl
 8008486:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800848a:	ebb0 0963 	subs.w	r9, r0, r3, asr #1
 800848e:	4630      	mov	r0, r6
 8008490:	bf48      	it	mi
 8008492:	f109 091f 	addmi.w	r9, r9, #31
 8008496:	f7ff fb69 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 800849a:	6d33      	ldr	r3, [r6, #80]	@ 0x50
    int minY = (widgetYindex(firstIndex) - lineWidth / 2).to<int>();
 800849c:	4659      	mov	r1, fp
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800849e:	ea4f 1969 	mov.w	r9, r9, asr #5
            return Q5(v / i);
 80084a2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80084a6:	eb10 0763 	adds.w	r7, r0, r3, asr #1
 80084aa:	4630      	mov	r0, r6
 80084ac:	bf48      	it	mi
 80084ae:	371f      	addmi	r7, #31
 80084b0:	f7ff fb8f 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 80084b4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80084b6:	117f      	asrs	r7, r7, #5
            return Q5(v / i);
 80084b8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80084bc:	ebb0 0563 	subs.w	r5, r0, r3, asr #1
 80084c0:	bf48      	it	mi
 80084c2:	351f      	addmi	r5, #31
 80084c4:	116d      	asrs	r5, r5, #5
    int maxY = (widgetYindex(firstIndex) + lineWidth / 2).to<int>();
    for (int index = firstIndex + 1; index <= lastIndex; index++)
    {
        minY = MIN(minY, (widgetYindex(index) - lineWidth / 2).to<int>());
        maxY = MAX(maxY, (widgetYindex(index) + lineWidth / 2).to<int>());
 80084c6:	4659      	mov	r1, fp
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7ff fb82 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 80084ce:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80084d0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80084d4:	eb10 0463 	adds.w	r4, r0, r3, asr #1
 80084d8:	bf48      	it	mi
 80084da:	341f      	addmi	r4, #31
 80084dc:	1164      	asrs	r4, r4, #5
 80084de:	e027      	b.n	8008530 <_ZNK9GraphDots31getMinimalRectContainingIndicesEii+0xc2>
        minY = MIN(minY, (widgetYindex(index) - lineWidth / 2).to<int>());
 80084e0:	4659      	mov	r1, fp
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7ff fb75 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 80084e8:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80084ea:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80084ee:	ebb0 0063 	subs.w	r0, r0, r3, asr #1
 80084f2:	bf48      	it	mi
 80084f4:	301f      	addmi	r0, #31
 80084f6:	ebb5 1f60 	cmp.w	r5, r0, asr #5
 80084fa:	db0b      	blt.n	8008514 <_ZNK9GraphDots31getMinimalRectContainingIndicesEii+0xa6>
 80084fc:	4659      	mov	r1, fp
 80084fe:	4630      	mov	r0, r6
 8008500:	f7ff fb67 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 8008504:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8008506:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800850a:	ebb0 0563 	subs.w	r5, r0, r3, asr #1
 800850e:	bf48      	it	mi
 8008510:	351f      	addmi	r5, #31
 8008512:	116d      	asrs	r5, r5, #5
        maxY = MAX(maxY, (widgetYindex(index) + lineWidth / 2).to<int>());
 8008514:	4659      	mov	r1, fp
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff fb5b 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 800851c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800851e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8008522:	eb10 0063 	adds.w	r0, r0, r3, asr #1
 8008526:	bf48      	it	mi
 8008528:	301f      	addmi	r0, #31
 800852a:	ebb4 1f60 	cmp.w	r4, r0, asr #5
 800852e:	ddca      	ble.n	80084c6 <_ZNK9GraphDots31getMinimalRectContainingIndicesEii+0x58>
    for (int index = firstIndex + 1; index <= lastIndex; index++)
 8008530:	f10b 0b01 	add.w	fp, fp, #1
 8008534:	45d3      	cmp	fp, sl
 8008536:	ddd3      	ble.n	80084e0 <_ZNK9GraphDots31getMinimalRectContainingIndicesEii+0x72>
    }

    Rect minimalRect = Rect(minX, minY, maxX - minX + 1, maxY - minY + 1);
 8008538:	3701      	adds	r7, #1
 800853a:	3401      	adds	r4, #1

    return minimalRect;
}
 800853c:	4640      	mov	r0, r8
    Rect minimalRect = Rect(minX, minY, maxX - minX + 1, maxY - minY + 1);
 800853e:	f8a8 9000 	strh.w	r9, [r8]
 8008542:	eba7 0709 	sub.w	r7, r7, r9
 8008546:	1b64      	subs	r4, r4, r5
 8008548:	f8a8 5002 	strh.w	r5, [r8, #2]
        this->width = width;
 800854c:	f8a8 7004 	strh.w	r7, [r8, #4]
        this->height = height;
 8008550:	f8a8 4006 	strh.w	r4, [r8, #6]
}
 8008554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008558 <_ZN9GraphDotsD1Ev>:
 8008558:	4b03      	ldr	r3, [pc, #12]	@ (8008568 <_ZN9GraphDotsD1Ev+0x10>)
 800855a:	b510      	push	{r4, lr}
 800855c:	4604      	mov	r4, r0
 800855e:	6003      	str	r3, [r0, #0]
 8008560:	f7ff fae4 	bl	8007b2c <_ZN13AbstractGraphD1Ev>
 8008564:	4620      	mov	r0, r4
 8008566:	bd10      	pop	{r4, pc}
 8008568:	08022254 	.word	0x08022254

0800856c <_ZN9GraphDotsD0Ev>:
 800856c:	b510      	push	{r4, lr}
 800856e:	4604      	mov	r4, r0
 8008570:	f7ff fff2 	bl	8008558 <_ZN9GraphDotsD1Ev>
 8008574:	216c      	movs	r1, #108	@ 0x6c
 8008576:	4620      	mov	r0, r4
 8008578:	f016 fad5 	bl	801eb26 <_ZdlPvj>
 800857c:	4620      	mov	r0, r4
 800857e:	bd10      	pop	{r4, pc}

08008580 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E.isra.0>:
        Q5 operator*(const Q15& q15) const
 8008580:	b507      	push	{r0, r1, r2, lr}
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8008582:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008586:	ab01      	add	r3, sp, #4
 8008588:	f012 f805 	bl	801a596 <_ZN8touchgfx6muldivElllRl>
        }
 800858c:	b003      	add	sp, #12
 800858e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008594 <_ZN8touchgfx7CWRUtil4sineEi>:
        i = ((i % 360) + 360) % 360;
 8008594:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8008598:	fb90 f2f3 	sdiv	r2, r0, r3
 800859c:	fb02 0013 	mls	r0, r2, r3, r0
 80085a0:	4418      	add	r0, r3
 80085a2:	fbb0 f2f3 	udiv	r2, r0, r3
 80085a6:	fb03 0012 	mls	r0, r3, r2, r0
        if (i <= 90)
 80085aa:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80085ac:	285a      	cmp	r0, #90	@ 0x5a
 80085ae:	dc02      	bgt.n	80085b6 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
            return Q15(sineTable[180 - i]);
 80085b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
        explicit Q15(int i) : v(i) { }
 80085b4:	4770      	bx	lr
        if (i <= 180)
 80085b6:	28b4      	cmp	r0, #180	@ 0xb4
 80085b8:	dc02      	bgt.n	80085c0 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
            return Q15(sineTable[180 - i]);
 80085ba:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 80085be:	e7f7      	b.n	80085b0 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
        if (i <= 270)
 80085c0:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
            return Q15(-int32_t(sineTable[i - 180]));
 80085c4:	bfd4      	ite	le
 80085c6:	38b4      	suble	r0, #180	@ 0xb4
        return Q15(-int32_t(sineTable[360 - i]));
 80085c8:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 80085cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80085d0:	4240      	negs	r0, r0
    }
 80085d2:	4770      	bx	lr
 80085d4:	08024410 	.word	0x08024410

080085d8 <_ZN9GraphDotsC1Ev>:
GraphDots::GraphDots() :
 80085d8:	b510      	push	{r4, lr}
 80085da:	4604      	mov	r4, r0
    AbstractGraph(), startAngle(0), angleStep(30)
 80085dc:	f7ff fa8a 	bl	8007af4 <_ZN13AbstractGraphC1Ev>
 80085e0:	4b03      	ldr	r3, [pc, #12]	@ (80085f0 <_ZN9GraphDotsC1Ev+0x18>)
 80085e2:	2200      	movs	r2, #0
}
 80085e4:	4620      	mov	r0, r4
    AbstractGraph(), startAngle(0), angleStep(30)
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	231e      	movs	r3, #30
 80085ea:	e9c4 2319 	strd	r2, r3, [r4, #100]	@ 0x64
}
 80085ee:	bd10      	pop	{r4, pc}
 80085f0:	08022254 	.word	0x08022254

080085f4 <_ZN9GraphDots11setDotShapeEii>:
    angleStep = dotAngleStep;
 80085f4:	e9c0 1219 	strd	r1, r2, [r0, #100]	@ 0x64
}
 80085f8:	4770      	bx	lr

080085fa <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE>:
{
 80085fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (numPoints < 2)
 80085fe:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
{
 8008600:	b0af      	sub	sp, #188	@ 0xbc
 8008602:	4604      	mov	r4, r0
 8008604:	460f      	mov	r7, r1
    if (numPoints < 2)
 8008606:	2e01      	cmp	r6, #1
 8008608:	dc04      	bgt.n	8008614 <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0x1a>
        return true;
 800860a:	2401      	movs	r4, #1
}
 800860c:	4620      	mov	r0, r4
 800860e:	b02f      	add	sp, #188	@ 0xbc
 8008610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int lastIndex = numPoints - 1;
 8008614:	3e01      	subs	r6, #1
    int firstIndex = 0;
 8008616:	2500      	movs	r5, #0
 8008618:	46a8      	mov	r8, r5
            invalidatedArea.x > (widgetXindex(firstIndex + 1) + lineWidth / 2).to<int>())
 800861a:	3501      	adds	r5, #1
 800861c:	4620      	mov	r0, r4
 800861e:	f9b7 9000 	ldrsh.w	r9, [r7]
 8008622:	4629      	mov	r1, r5
 8008624:	f7ff faa2 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 8008628:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800862a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800862e:	eb10 0063 	adds.w	r0, r0, r3, asr #1
 8008632:	bf48      	it	mi
 8008634:	301f      	addmi	r0, #31
    while (firstIndex < lastIndex &&
 8008636:	ebb9 1f60 	cmp.w	r9, r0, asr #5
 800863a:	dd1b      	ble.n	8008674 <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0x7a>
 800863c:	42b5      	cmp	r5, r6
 800863e:	dbeb      	blt.n	8008618 <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0x1e>
    while (lastIndex > firstIndex &&
 8008640:	42ae      	cmp	r6, r5
 8008642:	dde2      	ble.n	800860a <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0x10>
            invalidatedArea.right() < (widgetXindex(lastIndex - 1) - lineWidth / 2).to<int>())
 8008644:	f106 39ff 	add.w	r9, r6, #4294967295
        return x + width;
 8008648:	88bb      	ldrh	r3, [r7, #4]
 800864a:	f8b7 8000 	ldrh.w	r8, [r7]
 800864e:	4620      	mov	r0, r4
 8008650:	4649      	mov	r1, r9
 8008652:	4498      	add	r8, r3
 8008654:	f7ff fa8a 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 8008658:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800865a:	fa0f f888 	sxth.w	r8, r8
 800865e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8008662:	ebb0 0063 	subs.w	r0, r0, r3, asr #1
 8008666:	bf48      	it	mi
 8008668:	301f      	addmi	r0, #31
    while (lastIndex > firstIndex &&
 800866a:	ebb8 1f60 	cmp.w	r8, r0, asr #5
 800866e:	da1f      	bge.n	80086b0 <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0xb6>
        lastIndex--;
 8008670:	464e      	mov	r6, r9
 8008672:	e7e5      	b.n	8008640 <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0x46>
 8008674:	4645      	mov	r5, r8
 8008676:	e7e3      	b.n	8008640 <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0x46>
                canvas.lineTo(circleCenterX + ((lineWidth * CWRUtil::sine(angle)) / 2), circleCenterY - ((lineWidth * CWRUtil::cosine(angle)) / 2));
 8008678:	4638      	mov	r0, r7
 800867a:	f7ff ff8b 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
 800867e:	4601      	mov	r1, r0
 8008680:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8008682:	f7ff ff7d 	bl	8008580 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E.isra.0>
            return Q5(v / i);
 8008686:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            return Q5(v + q5.v);
 800868a:	eb09 0860 	add.w	r8, r9, r0, asr #1
        return sine(90 - i);
 800868e:	f1c7 005a 	rsb	r0, r7, #90	@ 0x5a
 8008692:	f7ff ff7f 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
 8008696:	4601      	mov	r1, r0
 8008698:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800869a:	f7ff ff71 	bl	8008580 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E.isra.0>
 800869e:	4641      	mov	r1, r8
            return Q5(v / i);
 80086a0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80086a4:	ebaa 0260 	sub.w	r2, sl, r0, asr #1
 80086a8:	4668      	mov	r0, sp
 80086aa:	f00c ffa9 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80086ae:	e02d      	b.n	800870c <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0x112>
            for (int angle = startAngle + angleStep; (angle % 360) != startAngle; angle += angleStep)
 80086b0:	f44f 7bb4 	mov.w	fp, #360	@ 0x168
        Canvas canvas(this, invalidatedArea);
 80086b4:	463a      	mov	r2, r7
 80086b6:	4621      	mov	r1, r4
 80086b8:	4668      	mov	r0, sp
 80086ba:	f00c fe6d 	bl	8015398 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
            circleCenterX = widgetXindex(index);
 80086be:	4629      	mov	r1, r5
 80086c0:	4620      	mov	r0, r4
 80086c2:	f7ff fa53 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            circleCenterY = widgetYindex(index);
 80086c6:	4629      	mov	r1, r5
            circleCenterX = widgetXindex(index);
 80086c8:	4681      	mov	r9, r0
            circleCenterY = widgetYindex(index);
 80086ca:	4620      	mov	r0, r4
 80086cc:	f7ff fa81 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
 80086d0:	4682      	mov	sl, r0
            canvas.moveTo(circleCenterX + ((lineWidth * CWRUtil::sine(startAngle)) / 2), circleCenterY - ((lineWidth * CWRUtil::cosine(startAngle)) / 2));
 80086d2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80086d4:	f7ff ff5e 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
 80086d8:	4601      	mov	r1, r0
 80086da:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80086dc:	f7ff ff50 	bl	8008580 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E.isra.0>
 80086e0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            return Q5(v + q5.v);
 80086e4:	eb09 0760 	add.w	r7, r9, r0, asr #1
        return sine(90 - i);
 80086e8:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80086ea:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 80086ee:	f7ff ff51 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
 80086f2:	4601      	mov	r1, r0
 80086f4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80086f6:	f7ff ff43 	bl	8008580 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E.isra.0>
 80086fa:	4639      	mov	r1, r7
            return Q5(v / i);
 80086fc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008700:	ebaa 0260 	sub.w	r2, sl, r0, asr #1
 8008704:	4668      	mov	r0, sp
 8008706:	f00c fff6 	bl	80156f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
            for (int angle = startAngle + angleStep; (angle % 360) != startAngle; angle += angleStep)
 800870a:	6e67      	ldr	r7, [r4, #100]	@ 0x64
 800870c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800870e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008710:	441f      	add	r7, r3
 8008712:	fb97 f3fb 	sdiv	r3, r7, fp
 8008716:	fb0b 7313 	mls	r3, fp, r3, r7
 800871a:	4293      	cmp	r3, r2
 800871c:	d1ac      	bne.n	8008678 <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0x7e>
        for (int index = firstIndex; index <= lastIndex; index++)
 800871e:	3501      	adds	r5, #1
 8008720:	42ae      	cmp	r6, r5
 8008722:	dacc      	bge.n	80086be <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0xc4>
        return canvas.render();
 8008724:	4668      	mov	r0, sp
 8008726:	f00d f8ed 	bl	8015904 <_ZN8touchgfx6Canvas6renderEv>
 800872a:	4604      	mov	r4, r0
    }
 800872c:	4668      	mov	r0, sp
 800872e:	f00d f929 	bl	8015984 <_ZN8touchgfx6CanvasD1Ev>
 8008732:	e76b      	b.n	800860c <_ZNK9GraphDots16drawCanvasWidgetERKN8touchgfx4RectE+0x12>

08008734 <_ZNK9GraphLine31getMinimalRectContainingIndicesEii>:
    }
    return true;
}

Rect GraphLine::getMinimalRectContainingIndices(int firstIndex, int lastIndex) const
{
 8008734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	460e      	mov	r6, r1
 800873a:	4680      	mov	r8, r0
    int minX = (widgetXindex(firstIndex) - lineWidth / 2).to<int>();
 800873c:	4611      	mov	r1, r2
{
 800873e:	4693      	mov	fp, r2
    int minX = (widgetXindex(firstIndex) - lineWidth / 2).to<int>();
 8008740:	4630      	mov	r0, r6
{
 8008742:	469a      	mov	sl, r3
    int minX = (widgetXindex(firstIndex) - lineWidth / 2).to<int>();
 8008744:	f7ff fa12 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
 8008748:	6d33      	ldr	r3, [r6, #80]	@ 0x50
    int maxX = (widgetXindex(lastIndex) + lineWidth / 2).to<int>();
 800874a:	4651      	mov	r1, sl
 800874c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8008750:	ebb0 0963 	subs.w	r9, r0, r3, asr #1
 8008754:	4630      	mov	r0, r6
 8008756:	bf48      	it	mi
 8008758:	f109 091f 	addmi.w	r9, r9, #31
 800875c:	f7ff fa06 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 8008760:	6d33      	ldr	r3, [r6, #80]	@ 0x50
    int minY = (widgetYindex(firstIndex) - lineWidth / 2).to<int>();
 8008762:	4659      	mov	r1, fp
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8008764:	ea4f 1969 	mov.w	r9, r9, asr #5
            return Q5(v / i);
 8008768:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800876c:	eb10 0763 	adds.w	r7, r0, r3, asr #1
 8008770:	4630      	mov	r0, r6
 8008772:	bf48      	it	mi
 8008774:	371f      	addmi	r7, #31
 8008776:	f7ff fa2c 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 800877a:	6d33      	ldr	r3, [r6, #80]	@ 0x50
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800877c:	117f      	asrs	r7, r7, #5
            return Q5(v / i);
 800877e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8008782:	ebb0 0563 	subs.w	r5, r0, r3, asr #1
 8008786:	bf48      	it	mi
 8008788:	351f      	addmi	r5, #31
 800878a:	116d      	asrs	r5, r5, #5
    int maxY = (widgetYindex(firstIndex) + lineWidth / 2).to<int>();
    for (int index = firstIndex + 1; index <= lastIndex; index++)
    {
        minY = MIN(minY, (widgetYindex(index) - lineWidth / 2).to<int>());
        maxY = MAX(maxY, (widgetYindex(index) + lineWidth / 2).to<int>());
 800878c:	4659      	mov	r1, fp
 800878e:	4630      	mov	r0, r6
 8008790:	f7ff fa1f 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 8008794:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8008796:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800879a:	eb10 0463 	adds.w	r4, r0, r3, asr #1
 800879e:	bf48      	it	mi
 80087a0:	341f      	addmi	r4, #31
 80087a2:	1164      	asrs	r4, r4, #5
 80087a4:	e027      	b.n	80087f6 <_ZNK9GraphLine31getMinimalRectContainingIndicesEii+0xc2>
        minY = MIN(minY, (widgetYindex(index) - lineWidth / 2).to<int>());
 80087a6:	4659      	mov	r1, fp
 80087a8:	4630      	mov	r0, r6
 80087aa:	f7ff fa12 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 80087ae:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80087b0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80087b4:	ebb0 0063 	subs.w	r0, r0, r3, asr #1
 80087b8:	bf48      	it	mi
 80087ba:	301f      	addmi	r0, #31
 80087bc:	ebb5 1f60 	cmp.w	r5, r0, asr #5
 80087c0:	db0b      	blt.n	80087da <_ZNK9GraphLine31getMinimalRectContainingIndicesEii+0xa6>
 80087c2:	4659      	mov	r1, fp
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7ff fa04 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 80087ca:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80087cc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80087d0:	ebb0 0563 	subs.w	r5, r0, r3, asr #1
 80087d4:	bf48      	it	mi
 80087d6:	351f      	addmi	r5, #31
 80087d8:	116d      	asrs	r5, r5, #5
        maxY = MAX(maxY, (widgetYindex(index) + lineWidth / 2).to<int>());
 80087da:	4659      	mov	r1, fp
 80087dc:	4630      	mov	r0, r6
 80087de:	f7ff f9f8 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v / i);
 80087e2:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80087e4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80087e8:	eb10 0063 	adds.w	r0, r0, r3, asr #1
 80087ec:	bf48      	it	mi
 80087ee:	301f      	addmi	r0, #31
 80087f0:	ebb4 1f60 	cmp.w	r4, r0, asr #5
 80087f4:	ddca      	ble.n	800878c <_ZNK9GraphLine31getMinimalRectContainingIndicesEii+0x58>
    for (int index = firstIndex + 1; index <= lastIndex; index++)
 80087f6:	f10b 0b01 	add.w	fp, fp, #1
 80087fa:	45d3      	cmp	fp, sl
 80087fc:	ddd3      	ble.n	80087a6 <_ZNK9GraphLine31getMinimalRectContainingIndicesEii+0x72>
    }

    Rect minimalRect = Rect(minX, minY, maxX - minX + 1, maxY - minY + 1);
 80087fe:	3701      	adds	r7, #1
 8008800:	3401      	adds	r4, #1

    return minimalRect;
}
 8008802:	4640      	mov	r0, r8
    Rect minimalRect = Rect(minX, minY, maxX - minX + 1, maxY - minY + 1);
 8008804:	f8a8 9000 	strh.w	r9, [r8]
 8008808:	eba7 0709 	sub.w	r7, r7, r9
 800880c:	1b64      	subs	r4, r4, r5
 800880e:	f8a8 5002 	strh.w	r5, [r8, #2]
        this->width = width;
 8008812:	f8a8 7004 	strh.w	r7, [r8, #4]
        this->height = height;
 8008816:	f8a8 4006 	strh.w	r4, [r8, #6]
}
 800881a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008820 <_ZN9GraphLineD1Ev>:
 8008820:	4b03      	ldr	r3, [pc, #12]	@ (8008830 <_ZN9GraphLineD1Ev+0x10>)
 8008822:	b510      	push	{r4, lr}
 8008824:	4604      	mov	r4, r0
 8008826:	6003      	str	r3, [r0, #0]
 8008828:	f7ff f980 	bl	8007b2c <_ZN13AbstractGraphD1Ev>
 800882c:	4620      	mov	r0, r4
 800882e:	bd10      	pop	{r4, pc}
 8008830:	0802230c 	.word	0x0802230c

08008834 <_ZN9GraphLineD0Ev>:
 8008834:	b510      	push	{r4, lr}
 8008836:	4604      	mov	r4, r0
 8008838:	f7ff fff2 	bl	8008820 <_ZN9GraphLineD1Ev>
 800883c:	2164      	movs	r1, #100	@ 0x64
 800883e:	4620      	mov	r0, r4
 8008840:	f016 f971 	bl	801eb26 <_ZdlPvj>
 8008844:	4620      	mov	r0, r4
 8008846:	bd10      	pop	{r4, pc}

08008848 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE>:
    if (numPoints < 2)
 8008848:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800884a:	2b01      	cmp	r3, #1
{
 800884c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008850:	4604      	mov	r4, r0
 8008852:	b0af      	sub	sp, #188	@ 0xbc
 8008854:	460d      	mov	r5, r1
    if (numPoints < 2)
 8008856:	dc04      	bgt.n	8008862 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x1a>
        return true;
 8008858:	2401      	movs	r4, #1
}
 800885a:	4620      	mov	r0, r4
 800885c:	b02f      	add	sp, #188	@ 0xbc
 800885e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int lastIndex = numPoints - 1;
 8008862:	f103 38ff 	add.w	r8, r3, #4294967295
    int firstIndex = 0;
 8008866:	2700      	movs	r7, #0
 8008868:	463e      	mov	r6, r7
            invalidatedArea.x > (widgetXindex(firstIndex + 1) + lineWidth / 2).to<int>())
 800886a:	3701      	adds	r7, #1
 800886c:	4620      	mov	r0, r4
 800886e:	f9b5 9000 	ldrsh.w	r9, [r5]
 8008872:	4639      	mov	r1, r7
 8008874:	f7ff f97a 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 8008878:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800887a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800887e:	eb10 0063 	adds.w	r0, r0, r3, asr #1
 8008882:	bf48      	it	mi
 8008884:	301f      	addmi	r0, #31
    while (firstIndex < lastIndex &&
 8008886:	ebb9 1f60 	cmp.w	r9, r0, asr #5
 800888a:	dd02      	ble.n	8008892 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x4a>
 800888c:	4547      	cmp	r7, r8
 800888e:	dbeb      	blt.n	8008868 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x20>
 8008890:	e7e2      	b.n	8008858 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x10>
 8008892:	4637      	mov	r7, r6
    while (lastIndex > firstIndex &&
 8008894:	4547      	cmp	r7, r8
 8008896:	dadf      	bge.n	8008858 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x10>
            invalidatedArea.right() < (widgetXindex(lastIndex - 1) - lineWidth / 2).to<int>())
 8008898:	f108 36ff 	add.w	r6, r8, #4294967295
        return x + width;
 800889c:	88ab      	ldrh	r3, [r5, #4]
 800889e:	f8b5 9000 	ldrh.w	r9, [r5]
 80088a2:	4620      	mov	r0, r4
 80088a4:	4631      	mov	r1, r6
 80088a6:	4499      	add	r9, r3
 80088a8:	f7ff f960 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v / i);
 80088ac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80088ae:	fa0f f989 	sxth.w	r9, r9
 80088b2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80088b6:	ebb0 0063 	subs.w	r0, r0, r3, asr #1
 80088ba:	bf48      	it	mi
 80088bc:	301f      	addmi	r0, #31
    while (lastIndex > firstIndex &&
 80088be:	ebb9 1f60 	cmp.w	r9, r0, asr #5
 80088c2:	da5a      	bge.n	800897a <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x132>
        lastIndex--;
 80088c4:	46b0      	mov	r8, r6
 80088c6:	e7e5      	b.n	8008894 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x4c>
            canvas.lineTo(xAboveOutgoing(index), yAboveOutgoing(index));
 80088c8:	4629      	mov	r1, r5
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff f95f 	bl	8007b8e <_ZNK13AbstractGraph14xAboveOutgoingEi>
 80088d0:	4681      	mov	r9, r0
 80088d2:	4629      	mov	r1, r5
 80088d4:	4620      	mov	r0, r4
            canvas.lineTo(xAboveIncoming(index + 1), yAboveIncoming(index + 1));
 80088d6:	3501      	adds	r5, #1
            canvas.lineTo(xAboveOutgoing(index), yAboveOutgoing(index));
 80088d8:	f7ff f981 	bl	8007bde <_ZNK13AbstractGraph14yAboveOutgoingEi>
 80088dc:	4649      	mov	r1, r9
 80088de:	4602      	mov	r2, r0
 80088e0:	4668      	mov	r0, sp
 80088e2:	f00c fe8d 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
            canvas.lineTo(xAboveIncoming(index + 1), yAboveIncoming(index + 1));
 80088e6:	4629      	mov	r1, r5
 80088e8:	4620      	mov	r0, r4
 80088ea:	f7ff f944 	bl	8007b76 <_ZNK13AbstractGraph14xAboveIncomingEi>
 80088ee:	4681      	mov	r9, r0
 80088f0:	4629      	mov	r1, r5
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7ff f97e 	bl	8007bf4 <_ZNK13AbstractGraph14yAboveIncomingEi>
 80088f8:	4649      	mov	r1, r9
 80088fa:	4602      	mov	r2, r0
 80088fc:	4668      	mov	r0, sp
 80088fe:	f00c fe7f 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
        for (int index = firstIndex + 1; index < lastIndex; index++)
 8008902:	45a8      	cmp	r8, r5
 8008904:	d1e0      	bne.n	80088c8 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x80>
        for (int index = lastIndex - 1; index >= firstIndex; index--)
 8008906:	4635      	mov	r5, r6
 8008908:	42af      	cmp	r7, r5
 800890a:	dd07      	ble.n	800891c <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0xd4>
        return canvas.render();
 800890c:	4668      	mov	r0, sp
 800890e:	f00c fff9 	bl	8015904 <_ZN8touchgfx6Canvas6renderEv>
 8008912:	4604      	mov	r4, r0
    }
 8008914:	4668      	mov	r0, sp
 8008916:	f00d f835 	bl	8015984 <_ZN8touchgfx6CanvasD1Ev>
 800891a:	e79e      	b.n	800885a <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x12>
            canvas.lineTo(xBelowIncoming(index + 1), yBelowIncoming(index + 1));
 800891c:	f105 0901 	add.w	r9, r5, #1
        return widgetXindex(index) - points[index - 1].dy;
 8008920:	4620      	mov	r0, r4
 8008922:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8008926:	4649      	mov	r1, r9
 8008928:	f7ff f920 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v - q5.v);
 800892c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        return widgetYindex(index) + points[index - 1].dx;
 800892e:	4649      	mov	r1, r9
 8008930:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8008934:	68de      	ldr	r6, [r3, #12]
 8008936:	1b86      	subs	r6, r0, r6
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff f94a 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v + q5.v);
 800893e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008940:	4631      	mov	r1, r6
 8008942:	4443      	add	r3, r8
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	4402      	add	r2, r0
 8008948:	4668      	mov	r0, sp
 800894a:	f00c fe59 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
        return widgetXindex(index) - points[index].dy;
 800894e:	4629      	mov	r1, r5
 8008950:	4620      	mov	r0, r4
 8008952:	f7ff f90b 	bl	8007b6c <_ZNK13AbstractGraph12widgetXindexEi>
            return Q5(v - q5.v);
 8008956:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        return widgetYindex(index) + points[index].dx;
 8008958:	4629      	mov	r1, r5
        for (int index = lastIndex - 1; index >= firstIndex; index--)
 800895a:	3d01      	subs	r5, #1
 800895c:	4443      	add	r3, r8
 800895e:	68de      	ldr	r6, [r3, #12]
 8008960:	1b86      	subs	r6, r0, r6
 8008962:	4620      	mov	r0, r4
 8008964:	f7ff f935 	bl	8007bd2 <_ZNK13AbstractGraph12widgetYindexEi>
            return Q5(v + q5.v);
 8008968:	6c63      	ldr	r3, [r4, #68]	@ 0x44
            canvas.lineTo(xBelowOutgoing(index), yBelowOutgoing(index));
 800896a:	4631      	mov	r1, r6
 800896c:	4443      	add	r3, r8
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	4402      	add	r2, r0
 8008972:	4668      	mov	r0, sp
 8008974:	f00c fe44 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
        for (int index = lastIndex - 1; index >= firstIndex; index--)
 8008978:	e7c6      	b.n	8008908 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0xc0>
        Canvas canvas(this, invalidatedArea);
 800897a:	462a      	mov	r2, r5
 800897c:	4621      	mov	r1, r4
 800897e:	4668      	mov	r0, sp
 8008980:	f00c fd0a 	bl	8015398 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
        canvas.moveTo(xAboveOutgoing(firstIndex), yAboveOutgoing(firstIndex));
 8008984:	4639      	mov	r1, r7
 8008986:	4620      	mov	r0, r4
 8008988:	f7ff f901 	bl	8007b8e <_ZNK13AbstractGraph14xAboveOutgoingEi>
 800898c:	4605      	mov	r5, r0
 800898e:	4639      	mov	r1, r7
 8008990:	4620      	mov	r0, r4
 8008992:	f7ff f924 	bl	8007bde <_ZNK13AbstractGraph14yAboveOutgoingEi>
 8008996:	4629      	mov	r1, r5
 8008998:	4602      	mov	r2, r0
 800899a:	4668      	mov	r0, sp
        canvas.lineTo(xAboveIncoming(firstIndex + 1), yAboveIncoming(firstIndex + 1));
 800899c:	1c7d      	adds	r5, r7, #1
        canvas.moveTo(xAboveOutgoing(firstIndex), yAboveOutgoing(firstIndex));
 800899e:	f00c feaa 	bl	80156f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
        canvas.lineTo(xAboveIncoming(firstIndex + 1), yAboveIncoming(firstIndex + 1));
 80089a2:	e7a0      	b.n	80088e6 <_ZNK9GraphLine16drawCanvasWidgetERKN8touchgfx4RectE+0x9e>

080089a4 <_ZN14GraphPresenterD1Ev>:
{
}

GraphPresenter::~GraphPresenter()
{
}
 80089a4:	4770      	bx	lr

080089a6 <_ZN14GraphPresenter10deactivateEv>:

void GraphPresenter::activate()
{
}
 80089a6:	4770      	bx	lr

080089a8 <_ZN14GraphPresenter20screenSaverMajorTickEv>:

}

void GraphPresenter::screenSaverMajorTick()
{
    view.screenSaverMajorTick();
 80089a8:	6900      	ldr	r0, [r0, #16]
 80089aa:	6803      	ldr	r3, [r0, #0]
 80089ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ae:	4718      	bx	r3

080089b0 <_ZThn4_N14GraphPresenter20screenSaverMajorTickEv>:
    virtual ~GraphPresenter();

    virtual void activate();
    virtual void deactivate();

    virtual void screenSaverMajorTick();
 80089b0:	f1a0 0004 	sub.w	r0, r0, #4
 80089b4:	f7ff bff8 	b.w	80089a8 <_ZN14GraphPresenter20screenSaverMajorTickEv>

080089b8 <_ZN14GraphPresenterD0Ev>:
GraphPresenter::~GraphPresenter()
 80089b8:	b510      	push	{r4, lr}
 80089ba:	4604      	mov	r4, r0
}
 80089bc:	2114      	movs	r1, #20
 80089be:	f016 f8b2 	bl	801eb26 <_ZdlPvj>
 80089c2:	4620      	mov	r0, r4
 80089c4:	bd10      	pop	{r4, pc}

080089c6 <_ZThn4_N14GraphPresenterD0Ev>:
    virtual ~GraphPresenter();
 80089c6:	f1a0 0004 	sub.w	r0, r0, #4
 80089ca:	f7ff bff5 	b.w	80089b8 <_ZN14GraphPresenterD0Ev>

080089ce <_ZThn4_N14GraphPresenterD1Ev>:
 80089ce:	3804      	subs	r0, #4
 80089d0:	4770      	bx	lr
	...

080089d4 <_ZN14GraphPresenterC1ER9GraphView>:
GraphPresenter::GraphPresenter(GraphView& v) :
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	460d      	mov	r5, r1
    view(v)
 80089d8:	3140      	adds	r1, #64	@ 0x40
GraphPresenter::GraphPresenter(GraphView& v) :
 80089da:	4604      	mov	r4, r0
    view(v)
 80089dc:	f7f8 fec2 	bl	8001764 <_ZN13DemoPresenterC1ER17DemoViewInterface>
 80089e0:	4b04      	ldr	r3, [pc, #16]	@ (80089f4 <_ZN14GraphPresenterC1ER9GraphView+0x20>)
}
 80089e2:	4620      	mov	r0, r4
    view(v)
 80089e4:	6125      	str	r5, [r4, #16]
 80089e6:	f103 0208 	add.w	r2, r3, #8
 80089ea:	3328      	adds	r3, #40	@ 0x28
 80089ec:	6022      	str	r2, [r4, #0]
 80089ee:	6063      	str	r3, [r4, #4]
}
 80089f0:	bd38      	pop	{r3, r4, r5, pc}
 80089f2:	bf00      	nop
 80089f4:	080223bc 	.word	0x080223bc

080089f8 <_ZN8DemoViewI14GraphPresenterED1Ev>:
class DemoView : public View<T>, public DemoViewInterface
 80089f8:	4770      	bx	lr

080089fa <_ZThn64_N8DemoViewI14GraphPresenterED1Ev>:
 80089fa:	3840      	subs	r0, #64	@ 0x40
 80089fc:	4770      	bx	lr

080089fe <_ZN9GraphView14tearDownScreenEv>:
    resetPieChart();
}

void GraphView::tearDownScreen()
{
}
 80089fe:	4770      	bx	lr

08008a00 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEED1Ev>:
    }
 8008a00:	4770      	bx	lr

08008a02 <_ZNK8touchgfx12MoveAnimatorINS_9ContainerEE9isRunningEv>:
        return isMoveAnimationRunning();
 8008a02:	6803      	ldr	r3, [r0, #0]
 8008a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a08:	4718      	bx	r3

08008a0a <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21setMoveAnimationDelayEt>:
        moveAnimationDelay = delay;
 8008a0a:	f8a0 1120 	strh.w	r1, [r0, #288]	@ 0x120
    }
 8008a0e:	4770      	bx	lr

08008a10 <_ZN8touchgfx12MoveAnimatorI8PieChartE21setMoveAnimationDelayEt>:
        moveAnimationDelay = delay;
 8008a10:	f8a0 12a8 	strh.w	r1, [r0, #680]	@ 0x2a8
    }
 8008a14:	4770      	bx	lr

08008a16 <_ZNK8touchgfx12MoveAnimatorINS_9ContainerEE22isMoveAnimationRunningEv>:
    }
 8008a16:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8008a1a:	4770      	bx	lr

08008a1c <_ZN8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorINS_9ContainerEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008a1c:	4770      	bx	lr

08008a1e <_ZN8touchgfx8CallbackI9GraphViewRK11LegendEntryvvED1Ev>:
 8008a1e:	4770      	bx	lr

08008a20 <_ZN8touchgfx8CallbackI9GraphViewRK8PieChartvvED1Ev>:
 8008a20:	4770      	bx	lr

08008a22 <_ZN8touchgfx8CallbackI9GraphViewRK8PieChartivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8008a22:	4770      	bx	lr

08008a24 <_ZN8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorI11LegendEntryEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008a24:	4770      	bx	lr

08008a26 <_ZN8touchgfx8CallbackI9GraphViewRKNS_14AbstractButtonEvvED1Ev>:
 8008a26:	4770      	bx	lr

08008a28 <_ZN8touchgfx8CallbackI8DemoViewI14GraphPresenterERKNS_14AbstractButtonEvvED1Ev>:
 8008a28:	4770      	bx	lr

08008a2a <_ZN8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorINS_9ContainerEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8008a2a:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008a2c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8008a2e:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8008a30:	68c2      	ldr	r2, [r0, #12]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	1055      	asrs	r5, r2, #1
 8008a36:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008a3a:	07d2      	lsls	r2, r2, #31
 8008a3c:	bf48      	it	mi
 8008a3e:	5962      	ldrmi	r2, [r4, r5]
    }
 8008a40:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008a42:	bf48      	it	mi
 8008a44:	58d3      	ldrmi	r3, [r2, r3]
 8008a46:	4718      	bx	r3

08008a48 <_ZNK8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorINS_9ContainerEEEvvE7isValidEv>:
    virtual bool isValid() const
 8008a48:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8008a4a:	6840      	ldr	r0, [r0, #4]
 8008a4c:	b130      	cbz	r0, 8008a5c <_ZNK8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorINS_9ContainerEEEvvE7isValidEv+0x14>
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	b91a      	cbnz	r2, 8008a5a <_ZNK8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorINS_9ContainerEEEvvE7isValidEv+0x12>
 8008a52:	68d8      	ldr	r0, [r3, #12]
 8008a54:	f000 0001 	and.w	r0, r0, #1
 8008a58:	4770      	bx	lr
 8008a5a:	2001      	movs	r0, #1
    }
 8008a5c:	4770      	bx	lr

08008a5e <_ZN8touchgfx8CallbackI9GraphViewRK11LegendEntryvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008a5e:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008a60:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8008a62:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8008a64:	68c2      	ldr	r2, [r0, #12]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	1055      	asrs	r5, r2, #1
 8008a6a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008a6e:	07d2      	lsls	r2, r2, #31
 8008a70:	bf48      	it	mi
 8008a72:	5962      	ldrmi	r2, [r4, r5]
    }
 8008a74:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008a76:	bf48      	it	mi
 8008a78:	58d3      	ldrmi	r3, [r2, r3]
 8008a7a:	4718      	bx	r3

08008a7c <_ZNK8touchgfx8CallbackI9GraphViewRK11LegendEntryvvE7isValidEv>:
    virtual bool isValid() const
 8008a7c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8008a7e:	6840      	ldr	r0, [r0, #4]
 8008a80:	b130      	cbz	r0, 8008a90 <_ZNK8touchgfx8CallbackI9GraphViewRK11LegendEntryvvE7isValidEv+0x14>
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	b91a      	cbnz	r2, 8008a8e <_ZNK8touchgfx8CallbackI9GraphViewRK11LegendEntryvvE7isValidEv+0x12>
 8008a86:	68d8      	ldr	r0, [r3, #12]
 8008a88:	f000 0001 	and.w	r0, r0, #1
 8008a8c:	4770      	bx	lr
 8008a8e:	2001      	movs	r0, #1
    }
 8008a90:	4770      	bx	lr

08008a92 <_ZN8touchgfx8CallbackI9GraphViewRK8PieChartvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008a92:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008a94:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8008a96:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8008a98:	68c2      	ldr	r2, [r0, #12]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	1055      	asrs	r5, r2, #1
 8008a9e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008aa2:	07d2      	lsls	r2, r2, #31
 8008aa4:	bf48      	it	mi
 8008aa6:	5962      	ldrmi	r2, [r4, r5]
    }
 8008aa8:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008aaa:	bf48      	it	mi
 8008aac:	58d3      	ldrmi	r3, [r2, r3]
 8008aae:	4718      	bx	r3

08008ab0 <_ZNK8touchgfx8CallbackI9GraphViewRK8PieChartvvE7isValidEv>:
    virtual bool isValid() const
 8008ab0:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8008ab2:	6840      	ldr	r0, [r0, #4]
 8008ab4:	b130      	cbz	r0, 8008ac4 <_ZNK8touchgfx8CallbackI9GraphViewRK8PieChartvvE7isValidEv+0x14>
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	b91a      	cbnz	r2, 8008ac2 <_ZNK8touchgfx8CallbackI9GraphViewRK8PieChartvvE7isValidEv+0x12>
 8008aba:	68d8      	ldr	r0, [r3, #12]
 8008abc:	f000 0001 	and.w	r0, r0, #1
 8008ac0:	4770      	bx	lr
 8008ac2:	2001      	movs	r0, #1
    }
 8008ac4:	4770      	bx	lr

08008ac6 <_ZN8touchgfx8CallbackI9GraphViewRK8PieChartivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8008ac6:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 8008ac8:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 8008aca:	4603      	mov	r3, r0
        (pobject->*pmemfun_2)(t1, t2);
 8008acc:	68c4      	ldr	r4, [r0, #12]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	1066      	asrs	r6, r4, #1
 8008ad2:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8008ad6:	07e4      	lsls	r4, r4, #31
 8008ad8:	bf44      	itt	mi
 8008ada:	59ac      	ldrmi	r4, [r5, r6]
 8008adc:	58e3      	ldrmi	r3, [r4, r3]
    }
 8008ade:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 8008ae0:	4718      	bx	r3

08008ae2 <_ZNK8touchgfx8CallbackI9GraphViewRK8PieChartivE7isValidEv>:
    virtual bool isValid() const
 8008ae2:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_2 != 0);
 8008ae4:	6840      	ldr	r0, [r0, #4]
 8008ae6:	b130      	cbz	r0, 8008af6 <_ZNK8touchgfx8CallbackI9GraphViewRK8PieChartivE7isValidEv+0x14>
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	b91a      	cbnz	r2, 8008af4 <_ZNK8touchgfx8CallbackI9GraphViewRK8PieChartivE7isValidEv+0x12>
 8008aec:	68d8      	ldr	r0, [r3, #12]
 8008aee:	f000 0001 	and.w	r0, r0, #1
 8008af2:	4770      	bx	lr
 8008af4:	2001      	movs	r0, #1
    }
 8008af6:	4770      	bx	lr

08008af8 <_ZN8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorI11LegendEntryEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8008af8:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008afa:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8008afc:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8008afe:	68c2      	ldr	r2, [r0, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	1055      	asrs	r5, r2, #1
 8008b04:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008b08:	07d2      	lsls	r2, r2, #31
 8008b0a:	bf48      	it	mi
 8008b0c:	5962      	ldrmi	r2, [r4, r5]
    }
 8008b0e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008b10:	bf48      	it	mi
 8008b12:	58d3      	ldrmi	r3, [r2, r3]
 8008b14:	4718      	bx	r3

08008b16 <_ZNK8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorI11LegendEntryEEvvE7isValidEv>:
    virtual bool isValid() const
 8008b16:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8008b18:	6840      	ldr	r0, [r0, #4]
 8008b1a:	b130      	cbz	r0, 8008b2a <_ZNK8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorI11LegendEntryEEvvE7isValidEv+0x14>
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	b91a      	cbnz	r2, 8008b28 <_ZNK8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorI11LegendEntryEEvvE7isValidEv+0x12>
 8008b20:	68d8      	ldr	r0, [r3, #12]
 8008b22:	f000 0001 	and.w	r0, r0, #1
 8008b26:	4770      	bx	lr
 8008b28:	2001      	movs	r0, #1
    }
 8008b2a:	4770      	bx	lr

08008b2c <_ZN8touchgfx8CallbackI9GraphViewRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008b2c:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008b2e:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8008b30:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8008b32:	68c2      	ldr	r2, [r0, #12]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	1055      	asrs	r5, r2, #1
 8008b38:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008b3c:	07d2      	lsls	r2, r2, #31
 8008b3e:	bf48      	it	mi
 8008b40:	5962      	ldrmi	r2, [r4, r5]
    }
 8008b42:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008b44:	bf48      	it	mi
 8008b46:	58d3      	ldrmi	r3, [r2, r3]
 8008b48:	4718      	bx	r3

08008b4a <_ZNK8touchgfx8CallbackI9GraphViewRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8008b4a:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8008b4c:	6840      	ldr	r0, [r0, #4]
 8008b4e:	b130      	cbz	r0, 8008b5e <_ZNK8touchgfx8CallbackI9GraphViewRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	b91a      	cbnz	r2, 8008b5c <_ZNK8touchgfx8CallbackI9GraphViewRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8008b54:	68d8      	ldr	r0, [r3, #12]
 8008b56:	f000 0001 	and.w	r0, r0, #1
 8008b5a:	4770      	bx	lr
 8008b5c:	2001      	movs	r0, #1
    }
 8008b5e:	4770      	bx	lr

08008b60 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21setMoveAnimationDelayEt>:
        moveAnimationDelay = delay;
 8008b60:	8601      	strh	r1, [r0, #48]	@ 0x30
    }
 8008b62:	4770      	bx	lr

08008b64 <_ZNK8touchgfx12MoveAnimatorINS_9ContainerEE21getMoveAnimationDelayEv>:
    }
 8008b64:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 8008b66:	4770      	bx	lr

08008b68 <_ZNK8touchgfx12MoveAnimatorI11LegendEntryE21getMoveAnimationDelayEv>:
 8008b68:	f8b0 0120 	ldrh.w	r0, [r0, #288]	@ 0x120
 8008b6c:	4770      	bx	lr

08008b6e <_ZNK8touchgfx12MoveAnimatorI11LegendEntryE9isRunningEv>:
        return isMoveAnimationRunning();
 8008b6e:	6803      	ldr	r3, [r0, #0]
 8008b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b74:	4718      	bx	r3

08008b76 <_ZNK8touchgfx12MoveAnimatorI11LegendEntryE22isMoveAnimationRunningEv>:
    }
 8008b76:	f890 011c 	ldrb.w	r0, [r0, #284]	@ 0x11c
 8008b7a:	4770      	bx	lr

08008b7c <_ZNK8touchgfx12MoveAnimatorI8PieChartE21getMoveAnimationDelayEv>:
    }
 8008b7c:	f8b0 02a8 	ldrh.w	r0, [r0, #680]	@ 0x2a8
 8008b80:	4770      	bx	lr

08008b82 <_ZNK8touchgfx12MoveAnimatorI8PieChartE9isRunningEv>:
        return isMoveAnimationRunning();
 8008b82:	6803      	ldr	r3, [r0, #0]
 8008b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b88:	4718      	bx	r3

08008b8a <_ZNK8touchgfx12MoveAnimatorI8PieChartE22isMoveAnimationRunningEv>:
    }
 8008b8a:	f890 02a5 	ldrb.w	r0, [r0, #677]	@ 0x2a5
 8008b8e:	4770      	bx	lr

08008b90 <_ZN8touchgfx8CallbackI8DemoViewI14GraphPresenterERKNS_14AbstractButtonEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8008b90:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008b92:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8008b94:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8008b96:	68c2      	ldr	r2, [r0, #12]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	1055      	asrs	r5, r2, #1
 8008b9c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008ba0:	07d2      	lsls	r2, r2, #31
 8008ba2:	bf48      	it	mi
 8008ba4:	5962      	ldrmi	r2, [r4, r5]
    }
 8008ba6:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8008ba8:	bf48      	it	mi
 8008baa:	58d3      	ldrmi	r3, [r2, r3]
 8008bac:	4718      	bx	r3

08008bae <_ZNK8touchgfx8CallbackI8DemoViewI14GraphPresenterERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8008bae:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 8008bb0:	6840      	ldr	r0, [r0, #4]
 8008bb2:	b130      	cbz	r0, 8008bc2 <_ZNK8touchgfx8CallbackI8DemoViewI14GraphPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	b91a      	cbnz	r2, 8008bc0 <_ZNK8touchgfx8CallbackI8DemoViewI14GraphPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8008bb8:	68d8      	ldr	r0, [r3, #12]
 8008bba:	f000 0001 	and.w	r0, r0, #1
 8008bbe:	4770      	bx	lr
 8008bc0:	2001      	movs	r0, #1
    }
 8008bc2:	4770      	bx	lr

08008bc4 <_ZN8DemoViewI14GraphPresenterE22gotoMenuClickedHandlerERKN8touchgfx14AbstractButtonE>:
        View<T>::presenter->backOptionSelected();
 8008bc4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8008bc6:	f7f8 bddb 	b.w	8001780 <_ZN13DemoPresenter18backOptionSelectedEv>
	...

08008bcc <_ZN8DemoViewI14GraphPresenterE19updateProcessorLoadEh>:
    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	4604      	mov	r4, r0
 8008bd0:	460b      	mov	r3, r1
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", mcuLoadInProcent);
 8008bd2:	4a05      	ldr	r2, [pc, #20]	@ (8008be8 <_ZN8DemoViewI14GraphPresenterE19updateProcessorLoadEh+0x1c>)
 8008bd4:	2105      	movs	r1, #5
 8008bd6:	30e4      	adds	r0, #228	@ 0xe4
 8008bd8:	f013 fd68 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.invalidate();
 8008bdc:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
    }
 8008be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mcuLoadValueTxt.invalidate();
 8008be4:	f011 bbd1 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8008be8:	08023468 	.word	0x08023468

08008bec <_ZThn64_N8DemoViewI14GraphPresenterE19updateProcessorLoadEh>:
    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 8008bec:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 8008bf0:	e7ec      	b.n	8008bcc <_ZN8DemoViewI14GraphPresenterE19updateProcessorLoadEh>
 8008bf2:	bf00      	nop

08008bf4 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEED0Ev>:
    virtual ~MoveAnimator()
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	4604      	mov	r4, r0
    }
 8008bf8:	2148      	movs	r1, #72	@ 0x48
 8008bfa:	f015 ff94 	bl	801eb26 <_ZdlPvj>
 8008bfe:	4620      	mov	r0, r4
 8008c00:	bd10      	pop	{r4, pc}

08008c02 <_ZN8DemoViewI14GraphPresenterED0Ev>:
class DemoView : public View<T>, public DemoViewInterface
 8008c02:	b510      	push	{r4, lr}
 8008c04:	4604      	mov	r4, r0
 8008c06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008c0a:	f015 ff8c 	bl	801eb26 <_ZdlPvj>
 8008c0e:	4620      	mov	r0, r4
 8008c10:	bd10      	pop	{r4, pc}

08008c12 <_ZThn64_N8DemoViewI14GraphPresenterED0Ev>:
 8008c12:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 8008c16:	e7f4      	b.n	8008c02 <_ZN8DemoViewI14GraphPresenterED0Ev>

08008c18 <_ZN8touchgfx8CallbackI8DemoViewI14GraphPresenterERKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	2110      	movs	r1, #16
 8008c1e:	f015 ff82 	bl	801eb26 <_ZdlPvj>
 8008c22:	4620      	mov	r0, r4
 8008c24:	bd10      	pop	{r4, pc}

08008c26 <_ZN8touchgfx8CallbackI9GraphViewRKNS_14AbstractButtonEvvED0Ev>:
 8008c26:	b510      	push	{r4, lr}
 8008c28:	4604      	mov	r4, r0
 8008c2a:	2110      	movs	r1, #16
 8008c2c:	f015 ff7b 	bl	801eb26 <_ZdlPvj>
 8008c30:	4620      	mov	r0, r4
 8008c32:	bd10      	pop	{r4, pc}

08008c34 <_ZN8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorI11LegendEntryEEvvED0Ev>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	4604      	mov	r4, r0
 8008c38:	2110      	movs	r1, #16
 8008c3a:	f015 ff74 	bl	801eb26 <_ZdlPvj>
 8008c3e:	4620      	mov	r0, r4
 8008c40:	bd10      	pop	{r4, pc}

08008c42 <_ZN8touchgfx8CallbackI9GraphViewRK8PieChartivED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8008c42:	b510      	push	{r4, lr}
 8008c44:	4604      	mov	r4, r0
 8008c46:	2110      	movs	r1, #16
 8008c48:	f015 ff6d 	bl	801eb26 <_ZdlPvj>
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	bd10      	pop	{r4, pc}

08008c50 <_ZN8touchgfx8CallbackI9GraphViewRK8PieChartvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008c50:	b510      	push	{r4, lr}
 8008c52:	4604      	mov	r4, r0
 8008c54:	2110      	movs	r1, #16
 8008c56:	f015 ff66 	bl	801eb26 <_ZdlPvj>
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	bd10      	pop	{r4, pc}

08008c5e <_ZN8touchgfx8CallbackI9GraphViewRK11LegendEntryvvED0Ev>:
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	4604      	mov	r4, r0
 8008c62:	2110      	movs	r1, #16
 8008c64:	f015 ff5f 	bl	801eb26 <_ZdlPvj>
 8008c68:	4620      	mov	r0, r4
 8008c6a:	bd10      	pop	{r4, pc}

08008c6c <_ZN8touchgfx8CallbackI9GraphViewRKNS_12MoveAnimatorINS_9ContainerEEEvvED0Ev>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	4604      	mov	r4, r0
 8008c70:	2110      	movs	r1, #16
 8008c72:	f015 ff58 	bl	801eb26 <_ZdlPvj>
 8008c76:	4620      	mov	r0, r4
 8008c78:	bd10      	pop	{r4, pc}
	...

08008c7c <_ZN8touchgfx12MoveAnimatorI11LegendEntryED1Ev>:
 8008c7c:	4b03      	ldr	r3, [pc, #12]	@ (8008c8c <_ZN8touchgfx12MoveAnimatorI11LegendEntryED1Ev+0x10>)
    virtual ~MoveAnimator()
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	4604      	mov	r4, r0
    }
 8008c82:	6003      	str	r3, [r0, #0]
 8008c84:	f001 fd31 	bl	800a6ea <_ZN11LegendEntryD1Ev>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	bd10      	pop	{r4, pc}
 8008c8c:	080245d4 	.word	0x080245d4

08008c90 <_ZN8touchgfx12MoveAnimatorI11LegendEntryED0Ev>:
    virtual ~MoveAnimator()
 8008c90:	b510      	push	{r4, lr}
 8008c92:	4604      	mov	r4, r0
    }
 8008c94:	f7ff fff2 	bl	8008c7c <_ZN8touchgfx12MoveAnimatorI11LegendEntryED1Ev>
 8008c98:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f015 ff42 	bl	801eb26 <_ZdlPvj>
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	bd10      	pop	{r4, pc}

08008ca6 <_ZN9GraphView20legendPressedHandlerERK11LegendEntry>:
        }
    }
}

void GraphView::legendPressedHandler(const LegendEntry& legend)
{
 8008ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca8:	460f      	mov	r7, r1
 8008caa:	f500 667a 	add.w	r6, r0, #4000	@ 0xfa0
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8008cae:	2500      	movs	r5, #0
    {
        // pieChart will call back and (de)select legend
        if (&legend == &legendEntries[i])
        {
            pieChart.setSelected(i, !pieChart.isSelected(i));
 8008cb0:	f500 6442 	add.w	r4, r0, #3104	@ 0xc20
        if (&legend == &legendEntries[i])
 8008cb4:	42b7      	cmp	r7, r6
 8008cb6:	d110      	bne.n	8008cda <_ZN9GraphView20legendPressedHandlerERK11LegendEntry+0x34>
            pieChart.setSelected(i, !pieChart.isSelected(i));
 8008cb8:	4629      	mov	r1, r5
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f002 f80a 	bl	800acd4 <_ZNK8PieChart10isSelectedEi>
 8008cc0:	f080 0201 	eor.w	r2, r0, #1
 8008cc4:	b2d2      	uxtb	r2, r2
        }
        else
        {
            pieChart.setSelected(i, false);
 8008cc6:	4629      	mov	r1, r5
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8008cc8:	3501      	adds	r5, #1
            pieChart.setSelected(i, false);
 8008cca:	4620      	mov	r0, r4
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8008ccc:	f506 769c 	add.w	r6, r6, #312	@ 0x138
            pieChart.setSelected(i, false);
 8008cd0:	f002 fa34 	bl	800b13c <_ZN8PieChart11setSelectedEib>
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8008cd4:	2d06      	cmp	r5, #6
 8008cd6:	d1ed      	bne.n	8008cb4 <_ZN9GraphView20legendPressedHandlerERK11LegendEntry+0xe>
        }
    }
}
 8008cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            pieChart.setSelected(i, false);
 8008cda:	2200      	movs	r2, #0
 8008cdc:	e7f3      	b.n	8008cc6 <_ZN9GraphView20legendPressedHandlerERK11LegendEntry+0x20>

08008cde <_ZN9GraphView21legendSelectedHandlerERK8PieCharti>:
    if (item >= 0 && item < NUMBER_OF_PIE_CHART_SECTIONS)
 8008cde:	2a05      	cmp	r2, #5
{
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	4611      	mov	r1, r2
    if (item >= 0 && item < NUMBER_OF_PIE_CHART_SECTIONS)
 8008ce8:	d80d      	bhi.n	8008d06 <_ZN9GraphView21legendSelectedHandlerERK8PieCharti+0x28>
        legendEntries[item].setSelected(thePieChart.isSelected(item));
 8008cea:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8008cee:	fb03 4402 	mla	r4, r3, r2, r4
 8008cf2:	f001 ffef 	bl	800acd4 <_ZNK8PieChart10isSelectedEi>
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	f504 647a 	add.w	r4, r4, #4000	@ 0xfa0
 8008cfc:	4620      	mov	r0, r4
}
 8008cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        legendEntries[item].setSelected(thePieChart.isSelected(item));
 8008d02:	f001 be1f 	b.w	800a944 <_ZN11LegendEntry11setSelectedEb>
}
 8008d06:	bd10      	pop	{r4, pc}

08008d08 <_ZN9GraphView28topMenuAnimationEndedHandlerERKN8touchgfx12MoveAnimatorINS0_9ContainerEEE>:
    }
}

void GraphView::topMenuAnimationEndedHandler(const MoveAnimator<Container>& menu)
{
    if (&menu == &topMenuContainer)
 8008d08:	f500 53b7 	add.w	r3, r0, #5856	@ 0x16e0
 8008d0c:	3310      	adds	r3, #16
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	d10d      	bne.n	8008d2e <_ZN9GraphView28topMenuAnimationEndedHandlerERKN8touchgfx12MoveAnimatorINS0_9ContainerEEE+0x26>
    {
        if (currentMenuState == EXPANDED)
 8008d12:	f890 3101 	ldrb.w	r3, [r0, #257]	@ 0x101
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d109      	bne.n	8008d2e <_ZN9GraphView28topMenuAnimationEndedHandlerERKN8touchgfx12MoveAnimatorINS0_9ContainerEEE+0x26>
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    void setAlpha(uint8_t alpha)
    {
        this->alpha = alpha;
 8008d1a:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8008d1e:	22a8      	movs	r2, #168	@ 0xa8
        {
            topMenuBackground.setAlpha(168);
            topMenuBackground.invalidate();
 8008d20:	f500 50b9 	add.w	r0, r0, #5920	@ 0x1720
 8008d24:	f883 275e 	strb.w	r2, [r3, #1886]	@ 0x75e
 8008d28:	3018      	adds	r0, #24
 8008d2a:	f011 bb2e 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        }
    }
}
 8008d2e:	4770      	bx	lr

08008d30 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 8008d30:	b510      	push	{r4, lr}
 8008d32:	4604      	mov	r4, r0
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8008d34:	f7fa fcd0 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 8008d38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d3c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 8008d40:	4620      	mov	r0, r4
 8008d42:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8008d44:	2300      	movs	r3, #0
 8008d46:	e9c4 320a 	strd	r3, r2, [r4, #40]	@ 0x28
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 8008d4a:	4a02      	ldr	r2, [pc, #8]	@ (8008d54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x24>)
 8008d4c:	8623      	strh	r3, [r4, #48]	@ 0x30
 8008d4e:	6022      	str	r2, [r4, #0]
 8008d50:	6363      	str	r3, [r4, #52]	@ 0x34
    }
 8008d52:	bd10      	pop	{r4, pc}
 8008d54:	08023474 	.word	0x08023474

08008d58 <_ZN9GraphViewC1Ev>:
GraphView::GraphView() :
 8008d58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	f011 fe41 	bl	801a9e4 <_ZN8touchgfx6ScreenC1Ev>
        onGotoMenuButtonClicked(this, &DemoView::gotoMenuClickedHandler)
 8008d62:	4bbc      	ldr	r3, [pc, #752]	@ (8009054 <_ZN9GraphViewC1Ev+0x2fc>)
 8008d64:	2600      	movs	r6, #0
 8008d66:	f104 0878 	add.w	r8, r4, #120	@ 0x78
 8008d6a:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	3338      	adds	r3, #56	@ 0x38
 8008d72:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8008d74:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8008d78:	6423      	str	r3, [r4, #64]	@ 0x40
 8008d7a:	f104 07ac 	add.w	r7, r4, #172	@ 0xac
 8008d7e:	f7fa fcbb 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
 8008d82:	4640      	mov	r0, r8
 8008d84:	f7fa fca8 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 8008d88:	4bb3      	ldr	r3, [pc, #716]	@ (8009058 <_ZN9GraphViewC1Ev+0x300>)
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	f8a4 509e 	strh.w	r5, [r4, #158]	@ 0x9e
 8008d90:	67a3      	str	r3, [r4, #120]	@ 0x78
 8008d92:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
        color = col;
 8008d96:	f8c4 60a0 	str.w	r6, [r4, #160]	@ 0xa0
 8008d9a:	f504 7913 	add.w	r9, r4, #588	@ 0x24c
 8008d9e:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8008da2:	f04f 0aff 	mov.w	sl, #255	@ 0xff
 8008da6:	f8a4 60a8 	strh.w	r6, [r4, #168]	@ 0xa8
 8008daa:	f7ff ffc1 	bl	8008d30 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
    {
 8008dae:	4bab      	ldr	r3, [pc, #684]	@ (800905c <_ZN9GraphViewC1Ev+0x304>)
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 8008db0:	4640      	mov	r0, r8
 8008db2:	4631      	mov	r1, r6
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 8008db4:	f104 08e4 	add.w	r8, r4, #228	@ 0xe4
        this->pobject = pobject;
 8008db8:	e9c4 343c 	strd	r3, r4, [r4, #240]	@ 0xf0
        this->pmemfun_1 = pmemfun_1;
 8008dbc:	4ba8      	ldr	r3, [pc, #672]	@ (8009060 <_ZN9GraphViewC1Ev+0x308>)
 8008dbe:	e9c4 363e 	strd	r3, r6, [r4, #248]	@ 0xf8
        gotoMenuButton.setAction(onGotoMenuButtonClicked);
 8008dc2:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8008dc6:	66e3      	str	r3, [r4, #108]	@ 0x6c
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 8008dc8:	f00e f932 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 8008dcc:	22ff      	movs	r2, #255	@ 0xff
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f013 fc79 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 8008dd6:	4633      	mov	r3, r6
 8008dd8:	4aa2      	ldr	r2, [pc, #648]	@ (8009064 <_ZN9GraphViewC1Ev+0x30c>)
 8008dda:	2105      	movs	r1, #5
        this->color = color;
 8008ddc:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 8008de0:	4640      	mov	r0, r8
 8008de2:	f013 fc63 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_VALUE));
 8008de6:	4638      	mov	r0, r7
 8008de8:	f04f 0101 	mov.w	r1, #1
        wildcard = value;
 8008dec:	f8c4 80e0 	str.w	r8, [r4, #224]	@ 0xe0
 8008df0:	f00e f91e 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadValueTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 8008df4:	22ff      	movs	r2, #255	@ 0xff
    automaticTopMenuCollapseTimeout(0)
 8008df6:	f504 7782 	add.w	r7, r4, #260	@ 0x104
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8008dfa:	f8df 82b0 	ldr.w	r8, [pc, #688]	@ 80090ac <_ZN9GraphViewC1Ev+0x354>
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4610      	mov	r0, r2
 8008e02:	f013 fc61 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8008e06:	4b98      	ldr	r3, [pc, #608]	@ (8009068 <_ZN9GraphViewC1Ev+0x310>)
 8008e08:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	333c      	adds	r3, #60	@ 0x3c
 8008e12:	f8ad 5004 	strh.w	r5, [sp, #4]
 8008e16:	6423      	str	r3, [r4, #64]	@ 0x40
 8008e18:	f7fa fc5e 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
        setBitmap(bmp);
 8008e1c:	a901      	add	r1, sp, #4
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f8a4 512a 	strh.w	r5, [r4, #298]	@ 0x12a
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8008e24:	f884 512c 	strb.w	r5, [r4, #300]	@ 0x12c
 8008e28:	f8c4 8104 	str.w	r8, [r4, #260]	@ 0x104
        setBitmap(bmp);
 8008e2c:	f00e fa8f 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8008e30:	f504 7098 	add.w	r0, r4, #304	@ 0x130
 8008e34:	f7f8 fcca 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
 8008e38:	4b8c      	ldr	r3, [pc, #560]	@ (800906c <_ZN9GraphViewC1Ev+0x314>)
 8008e3a:	f504 70ae 	add.w	r0, r4, #348	@ 0x15c
 8008e3e:	f8c4 6158 	str.w	r6, [r4, #344]	@ 0x158
 8008e42:	f8c4 3130 	str.w	r3, [r4, #304]	@ 0x130
 8008e46:	f7fa fc47 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 8008e4a:	4f89      	ldr	r7, [pc, #548]	@ (8009070 <_ZN9GraphViewC1Ev+0x318>)
 8008e4c:	f884 5182 	strb.w	r5, [r4, #386]	@ 0x182
 8008e50:	f504 75c6 	add.w	r5, r4, #396	@ 0x18c
 8008e54:	f8c4 715c 	str.w	r7, [r4, #348]	@ 0x15c
 8008e58:	f8c4 6184 	str.w	r6, [r4, #388]	@ 0x184
 8008e5c:	f884 6188 	strb.w	r6, [r4, #392]	@ 0x188
 8008e60:	4628      	mov	r0, r5
 8008e62:	3530      	adds	r5, #48	@ 0x30
 8008e64:	f7fa fc38 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 8008e68:	f845 7c30 	str.w	r7, [r5, #-48]
 8008e6c:	f805 ac0a 	strb.w	sl, [r5, #-10]
 8008e70:	f845 6c08 	str.w	r6, [r5, #-8]
 8008e74:	f805 6c04 	strb.w	r6, [r5, #-4]
 8008e78:	454d      	cmp	r5, r9
 8008e7a:	d1f1      	bne.n	8008e60 <_ZN9GraphViewC1Ev+0x108>
 8008e7c:	f504 764b 	add.w	r6, r4, #812	@ 0x32c
 8008e80:	4628      	mov	r0, r5
 8008e82:	3538      	adds	r5, #56	@ 0x38
 8008e84:	f7ff ff54 	bl	8008d30 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8008e88:	42b5      	cmp	r5, r6
 8008e8a:	d1f9      	bne.n	8008e80 <_ZN9GraphViewC1Ev+0x128>
    primaryGraph(),
 8008e8c:	f504 7055 	add.w	r0, r4, #852	@ 0x354
 8008e90:	f504 656e 	add.w	r5, r4, #3808	@ 0xee0
 8008e94:	f7ff f8ca 	bl	800802c <_ZN5GraphC1Ev>
    secondaryGraph(),
 8008e98:	f504 60d6 	add.w	r0, r4, #1712	@ 0x6b0
 8008e9c:	f7ff f8c6 	bl	800802c <_ZN5GraphC1Ev>
    automaticTopMenuCollapseTimeout(0)
 8008ea0:	f604 200c 	addw	r0, r4, #2572	@ 0xa0c
 8008ea4:	f7fa fc28 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
 8008ea8:	f504 6024 	add.w	r0, r4, #2624	@ 0xa40
 8008eac:	f7fa fc24 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
 8008eb0:	f604 2074 	addw	r0, r4, #2676	@ 0xa74
 8008eb4:	f00d fd0c 	bl	80168d0 <_ZN8touchgfx12ToggleButtonC1Ev>
 8008eb8:	f604 20ac 	addw	r0, r4, #2732	@ 0xaac
 8008ebc:	f00d fd08 	bl	80168d0 <_ZN8touchgfx12ToggleButtonC1Ev>
 8008ec0:	f604 20e4 	addw	r0, r4, #2788	@ 0xae4
 8008ec4:	f00d fd04 	bl	80168d0 <_ZN8touchgfx12ToggleButtonC1Ev>
 8008ec8:	f604 301c 	addw	r0, r4, #2844	@ 0xb1c
 8008ecc:	f00d fd00 	bl	80168d0 <_ZN8touchgfx12ToggleButtonC1Ev>
 8008ed0:	f604 3054 	addw	r0, r4, #2900	@ 0xb54
 8008ed4:	f00d fcfc 	bl	80168d0 <_ZN8touchgfx12ToggleButtonC1Ev>
 8008ed8:	f604 308c 	addw	r0, r4, #2956	@ 0xb8c
 8008edc:	f00d fcf8 	bl	80168d0 <_ZN8touchgfx12ToggleButtonC1Ev>
 8008ee0:	f604 30c4 	addw	r0, r4, #3012	@ 0xbc4
 8008ee4:	f7fa fc08 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
        moveAnimationEndedCallback(0)
 8008ee8:	f504 6042 	add.w	r0, r4, #3104	@ 0xc20
 8008eec:	f002 f8b4 	bl	800b058 <_ZN8PieChartC1Ev>
 8008ef0:	4b60      	ldr	r3, [pc, #384]	@ (8009074 <_ZN9GraphViewC1Ev+0x31c>)
 8008ef2:	f504 667a 	add.w	r6, r4, #4000	@ 0xfa0
 8008ef6:	f8c4 3c20 	str.w	r3, [r4, #3104]	@ 0xc20
        moveAnimationRunning(false),
 8008efa:	2300      	movs	r3, #0
 8008efc:	f884 3ec5 	strb.w	r3, [r4, #3781]	@ 0xec5
        moveAnimationCounter(0),
 8008f00:	f8a4 3ec6 	strh.w	r3, [r4, #3782]	@ 0xec6
        moveAnimationDelay(0),
 8008f04:	f8a4 3ec8 	strh.w	r3, [r4, #3784]	@ 0xec8
        moveAnimationEndedCallback(0)
 8008f08:	f8c4 3edc 	str.w	r3, [r4, #3804]	@ 0xedc
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	3520      	adds	r5, #32
 8008f10:	22ff      	movs	r2, #255	@ 0xff
 8008f12:	2100      	movs	r1, #0
 8008f14:	f00c f9c2 	bl	801529c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>
 8008f18:	42b5      	cmp	r5, r6
 8008f1a:	d1f7      	bne.n	8008f0c <_ZN9GraphViewC1Ev+0x1b4>
 8008f1c:	f504 59b7 	add.w	r9, r4, #5856	@ 0x16e0
 8008f20:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80090b0 <_ZN9GraphViewC1Ev+0x358>
        moveAnimationRunning(false),
 8008f24:	2600      	movs	r6, #0
 8008f26:	f109 0910 	add.w	r9, r9, #16
        moveAnimationEndedCallback(0)
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f001 fc1a 	bl	800a764 <_ZN11LegendEntryC1Ev>
        moveAnimationRunning(false),
 8008f30:	f885 611c 	strb.w	r6, [r5, #284]	@ 0x11c
        moveAnimationCounter(0),
 8008f34:	f8a5 611e 	strh.w	r6, [r5, #286]	@ 0x11e
        moveAnimationDelay(0),
 8008f38:	f8a5 6120 	strh.w	r6, [r5, #288]	@ 0x120
        moveAnimationEndedCallback(0)
 8008f3c:	f8c5 6134 	str.w	r6, [r5, #308]	@ 0x134
 8008f40:	f8c5 a000 	str.w	sl, [r5]
 8008f44:	f505 759c 	add.w	r5, r5, #312	@ 0x138
 8008f48:	454d      	cmp	r5, r9
 8008f4a:	d1ee      	bne.n	8008f2a <_ZN9GraphViewC1Ev+0x1d2>
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
 8008f52:	f7f8 fc3b 	bl	80017cc <_ZN8touchgfx8DrawableC1Ev>
 8008f56:	4b48      	ldr	r3, [pc, #288]	@ (8009078 <_ZN9GraphViewC1Ev+0x320>)
 8008f58:	f504 50b9 	add.w	r0, r4, #5920	@ 0x1720
 8008f5c:	f8c5 6718 	str.w	r6, [r5, #1816]	@ 0x718
 8008f60:	f8c5 36f0 	str.w	r3, [r5, #1776]	@ 0x6f0
 8008f64:	f64f 79ff 	movw	r9, #65535	@ 0xffff
        moveAnimationRunning(false),
 8008f68:	f885 671c 	strb.w	r6, [r5, #1820]	@ 0x71c
 8008f6c:	3018      	adds	r0, #24
        moveAnimationCounter(0),
 8008f6e:	f8a5 671e 	strh.w	r6, [r5, #1822]	@ 0x71e
        moveAnimationDelay(0),
 8008f72:	f8a5 6720 	strh.w	r6, [r5, #1824]	@ 0x720
        moveAnimationEndedCallback(0)
 8008f76:	f8c5 6734 	str.w	r6, [r5, #1844]	@ 0x734
 8008f7a:	f7fa fbad 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 8008f7e:	f8c5 7738 	str.w	r7, [r5, #1848]	@ 0x738
 8008f82:	f504 57bb 	add.w	r7, r4, #5984	@ 0x1760
 8008f86:	23ff      	movs	r3, #255	@ 0xff
 8008f88:	f8c5 6760 	str.w	r6, [r5, #1888]	@ 0x760
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	f885 375e 	strb.w	r3, [r5, #1886]	@ 0x75e
 8008f92:	f885 6764 	strb.w	r6, [r5, #1892]	@ 0x764
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8008f96:	4638      	mov	r0, r7
 8008f98:	f8ad 9004 	strh.w	r9, [sp, #4]
 8008f9c:	f7fa fb9c 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
        setBitmap(bmp);
 8008fa0:	a901      	add	r1, sp, #4
 8008fa2:	4638      	mov	r0, r7
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8008fa4:	f8c5 8768 	str.w	r8, [r5, #1896]	@ 0x768
 8008fa8:	f8a5 978e 	strh.w	r9, [r5, #1934]	@ 0x78e
 8008fac:	f885 9790 	strb.w	r9, [r5, #1936]	@ 0x790
        setBitmap(bmp);
 8008fb0:	f00e f9cd 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8008fb4:	f504 50bc 	add.w	r0, r4, #6016	@ 0x1780
 8008fb8:	3014      	adds	r0, #20
 8008fba:	f7fa fb9d 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
    {
 8008fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800907c <_ZN9GraphViewC1Ev+0x324>)
}
 8008fc0:	4620      	mov	r0, r4
        this->pobject = pobject;
 8008fc2:	f8c5 47cc 	str.w	r4, [r5, #1996]	@ 0x7cc
    {
 8008fc6:	f8c5 37c8 	str.w	r3, [r5, #1992]	@ 0x7c8
        this->pmemfun_1 = pmemfun_1;
 8008fca:	4b2d      	ldr	r3, [pc, #180]	@ (8009080 <_ZN9GraphViewC1Ev+0x328>)
 8008fcc:	f8c5 67d4 	str.w	r6, [r5, #2004]	@ 0x7d4
 8008fd0:	f8c5 37d0 	str.w	r3, [r5, #2000]	@ 0x7d0
    {
 8008fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8009084 <_ZN9GraphViewC1Ev+0x32c>)
        this->pobject = pobject;
 8008fd6:	f8c5 47dc 	str.w	r4, [r5, #2012]	@ 0x7dc
    {
 8008fda:	f8c5 37d8 	str.w	r3, [r5, #2008]	@ 0x7d8
        this->pmemfun_1 = pmemfun_1;
 8008fde:	4b2a      	ldr	r3, [pc, #168]	@ (8009088 <_ZN9GraphViewC1Ev+0x330>)
 8008fe0:	f8c5 67e4 	str.w	r6, [r5, #2020]	@ 0x7e4
 8008fe4:	f8c5 37e0 	str.w	r3, [r5, #2016]	@ 0x7e0
    {
 8008fe8:	4b28      	ldr	r3, [pc, #160]	@ (800908c <_ZN9GraphViewC1Ev+0x334>)
        this->pobject = pobject;
 8008fea:	f8c5 47ec 	str.w	r4, [r5, #2028]	@ 0x7ec
    {
 8008fee:	f8c5 37e8 	str.w	r3, [r5, #2024]	@ 0x7e8
        this->pmemfun_2 = pmemfun_2;
 8008ff2:	4b27      	ldr	r3, [pc, #156]	@ (8009090 <_ZN9GraphViewC1Ev+0x338>)
 8008ff4:	f8c5 67f4 	str.w	r6, [r5, #2036]	@ 0x7f4
 8008ff8:	f8c5 37f0 	str.w	r3, [r5, #2032]	@ 0x7f0
    {
 8008ffc:	4b25      	ldr	r3, [pc, #148]	@ (8009094 <_ZN9GraphViewC1Ev+0x33c>)
        this->pobject = pobject;
 8008ffe:	f8c5 47fc 	str.w	r4, [r5, #2044]	@ 0x7fc
    {
 8009002:	f8c5 37f8 	str.w	r3, [r5, #2040]	@ 0x7f8
        this->pmemfun_1 = pmemfun_1;
 8009006:	4b24      	ldr	r3, [pc, #144]	@ (8009098 <_ZN9GraphViewC1Ev+0x340>)
 8009008:	f8c5 6804 	str.w	r6, [r5, #2052]	@ 0x804
 800900c:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
    {
 8009010:	4b22      	ldr	r3, [pc, #136]	@ (800909c <_ZN9GraphViewC1Ev+0x344>)
        this->pobject = pobject;
 8009012:	f8c5 480c 	str.w	r4, [r5, #2060]	@ 0x80c
    {
 8009016:	f8c5 3808 	str.w	r3, [r5, #2056]	@ 0x808
        this->pmemfun_1 = pmemfun_1;
 800901a:	4b21      	ldr	r3, [pc, #132]	@ (80090a0 <_ZN9GraphViewC1Ev+0x348>)
 800901c:	f8c5 6814 	str.w	r6, [r5, #2068]	@ 0x814
 8009020:	f8c5 3810 	str.w	r3, [r5, #2064]	@ 0x810
    {
 8009024:	4b1f      	ldr	r3, [pc, #124]	@ (80090a4 <_ZN9GraphViewC1Ev+0x34c>)
        this->pobject = pobject;
 8009026:	f8c5 481c 	str.w	r4, [r5, #2076]	@ 0x81c
    {
 800902a:	f8c5 3818 	str.w	r3, [r5, #2072]	@ 0x818
        this->pmemfun_1 = pmemfun_1;
 800902e:	4b1e      	ldr	r3, [pc, #120]	@ (80090a8 <_ZN9GraphViewC1Ev+0x350>)
 8009030:	f8c5 6824 	str.w	r6, [r5, #2084]	@ 0x824
 8009034:	f8c5 3820 	str.w	r3, [r5, #2080]	@ 0x820
    tickCount(0),
 8009038:	f8c5 6828 	str.w	r6, [r5, #2088]	@ 0x828
    graphX(0),
 800903c:	f8c5 682c 	str.w	r6, [r5, #2092]	@ 0x82c
    graphType(0),
 8009040:	f8c5 6830 	str.w	r6, [r5, #2096]	@ 0x830
    leftX(0),
 8009044:	f8c5 6834 	str.w	r6, [r5, #2100]	@ 0x834
    automaticTopMenuCollapseTimeout(0)
 8009048:	f8c5 6840 	str.w	r6, [r5, #2112]	@ 0x840
}
 800904c:	b002      	add	sp, #8
 800904e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009052:	bf00      	nop
 8009054:	080244e8 	.word	0x080244e8
 8009058:	08025e28 	.word	0x08025e28
 800905c:	080244d0 	.word	0x080244d0
 8009060:	08008bc5 	.word	0x08008bc5
 8009064:	08023468 	.word	0x08023468
 8009068:	08022404 	.word	0x08022404
 800906c:	080250b0 	.word	0x080250b0
 8009070:	08025ea4 	.word	0x08025ea4
 8009074:	08024534 	.word	0x08024534
 8009078:	08024674 	.word	0x08024674
 800907c:	08024714 	.word	0x08024714
 8009080:	0800a019 	.word	0x0800a019
 8009084:	0802472c 	.word	0x0802472c
 8009088:	0800948d 	.word	0x0800948d
 800908c:	08024744 	.word	0x08024744
 8009090:	08008cdf 	.word	0x08008cdf
 8009094:	0802475c 	.word	0x0802475c
 8009098:	08009281 	.word	0x08009281
 800909c:	08024774 	.word	0x08024774
 80090a0:	08008ca7 	.word	0x08008ca7
 80090a4:	0802478c 	.word	0x0802478c
 80090a8:	08008d09 	.word	0x08008d09
 80090ac:	08025fb8 	.word	0x08025fb8
 80090b0:	080245d4 	.word	0x080245d4

080090b4 <_ZN9GraphView19updateGraphSettingsEv>:
{
 80090b4:	b538      	push	{r3, r4, r5, lr}
     *
     * @return True if this bitmap has the same id as the other bitmap.
     */
    bool operator==(const Bitmap& other) const
    {
        return (bitmapId == other.bitmapId);
 80090b6:	f8b0 1aa2 	ldrh.w	r1, [r0, #2722]	@ 0xaa2
    primaryGraph.setLineVisible(primaryGraphLineSetting.getState());
 80090ba:	f500 7555 	add.w	r5, r0, #852	@ 0x354
 80090be:	f8b0 3aa8 	ldrh.w	r3, [r0, #2728]	@ 0xaa8
{
 80090c2:	4604      	mov	r4, r0
    primaryGraph.setLineVisible(primaryGraphLineSetting.getState());
 80090c4:	4628      	mov	r0, r5
 80090c6:	1acb      	subs	r3, r1, r3
 80090c8:	4259      	negs	r1, r3
 80090ca:	4159      	adcs	r1, r3
 80090cc:	f7fe fffc 	bl	80080c8 <_ZN5Graph14setLineVisibleEb>
    primaryGraph.invalidate();
 80090d0:	4628      	mov	r0, r5
 80090d2:	f011 f95a 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 80090d6:	f8b4 1ada 	ldrh.w	r1, [r4, #2778]	@ 0xada
 80090da:	f8b4 3ae0 	ldrh.w	r3, [r4, #2784]	@ 0xae0
    primaryGraph.setDotsVisible(primaryGraphDotSetting.getState());
 80090de:	4628      	mov	r0, r5
 80090e0:	1aca      	subs	r2, r1, r3
 80090e2:	4251      	negs	r1, r2
 80090e4:	4151      	adcs	r1, r2
 80090e6:	f7fe fff2 	bl	80080ce <_ZN5Graph14setDotsVisibleEb>
 80090ea:	f8b4 3ae0 	ldrh.w	r3, [r4, #2784]	@ 0xae0
 80090ee:	f8b4 1ada 	ldrh.w	r1, [r4, #2778]	@ 0xada
    primaryGraph.setDotsBackgroundVisible(primaryGraphDotSetting.getState());
 80090f2:	1ac8      	subs	r0, r1, r3
 80090f4:	4241      	negs	r1, r0
 80090f6:	4141      	adcs	r1, r0
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7fe ffeb 	bl	80080d4 <_ZN5Graph24setDotsBackgroundVisibleEb>
    primaryGraph.invalidate();
 80090fe:	4628      	mov	r0, r5
 8009100:	f011 f943 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8009104:	f8b4 3b18 	ldrh.w	r3, [r4, #2840]	@ 0xb18
 8009108:	f8b4 1b12 	ldrh.w	r1, [r4, #2834]	@ 0xb12
    primaryGraph.setAreaVisible(primaryGraphAreaSetting.getState());
 800910c:	4628      	mov	r0, r5
 800910e:	eba1 0c03 	sub.w	ip, r1, r3
 8009112:	f1dc 0100 	rsbs	r1, ip, #0
 8009116:	eb41 010c 	adc.w	r1, r1, ip
 800911a:	f7fe ffde 	bl	80080da <_ZN5Graph14setAreaVisibleEb>
    primaryGraph.invalidate();
 800911e:	4628      	mov	r0, r5
 8009120:	f011 f933 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8009124:	f8b4 3b50 	ldrh.w	r3, [r4, #2896]	@ 0xb50
 8009128:	f8b4 1b4a 	ldrh.w	r1, [r4, #2890]	@ 0xb4a
    secondaryGraph.setLineVisible(secondaryGraphLineSetting.getState());
 800912c:	f504 65d6 	add.w	r5, r4, #1712	@ 0x6b0
 8009130:	eba1 0e03 	sub.w	lr, r1, r3
 8009134:	4628      	mov	r0, r5
 8009136:	f1de 0100 	rsbs	r1, lr, #0
 800913a:	eb41 010e 	adc.w	r1, r1, lr
 800913e:	f7fe ffc3 	bl	80080c8 <_ZN5Graph14setLineVisibleEb>
    secondaryGraph.invalidate();
 8009142:	4628      	mov	r0, r5
 8009144:	f011 f921 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8009148:	f8b4 1b88 	ldrh.w	r1, [r4, #2952]	@ 0xb88
 800914c:	f8b4 3b82 	ldrh.w	r3, [r4, #2946]	@ 0xb82
    secondaryGraph.setDotsVisible(secondaryGraphDotSetting.getState());
 8009150:	4628      	mov	r0, r5
 8009152:	1acb      	subs	r3, r1, r3
 8009154:	4259      	negs	r1, r3
 8009156:	4159      	adcs	r1, r3
 8009158:	f7fe ffb9 	bl	80080ce <_ZN5Graph14setDotsVisibleEb>
 800915c:	f8b4 3b82 	ldrh.w	r3, [r4, #2946]	@ 0xb82
 8009160:	f8b4 1b88 	ldrh.w	r1, [r4, #2952]	@ 0xb88
    secondaryGraph.setDotsBackgroundVisible(secondaryGraphDotSetting.getState());
 8009164:	4628      	mov	r0, r5
 8009166:	1aca      	subs	r2, r1, r3
 8009168:	4251      	negs	r1, r2
 800916a:	4151      	adcs	r1, r2
 800916c:	f7fe ffb2 	bl	80080d4 <_ZN5Graph24setDotsBackgroundVisibleEb>
    secondaryGraph.invalidate();
 8009170:	4628      	mov	r0, r5
 8009172:	f011 f90a 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8009176:	f8b4 1bc0 	ldrh.w	r1, [r4, #3008]	@ 0xbc0
 800917a:	f8b4 3bba 	ldrh.w	r3, [r4, #3002]	@ 0xbba
    secondaryGraph.setAreaVisible(secondaryGraphAreaSetting.getState());
 800917e:	1ac8      	subs	r0, r1, r3
 8009180:	4241      	negs	r1, r0
 8009182:	4141      	adcs	r1, r0
 8009184:	4628      	mov	r0, r5
 8009186:	f7fe ffa8 	bl	80080da <_ZN5Graph14setAreaVisibleEb>
    secondaryGraph.invalidate();
 800918a:	4628      	mov	r0, r5
}
 800918c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    secondaryGraph.invalidate();
 8009190:	f011 b8fb 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>

08009194 <_ZN9GraphView11clearGraphsEv>:
{
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4604      	mov	r4, r0
        return graphLine.deleteValue(x);
    }

    void clear()
    {
        graphLine.clearGraph();
 8009198:	f500 7555 	add.w	r5, r0, #852	@ 0x354
 800919c:	f500 7060 	add.w	r0, r0, #896	@ 0x380
 80091a0:	f7fe fb18 	bl	80077d4 <_ZN13AbstractGraph10clearGraphEv>
 80091a4:	f204 60dc 	addw	r0, r4, #1756	@ 0x6dc
 80091a8:	f7fe fb14 	bl	80077d4 <_ZN13AbstractGraph10clearGraphEv>
    primaryGraph.invalidate();
 80091ac:	4628      	mov	r0, r5
 80091ae:	f011 f8ec 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    pointCounter = 0;
 80091b2:	f504 5080 	add.w	r0, r4, #4096	@ 0x1000
 80091b6:	2300      	movs	r3, #0
    graphType %= 3;
 80091b8:	2203      	movs	r2, #3
    pointCounter = 0;
 80091ba:	f8c0 3838 	str.w	r3, [r0, #2104]	@ 0x838
    graphX = 0;
 80091be:	f8c0 382c 	str.w	r3, [r0, #2092]	@ 0x82c
    leftX = 0;
 80091c2:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
    graphType++;
 80091c6:	f8d0 3830 	ldr.w	r3, [r0, #2096]	@ 0x830
 80091ca:	3301      	adds	r3, #1
    graphType %= 3;
 80091cc:	fb93 f2f2 	sdiv	r2, r3, r2
 80091d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80091d4:	1a9b      	subs	r3, r3, r2
 80091d6:	f8c0 3830 	str.w	r3, [r0, #2096]	@ 0x830
}
 80091da:	bd38      	pop	{r3, r4, r5, pc}

080091dc <_ZN9GraphView13resetPieChartEv>:
{
 80091dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e0:	b086      	sub	sp, #24
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 80091e2:	2600      	movs	r6, #0
{
 80091e4:	4604      	mov	r4, r0
 80091e6:	466d      	mov	r5, sp
    int sum = 0;
 80091e8:	4637      	mov	r7, r6
{
 80091ea:	46a8      	mov	r8, r5
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 80091ec:	3601      	adds	r6, #1
        shares[i] = Utils::randomNumberBetween(10, 100);
 80091ee:	2164      	movs	r1, #100	@ 0x64
 80091f0:	200a      	movs	r0, #10
 80091f2:	f7fa faad 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 80091f6:	2e06      	cmp	r6, #6
        sum += shares[i];
 80091f8:	4407      	add	r7, r0
        shares[i] = Utils::randomNumberBetween(10, 100);
 80091fa:	f848 0b04 	str.w	r0, [r8], #4
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 80091fe:	d1f5      	bne.n	80091ec <_ZN9GraphView13resetPieChartEv+0x10>
    int remaining = 100;
 8009200:	2264      	movs	r2, #100	@ 0x64
 8009202:	4628      	mov	r0, r5
 8009204:	2105      	movs	r1, #5
        shares[i] = (shares[i] * 100) / sum;
 8009206:	4616      	mov	r6, r2
 8009208:	6803      	ldr	r3, [r0, #0]
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS - 1; i++)
 800920a:	3901      	subs	r1, #1
        shares[i] = (shares[i] * 100) / sum;
 800920c:	fb06 f303 	mul.w	r3, r6, r3
 8009210:	fb93 f3f7 	sdiv	r3, r3, r7
        remaining -= shares[i];
 8009214:	eba2 0203 	sub.w	r2, r2, r3
        shares[i] = (shares[i] * 100) / sum;
 8009218:	f840 3b04 	str.w	r3, [r0], #4
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS - 1; i++)
 800921c:	d1f4      	bne.n	8009208 <_ZN9GraphView13resetPieChartEv+0x2c>
    pieChart.setSlices(shares);
 800921e:	f504 6642 	add.w	r6, r4, #3104	@ 0xc20
 8009222:	4629      	mov	r1, r5
    shares[NUMBER_OF_PIE_CHART_SECTIONS - 1] = remaining;
 8009224:	9205      	str	r2, [sp, #20]
    pieChart.setSlices(shares);
 8009226:	4630      	mov	r0, r6
 8009228:	f001 fd28 	bl	800ac7c <_ZN8PieChart9setSlicesEPi>
    pieChart.recalculatePieChart();
 800922c:	4630      	mov	r0, r6
 800922e:	f001 fd58 	bl	800ace2 <_ZN8PieChart19recalculatePieChartEv>
    pieChart.invalidate();
 8009232:	4630      	mov	r0, r6
 8009234:	f504 667a 	add.w	r6, r4, #4000	@ 0xfa0
 8009238:	f504 54b7 	add.w	r4, r4, #5856	@ 0x16e0
 800923c:	f011 f8a5 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8009240:	3410      	adds	r4, #16
        legendEntries[i].setValueText(shares[i]);
 8009242:	4630      	mov	r0, r6
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8009244:	f506 769c 	add.w	r6, r6, #312	@ 0x138
        legendEntries[i].setValueText(shares[i]);
 8009248:	f855 1b04 	ldr.w	r1, [r5], #4
 800924c:	f001 fb6a 	bl	800a924 <_ZN11LegendEntry12setValueTextEi>
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8009250:	42b4      	cmp	r4, r6
 8009252:	d1f6      	bne.n	8009242 <_ZN9GraphView13resetPieChartEv+0x66>
}
 8009254:	b006      	add	sp, #24
 8009256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800925a <_ZN9GraphView22setAllButtonsTouchableEb>:
        touchable = touch;
 800925a:	f880 1a30 	strb.w	r1, [r0, #2608]	@ 0xa30
 800925e:	f880 1a64 	strb.w	r1, [r0, #2660]	@ 0xa64
 8009262:	f880 1a98 	strb.w	r1, [r0, #2712]	@ 0xa98
 8009266:	f880 1ad0 	strb.w	r1, [r0, #2768]	@ 0xad0
 800926a:	f880 1b08 	strb.w	r1, [r0, #2824]	@ 0xb08
 800926e:	f880 1b40 	strb.w	r1, [r0, #2880]	@ 0xb40
 8009272:	f880 1b78 	strb.w	r1, [r0, #2936]	@ 0xb78
 8009276:	f880 1bb0 	strb.w	r1, [r0, #2992]	@ 0xbb0
 800927a:	f880 1be8 	strb.w	r1, [r0, #3048]	@ 0xbe8
}
 800927e:	4770      	bx	lr

08009280 <_ZN9GraphView29pieChartAnimationEndedHandlerERK8PieChart>:
{
 8009280:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (&thePieChart == &this->pieChart)
 8009282:	f500 6642 	add.w	r6, r0, #3104	@ 0xc20
{
 8009286:	b085      	sub	sp, #20
 8009288:	4604      	mov	r4, r0
    if (&thePieChart == &this->pieChart)
 800928a:	428e      	cmp	r6, r1
 800928c:	d129      	bne.n	80092e2 <_ZN9GraphView29pieChartAnimationEndedHandlerERK8PieChart+0x62>
        switch (pieChartAnimationType)
 800928e:	f500 5780 	add.w	r7, r0, #4096	@ 0x1000
 8009292:	f8d7 5844 	ldr.w	r5, [r7, #2116]	@ 0x844
 8009296:	b16d      	cbz	r5, 80092b4 <_ZN9GraphView29pieChartAnimationEndedHandlerERK8PieChart+0x34>
 8009298:	3d01      	subs	r5, #1
 800929a:	2d04      	cmp	r5, #4
 800929c:	d821      	bhi.n	80092e2 <_ZN9GraphView29pieChartAnimationEndedHandlerERK8PieChart+0x62>
            this->pieChart.activatePieChartAnimationEndedCallback(false);
 800929e:	4630      	mov	r0, r6
 80092a0:	2100      	movs	r1, #0
 80092a2:	f002 f844 	bl	800b32e <_ZN8PieChart38activatePieChartAnimationEndedCallbackEb>
            setAllButtonsTouchable(true);
 80092a6:	2101      	movs	r1, #1
 80092a8:	4620      	mov	r0, r4
}
 80092aa:	b005      	add	sp, #20
 80092ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setAllButtonsTouchable(true);
 80092b0:	f7ff bfd3 	b.w	800925a <_ZN9GraphView22setAllButtonsTouchableEb>
            resetPieChart();
 80092b4:	f7ff ff92 	bl	80091dc <_ZN9GraphView13resetPieChartEv>
            if (pieChartIsFull)
 80092b8:	f897 183c 	ldrb.w	r1, [r7, #2108]	@ 0x83c
 80092bc:	f8d4 2c10 	ldr.w	r2, [r4, #3088]	@ 0xc10
 80092c0:	4b0c      	ldr	r3, [pc, #48]	@ (80092f4 <_ZN9GraphView29pieChartAnimationEndedHandlerERK8PieChart+0x74>)
                this->pieChart.startPieChartAnimation(0, 360, 0, 60, pieChartRedraw2AnimateDuration, EasingEquations::quadEaseOut, EasingEquations::quadEaseOut);
 80092c2:	9201      	str	r2, [sp, #4]
 80092c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
            if (pieChartIsFull)
 80092c8:	b169      	cbz	r1, 80092e6 <_ZN9GraphView29pieChartAnimationEndedHandlerERK8PieChart+0x66>
                this->pieChart.startPieChartAnimation(0, 360, 0, 60, pieChartRedraw2AnimateDuration, EasingEquations::quadEaseOut, EasingEquations::quadEaseOut);
 80092ca:	233c      	movs	r3, #60	@ 0x3c
 80092cc:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80092d0:	4629      	mov	r1, r5
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	462b      	mov	r3, r5
                this->pieChart.startPieChartAnimation(-90, 90, 30, 90, pieChartRedraw2AnimateDuration, EasingEquations::quadEaseOut, EasingEquations::quadEaseOut);
 80092d6:	4630      	mov	r0, r6
 80092d8:	f001 fe8b 	bl	800aff2 <_ZN8PieChart22startPieChartAnimationEiiiiiPFstsstES1_>
            pieChartAnimationType = REDRAW_PIECHART2;
 80092dc:	2301      	movs	r3, #1
 80092de:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
}
 80092e2:	b005      	add	sp, #20
 80092e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                this->pieChart.startPieChartAnimation(-90, 90, 30, 90, pieChartRedraw2AnimateDuration, EasingEquations::quadEaseOut, EasingEquations::quadEaseOut);
 80092e6:	225a      	movs	r2, #90	@ 0x5a
 80092e8:	231e      	movs	r3, #30
 80092ea:	f06f 0159 	mvn.w	r1, #89	@ 0x59
 80092ee:	9200      	str	r2, [sp, #0]
 80092f0:	e7f1      	b.n	80092d6 <_ZN9GraphView29pieChartAnimationEndedHandlerERK8PieChart+0x56>
 80092f2:	bf00      	nop
 80092f4:	0801b62f 	.word	0x0801b62f

080092f8 <_ZN9GraphView20updateButtonSettingsEv>:
    if (currentState == GRAPH)
 80092f8:	f890 3100 	ldrb.w	r3, [r0, #256]	@ 0x100
{
 80092fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092fe:	4604      	mov	r4, r0
        graphOrPieButton.setBitmaps(Bitmap(BITMAP_PIE_TOGGLE_BUTTON_ACTIVE_ID), Bitmap(BITMAP_PIE_TOGGLE_BUTTON_INACTIVE_ID));
 8009300:	f500 6524 	add.w	r5, r0, #2624	@ 0xa40
    if (currentState == GRAPH)
 8009304:	bb2b      	cbnz	r3, 8009352 <_ZN9GraphView20updateButtonSettingsEv+0x5a>
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 8009306:	2367      	movs	r3, #103	@ 0x67
 8009308:	f8ad 3000 	strh.w	r3, [sp]
 800930c:	2368      	movs	r3, #104	@ 0x68
        graphOrPieButton.setBitmaps(Bitmap(BITMAP_GRAPH_TOGGLE_BUTTON_ACTIVE_ID), Bitmap(BITMAP_GRAPH_TOGGLE_BUTTON_INACTIVE_ID));
 800930e:	aa01      	add	r2, sp, #4
 8009310:	4669      	mov	r1, sp
 8009312:	4628      	mov	r0, r5
 8009314:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009318:	f00d ff12 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    graphOrPieButton.invalidate();
 800931c:	4628      	mov	r0, r5
        donutOrPieButton.setBitmaps(Bitmap(BITMAP_HALF_CIRCLE_TOGGLE_BUTTON_ACTIVE_ID), Bitmap(BITMAP_HALF_CIRCLE_TOGGLE_BUTTON_INACTIVE_ID));
 800931e:	f604 35c4 	addw	r5, r4, #3012	@ 0xbc4
    if (pieChartIsFull)
 8009322:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
    graphOrPieButton.invalidate();
 8009326:	f011 f830 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    if (pieChartIsFull)
 800932a:	f894 383c 	ldrb.w	r3, [r4, #2108]	@ 0x83c
 800932e:	b1bb      	cbz	r3, 8009360 <_ZN9GraphView20updateButtonSettingsEv+0x68>
 8009330:	234f      	movs	r3, #79	@ 0x4f
 8009332:	f8ad 3000 	strh.w	r3, [sp]
 8009336:	2350      	movs	r3, #80	@ 0x50
        donutOrPieButton.setBitmaps(Bitmap(BITMAP_PIE_TOGGLE_BUTTON_ACTIVE_ID), Bitmap(BITMAP_PIE_TOGGLE_BUTTON_INACTIVE_ID));
 8009338:	4628      	mov	r0, r5
 800933a:	aa01      	add	r2, sp, #4
 800933c:	4669      	mov	r1, sp
 800933e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009342:	f00d fefd 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    donutOrPieButton.invalidate();
 8009346:	4628      	mov	r0, r5
}
 8009348:	b003      	add	sp, #12
 800934a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    donutOrPieButton.invalidate();
 800934e:	f011 b81c 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    else if (currentState == PIE_CHART)
 8009352:	2b01      	cmp	r3, #1
 8009354:	d1e2      	bne.n	800931c <_ZN9GraphView20updateButtonSettingsEv+0x24>
 8009356:	2345      	movs	r3, #69	@ 0x45
 8009358:	f8ad 3000 	strh.w	r3, [sp]
 800935c:	2346      	movs	r3, #70	@ 0x46
 800935e:	e7d6      	b.n	800930e <_ZN9GraphView20updateButtonSettingsEv+0x16>
 8009360:	2367      	movs	r3, #103	@ 0x67
 8009362:	f8ad 3000 	strh.w	r3, [sp]
 8009366:	2368      	movs	r3, #104	@ 0x68
 8009368:	e7e6      	b.n	8009338 <_ZN9GraphView20updateButtonSettingsEv+0x40>

0800936a <_ZN9GraphView15setCurrentStateENS_5StateE>:
{
 800936a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800936c:	4604      	mov	r4, r0
    currentState = newState;
 800936e:	f880 1100 	strb.w	r1, [r0, #256]	@ 0x100
    clearGraphs();
 8009372:	f7ff ff0f 	bl	8009194 <_ZN9GraphView11clearGraphsEv>
    resetPieChart();
 8009376:	4620      	mov	r0, r4
        newButton.setBitmaps(Bitmap(BITMAP_NEW_GRAPH_ID), Bitmap(BITMAP_NEW_GRAPH_PRESSED_ID));
 8009378:	f604 250c 	addw	r5, r4, #2572	@ 0xa0c
    resetPieChart();
 800937c:	f7ff ff2e 	bl	80091dc <_ZN9GraphView13resetPieChartEv>
    pieChart.setVisible(currentState == PIE_CHART);
 8009380:	f894 3100 	ldrb.w	r3, [r4, #256]	@ 0x100
    pieChart.invalidate();
 8009384:	f504 6042 	add.w	r0, r4, #3104	@ 0xc20
    pieChart.setVisible(currentState == PIE_CHART);
 8009388:	1e59      	subs	r1, r3, #1
    primaryGraph.setVisible(currentState == GRAPH);
 800938a:	fab3 f383 	clz	r3, r3
    pieChart.setVisible(currentState == PIE_CHART);
 800938e:	424a      	negs	r2, r1
    primaryGraph.setVisible(currentState == GRAPH);
 8009390:	ea4f 1353 	mov.w	r3, r3, lsr #5
    pieChart.setVisible(currentState == PIE_CHART);
 8009394:	414a      	adcs	r2, r1
        visible = vis;
 8009396:	f884 3379 	strb.w	r3, [r4, #889]	@ 0x379
 800939a:	f884 36d5 	strb.w	r3, [r4, #1749]	@ 0x6d5
 800939e:	f884 2c45 	strb.w	r2, [r4, #3141]	@ 0xc45
    pieChart.invalidate();
 80093a2:	f010 fff2 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    primaryGraph.invalidate();
 80093a6:	f504 7055 	add.w	r0, r4, #852	@ 0x354
 80093aa:	f010 ffee 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    secondaryGraph.invalidate();
 80093ae:	f504 60d6 	add.w	r0, r4, #1712	@ 0x6b0
 80093b2:	f010 ffea 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    primaryGraphLineSetting.setVisible(currentState == GRAPH);
 80093b6:	f894 2100 	ldrb.w	r2, [r4, #256]	@ 0x100
    donutOrPieButton.setVisible(currentState == PIE_CHART);
 80093ba:	1e50      	subs	r0, r2, #1
    primaryGraphLineSetting.setVisible(currentState == GRAPH);
 80093bc:	fab2 f382 	clz	r3, r2
    donutOrPieButton.setVisible(currentState == PIE_CHART);
 80093c0:	4242      	negs	r2, r0
    primaryGraphLineSetting.setVisible(currentState == GRAPH);
 80093c2:	ea4f 1353 	mov.w	r3, r3, lsr #5
    donutOrPieButton.setVisible(currentState == PIE_CHART);
 80093c6:	4142      	adcs	r2, r0
 80093c8:	f884 3a99 	strb.w	r3, [r4, #2713]	@ 0xa99
 80093cc:	f884 3ad1 	strb.w	r3, [r4, #2769]	@ 0xad1
    primaryGraphLineSetting.invalidate();
 80093d0:	f604 2074 	addw	r0, r4, #2676	@ 0xa74
 80093d4:	f884 3b09 	strb.w	r3, [r4, #2825]	@ 0xb09
 80093d8:	f884 3b41 	strb.w	r3, [r4, #2881]	@ 0xb41
 80093dc:	f884 3b79 	strb.w	r3, [r4, #2937]	@ 0xb79
 80093e0:	f884 3bb1 	strb.w	r3, [r4, #2993]	@ 0xbb1
    donutOrPieButton.setVisible(currentState == PIE_CHART);
 80093e4:	f884 2be9 	strb.w	r2, [r4, #3049]	@ 0xbe9
    primaryGraphLineSetting.invalidate();
 80093e8:	f010 ffcf 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    primaryGraphDotSetting.invalidate();
 80093ec:	f604 20ac 	addw	r0, r4, #2732	@ 0xaac
 80093f0:	f010 ffcb 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    primaryGraphAreaSetting.invalidate();
 80093f4:	f604 20e4 	addw	r0, r4, #2788	@ 0xae4
 80093f8:	f010 ffc7 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    secondaryGraphLineSetting.invalidate();
 80093fc:	f604 301c 	addw	r0, r4, #2844	@ 0xb1c
 8009400:	f010 ffc3 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    secondaryGraphDotSetting.invalidate();
 8009404:	f604 3054 	addw	r0, r4, #2900	@ 0xb54
 8009408:	f010 ffbf 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    secondaryGraphAreaSetting.invalidate();
 800940c:	f604 308c 	addw	r0, r4, #2956	@ 0xb8c
 8009410:	f010 ffbb 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    donutOrPieButton.invalidate();
 8009414:	f604 30c4 	addw	r0, r4, #3012	@ 0xbc4
 8009418:	f010 ffb7 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    if (currentState == GRAPH)
 800941c:	f894 3100 	ldrb.w	r3, [r4, #256]	@ 0x100
 8009420:	bb73      	cbnz	r3, 8009480 <_ZN9GraphView15setCurrentStateENS_5StateE+0x116>
 8009422:	2357      	movs	r3, #87	@ 0x57
 8009424:	f8ad 3000 	strh.w	r3, [sp]
 8009428:	2358      	movs	r3, #88	@ 0x58
 800942a:	f504 7613 	add.w	r6, r4, #588	@ 0x24c
        newButton.setBitmaps(Bitmap(BITMAP_NEW_PIE_CHART_ID), Bitmap(BITMAP_NEW_PIE_CHART_PRESSED_ID));
 800942e:	4628      	mov	r0, r5
 8009430:	aa01      	add	r2, sp, #4
 8009432:	4669      	mov	r1, sp
 8009434:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009438:	4637      	mov	r7, r6
 800943a:	f00d fe81 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    newButton.invalidate();
 800943e:	4628      	mov	r0, r5
 8009440:	f504 75c6 	add.w	r5, r4, #396	@ 0x18c
 8009444:	f010 ffa1 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        graphGridLines[i].setVisible(currentState == GRAPH);
 8009448:	f894 3100 	ldrb.w	r3, [r4, #256]	@ 0x100
        graphGridLines[i].invalidate();
 800944c:	4628      	mov	r0, r5
    for (int i = 0; i < NUMBER_OF_GRID_LINES; i++)
 800944e:	3530      	adds	r5, #48	@ 0x30
        graphGridLines[i].setVisible(currentState == GRAPH);
 8009450:	fab3 f383 	clz	r3, r3
 8009454:	095b      	lsrs	r3, r3, #5
 8009456:	f805 3c0b 	strb.w	r3, [r5, #-11]
 800945a:	f886 3025 	strb.w	r3, [r6, #37]	@ 0x25
        graphGridLines[i].invalidate();
 800945e:	f855 3c30 	ldr.w	r3, [r5, #-48]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	4798      	blx	r3
        graphYValues[i].invalidate();
 8009466:	6833      	ldr	r3, [r6, #0]
 8009468:	4630      	mov	r0, r6
    for (int i = 0; i < NUMBER_OF_GRID_LINES; i++)
 800946a:	3638      	adds	r6, #56	@ 0x38
        graphYValues[i].invalidate();
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	4798      	blx	r3
    for (int i = 0; i < NUMBER_OF_GRID_LINES; i++)
 8009470:	42bd      	cmp	r5, r7
 8009472:	d1e9      	bne.n	8009448 <_ZN9GraphView15setCurrentStateENS_5StateE+0xde>
    updateButtonSettings();
 8009474:	4620      	mov	r0, r4
}
 8009476:	b003      	add	sp, #12
 8009478:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    updateButtonSettings();
 800947c:	f7ff bf3c 	b.w	80092f8 <_ZN9GraphView20updateButtonSettingsEv>
 8009480:	2359      	movs	r3, #89	@ 0x59
 8009482:	f8ad 3000 	strh.w	r3, [sp]
 8009486:	235a      	movs	r3, #90	@ 0x5a
 8009488:	e7cf      	b.n	800942a <_ZN9GraphView15setCurrentStateENS_5StateE+0xc0>
	...

0800948c <_ZN9GraphView22legendMoveEndedHandlerERKN8touchgfx12MoveAnimatorI11LegendEntryEE>:
    if (&legend == &legendEntries[0])
 800948c:	f500 637a 	add.w	r3, r0, #4000	@ 0xfa0
 8009490:	428b      	cmp	r3, r1
{
 8009492:	b510      	push	{r4, lr}
 8009494:	4604      	mov	r4, r0
    if (&legend == &legendEntries[0])
 8009496:	d10e      	bne.n	80094b6 <_ZN9GraphView22legendMoveEndedHandlerERKN8touchgfx12MoveAnimatorI11LegendEntryEE+0x2a>
        if (legendEntries[0].getX() > HAL::DISPLAY_WIDTH - 1)
 8009498:	4b07      	ldr	r3, [pc, #28]	@ (80094b8 <_ZN9GraphView22legendMoveEndedHandlerERKN8touchgfx12MoveAnimatorI11LegendEntryEE+0x2c>)
 800949a:	881a      	ldrh	r2, [r3, #0]
 800949c:	f9b0 3fa4 	ldrsh.w	r3, [r0, #4004]	@ 0xfa4
 80094a0:	429a      	cmp	r2, r3
 80094a2:	dc08      	bgt.n	80094b6 <_ZN9GraphView22legendMoveEndedHandlerERKN8touchgfx12MoveAnimatorI11LegendEntryEE+0x2a>
            setCurrentState(GRAPH);
 80094a4:	2100      	movs	r1, #0
 80094a6:	f7ff ff60 	bl	800936a <_ZN9GraphView15setCurrentStateENS_5StateE>
            setAllButtonsTouchable(true);
 80094aa:	4620      	mov	r0, r4
 80094ac:	2101      	movs	r1, #1
}
 80094ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            setAllButtonsTouchable(true);
 80094b2:	f7ff bed2 	b.w	800925a <_ZN9GraphView22setAllButtonsTouchableEb>
}
 80094b6:	bd10      	pop	{r4, pc}
 80094b8:	20024e28 	.word	0x20024e28

080094bc <_ZN8PieChartD1Ev>:
 *        angle and inner/outer radius allowing everything from a semi donut to a full circle
 *        to be drawn. A pie chart can also be animated from one look to another look.
 *
 * @see Container
 */
class PieChart : public Container
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4b07      	ldr	r3, [pc, #28]	@ (80094dc <_ZN8PieChartD1Ev+0x20>)
 80094c0:	4604      	mov	r4, r0
 80094c2:	f44f 75e2 	mov.w	r5, #452	@ 0x1c4
 80094c6:	6003      	str	r3, [r0, #0]
 80094c8:	5963      	ldr	r3, [r4, r5]
 80094ca:	1960      	adds	r0, r4, r5
 80094cc:	3d4c      	subs	r5, #76	@ 0x4c
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4798      	blx	r3
 80094d2:	1d2b      	adds	r3, r5, #4
 80094d4:	d1f8      	bne.n	80094c8 <_ZN8PieChartD1Ev+0xc>
 80094d6:	4620      	mov	r0, r4
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	bf00      	nop
 80094dc:	08022504 	.word	0x08022504

080094e0 <_ZN8touchgfx12MoveAnimatorI8PieChartED1Ev>:
    }
 80094e0:	4b03      	ldr	r3, [pc, #12]	@ (80094f0 <_ZN8touchgfx12MoveAnimatorI8PieChartED1Ev+0x10>)
    virtual ~MoveAnimator()
 80094e2:	b510      	push	{r4, lr}
 80094e4:	4604      	mov	r4, r0
    }
 80094e6:	6003      	str	r3, [r0, #0]
 80094e8:	f7ff ffe8 	bl	80094bc <_ZN8PieChartD1Ev>
 80094ec:	4620      	mov	r0, r4
 80094ee:	bd10      	pop	{r4, pc}
 80094f0:	08024534 	.word	0x08024534

080094f4 <_ZN8touchgfx12MoveAnimatorI8PieChartED0Ev>:
    virtual ~MoveAnimator()
 80094f4:	b510      	push	{r4, lr}
 80094f6:	4604      	mov	r4, r0
    }
 80094f8:	f7ff fff2 	bl	80094e0 <_ZN8touchgfx12MoveAnimatorI8PieChartED1Ev>
 80094fc:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8009500:	4620      	mov	r0, r4
 8009502:	f015 fb10 	bl	801eb26 <_ZdlPvj>
 8009506:	4620      	mov	r0, r4
 8009508:	bd10      	pop	{r4, pc}

0800950a <_ZN8PieChartD0Ev>:
 800950a:	b510      	push	{r4, lr}
 800950c:	4604      	mov	r4, r0
 800950e:	f7ff ffd5 	bl	80094bc <_ZN8PieChartD1Ev>
 8009512:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 8009516:	4620      	mov	r0, r4
 8009518:	f015 fb05 	bl	801eb26 <_ZdlPvj>
 800951c:	4620      	mov	r0, r4
 800951e:	bd10      	pop	{r4, pc}

08009520 <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv>:
        if (moveAnimationRunning)
 8009520:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
    void nextMoveAnimationStep()
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 800952a:	b143      	cbz	r3, 800953e <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv+0x1e>
            if (moveAnimationCounter < moveAnimationDelay)
 800952c:	f8b0 211e 	ldrh.w	r2, [r0, #286]	@ 0x11e
 8009530:	f8b0 1120 	ldrh.w	r1, [r0, #288]	@ 0x120
 8009534:	428a      	cmp	r2, r1
 8009536:	d204      	bcs.n	8009542 <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv+0x22>
                moveAnimationCounter++;
 8009538:	3201      	adds	r2, #1
 800953a:	f8a0 211e 	strh.w	r2, [r0, #286]	@ 0x11e
    }
 800953e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8009542:	f8b0 3122 	ldrh.w	r3, [r0, #290]	@ 0x122
 8009546:	18c8      	adds	r0, r1, r3
 8009548:	4282      	cmp	r2, r0
 800954a:	d91a      	bls.n	8009582 <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv+0x62>
                    moveAnimationRunning = false;
 800954c:	2300      	movs	r3, #0
 800954e:	f884 311c 	strb.w	r3, [r4, #284]	@ 0x11c
                    moveAnimationCounter = 0;
 8009552:	f8a4 311e 	strh.w	r3, [r4, #286]	@ 0x11e
                    Application::getInstance()->unregisterTimerWidget(this);
 8009556:	f010 fb2d 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800955a:	4621      	mov	r1, r4
 800955c:	f010 fb60 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8009560:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
 8009564:	2800      	cmp	r0, #0
 8009566:	d0ea      	beq.n	800953e <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv+0x1e>
 8009568:	6803      	ldr	r3, [r0, #0]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	4798      	blx	r3
 800956e:	2800      	cmp	r0, #0
 8009570:	d0e5      	beq.n	800953e <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv+0x1e>
                        moveAnimationEndedCallback->execute(*this);
 8009572:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
 8009576:	4621      	mov	r1, r4
 8009578:	6803      	ldr	r3, [r0, #0]
    }
 800957a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        moveAnimationEndedCallback->execute(*this);
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	4718      	bx	r3
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8009582:	1a52      	subs	r2, r2, r1
 8009584:	f8b4 1124 	ldrh.w	r1, [r4, #292]	@ 0x124
 8009588:	f8d4 612c 	ldr.w	r6, [r4, #300]	@ 0x12c
 800958c:	b295      	uxth	r5, r2
 800958e:	f8b4 2128 	ldrh.w	r2, [r4, #296]	@ 0x128
 8009592:	1a52      	subs	r2, r2, r1
 8009594:	4628      	mov	r0, r5
 8009596:	2100      	movs	r1, #0
 8009598:	b212      	sxth	r2, r2
 800959a:	47b0      	blx	r6
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800959c:	f8b4 3126 	ldrh.w	r3, [r4, #294]	@ 0x126
 80095a0:	f8b4 212a 	ldrh.w	r2, [r4, #298]	@ 0x12a
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 80095a4:	4606      	mov	r6, r0
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 80095a6:	2100      	movs	r1, #0
 80095a8:	f8d4 7130 	ldr.w	r7, [r4, #304]	@ 0x130
 80095ac:	1ad2      	subs	r2, r2, r3
 80095ae:	4628      	mov	r0, r5
 80095b0:	f8b4 3122 	ldrh.w	r3, [r4, #290]	@ 0x122
 80095b4:	b212      	sxth	r2, r2
 80095b6:	47b8      	blx	r7
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 80095b8:	f8b4 3126 	ldrh.w	r3, [r4, #294]	@ 0x126
 80095bc:	18c2      	adds	r2, r0, r3
 80095be:	f8b4 3124 	ldrh.w	r3, [r4, #292]	@ 0x124
 80095c2:	4620      	mov	r0, r4
 80095c4:	18f1      	adds	r1, r6, r3
 80095c6:	b212      	sxth	r2, r2
 80095c8:	b209      	sxth	r1, r1
 80095ca:	f7f7 fc1f 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 80095ce:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80095d2:	f8b4 2120 	ldrh.w	r2, [r4, #288]	@ 0x120
                    moveAnimationCounter++;
 80095d6:	3301      	adds	r3, #1
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80095d8:	f8b4 1122 	ldrh.w	r1, [r4, #290]	@ 0x122
                    moveAnimationCounter++;
 80095dc:	b29b      	uxth	r3, r3
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80095de:	440a      	add	r2, r1
 80095e0:	4293      	cmp	r3, r2
                    moveAnimationCounter++;
 80095e2:	f8a4 311e 	strh.w	r3, [r4, #286]	@ 0x11e
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80095e6:	d9aa      	bls.n	800953e <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv+0x1e>
 80095e8:	e7b0      	b.n	800954c <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv+0x2c>

080095ea <_ZN8touchgfx12MoveAnimatorI11LegendEntryE15handleTickEventEv>:
    virtual void handleTickEvent()
 80095ea:	b508      	push	{r3, lr}
        nextMoveAnimationStep();
 80095ec:	f7ff ff98 	bl	8009520 <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv>
    }
 80095f0:	bd08      	pop	{r3, pc}

080095f2 <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv>:
        if (moveAnimationRunning)
 80095f2:	f890 32a5 	ldrb.w	r3, [r0, #677]	@ 0x2a5
    void nextMoveAnimationStep()
 80095f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095fa:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 80095fc:	b143      	cbz	r3, 8009610 <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv+0x1e>
            if (moveAnimationCounter < moveAnimationDelay)
 80095fe:	f8b0 22a6 	ldrh.w	r2, [r0, #678]	@ 0x2a6
 8009602:	f8b0 12a8 	ldrh.w	r1, [r0, #680]	@ 0x2a8
 8009606:	428a      	cmp	r2, r1
 8009608:	d204      	bcs.n	8009614 <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv+0x22>
                moveAnimationCounter++;
 800960a:	3201      	adds	r2, #1
 800960c:	f8a0 22a6 	strh.w	r2, [r0, #678]	@ 0x2a6
    }
 8009610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8009614:	f8b0 32aa 	ldrh.w	r3, [r0, #682]	@ 0x2aa
 8009618:	18c8      	adds	r0, r1, r3
 800961a:	4282      	cmp	r2, r0
 800961c:	d91a      	bls.n	8009654 <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv+0x62>
                    moveAnimationRunning = false;
 800961e:	2300      	movs	r3, #0
 8009620:	f884 32a5 	strb.w	r3, [r4, #677]	@ 0x2a5
                    moveAnimationCounter = 0;
 8009624:	f8a4 32a6 	strh.w	r3, [r4, #678]	@ 0x2a6
                    Application::getInstance()->unregisterTimerWidget(this);
 8009628:	f010 fac4 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800962c:	4621      	mov	r1, r4
 800962e:	f010 faf7 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8009632:	f8d4 02bc 	ldr.w	r0, [r4, #700]	@ 0x2bc
 8009636:	2800      	cmp	r0, #0
 8009638:	d0ea      	beq.n	8009610 <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv+0x1e>
 800963a:	6803      	ldr	r3, [r0, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	4798      	blx	r3
 8009640:	2800      	cmp	r0, #0
 8009642:	d0e5      	beq.n	8009610 <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv+0x1e>
                        moveAnimationEndedCallback->execute(*this);
 8009644:	f8d4 02bc 	ldr.w	r0, [r4, #700]	@ 0x2bc
 8009648:	4621      	mov	r1, r4
 800964a:	6803      	ldr	r3, [r0, #0]
    }
 800964c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        moveAnimationEndedCallback->execute(*this);
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	4718      	bx	r3
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8009654:	1a52      	subs	r2, r2, r1
 8009656:	f8b4 12ac 	ldrh.w	r1, [r4, #684]	@ 0x2ac
 800965a:	f8d4 62b4 	ldr.w	r6, [r4, #692]	@ 0x2b4
 800965e:	b295      	uxth	r5, r2
 8009660:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 8009664:	1a52      	subs	r2, r2, r1
 8009666:	4628      	mov	r0, r5
 8009668:	2100      	movs	r1, #0
 800966a:	b212      	sxth	r2, r2
 800966c:	47b0      	blx	r6
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800966e:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8009672:	f8b4 22b2 	ldrh.w	r2, [r4, #690]	@ 0x2b2
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8009676:	4606      	mov	r6, r0
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8009678:	2100      	movs	r1, #0
 800967a:	f8d4 72b8 	ldr.w	r7, [r4, #696]	@ 0x2b8
 800967e:	1ad2      	subs	r2, r2, r3
 8009680:	4628      	mov	r0, r5
 8009682:	f8b4 32aa 	ldrh.w	r3, [r4, #682]	@ 0x2aa
 8009686:	b212      	sxth	r2, r2
 8009688:	47b8      	blx	r7
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800968a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 800968e:	18c2      	adds	r2, r0, r3
 8009690:	f8b4 32ac 	ldrh.w	r3, [r4, #684]	@ 0x2ac
 8009694:	4620      	mov	r0, r4
 8009696:	18f1      	adds	r1, r6, r3
 8009698:	b212      	sxth	r2, r2
 800969a:	b209      	sxth	r1, r1
 800969c:	f7f7 fbb6 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 80096a0:	f8b4 32a6 	ldrh.w	r3, [r4, #678]	@ 0x2a6
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80096a4:	f8b4 22a8 	ldrh.w	r2, [r4, #680]	@ 0x2a8
                    moveAnimationCounter++;
 80096a8:	3301      	adds	r3, #1
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80096aa:	f8b4 12aa 	ldrh.w	r1, [r4, #682]	@ 0x2aa
                    moveAnimationCounter++;
 80096ae:	b29b      	uxth	r3, r3
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80096b0:	440a      	add	r2, r1
 80096b2:	4293      	cmp	r3, r2
                    moveAnimationCounter++;
 80096b4:	f8a4 32a6 	strh.w	r3, [r4, #678]	@ 0x2a6
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80096b8:	d9aa      	bls.n	8009610 <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv+0x1e>
 80096ba:	e7b0      	b.n	800961e <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv+0x2c>

080096bc <_ZN8touchgfx12MoveAnimatorI8PieChartE15handleTickEventEv>:
    virtual void handleTickEvent()
 80096bc:	b510      	push	{r4, lr}
 80096be:	4604      	mov	r4, r0
        T::handleTickEvent();
 80096c0:	f001 fbed 	bl	800ae9e <_ZN8PieChart15handleTickEventEv>
        nextMoveAnimationStep();
 80096c4:	4620      	mov	r0, r4
 80096c6:	f7ff ff94 	bl	80095f2 <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv>
    }
 80096ca:	bd10      	pop	{r4, pc}

080096cc <_ZN8touchgfx12MoveAnimatorI8PieChartE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	461d      	mov	r5, r3
        if (!moveAnimationRunning)
 80096d0:	f890 32a5 	ldrb.w	r3, [r0, #677]	@ 0x2a5
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 80096d4:	4604      	mov	r4, r0
 80096d6:	460f      	mov	r7, r1
 80096d8:	4616      	mov	r6, r2
        if (!moveAnimationRunning)
 80096da:	b923      	cbnz	r3, 80096e6 <_ZN8touchgfx12MoveAnimatorI8PieChartE18startMoveAnimationEsstPFstsstES4_+0x1a>
            Application::getInstance()->registerTimerWidget(this);
 80096dc:	f010 fa6a 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 80096e0:	4621      	mov	r1, r4
 80096e2:	f010 fa6d 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 80096e6:	2300      	movs	r3, #0
        moveAnimationDuration = duration;
 80096e8:	f8a4 52aa 	strh.w	r5, [r4, #682]	@ 0x2aa
        moveAnimationEndX = endX;
 80096ec:	f8a4 72b0 	strh.w	r7, [r4, #688]	@ 0x2b0
        moveAnimationCounter = 0;
 80096f0:	f8a4 32a6 	strh.w	r3, [r4, #678]	@ 0x2a6
        moveAnimationStartX = T::getX();
 80096f4:	6863      	ldr	r3, [r4, #4]
        moveAnimationEndY = endY;
 80096f6:	f8a4 62b2 	strh.w	r6, [r4, #690]	@ 0x2b2
        moveAnimationStartX = T::getX();
 80096fa:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
        moveAnimationXEquation = xProgressionEquation;
 80096fe:	9b06      	ldr	r3, [sp, #24]
 8009700:	f8c4 32b4 	str.w	r3, [r4, #692]	@ 0x2b4
        moveAnimationYEquation = yProgressionEquation;
 8009704:	9b07      	ldr	r3, [sp, #28]
 8009706:	f8c4 32b8 	str.w	r3, [r4, #696]	@ 0x2b8
        moveAnimationRunning = true;
 800970a:	2301      	movs	r3, #1
 800970c:	f884 32a5 	strb.w	r3, [r4, #677]	@ 0x2a5
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 8009710:	f8d4 32a8 	ldr.w	r3, [r4, #680]	@ 0x2a8
 8009714:	b913      	cbnz	r3, 800971c <_ZN8touchgfx12MoveAnimatorI8PieChartE18startMoveAnimationEsstPFstsstES4_+0x50>
            nextMoveAnimationStep(); // Set end position and shut down
 8009716:	4620      	mov	r0, r4
 8009718:	f7ff ff6b 	bl	80095f2 <_ZN8touchgfx12MoveAnimatorI8PieChartE21nextMoveAnimationStepEv>
    }
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800971e <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv>:
        if (moveAnimationRunning)
 800971e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
    void nextMoveAnimationStep()
 8009722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009726:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 8009728:	b12b      	cbz	r3, 8009736 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x18>
            if (moveAnimationCounter < moveAnimationDelay)
 800972a:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 800972c:	8e01      	ldrh	r1, [r0, #48]	@ 0x30
 800972e:	428a      	cmp	r2, r1
 8009730:	d203      	bcs.n	800973a <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x1c>
                moveAnimationCounter++;
 8009732:	3201      	adds	r2, #1
 8009734:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    }
 8009736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800973a:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800973c:	18c8      	adds	r0, r1, r3
 800973e:	4282      	cmp	r2, r0
 8009740:	d917      	bls.n	8009772 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x54>
                    moveAnimationRunning = false;
 8009742:	2300      	movs	r3, #0
 8009744:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
                    moveAnimationCounter = 0;
 8009748:	85e3      	strh	r3, [r4, #46]	@ 0x2e
                    Application::getInstance()->unregisterTimerWidget(this);
 800974a:	f010 fa33 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800974e:	4621      	mov	r1, r4
 8009750:	f010 fa66 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8009754:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009756:	2800      	cmp	r0, #0
 8009758:	d0ed      	beq.n	8009736 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x18>
 800975a:	6803      	ldr	r3, [r0, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	4798      	blx	r3
 8009760:	2800      	cmp	r0, #0
 8009762:	d0e8      	beq.n	8009736 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x18>
                        moveAnimationEndedCallback->execute(*this);
 8009764:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009766:	4621      	mov	r1, r4
 8009768:	6803      	ldr	r3, [r0, #0]
    }
 800976a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        moveAnimationEndedCallback->execute(*this);
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	4718      	bx	r3
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8009772:	1a52      	subs	r2, r2, r1
 8009774:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8009776:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8009778:	b295      	uxth	r5, r2
 800977a:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 800977c:	1a52      	subs	r2, r2, r1
 800977e:	4628      	mov	r0, r5
 8009780:	2100      	movs	r1, #0
 8009782:	b212      	sxth	r2, r2
 8009784:	47b0      	blx	r6
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8009786:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009788:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800978a:	4606      	mov	r6, r0
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800978c:	2100      	movs	r1, #0
 800978e:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 8009790:	1ad2      	subs	r2, r2, r3
 8009792:	4628      	mov	r0, r5
 8009794:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8009796:	b212      	sxth	r2, r2
 8009798:	47b8      	blx	r7
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800979a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800979c:	18c2      	adds	r2, r0, r3
 800979e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80097a0:	4620      	mov	r0, r4
 80097a2:	18f1      	adds	r1, r6, r3
 80097a4:	b212      	sxth	r2, r2
 80097a6:	b209      	sxth	r1, r1
 80097a8:	f7f7 fb30 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 80097ac:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80097ae:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
                    moveAnimationCounter++;
 80097b0:	3301      	adds	r3, #1
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80097b2:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
                    moveAnimationCounter++;
 80097b4:	b29b      	uxth	r3, r3
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80097b6:	440a      	add	r2, r1
 80097b8:	4293      	cmp	r3, r2
                    moveAnimationCounter++;
 80097ba:	85e3      	strh	r3, [r4, #46]	@ 0x2e
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80097bc:	d9bb      	bls.n	8009736 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x18>
 80097be:	e7c0      	b.n	8009742 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x24>

080097c0 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE15handleTickEventEv>:
    virtual void handleTickEvent()
 80097c0:	b508      	push	{r3, lr}
        nextMoveAnimationStep();
 80097c2:	f7ff ffac 	bl	800971e <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv>
    }
 80097c6:	bd08      	pop	{r3, pc}

080097c8 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi>:
    switch (currentMenuState)
 80097c8:	2901      	cmp	r1, #1
{
 80097ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ce:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
    currentMenuState = newState;
 80097d2:	f880 1101 	strb.w	r1, [r0, #257]	@ 0x101
    switch (currentMenuState)
 80097d6:	d01c      	beq.n	8009812 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x4a>
 80097d8:	2902      	cmp	r1, #2
 80097da:	d01f      	beq.n	800981c <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x54>
 80097dc:	b199      	cbz	r1, 8009806 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x3e>
{
 80097de:	2300      	movs	r3, #0
        this->alpha = alpha;
 80097e0:	21ff      	movs	r1, #255	@ 0xff
        topMenuContainer.moveTo(topMenuContainer.getX(), toY);
 80097e2:	f500 55b7 	add.w	r5, r0, #5856	@ 0x16e0
    if (duration < 2)
 80097e6:	2a01      	cmp	r2, #1
        topMenuContainer.moveTo(topMenuContainer.getX(), toY);
 80097e8:	b21e      	sxth	r6, r3
 80097ea:	f105 0510 	add.w	r5, r5, #16
        return rect.x;
 80097ee:	f9b4 86f4 	ldrsh.w	r8, [r4, #1780]	@ 0x6f4
 80097f2:	f884 175e 	strb.w	r1, [r4, #1886]	@ 0x75e
    if (duration < 2)
 80097f6:	dc16      	bgt.n	8009826 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x5e>
        topMenuContainer.moveTo(topMenuContainer.getX(), toY);
 80097f8:	4632      	mov	r2, r6
 80097fa:	4641      	mov	r1, r8
 80097fc:	4628      	mov	r0, r5
 80097fe:	f7f7 fb05 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
}
 8009802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        toY = -topMenuContainer.getHeight();
 8009806:	f9b4 36fa 	ldrsh.w	r3, [r4, #1786]	@ 0x6fa
 800980a:	425b      	negs	r3, r3
        automaticTopMenuCollapseTimeout = 0;
 800980c:	f8c4 1840 	str.w	r1, [r4, #2112]	@ 0x840
        break;
 8009810:	e7e6      	b.n	80097e0 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x18>
        toY = -topMenuButton.getY();
 8009812:	f9b4 379a 	ldrsh.w	r3, [r4, #1946]	@ 0x79a
        automaticTopMenuCollapseTimeout = 0;
 8009816:	2100      	movs	r1, #0
        toY = -topMenuButton.getY();
 8009818:	425b      	negs	r3, r3
        automaticTopMenuCollapseTimeout = 0;
 800981a:	e7f7      	b.n	800980c <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x44>
        automaticTopMenuCollapseTimeout = TOP_MENU_COLLAPSE_TIMEOUT;
 800981c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8009820:	f8c4 3840 	str.w	r3, [r4, #2112]	@ 0x840
        break;
 8009824:	e7db      	b.n	80097de <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x16>
        if (!moveAnimationRunning)
 8009826:	f894 371c 	ldrb.w	r3, [r4, #1820]	@ 0x71c
        topMenuContainer.startMoveAnimation(topMenuContainer.getX(), toY, duration, EasingEquations::linearEaseNone, EasingEquations::cubicEaseInOut);
 800982a:	b297      	uxth	r7, r2
 800982c:	b923      	cbnz	r3, 8009838 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x70>
            Application::getInstance()->registerTimerWidget(this);
 800982e:	f010 f9c1 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8009832:	4629      	mov	r1, r5
 8009834:	f010 f9c4 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 8009838:	2300      	movs	r3, #0
        moveAnimationDuration = duration;
 800983a:	f8a4 7722 	strh.w	r7, [r4, #1826]	@ 0x722
        moveAnimationEndX = endX;
 800983e:	f8a4 8728 	strh.w	r8, [r4, #1832]	@ 0x728
        moveAnimationCounter = 0;
 8009842:	f8a4 371e 	strh.w	r3, [r4, #1822]	@ 0x71e
        moveAnimationStartX = T::getX();
 8009846:	f8d4 36f4 	ldr.w	r3, [r4, #1780]	@ 0x6f4
        moveAnimationEndY = endY;
 800984a:	f8a4 672a 	strh.w	r6, [r4, #1834]	@ 0x72a
        moveAnimationStartX = T::getX();
 800984e:	f8c4 3724 	str.w	r3, [r4, #1828]	@ 0x724
        moveAnimationXEquation = xProgressionEquation;
 8009852:	4b08      	ldr	r3, [pc, #32]	@ (8009874 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0xac>)
 8009854:	f8c4 372c 	str.w	r3, [r4, #1836]	@ 0x72c
        moveAnimationYEquation = yProgressionEquation;
 8009858:	4b07      	ldr	r3, [pc, #28]	@ (8009878 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0xb0>)
 800985a:	f8c4 3730 	str.w	r3, [r4, #1840]	@ 0x730
        moveAnimationRunning = true;
 800985e:	2301      	movs	r3, #1
 8009860:	f884 371c 	strb.w	r3, [r4, #1820]	@ 0x71c
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 8009864:	f8d4 3720 	ldr.w	r3, [r4, #1824]	@ 0x720
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1ca      	bne.n	8009802 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x3a>
            nextMoveAnimationStep(); // Set end position and shut down
 800986c:	4628      	mov	r0, r5
 800986e:	f7ff ff56 	bl	800971e <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv>
}
 8009872:	e7c6      	b.n	8009802 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi+0x3a>
 8009874:	0801b59b 	.word	0x0801b59b
 8009878:	0801b1ed 	.word	0x0801b1ed

0800987c <_ZN9GraphView11setupScreenEv>:
{
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	4604      	mov	r4, r0
 8009882:	b08f      	sub	sp, #60	@ 0x3c
    graphArea.setPosition(0, 0, HAL::DISPLAY_WIDTH, 198);
 8009884:	2200      	movs	r2, #0
 8009886:	f500 7798 	add.w	r7, r0, #304	@ 0x130
 800988a:	23c6      	movs	r3, #198	@ 0xc6
 800988c:	f8df b35c 	ldr.w	fp, [pc, #860]	@ 8009bec <_ZN9GraphView11setupScreenEv+0x370>
 8009890:	1d26      	adds	r6, r4, #4
 8009892:	4611      	mov	r1, r2
 8009894:	4638      	mov	r0, r7
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	f9bb 3000 	ldrsh.w	r3, [fp]
    graphBackground.setPosition(0, 0, graphArea.getWidth(), graphArea.getHeight());
 800989c:	f504 75ae 	add.w	r5, r4, #348	@ 0x15c
    graphArea.setPosition(0, 0, HAL::DISPLAY_WIDTH, 198);
 80098a0:	f7f7 fa86 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80098a4:	4639      	mov	r1, r7
 80098a6:	4630      	mov	r0, r6
 80098a8:	f504 78c6 	add.w	r8, r4, #396	@ 0x18c
 80098ac:	f009 fa50 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graphBackground.setPosition(0, 0, graphArea.getWidth(), graphArea.getHeight());
 80098b0:	f9b4 313a 	ldrsh.w	r3, [r4, #314]	@ 0x13a
 80098b4:	2200      	movs	r2, #0
 80098b6:	4628      	mov	r0, r5
 80098b8:	9300      	str	r3, [sp, #0]
    int graphHeight = graphBackground.getHeight() - graphYOffset;
 80098ba:	f04f 0900 	mov.w	r9, #0
    graphBackground.setPosition(0, 0, graphArea.getWidth(), graphArea.getHeight());
 80098be:	f9b4 3138 	ldrsh.w	r3, [r4, #312]	@ 0x138
 80098c2:	4611      	mov	r1, r2
 80098c4:	f7f7 fa74 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    graphBackground.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 80098c8:	22ff      	movs	r2, #255	@ 0xff
 80098ca:	4611      	mov	r1, r2
 80098cc:	4610      	mov	r0, r2
 80098ce:	f012 fefb 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    graphArea.add(graphBackground);
 80098d2:	4629      	mov	r1, r5
        this->color = color;
 80098d4:	f8c4 0184 	str.w	r0, [r4, #388]	@ 0x184
    backgroundBottom.setBitmap(Bitmap(BITMAP_GRAPH_BACKGROUND_BOTTOM_ID));
 80098d8:	f504 7582 	add.w	r5, r4, #260	@ 0x104
    graphArea.add(graphBackground);
 80098dc:	4638      	mov	r0, r7
 80098de:	f009 fa37 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80098e2:	2342      	movs	r3, #66	@ 0x42
    backgroundBottom.setBitmap(Bitmap(BITMAP_GRAPH_BACKGROUND_BOTTOM_ID));
 80098e4:	4628      	mov	r0, r5
 80098e6:	a908      	add	r1, sp, #32
 80098e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80098ec:	f00d fd2f 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        return y + height;
 80098f0:	f8b4 3136 	ldrh.w	r3, [r4, #310]	@ 0x136
    backgroundBottom.setXY(0, graphArea.getRect().bottom());
 80098f4:	4628      	mov	r0, r5
 80098f6:	f8b4 213a 	ldrh.w	r2, [r4, #314]	@ 0x13a
 80098fa:	2100      	movs	r1, #0
 80098fc:	441a      	add	r2, r3
 80098fe:	b212      	sxth	r2, r2
 8009900:	f7f7 fa6e 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8009904:	4629      	mov	r1, r5
 8009906:	4630      	mov	r0, r6
 8009908:	f504 7513 	add.w	r5, r4, #588	@ 0x24c
 800990c:	f009 fa20 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    int graphHeight = graphBackground.getHeight() - graphYOffset;
 8009910:	f9b4 3166 	ldrsh.w	r3, [r4, #358]	@ 0x166
 8009914:	3b0a      	subs	r3, #10
 8009916:	9303      	str	r3, [sp, #12]
        graphGridLines[i].setColor(Color::getColorFrom24BitRGB(0xE1, 0xE4, 0xE6));
 8009918:	22e6      	movs	r2, #230	@ 0xe6
 800991a:	21e4      	movs	r1, #228	@ 0xe4
 800991c:	20e1      	movs	r0, #225	@ 0xe1
 800991e:	f012 fed3 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        graphGridLines[i].setPosition(graphXOffset, 38 + 40 * i, graphWidth, 1);
 8009922:	f8d8 3000 	ldr.w	r3, [r8]
 8009926:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800992a:	2101      	movs	r1, #1
 800992c:	f8c8 0028 	str.w	r0, [r8, #40]	@ 0x28
 8009930:	4640      	mov	r0, r8
 8009932:	3226      	adds	r2, #38	@ 0x26
 8009934:	9100      	str	r1, [sp, #0]
 8009936:	212c      	movs	r1, #44	@ 0x2c
 8009938:	f8d3 a028 	ldr.w	sl, [r3, #40]	@ 0x28
 800993c:	b212      	sxth	r2, r2
 800993e:	f240 139f 	movw	r3, #415	@ 0x19f
 8009942:	47d0      	blx	sl
        graphArea.add(graphGridLines[i]);
 8009944:	4641      	mov	r1, r8
 8009946:	4638      	mov	r0, r7
        Unicode::snprintf(graphYValuesbuf[i], 5, "%d", 80 - i * 20);
 8009948:	f504 7a4b 	add.w	sl, r4, #812	@ 0x32c
        graphArea.add(graphGridLines[i]);
 800994c:	f009 fa00 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        Unicode::snprintf(graphYValuesbuf[i], 5, "%d", 80 - i * 20);
 8009950:	f06f 0301 	mvn.w	r3, #1
 8009954:	44ca      	add	sl, r9
 8009956:	4aa4      	ldr	r2, [pc, #656]	@ (8009be8 <_ZN9GraphView11setupScreenEv+0x36c>)
 8009958:	fb03 f309 	mul.w	r3, r3, r9
 800995c:	2105      	movs	r1, #5
 800995e:	4650      	mov	r0, sl
    for (int i = 0; i < NUMBER_OF_GRID_LINES; i++)
 8009960:	f109 090a 	add.w	r9, r9, #10
        Unicode::snprintf(graphYValuesbuf[i], 5, "%d", 80 - i * 20);
 8009964:	3350      	adds	r3, #80	@ 0x50
    for (int i = 0; i < NUMBER_OF_GRID_LINES; i++)
 8009966:	f108 0830 	add.w	r8, r8, #48	@ 0x30
        Unicode::snprintf(graphYValuesbuf[i], 5, "%d", 80 - i * 20);
 800996a:	f012 fe9f 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        graphYValues[i].setTypedText(TypedText(T_GRAPH_Y_VALUE));
 800996e:	f04f 012f 	mov.w	r1, #47	@ 0x2f
 8009972:	4628      	mov	r0, r5
 8009974:	f00d fb5c 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8009978:	f858 3c08 	ldr.w	r3, [r8, #-8]
        graphYValues[i].resizeToCurrentText();
 800997c:	4628      	mov	r0, r5
 800997e:	f8c5 a034 	str.w	sl, [r5, #52]	@ 0x34
 8009982:	62ab      	str	r3, [r5, #40]	@ 0x28
 8009984:	f00d fb2a 	bl	8016fdc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        graphYValues[i].setXY(graphGridLines[i].getX() - graphYValues[i].getWidth() - 6, graphGridLines[i].getY() - (graphYValues[i].getTypedText().getFont()->getFontHeight() / 2) - 2);
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	f838 ac2c 	ldrh.w	sl, [r8, #-44]
 800998e:	a808      	add	r0, sp, #32
 8009990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009992:	f1aa 0a06 	sub.w	sl, sl, #6
 8009996:	9304      	str	r3, [sp, #16]
 8009998:	892b      	ldrh	r3, [r5, #8]
 800999a:	ebaa 0a03 	sub.w	sl, sl, r3
 800999e:	8ceb      	ldrh	r3, [r5, #38]	@ 0x26
 80099a0:	fa0f f18a 	sxth.w	r1, sl
 80099a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80099a8:	f838 ac2a 	ldrh.w	sl, [r8, #-42]
 80099ac:	9105      	str	r1, [sp, #20]
 80099ae:	f7f9 f951 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 80099b2:	6803      	ldr	r3, [r0, #0]
 80099b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b6:	4798      	blx	r3
 80099b8:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80099bc:	9905      	ldr	r1, [sp, #20]
 80099be:	eba3 0350 	sub.w	r3, r3, r0, lsr #1
 80099c2:	4628      	mov	r0, r5
 80099c4:	eb0a 0203 	add.w	r2, sl, r3
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	b212      	sxth	r2, r2
 80099cc:	4798      	blx	r3
        graphArea.add(graphYValues[i]);
 80099ce:	4629      	mov	r1, r5
 80099d0:	4638      	mov	r0, r7
    for (int i = 0; i < NUMBER_OF_GRID_LINES; i++)
 80099d2:	3538      	adds	r5, #56	@ 0x38
        graphArea.add(graphYValues[i]);
 80099d4:	f009 f9bc 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for (int i = 0; i < NUMBER_OF_GRID_LINES; i++)
 80099d8:	f1b9 0f28 	cmp.w	r9, #40	@ 0x28
 80099dc:	d19c      	bne.n	8009918 <_ZN9GraphView11setupScreenEv+0x9c>
    primaryGraph.setXY(graphXOffset, graphYOffset);
 80099de:	f504 7555 	add.w	r5, r4, #852	@ 0x354
 80099e2:	220a      	movs	r2, #10
 80099e4:	212c      	movs	r1, #44	@ 0x2c
    pieChart.setPosition(pieChartX, pieChartY, 240, 240);
 80099e6:	f504 6842 	add.w	r8, r4, #3104	@ 0xc20
    primaryGraph.setXY(graphXOffset, graphYOffset);
 80099ea:	4628      	mov	r0, r5
 80099ec:	f7f7 f9f8 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    primaryGraph.setup(graphWidth, graphHeight, Color::getColorFrom24BitRGB(0x24, 0x73, 0xAC), graphBackground.getColor());
 80099f0:	22ac      	movs	r2, #172	@ 0xac
 80099f2:	2173      	movs	r1, #115	@ 0x73
 80099f4:	2024      	movs	r0, #36	@ 0x24
 80099f6:	f012 fe67 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        return color;
 80099fa:	f8d4 2184 	ldr.w	r2, [r4, #388]	@ 0x184
 80099fe:	4603      	mov	r3, r0
 8009a00:	f240 119f 	movw	r1, #415	@ 0x19f
 8009a04:	4628      	mov	r0, r5
 8009a06:	9200      	str	r2, [sp, #0]
 8009a08:	9a03      	ldr	r2, [sp, #12]
 8009a0a:	f7fe fb7e 	bl	800810a <_ZN5Graph5setupEiiN8touchgfx9colortypeES1_>
    primaryGraph.setDotShape(0, 30, 5);
 8009a0e:	4628      	mov	r0, r5
 8009a10:	2305      	movs	r3, #5
 8009a12:	221e      	movs	r2, #30
 8009a14:	2100      	movs	r1, #0
 8009a16:	f7fe fc17 	bl	8008248 <_ZN5Graph11setDotShapeEiii>
    primaryGraph.setDotBackgroundShape(0, 30, 7);
 8009a1a:	2307      	movs	r3, #7
 8009a1c:	221e      	movs	r2, #30
 8009a1e:	4628      	mov	r0, r5
 8009a20:	2100      	movs	r1, #0
 8009a22:	f7fe fc21 	bl	8008268 <_ZN5Graph21setDotBackgroundShapeEiii>
    graphArea.add(primaryGraph);
 8009a26:	4629      	mov	r1, r5
    secondaryGraph.setXY(primaryGraph.getX(), primaryGraph.getY());
 8009a28:	f504 65d6 	add.w	r5, r4, #1712	@ 0x6b0
    graphArea.add(primaryGraph);
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f009 f98f 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    secondaryGraph.setXY(primaryGraph.getX(), primaryGraph.getY());
 8009a32:	f9b4 235a 	ldrsh.w	r2, [r4, #858]	@ 0x35a
 8009a36:	4628      	mov	r0, r5
 8009a38:	f9b4 1358 	ldrsh.w	r1, [r4, #856]	@ 0x358
 8009a3c:	f7f7 f9d0 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    secondaryGraph.setup(graphWidth, graphHeight, Color::getColorFrom24BitRGB(0x27, 0x92, 0x34), graphBackground.getColor());
 8009a40:	2234      	movs	r2, #52	@ 0x34
 8009a42:	2192      	movs	r1, #146	@ 0x92
 8009a44:	2027      	movs	r0, #39	@ 0x27
 8009a46:	f012 fe3f 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8009a4a:	f8d4 2184 	ldr.w	r2, [r4, #388]	@ 0x184
 8009a4e:	4603      	mov	r3, r0
 8009a50:	f240 119f 	movw	r1, #415	@ 0x19f
 8009a54:	4628      	mov	r0, r5
 8009a56:	9200      	str	r2, [sp, #0]
 8009a58:	9a03      	ldr	r2, [sp, #12]
 8009a5a:	f7fe fb56 	bl	800810a <_ZN5Graph5setupEiiN8touchgfx9colortypeES1_>
    secondaryGraph.setDotShape(0, 90, 6);
 8009a5e:	4628      	mov	r0, r5
 8009a60:	2306      	movs	r3, #6
 8009a62:	225a      	movs	r2, #90	@ 0x5a
 8009a64:	2100      	movs	r1, #0
 8009a66:	f7fe fbef 	bl	8008248 <_ZN5Graph11setDotShapeEiii>
    secondaryGraph.setDotBackgroundShape(0, 90, 8);
 8009a6a:	2308      	movs	r3, #8
 8009a6c:	225a      	movs	r2, #90	@ 0x5a
 8009a6e:	4628      	mov	r0, r5
 8009a70:	2100      	movs	r1, #0
 8009a72:	f7fe fbf9 	bl	8008268 <_ZN5Graph21setDotBackgroundShapeEiii>
    graphArea.add(secondaryGraph);
 8009a76:	4629      	mov	r1, r5
 8009a78:	4638      	mov	r0, r7
    pieChartX = 0;
 8009a7a:	2500      	movs	r5, #0
    graphArea.add(secondaryGraph);
 8009a7c:	f009 f968 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    donutY = 34;
 8009a80:	2322      	movs	r3, #34	@ 0x22
    pieChartY = -16;
 8009a82:	f06f 020f 	mvn.w	r2, #15
    pieChart.setPosition(pieChartX, pieChartY, 240, 240);
 8009a86:	4629      	mov	r1, r5
    donutY = 34;
 8009a88:	f8c4 3c04 	str.w	r3, [r4, #3076]	@ 0xc04
    pieChart.setPosition(pieChartX, pieChartY, 240, 240);
 8009a8c:	23f0      	movs	r3, #240	@ 0xf0
    pieChartY = -16;
 8009a8e:	f8c4 2bfc 	str.w	r2, [r4, #3068]	@ 0xbfc
    pieChart.setPosition(pieChartX, pieChartY, 240, 240);
 8009a92:	4640      	mov	r0, r8
    pieChartX = 0;
 8009a94:	f8c4 5bf8 	str.w	r5, [r4, #3064]	@ 0xbf8
    donutX = pieChartX;
 8009a98:	f8c4 5c00 	str.w	r5, [r4, #3072]	@ 0xc00
    pieChart.setPosition(pieChartX, pieChartY, 240, 240);
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	f7f7 f987 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    pieChart.setCenter(120, 120);
 8009aa2:	2278      	movs	r2, #120	@ 0x78
 8009aa4:	4640      	mov	r0, r8
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	f001 f9df 	bl	800ae6a <_ZN8PieChart9setCenterEii>
    pieChart.setPieChart(0, 0, 0, 0);
 8009aac:	462a      	mov	r2, r5
 8009aae:	462b      	mov	r3, r5
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	9500      	str	r5, [sp, #0]
 8009ab6:	f001 f9be 	bl	800ae36 <_ZN8PieChart11setPieChartEiiii>
    pieChart.recalculatePieChart();
 8009aba:	4640      	mov	r0, r8
 8009abc:	f001 f911 	bl	800ace2 <_ZN8PieChart19recalculatePieChartEv>
        pieChartAnimateOutDuration = 16;
 8009ac0:	2310      	movs	r3, #16
        pieChart.setSelectAnimationSteps(4);
 8009ac2:	2104      	movs	r1, #4
 8009ac4:	4640      	mov	r0, r8
        pieChartAnimateOutDuration = 16;
 8009ac6:	f8c4 3c08 	str.w	r3, [r4, #3080]	@ 0xc08
        pieChartRedrawAnimateDuration = 20;
 8009aca:	2314      	movs	r3, #20
        pieChartDonutChangeAnimateDuration = 40;
 8009acc:	f8c4 9c14 	str.w	r9, [r4, #3092]	@ 0xc14
 8009ad0:	f504 696e 	add.w	r9, r4, #3808	@ 0xee0
        pieChartRedrawAnimateDuration = 20;
 8009ad4:	f8c4 3c0c 	str.w	r3, [r4, #3084]	@ 0xc0c
        pieChartRedraw2AnimateDuration = 20;
 8009ad8:	f8c4 3c10 	str.w	r3, [r4, #3088]	@ 0xc10
        pieChartAnimateEntryDuration = 35;
 8009adc:	2323      	movs	r3, #35	@ 0x23
 8009ade:	f8c4 3c18 	str.w	r3, [r4, #3096]	@ 0xc18
        animateToDonutDelay = 5;
 8009ae2:	2305      	movs	r3, #5
 8009ae4:	f8c4 3c1c 	str.w	r3, [r4, #3100]	@ 0xc1c
        pieChart.setSelectAnimationSteps(4);
 8009ae8:	f001 f8ef 	bl	800acca <_ZN8PieChart23setSelectAnimationStepsEi>
        Color::getColorFrom24BitRGB(0x13, 0x89, 0xCC),   // Blue
 8009aec:	22cc      	movs	r2, #204	@ 0xcc
 8009aee:	2189      	movs	r1, #137	@ 0x89
 8009af0:	2013      	movs	r0, #19
 8009af2:	f012 fde9 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Color::getColorFrom24BitRGB(0x18, 0xB6, 0x84),   // Green
 8009af6:	2284      	movs	r2, #132	@ 0x84
 8009af8:	21b6      	movs	r1, #182	@ 0xb6
        Color::getColorFrom24BitRGB(0x13, 0x89, 0xCC),   // Blue
 8009afa:	9008      	str	r0, [sp, #32]
        Color::getColorFrom24BitRGB(0x18, 0xB6, 0x84),   // Green
 8009afc:	2018      	movs	r0, #24
 8009afe:	f012 fde3 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Color::getColorFrom24BitRGB(0xFF, 0x78, 0x00),   // Orange
 8009b02:	462a      	mov	r2, r5
 8009b04:	2178      	movs	r1, #120	@ 0x78
        Color::getColorFrom24BitRGB(0x18, 0xB6, 0x84),   // Green
 8009b06:	9009      	str	r0, [sp, #36]	@ 0x24
        Color::getColorFrom24BitRGB(0xFF, 0x78, 0x00),   // Orange
 8009b08:	20ff      	movs	r0, #255	@ 0xff
 8009b0a:	f012 fddd 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Color::getColorFrom24BitRGB(0xD9, 0x0C, 0x33),   // Red
 8009b0e:	2233      	movs	r2, #51	@ 0x33
 8009b10:	210c      	movs	r1, #12
        Color::getColorFrom24BitRGB(0xFF, 0x78, 0x00),   // Orange
 8009b12:	900a      	str	r0, [sp, #40]	@ 0x28
        Color::getColorFrom24BitRGB(0xD9, 0x0C, 0x33),   // Red
 8009b14:	20d9      	movs	r0, #217	@ 0xd9
 8009b16:	f012 fdd7 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Color::getColorFrom24BitRGB(0xFF, 0xBA, 0x00),   // Yellow
 8009b1a:	462a      	mov	r2, r5
 8009b1c:	21ba      	movs	r1, #186	@ 0xba
        Color::getColorFrom24BitRGB(0xD9, 0x0C, 0x33),   // Red
 8009b1e:	900b      	str	r0, [sp, #44]	@ 0x2c
        Color::getColorFrom24BitRGB(0xFF, 0xBA, 0x00),   // Yellow
 8009b20:	20ff      	movs	r0, #255	@ 0xff
 8009b22:	f012 fdd1 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Color::getColorFrom24BitRGB(0xA8, 0x00, 0xFF)
 8009b26:	22ff      	movs	r2, #255	@ 0xff
        Color::getColorFrom24BitRGB(0xFF, 0xBA, 0x00),   // Yellow
 8009b28:	900c      	str	r0, [sp, #48]	@ 0x30
        Color::getColorFrom24BitRGB(0xA8, 0x00, 0xFF)
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	20a8      	movs	r0, #168	@ 0xa8
 8009b2e:	f012 fdcb 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8009b32:	900d      	str	r0, [sp, #52]	@ 0x34
        pieChartPainter[i].setColor(colors[i]);
 8009b34:	ab0e      	add	r3, sp, #56	@ 0x38
 8009b36:	4648      	mov	r0, r9
 8009b38:	22ff      	movs	r2, #255	@ 0xff
 8009b3a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009b3e:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8009b42:	f00b fb9d 	bl	8015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
        pieChart.setPainter(i, pieChartPainter[i]);
 8009b46:	4629      	mov	r1, r5
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8009b48:	3501      	adds	r5, #1
        pieChart.setPainter(i, pieChartPainter[i]);
 8009b4a:	464a      	mov	r2, r9
 8009b4c:	4640      	mov	r0, r8
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8009b4e:	f109 0920 	add.w	r9, r9, #32
        pieChart.setPainter(i, pieChartPainter[i]);
 8009b52:	f001 f8a5 	bl	800aca0 <_ZN8PieChart10setPainterEiRN8touchgfx21AbstractPainterRGB565E>
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8009b56:	2d06      	cmp	r5, #6
 8009b58:	d1ec      	bne.n	8009b34 <_ZN9GraphView11setupScreenEv+0x2b8>
    pieChart.setPieChartSelectionCallback(legendSelected);
 8009b5a:	f504 51bf 	add.w	r1, r4, #6112	@ 0x17e0
 8009b5e:	4640      	mov	r0, r8
    legendEntries[0].setBitmaps(BITMAP_PIE_CHART_LEGEND_BLUE_ID, BITMAP_PIE_CHART_LEGEND_BLUE_ACTIVE_ID);
 8009b60:	f504 657a 	add.w	r5, r4, #4000	@ 0xfa0
        legendEntries[i].setSelectionCallback(legendPressed);
 8009b64:	f504 5ac0 	add.w	sl, r4, #6144	@ 0x1800
    pieChart.setPieChartSelectionCallback(legendSelected);
 8009b68:	3108      	adds	r1, #8
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8009b6a:	f04f 0900 	mov.w	r9, #0
    pieChart.setPieChartSelectionCallback(legendSelected);
 8009b6e:	f001 fbd5 	bl	800b31c <_ZN8PieChart28setPieChartSelectionCallbackERN8touchgfx15GenericCallbackIRKS_ivEE>
    pieChart.setPieChartAnimationEndedCallback(pieChartAnimationEnded);
 8009b72:	f504 51bf 	add.w	r1, r4, #6112	@ 0x17e0
 8009b76:	4640      	mov	r0, r8
        legendEntries[i].setSelectionCallback(legendPressed);
 8009b78:	f10a 0a08 	add.w	sl, sl, #8
    pieChart.setPieChartAnimationEndedCallback(pieChartAnimationEnded);
 8009b7c:	3118      	adds	r1, #24
 8009b7e:	f001 fbd0 	bl	800b322 <_ZN8PieChart33setPieChartAnimationEndedCallbackERN8touchgfx15GenericCallbackIRKS_vvEE>
    pieChart.activatePieChartAnimationEndedCallback(false);
 8009b82:	4640      	mov	r0, r8
 8009b84:	2100      	movs	r1, #0
 8009b86:	f001 fbd2 	bl	800b32e <_ZN8PieChart38activatePieChartAnimationEndedCallbackEb>
    graphArea.add(pieChart);
 8009b8a:	4641      	mov	r1, r8
 8009b8c:	4638      	mov	r0, r7
        legendEntries[i].setXY(HAL::DISPLAY_WIDTH, 50 + (i % 3) * 42);
 8009b8e:	f04f 0803 	mov.w	r8, #3
    graphArea.add(pieChart);
 8009b92:	f009 f8dd 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    legendEntries[0].setBitmaps(BITMAP_PIE_CHART_LEGEND_BLUE_ID, BITMAP_PIE_CHART_LEGEND_BLUE_ACTIVE_ID);
 8009b96:	225c      	movs	r2, #92	@ 0x5c
 8009b98:	215b      	movs	r1, #91	@ 0x5b
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f000 ff03 	bl	800a9a6 <_ZN11LegendEntry10setBitmapsEtt>
    legendEntries[1].setBitmaps(BITMAP_PIE_CHART_LEGEND_GREEN_ID, BITMAP_PIE_CHART_LEGEND_GREEN_ACTIVE_ID);
 8009ba0:	f504 5086 	add.w	r0, r4, #4288	@ 0x10c0
 8009ba4:	225e      	movs	r2, #94	@ 0x5e
 8009ba6:	215d      	movs	r1, #93	@ 0x5d
 8009ba8:	3018      	adds	r0, #24
 8009baa:	f000 fefc 	bl	800a9a6 <_ZN11LegendEntry10setBitmapsEtt>
    legendEntries[2].setBitmaps(BITMAP_PIE_CHART_LEGEND_ORANGE_ID, BITMAP_PIE_CHART_LEGEND_ORANGE_ACTIVE_ID);
 8009bae:	f504 5090 	add.w	r0, r4, #4608	@ 0x1200
 8009bb2:	2260      	movs	r2, #96	@ 0x60
 8009bb4:	215f      	movs	r1, #95	@ 0x5f
 8009bb6:	3010      	adds	r0, #16
 8009bb8:	f000 fef5 	bl	800a9a6 <_ZN11LegendEntry10setBitmapsEtt>
    legendEntries[3].setBitmaps(BITMAP_PIE_CHART_LEGEND_RED_ID, BITMAP_PIE_CHART_LEGEND_RED_ACTIVE_ID);
 8009bbc:	f504 509a 	add.w	r0, r4, #4928	@ 0x1340
 8009bc0:	2264      	movs	r2, #100	@ 0x64
 8009bc2:	2163      	movs	r1, #99	@ 0x63
 8009bc4:	3008      	adds	r0, #8
 8009bc6:	f000 feee 	bl	800a9a6 <_ZN11LegendEntry10setBitmapsEtt>
    legendEntries[4].setBitmaps(BITMAP_PIE_CHART_LEGEND_YELLOW_ID, BITMAP_PIE_CHART_LEGEND_YELLOW_ACTIVE_ID);
 8009bca:	2266      	movs	r2, #102	@ 0x66
 8009bcc:	2165      	movs	r1, #101	@ 0x65
 8009bce:	f504 50a4 	add.w	r0, r4, #5248	@ 0x1480
 8009bd2:	f000 fee8 	bl	800a9a6 <_ZN11LegendEntry10setBitmapsEtt>
    legendEntries[5].setBitmaps(BITMAP_PIE_CHART_LEGEND_PURPLE_ID, BITMAP_PIE_CHART_LEGEND_PURPLE_ACTIVE_ID);
 8009bd6:	f504 50ad 	add.w	r0, r4, #5536	@ 0x15a0
 8009bda:	2262      	movs	r2, #98	@ 0x62
 8009bdc:	2161      	movs	r1, #97	@ 0x61
 8009bde:	3018      	adds	r0, #24
 8009be0:	f000 fee1 	bl	800a9a6 <_ZN11LegendEntry10setBitmapsEtt>
 8009be4:	e004      	b.n	8009bf0 <_ZN9GraphView11setupScreenEv+0x374>
 8009be6:	bf00      	nop
 8009be8:	08023468 	.word	0x08023468
 8009bec:	20024e28 	.word	0x20024e28
        legendEntries[i].setText((TEXTS)(T_GRAPH_LEGEND_TEXT_00 + i));
 8009bf0:	f109 0130 	add.w	r1, r9, #48	@ 0x30
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	b2c9      	uxtb	r1, r1
 8009bf8:	f000 fe88 	bl	800a90c <_ZN11LegendEntry7setTextE5TEXTS>
        legendEntries[i].setXY(HAL::DISPLAY_WIDTH, 50 + (i % 3) * 42);
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f9bb 1000 	ldrsh.w	r1, [fp]
 8009c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c06:	fbb9 f2f8 	udiv	r2, r9, r8
 8009c0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009c0e:	eba9 0202 	sub.w	r2, r9, r2
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8009c12:	f109 0901 	add.w	r9, r9, #1
        legendEntries[i].setXY(HAL::DISPLAY_WIDTH, 50 + (i % 3) * 42);
 8009c16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009c1a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009c1e:	0052      	lsls	r2, r2, #1
 8009c20:	3232      	adds	r2, #50	@ 0x32
 8009c22:	b212      	sxth	r2, r2
 8009c24:	4798      	blx	r3
        graphArea.add(legendEntries[i]);
 8009c26:	4629      	mov	r1, r5
    void setValueText(int value);
    void setSelected(bool selected);

    void setSelectionCallback(GenericCallback<const LegendEntry&>& callback)
    {
        selectionAction = &callback;
 8009c28:	f8c5 a118 	str.w	sl, [r5, #280]	@ 0x118
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	f009 f88f 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 8009c32:	f1b9 0f06 	cmp.w	r9, #6
 8009c36:	f505 759c 	add.w	r5, r5, #312	@ 0x138
 8009c3a:	d1d9      	bne.n	8009bf0 <_ZN9GraphView11setupScreenEv+0x374>
    legendEntries[0].setMoveAnimationEndedAction(legendMoveEnded);
 8009c3c:	f504 53be 	add.w	r3, r4, #6080	@ 0x17c0
        moveAnimationEndedCallback = &callback;
 8009c40:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
    graphOrPieButton.setXY(10, 207);
 8009c44:	f504 6724 	add.w	r7, r4, #2624	@ 0xa40
    graphOrPieButton.setAction(onButtonPressed);
 8009c48:	f504 59be 	add.w	r9, r4, #6080	@ 0x17c0
    legendEntries[0].setMoveAnimationEndedAction(legendMoveEnded);
 8009c4c:	3318      	adds	r3, #24
    graphOrPieButton.setXY(10, 207);
 8009c4e:	22cf      	movs	r2, #207	@ 0xcf
    graphOrPieButton.setAction(onButtonPressed);
 8009c50:	f109 0908 	add.w	r9, r9, #8
    graphOrPieButton.setXY(10, 207);
 8009c54:	4638      	mov	r0, r7
 8009c56:	f8c5 30d4 	str.w	r3, [r5, #212]	@ 0xd4
 8009c5a:	210a      	movs	r1, #10
 8009c5c:	f7f7 f8c0 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8009c60:	4639      	mov	r1, r7
    newButton.setXY(75, graphOrPieButton.getY());
 8009c62:	f604 270c 	addw	r7, r4, #2572	@ 0xa0c
 8009c66:	4630      	mov	r0, r6
 8009c68:	f8c4 9a68 	str.w	r9, [r4, #2664]	@ 0xa68
    mcuLoadTxt.setXY(364, 20 - mcuLoadTxt.getTypedText().getFont()->getFontHeight());
 8009c6c:	f104 0a78 	add.w	sl, r4, #120	@ 0x78
 8009c70:	f009 f86e 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    newButton.setXY(75, graphOrPieButton.getY());
 8009c74:	f9b4 2a46 	ldrsh.w	r2, [r4, #2630]	@ 0xa46
 8009c78:	4638      	mov	r0, r7
 8009c7a:	214b      	movs	r1, #75	@ 0x4b
 8009c7c:	f7f7 f8b0 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8009c80:	4639      	mov	r1, r7
    donutOrPieButton.setXY(195, graphOrPieButton.getY());
 8009c82:	f604 37c4 	addw	r7, r4, #3012	@ 0xbc4
 8009c86:	4630      	mov	r0, r6
 8009c88:	f8c4 9a34 	str.w	r9, [r4, #2612]	@ 0xa34
 8009c8c:	f009 f860 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8009c90:	f9b4 2a46 	ldrsh.w	r2, [r4, #2630]	@ 0xa46
 8009c94:	4638      	mov	r0, r7
 8009c96:	21c3      	movs	r1, #195	@ 0xc3
 8009c98:	f7f7 f8a2 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f8c4 9bec 	str.w	r9, [r4, #3052]	@ 0xbec
 8009ca4:	f009 f854 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8009ca8:	2343      	movs	r3, #67	@ 0x43
    gotoMenuButton.setBitmaps(Bitmap(BITMAP_GRAPH_MENU_BUTTON_ID), Bitmap(BITMAP_GRAPH_MENU_BUTTON_PRESSED_ID));
 8009caa:	f104 0744 	add.w	r7, r4, #68	@ 0x44
 8009cae:	aa07      	add	r2, sp, #28
 8009cb0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009cb4:	2344      	movs	r3, #68	@ 0x44
 8009cb6:	a906      	add	r1, sp, #24
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009cbe:	f00d fa3f 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    gotoMenuButton.setXY(404, 199);
 8009cc2:	22c7      	movs	r2, #199	@ 0xc7
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8009cca:	f7f7 f889 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8009cce:	4639      	mov	r1, r7
 8009cd0:	4630      	mov	r0, r6
    mcuLoadValueTxt.setPosition(mcuLoadTxt.getRect().right(), mcuLoadTxt.getY(), 34, 14);
 8009cd2:	f104 07ac 	add.w	r7, r4, #172	@ 0xac
 8009cd6:	f009 f83b 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mcuLoadTxt.setXY(364, 20 - mcuLoadTxt.getTypedText().getFont()->getFontHeight());
 8009cda:	f8b4 309e 	ldrh.w	r3, [r4, #158]	@ 0x9e
 8009cde:	a807      	add	r0, sp, #28
 8009ce0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009ce4:	f7f8 ffb6 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8009ce8:	6803      	ldr	r3, [r0, #0]
 8009cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cec:	4798      	blx	r3
 8009cee:	f1c0 0214 	rsb	r2, r0, #20
 8009cf2:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8009cf6:	4650      	mov	r0, sl
 8009cf8:	b212      	sxth	r2, r2
 8009cfa:	f7f7 f871 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    mcuLoadTxt.setColor(Color::getColorFrom24BitRGB(0x0, 0x0, 0x0));
 8009cfe:	2200      	movs	r2, #0
 8009d00:	4611      	mov	r1, r2
 8009d02:	4610      	mov	r0, r2
 8009d04:	f012 fce0 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        return x + width;
 8009d08:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 8009d0c:	f8b4 107c 	ldrh.w	r1, [r4, #124]	@ 0x7c
 8009d10:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
    mcuLoadValueTxt.setPosition(mcuLoadTxt.getRect().right(), mcuLoadTxt.getY(), 34, 14);
 8009d14:	4638      	mov	r0, r7
 8009d16:	4419      	add	r1, r3
 8009d18:	230e      	movs	r3, #14
 8009d1a:	b209      	sxth	r1, r1
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	2322      	movs	r3, #34	@ 0x22
 8009d20:	f9b4 207e 	ldrsh.w	r2, [r4, #126]	@ 0x7e
 8009d24:	f7f7 f844 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8009d28:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8009d2c:	4651      	mov	r1, sl
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
    topMenuBackground.setPosition(0, 0, topMenuContainer.getWidth(), 75);
 8009d34:	f04f 0a4b 	mov.w	sl, #75	@ 0x4b
 8009d38:	f009 f80a 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8009d3c:	4639      	mov	r1, r7
    topMenuContainer.setXY(0, 0);
 8009d3e:	f504 57b7 	add.w	r7, r4, #5856	@ 0x16e0
 8009d42:	4630      	mov	r0, r6
 8009d44:	f009 f804 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8009d48:	2200      	movs	r2, #0
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4638      	mov	r0, r7
 8009d50:	f7f7 f846 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
        rect.width = width;
 8009d54:	f8bb 3000 	ldrh.w	r3, [fp]
 8009d58:	4630      	mov	r0, r6
    topMenuBackground.setPosition(0, 0, topMenuContainer.getWidth(), 75);
 8009d5a:	f504 56b9 	add.w	r6, r4, #5920	@ 0x1720
 8009d5e:	f8a5 36f8 	strh.w	r3, [r5, #1784]	@ 0x6f8
    topMenuContainer.setMoveAnimationEndedAction(topMenuAnimationEnded);
 8009d62:	f504 53c0 	add.w	r3, r4, #6144	@ 0x1800
 8009d66:	4639      	mov	r1, r7
    topMenuBackground.setPosition(0, 0, topMenuContainer.getWidth(), 75);
 8009d68:	3618      	adds	r6, #24
    topMenuContainer.setMoveAnimationEndedAction(topMenuAnimationEnded);
 8009d6a:	3318      	adds	r3, #24
    primaryGraphAreaSetting.setBitmaps(Bitmap(BITMAP_BLUE_AREA_BUTTON_INACTIVE_ID), Bitmap(BITMAP_BLUE_AREA_BUTTON_ACTIVE_ID));
 8009d6c:	f604 2be4 	addw	fp, r4, #2788	@ 0xae4
 8009d70:	f8c5 3734 	str.w	r3, [r5, #1844]	@ 0x734
 8009d74:	f008 ffec 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    topMenuBackground.setPosition(0, 0, topMenuContainer.getWidth(), 75);
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8cd a000 	str.w	sl, [sp]
 8009d7e:	4630      	mov	r0, r6
 8009d80:	f9b5 36f8 	ldrsh.w	r3, [r5, #1784]	@ 0x6f8
 8009d84:	4611      	mov	r1, r2
 8009d86:	f7f7 f813 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    topMenuBackground.setColor(Color::getColorFrom24BitRGB(0xDC, 0xE0, 0xE3));
 8009d8a:	22e3      	movs	r2, #227	@ 0xe3
 8009d8c:	21e0      	movs	r1, #224	@ 0xe0
 8009d8e:	20dc      	movs	r0, #220	@ 0xdc
 8009d90:	f012 fc9a 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    topMenuContainer.add(topMenuBackground);
 8009d94:	4631      	mov	r1, r6
    topMenuBottomBar.setBitmap(Bitmap(BITMAP_GRAPH_TOP_MENU_LINE_ID));
 8009d96:	f504 56bb 	add.w	r6, r4, #5984	@ 0x1760
        this->color = color;
 8009d9a:	f8c5 0760 	str.w	r0, [r5, #1888]	@ 0x760
    topMenuContainer.add(topMenuBackground);
 8009d9e:	4638      	mov	r0, r7
    topMenuBottomBar.setBitmap(Bitmap(BITMAP_GRAPH_TOP_MENU_LINE_ID));
 8009da0:	3608      	adds	r6, #8
    topMenuContainer.add(topMenuBackground);
 8009da2:	f008 ffd5 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8009da6:	2348      	movs	r3, #72	@ 0x48
    topMenuBottomBar.setBitmap(Bitmap(BITMAP_GRAPH_TOP_MENU_LINE_ID));
 8009da8:	a907      	add	r1, sp, #28
 8009daa:	4630      	mov	r0, r6
 8009dac:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009db0:	f00d facd 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        return y + height;
 8009db4:	f8b5 3742 	ldrh.w	r3, [r5, #1858]	@ 0x742
    topMenuBottomBar.setXY(0, topMenuBackground.getRect().bottom());
 8009db8:	4630      	mov	r0, r6
 8009dba:	f8b5 273e 	ldrh.w	r2, [r5, #1854]	@ 0x73e
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	441a      	add	r2, r3
 8009dc2:	b212      	sxth	r2, r2
 8009dc4:	f7f7 f80c 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    topMenuContainer.add(topMenuBottomBar);
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4638      	mov	r0, r7
    primaryGraphLineSetting.setBitmaps(Bitmap(BITMAP_BLUE_LINE_BUTTON_INACTIVE_ID), Bitmap(BITMAP_BLUE_LINE_BUTTON_ACTIVE_ID));
 8009dcc:	f604 2674 	addw	r6, r4, #2676	@ 0xa74
    topMenuContainer.add(topMenuBottomBar);
 8009dd0:	f008 ffbe 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    topMenuButton.setBitmaps(Bitmap(BITMAP_GRAPH_TOP_MENU_ACTIVATE_BUTTON_ID), Bitmap(BITMAP_GRAPH_TOP_MENU_ACTIVATE_BUTTON_ID));
 8009dd4:	f504 53bc 	add.w	r3, r4, #6016	@ 0x1780
 8009dd8:	2247      	movs	r2, #71	@ 0x47
 8009dda:	a906      	add	r1, sp, #24
 8009ddc:	3314      	adds	r3, #20
 8009dde:	f8ad 2018 	strh.w	r2, [sp, #24]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f8ad 201c 	strh.w	r2, [sp, #28]
 8009de8:	aa07      	add	r2, sp, #28
 8009dea:	9303      	str	r3, [sp, #12]
 8009dec:	f00d f9a8 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8009df0:	f8b5 1772 	ldrh.w	r1, [r5, #1906]	@ 0x772
 8009df4:	f8b5 276e 	ldrh.w	r2, [r5, #1902]	@ 0x76e
    topMenuButton.setXY((topMenuContainer.getWidth() - topMenuButton.getWidth()) / 2, topMenuBottomBar.getRect().bottom());
 8009df8:	f9b5 079c 	ldrsh.w	r0, [r5, #1948]	@ 0x79c
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f9b5 16f8 	ldrsh.w	r1, [r5, #1784]	@ 0x6f8
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	1a09      	subs	r1, r1, r0
 8009e06:	b212      	sxth	r2, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8009e0e:	f341 014f 	sbfx	r1, r1, #1, #16
 8009e12:	f7f6 ffe5 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    topMenuButton.setWidth(topMenuButton.getWidth() + 30); // Expand the active area of the button to make it easier to press
 8009e16:	f8b5 279c 	ldrh.w	r2, [r5, #1948]	@ 0x79c
     * @see Button::setBitmaps
     */
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
    {
        originalPressed = bmpPressed;
        Button::setBitmaps(bmpReleased, bmpPressed);
 8009e1a:	a906      	add	r1, sp, #24
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	321e      	adds	r2, #30
 8009e20:	f8c5 97bc 	str.w	r9, [r5, #1980]	@ 0x7bc
 8009e24:	f8a5 279c 	strh.w	r2, [r5, #1948]	@ 0x79c
    topMenuButton.setHeight(topMenuButton.getHeight() + 20);
 8009e28:	f8b5 279e 	ldrh.w	r2, [r5, #1950]	@ 0x79e
 8009e2c:	3214      	adds	r2, #20
        rect.height = height;
 8009e2e:	f8a5 279e 	strh.w	r2, [r5, #1950]	@ 0x79e
 8009e32:	2205      	movs	r2, #5
 8009e34:	f8ad 2018 	strh.w	r2, [sp, #24]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	f8ad 201c 	strh.w	r2, [sp, #28]
        originalPressed = bmpPressed;
 8009e3e:	f8a4 2aa8 	strh.w	r2, [r4, #2728]	@ 0xaa8
        Button::setBitmaps(bmpReleased, bmpPressed);
 8009e42:	aa07      	add	r2, sp, #28
 8009e44:	f00d f97c 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    primaryGraphLineSetting.setXY(44, 10);
 8009e48:	220a      	movs	r2, #10
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	212c      	movs	r1, #44	@ 0x2c
 8009e4e:	f7f6 ffc7 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    primaryGraphLineSetting.forceState(true);
 8009e52:	4630      	mov	r0, r6
 8009e54:	2101      	movs	r1, #1
 8009e56:	f00c fd5b 	bl	8016910 <_ZN8touchgfx12ToggleButton10forceStateEb>
    topMenuContainer.add(primaryGraphLineSetting);
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	f8c4 9a9c 	str.w	r9, [r4, #2716]	@ 0xa9c
 8009e62:	f008 ff75 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    primaryGraphDotSetting.setBitmaps(Bitmap(BITMAP_BLUE_DOTS_BUTTON_INACTIVE_ID), Bitmap(BITMAP_BLUE_DOTS_BUTTON_ACTIVE_ID));
 8009e66:	f604 26ac 	addw	r6, r4, #2732	@ 0xaac
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	a906      	add	r1, sp, #24
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f8ad 8018 	strh.w	r8, [sp, #24]
 8009e74:	f8ad 201c 	strh.w	r2, [sp, #28]
 8009e78:	f04f 0801 	mov.w	r8, #1
        originalPressed = bmpPressed;
 8009e7c:	f8a4 2ae0 	strh.w	r2, [r4, #2784]	@ 0xae0
        Button::setBitmaps(bmpReleased, bmpPressed);
 8009e80:	aa07      	add	r2, sp, #28
 8009e82:	f00d f95d 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        return x + width;
 8009e86:	f8b4 2a7c 	ldrh.w	r2, [r4, #2684]	@ 0xa7c
 8009e8a:	f8b4 1a78 	ldrh.w	r1, [r4, #2680]	@ 0xa78
    primaryGraphDotSetting.setXY(primaryGraphLineSetting.getRect().right() + 10, primaryGraphLineSetting.getY());
 8009e8e:	4630      	mov	r0, r6
 8009e90:	4411      	add	r1, r2
 8009e92:	f9b4 2a7a 	ldrsh.w	r2, [r4, #2682]	@ 0xa7a
 8009e96:	310a      	adds	r1, #10
 8009e98:	b209      	sxth	r1, r1
 8009e9a:	f7f6 ffa1 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    primaryGraphDotSetting.forceState(true);
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	f00c fd35 	bl	8016910 <_ZN8touchgfx12ToggleButton10forceStateEb>
    topMenuContainer.add(primaryGraphDotSetting);
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	2600      	movs	r6, #0
 8009eaa:	4638      	mov	r0, r7
 8009eac:	f8c4 9ad4 	str.w	r9, [r4, #2772]	@ 0xad4
 8009eb0:	f008 ff4e 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8009eb4:	aa07      	add	r2, sp, #28
 8009eb6:	a906      	add	r1, sp, #24
 8009eb8:	4658      	mov	r0, fp
        originalPressed = bmpPressed;
 8009eba:	f8a4 6b18 	strh.w	r6, [r4, #2840]	@ 0xb18
 8009ebe:	f8ad 8018 	strh.w	r8, [sp, #24]
 8009ec2:	f8ad 601c 	strh.w	r6, [sp, #28]
        Button::setBitmaps(bmpReleased, bmpPressed);
 8009ec6:	f00d f93b 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8009eca:	f8b4 2ab4 	ldrh.w	r2, [r4, #2740]	@ 0xab4
    primaryGraphAreaSetting.setXY(primaryGraphDotSetting.getRect().right() + 10, primaryGraphDotSetting.getY());
 8009ece:	4658      	mov	r0, fp
 8009ed0:	f8b4 1ab0 	ldrh.w	r1, [r4, #2736]	@ 0xab0
 8009ed4:	4411      	add	r1, r2
 8009ed6:	f9b4 2ab2 	ldrsh.w	r2, [r4, #2738]	@ 0xab2
 8009eda:	310a      	adds	r1, #10
 8009edc:	b209      	sxth	r1, r1
 8009ede:	f7f6 ff7f 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    primaryGraphAreaSetting.forceState(true);
 8009ee2:	4641      	mov	r1, r8
 8009ee4:	4658      	mov	r0, fp
 8009ee6:	f00c fd13 	bl	8016910 <_ZN8touchgfx12ToggleButton10forceStateEb>
    topMenuContainer.add(primaryGraphAreaSetting);
 8009eea:	4659      	mov	r1, fp
 8009eec:	4638      	mov	r0, r7
 8009eee:	f8c4 9b0c 	str.w	r9, [r4, #2828]	@ 0xb0c
 8009ef2:	f008 ff2d 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8009ef6:	224e      	movs	r2, #78	@ 0x4e
    secondaryGraphLineSetting.setBitmaps(Bitmap(BITMAP_GREEN_LINE_BUTTON_INACTIVE_ID), Bitmap(BITMAP_GREEN_LINE_BUTTON_ACTIVE_ID));
 8009ef8:	f604 3b1c 	addw	fp, r4, #2844	@ 0xb1c
 8009efc:	a906      	add	r1, sp, #24
 8009efe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8009f02:	224d      	movs	r2, #77	@ 0x4d
 8009f04:	4658      	mov	r0, fp
 8009f06:	f8ad 201c 	strh.w	r2, [sp, #28]
        originalPressed = bmpPressed;
 8009f0a:	f8a4 2b50 	strh.w	r2, [r4, #2896]	@ 0xb50
        Button::setBitmaps(bmpReleased, bmpPressed);
 8009f0e:	aa07      	add	r2, sp, #28
 8009f10:	f00d f916 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8009f14:	f8b4 2aec 	ldrh.w	r2, [r4, #2796]	@ 0xaec
 8009f18:	f8b4 1ae8 	ldrh.w	r1, [r4, #2792]	@ 0xae8
    secondaryGraphLineSetting.setXY(primaryGraphAreaSetting.getRect().right() + 10, primaryGraphDotSetting.getY());
 8009f1c:	4658      	mov	r0, fp
 8009f1e:	4411      	add	r1, r2
 8009f20:	f9b4 2ab2 	ldrsh.w	r2, [r4, #2738]	@ 0xab2
 8009f24:	310a      	adds	r1, #10
 8009f26:	b209      	sxth	r1, r1
 8009f28:	f7f6 ff5a 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    secondaryGraphLineSetting.forceState(true);
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	4658      	mov	r0, fp
 8009f30:	f00c fcee 	bl	8016910 <_ZN8touchgfx12ToggleButton10forceStateEb>
    topMenuContainer.add(secondaryGraphLineSetting);
 8009f34:	4659      	mov	r1, fp
 8009f36:	4638      	mov	r0, r7
 8009f38:	f8c4 9b44 	str.w	r9, [r4, #2884]	@ 0xb44
 8009f3c:	f008 ff08 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    secondaryGraphDotSetting.setBitmaps(Bitmap(BITMAP_GREEN_DOTS_BUTTON_INACTIVE_ID), Bitmap(BITMAP_GREEN_DOTS_BUTTON_ACTIVE_ID));
 8009f40:	f604 3b54 	addw	fp, r4, #2900	@ 0xb54
 8009f44:	224c      	movs	r2, #76	@ 0x4c
 8009f46:	a906      	add	r1, sp, #24
 8009f48:	4658      	mov	r0, fp
        originalPressed = bmpPressed;
 8009f4a:	f8a4 ab88 	strh.w	sl, [r4, #2952]	@ 0xb88
 8009f4e:	f8ad 2018 	strh.w	r2, [sp, #24]
        Button::setBitmaps(bmpReleased, bmpPressed);
 8009f52:	aa07      	add	r2, sp, #28
 8009f54:	f8ad a01c 	strh.w	sl, [sp, #28]
 8009f58:	f00d f8f2 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8009f5c:	f8b4 2b24 	ldrh.w	r2, [r4, #2852]	@ 0xb24
    secondaryGraphDotSetting.setXY(secondaryGraphLineSetting.getRect().right() + 10, secondaryGraphLineSetting.getY());
 8009f60:	4658      	mov	r0, fp
 8009f62:	f8b4 1b20 	ldrh.w	r1, [r4, #2848]	@ 0xb20
    secondaryGraphAreaSetting.setBitmaps(Bitmap(BITMAP_GREEN_AREA_BUTTON_INACTIVE_ID), Bitmap(BITMAP_GREEN_AREA_BUTTON_ACTIVE_ID));
 8009f66:	f604 3a8c 	addw	sl, r4, #2956	@ 0xb8c
 8009f6a:	4411      	add	r1, r2
    secondaryGraphDotSetting.setXY(secondaryGraphLineSetting.getRect().right() + 10, secondaryGraphLineSetting.getY());
 8009f6c:	f9b4 2b22 	ldrsh.w	r2, [r4, #2850]	@ 0xb22
 8009f70:	310a      	adds	r1, #10
 8009f72:	b209      	sxth	r1, r1
 8009f74:	f7f6 ff34 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    secondaryGraphDotSetting.forceState(false);
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4658      	mov	r0, fp
 8009f7c:	f00c fcc8 	bl	8016910 <_ZN8touchgfx12ToggleButton10forceStateEb>
    topMenuContainer.add(secondaryGraphDotSetting);
 8009f80:	4659      	mov	r1, fp
 8009f82:	4638      	mov	r0, r7
 8009f84:	f8c4 9b7c 	str.w	r9, [r4, #2940]	@ 0xb7c
 8009f88:	f008 fee2 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8009f8c:	224a      	movs	r2, #74	@ 0x4a
 8009f8e:	a906      	add	r1, sp, #24
 8009f90:	4650      	mov	r0, sl
 8009f92:	f8ad 2018 	strh.w	r2, [sp, #24]
 8009f96:	2249      	movs	r2, #73	@ 0x49
 8009f98:	f8ad 201c 	strh.w	r2, [sp, #28]
        originalPressed = bmpPressed;
 8009f9c:	f8a4 2bc0 	strh.w	r2, [r4, #3008]	@ 0xbc0
        Button::setBitmaps(bmpReleased, bmpPressed);
 8009fa0:	aa07      	add	r2, sp, #28
 8009fa2:	f00d f8cd 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8009fa6:	f8b4 2b58 	ldrh.w	r2, [r4, #2904]	@ 0xb58
 8009faa:	f8b4 1b5c 	ldrh.w	r1, [r4, #2908]	@ 0xb5c
    secondaryGraphAreaSetting.setXY(secondaryGraphDotSetting.getRect().right() + 10, secondaryGraphDotSetting.getY());
 8009fae:	4650      	mov	r0, sl
 8009fb0:	4411      	add	r1, r2
 8009fb2:	f9b4 2b5a 	ldrsh.w	r2, [r4, #2906]	@ 0xb5a
 8009fb6:	310a      	adds	r1, #10
 8009fb8:	b209      	sxth	r1, r1
 8009fba:	f7f6 ff11 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    secondaryGraphAreaSetting.forceState(true);
 8009fbe:	4641      	mov	r1, r8
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	f00c fca5 	bl	8016910 <_ZN8touchgfx12ToggleButton10forceStateEb>
    topMenuContainer.add(secondaryGraphAreaSetting);
 8009fc6:	4651      	mov	r1, sl
 8009fc8:	4638      	mov	r0, r7
 8009fca:	f8c4 9bb4 	str.w	r9, [r4, #2996]	@ 0xbb4
 8009fce:	f008 febf 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    topMenuContainer.add(topMenuButton);
 8009fd2:	9b03      	ldr	r3, [sp, #12]
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	f008 feba 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        return y + height;
 8009fdc:	f8b5 279a 	ldrh.w	r2, [r5, #1946]	@ 0x79a
 8009fe0:	f8b5 379e 	ldrh.w	r3, [r5, #1950]	@ 0x79e
    setCurrentState(GRAPH);
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4413      	add	r3, r2
 8009fea:	f8a5 36fa 	strh.w	r3, [r5, #1786]	@ 0x6fa
 8009fee:	f7ff f9bc 	bl	800936a <_ZN9GraphView15setCurrentStateENS_5StateE>
    animateToMoveState(COLLAPSED, 0);
 8009ff2:	4632      	mov	r2, r6
 8009ff4:	4641      	mov	r1, r8
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f7ff fbe6 	bl	80097c8 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi>
    updateButtonSettings();
 8009ffc:	4620      	mov	r0, r4
    pointCounter = 0;
 8009ffe:	f8c5 6838 	str.w	r6, [r5, #2104]	@ 0x838
    updateButtonSettings();
 800a002:	f7ff f979 	bl	80092f8 <_ZN9GraphView20updateButtonSettingsEv>
    updateGraphSettings();
 800a006:	4620      	mov	r0, r4
 800a008:	f7ff f854 	bl	80090b4 <_ZN9GraphView19updateGraphSettingsEv>
    resetPieChart();
 800a00c:	4620      	mov	r0, r4
}
 800a00e:	b00f      	add	sp, #60	@ 0x3c
 800a010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    resetPieChart();
 800a014:	f7ff b8e2 	b.w	80091dc <_ZN9GraphView13resetPieChartEv>

0800a018 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>:
{
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	4604      	mov	r4, r0
    if (!topMenuContainer.isRunning())
 800a01e:	f500 50b7 	add.w	r0, r0, #5856	@ 0x16e0
{
 800a022:	b087      	sub	sp, #28
 800a024:	460d      	mov	r5, r1
    if (!topMenuContainer.isRunning())
 800a026:	3010      	adds	r0, #16
 800a028:	f7fe fceb 	bl	8008a02 <_ZNK8touchgfx12MoveAnimatorINS_9ContainerEE9isRunningEv>
 800a02c:	b970      	cbnz	r0, 800a04c <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x34>
        if (&button == &topMenuButton)
 800a02e:	f504 53bc 	add.w	r3, r4, #6016	@ 0x1780
 800a032:	3314      	adds	r3, #20
 800a034:	429d      	cmp	r5, r3
 800a036:	d109      	bne.n	800a04c <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x34>
            animateToMoveState((currentMenuState == COLLAPSED) ? EXPANDED : COLLAPSED, 10);
 800a038:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 800a03c:	220a      	movs	r2, #10
 800a03e:	4620      	mov	r0, r4
 800a040:	2b01      	cmp	r3, #1
 800a042:	bf14      	ite	ne
 800a044:	2101      	movne	r1, #1
 800a046:	2102      	moveq	r1, #2
 800a048:	f7ff fbbe 	bl	80097c8 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi>
    if (&button == &newButton)
 800a04c:	f604 230c 	addw	r3, r4, #2572	@ 0xa0c
 800a050:	429d      	cmp	r5, r3
 800a052:	d132      	bne.n	800a0ba <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xa2>
        if (currentState == GRAPH)
 800a054:	f894 1100 	ldrb.w	r1, [r4, #256]	@ 0x100
 800a058:	b929      	cbnz	r1, 800a066 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x4e>
            clearGraphs();
 800a05a:	4620      	mov	r0, r4
}
 800a05c:	b007      	add	sp, #28
 800a05e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            clearGraphs();
 800a062:	f7ff b897 	b.w	8009194 <_ZN9GraphView11clearGraphsEv>
        else if (currentState == PIE_CHART)
 800a066:	2901      	cmp	r1, #1
 800a068:	f040 80cd 	bne.w	800a206 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1ee>
            pieChart.activatePieChartAnimationEndedCallback(true);
 800a06c:	f504 6542 	add.w	r5, r4, #3104	@ 0xc20
 800a070:	4628      	mov	r0, r5
 800a072:	f001 f95c 	bl	800b32e <_ZN8PieChart38activatePieChartAnimationEndedCallbackEb>
            pieChartAnimationType = REDRAW_PIECHART;
 800a076:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800a07a:	2000      	movs	r0, #0
 800a07c:	f8d4 1c0c 	ldr.w	r1, [r4, #3084]	@ 0xc0c
            if (pieChartIsFull)
 800a080:	f892 383c 	ldrb.w	r3, [r2, #2108]	@ 0x83c
            pieChartAnimationType = REDRAW_PIECHART;
 800a084:	f8c2 0844 	str.w	r0, [r2, #2116]	@ 0x844
            if (pieChartIsFull)
 800a088:	4acb      	ldr	r2, [pc, #812]	@ (800a3b8 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3a0>)
                this->pieChart.startPieChartAnimation(180, 180, 0, 60, pieChartRedrawAnimateDuration, EasingEquations::quadEaseIn, EasingEquations::quadEaseIn);
 800a08a:	9101      	str	r1, [sp, #4]
 800a08c:	e9cd 2202 	strd	r2, r2, [sp, #8]
            if (pieChartIsFull)
 800a090:	b173      	cbz	r3, 800a0b0 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x98>
                this->pieChart.startPieChartAnimation(180, 180, 0, 60, pieChartRedrawAnimateDuration, EasingEquations::quadEaseIn, EasingEquations::quadEaseIn);
 800a092:	233c      	movs	r3, #60	@ 0x3c
 800a094:	22b4      	movs	r2, #180	@ 0xb4
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	4611      	mov	r1, r2
 800a09a:	4603      	mov	r3, r0
                this->pieChart.startPieChartAnimation(0, 0, 0, 108, pieChartRedrawAnimateDuration, EasingEquations::quadEaseIn, EasingEquations::quadEaseIn);
 800a09c:	4628      	mov	r0, r5
 800a09e:	f000 ffa8 	bl	800aff2 <_ZN8PieChart22startPieChartAnimationEiiiiiPFstsstES1_>
            setAllButtonsTouchable(false);
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	4620      	mov	r0, r4
}
 800a0a6:	b007      	add	sp, #28
 800a0a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            setAllButtonsTouchable(false);
 800a0ac:	f7ff b8d5 	b.w	800925a <_ZN9GraphView22setAllButtonsTouchableEb>
                this->pieChart.startPieChartAnimation(0, 0, 0, 108, pieChartRedrawAnimateDuration, EasingEquations::quadEaseIn, EasingEquations::quadEaseIn);
 800a0b0:	226c      	movs	r2, #108	@ 0x6c
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	9200      	str	r2, [sp, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	e7f0      	b.n	800a09c <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x84>
    else if (&button == &primaryGraphLineSetting || &button == &primaryGraphDotSetting || &button == &primaryGraphAreaSetting ||
 800a0ba:	f604 2374 	addw	r3, r4, #2676	@ 0xa74
 800a0be:	429d      	cmp	r5, r3
 800a0c0:	d013      	beq.n	800a0ea <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xd2>
 800a0c2:	f604 23ac 	addw	r3, r4, #2732	@ 0xaac
 800a0c6:	429d      	cmp	r5, r3
 800a0c8:	d00f      	beq.n	800a0ea <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xd2>
 800a0ca:	f604 23e4 	addw	r3, r4, #2788	@ 0xae4
 800a0ce:	429d      	cmp	r5, r3
 800a0d0:	d00b      	beq.n	800a0ea <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xd2>
             &button == &secondaryGraphLineSetting || &button == &secondaryGraphDotSetting || &button == &secondaryGraphAreaSetting)
 800a0d2:	f604 331c 	addw	r3, r4, #2844	@ 0xb1c
    else if (&button == &primaryGraphLineSetting || &button == &primaryGraphDotSetting || &button == &primaryGraphAreaSetting ||
 800a0d6:	429d      	cmp	r5, r3
 800a0d8:	d007      	beq.n	800a0ea <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xd2>
             &button == &secondaryGraphLineSetting || &button == &secondaryGraphDotSetting || &button == &secondaryGraphAreaSetting)
 800a0da:	f604 3354 	addw	r3, r4, #2900	@ 0xb54
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	d003      	beq.n	800a0ea <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xd2>
 800a0e2:	f604 338c 	addw	r3, r4, #2956	@ 0xb8c
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	d10b      	bne.n	800a102 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0xea>
        automaticTopMenuCollapseTimeout = TOP_MENU_COLLAPSE_TIMEOUT;
 800a0ea:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800a0ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
        updateGraphSettings();
 800a0f2:	4620      	mov	r0, r4
        automaticTopMenuCollapseTimeout = TOP_MENU_COLLAPSE_TIMEOUT;
 800a0f4:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
}
 800a0f8:	b007      	add	sp, #28
 800a0fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        updateGraphSettings();
 800a0fe:	f7fe bfd9 	b.w	80090b4 <_ZN9GraphView19updateGraphSettingsEv>
    else if (&button == &graphOrPieButton)
 800a102:	f504 6324 	add.w	r3, r4, #2624	@ 0xa40
 800a106:	429d      	cmp	r5, r3
 800a108:	f040 8110 	bne.w	800a32c <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x314>
        if (currentState == PIE_CHART)
 800a10c:	f894 3100 	ldrb.w	r3, [r4, #256]	@ 0x100
 800a110:	2b01      	cmp	r3, #1
 800a112:	d17b      	bne.n	800a20c <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1f4>
 800a114:	f504 657a 	add.w	r5, r4, #4000	@ 0xfa0
 800a118:	2605      	movs	r6, #5
                legendEntries[i].startMoveAnimation(HAL::DISPLAY_WIDTH, legendEntries[i].getY(), 16, EasingEquations::cubicEaseInOut);
 800a11a:	f8df 92c0 	ldr.w	r9, [pc, #704]	@ 800a3dc <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3c4>
        moveAnimationYEquation = yProgressionEquation;
 800a11e:	f8df 82b0 	ldr.w	r8, [pc, #688]	@ 800a3d0 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3b8>
                legendEntries[i].setMoveAnimationDelay((NUMBER_OF_PIE_CHART_SECTIONS - 1 - i) * 2);
 800a122:	682b      	ldr	r3, [r5, #0]
 800a124:	0071      	lsls	r1, r6, #1
 800a126:	4628      	mov	r0, r5
 800a128:	f1c6 0705 	rsb	r7, r6, #5
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a130:	b289      	uxth	r1, r1
 800a132:	4798      	blx	r3
        if (!moveAnimationRunning)
 800a134:	f895 311c 	ldrb.w	r3, [r5, #284]	@ 0x11c
                legendEntries[i].startMoveAnimation(HAL::DISPLAY_WIDTH, legendEntries[i].getY(), 16, EasingEquations::cubicEaseInOut);
 800a138:	f9b9 b000 	ldrsh.w	fp, [r9]
        return rect.y;
 800a13c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800a140:	b923      	cbnz	r3, 800a14c <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x134>
            Application::getInstance()->registerTimerWidget(this);
 800a142:	f00f fd37 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800a146:	4629      	mov	r1, r5
 800a148:	f00f fd3a 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 800a14c:	2300      	movs	r3, #0
        moveAnimationEndX = endX;
 800a14e:	f8a5 b128 	strh.w	fp, [r5, #296]	@ 0x128
        moveAnimationEndY = endY;
 800a152:	f8a5 a12a 	strh.w	sl, [r5, #298]	@ 0x12a
        moveAnimationCounter = 0;
 800a156:	f8a5 311e 	strh.w	r3, [r5, #286]	@ 0x11e
        moveAnimationStartX = T::getX();
 800a15a:	88ab      	ldrh	r3, [r5, #4]
 800a15c:	f8a5 3124 	strh.w	r3, [r5, #292]	@ 0x124
        moveAnimationStartY = T::getY();
 800a160:	88eb      	ldrh	r3, [r5, #6]
 800a162:	f8a5 3126 	strh.w	r3, [r5, #294]	@ 0x126
        moveAnimationDuration = duration;
 800a166:	2310      	movs	r3, #16
 800a168:	f8a5 3122 	strh.w	r3, [r5, #290]	@ 0x122
        moveAnimationXEquation = xProgressionEquation;
 800a16c:	4b93      	ldr	r3, [pc, #588]	@ (800a3bc <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3a4>)
        moveAnimationYEquation = yProgressionEquation;
 800a16e:	e9c5 384b 	strd	r3, r8, [r5, #300]	@ 0x12c
        moveAnimationRunning = true;
 800a172:	2301      	movs	r3, #1
 800a174:	f885 311c 	strb.w	r3, [r5, #284]	@ 0x11c
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800a178:	f44f 739c 	mov.w	r3, #312	@ 0x138
 800a17c:	fb03 4707 	mla	r7, r3, r7, r4
 800a180:	f507 677a 	add.w	r7, r7, #4000	@ 0xfa0
 800a184:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a188:	b913      	cbnz	r3, 800a190 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x178>
            nextMoveAnimationStep(); // Set end position and shut down
 800a18a:	4628      	mov	r0, r5
 800a18c:	f7ff f9c8 	bl	8009520 <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv>
            for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 800a190:	3e01      	subs	r6, #1
 800a192:	f505 759c 	add.w	r5, r5, #312	@ 0x138
 800a196:	1c73      	adds	r3, r6, #1
 800a198:	d1c3      	bne.n	800a122 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x10a>
            pieChart.getAngles(startAngle, endAngle);
 800a19a:	f504 6642 	add.w	r6, r4, #3104	@ 0xc20
 800a19e:	aa05      	add	r2, sp, #20
 800a1a0:	a904      	add	r1, sp, #16
            pieChart.startPieChartAnimation(startAngle, endAngle, 0, 0, pieChartAnimateOutDuration, EasingEquations::quintEaseIn, EasingEquations::quadEaseIn);
 800a1a2:	2500      	movs	r5, #0
            pieChart.getAngles(startAngle, endAngle);
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f000 fd89 	bl	800acbc <_ZNK8PieChart9getAnglesERiS0_>
            pieChart.startPieChartAnimation(startAngle, endAngle, 0, 0, pieChartAnimateOutDuration, EasingEquations::quintEaseIn, EasingEquations::quadEaseIn);
 800a1aa:	4b83      	ldr	r3, [pc, #524]	@ (800a3b8 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3a0>)
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	9303      	str	r3, [sp, #12]
 800a1b0:	4b83      	ldr	r3, [pc, #524]	@ (800a3c0 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3a8>)
 800a1b2:	9302      	str	r3, [sp, #8]
 800a1b4:	f8d4 3c08 	ldr.w	r3, [r4, #3080]	@ 0xc08
 800a1b8:	9500      	str	r5, [sp, #0]
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	462b      	mov	r3, r5
 800a1be:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a1c2:	f000 ff16 	bl	800aff2 <_ZN8PieChart22startPieChartAnimationEiiiiiPFstsstES1_>
            pieChart.startMoveAnimation(pieChartX, pieChartY, pieChartAnimateOutDuration, EasingEquations::linearEaseIn);
 800a1c6:	4b7f      	ldr	r3, [pc, #508]	@ (800a3c4 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3ac>)
        moveAnimationDelay = delay;
 800a1c8:	f8a4 5ec8 	strh.w	r5, [r4, #3784]	@ 0xec8
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f8cd 8004 	str.w	r8, [sp, #4]
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	f8b4 3c08 	ldrh.w	r3, [r4, #3080]	@ 0xc08
 800a1d8:	f9b4 2bfc 	ldrsh.w	r2, [r4, #3068]	@ 0xbfc
 800a1dc:	f9b4 1bf8 	ldrsh.w	r1, [r4, #3064]	@ 0xbf8
 800a1e0:	f7ff fa74 	bl	80096cc <_ZN8touchgfx12MoveAnimatorI8PieChartE18startMoveAnimationEsstPFstsstES4_>
            pieChart.activatePieChartAnimationEndedCallback(true);
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f001 f8a1 	bl	800b32e <_ZN8PieChart38activatePieChartAnimationEndedCallbackEb>
            pieChartAnimationType = SWITCH_TO_GRAPH;
 800a1ec:	2203      	movs	r2, #3
 800a1ee:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
            setAllButtonsTouchable(false);
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	4620      	mov	r0, r4
            pieChartAnimationType = SWITCH_TO_GRAPH;
 800a1f6:	f8c3 2844 	str.w	r2, [r3, #2116]	@ 0x844
            animateToMoveState(COLLAPSED, 10);
 800a1fa:	220a      	movs	r2, #10
            setAllButtonsTouchable(false);
 800a1fc:	f7ff f82d 	bl	800925a <_ZN9GraphView22setAllButtonsTouchableEb>
            animateToMoveState(COLLAPSED, 10);
 800a200:	2101      	movs	r1, #1
 800a202:	f7ff fae1 	bl	80097c8 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi>
}
 800a206:	b007      	add	sp, #28
 800a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (currentState == GRAPH)
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1fa      	bne.n	800a206 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1ee>
            for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 800a210:	2600      	movs	r6, #0
            pieChart.unselectAll();
 800a212:	f504 6742 	add.w	r7, r4, #3104	@ 0xc20
 800a216:	f504 657a 	add.w	r5, r4, #4000	@ 0xfa0
        moveAnimationYEquation = yProgressionEquation;
 800a21a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a3d0 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3b8>
                legendEntries[i].setSelected(false);
 800a21e:	46b1      	mov	r9, r6
            pieChart.unselectAll();
 800a220:	4638      	mov	r0, r7
 800a222:	f000 fe26 	bl	800ae72 <_ZN8PieChart11unselectAllEv>
                legendEntries[i].setSelected(false);
 800a226:	2100      	movs	r1, #0
 800a228:	4628      	mov	r0, r5
 800a22a:	f000 fb8b 	bl	800a944 <_ZN11LegendEntry11setSelectedEb>
                legendEntries[i].setMoveAnimationDelay(i * 2);
 800a22e:	682b      	ldr	r3, [r5, #0]
 800a230:	0071      	lsls	r1, r6, #1
 800a232:	4628      	mov	r0, r5
 800a234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a238:	b289      	uxth	r1, r1
 800a23a:	4798      	blx	r3
                legendEntries[i].startMoveAnimation((i < 3) ? 236 : 356, legendEntries[i].getY(), 16, EasingEquations::cubicEaseInOut);
 800a23c:	2e03      	cmp	r6, #3
        if (!moveAnimationRunning)
 800a23e:	f895 311c 	ldrb.w	r3, [r5, #284]	@ 0x11c
 800a242:	bfb4      	ite	lt
 800a244:	f04f 0bec 	movlt.w	fp, #236	@ 0xec
 800a248:	f44f 7bb2 	movge.w	fp, #356	@ 0x164
 800a24c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800a250:	b923      	cbnz	r3, 800a25c <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x244>
            Application::getInstance()->registerTimerWidget(this);
 800a252:	f00f fcaf 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800a256:	4629      	mov	r1, r5
 800a258:	f00f fcb2 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationStartX = T::getX();
 800a25c:	88ab      	ldrh	r3, [r5, #4]
        moveAnimationCounter = 0;
 800a25e:	f8a5 911e 	strh.w	r9, [r5, #286]	@ 0x11e
        moveAnimationStartX = T::getX();
 800a262:	f8a5 3124 	strh.w	r3, [r5, #292]	@ 0x124
        moveAnimationStartY = T::getY();
 800a266:	88eb      	ldrh	r3, [r5, #6]
        moveAnimationEndX = endX;
 800a268:	f8a5 b128 	strh.w	fp, [r5, #296]	@ 0x128
        moveAnimationStartY = T::getY();
 800a26c:	f8a5 3126 	strh.w	r3, [r5, #294]	@ 0x126
        moveAnimationDuration = duration;
 800a270:	2310      	movs	r3, #16
        moveAnimationEndY = endY;
 800a272:	f8a5 a12a 	strh.w	sl, [r5, #298]	@ 0x12a
        moveAnimationDuration = duration;
 800a276:	f8a5 3122 	strh.w	r3, [r5, #290]	@ 0x122
        moveAnimationXEquation = xProgressionEquation;
 800a27a:	4b50      	ldr	r3, [pc, #320]	@ (800a3bc <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3a4>)
        moveAnimationYEquation = yProgressionEquation;
 800a27c:	e9c5 384b 	strd	r3, r8, [r5, #300]	@ 0x12c
        moveAnimationRunning = true;
 800a280:	2301      	movs	r3, #1
 800a282:	f885 311c 	strb.w	r3, [r5, #284]	@ 0x11c
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800a286:	f44f 739c 	mov.w	r3, #312	@ 0x138
 800a28a:	fb03 4306 	mla	r3, r3, r6, r4
 800a28e:	f503 637a 	add.w	r3, r3, #4000	@ 0xfa0
 800a292:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800a296:	b913      	cbnz	r3, 800a29e <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x286>
            nextMoveAnimationStep(); // Set end position and shut down
 800a298:	4628      	mov	r0, r5
 800a29a:	f7ff f941 	bl	8009520 <_ZN8touchgfx12MoveAnimatorI11LegendEntryE21nextMoveAnimationStepEv>
            for (int i = 0; i < NUMBER_OF_PIE_CHART_SECTIONS; i++)
 800a29e:	3601      	adds	r6, #1
 800a2a0:	f505 759c 	add.w	r5, r5, #312	@ 0x138
 800a2a4:	2e06      	cmp	r6, #6
 800a2a6:	d1be      	bne.n	800a226 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x20e>
            pieChart.setPieChart(-270, -270, 0, 0);
 800a2a8:	2500      	movs	r5, #0
 800a2aa:	4a47      	ldr	r2, [pc, #284]	@ (800a3c8 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3b0>)
 800a2ac:	4638      	mov	r0, r7
            pieChart.startPieChartAnimation(0, 360, 0, 60, pieChartAnimateEntryDuration, EasingEquations::quadEaseIn, EasingEquations::linearEaseOut);
 800a2ae:	4e47      	ldr	r6, [pc, #284]	@ (800a3cc <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3b4>)
            pieChart.setPieChart(-270, -270, 0, 0);
 800a2b0:	462b      	mov	r3, r5
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	9500      	str	r5, [sp, #0]
 800a2b6:	f000 fdbe 	bl	800ae36 <_ZN8PieChart11setPieChartEiiii>
            pieChart.startPieChartAnimation(0, 360, 0, 60, pieChartAnimateEntryDuration, EasingEquations::quadEaseIn, EasingEquations::linearEaseOut);
 800a2ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a3b8 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3a0>)
 800a2bc:	9603      	str	r6, [sp, #12]
 800a2be:	4629      	mov	r1, r5
 800a2c0:	9302      	str	r3, [sp, #8]
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	f8d4 3c18 	ldr.w	r3, [r4, #3096]	@ 0xc18
 800a2c8:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	233c      	movs	r3, #60	@ 0x3c
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	f000 fe8d 	bl	800aff2 <_ZN8PieChart22startPieChartAnimationEiiiiiPFstsstES1_>
            pieChart.startMoveAnimation(pieChartX, pieChartY, 35, EasingEquations::linearEaseOut);
 800a2d8:	2323      	movs	r3, #35	@ 0x23
 800a2da:	4638      	mov	r0, r7
        moveAnimationDelay = delay;
 800a2dc:	f8a4 5ec8 	strh.w	r5, [r4, #3784]	@ 0xec8
 800a2e0:	e9cd 6800 	strd	r6, r8, [sp]
 800a2e4:	f9b4 2bfc 	ldrsh.w	r2, [r4, #3068]	@ 0xbfc
            pieChartAnimationType = SWITCH_TO_PIECHART;
 800a2e8:	f504 5680 	add.w	r6, r4, #4096	@ 0x1000
            pieChart.startMoveAnimation(pieChartX, pieChartY, 35, EasingEquations::linearEaseOut);
 800a2ec:	f9b4 1bf8 	ldrsh.w	r1, [r4, #3064]	@ 0xbf8
 800a2f0:	f7ff f9ec 	bl	80096cc <_ZN8touchgfx12MoveAnimatorI8PieChartE18startMoveAnimationEsstPFstsstES4_>
            pieChart.activatePieChartAnimationEndedCallback(true);
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	f001 f819 	bl	800b32e <_ZN8PieChart38activatePieChartAnimationEndedCallbackEb>
            pieChartAnimationType = SWITCH_TO_PIECHART;
 800a2fc:	2302      	movs	r3, #2
            setCurrentState(PIE_CHART);
 800a2fe:	4620      	mov	r0, r4
 800a300:	2101      	movs	r1, #1
            pieChartAnimationType = SWITCH_TO_PIECHART;
 800a302:	f8c6 3844 	str.w	r3, [r6, #2116]	@ 0x844
            setCurrentState(PIE_CHART);
 800a306:	f7ff f830 	bl	800936a <_ZN9GraphView15setCurrentStateENS_5StateE>
            pieChartIsFull = true;
 800a30a:	2301      	movs	r3, #1
            setAllButtonsTouchable(false);
 800a30c:	4629      	mov	r1, r5
 800a30e:	4620      	mov	r0, r4
 800a310:	f7fe ffa3 	bl	800925a <_ZN9GraphView22setAllButtonsTouchableEb>
            pieChartIsFull = true;
 800a314:	f886 383c 	strb.w	r3, [r6, #2108]	@ 0x83c
            updateButtonSettings();
 800a318:	f7fe ffee 	bl	80092f8 <_ZN9GraphView20updateButtonSettingsEv>
            animateToMoveState(HIDDEN, 10);
 800a31c:	220a      	movs	r2, #10
 800a31e:	4629      	mov	r1, r5
 800a320:	4620      	mov	r0, r4
}
 800a322:	b007      	add	sp, #28
 800a324:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            animateToMoveState(HIDDEN, 10);
 800a328:	f7ff ba4e 	b.w	80097c8 <_ZN9GraphView18animateToMoveStateENS_9MenuStateEi>
    else if (&button == &donutOrPieButton)
 800a32c:	f604 33c4 	addw	r3, r4, #3012	@ 0xbc4
 800a330:	429d      	cmp	r5, r3
 800a332:	f47f af68 	bne.w	800a206 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x1ee>
        if (pieChartIsFull)
 800a336:	f504 5680 	add.w	r6, r4, #4096	@ 0x1000
            pieChart.activatePieChartAnimationEndedCallback(true);
 800a33a:	f504 6542 	add.w	r5, r4, #3104	@ 0xc20
            pieChart.startPieChartAnimation(-90, 90, 30, 90, pieChartDonutChangeAnimateDuration, EasingEquations::quintEaseOut, EasingEquations::quintEaseIn);
 800a33e:	f8d4 3c14 	ldr.w	r3, [r4, #3092]	@ 0xc14
        if (pieChartIsFull)
 800a342:	f896 183c 	ldrb.w	r1, [r6, #2108]	@ 0x83c
 800a346:	4f22      	ldr	r7, [pc, #136]	@ (800a3d0 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3b8>)
 800a348:	4a1d      	ldr	r2, [pc, #116]	@ (800a3c0 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3a8>)
 800a34a:	2900      	cmp	r1, #0
 800a34c:	d048      	beq.n	800a3e0 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3c8>
            pieChart.startPieChartAnimation(-90, 90, 30, 90, pieChartDonutChangeAnimateDuration, EasingEquations::quintEaseOut, EasingEquations::quintEaseIn);
 800a34e:	9203      	str	r2, [sp, #12]
 800a350:	f06f 0159 	mvn.w	r1, #89	@ 0x59
 800a354:	4a1f      	ldr	r2, [pc, #124]	@ (800a3d4 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3bc>)
 800a356:	4628      	mov	r0, r5
 800a358:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a35c:	225a      	movs	r2, #90	@ 0x5a
 800a35e:	231e      	movs	r3, #30
 800a360:	9200      	str	r2, [sp, #0]
 800a362:	f000 fe46 	bl	800aff2 <_ZN8PieChart22startPieChartAnimationEiiiiiPFstsstES1_>
            pieChart.setMoveAnimationDelay(animateToDonutDelay);
 800a366:	f8b4 2c1c 	ldrh.w	r2, [r4, #3100]	@ 0xc1c
            pieChart.startMoveAnimation(donutX, donutY, pieChartDonutChangeAnimateDuration - animateToDonutDelay, EasingEquations::quintEaseInOut);
 800a36a:	f8d4 3c14 	ldr.w	r3, [r4, #3092]	@ 0xc14
 800a36e:	4628      	mov	r0, r5
 800a370:	f8a4 2ec8 	strh.w	r2, [r4, #3784]	@ 0xec8
 800a374:	1a9b      	subs	r3, r3, r2
 800a376:	4a18      	ldr	r2, [pc, #96]	@ (800a3d8 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x3c0>)
 800a378:	9701      	str	r7, [sp, #4]
 800a37a:	9200      	str	r2, [sp, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	f9b4 2c04 	ldrsh.w	r2, [r4, #3076]	@ 0xc04
 800a382:	f9b4 1c00 	ldrsh.w	r1, [r4, #3072]	@ 0xc00
 800a386:	f7ff f9a1 	bl	80096cc <_ZN8touchgfx12MoveAnimatorI8PieChartE18startMoveAnimationEsstPFstsstES4_>
            pieChartAnimationType = SWITCH_TO_SEMI_DONUT;
 800a38a:	2305      	movs	r3, #5
 800a38c:	f8c6 3844 	str.w	r3, [r6, #2116]	@ 0x844
        updateButtonSettings();
 800a390:	4620      	mov	r0, r4
        pieChartIsFull = !pieChartIsFull;
 800a392:	f896 383c 	ldrb.w	r3, [r6, #2108]	@ 0x83c
 800a396:	f083 0301 	eor.w	r3, r3, #1
 800a39a:	f886 383c 	strb.w	r3, [r6, #2108]	@ 0x83c
        updateButtonSettings();
 800a39e:	f7fe ffab 	bl	80092f8 <_ZN9GraphView20updateButtonSettingsEv>
        setAllButtonsTouchable(false);
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	f7fe ff58 	bl	800925a <_ZN9GraphView22setAllButtonsTouchableEb>
        pieChart.activatePieChartAnimationEndedCallback(true);
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	4628      	mov	r0, r5
}
 800a3ae:	b007      	add	sp, #28
 800a3b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        pieChart.activatePieChartAnimationEndedCallback(true);
 800a3b4:	f000 bfbb 	b.w	800b32e <_ZN8PieChart38activatePieChartAnimationEndedCallbackEb>
 800a3b8:	0801b5eb 	.word	0x0801b5eb
 800a3bc:	0801b1ed 	.word	0x0801b1ed
 800a3c0:	0801b837 	.word	0x0801b837
 800a3c4:	0801b5df 	.word	0x0801b5df
 800a3c8:	fffffef2 	.word	0xfffffef2
 800a3cc:	0801b5e3 	.word	0x0801b5e3
 800a3d0:	0801b59b 	.word	0x0801b59b
 800a3d4:	0801b887 	.word	0x0801b887
 800a3d8:	0801b8df 	.word	0x0801b8df
 800a3dc:	20024e28 	.word	0x20024e28
            pieChart.startPieChartAnimation(0, 360, 0, 60, pieChartDonutChangeAnimateDuration, EasingEquations::quintEaseIn, EasingEquations::quadEaseOut);
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	233c      	movs	r3, #60	@ 0x3c
 800a3e4:	490d      	ldr	r1, [pc, #52]	@ (800a41c <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x404>)
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800a3f6:	f000 fdfc 	bl	800aff2 <_ZN8PieChart22startPieChartAnimationEiiiiiPFstsstES1_>
 800a3fa:	2300      	movs	r3, #0
            pieChart.startMoveAnimation(pieChartX, pieChartY, pieChartDonutChangeAnimateDuration, EasingEquations::linearEaseInOut);
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f8a4 3ec8 	strh.w	r3, [r4, #3784]	@ 0xec8
 800a402:	4b07      	ldr	r3, [pc, #28]	@ (800a420 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x408>)
 800a404:	9701      	str	r7, [sp, #4]
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	f8b4 3c14 	ldrh.w	r3, [r4, #3092]	@ 0xc14
 800a40c:	f9b4 2bfc 	ldrsh.w	r2, [r4, #3068]	@ 0xbfc
 800a410:	f9b4 1bf8 	ldrsh.w	r1, [r4, #3064]	@ 0xbf8
 800a414:	f7ff f95a 	bl	80096cc <_ZN8touchgfx12MoveAnimatorI8PieChartE18startMoveAnimationEsstPFstsstES4_>
 800a418:	2304      	movs	r3, #4
 800a41a:	e7b7      	b.n	800a38c <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x374>
 800a41c:	0801b62f 	.word	0x0801b62f
 800a420:	0801b5e7 	.word	0x0801b5e7

0800a424 <_ZN9GraphView15handleTickEventEv>:
{
 800a424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tickCount++;
 800a428:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
{
 800a42c:	4606      	mov	r6, r0
    tickCount++;
 800a42e:	f8d5 3828 	ldr.w	r3, [r5, #2088]	@ 0x828
 800a432:	3301      	adds	r3, #1
 800a434:	f8c5 3828 	str.w	r3, [r5, #2088]	@ 0x828
    if (currentState == GRAPH)
 800a438:	f890 3100 	ldrb.w	r3, [r0, #256]	@ 0x100
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f040 80ea 	bne.w	800a616 <_ZN9GraphView15handleTickEventEv+0x1f2>
        if (automaticTopMenuCollapseTimeout > 0)
 800a442:	f8d5 3840 	ldr.w	r3, [r5, #2112]	@ 0x840
 800a446:	2b00      	cmp	r3, #0
 800a448:	dd08      	ble.n	800a45c <_ZN9GraphView15handleTickEventEv+0x38>
            automaticTopMenuCollapseTimeout--;
 800a44a:	3b01      	subs	r3, #1
 800a44c:	f8c5 3840 	str.w	r3, [r5, #2112]	@ 0x840
            if (automaticTopMenuCollapseTimeout == 0)
 800a450:	b923      	cbnz	r3, 800a45c <_ZN9GraphView15handleTickEventEv+0x38>
                buttonPressedHandler(topMenuButton);
 800a452:	f500 51bc 	add.w	r1, r0, #6016	@ 0x1780
 800a456:	3114      	adds	r1, #20
 800a458:	f7ff fdde 	bl	800a018 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>
            switch (graphType)
 800a45c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 8088 	beq.w	800a576 <_ZN9GraphView15handleTickEventEv+0x152>
 800a466:	1e5a      	subs	r2, r3, #1
 800a468:	2a01      	cmp	r2, #1
 800a46a:	f200 80d4 	bhi.w	800a616 <_ZN9GraphView15handleTickEventEv+0x1f2>
                    int graph1min = graphType == 1 ? 100 : 10;
 800a46e:	2b01      	cmp	r3, #1
                    if (graphX == 0)
 800a470:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
                    int graph1min = graphType == 1 ? 100 : 10;
 800a474:	bf0b      	itete	eq
 800a476:	f44f 7896 	moveq.w	r8, #300	@ 0x12c
 800a47a:	f44f 78c3 	movne.w	r8, #390	@ 0x186
 800a47e:	f04f 0964 	moveq.w	r9, #100	@ 0x64
 800a482:	f04f 090a 	movne.w	r9, #10
 800a486:	bf0c      	ite	eq
 800a488:	2732      	moveq	r7, #50	@ 0x32
 800a48a:	2764      	movne	r7, #100	@ 0x64
                    if (graphX == 0)
 800a48c:	b9a3      	cbnz	r3, 800a4b8 <_ZN9GraphView15handleTickEventEv+0x94>
                        value1 = Utils::randomNumberBetween(graph1min, graph1max);
 800a48e:	4c63      	ldr	r4, [pc, #396]	@ (800a61c <_ZN9GraphView15handleTickEventEv+0x1f8>)
 800a490:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 800a494:	4648      	mov	r0, r9
 800a496:	f7f9 f95b 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
                        value2 = Utils::randomNumberBetween(graph2min, graph2max);
 800a49a:	4641      	mov	r1, r8
                        value1 = Utils::randomNumberBetween(graph1min, graph1max);
 800a49c:	6020      	str	r0, [r4, #0]
                        value2 = Utils::randomNumberBetween(graph2min, graph2max);
 800a49e:	200a      	movs	r0, #10
 800a4a0:	f7f9 f956 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
                        if (graphType == 1 && value1 < value2)
 800a4a4:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
                        value2 = Utils::randomNumberBetween(graph2min, graph2max);
 800a4a8:	6060      	str	r0, [r4, #4]
                        if (graphType == 1 && value1 < value2)
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d104      	bne.n	800a4b8 <_ZN9GraphView15handleTickEventEv+0x94>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	4298      	cmp	r0, r3
                            value2 = value0;
 800a4b2:	bfc8      	it	gt
 800a4b4:	e9c4 0300 	strdgt	r0, r3, [r4]
                        if (pointCounter < primaryGraph.NUMBER_OF_POINTS)
 800a4b8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
                                value1 += Utils::randomNumberBetween(randomMax, 2 * randomMax);
 800a4bc:	ea4f 0a47 	mov.w	sl, r7, lsl #1
                        if (pointCounter < primaryGraph.NUMBER_OF_POINTS)
 800a4c0:	2b10      	cmp	r3, #16
 800a4c2:	f300 80a8 	bgt.w	800a616 <_ZN9GraphView15handleTickEventEv+0x1f2>
                            value1 += Utils::randomNumberBetween(-randomMax, randomMax);
 800a4c6:	f1c7 0b00 	rsb	fp, r7, #0
 800a4ca:	4c54      	ldr	r4, [pc, #336]	@ (800a61c <_ZN9GraphView15handleTickEventEv+0x1f8>)
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	4658      	mov	r0, fp
 800a4d0:	f7f9 f93e 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 800a4d4:	6823      	ldr	r3, [r4, #0]
                            value2 += Utils::randomNumberBetween(-randomMax, randomMax);
 800a4d6:	4639      	mov	r1, r7
                            value1 += Utils::randomNumberBetween(-randomMax, randomMax);
 800a4d8:	4403      	add	r3, r0
                            value2 += Utils::randomNumberBetween(-randomMax, randomMax);
 800a4da:	4658      	mov	r0, fp
                            value1 += Utils::randomNumberBetween(-randomMax, randomMax);
 800a4dc:	6023      	str	r3, [r4, #0]
                            value2 += Utils::randomNumberBetween(-randomMax, randomMax);
 800a4de:	f7f9 f937 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 800a4e2:	6863      	ldr	r3, [r4, #4]
 800a4e4:	4403      	add	r3, r0
 800a4e6:	6063      	str	r3, [r4, #4]
                            if (value1 < graph1min)
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	4599      	cmp	r9, r3
 800a4ec:	dd06      	ble.n	800a4fc <_ZN9GraphView15handleTickEventEv+0xd8>
                                value1 += Utils::randomNumberBetween(randomMax, 2 * randomMax);
 800a4ee:	4651      	mov	r1, sl
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	f7f9 f92d 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	4403      	add	r3, r0
 800a4fa:	6023      	str	r3, [r4, #0]
                            if (value1 > graph1max)
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 800a502:	dd06      	ble.n	800a512 <_ZN9GraphView15handleTickEventEv+0xee>
                                value1 -= Utils::randomNumberBetween(randomMax, 2 * randomMax);
 800a504:	4651      	mov	r1, sl
 800a506:	4638      	mov	r0, r7
 800a508:	f7f9 f922 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	1a1b      	subs	r3, r3, r0
 800a510:	6023      	str	r3, [r4, #0]
                            if (value2 < graph2min)
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	2b09      	cmp	r3, #9
 800a516:	dc06      	bgt.n	800a526 <_ZN9GraphView15handleTickEventEv+0x102>
                                value2 += Utils::randomNumberBetween(randomMax, 2 * randomMax);
 800a518:	4651      	mov	r1, sl
 800a51a:	4638      	mov	r0, r7
 800a51c:	f7f9 f918 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 800a520:	6863      	ldr	r3, [r4, #4]
 800a522:	4403      	add	r3, r0
 800a524:	6063      	str	r3, [r4, #4]
                            if (value2 > graph2max)
 800a526:	6863      	ldr	r3, [r4, #4]
 800a528:	4543      	cmp	r3, r8
 800a52a:	dd06      	ble.n	800a53a <_ZN9GraphView15handleTickEventEv+0x116>
                                value2 -= Utils::randomNumberBetween(randomMax, 2 * randomMax);
 800a52c:	4651      	mov	r1, sl
 800a52e:	4638      	mov	r0, r7
 800a530:	f7f9 f90e 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 800a534:	6863      	ldr	r3, [r4, #4]
 800a536:	1a1b      	subs	r3, r3, r0
 800a538:	6063      	str	r3, [r4, #4]
                            if (graphType == 1)
 800a53a:	f8d5 2830 	ldr.w	r2, [r5, #2096]	@ 0x830
                                if (value1 < value2)
 800a53e:	6823      	ldr	r3, [r4, #0]
                            if (graphType == 1)
 800a540:	2a01      	cmp	r2, #1
 800a542:	d10d      	bne.n	800a560 <_ZN9GraphView15handleTickEventEv+0x13c>
                                if (value1 < value2)
 800a544:	6862      	ldr	r2, [r4, #4]
 800a546:	429a      	cmp	r2, r3
                                    value2 = value0;
 800a548:	bfc8      	it	gt
 800a54a:	e9c4 2300 	strdgt	r2, r3, [r4]
                                if (value1 - value2 < 20)
 800a54e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a552:	1ad1      	subs	r1, r2, r3
 800a554:	2913      	cmp	r1, #19
                                    value1 += 10;
 800a556:	bfdf      	itttt	le
 800a558:	320a      	addle	r2, #10
                                    value2 -= 10;
 800a55a:	3b0a      	suble	r3, #10
                                    value1 += 10;
 800a55c:	6022      	strle	r2, [r4, #0]
                                    value2 -= 10;
 800a55e:	6063      	strle	r3, [r4, #4]
        return graphLine.addValue(x, y);
 800a560:	6822      	ldr	r2, [r4, #0]
 800a562:	f506 7060 	add.w	r0, r6, #896	@ 0x380
 800a566:	f8d5 182c 	ldr.w	r1, [r5, #2092]	@ 0x82c
 800a56a:	f7fd f9ed 	bl	8007948 <_ZN13AbstractGraph8addValueEii>
 800a56e:	6862      	ldr	r2, [r4, #4]
 800a570:	f8d5 182c 	ldr.w	r1, [r5, #2092]	@ 0x82c
 800a574:	e041      	b.n	800a5fa <_ZN9GraphView15handleTickEventEv+0x1d6>
                    if (pointCounter < primaryGraph.NUMBER_OF_POINTS)
 800a576:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800a57a:	2b10      	cmp	r3, #16
 800a57c:	dc4b      	bgt.n	800a616 <_ZN9GraphView15handleTickEventEv+0x1f2>
                        primaryGraph.addValue(graphX, (int)((CWRUtil::toQ5(150) * CWRUtil::sine(graphX + Utils::randomNumberBetween(-25, 25))).to<int>()) + 200  + Utils::randomNumberBetween(-50, 50));
 800a57e:	f8d5 782c 	ldr.w	r7, [r5, #2092]	@ 0x82c
 800a582:	2119      	movs	r1, #25
 800a584:	f06f 0018 	mvn.w	r0, #24
 800a588:	f7f9 f8e2 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 800a58c:	4438      	add	r0, r7
 800a58e:	f7fe f801 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 800a592:	ab01      	add	r3, sp, #4
 800a594:	4601      	mov	r1, r0
 800a596:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a59a:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 800a59e:	f00f fffa 	bl	801a596 <_ZN8touchgfx6muldivElllRl>
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	2132      	movs	r1, #50	@ 0x32
 800a5a6:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 800a5aa:	f7f9 f8d1 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800a5ae:	1e23      	subs	r3, r4, #0
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	bfb8      	it	lt
 800a5b4:	331f      	addlt	r3, #31
 800a5b6:	eb00 1263 	add.w	r2, r0, r3, asr #5
 800a5ba:	f506 7060 	add.w	r0, r6, #896	@ 0x380
 800a5be:	32c8      	adds	r2, #200	@ 0xc8
 800a5c0:	f7fd f9c2 	bl	8007948 <_ZN13AbstractGraph8addValueEii>
                        secondaryGraph.addValue(graphX, (int)((CWRUtil::toQ5(150) * CWRUtil::sine(graphX + 230)).to<int>()) + 200  + Utils::randomNumberBetween(-50, 50));
 800a5c4:	f8d5 782c 	ldr.w	r7, [r5, #2092]	@ 0x82c
 800a5c8:	f107 00e6 	add.w	r0, r7, #230	@ 0xe6
 800a5cc:	f7fd ffe2 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 800a5d0:	ab01      	add	r3, sp, #4
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a5d8:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 800a5dc:	f00f ffdb 	bl	801a596 <_ZN8touchgfx6muldivElllRl>
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	2132      	movs	r1, #50	@ 0x32
 800a5e4:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 800a5e8:	f7f9 f8b2 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800a5ec:	1e23      	subs	r3, r4, #0
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	bfb8      	it	lt
 800a5f2:	331f      	addlt	r3, #31
 800a5f4:	eb00 1263 	add.w	r2, r0, r3, asr #5
 800a5f8:	32c8      	adds	r2, #200	@ 0xc8
 800a5fa:	f206 60dc 	addw	r0, r6, #1756	@ 0x6dc
 800a5fe:	f7fd f9a3 	bl	8007948 <_ZN13AbstractGraph8addValueEii>
                            graphX += 15;
 800a602:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800a606:	330f      	adds	r3, #15
 800a608:	f8c5 382c 	str.w	r3, [r5, #2092]	@ 0x82c
                            pointCounter++;
 800a60c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800a610:	3301      	adds	r3, #1
 800a612:	f8c5 3838 	str.w	r3, [r5, #2104]	@ 0x838
}
 800a616:	b003      	add	sp, #12
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61c:	200018a8 	.word	0x200018a8

0800a620 <_ZN9GraphView20screenSaverMajorTickEv>:

void GraphView::screenSaverMajorTick()
{
    if (Utils::randomNumberBetween(0, 100) < 50)
 800a620:	2164      	movs	r1, #100	@ 0x64
{
 800a622:	b510      	push	{r4, lr}
 800a624:	4604      	mov	r4, r0
    if (Utils::randomNumberBetween(0, 100) < 50)
 800a626:	2000      	movs	r0, #0
 800a628:	f7f9 f892 	bl	8003750 <_ZN5Utils19randomNumberBetweenEii>
 800a62c:	2831      	cmp	r0, #49	@ 0x31
    {
        buttonPressedHandler(newButton);
    }
    else
    {
        buttonPressedHandler(graphOrPieButton);
 800a62e:	4620      	mov	r0, r4
        buttonPressedHandler(newButton);
 800a630:	bfd4      	ite	le
 800a632:	f604 210c 	addwle	r1, r4, #2572	@ 0xa0c
        buttonPressedHandler(graphOrPieButton);
 800a636:	f504 6124 	addgt.w	r1, r4, #2624	@ 0xa40
    }
}
 800a63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        buttonPressedHandler(graphOrPieButton);
 800a63e:	f7ff bceb 	b.w	800a018 <_ZN9GraphView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>
	...

0800a644 <_ZN9GraphViewD1Ev>:
GraphView::~GraphView()
 800a644:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c0 <_ZN9GraphViewD1Ev+0x7c>)
 800a646:	b570      	push	{r4, r5, r6, lr}
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	4604      	mov	r4, r0
 800a64c:	333c      	adds	r3, #60	@ 0x3c
 800a64e:	f241 55b8 	movw	r5, #5560	@ 0x15b8
}
 800a652:	f640 6668 	movw	r6, #3688	@ 0xe68
GraphView::~GraphView()
 800a656:	6403      	str	r3, [r0, #64]	@ 0x40
 800a658:	5963      	ldr	r3, [r4, r5]
 800a65a:	1960      	adds	r0, r4, r5
 800a65c:	f5a5 759c 	sub.w	r5, r5, #312	@ 0x138
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4798      	blx	r3
}
 800a664:	42b5      	cmp	r5, r6
 800a666:	d1f7      	bne.n	800a658 <_ZN9GraphViewD1Ev+0x14>
GraphView::~GraphView()
 800a668:	f44f 6578 	mov.w	r5, #3968	@ 0xf80
 800a66c:	5963      	ldr	r3, [r4, r5]
 800a66e:	1960      	adds	r0, r4, r5
 800a670:	3d20      	subs	r5, #32
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4798      	blx	r3
}
 800a676:	f5b5 6f6c 	cmp.w	r5, #3776	@ 0xec0
 800a67a:	d1f7      	bne.n	800a66c <_ZN9GraphViewD1Ev+0x28>
 800a67c:	f504 6042 	add.w	r0, r4, #3104	@ 0xc20
 800a680:	f44f 753d 	mov.w	r5, #756	@ 0x2f4
 800a684:	f7fe ff2c 	bl	80094e0 <_ZN8touchgfx12MoveAnimatorI8PieChartED1Ev>
 800a688:	f504 60d6 	add.w	r0, r4, #1712	@ 0x6b0
 800a68c:	f7fd fc78 	bl	8007f80 <_ZN5GraphD1Ev>
 800a690:	f504 7055 	add.w	r0, r4, #852	@ 0x354
 800a694:	f7fd fc74 	bl	8007f80 <_ZN5GraphD1Ev>
GraphView::~GraphView()
 800a698:	5963      	ldr	r3, [r4, r5]
 800a69a:	1960      	adds	r0, r4, r5
 800a69c:	3d38      	subs	r5, #56	@ 0x38
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4798      	blx	r3
}
 800a6a2:	f5b5 7f05 	cmp.w	r5, #532	@ 0x214
 800a6a6:	d1f7      	bne.n	800a698 <_ZN9GraphViewD1Ev+0x54>
GraphView::~GraphView()
 800a6a8:	f44f 7507 	mov.w	r5, #540	@ 0x21c
 800a6ac:	5963      	ldr	r3, [r4, r5]
 800a6ae:	1960      	adds	r0, r4, r5
 800a6b0:	3d30      	subs	r5, #48	@ 0x30
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4798      	blx	r3
}
 800a6b6:	f5b5 7fae 	cmp.w	r5, #348	@ 0x15c
 800a6ba:	d1f7      	bne.n	800a6ac <_ZN9GraphViewD1Ev+0x68>
 800a6bc:	4620      	mov	r0, r4
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	08022404 	.word	0x08022404

0800a6c4 <_ZThn64_N9GraphViewD1Ev>:
        COLLAPSED,
        EXPANDED
    };

    GraphView();
    virtual ~GraphView();
 800a6c4:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800a6c8:	f7ff bfbc 	b.w	800a644 <_ZN9GraphViewD1Ev>

0800a6cc <_ZN9GraphViewD0Ev>:
GraphView::~GraphView()
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	4604      	mov	r4, r0
}
 800a6d0:	f7ff ffb8 	bl	800a644 <_ZN9GraphViewD1Ev>
 800a6d4:	f641 0148 	movw	r1, #6216	@ 0x1848
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f014 fa24 	bl	801eb26 <_ZdlPvj>
 800a6de:	4620      	mov	r0, r4
 800a6e0:	bd10      	pop	{r4, pc}

0800a6e2 <_ZThn64_N9GraphViewD0Ev>:
 800a6e2:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800a6e6:	f7ff bff1 	b.w	800a6cc <_ZN9GraphViewD0Ev>

0800a6ea <_ZN11LegendEntryD1Ev>:
}

LegendEntry::~LegendEntry()
{

}
 800a6ea:	4770      	bx	lr

0800a6ec <_ZN8touchgfx8CallbackI11LegendEntryRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800a6ec:	4770      	bx	lr

0800a6ee <_ZN8touchgfx8CallbackI11LegendEntryRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800a6ee:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800a6f0:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800a6f2:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800a6f4:	68c2      	ldr	r2, [r0, #12]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	1055      	asrs	r5, r2, #1
 800a6fa:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800a6fe:	07d2      	lsls	r2, r2, #31
 800a700:	bf48      	it	mi
 800a702:	5962      	ldrmi	r2, [r4, r5]
    }
 800a704:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800a706:	bf48      	it	mi
 800a708:	58d3      	ldrmi	r3, [r2, r3]
 800a70a:	4718      	bx	r3

0800a70c <_ZNK8touchgfx8CallbackI11LegendEntryRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800a70c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 800a70e:	6840      	ldr	r0, [r0, #4]
 800a710:	b130      	cbz	r0, 800a720 <_ZNK8touchgfx8CallbackI11LegendEntryRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	b91a      	cbnz	r2, 800a71e <_ZNK8touchgfx8CallbackI11LegendEntryRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800a716:	68d8      	ldr	r0, [r3, #12]
 800a718:	f000 0001 	and.w	r0, r0, #1
 800a71c:	4770      	bx	lr
 800a71e:	2001      	movs	r0, #1
    }
 800a720:	4770      	bx	lr

0800a722 <_ZN8touchgfx8CallbackI11LegendEntryRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800a722:	b510      	push	{r4, lr}
 800a724:	4604      	mov	r4, r0
 800a726:	2110      	movs	r1, #16
 800a728:	f014 f9fd 	bl	801eb26 <_ZdlPvj>
 800a72c:	4620      	mov	r0, r4
 800a72e:	bd10      	pop	{r4, pc}

0800a730 <_ZN11LegendEntryD0Ev>:
LegendEntry::~LegendEntry()
 800a730:	b510      	push	{r4, lr}
 800a732:	4604      	mov	r4, r0
}
 800a734:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800a738:	f014 f9f5 	bl	801eb26 <_ZdlPvj>
 800a73c:	4620      	mov	r0, r4
 800a73e:	bd10      	pop	{r4, pc}

0800a740 <_ZN11LegendEntry20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>:
    text.invalidate();
    valueText.invalidate();
}

void LegendEntry::buttonPressedHandler(const AbstractButton& button)
{
 800a740:	b510      	push	{r4, lr}
 800a742:	4604      	mov	r4, r0
    if (selectionAction && selectionAction->isValid())
 800a744:	f8d0 0118 	ldr.w	r0, [r0, #280]	@ 0x118
 800a748:	b158      	cbz	r0, 800a762 <_ZN11LegendEntry20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x22>
 800a74a:	6803      	ldr	r3, [r0, #0]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	4798      	blx	r3
 800a750:	b138      	cbz	r0, 800a762 <_ZN11LegendEntry20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        selectionAction->execute(*this);
 800a752:	f8d4 0118 	ldr.w	r0, [r4, #280]	@ 0x118
 800a756:	4621      	mov	r1, r4
 800a758:	6803      	ldr	r3, [r0, #0]
    }
}
 800a75a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        selectionAction->execute(*this);
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	4718      	bx	r3
}
 800a762:	bd10      	pop	{r4, pc}

0800a764 <_ZN11LegendEntryC1Ev>:
LegendEntry::LegendEntry() :
 800a764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
        touchable(false),
 800a768:	f44f 7380 	mov.w	r3, #256	@ 0x100
        this->x = x;
 800a76c:	2500      	movs	r5, #0
    onButtonPressed(this, &LegendEntry::buttonPressedHandler)
 800a76e:	4680      	mov	r8, r0
 800a770:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800a774:	8483      	strh	r3, [r0, #36]	@ 0x24
LegendEntry::LegendEntry() :
 800a776:	4604      	mov	r4, r0
    onButtonPressed(this, &LegendEntry::buttonPressedHandler)
 800a778:	4b5d      	ldr	r3, [pc, #372]	@ (800a8f0 <_ZN11LegendEntryC1Ev+0x18c>)
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800a77a:	f44f 077f 	mov.w	r7, #16711680	@ 0xff0000
        nextDrawChainElement(0),
 800a77e:	61c5      	str	r5, [r0, #28]
 800a780:	f104 0a5c 	add.w	sl, r4, #92	@ 0x5c
 800a784:	6285      	str	r5, [r0, #40]	@ 0x28
 800a786:	f104 0990 	add.w	r9, r4, #144	@ 0x90
 800a78a:	f8ad 600c 	strh.w	r6, [sp, #12]
        this->width = width;
 800a78e:	e9c0 5501 	strd	r5, r5, [r0, #4]
        this->width = 0;
 800a792:	e9c0 5503 	strd	r5, r5, [r0, #12]
        nextSibling(0),
 800a796:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800a79a:	f848 3b30 	str.w	r3, [r8], #48
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800a79e:	4640      	mov	r0, r8
 800a7a0:	f7f8 ff9a 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 800a7a4:	4b53      	ldr	r3, [pc, #332]	@ (800a8f4 <_ZN11LegendEntryC1Ev+0x190>)
        setBitmap(bmp);
 800a7a6:	a903      	add	r1, sp, #12
 800a7a8:	4640      	mov	r0, r8
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800a7aa:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7ac:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
 800a7b0:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
        setBitmap(bmp);
 800a7b4:	f00c fdcb 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800a7b8:	4650      	mov	r0, sl
 800a7ba:	f7f8 ff8d 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 800a7be:	4b4e      	ldr	r3, [pc, #312]	@ (800a8f8 <_ZN11LegendEntryC1Ev+0x194>)
 800a7c0:	f8a4 6082 	strh.w	r6, [r4, #130]	@ 0x82
 800a7c4:	4648      	mov	r0, r9
 800a7c6:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800a7c8:	f8c4 7088 	str.w	r7, [r4, #136]	@ 0x88
        color = col;
 800a7cc:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
 800a7d0:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
 800a7d4:	f7f8 ff80 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 800a7d8:	4b48      	ldr	r3, [pc, #288]	@ (800a8fc <_ZN11LegendEntryC1Ev+0x198>)
 800a7da:	f8a4 60b6 	strh.w	r6, [r4, #182]	@ 0xb6
 800a7de:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800a7e2:	f8a4 50c0 	strh.w	r5, [r4, #192]	@ 0xc0
 800a7e6:	f8c4 50c4 	str.w	r5, [r4, #196]	@ 0xc4
 800a7ea:	e9c4 572e 	strd	r5, r7, [r4, #184]	@ 0xb8
 800a7ee:	f104 07d4 	add.w	r7, r4, #212	@ 0xd4
    AbstractButton() : Widget(), action(), pressed(false)
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f7f8 ff70 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 800a7f8:	2301      	movs	r3, #1
    square.setBitmap(Bitmap(BITMAP_PIE_CHART_LEGEND_BLUE_ID));
 800a7fa:	a903      	add	r1, sp, #12
 800a7fc:	4640      	mov	r0, r8
 800a7fe:	f884 30f8 	strb.w	r3, [r4, #248]	@ 0xf8
 800a802:	4b3f      	ldr	r3, [pc, #252]	@ (800a900 <_ZN11LegendEntryC1Ev+0x19c>)
 800a804:	f8a4 6102 	strh.w	r6, [r4, #258]	@ 0x102
 800a808:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
    {
 800a80c:	4b3d      	ldr	r3, [pc, #244]	@ (800a904 <_ZN11LegendEntryC1Ev+0x1a0>)
 800a80e:	f8a4 6104 	strh.w	r6, [r4, #260]	@ 0x104
 800a812:	f884 6106 	strb.w	r6, [r4, #262]	@ 0x106
    text.setPosition(square.getRect().right() + 6, 6, 46, 16);
 800a816:	2610      	movs	r6, #16
 800a818:	f8c4 50fc 	str.w	r5, [r4, #252]	@ 0xfc
 800a81c:	f884 5100 	strb.w	r5, [r4, #256]	@ 0x100
        this->pobject = pobject;
 800a820:	e9c4 3442 	strd	r3, r4, [r4, #264]	@ 0x108
        this->pmemfun_1 = pmemfun_1;
 800a824:	4b38      	ldr	r3, [pc, #224]	@ (800a908 <_ZN11LegendEntryC1Ev+0x1a4>)
 800a826:	e9c4 3544 	strd	r3, r5, [r4, #272]	@ 0x110
 800a82a:	235b      	movs	r3, #91	@ 0x5b
 800a82c:	f8ad 300c 	strh.w	r3, [sp, #12]
    square.setBitmap(Bitmap(BITMAP_PIE_CHART_LEGEND_BLUE_ID));
 800a830:	f00c fd8d 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    square.setXY(0, 0);
 800a834:	462a      	mov	r2, r5
 800a836:	4629      	mov	r1, r5
 800a838:	4640      	mov	r0, r8
 800a83a:	f7f6 fad1 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    add(square);
 800a83e:	4641      	mov	r1, r8
 800a840:	4620      	mov	r0, r4
 800a842:	f008 fa85 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    text.setColor(Color::getColorFrom24BitRGB(0xBE, 0xC0, 0xC4));
 800a846:	22c4      	movs	r2, #196	@ 0xc4
 800a848:	21c0      	movs	r1, #192	@ 0xc0
 800a84a:	20be      	movs	r0, #190	@ 0xbe
 800a84c:	f011 ff3c 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        return x + width;
 800a850:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800a852:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
    text.setPosition(square.getRect().right() + 6, 6, 46, 16);
 800a854:	2206      	movs	r2, #6
        this->color = color;
 800a856:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a85a:	4650      	mov	r0, sl
 800a85c:	4419      	add	r1, r3
 800a85e:	9600      	str	r6, [sp, #0]
 800a860:	232e      	movs	r3, #46	@ 0x2e
 800a862:	3106      	adds	r1, #6
 800a864:	b209      	sxth	r1, r1
 800a866:	f7f6 faa3 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(text);
 800a86a:	4651      	mov	r1, sl
 800a86c:	4620      	mov	r0, r4
 800a86e:	f008 fa6f 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    valueText.setWildcard(valueTextBuffer);
 800a872:	f104 03c8 	add.w	r3, r4, #200	@ 0xc8
    valueText.setTypedText(TypedText(T_GRAPH_LEGEND_VALUE_TEXT));
 800a876:	4648      	mov	r0, r9
 800a878:	f04f 0136 	mov.w	r1, #54	@ 0x36
        wildcard = value;
 800a87c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800a880:	f00c fbd6 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800a884:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800a888:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
    valueText.setPosition(text.getRect().right() + 6, text.getY(), 40, 16);
 800a88c:	4648      	mov	r0, r9
 800a88e:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 800a892:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800a896:	9600      	str	r6, [sp, #0]
 800a898:	4419      	add	r1, r3
 800a89a:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 800a89e:	2328      	movs	r3, #40	@ 0x28
 800a8a0:	3106      	adds	r1, #6
 800a8a2:	b209      	sxth	r1, r1
 800a8a4:	f7f6 fa84 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(valueText);
 800a8a8:	4649      	mov	r1, r9
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f008 fa50 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800a8b0:	f8b4 2098 	ldrh.w	r2, [r4, #152]	@ 0x98
 800a8b4:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
    selectButton.setPosition(0, 0, getWidth(), getHeight());
 800a8b8:	4638      	mov	r0, r7
        return y + height;
 800a8ba:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        return x + width;
 800a8bc:	4413      	add	r3, r2
        return y + height;
 800a8be:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800a8c0:	440a      	add	r2, r1
        return x + width;
 800a8c2:	b21b      	sxth	r3, r3
 800a8c4:	4629      	mov	r1, r5
    setHeight(square.getRect().bottom() + 20); // Add a little extra height to make it easier to press
 800a8c6:	3214      	adds	r2, #20
        rect.width = width;
 800a8c8:	8123      	strh	r3, [r4, #8]
 800a8ca:	b212      	sxth	r2, r2
        rect.height = height;
 800a8cc:	8162      	strh	r2, [r4, #10]
    selectButton.setPosition(0, 0, getWidth(), getHeight());
 800a8ce:	9200      	str	r2, [sp, #0]
 800a8d0:	462a      	mov	r2, r5
 800a8d2:	f7f6 fa6d 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    selectButton.setAction(onButtonPressed);
 800a8d6:	f504 7384 	add.w	r3, r4, #264	@ 0x108
    add(selectButton);
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4639      	mov	r1, r7
        action = &callback;
 800a8de:	f8c4 30fc 	str.w	r3, [r4, #252]	@ 0xfc
 800a8e2:	f008 fa35 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	b004      	add	sp, #16
 800a8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ee:	bf00      	nop
 800a8f0:	08022454 	.word	0x08022454
 800a8f4:	08025fb8 	.word	0x08025fb8
 800a8f8:	08025e28 	.word	0x08025e28
 800a8fc:	08023474 	.word	0x08023474
 800a900:	08025f10 	.word	0x08025f10
 800a904:	080247a8 	.word	0x080247a8
 800a908:	0800a741 	.word	0x0800a741

0800a90c <_ZN11LegendEntry7setTextE5TEXTS>:
{
 800a90c:	b510      	push	{r4, lr}
    text.setTypedText(TypedText(textId));
 800a90e:	f100 045c 	add.w	r4, r0, #92	@ 0x5c
 800a912:	4620      	mov	r0, r4
 800a914:	f00c fb8c 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    text.invalidate();
 800a918:	4620      	mov	r0, r4
}
 800a91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    text.invalidate();
 800a91e:	f00f bd34 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
	...

0800a924 <_ZN11LegendEntry12setValueTextEi>:
{
 800a924:	b510      	push	{r4, lr}
 800a926:	4604      	mov	r4, r0
 800a928:	460b      	mov	r3, r1
    Unicode::snprintf(valueTextBuffer, 6, "%i", value);
 800a92a:	4a05      	ldr	r2, [pc, #20]	@ (800a940 <_ZN11LegendEntry12setValueTextEi+0x1c>)
 800a92c:	2106      	movs	r1, #6
 800a92e:	30c8      	adds	r0, #200	@ 0xc8
 800a930:	f011 febc 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    valueText.invalidate();
 800a934:	f104 0090 	add.w	r0, r4, #144	@ 0x90
}
 800a938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    valueText.invalidate();
 800a93c:	f00f bd25 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 800a940:	0802479c 	.word	0x0802479c

0800a944 <_ZN11LegendEntry11setSelectedEb>:
{
 800a944:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a946:	4604      	mov	r4, r0
        square.setBitmap(Bitmap(squareSelected));
 800a948:	f100 0630 	add.w	r6, r0, #48	@ 0x30
    if (selected)
 800a94c:	460d      	mov	r5, r1
 800a94e:	b1f9      	cbz	r1, 800a990 <_ZN11LegendEntry11setSelectedEb+0x4c>
        square.setBitmap(Bitmap(squareSelected));
 800a950:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800a952:	a901      	add	r1, sp, #4
 800a954:	4630      	mov	r0, r6
 800a956:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a95a:	f00c fcf8 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        text.setColor(Color::getColorFrom24BitRGB(0x0, 0x0, 0x0));
 800a95e:	2200      	movs	r2, #0
 800a960:	4611      	mov	r1, r2
 800a962:	4610      	mov	r0, r2
        text.setColor(Color::getColorFrom24BitRGB(0xBE, 0xC0, 0xC4));
 800a964:	f011 feb0 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        visible = vis;
 800a968:	f884 50b5 	strb.w	r5, [r4, #181]	@ 0xb5
 800a96c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a970:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
    square.invalidate();
 800a974:	4630      	mov	r0, r6
 800a976:	f00f fd08 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    text.invalidate();
 800a97a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800a97e:	f00f fd04 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    valueText.invalidate();
 800a982:	f104 0090 	add.w	r0, r4, #144	@ 0x90
}
 800a986:	b002      	add	sp, #8
 800a988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    valueText.invalidate();
 800a98c:	f00f bcfd 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        square.setBitmap(Bitmap(squareNotSelected));
 800a990:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800a992:	a901      	add	r1, sp, #4
 800a994:	4630      	mov	r0, r6
 800a996:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a99a:	f00c fcd8 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        text.setColor(Color::getColorFrom24BitRGB(0xBE, 0xC0, 0xC4));
 800a99e:	22c4      	movs	r2, #196	@ 0xc4
 800a9a0:	21c0      	movs	r1, #192	@ 0xc0
 800a9a2:	20be      	movs	r0, #190	@ 0xbe
 800a9a4:	e7de      	b.n	800a964 <_ZN11LegendEntry11setSelectedEb+0x20>

0800a9a6 <_ZN11LegendEntry10setBitmapsEtt>:
    squareNotSelected = squareNotSelectedBmp;
 800a9a6:	8581      	strh	r1, [r0, #44]	@ 0x2c
    setSelected(false);
 800a9a8:	2100      	movs	r1, #0
    squareSelected = squareSelectedBmp;
 800a9aa:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    setSelected(false);
 800a9ac:	f7ff bfca 	b.w	800a944 <_ZN11LegendEntry11setSelectedEb>

0800a9b0 <_ZN20PainterVerticalAlpha10renderInitEv>:
    alpha0atY = alphaZeroAt;
}

bool PainterVerticalAlpha::renderInit()
{
    int gradientAlpha = 255 - (currentY * 255 / alpha0atY);
 800a9b0:	6903      	ldr	r3, [r0, #16]
 800a9b2:	6982      	ldr	r2, [r0, #24]
 800a9b4:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a9b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9bc:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
    }
    if (gradientAlpha > 255)
    {
        gradientAlpha = 255;
    }
    painterAlpha = gradientAlpha;
 800a9c0:	f383 0308 	usat	r3, #8, r3
 800a9c4:	75c3      	strb	r3, [r0, #23]
    return true;
}
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	4770      	bx	lr
	...

0800a9cc <_ZN20PainterVerticalAlpha6renderEPhiiijPKh>:

void PainterVerticalAlpha::render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers)
{
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	4614      	mov	r4, r2
 800a9d4:	4699      	mov	r9, r3
    currentY = y + areaOffsetY;
 800a9d6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a9da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
{
 800a9dc:	4605      	mov	r5, r0
 800a9de:	460e      	mov	r6, r1
 800a9e0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
    currentY = y + areaOffsetY;
 800a9e2:	4413      	add	r3, r2
 800a9e4:	6103      	str	r3, [r0, #16]
    renderInit(); // re-use code to set painterAlpha
 800a9e6:	6803      	ldr	r3, [r0, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	4798      	blx	r3
#if !defined(USE_BPP) || USE_BPP==16 || USE_BPP==24
#if !defined(USE_BPP) || USE_BPP==16
    uint16_t* p = reinterpret_cast<uint16_t*>(ptr) + (x + xAdjust);
    currentX = x + areaOffsetX; // CurrentX is not used in 24bpp
 800a9ec:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
#else
    uint8_t* p = ptr + ((x + xAdjust) * 3);
#endif
    uint8_t totalAlpha = (widgetAlpha * painterAlpha) / 255u;
 800a9f0:	7dea      	ldrb	r2, [r5, #23]
    currentX = x + areaOffsetX; // CurrentX is not used in 24bpp
 800a9f2:	4423      	add	r3, r4
    uint16_t* p = reinterpret_cast<uint16_t*>(ptr) + (x + xAdjust);
 800a9f4:	444c      	add	r4, r9
        uint8_t p_red = (*p & RMASK) >> 8;
        uint8_t p_green = (*p & GMASK) >> 3;
        uint8_t p_blue = (*p & BMASK) << 3;

        uint8_t pixelRed = static_cast<uint8_t>((((painterRed - p_red) * combinedAlpha) >> 16) + p_red);
        uint8_t pixelGreen = static_cast<uint8_t>((((painterGreen - p_green) * combinedAlpha) >> 16) + p_green);
 800a9f6:	f895 c015 	ldrb.w	ip, [r5, #21]
    currentX = x + areaOffsetX; // CurrentX is not used in 24bpp
 800a9fa:	60eb      	str	r3, [r5, #12]
    uint8_t totalAlpha = (widgetAlpha * painterAlpha) / 255u;
 800a9fc:	eb06 0144 	add.w	r1, r6, r4, lsl #1
 800aa00:	7a2b      	ldrb	r3, [r5, #8]
        uint8_t pixelBlue = static_cast<uint8_t>((((painterBlue - p_blue) * combinedAlpha) >> 16) + p_blue);
 800aa02:	f895 e016 	ldrb.w	lr, [r5, #22]
 800aa06:	3902      	subs	r1, #2
    uint8_t totalAlpha = (widgetAlpha * painterAlpha) / 255u;
 800aa08:	fb13 f302 	smulbb	r3, r3, r2
 800aa0c:	22ff      	movs	r2, #255	@ 0xff

#define fastrand(g_seed) ((214013*(uint32_t)(g_seed)+2531011)>>16)
        uint8_t rand = fastrand((currentX + *p) * (currentY + *p));
 800aa0e:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 800aae4 <_ZN20PainterVerticalAlpha6renderEPhiiijPKh+0x118>
    uint8_t totalAlpha = (widgetAlpha * painterAlpha) / 255u;
 800aa12:	fbb3 faf2 	udiv	sl, r3, r2
        uint8_t pixelRed = static_cast<uint8_t>((((painterRed - p_red) * combinedAlpha) >> 16) + p_red);
 800aa16:	7d2b      	ldrb	r3, [r5, #20]
 800aa18:	9302      	str	r3, [sp, #8]
        uint8_t rand = fastrand((currentX + *p) * (currentY + *p));
 800aa1a:	692b      	ldr	r3, [r5, #16]
 800aa1c:	9303      	str	r3, [sp, #12]
 800aa1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa20:	eb07 0803 	add.w	r8, r7, r3
        uint8_t p_red = (*p & RMASK) >> 8;
 800aa24:	f831 bf02 	ldrh.w	fp, [r1, #2]!
        uint32_t combinedAlpha = (*covers) * totalAlpha;
 800aa28:	f817 2b01 	ldrb.w	r2, [r7], #1
        uint8_t p_red = (*p & RMASK) >> 8;
 800aa2c:	ea4f 241b 	mov.w	r4, fp, lsr #8
        uint8_t pixelRed = static_cast<uint8_t>((((painterRed - p_red) * combinedAlpha) >> 16) + p_red);
 800aa30:	9e02      	ldr	r6, [sp, #8]
        uint32_t combinedAlpha = (*covers) * totalAlpha;
 800aa32:	fb0a f202 	mul.w	r2, sl, r2
        uint8_t p_green = (*p & GMASK) >> 3;
 800aa36:	ea4f 00db 	mov.w	r0, fp, lsr #3
        uint8_t p_red = (*p & RMASK) >> 8;
 800aa3a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
        uint8_t p_blue = (*p & BMASK) << 3;
 800aa3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
        uint8_t p_green = (*p & GMASK) >> 3;
 800aa42:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
        uint8_t pixelRed = static_cast<uint8_t>((((painterRed - p_red) * combinedAlpha) >> 16) + p_red);
 800aa46:	1b36      	subs	r6, r6, r4
 800aa48:	4356      	muls	r6, r2
 800aa4a:	eb04 4416 	add.w	r4, r4, r6, lsr #16
        uint8_t pixelGreen = static_cast<uint8_t>((((painterGreen - p_green) * combinedAlpha) >> 16) + p_green);
 800aa4e:	ebac 0600 	sub.w	r6, ip, r0
 800aa52:	4356      	muls	r6, r2
        uint8_t pixelRed = static_cast<uint8_t>((((painterRed - p_red) * combinedAlpha) >> 16) + p_red);
 800aa54:	b2e4      	uxtb	r4, r4
        uint8_t pixelGreen = static_cast<uint8_t>((((painterGreen - p_green) * combinedAlpha) >> 16) + p_green);
 800aa56:	eb00 4016 	add.w	r0, r0, r6, lsr #16
        if (pixelRed < 0xF8)
 800aa5a:	2cf7      	cmp	r4, #247	@ 0xf7
        uint8_t pixelBlue = static_cast<uint8_t>((((painterBlue - p_blue) * combinedAlpha) >> 16) + p_blue);
 800aa5c:	b2de      	uxtb	r6, r3
        uint8_t pixelGreen = static_cast<uint8_t>((((painterGreen - p_green) * combinedAlpha) >> 16) + p_green);
 800aa5e:	b2c0      	uxtb	r0, r0
        uint8_t pixelBlue = static_cast<uint8_t>((((painterBlue - p_blue) * combinedAlpha) >> 16) + p_blue);
 800aa60:	ebae 0606 	sub.w	r6, lr, r6
 800aa64:	fb02 f606 	mul.w	r6, r2, r6
        uint8_t rand = fastrand((currentX + *p) * (currentY + *p));
 800aa68:	68ea      	ldr	r2, [r5, #12]
        uint8_t pixelBlue = static_cast<uint8_t>((((painterBlue - p_blue) * combinedAlpha) >> 16) + p_blue);
 800aa6a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
        uint8_t rand = fastrand((currentX + *p) * (currentY + *p));
 800aa6e:	9201      	str	r2, [sp, #4]
 800aa70:	eb0b 0602 	add.w	r6, fp, r2
 800aa74:	9a03      	ldr	r2, [sp, #12]
        uint8_t pixelBlue = static_cast<uint8_t>((((painterBlue - p_blue) * combinedAlpha) >> 16) + p_blue);
 800aa76:	b2db      	uxtb	r3, r3
        uint8_t rand = fastrand((currentX + *p) * (currentY + *p));
 800aa78:	4493      	add	fp, r2
 800aa7a:	4a18      	ldr	r2, [pc, #96]	@ (800aadc <_ZN20PainterVerticalAlpha6renderEPhiiijPKh+0x110>)
 800aa7c:	fb0b f606 	mul.w	r6, fp, r6
 800aa80:	fb09 2606 	mla	r6, r9, r6, r2
        }
        if (pixelBlue < 0xF8)
        {
            pixelBlue = pixelBlue + ((rand) & 0x7);    // Add bit 2-0 of rand to blue to get rounding
        }
        *p++ = ((pixelRed << 8) & RMASK) | ((pixelGreen << 3) & GMASK) | ((pixelBlue >> 3) & BMASK);
 800aa84:	4a16      	ldr	r2, [pc, #88]	@ (800aae0 <_ZN20PainterVerticalAlpha6renderEPhiiijPKh+0x114>)
        uint8_t rand = fastrand((currentX + *p) * (currentY + *p));
 800aa86:	f3c6 4607 	ubfx	r6, r6, #16, #8
            pixelRed = pixelRed + ((rand >> 5));    // Add bit 7-5 of rand to red to get rounding
 800aa8a:	bf9c      	itt	ls
 800aa8c:	eb04 1456 	addls.w	r4, r4, r6, lsr #5
 800aa90:	b2e4      	uxtbls	r4, r4
        if (pixelGreen < 0xFC)
 800aa92:	28fb      	cmp	r0, #251	@ 0xfb
            pixelGreen = pixelGreen + ((rand >> 3) & 0x3);    // Add bit 4-3 of rand to green to get rounding
 800aa94:	bf98      	it	ls
 800aa96:	f3c6 0bc1 	ubfxls	fp, r6, #3, #2
        *p++ = ((pixelRed << 8) & RMASK) | ((pixelGreen << 3) & GMASK) | ((pixelBlue >> 3) & BMASK);
 800aa9a:	ea02 2404 	and.w	r4, r2, r4, lsl #8
        currentX++;
 800aa9e:	9a01      	ldr	r2, [sp, #4]
            pixelGreen = pixelGreen + ((rand >> 3) & 0x3);    // Add bit 4-3 of rand to green to get rounding
 800aaa0:	bf98      	it	ls
 800aaa2:	4483      	addls	fp, r0
        currentX++;
 800aaa4:	f102 0201 	add.w	r2, r2, #1
            pixelGreen = pixelGreen + ((rand >> 3) & 0x3);    // Add bit 4-3 of rand to green to get rounding
 800aaa8:	bf98      	it	ls
 800aaaa:	fa5f f08b 	uxtbls.w	r0, fp
        if (pixelBlue < 0xF8)
 800aaae:	2bf7      	cmp	r3, #247	@ 0xf7
        *p++ = ((pixelRed << 8) & RMASK) | ((pixelGreen << 3) & GMASK) | ((pixelBlue >> 3) & BMASK);
 800aab0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
            pixelBlue = pixelBlue + ((rand) & 0x7);    // Add bit 2-0 of rand to blue to get rounding
 800aab4:	bf98      	it	ls
 800aab6:	f006 0607 	andls.w	r6, r6, #7
        *p++ = ((pixelRed << 8) & RMASK) | ((pixelGreen << 3) & GMASK) | ((pixelBlue >> 3) & BMASK);
 800aaba:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
            pixelBlue = pixelBlue + ((rand) & 0x7);    // Add bit 2-0 of rand to blue to get rounding
 800aabe:	bf98      	it	ls
 800aac0:	18f6      	addls	r6, r6, r3
        *p++ = ((pixelRed << 8) & RMASK) | ((pixelGreen << 3) & GMASK) | ((pixelBlue >> 3) & BMASK);
 800aac2:	ea44 0400 	orr.w	r4, r4, r0
            pixelBlue = pixelBlue + ((rand) & 0x7);    // Add bit 2-0 of rand to blue to get rounding
 800aac6:	bf98      	it	ls
 800aac8:	b2f3      	uxtbls	r3, r6

        uint8_t pixelRed = static_cast<uint8_t>((((painterRed - *p) * combinedAlpha) >> 16) + *p);
        *p++ = pixelRed;
#endif
    }
    while (--count != 0);
 800aaca:	4547      	cmp	r7, r8
        *p++ = ((pixelRed << 8) & RMASK) | ((pixelGreen << 3) & GMASK) | ((pixelBlue >> 3) & BMASK);
 800aacc:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
 800aad0:	800c      	strh	r4, [r1, #0]
        currentX++;
 800aad2:	60ea      	str	r2, [r5, #12]
    while (--count != 0);
 800aad4:	d1a6      	bne.n	800aa24 <_ZN20PainterVerticalAlpha6renderEPhiiijPKh+0x58>
    }
    while (--count != 0);
#else
#error Unknown USE_BPP
#endif
}
 800aad6:	b005      	add	sp, #20
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aadc:	00269ec3 	.word	0x00269ec3
 800aae0:	fffff800 	.word	0xfffff800
 800aae4:	000343fd 	.word	0x000343fd

0800aae8 <_ZN20PainterVerticalAlpha10renderNextERhS0_S0_S0_>:

#if !defined(USE_BPP) || USE_BPP==16 || USE_BPP==24
bool PainterVerticalAlpha::renderNext(uint8_t& pixelRed, uint8_t& pixelGreen, uint8_t& pixelBlue, uint8_t& pixelAlpha)
{
    return false;
}
 800aae8:	2000      	movs	r0, #0
 800aaea:	4770      	bx	lr

0800aaec <_ZN20PainterVerticalAlphaD1Ev>:
 800aaec:	4b03      	ldr	r3, [pc, #12]	@ (800aafc <_ZN20PainterVerticalAlphaD1Ev+0x10>)
 800aaee:	b510      	push	{r4, lr}
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	6003      	str	r3, [r0, #0]
 800aaf4:	f00b fdc6 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
 800aaf8:	4620      	mov	r0, r4
 800aafa:	bd10      	pop	{r4, pc}
 800aafc:	08025ad0 	.word	0x08025ad0

0800ab00 <_ZN20PainterVerticalAlphaD0Ev>:
 800ab00:	b510      	push	{r4, lr}
 800ab02:	4604      	mov	r4, r0
 800ab04:	f7ff fff2 	bl	800aaec <_ZN20PainterVerticalAlphaD1Ev>
 800ab08:	211c      	movs	r1, #28
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f014 f80b 	bl	801eb26 <_ZdlPvj>
 800ab10:	4620      	mov	r0, r4
 800ab12:	bd10      	pop	{r4, pc}

0800ab14 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi>:
{
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return instance->lcdRef;
 800ab16:	4f33      	ldr	r7, [pc, #204]	@ (800abe4 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0xd0>)
 800ab18:	4605      	mov	r5, r0
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	4616      	mov	r6, r2
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	6898      	ldr	r0, [r3, #8]
     *
     * @return The red part of the color.
     */
    static inline uint8_t getRedColor(colortype color)
    {
        uint8_t bitDepth = HAL::lcd().bitDepth();
 800ab22:	6803      	ldr	r3, [r0, #0]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	4798      	blx	r3
        return bitDepth == 16 ? ((color & 0xF800) >> 8) : bitDepth == 24 ? ((color.getColor32() >> 16) & 0xFF) : bitDepth == 4 ? ((color & 0xF) * 0x11) : bitDepth == 2 ? ((color & 0x3) * 0x55) : 0;
 800ab28:	2810      	cmp	r0, #16
 800ab2a:	d11c      	bne.n	800ab66 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x52>
 800ab2c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ab30:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
    painterRed = Color::getRedColor(color);
 800ab34:	752b      	strb	r3, [r5, #20]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	6898      	ldr	r0, [r3, #8]
     *
     * @return The green part of the color.
     */
    static inline uint8_t getGreenColor(colortype color)
    {
        uint8_t bitDepth = HAL::lcd().bitDepth();
 800ab3a:	6803      	ldr	r3, [r0, #0]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	4798      	blx	r3
        return bitDepth == 16 ? ((color & 0x07E0) >> 3) : bitDepth == 24 ? ((color.getColor32() >> 8) & 0xFF) : bitDepth == 4 ? ((color & 0xF) * 0x11) : bitDepth == 2 ? ((color & 0x3) * 0x55) : 0;
 800ab40:	2810      	cmp	r0, #16
 800ab42:	d126      	bne.n	800ab92 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x7e>
 800ab44:	f3c4 03cc 	ubfx	r3, r4, #3, #13
 800ab48:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
    painterGreen = Color::getGreenColor(color);
 800ab4c:	756b      	strb	r3, [r5, #21]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	6898      	ldr	r0, [r3, #8]
     *
     * @return The blue part of the color.
     */
    static inline uint8_t getBlueColor(colortype color)
    {
        uint8_t bitDepth = HAL::lcd().bitDepth();
 800ab52:	6803      	ldr	r3, [r0, #0]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	4798      	blx	r3
        return bitDepth == 16 ? ((color & 0x001F) << 3) : bitDepth == 24 ? (color.getColor32() & 0xFF) : bitDepth == 4 ? ((color & 0xF) * 0x11) : bitDepth == 2 ? ((color & 0x3) * 0x55) : 0;
 800ab58:	2810      	cmp	r0, #16
 800ab5a:	d130      	bne.n	800abbe <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0xaa>
 800ab5c:	00e4      	lsls	r4, r4, #3
 800ab5e:	b2e4      	uxtb	r4, r4
    painterBlue = Color::getBlueColor(color);
 800ab60:	75ac      	strb	r4, [r5, #22]
    alpha0atY = alphaZeroAt;
 800ab62:	61ae      	str	r6, [r5, #24]
}
 800ab64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return bitDepth == 16 ? ((color & 0xF800) >> 8) : bitDepth == 24 ? ((color.getColor32() >> 16) & 0xFF) : bitDepth == 4 ? ((color & 0xF) * 0x11) : bitDepth == 2 ? ((color & 0x3) * 0x55) : 0;
 800ab66:	2818      	cmp	r0, #24
 800ab68:	d102      	bne.n	800ab70 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x5c>
 800ab6a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800ab6e:	e7e1      	b.n	800ab34 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x20>
 800ab70:	2804      	cmp	r0, #4
 800ab72:	d105      	bne.n	800ab80 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x6c>
 800ab74:	f004 030f 	and.w	r3, r4, #15
 800ab78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	e7d9      	b.n	800ab34 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x20>
 800ab80:	2802      	cmp	r0, #2
 800ab82:	d104      	bne.n	800ab8e <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x7a>
 800ab84:	f004 0303 	and.w	r3, r4, #3
 800ab88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ab8c:	e7f4      	b.n	800ab78 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x64>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e7d0      	b.n	800ab34 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x20>
        return bitDepth == 16 ? ((color & 0x07E0) >> 3) : bitDepth == 24 ? ((color.getColor32() >> 8) & 0xFF) : bitDepth == 4 ? ((color & 0xF) * 0x11) : bitDepth == 2 ? ((color & 0x3) * 0x55) : 0;
 800ab92:	2818      	cmp	r0, #24
 800ab94:	d102      	bne.n	800ab9c <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x88>
 800ab96:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ab9a:	e7d7      	b.n	800ab4c <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x38>
 800ab9c:	2804      	cmp	r0, #4
 800ab9e:	d105      	bne.n	800abac <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x98>
 800aba0:	f004 030f 	and.w	r3, r4, #15
 800aba4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	e7cf      	b.n	800ab4c <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x38>
 800abac:	2802      	cmp	r0, #2
 800abae:	d104      	bne.n	800abba <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0xa6>
 800abb0:	f004 0303 	and.w	r3, r4, #3
 800abb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800abb8:	e7f4      	b.n	800aba4 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x90>
 800abba:	2300      	movs	r3, #0
 800abbc:	e7c6      	b.n	800ab4c <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x38>
        return bitDepth == 16 ? ((color & 0x001F) << 3) : bitDepth == 24 ? (color.getColor32() & 0xFF) : bitDepth == 4 ? ((color & 0xF) * 0x11) : bitDepth == 2 ? ((color & 0x3) * 0x55) : 0;
 800abbe:	2818      	cmp	r0, #24
 800abc0:	d0cd      	beq.n	800ab5e <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x4a>
 800abc2:	2804      	cmp	r0, #4
 800abc4:	d104      	bne.n	800abd0 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0xbc>
 800abc6:	f004 040f 	and.w	r4, r4, #15
 800abca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800abce:	e7c6      	b.n	800ab5e <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x4a>
 800abd0:	2802      	cmp	r0, #2
 800abd2:	d104      	bne.n	800abde <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0xca>
 800abd4:	f004 0403 	and.w	r4, r4, #3
 800abd8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800abdc:	e7f5      	b.n	800abca <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0xb6>
 800abde:	2400      	movs	r4, #0
 800abe0:	e7be      	b.n	800ab60 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi+0x4c>
 800abe2:	bf00      	nop
 800abe4:	20024e34 	.word	0x20024e34

0800abe8 <_ZN20PainterVerticalAlphaC1EN8touchgfx9colortypeEi>:
PainterVerticalAlpha::PainterVerticalAlpha(colortype color /*= 0*/, int alpha0atY /*= 100*/)
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	4604      	mov	r4, r0
 800abec:	460d      	mov	r5, r1
 800abee:	4616      	mov	r6, r2
    {
 800abf0:	f00b fd3e 	bl	8016670 <_ZN8touchgfx15AbstractPainterC1Ev>
 800abf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ac28 <_ZN20PainterVerticalAlphaC1EN8touchgfx9colortypeEi+0x40>)
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	4b0c      	ldr	r3, [pc, #48]	@ (800ac2c <_ZN20PainterVerticalAlphaC1EN8touchgfx9colortypeEi+0x44>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6898      	ldr	r0, [r3, #8]
        assert(HAL::lcd().bitDepth() == 16 && "The chosen painter only works with 16bpp displays");
 800abfe:	6803      	ldr	r3, [r0, #0]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	4798      	blx	r3
 800ac04:	2810      	cmp	r0, #16
 800ac06:	d005      	beq.n	800ac14 <_ZN20PainterVerticalAlphaC1EN8touchgfx9colortypeEi+0x2c>
 800ac08:	4b09      	ldr	r3, [pc, #36]	@ (800ac30 <_ZN20PainterVerticalAlphaC1EN8touchgfx9colortypeEi+0x48>)
 800ac0a:	212d      	movs	r1, #45	@ 0x2d
 800ac0c:	4a09      	ldr	r2, [pc, #36]	@ (800ac34 <_ZN20PainterVerticalAlphaC1EN8touchgfx9colortypeEi+0x4c>)
 800ac0e:	480a      	ldr	r0, [pc, #40]	@ (800ac38 <_ZN20PainterVerticalAlphaC1EN8touchgfx9colortypeEi+0x50>)
 800ac10:	f015 f8b0 	bl	801fd74 <__assert_func>
 800ac14:	4b09      	ldr	r3, [pc, #36]	@ (800ac3c <_ZN20PainterVerticalAlphaC1EN8touchgfx9colortypeEi+0x54>)
    setColor(color, alpha0atY);
 800ac16:	4620      	mov	r0, r4
 800ac18:	4632      	mov	r2, r6
 800ac1a:	4629      	mov	r1, r5
PainterVerticalAlpha::PainterVerticalAlpha(colortype color /*= 0*/, int alpha0atY /*= 100*/)
 800ac1c:	6023      	str	r3, [r4, #0]
    setColor(color, alpha0atY);
 800ac1e:	f7ff ff79 	bl	800ab14 <_ZN20PainterVerticalAlpha8setColorEN8touchgfx9colortypeEi>
}
 800ac22:	4620      	mov	r0, r4
 800ac24:	bd70      	pop	{r4, r5, r6, pc}
 800ac26:	bf00      	nop
 800ac28:	08025ad0 	.word	0x08025ad0
 800ac2c:	20024e34 	.word	0x20024e34
 800ac30:	080247b8 	.word	0x080247b8
 800ac34:	0802480b 	.word	0x0802480b
 800ac38:	08024844 	.word	0x08024844
 800ac3c:	080224e4 	.word	0x080224e4

0800ac40 <_ZN8PieChart8setWidthEs>:
{
    animationEndedCallbackActive = active;
}

void PieChart::setWidth(int16_t width)
{
 800ac40:	b570      	push	{r4, r5, r6, lr}
 800ac42:	4605      	mov	r5, r0
 800ac44:	460e      	mov	r6, r1
        rect.width = width;
 800ac46:	2448      	movs	r4, #72	@ 0x48
 800ac48:	8101      	strh	r1, [r0, #8]
    Container::setWidth(width);
    for (int i = 0; i < NUM_ITEMS; i++)
    {
        circle[i].setWidth(width);
 800ac4a:	592b      	ldr	r3, [r5, r4]
 800ac4c:	1928      	adds	r0, r5, r4
    for (int i = 0; i < NUM_ITEMS; i++)
 800ac4e:	344c      	adds	r4, #76	@ 0x4c
        circle[i].setWidth(width);
 800ac50:	4631      	mov	r1, r6
 800ac52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac54:	4798      	blx	r3
    for (int i = 0; i < NUM_ITEMS; i++)
 800ac56:	f5b4 7f04 	cmp.w	r4, #528	@ 0x210
 800ac5a:	d1f6      	bne.n	800ac4a <_ZN8PieChart8setWidthEs+0xa>
    }
}
 800ac5c:	bd70      	pop	{r4, r5, r6, pc}

0800ac5e <_ZN8PieChart9setHeightEs>:

void PieChart::setHeight(int16_t height)
{
 800ac5e:	b570      	push	{r4, r5, r6, lr}
 800ac60:	4605      	mov	r5, r0
 800ac62:	460e      	mov	r6, r1
        rect.height = height;
 800ac64:	2448      	movs	r4, #72	@ 0x48
 800ac66:	8141      	strh	r1, [r0, #10]
    Container::setHeight(height);
    for (int i = 0; i < NUM_ITEMS; i++)
    {
        circle[i].setHeight(height);
 800ac68:	592b      	ldr	r3, [r5, r4]
 800ac6a:	1928      	adds	r0, r5, r4
    for (int i = 0; i < NUM_ITEMS; i++)
 800ac6c:	344c      	adds	r4, #76	@ 0x4c
        circle[i].setHeight(height);
 800ac6e:	4631      	mov	r1, r6
 800ac70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac72:	4798      	blx	r3
    for (int i = 0; i < NUM_ITEMS; i++)
 800ac74:	f5b4 7f04 	cmp.w	r4, #528	@ 0x210
 800ac78:	d1f6      	bne.n	800ac68 <_ZN8PieChart9setHeightEs+0xa>
    }
}
 800ac7a:	bd70      	pop	{r4, r5, r6, pc}

0800ac7c <_ZN8PieChart9setSlicesEPi>:
    sliceSum = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	3904      	subs	r1, #4
{
 800ac80:	b530      	push	{r4, r5, lr}
    sliceSum = 0;
 800ac82:	6443      	str	r3, [r0, #68]	@ 0x44
    for (int i = 0; i < NUM_ITEMS; i++)
 800ac84:	f100 0544 	add.w	r5, r0, #68	@ 0x44
 800ac88:	f100 032c 	add.w	r3, r0, #44	@ 0x2c
        slice[i] = newShares[i];
 800ac8c:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800ac90:	f843 4b04 	str.w	r4, [r3], #4
    for (int i = 0; i < NUM_ITEMS; i++)
 800ac94:	42ab      	cmp	r3, r5
        sliceSum += slice[i];
 800ac96:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800ac98:	4422      	add	r2, r4
 800ac9a:	6442      	str	r2, [r0, #68]	@ 0x44
    for (int i = 0; i < NUM_ITEMS; i++)
 800ac9c:	d1f6      	bne.n	800ac8c <_ZN8PieChart9setSlicesEPi+0x10>
}
 800ac9e:	bd30      	pop	{r4, r5, pc}

0800aca0 <_ZN8PieChart10setPainterEiRN8touchgfx21AbstractPainterRGB565E>:
{
 800aca0:	460b      	mov	r3, r1
 800aca2:	4611      	mov	r1, r2
    if (index >= 0 && index < NUM_ITEMS)
 800aca4:	2b05      	cmp	r3, #5
 800aca6:	d808      	bhi.n	800acba <_ZN8PieChart10setPainterEiRN8touchgfx21AbstractPainterRGB565E+0x1a>
        circle[index].setPainter(painter);
 800aca8:	224c      	movs	r2, #76	@ 0x4c
 800acaa:	4353      	muls	r3, r2
 800acac:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800acb0:	4403      	add	r3, r0
 800acb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acb4:	4410      	add	r0, r2
 800acb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acb8:	4718      	bx	r3
}
 800acba:	4770      	bx	lr

0800acbc <_ZNK8PieChart9getAnglesERiS0_>:
    currentMinAngle = minAngle;
 800acbc:	f8d0 3230 	ldr.w	r3, [r0, #560]	@ 0x230
 800acc0:	600b      	str	r3, [r1, #0]
    currentMaxAngle = maxAngle;
 800acc2:	f8d0 3234 	ldr.w	r3, [r0, #564]	@ 0x234
 800acc6:	6013      	str	r3, [r2, #0]
}
 800acc8:	4770      	bx	lr

0800acca <_ZN8PieChart23setSelectAnimationStepsEi>:
    if (steps >= 0)
 800acca:	2900      	cmp	r1, #0
        selectAnimationSteps = steps;
 800accc:	bfa8      	it	ge
 800acce:	f8c0 1264 	strge.w	r1, [r0, #612]	@ 0x264
}
 800acd2:	4770      	bx	lr

0800acd4 <_ZNK8PieChart10isSelectedEi>:
    return (share >= 0 && share < NUM_ITEMS) ? selected[share] : false;
 800acd4:	2905      	cmp	r1, #5
 800acd6:	bf9a      	itte	ls
 800acd8:	1840      	addls	r0, r0, r1
 800acda:	f890 025c 	ldrbls.w	r0, [r0, #604]	@ 0x25c
 800acde:	2000      	movhi	r0, #0
}
 800ace0:	4770      	bx	lr

0800ace2 <_ZN8PieChart19recalculatePieChartEv>:
    if (sliceSum == 0)
 800ace2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 800ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace8:	4605      	mov	r5, r0
 800acea:	b087      	sub	sp, #28
    if (sliceSum == 0)
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 8097 	beq.w	800ae20 <_ZN8PieChart19recalculatePieChartEv+0x13e>
 800acf2:	f500 73e4 	add.w	r3, r0, #456	@ 0x1c8
 800acf6:	f100 0828 	add.w	r8, r0, #40	@ 0x28
 800acfa:	4604      	mov	r4, r0
    int accum = 0;
 800acfc:	2700      	movs	r7, #0
 800acfe:	9301      	str	r3, [sp, #4]
        circle[i].updateArcStart(arcStart);
 800ad00:	f104 0948 	add.w	r9, r4, #72	@ 0x48
        int lineWidth = (maxRadius - minRadius);
 800ad04:	e9d5 128a 	ldrd	r1, r2, [r5, #552]	@ 0x228
 800ad08:	1a53      	subs	r3, r2, r1
        circle[i].setVisible(lineWidth > 0);
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bfd4      	ite	le
 800ad0e:	2000      	movle	r0, #0
 800ad10:	2001      	movgt	r0, #1
        if (minRadius > 0)
 800ad12:	2900      	cmp	r1, #0
        visible = vis;
 800ad14:	f884 006d 	strb.w	r0, [r4, #109]	@ 0x6d
            circle[i].setRadius(minRadius + lineWidth / 2);
 800ad18:	bfc9      	itett	gt
 800ad1a:	eb03 72d3 	addgt.w	r2, r3, r3, lsr #31
    }
 800ad1e:	2300      	movle	r3, #0
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800ad20:	015b      	lslgt	r3, r3, #5
 800ad22:	eb01 0162 	addgt.w	r1, r1, r2, asr #1
 800ad26:	bfd8      	it	le
 800ad28:	0152      	lslle	r2, r2, #5
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 800ad2a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 800ad2e:	bfc8      	it	gt
 800ad30:	014a      	lslgt	r2, r1, #5
        accum += slice[i];
 800ad32:	f858 1f04 	ldr.w	r1, [r8, #4]!
        this->circleRadius = CWRUtil::toQ5<T>(r);
 800ad36:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        int arcStart = minAngle + accum * (maxAngle - minAngle) / sliceSum;
 800ad3a:	e9d5 238c 	ldrd	r2, r3, [r5, #560]	@ 0x230
 800ad3e:	eba3 0b02 	sub.w	fp, r3, r2
 800ad42:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800ad44:	fb07 f60b 	mul.w	r6, r7, fp
        accum += slice[i];
 800ad48:	440f      	add	r7, r1
        int arcStart = minAngle + accum * (maxAngle - minAngle) / sliceSum;
 800ad4a:	fb96 f6f3 	sdiv	r6, r6, r3
        int arcEnd = minAngle + accum * (maxAngle - minAngle) / sliceSum;
 800ad4e:	fb07 fb0b 	mul.w	fp, r7, fp
        int arcStart = minAngle + accum * (maxAngle - minAngle) / sliceSum;
 800ad52:	4416      	add	r6, r2
        int arcEnd = minAngle + accum * (maxAngle - minAngle) / sliceSum;
 800ad54:	fb9b fbf3 	sdiv	fp, fp, r3
 800ad58:	0173      	lsls	r3, r6, #5
 800ad5a:	4493      	add	fp, r2
        if (circleArcAngleStart == startAngleQ5)
 800ad5c:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
        CWRUtil::Q5 startAngleQ5 = CWRUtil::toQ5<T>(startAngle);
 800ad60:	9303      	str	r3, [sp, #12]
        if (circleArcAngleStart == startAngleQ5)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d00c      	beq.n	800ad80 <_ZN8PieChart19recalculatePieChartEv+0x9e>
        Rect minimalRect = getMinimalRectForUpdatedStartAngle(startAngleQ5);
 800ad66:	4649      	mov	r1, r9
 800ad68:	a804      	add	r0, sp, #16
 800ad6a:	aa03      	add	r2, sp, #12
 800ad6c:	f00b fa3c 	bl	80161e8 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E>
        circleArcAngleStart = startAngleQ5;
 800ad70:	9b03      	ldr	r3, [sp, #12]
        invalidateRect(minimalRect);
 800ad72:	a904      	add	r1, sp, #16
 800ad74:	4648      	mov	r0, r9
        circleArcAngleStart = startAngleQ5;
 800ad76:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        invalidateRect(minimalRect);
 800ad7a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	4798      	blx	r3
 800ad80:	ea4f 134b 	mov.w	r3, fp, lsl #5
        if (circleArcAngleEnd == endAngleQ5)
 800ad84:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 800ad88:	4293      	cmp	r3, r2
        CWRUtil::Q5 endAngleQ5 = CWRUtil::toQ5<T>(endAngle);
 800ad8a:	9303      	str	r3, [sp, #12]
        if (circleArcAngleEnd == endAngleQ5)
 800ad8c:	d00c      	beq.n	800ada8 <_ZN8PieChart19recalculatePieChartEv+0xc6>
        Rect minimalRect = getMinimalRectForUpdatedEndAngle(endAngleQ5);
 800ad8e:	4649      	mov	r1, r9
 800ad90:	a804      	add	r0, sp, #16
 800ad92:	aa03      	add	r2, sp, #12
 800ad94:	f00b fa94 	bl	80162c0 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>
        circleArcAngleEnd = endAngleQ5;
 800ad98:	9b03      	ldr	r3, [sp, #12]
        invalidateRect(minimalRect);
 800ad9a:	a904      	add	r1, sp, #16
 800ad9c:	4648      	mov	r0, r9
        circleArcAngleEnd = endAngleQ5;
 800ad9e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        invalidateRect(minimalRect);
 800ada2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	4798      	blx	r3
        if (displacement[i] != 0)
 800ada8:	f8d8 a1e4 	ldr.w	sl, [r8, #484]	@ 0x1e4
            circle[i].setCenter(centerX + (CWRUtil::toQ5(displacement[i]) * CWRUtil::sine(middleAngle)).to<int>(),
 800adac:	f8d5 9238 	ldr.w	r9, [r5, #568]	@ 0x238
        if (displacement[i] != 0)
 800adb0:	f1ba 0f00 	cmp.w	sl, #0
 800adb4:	d037      	beq.n	800ae26 <_ZN8PieChart19recalculatePieChartEv+0x144>
        int middleAngle = (arcStart + arcEnd) / 2;
 800adb6:	445e      	add	r6, fp
 800adb8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800adbc:	1076      	asrs	r6, r6, #1
            circle[i].setCenter(centerX + (CWRUtil::toQ5(displacement[i]) * CWRUtil::sine(middleAngle)).to<int>(),
 800adbe:	4630      	mov	r0, r6
 800adc0:	f7fd fbe8 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 800adc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800adc8:	4601      	mov	r1, r0
 800adca:	ab04      	add	r3, sp, #16
 800adcc:	ea4f 104a 	mov.w	r0, sl, lsl #5
 800add0:	f00f fbe1 	bl	801a596 <_ZN8touchgfx6muldivElllRl>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800add4:	2800      	cmp	r0, #0
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800add6:	f8d8 31e4 	ldr.w	r3, [r8, #484]	@ 0x1e4
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800adda:	bfb8      	it	lt
 800addc:	301f      	addlt	r0, #31
                                centerY - (CWRUtil::toQ5(displacement[i]) * CWRUtil::cosine(middleAngle)).to<int>());
 800adde:	f8d5 a23c 	ldr.w	sl, [r5, #572]	@ 0x23c
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800ade2:	ea4f 1b43 	mov.w	fp, r3, lsl #5
            circle[i].setCenter(centerX + (CWRUtil::toQ5(displacement[i]) * CWRUtil::sine(middleAngle)).to<int>(),
 800ade6:	eb09 1960 	add.w	r9, r9, r0, asr #5
        return sine(90 - i);
 800adea:	f1c6 005a 	rsb	r0, r6, #90	@ 0x5a
 800adee:	f7fd fbd1 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 800adf2:	ab04      	add	r3, sp, #16
        return sine(90 - i);
 800adf4:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 800adf6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800adfa:	4658      	mov	r0, fp
 800adfc:	f00f fbcb 	bl	801a596 <_ZN8touchgfx6muldivElllRl>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800ae00:	2800      	cmp	r0, #0
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800ae02:	ea4f 1349 	mov.w	r3, r9, lsl #5
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800ae06:	bfb8      	it	lt
 800ae08:	301f      	addlt	r0, #31
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 800ae0a:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ae0c:	ebaa 1a60 	sub.w	sl, sl, r0, asr #5
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800ae10:	ea4f 134a 	mov.w	r3, sl, lsl #5
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 800ae14:	67e3      	str	r3, [r4, #124]	@ 0x7c
    for (int i = 0; i < NUM_ITEMS; i++)
 800ae16:	344c      	adds	r4, #76	@ 0x4c
 800ae18:	9b01      	ldr	r3, [sp, #4]
 800ae1a:	429c      	cmp	r4, r3
 800ae1c:	f47f af70 	bne.w	800ad00 <_ZN8PieChart19recalculatePieChartEv+0x1e>
}
 800ae20:	b007      	add	sp, #28
 800ae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            circle[i].setCenter(centerX, centerY);
 800ae26:	f8d5 223c 	ldr.w	r2, [r5, #572]	@ 0x23c
 800ae2a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800ae2e:	0152      	lsls	r2, r2, #5
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 800ae30:	67a3      	str	r3, [r4, #120]	@ 0x78
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 800ae32:	67e2      	str	r2, [r4, #124]	@ 0x7c
    }
 800ae34:	e7ef      	b.n	800ae16 <_ZN8PieChart19recalculatePieChartEv+0x134>

0800ae36 <_ZN8PieChart11setPieChartEiiii>:
{
 800ae36:	b570      	push	{r4, r5, r6, lr}
 800ae38:	9e04      	ldr	r6, [sp, #16]
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	461d      	mov	r5, r3
    maxAngle = newMaxAngle;
 800ae3e:	e9c0 128c 	strd	r1, r2, [r0, #560]	@ 0x230
    recalculatePieChart();
 800ae42:	f7ff ff4e 	bl	800ace2 <_ZN8PieChart19recalculatePieChartEv>
    recalculatePieChart();
 800ae46:	4620      	mov	r0, r4
    this->maxRadius = outerRadius;
 800ae48:	e9c4 568a 	strd	r5, r6, [r4, #552]	@ 0x228
    recalculatePieChart();
 800ae4c:	f7ff ff49 	bl	800ace2 <_ZN8PieChart19recalculatePieChartEv>
    startAngleExit = minAngle;
 800ae50:	f8d4 3230 	ldr.w	r3, [r4, #560]	@ 0x230
    minRadiusExit  = newMinRadius;
 800ae54:	f8c4 5280 	str.w	r5, [r4, #640]	@ 0x280
    startAngleExit = minAngle;
 800ae58:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    endAngleExit   = maxAngle;
 800ae5c:	f8d4 3234 	ldr.w	r3, [r4, #564]	@ 0x234
    maxRadiusExit  = newMaxRadius;
 800ae60:	f8c4 6288 	str.w	r6, [r4, #648]	@ 0x288
    endAngleExit   = maxAngle;
 800ae64:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
}
 800ae68:	bd70      	pop	{r4, r5, r6, pc}

0800ae6a <_ZN8PieChart9setCenterEii>:
    centerY = newCenterY;
 800ae6a:	e9c0 128e 	strd	r1, r2, [r0, #568]	@ 0x238
    recalculatePieChart();
 800ae6e:	f7ff bf38 	b.w	800ace2 <_ZN8PieChart19recalculatePieChartEv>

0800ae72 <_ZN8PieChart11unselectAllEv>:
{
 800ae72:	b538      	push	{r3, r4, r5, lr}
    animationRunning = false;
 800ae74:	2500      	movs	r5, #0
{
 800ae76:	4604      	mov	r4, r0
        displacement[i] = 0;
 800ae78:	2218      	movs	r2, #24
 800ae7a:	f500 7004 	add.w	r0, r0, #528	@ 0x210
 800ae7e:	4629      	mov	r1, r5
    animationRunning = false;
 800ae80:	f880 5030 	strb.w	r5, [r0, #48]	@ 0x30
        displacement[i] = 0;
 800ae84:	f015 f96f 	bl	8020166 <memset>
        expand[i] = 0;
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f504 7011 	add.w	r0, r4, #580	@ 0x244
 800ae8e:	221e      	movs	r2, #30
 800ae90:	f015 f969 	bl	8020166 <memset>
    recalculatePieChart();
 800ae94:	4620      	mov	r0, r4
}
 800ae96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    recalculatePieChart();
 800ae9a:	f7ff bf22 	b.w	800ace2 <_ZN8PieChart19recalculatePieChartEv>

0800ae9e <_ZN8PieChart15handleTickEventEv>:
}

void PieChart::handleTickEvent()
{
    Container::handleTickEvent();
    if (animationRunning)
 800ae9e:	f890 3240 	ldrb.w	r3, [r0, #576]	@ 0x240
{
 800aea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea6:	4604      	mov	r4, r0
    if (animationRunning)
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 80a0 	beq.w	800afee <_ZN8PieChart15handleTickEventEv+0x150>
    {
        switch (animationType)
 800aeae:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d035      	beq.n	800af22 <_ZN8PieChart15handleTickEventEv+0x84>
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d072      	beq.n	800afa0 <_ZN8PieChart15handleTickEventEv+0x102>
                }
                recalculatePieChart();
            }
            break;
        }
        if (isVisible())
 800aeba:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800aebe:	b11b      	cbz	r3, 800aec8 <_ZN8PieChart15handleTickEventEv+0x2a>
        {
            invalidate();
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	4620      	mov	r0, r4
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	4798      	blx	r3
        }
        currentStep++;
 800aec8:	f8d4 328c 	ldr.w	r3, [r4, #652]	@ 0x28c
        if (currentStep > animationSteps)
 800aecc:	f8d4 2290 	ldr.w	r2, [r4, #656]	@ 0x290
        currentStep++;
 800aed0:	3301      	adds	r3, #1
        if (currentStep > animationSteps)
 800aed2:	4293      	cmp	r3, r2
        currentStep++;
 800aed4:	f8c4 328c 	str.w	r3, [r4, #652]	@ 0x28c
        if (currentStep > animationSteps)
 800aed8:	f340 8089 	ble.w	800afee <_ZN8PieChart15handleTickEventEv+0x150>
        {

            Application::getInstance()->unregisterTimerWidget(this);
 800aedc:	f00e fe6a 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800aee0:	4621      	mov	r1, r4
 800aee2:	f00e fe9d 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
            animationRunning = false;
 800aee6:	2300      	movs	r3, #0
 800aee8:	f884 3240 	strb.w	r3, [r4, #576]	@ 0x240
            for (int i = 0; i < NUM_ITEMS; i++)
            {
                expand[i] = 0;
 800aeec:	e9c4 3391 	strd	r3, r3, [r4, #580]	@ 0x244
 800aef0:	e9c4 3393 	strd	r3, r3, [r4, #588]	@ 0x24c
 800aef4:	e9c4 3395 	strd	r3, r3, [r4, #596]	@ 0x254
            }
            if (animationEndedCallbackActive && animationEndedAction && animationEndedAction->isValid())
 800aef8:	f894 32a4 	ldrb.w	r3, [r4, #676]	@ 0x2a4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d076      	beq.n	800afee <_ZN8PieChart15handleTickEventEv+0x150>
 800af00:	f8d4 02a0 	ldr.w	r0, [r4, #672]	@ 0x2a0
 800af04:	2800      	cmp	r0, #0
 800af06:	d072      	beq.n	800afee <_ZN8PieChart15handleTickEventEv+0x150>
 800af08:	6803      	ldr	r3, [r0, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	4798      	blx	r3
 800af0e:	2800      	cmp	r0, #0
 800af10:	d06d      	beq.n	800afee <_ZN8PieChart15handleTickEventEv+0x150>
            {
                animationEndedAction->execute(*this);
 800af12:	f8d4 02a0 	ldr.w	r0, [r4, #672]	@ 0x2a0
 800af16:	4621      	mov	r1, r4
 800af18:	6803      	ldr	r3, [r0, #0]
            }
        }
    }
}
 800af1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                animationEndedAction->execute(*this);
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	4718      	bx	r3
                int newStartAngle = angleEquation(currentStep, startAngleInit, startAngleExit - startAngleInit, animationSteps);
 800af22:	e9d0 129b 	ldrd	r1, r2, [r0, #620]	@ 0x26c
 800af26:	f8d0 5294 	ldr.w	r5, [r0, #660]	@ 0x294
 800af2a:	1a52      	subs	r2, r2, r1
 800af2c:	f8b0 3290 	ldrh.w	r3, [r0, #656]	@ 0x290
 800af30:	b209      	sxth	r1, r1
 800af32:	f8b0 028c 	ldrh.w	r0, [r0, #652]	@ 0x28c
 800af36:	b212      	sxth	r2, r2
 800af38:	47a8      	blx	r5
                int newEndAngle   = angleEquation(currentStep, endAngleInit,   endAngleExit   - endAngleInit,   animationSteps);
 800af3a:	f8d4 5294 	ldr.w	r5, [r4, #660]	@ 0x294
                int newStartAngle = angleEquation(currentStep, startAngleInit, startAngleExit - startAngleInit, animationSteps);
 800af3e:	4680      	mov	r8, r0
                int newEndAngle   = angleEquation(currentStep, endAngleInit,   endAngleExit   - endAngleInit,   animationSteps);
 800af40:	f8b4 3290 	ldrh.w	r3, [r4, #656]	@ 0x290
 800af44:	f8b4 028c 	ldrh.w	r0, [r4, #652]	@ 0x28c
 800af48:	e9d4 129d 	ldrd	r1, r2, [r4, #628]	@ 0x274
 800af4c:	1a52      	subs	r2, r2, r1
 800af4e:	b209      	sxth	r1, r1
 800af50:	b212      	sxth	r2, r2
 800af52:	47a8      	blx	r5
                int newMinRadius  = radiusEquation(currentStep, minRadiusInit,  minRadiusExit  - minRadiusInit,  animationSteps);
 800af54:	f8d4 5298 	ldr.w	r5, [r4, #664]	@ 0x298
                int newEndAngle   = angleEquation(currentStep, endAngleInit,   endAngleExit   - endAngleInit,   animationSteps);
 800af58:	4607      	mov	r7, r0
                int newMinRadius  = radiusEquation(currentStep, minRadiusInit,  minRadiusExit  - minRadiusInit,  animationSteps);
 800af5a:	f8b4 3290 	ldrh.w	r3, [r4, #656]	@ 0x290
 800af5e:	f8b4 028c 	ldrh.w	r0, [r4, #652]	@ 0x28c
 800af62:	e9d4 129f 	ldrd	r1, r2, [r4, #636]	@ 0x27c
 800af66:	1a52      	subs	r2, r2, r1
 800af68:	b209      	sxth	r1, r1
 800af6a:	b212      	sxth	r2, r2
 800af6c:	47a8      	blx	r5
                int newMaxRadius  = radiusEquation(currentStep, maxRadiusInit,  maxRadiusExit  - maxRadiusInit,  animationSteps);
 800af6e:	f8d4 5298 	ldr.w	r5, [r4, #664]	@ 0x298
                int newMinRadius  = radiusEquation(currentStep, minRadiusInit,  minRadiusExit  - minRadiusInit,  animationSteps);
 800af72:	4606      	mov	r6, r0
                int newMaxRadius  = radiusEquation(currentStep, maxRadiusInit,  maxRadiusExit  - maxRadiusInit,  animationSteps);
 800af74:	f8b4 3290 	ldrh.w	r3, [r4, #656]	@ 0x290
 800af78:	f8b4 028c 	ldrh.w	r0, [r4, #652]	@ 0x28c
 800af7c:	e9d4 12a1 	ldrd	r1, r2, [r4, #644]	@ 0x284
 800af80:	1a52      	subs	r2, r2, r1
 800af82:	b209      	sxth	r1, r1
 800af84:	b212      	sxth	r2, r2
 800af86:	47a8      	blx	r5
 800af88:	4605      	mov	r5, r0
    recalculatePieChart();
 800af8a:	4620      	mov	r0, r4
                int newEndAngle   = angleEquation(currentStep, endAngleInit,   endAngleExit   - endAngleInit,   animationSteps);
 800af8c:	e9c4 878c 	strd	r8, r7, [r4, #560]	@ 0x230
    recalculatePieChart();
 800af90:	f7ff fea7 	bl	800ace2 <_ZN8PieChart19recalculatePieChartEv>
                int newMaxRadius  = radiusEquation(currentStep, maxRadiusInit,  maxRadiusExit  - maxRadiusInit,  animationSteps);
 800af94:	e9c4 658a 	strd	r6, r5, [r4, #552]	@ 0x228
                recalculatePieChart();
 800af98:	4620      	mov	r0, r4
 800af9a:	f7ff fea2 	bl	800ace2 <_ZN8PieChart19recalculatePieChartEv>
            break;
 800af9e:	e78c      	b.n	800aeba <_ZN8PieChart15handleTickEventEv+0x1c>
                int showRadius = angleEquation(currentStep, 0, DISPLACEMENT, animationSteps);
 800afa0:	f8d0 5294 	ldr.w	r5, [r0, #660]	@ 0x294
 800afa4:	220f      	movs	r2, #15
 800afa6:	f8b0 3290 	ldrh.w	r3, [r0, #656]	@ 0x290
 800afaa:	2100      	movs	r1, #0
 800afac:	f8b0 028c 	ldrh.w	r0, [r0, #652]	@ 0x28c
 800afb0:	47a8      	blx	r5
                int hideRadius = angleEquation(currentStep, DISPLACEMENT, -DISPLACEMENT, animationSteps);
 800afb2:	f8b4 3290 	ldrh.w	r3, [r4, #656]	@ 0x290
 800afb6:	210f      	movs	r1, #15
                int showRadius = angleEquation(currentStep, 0, DISPLACEMENT, animationSteps);
 800afb8:	4605      	mov	r5, r0
                int hideRadius = angleEquation(currentStep, DISPLACEMENT, -DISPLACEMENT, animationSteps);
 800afba:	f8d4 6294 	ldr.w	r6, [r4, #660]	@ 0x294
 800afbe:	f06f 020e 	mvn.w	r2, #14
 800afc2:	f8b4 028c 	ldrh.w	r0, [r4, #652]	@ 0x28c
 800afc6:	47b0      	blx	r6
                for (int i = 0; i < NUM_ITEMS; i++)
 800afc8:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 800afcc:	f504 7116 	add.w	r1, r4, #600	@ 0x258
                    switch (expand[i])
 800afd0:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800afd4:	1c56      	adds	r6, r2, #1
 800afd6:	d004      	beq.n	800afe2 <_ZN8PieChart15handleTickEventEv+0x144>
 800afd8:	2a01      	cmp	r2, #1
 800afda:	d005      	beq.n	800afe8 <_ZN8PieChart15handleTickEventEv+0x14a>
                for (int i = 0; i < NUM_ITEMS; i++)
 800afdc:	428b      	cmp	r3, r1
 800afde:	d1f7      	bne.n	800afd0 <_ZN8PieChart15handleTickEventEv+0x132>
 800afe0:	e7da      	b.n	800af98 <_ZN8PieChart15handleTickEventEv+0xfa>
                        displacement[i] = hideRadius;
 800afe2:	f843 0c34 	str.w	r0, [r3, #-52]
                        break;
 800afe6:	e7f9      	b.n	800afdc <_ZN8PieChart15handleTickEventEv+0x13e>
                        displacement[i] = showRadius;
 800afe8:	f843 5c34 	str.w	r5, [r3, #-52]
                        break;
 800afec:	e7f6      	b.n	800afdc <_ZN8PieChart15handleTickEventEv+0x13e>
}
 800afee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aff2 <_ZN8PieChart22startPieChartAnimationEiiiiiPFstsstES1_>:
{
 800aff2:	b538      	push	{r3, r4, r5, lr}
 800aff4:	4604      	mov	r4, r0
    startAngleInit = startAngleExit;
 800aff6:	f8d0 0270 	ldr.w	r0, [r0, #624]	@ 0x270
    currentStep = 0;
 800affa:	2500      	movs	r5, #0
    startAngleInit = startAngleExit;
 800affc:	f8c4 026c 	str.w	r0, [r4, #620]	@ 0x26c
    endAngleInit   = endAngleExit;
 800b000:	f8d4 0278 	ldr.w	r0, [r4, #632]	@ 0x278
    startAngleExit = toStartAngle;
 800b004:	f8c4 1270 	str.w	r1, [r4, #624]	@ 0x270
    endAngleInit   = endAngleExit;
 800b008:	f8c4 0274 	str.w	r0, [r4, #628]	@ 0x274
    minRadiusInit  = minRadiusExit;
 800b00c:	f8d4 0280 	ldr.w	r0, [r4, #640]	@ 0x280
    minRadiusExit  = toMinRadius;
 800b010:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
    maxRadiusExit  = toMaxRadius;
 800b014:	9b04      	ldr	r3, [sp, #16]
    minRadiusInit  = minRadiusExit;
 800b016:	f8c4 027c 	str.w	r0, [r4, #636]	@ 0x27c
    maxRadiusInit  = maxRadiusExit;
 800b01a:	f8d4 0288 	ldr.w	r0, [r4, #648]	@ 0x288
    maxRadiusExit  = toMaxRadius;
 800b01e:	f8c4 3288 	str.w	r3, [r4, #648]	@ 0x288
    animationSteps = steps;
 800b022:	9b05      	ldr	r3, [sp, #20]
    endAngleExit   = toEndAngle;
 800b024:	f8c4 2278 	str.w	r2, [r4, #632]	@ 0x278
    animationSteps = steps;
 800b028:	f8c4 3290 	str.w	r3, [r4, #656]	@ 0x290
    this->angleEquation = newAngleEquation;
 800b02c:	9b06      	ldr	r3, [sp, #24]
    maxRadiusInit  = maxRadiusExit;
 800b02e:	f8c4 0284 	str.w	r0, [r4, #644]	@ 0x284
    this->angleEquation = newAngleEquation;
 800b032:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
    this->radiusEquation = newRadiusEquation;
 800b036:	9b07      	ldr	r3, [sp, #28]
    currentStep = 0;
 800b038:	f8c4 528c 	str.w	r5, [r4, #652]	@ 0x28c
    this->radiusEquation = newRadiusEquation;
 800b03c:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
    Application::getInstance()->registerTimerWidget(this);
 800b040:	f00e fdb8 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800b044:	4621      	mov	r1, r4
 800b046:	f00e fdbb 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
    animationRunning = true;
 800b04a:	2301      	movs	r3, #1
    animationType = CHANGE_PIECHART;
 800b04c:	f8c4 5268 	str.w	r5, [r4, #616]	@ 0x268
    animationRunning = true;
 800b050:	f884 3240 	strb.w	r3, [r4, #576]	@ 0x240
}
 800b054:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b058 <_ZN8PieChartC1Ev>:
        this->x = x;
 800b058:	2300      	movs	r3, #0
        touchable(false),
 800b05a:	f44f 7280 	mov.w	r2, #256	@ 0x100
PieChart::PieChart():
 800b05e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    animationEndedCallbackActive(false)
 800b062:	4606      	mov	r6, r0
        nextDrawChainElement(0),
 800b064:	61c3      	str	r3, [r0, #28]
 800b066:	6283      	str	r3, [r0, #40]	@ 0x28
PieChart::PieChart():
 800b068:	b085      	sub	sp, #20
        touchable(false),
 800b06a:	8482      	strh	r2, [r0, #36]	@ 0x24
 800b06c:	4604      	mov	r4, r0
 800b06e:	f500 7704 	add.w	r7, r0, #528	@ 0x210
        this->width = width;
 800b072:	e9c0 3301 	strd	r3, r3, [r0, #4]
        this->width = 0;
 800b076:	e9c0 3303 	strd	r3, r3, [r0, #12]
        nextSibling(0),
 800b07a:	e9c0 3305 	strd	r3, r3, [r0, #20]
    animationEndedCallbackActive(false)
 800b07e:	4b24      	ldr	r3, [pc, #144]	@ (800b110 <_ZN8PieChartC1Ev+0xb8>)
 800b080:	f846 3b48 	str.w	r3, [r6], #72
 800b084:	4635      	mov	r5, r6
 800b086:	4628      	mov	r0, r5
 800b088:	354c      	adds	r5, #76	@ 0x4c
 800b08a:	f00a fe91 	bl	8015db0 <_ZN8touchgfx6CircleC1Ev>
 800b08e:	42bd      	cmp	r5, r7
 800b090:	d1f9      	bne.n	800b086 <_ZN8PieChartC1Ev+0x2e>
    minRadius(0),
 800b092:	2500      	movs	r5, #0
    selectAnimationSteps(4),
 800b094:	2304      	movs	r3, #4
 800b096:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 800b09a:	f204 285b 	addw	r8, r4, #603	@ 0x25b
 800b09e:	f104 0940 	add.w	r9, r4, #64	@ 0x40
    animationRunning(false),
 800b0a2:	f884 5240 	strb.w	r5, [r4, #576]	@ 0x240
    selectAnimationSteps(4),
 800b0a6:	f8c4 3264 	str.w	r3, [r4, #612]	@ 0x264
    animationEndedCallbackActive(false)
 800b0aa:	f884 52a4 	strb.w	r5, [r4, #676]	@ 0x2a4
    sliceSum = 0;
 800b0ae:	6465      	str	r5, [r4, #68]	@ 0x44
    maxRadius(0),
 800b0b0:	e9c4 558a 	strd	r5, r5, [r4, #552]	@ 0x228
    maxAngle(0),
 800b0b4:	e9c4 558c 	strd	r5, r5, [r4, #560]	@ 0x230
    centerY(0),
 800b0b8:	e9c4 558e 	strd	r5, r5, [r4, #568]	@ 0x238
    animationEndedAction(0),
 800b0bc:	e9c4 55a7 	strd	r5, r5, [r4, #668]	@ 0x29c
        slice[i] = 0;
 800b0c0:	f847 5f04 	str.w	r5, [r7, #4]!
        add(circle[i]);
 800b0c4:	4631      	mov	r1, r6
        displacement[i] = 0;
 800b0c6:	f8c7 51e4 	str.w	r5, [r7, #484]	@ 0x1e4
        add(circle[i]);
 800b0ca:	4620      	mov	r0, r4
        expand[i] = 0;
 800b0cc:	f8c7 5218 	str.w	r5, [r7, #536]	@ 0x218
        selected[i] = false;
 800b0d0:	f808 5f01 	strb.w	r5, [r8, #1]!
        visible = vis;
 800b0d4:	f886 5025 	strb.w	r5, [r6, #37]	@ 0x25
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 800b0d8:	e9c6 550c 	strd	r5, r5, [r6, #48]	@ 0x30
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 800b0dc:	e9c6 550f 	strd	r5, r5, [r6, #60]	@ 0x3c
        add(circle[i]);
 800b0e0:	f007 fe36 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for (int i = 0; i < NUM_ITEMS; i++)
 800b0e4:	454f      	cmp	r7, r9
 800b0e6:	f106 064c 	add.w	r6, r6, #76	@ 0x4c
 800b0ea:	d1e9      	bne.n	800b0c0 <_ZN8PieChartC1Ev+0x68>
    startPieChartAnimation(0, 0, 0, 0, 0);
 800b0ec:	4b09      	ldr	r3, [pc, #36]	@ (800b114 <_ZN8PieChartC1Ev+0xbc>)
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e9cd 5500 	strd	r5, r5, [sp]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	f7ff ff78 	bl	800aff2 <_ZN8PieChart22startPieChartAnimationEiiiiiPFstsstES1_>
        touchable = touch;
 800b102:	2301      	movs	r3, #1
}
 800b104:	4620      	mov	r0, r4
 800b106:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800b10a:	b005      	add	sp, #20
 800b10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b110:	08022504 	.word	0x08022504
 800b114:	0801b59b 	.word	0x0801b59b

0800b118 <_ZN8PieChart15animateSelectedEiPFstsstE>:
    this->currentStep = 0;
 800b118:	2300      	movs	r3, #0
{
 800b11a:	b510      	push	{r4, lr}
 800b11c:	4604      	mov	r4, r0
    angleEquation = progressionEquation;
 800b11e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
    this->animationSteps = steps;
 800b122:	e9c0 31a3 	strd	r3, r1, [r0, #652]	@ 0x28c
    Application::getInstance()->registerTimerWidget(this);
 800b126:	f00e fd45 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800b12a:	4621      	mov	r1, r4
 800b12c:	f00e fd48 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
    animationRunning = true;
 800b130:	2301      	movs	r3, #1
 800b132:	f884 3240 	strb.w	r3, [r4, #576]	@ 0x240
    animationType = SELECT_DESELECT;
 800b136:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
}
 800b13a:	bd10      	pop	{r4, pc}

0800b13c <_ZN8PieChart11setSelectedEib>:
    if (index < 0 || index >= NUM_ITEMS)
 800b13c:	2905      	cmp	r1, #5
{
 800b13e:	b570      	push	{r4, r5, r6, lr}
 800b140:	4604      	mov	r4, r0
 800b142:	460d      	mov	r5, r1
    if (index < 0 || index >= NUM_ITEMS)
 800b144:	d824      	bhi.n	800b190 <_ZN8PieChart11setSelectedEib+0x54>
    if (value == selected[index])
 800b146:	1843      	adds	r3, r0, r1
 800b148:	f893 125c 	ldrb.w	r1, [r3, #604]	@ 0x25c
 800b14c:	4291      	cmp	r1, r2
 800b14e:	d01f      	beq.n	800b190 <_ZN8PieChart11setSelectedEib+0x54>
    expand[index] = value ? 1 : -1;
 800b150:	2a00      	cmp	r2, #0
    selected[index] = value;
 800b152:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
    expand[index] = value ? 1 : -1;
 800b156:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    animateSelected(selectAnimationSteps);
 800b15a:	f8d0 1264 	ldr.w	r1, [r0, #612]	@ 0x264
    expand[index] = value ? 1 : -1;
 800b15e:	bf0c      	ite	eq
 800b160:	f04f 32ff 	moveq.w	r2, #4294967295
 800b164:	2201      	movne	r2, #1
 800b166:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
    animateSelected(selectAnimationSteps);
 800b16a:	4a0a      	ldr	r2, [pc, #40]	@ (800b194 <_ZN8PieChart11setSelectedEib+0x58>)
 800b16c:	f7ff ffd4 	bl	800b118 <_ZN8PieChart15animateSelectedEiPFstsstE>
    if (selectionAction && selectionAction->isValid())
 800b170:	f8d4 029c 	ldr.w	r0, [r4, #668]	@ 0x29c
 800b174:	b160      	cbz	r0, 800b190 <_ZN8PieChart11setSelectedEib+0x54>
 800b176:	6803      	ldr	r3, [r0, #0]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	4798      	blx	r3
 800b17c:	b140      	cbz	r0, 800b190 <_ZN8PieChart11setSelectedEib+0x54>
        selectionAction->execute(*this, index);
 800b17e:	f8d4 029c 	ldr.w	r0, [r4, #668]	@ 0x29c
 800b182:	462a      	mov	r2, r5
 800b184:	4621      	mov	r1, r4
 800b186:	6803      	ldr	r3, [r0, #0]
}
 800b188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        selectionAction->execute(*this, index);
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	4718      	bx	r3
}
 800b190:	bd70      	pop	{r4, r5, r6, pc}
 800b192:	bf00      	nop
 800b194:	0801b59b 	.word	0x0801b59b

0800b198 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE>:
    if (animationRunning)
 800b198:	f890 3240 	ldrb.w	r3, [r0, #576]	@ 0x240
{
 800b19c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a0:	4605      	mov	r5, r0
    if (animationRunning)
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d160      	bne.n	800b268 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xd0>
    if (evt.getType() == ClickEvent::PRESSED)
 800b1a6:	790b      	ldrb	r3, [r1, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d15d      	bne.n	800b268 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xd0>
        int x = evt.getX() - centerX;
 800b1ac:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 800b1b0:	f8d5 2238 	ldr.w	r2, [r5, #568]	@ 0x238
        int y = evt.getY() - centerY;
 800b1b4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
        int x = evt.getX() - centerX;
 800b1b8:	1a80      	subs	r0, r0, r2
        int y = evt.getY() - centerY;
 800b1ba:	f8d5 223c 	ldr.w	r2, [r5, #572]	@ 0x23c
        Q5() : v(0) { }
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	1a89      	subs	r1, r1, r2
        if (x >= 0)
 800b1c2:	0140      	lsls	r0, r0, #5
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800b1c4:	ea4f 1141 	mov.w	r1, r1, lsl #5
        if (x >= 0)
 800b1c8:	d457      	bmi.n	800b27a <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xe2>
            if (y >= 0)
 800b1ca:	2900      	cmp	r1, #0
                return 90 + _angle(x, y, d);
 800b1cc:	aa01      	add	r2, sp, #4
            if (y >= 0)
 800b1ce:	db4e      	blt.n	800b26e <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xd6>
                return 90 + _angle(x, y, d);
 800b1d0:	f7f7 fe38 	bl	8002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 800b1d4:	f100 035a 	add.w	r3, r0, #90	@ 0x5a
        while (angle - minAngle > 360)
 800b1d8:	f8d5 1230 	ldr.w	r1, [r5, #560]	@ 0x230
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800b1dc:	9a01      	ldr	r2, [sp, #4]
 800b1de:	1a5b      	subs	r3, r3, r1
 800b1e0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800b1e4:	dc59      	bgt.n	800b29a <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x102>
        while (angle - minAngle < 0)
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	db5a      	blt.n	800b2a0 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x108>
 800b1ea:	18cc      	adds	r4, r1, r3
        if (angle >= minAngle && angle <= maxAngle && ((distance >= minRadius && distance <= maxRadius) || distance < 20))
 800b1ec:	42a1      	cmp	r1, r4
 800b1ee:	dc3b      	bgt.n	800b268 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xd0>
 800b1f0:	f8d5 3234 	ldr.w	r3, [r5, #564]	@ 0x234
 800b1f4:	429c      	cmp	r4, r3
 800b1f6:	dc37      	bgt.n	800b268 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xd0>
 800b1f8:	2a00      	cmp	r2, #0
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	f8d5 0228 	ldr.w	r0, [r5, #552]	@ 0x228
 800b200:	bfb8      	it	lt
 800b202:	f102 031f 	addlt.w	r3, r2, #31
 800b206:	ebb0 1f63 	cmp.w	r0, r3, asr #5
 800b20a:	ea4f 1163 	mov.w	r1, r3, asr #5
 800b20e:	dc03      	bgt.n	800b218 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x80>
 800b210:	f8d5 322c 	ldr.w	r3, [r5, #556]	@ 0x22c
 800b214:	428b      	cmp	r3, r1
 800b216:	da02      	bge.n	800b21e <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x86>
 800b218:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 800b21c:	da24      	bge.n	800b268 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xd0>
 800b21e:	f505 7603 	add.w	r6, r5, #524	@ 0x20c
 800b222:	462f      	mov	r7, r5
 800b224:	f505 7c09 	add.w	ip, r5, #548	@ 0x224
{
 800b228:	f04f 0900 	mov.w	r9, #0
 800b22c:	4630      	mov	r0, r6
 800b22e:	2101      	movs	r1, #1
                allExpanded &= (displacement[i] > 0);
 800b230:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800b234:	2b00      	cmp	r3, #0
 800b236:	bfd4      	ite	le
 800b238:	2300      	movle	r3, #0
 800b23a:	2301      	movgt	r3, #1
            for (int i = 0; i < NUM_ITEMS; i++)
 800b23c:	4560      	cmp	r0, ip
 800b23e:	ea01 0103 	and.w	r1, r1, r3
                selectedCount += (displacement[i] > 0) ? 1 : 0;
 800b242:	4499      	add	r9, r3
            for (int i = 0; i < NUM_ITEMS; i++)
 800b244:	d1f4      	bne.n	800b230 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x98>
            if (distance < 20)
 800b246:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 800b24a:	da39      	bge.n	800b2c0 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x128>
                if (allExpanded) // All expanded
 800b24c:	b359      	cbz	r1, 800b2a6 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x10e>
                    for (int i = 0; i < NUM_ITEMS; i++)
 800b24e:	2400      	movs	r4, #0
                        if (displacement[i] > 0) // Expanded
 800b250:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800b254:	2b00      	cmp	r3, #0
 800b256:	dd04      	ble.n	800b262 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xca>
                            setSelected(i, false);
 800b258:	2200      	movs	r2, #0
 800b25a:	4621      	mov	r1, r4
 800b25c:	4628      	mov	r0, r5
 800b25e:	f7ff ff6d 	bl	800b13c <_ZN8PieChart11setSelectedEib>
                    for (int i = 0; i < NUM_ITEMS; i++)
 800b262:	3401      	adds	r4, #1
 800b264:	2c06      	cmp	r4, #6
 800b266:	d1f3      	bne.n	800b250 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xb8>
}
 800b268:	b002      	add	sp, #8
 800b26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return 90 - _angle(x, -y, d);
 800b26e:	4249      	negs	r1, r1
 800b270:	f7f7 fde8 	bl	8002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 800b274:	f1c0 035a 	rsb	r3, r0, #90	@ 0x5a
 800b278:	e7ae      	b.n	800b1d8 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x40>
        if (y >= 0)
 800b27a:	2900      	cmp	r1, #0
            return Q5(-v);
 800b27c:	f1c0 0000 	rsb	r0, r0, #0
            return 270 - _angle(-x, y, d);
 800b280:	aa01      	add	r2, sp, #4
        if (y >= 0)
 800b282:	db04      	blt.n	800b28e <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xf6>
            return 270 - _angle(-x, y, d);
 800b284:	f7f7 fdde 	bl	8002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 800b288:	f5c0 7387 	rsb	r3, r0, #270	@ 0x10e
 800b28c:	e7a4      	b.n	800b1d8 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x40>
        return 270 + _angle(-x, -y, d);
 800b28e:	4249      	negs	r1, r1
 800b290:	f7f7 fdd8 	bl	8002e44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 800b294:	f500 7387 	add.w	r3, r0, #270	@ 0x10e
 800b298:	e79e      	b.n	800b1d8 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x40>
            angle -= 360;
 800b29a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800b29e:	e79f      	b.n	800b1e0 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x48>
            angle += 360;
 800b2a0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800b2a4:	e79f      	b.n	800b1e6 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x4e>
                    for (int i = 0; i < NUM_ITEMS; i++)
 800b2a6:	460c      	mov	r4, r1
                        if (displacement[i] == 0) // Expanded
 800b2a8:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800b2ac:	b923      	cbnz	r3, 800b2b8 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x120>
                            setSelected(i, true);
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f7ff ff42 	bl	800b13c <_ZN8PieChart11setSelectedEib>
                    for (int i = 0; i < NUM_ITEMS; i++)
 800b2b8:	3401      	adds	r4, #1
 800b2ba:	2c06      	cmp	r4, #6
 800b2bc:	d1f4      	bne.n	800b2a8 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x110>
 800b2be:	e7d3      	b.n	800b268 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xd0>
                for (int i = 0; i < NUM_ITEMS; i++)
 800b2c0:	2600      	movs	r6, #0
 800b2c2:	f505 7810 	add.w	r8, r5, #576	@ 0x240
                    expand[i] = 0;
 800b2c6:	46b2      	mov	sl, r6
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800b2c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2cc:	f848 af04 	str.w	sl, [r8, #4]!
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f858 2c34 	ldr.w	r2, [r8, #-52]
 800b2d6:	bfb8      	it	lt
 800b2d8:	331f      	addlt	r3, #31
                    if (angle >= circle[i].getArcStart() && angle < circle[i].getArcEnd())
 800b2da:	f343 134f 	sbfx	r3, r3, #5, #16
 800b2de:	429c      	cmp	r4, r3
 800b2e0:	db10      	blt.n	800b304 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x16c>
 800b2e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bfb8      	it	lt
 800b2ea:	331f      	addlt	r3, #31
 800b2ec:	f343 134f 	sbfx	r3, r3, #5, #16
 800b2f0:	429c      	cmp	r4, r3
 800b2f2:	da07      	bge.n	800b304 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x16c>
                        if (displacement[i] > 0)
 800b2f4:	2a00      	cmp	r2, #0
 800b2f6:	dc09      	bgt.n	800b30c <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x174>
                            setSelected(i, true);
 800b2f8:	2201      	movs	r2, #1
                            setSelected(i, false);
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f7ff ff1d 	bl	800b13c <_ZN8PieChart11setSelectedEib>
 800b302:	e006      	b.n	800b312 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x17a>
                        if (displacement[i] > 0)
 800b304:	2a00      	cmp	r2, #0
 800b306:	dd04      	ble.n	800b312 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x17a>
                            setSelected(i, false);
 800b308:	2200      	movs	r2, #0
 800b30a:	e7f6      	b.n	800b2fa <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x162>
                            if (selectedCount < 2)
 800b30c:	f1b9 0f01 	cmp.w	r9, #1
 800b310:	ddfa      	ble.n	800b308 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x170>
                for (int i = 0; i < NUM_ITEMS; i++)
 800b312:	3601      	adds	r6, #1
 800b314:	374c      	adds	r7, #76	@ 0x4c
 800b316:	2e06      	cmp	r6, #6
 800b318:	d1d6      	bne.n	800b2c8 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0x130>
 800b31a:	e7a5      	b.n	800b268 <_ZN8PieChart16handleClickEventERKN8touchgfx10ClickEventE+0xd0>

0800b31c <_ZN8PieChart28setPieChartSelectionCallbackERN8touchgfx15GenericCallbackIRKS_ivEE>:
    selectionAction = &callback;
 800b31c:	f8c0 129c 	str.w	r1, [r0, #668]	@ 0x29c
}
 800b320:	4770      	bx	lr

0800b322 <_ZN8PieChart33setPieChartAnimationEndedCallbackERN8touchgfx15GenericCallbackIRKS_vvEE>:
    animationEndedCallbackActive = true;
 800b322:	2301      	movs	r3, #1
    animationEndedAction = &callback;
 800b324:	f8c0 12a0 	str.w	r1, [r0, #672]	@ 0x2a0
    animationEndedCallbackActive = true;
 800b328:	f880 32a4 	strb.w	r3, [r0, #676]	@ 0x2a4
}
 800b32c:	4770      	bx	lr

0800b32e <_ZN8PieChart38activatePieChartAnimationEndedCallbackEb>:
    animationEndedCallbackActive = active;
 800b32e:	f880 12a4 	strb.w	r1, [r0, #676]	@ 0x2a4
}
 800b332:	4770      	bx	lr

0800b334 <_ZN17MainMenuPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainMenuPresenter() {};
 800b334:	4770      	bx	lr

0800b336 <_ZThn4_N17MainMenuPresenterD1Ev>:
 800b336:	3804      	subs	r0, #4
 800b338:	4770      	bx	lr

0800b33a <_ZN17MainMenuPresenter10deactivateEv>:
}

void MainMenuPresenter::deactivate()
{

}
 800b33a:	4770      	bx	lr

0800b33c <_ZN17MainMenuPresenter8activateEv>:
    {
        selectedMenuIndex = index;
    }
    uint8_t getSelectedMenuIndex() const
    {
        return selectedMenuIndex;
 800b33c:	6883      	ldr	r3, [r0, #8]
    view.setSelectedMenuIndex(model->getSelectedMenuIndex());
 800b33e:	6900      	ldr	r0, [r0, #16]
 800b340:	7b19      	ldrb	r1, [r3, #12]
 800b342:	f000 b8e5 	b.w	800b510 <_ZN12MainMenuView20setSelectedMenuIndexEh>

0800b346 <_ZN17MainMenuPresenterD0Ev>:
 800b346:	b510      	push	{r4, lr}
 800b348:	4604      	mov	r4, r0
 800b34a:	2114      	movs	r1, #20
 800b34c:	f013 fbeb 	bl	801eb26 <_ZdlPvj>
 800b350:	4620      	mov	r0, r4
 800b352:	bd10      	pop	{r4, pc}

0800b354 <_ZThn4_N17MainMenuPresenterD0Ev>:
 800b354:	f1a0 0004 	sub.w	r0, r0, #4
 800b358:	e7f5      	b.n	800b346 <_ZN17MainMenuPresenterD0Ev>
	...

0800b35c <_ZN17MainMenuPresenterC1ER12MainMenuView>:
MainMenuPresenter::MainMenuPresenter(MainMenuView& v) :
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	460d      	mov	r5, r1
    view(v)
 800b360:	3140      	adds	r1, #64	@ 0x40
MainMenuPresenter::MainMenuPresenter(MainMenuView& v) :
 800b362:	4604      	mov	r4, r0
    view(v)
 800b364:	f7f6 f9fe 	bl	8001764 <_ZN13DemoPresenterC1ER17DemoViewInterface>
 800b368:	4b04      	ldr	r3, [pc, #16]	@ (800b37c <_ZN17MainMenuPresenterC1ER12MainMenuView+0x20>)
}
 800b36a:	4620      	mov	r0, r4
    view(v)
 800b36c:	6125      	str	r5, [r4, #16]
 800b36e:	f103 0208 	add.w	r2, r3, #8
 800b372:	3324      	adds	r3, #36	@ 0x24
 800b374:	6022      	str	r2, [r4, #0]
 800b376:	6063      	str	r3, [r4, #4]
}
 800b378:	bd38      	pop	{r3, r4, r5, pc}
 800b37a:	bf00      	nop
 800b37c:	0802258c 	.word	0x0802258c

0800b380 <_ZN17MainMenuPresenter12demoSelectedENS_6DemoIDEh>:

void MainMenuPresenter::demoSelected(DemoID id, uint8_t menuIndex)
{
 800b380:	b508      	push	{r3, lr}
        selectedMenuIndex = index;
 800b382:	6883      	ldr	r3, [r0, #8]
 800b384:	731a      	strb	r2, [r3, #12]
    model->setSelectedMenuIndex(menuIndex);
    switch (id)
 800b386:	2903      	cmp	r1, #3
 800b388:	d81b      	bhi.n	800b3c2 <_ZN17MainMenuPresenter12demoSelectedENS_6DemoIDEh+0x42>
 800b38a:	e8df f001 	tbb	[pc, r1]
 800b38e:	0802      	.short	0x0802
 800b390:	140e      	.short	0x140e
    {
    case CUSTOM_CONTROLS:
        static_cast<FrontendApplication*>(Application::getInstance())->gotoCustomControlsScreen();
 800b392:	f00e fc0f 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
    case NO_DEMO_SCREEN:
        break;
    default:
        break;
    }
}
 800b396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        static_cast<FrontendApplication*>(Application::getInstance())->gotoCustomControlsScreen();
 800b39a:	f7f6 bead 	b.w	80020f8 <_ZN19FrontendApplication24gotoCustomControlsScreenEv>
        static_cast<FrontendApplication*>(Application::getInstance())->gotoGraphScreen();
 800b39e:	f00e fc09 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
}
 800b3a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        static_cast<FrontendApplication*>(Application::getInstance())->gotoGraphScreen();
 800b3a6:	f7f6 beb7 	b.w	8002118 <_ZN19FrontendApplication15gotoGraphScreenEv>
        static_cast<FrontendApplication*>(Application::getInstance())->gotoEasingEquationScreen();
 800b3aa:	f00e fc03 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
}
 800b3ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        static_cast<FrontendApplication*>(Application::getInstance())->gotoEasingEquationScreen();
 800b3b2:	f7f6 bec1 	b.w	8002138 <_ZN19FrontendApplication24gotoEasingEquationScreenEv>
        static_cast<FrontendApplication*>(Application::getInstance())->gotoProductPresenterScreen();
 800b3b6:	f00e fbfd 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
}
 800b3ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        static_cast<FrontendApplication*>(Application::getInstance())->gotoProductPresenterScreen();
 800b3be:	f7f6 becb 	b.w	8002158 <_ZN19FrontendApplication26gotoProductPresenterScreenEv>
}
 800b3c2:	bd08      	pop	{r3, pc}

0800b3c4 <_ZN8DemoViewI17MainMenuPresenterED1Ev>:
class DemoView : public View<T>, public DemoViewInterface
 800b3c4:	4770      	bx	lr

0800b3c6 <_ZThn64_N8DemoViewI17MainMenuPresenterED1Ev>:
 800b3c6:	3840      	subs	r0, #64	@ 0x40
 800b3c8:	4770      	bx	lr

0800b3ca <_ZN12MainMenuView15afterTransitionEv>:
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	f880 33b0 	strb.w	r3, [r0, #944]	@ 0x3b0
 800b3d0:	f880 32e0 	strb.w	r3, [r0, #736]	@ 0x2e0
 800b3d4:	f880 3314 	strb.w	r3, [r0, #788]	@ 0x314
 800b3d8:	f880 3348 	strb.w	r3, [r0, #840]	@ 0x348
 800b3dc:	f880 337c 	strb.w	r3, [r0, #892]	@ 0x37c
    menuContainer.setTouchable(true);
    for (int i = 0; i < NUMBER_OF_DEMO_SCREENS; i++)
    {
        demoScreensButton[i].setTouchable(true);
    }
}
 800b3e0:	4770      	bx	lr

0800b3e2 <_ZN12MainMenuView14tearDownScreenEv>:

void MainMenuView::tearDownScreen()
{

}
 800b3e2:	4770      	bx	lr

0800b3e4 <_ZN12MainMenuView31menuStateChangeInitiatedHandlerERK14SwipeContainer>:
    menuContainer.setSelectedScreen(demoIndex);
}

void MainMenuView::menuStateChangeInitiatedHandler(const SwipeContainer& sc)
{
}
 800b3e4:	4770      	bx	lr

0800b3e6 <_ZN8touchgfx8CallbackI12MainMenuViewRK14SwipeContainervvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800b3e6:	4770      	bx	lr

0800b3e8 <_ZN8touchgfx8CallbackI12MainMenuViewRKNS_14AbstractButtonEvvED1Ev>:
 800b3e8:	4770      	bx	lr

0800b3ea <_ZN8touchgfx8CallbackI8DemoViewI17MainMenuPresenterERKNS_14AbstractButtonEvvED1Ev>:
 800b3ea:	4770      	bx	lr

0800b3ec <_ZN8touchgfx8CallbackI12MainMenuViewRK14SwipeContainervvE7executeES4_>:
    virtual void execute(T1 t1)
 800b3ec:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800b3ee:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800b3f0:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800b3f2:	68c2      	ldr	r2, [r0, #12]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	1055      	asrs	r5, r2, #1
 800b3f8:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800b3fc:	07d2      	lsls	r2, r2, #31
 800b3fe:	bf48      	it	mi
 800b400:	5962      	ldrmi	r2, [r4, r5]
    }
 800b402:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800b404:	bf48      	it	mi
 800b406:	58d3      	ldrmi	r3, [r2, r3]
 800b408:	4718      	bx	r3

0800b40a <_ZNK8touchgfx8CallbackI12MainMenuViewRK14SwipeContainervvE7isValidEv>:
    virtual bool isValid() const
 800b40a:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 800b40c:	6840      	ldr	r0, [r0, #4]
 800b40e:	b130      	cbz	r0, 800b41e <_ZNK8touchgfx8CallbackI12MainMenuViewRK14SwipeContainervvE7isValidEv+0x14>
 800b410:	689a      	ldr	r2, [r3, #8]
 800b412:	b91a      	cbnz	r2, 800b41c <_ZNK8touchgfx8CallbackI12MainMenuViewRK14SwipeContainervvE7isValidEv+0x12>
 800b414:	68d8      	ldr	r0, [r3, #12]
 800b416:	f000 0001 	and.w	r0, r0, #1
 800b41a:	4770      	bx	lr
 800b41c:	2001      	movs	r0, #1
    }
 800b41e:	4770      	bx	lr

0800b420 <_ZN8touchgfx8CallbackI12MainMenuViewRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800b420:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800b422:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800b424:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800b426:	68c2      	ldr	r2, [r0, #12]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	1055      	asrs	r5, r2, #1
 800b42c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800b430:	07d2      	lsls	r2, r2, #31
 800b432:	bf48      	it	mi
 800b434:	5962      	ldrmi	r2, [r4, r5]
    }
 800b436:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800b438:	bf48      	it	mi
 800b43a:	58d3      	ldrmi	r3, [r2, r3]
 800b43c:	4718      	bx	r3

0800b43e <_ZNK8touchgfx8CallbackI12MainMenuViewRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800b43e:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 800b440:	6840      	ldr	r0, [r0, #4]
 800b442:	b130      	cbz	r0, 800b452 <_ZNK8touchgfx8CallbackI12MainMenuViewRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800b444:	689a      	ldr	r2, [r3, #8]
 800b446:	b91a      	cbnz	r2, 800b450 <_ZNK8touchgfx8CallbackI12MainMenuViewRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800b448:	68d8      	ldr	r0, [r3, #12]
 800b44a:	f000 0001 	and.w	r0, r0, #1
 800b44e:	4770      	bx	lr
 800b450:	2001      	movs	r0, #1
    }
 800b452:	4770      	bx	lr

0800b454 <_ZN8touchgfx8CallbackI8DemoViewI17MainMenuPresenterERKNS_14AbstractButtonEvvE7executeES6_>:
    virtual void execute(T1 t1)
 800b454:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800b456:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800b458:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800b45a:	68c2      	ldr	r2, [r0, #12]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	1055      	asrs	r5, r2, #1
 800b460:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800b464:	07d2      	lsls	r2, r2, #31
 800b466:	bf48      	it	mi
 800b468:	5962      	ldrmi	r2, [r4, r5]
    }
 800b46a:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800b46c:	bf48      	it	mi
 800b46e:	58d3      	ldrmi	r3, [r2, r3]
 800b470:	4718      	bx	r3

0800b472 <_ZNK8touchgfx8CallbackI8DemoViewI17MainMenuPresenterERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800b472:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 800b474:	6840      	ldr	r0, [r0, #4]
 800b476:	b130      	cbz	r0, 800b486 <_ZNK8touchgfx8CallbackI8DemoViewI17MainMenuPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800b478:	689a      	ldr	r2, [r3, #8]
 800b47a:	b91a      	cbnz	r2, 800b484 <_ZNK8touchgfx8CallbackI8DemoViewI17MainMenuPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800b47c:	68d8      	ldr	r0, [r3, #12]
 800b47e:	f000 0001 	and.w	r0, r0, #1
 800b482:	4770      	bx	lr
 800b484:	2001      	movs	r0, #1
    }
 800b486:	4770      	bx	lr

0800b488 <_ZN8DemoViewI17MainMenuPresenterE22gotoMenuClickedHandlerERKN8touchgfx14AbstractButtonE>:
        View<T>::presenter->backOptionSelected();
 800b488:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800b48a:	f7f6 b979 	b.w	8001780 <_ZN13DemoPresenter18backOptionSelectedEv>
	...

0800b490 <_ZN8DemoViewI17MainMenuPresenterE19updateProcessorLoadEh>:
    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 800b490:	b510      	push	{r4, lr}
 800b492:	4604      	mov	r4, r0
 800b494:	460b      	mov	r3, r1
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", mcuLoadInProcent);
 800b496:	4a05      	ldr	r2, [pc, #20]	@ (800b4ac <_ZN8DemoViewI17MainMenuPresenterE19updateProcessorLoadEh+0x1c>)
 800b498:	2105      	movs	r1, #5
 800b49a:	30e4      	adds	r0, #228	@ 0xe4
 800b49c:	f011 f906 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.invalidate();
 800b4a0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
    }
 800b4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mcuLoadValueTxt.invalidate();
 800b4a8:	f00e bf6f 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 800b4ac:	08023468 	.word	0x08023468

0800b4b0 <_ZThn64_N8DemoViewI17MainMenuPresenterE19updateProcessorLoadEh>:
    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 800b4b0:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800b4b4:	e7ec      	b.n	800b490 <_ZN8DemoViewI17MainMenuPresenterE19updateProcessorLoadEh>
 800b4b6:	bf00      	nop

0800b4b8 <_ZN8DemoViewI17MainMenuPresenterED0Ev>:
class DemoView : public View<T>, public DemoViewInterface
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b4c0:	f013 fb31 	bl	801eb26 <_ZdlPvj>
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	bd10      	pop	{r4, pc}

0800b4c8 <_ZThn64_N8DemoViewI17MainMenuPresenterED0Ev>:
 800b4c8:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800b4cc:	e7f4      	b.n	800b4b8 <_ZN8DemoViewI17MainMenuPresenterED0Ev>

0800b4ce <_ZN8touchgfx8CallbackI8DemoViewI17MainMenuPresenterERKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800b4ce:	b510      	push	{r4, lr}
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	2110      	movs	r1, #16
 800b4d4:	f013 fb27 	bl	801eb26 <_ZdlPvj>
 800b4d8:	4620      	mov	r0, r4
 800b4da:	bd10      	pop	{r4, pc}

0800b4dc <_ZN8touchgfx8CallbackI12MainMenuViewRKNS_14AbstractButtonEvvED0Ev>:
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	4604      	mov	r4, r0
 800b4e0:	2110      	movs	r1, #16
 800b4e2:	f013 fb20 	bl	801eb26 <_ZdlPvj>
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	bd10      	pop	{r4, pc}

0800b4ea <_ZN8touchgfx8CallbackI12MainMenuViewRK14SwipeContainervvED0Ev>:
 800b4ea:	b510      	push	{r4, lr}
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	2110      	movs	r1, #16
 800b4f0:	f013 fb19 	bl	801eb26 <_ZdlPvj>
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	bd10      	pop	{r4, pc}

0800b4f8 <_ZN12MainMenuView27menuStateChangeEndedHandlerERK14SwipeContainer>:

void MainMenuView::menuStateChangeEndedHandler(const SwipeContainer& sc)
 800b4f8:	4770      	bx	lr

0800b4fa <_ZN12MainMenuView22gotoSelectedDemoScreenEh>:
    presenter->demoSelected(demoScreenIndex[demoIndex], demoIndex);
 800b4fa:	1843      	adds	r3, r0, r1
{
 800b4fc:	460a      	mov	r2, r1
    presenter->demoSelected(demoScreenIndex[demoIndex], demoIndex);
 800b4fe:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800b500:	f893 1100 	ldrb.w	r1, [r3, #256]	@ 0x100
 800b504:	f7ff bf3c 	b.w	800b380 <_ZN17MainMenuPresenter12demoSelectedENS_6DemoIDEh>

0800b508 <_ZN12MainMenuView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>:
    gotoSelectedDemoScreen(menuContainer.getSelectedScreen());
 800b508:	f890 13c4 	ldrb.w	r1, [r0, #964]	@ 0x3c4
 800b50c:	f7ff bff5 	b.w	800b4fa <_ZN12MainMenuView22gotoSelectedDemoScreenEh>

0800b510 <_ZN12MainMenuView20setSelectedMenuIndexEh>:
    menuContainer.setSelectedScreen(demoIndex);
 800b510:	f500 7063 	add.w	r0, r0, #908	@ 0x38c
 800b514:	f7f7 ba1f 	b.w	8002956 <_ZN14SwipeContainer17setSelectedScreenEh>

0800b518 <_ZN8DemoViewI17MainMenuPresenterEC1Ev>:
    DemoView() :
 800b518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	4604      	mov	r4, r0
 800b51e:	f00f fa61 	bl	801a9e4 <_ZN8touchgfx6ScreenC1Ev>
        onGotoMenuButtonClicked(this, &DemoView::gotoMenuClickedHandler)
 800b522:	4b34      	ldr	r3, [pc, #208]	@ (800b5f4 <_ZN8DemoViewI17MainMenuPresenterEC1Ev+0xdc>)
 800b524:	2500      	movs	r5, #0
    AbstractButton() : Widget(), action(), pressed(false)
 800b526:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 800b52a:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	3338      	adds	r3, #56	@ 0x38
 800b532:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800b534:	f04f 0901 	mov.w	r9, #1
 800b538:	6423      	str	r3, [r4, #64]	@ 0x40
 800b53a:	f104 0a78 	add.w	sl, r4, #120	@ 0x78
 800b53e:	f7f8 f8cb 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 800b542:	4b2d      	ldr	r3, [pc, #180]	@ (800b5f8 <_ZN8DemoViewI17MainMenuPresenterEC1Ev+0xe0>)
 800b544:	f8a4 6072 	strh.w	r6, [r4, #114]	@ 0x72
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800b548:	4650      	mov	r0, sl
 800b54a:	6463      	str	r3, [r4, #68]	@ 0x44
 800b54c:	f44f 0b7f 	mov.w	fp, #16711680	@ 0xff0000
 800b550:	f8a4 6074 	strh.w	r6, [r4, #116]	@ 0x74
 800b554:	f104 08ac 	add.w	r8, r4, #172	@ 0xac
 800b558:	f884 6076 	strb.w	r6, [r4, #118]	@ 0x76
 800b55c:	27ff      	movs	r7, #255	@ 0xff
 800b55e:	66e5      	str	r5, [r4, #108]	@ 0x6c
 800b560:	f884 5070 	strb.w	r5, [r4, #112]	@ 0x70
 800b564:	f884 9068 	strb.w	r9, [r4, #104]	@ 0x68
 800b568:	f7f8 f8b6 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 800b56c:	4b23      	ldr	r3, [pc, #140]	@ (800b5fc <_ZN8DemoViewI17MainMenuPresenterEC1Ev+0xe4>)
 800b56e:	f8a4 609e 	strh.w	r6, [r4, #158]	@ 0x9e
 800b572:	4640      	mov	r0, r8
 800b574:	67a3      	str	r3, [r4, #120]	@ 0x78
        color = col;
 800b576:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
 800b57a:	f8c4 b0a4 	str.w	fp, [r4, #164]	@ 0xa4
 800b57e:	f8a4 50a8 	strh.w	r5, [r4, #168]	@ 0xa8
 800b582:	f7f8 f8a9 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 800b586:	4b1e      	ldr	r3, [pc, #120]	@ (800b600 <_ZN8DemoViewI17MainMenuPresenterEC1Ev+0xe8>)
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 800b588:	4629      	mov	r1, r5
 800b58a:	4650      	mov	r0, sl
 800b58c:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
    {
 800b590:	4b1c      	ldr	r3, [pc, #112]	@ (800b604 <_ZN8DemoViewI17MainMenuPresenterEC1Ev+0xec>)
 800b592:	f8a4 60d2 	strh.w	r6, [r4, #210]	@ 0xd2
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 800b596:	f104 06e4 	add.w	r6, r4, #228	@ 0xe4
 800b59a:	f8a4 50dc 	strh.w	r5, [r4, #220]	@ 0xdc
 800b59e:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
        this->pobject = pobject;
 800b5a2:	e9c4 343c 	strd	r3, r4, [r4, #240]	@ 0xf0
        this->pmemfun_1 = pmemfun_1;
 800b5a6:	4b18      	ldr	r3, [pc, #96]	@ (800b608 <_ZN8DemoViewI17MainMenuPresenterEC1Ev+0xf0>)
 800b5a8:	e9c4 353e 	strd	r3, r5, [r4, #248]	@ 0xf8
        gotoMenuButton.setAction(onGotoMenuButtonClicked);
 800b5ac:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 800b5b0:	e9c4 5b35 	strd	r5, fp, [r4, #212]	@ 0xd4
        action = &callback;
 800b5b4:	66e3      	str	r3, [r4, #108]	@ 0x6c
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 800b5b6:	f00b fd3b 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 800b5ba:	463a      	mov	r2, r7
 800b5bc:	4639      	mov	r1, r7
 800b5be:	4638      	mov	r0, r7
 800b5c0:	f011 f882 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 800b5c4:	462b      	mov	r3, r5
 800b5c6:	4a11      	ldr	r2, [pc, #68]	@ (800b60c <_ZN8DemoViewI17MainMenuPresenterEC1Ev+0xf4>)
 800b5c8:	2105      	movs	r1, #5
        this->color = color;
 800b5ca:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f011 f86c 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_VALUE));
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	4640      	mov	r0, r8
        wildcard = value;
 800b5d8:	f8c4 60e0 	str.w	r6, [r4, #224]	@ 0xe0
 800b5dc:	f00b fd28 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadValueTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 800b5e0:	463a      	mov	r2, r7
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	f011 f86f 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800b5ea:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
    }
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f4:	080248d4 	.word	0x080248d4
 800b5f8:	08025f10 	.word	0x08025f10
 800b5fc:	08025e28 	.word	0x08025e28
 800b600:	08023474 	.word	0x08023474
 800b604:	080248bc 	.word	0x080248bc
 800b608:	0800b489 	.word	0x0800b489
 800b60c:	08023468 	.word	0x08023468

0800b610 <_ZN12MainMenuViewC1Ev>:
MainMenuView::MainMenuView() :
 800b610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b614:	4605      	mov	r5, r0
    menuStateChangeEndedCallback(this, &MainMenuView::menuStateChangeEndedHandler)
 800b616:	f7ff ff7f 	bl	800b518 <_ZN8DemoViewI17MainMenuPresenterEC1Ev>
 800b61a:	4b3f      	ldr	r3, [pc, #252]	@ (800b718 <_ZN12MainMenuViewC1Ev+0x108>)
 800b61c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800b620:	a901      	add	r1, sp, #4
 800b622:	f505 7082 	add.w	r0, r5, #260	@ 0x104
 800b626:	602b      	str	r3, [r5, #0]
 800b628:	3338      	adds	r3, #56	@ 0x38
 800b62a:	f8ad 4004 	strh.w	r4, [sp, #4]
 800b62e:	642b      	str	r3, [r5, #64]	@ 0x40
 800b630:	f7f8 fce6 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800b634:	a901      	add	r1, sp, #4
 800b636:	f505 7098 	add.w	r0, r5, #304	@ 0x130
 800b63a:	f8ad 4004 	strh.w	r4, [sp, #4]
 800b63e:	f7f8 fcdf 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        visible(true)
 800b642:	2401      	movs	r4, #1
 800b644:	f505 73ae 	add.w	r3, r5, #348	@ 0x15c
 800b648:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
        this->x = x;
 800b64c:	2200      	movs	r2, #0
 800b64e:	4833      	ldr	r0, [pc, #204]	@ (800b71c <_ZN12MainMenuViewC1Ev+0x10c>)
 800b650:	809a      	strh	r2, [r3, #4]
        this->y = y;
 800b652:	80da      	strh	r2, [r3, #6]
        this->width = width;
 800b654:	811a      	strh	r2, [r3, #8]
        this->height = height;
 800b656:	815a      	strh	r2, [r3, #10]
        this->x = 0;
 800b658:	819a      	strh	r2, [r3, #12]
        this->y = 0;
 800b65a:	81da      	strh	r2, [r3, #14]
        this->width = 0;
 800b65c:	821a      	strh	r2, [r3, #16]
        this->height = 0;
 800b65e:	825a      	strh	r2, [r3, #18]
        nextDrawChainElement(0),
 800b660:	61da      	str	r2, [r3, #28]
        touchable(false),
 800b662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        visible(true)
 800b666:	f883 4025 	strb.w	r4, [r3, #37]	@ 0x25
 800b66a:	6018      	str	r0, [r3, #0]
 800b66c:	629a      	str	r2, [r3, #40]	@ 0x28
        nextSibling(0),
 800b66e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800b672:	332c      	adds	r3, #44	@ 0x2c
 800b674:	428b      	cmp	r3, r1
 800b676:	d1eb      	bne.n	800b650 <_ZN12MainMenuViewC1Ev+0x40>
 800b678:	461c      	mov	r4, r3
 800b67a:	f505 762f 	add.w	r6, r5, #700	@ 0x2bc
 800b67e:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800b682:	4620      	mov	r0, r4
 800b684:	342c      	adds	r4, #44	@ 0x2c
 800b686:	a901      	add	r1, sp, #4
 800b688:	f8ad 7004 	strh.w	r7, [sp, #4]
 800b68c:	f7f8 fcb8 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800b690:	42b4      	cmp	r4, r6
 800b692:	d1f6      	bne.n	800b682 <_ZN12MainMenuViewC1Ev+0x72>
 800b694:	f505 7763 	add.w	r7, r5, #908	@ 0x38c
    AbstractButton() : Widget(), action(), pressed(false)
 800b698:	2600      	movs	r6, #0
        touchable = touch;
 800b69a:	f04f 0901 	mov.w	r9, #1
 800b69e:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 800b734 <_ZN12MainMenuViewC1Ev+0x124>
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	3434      	adds	r4, #52	@ 0x34
 800b6a6:	f7f8 f817 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 800b6aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6ae:	f844 6c0c 	str.w	r6, [r4, #-12]
 800b6b2:	f804 6c08 	strb.w	r6, [r4, #-8]
 800b6b6:	f804 9c10 	strb.w	r9, [r4, #-16]
 800b6ba:	f844 8c34 	str.w	r8, [r4, #-52]
 800b6be:	f824 3c06 	strh.w	r3, [r4, #-6]
 800b6c2:	f824 3c04 	strh.w	r3, [r4, #-4]
 800b6c6:	f804 3c02 	strb.w	r3, [r4, #-2]
 800b6ca:	42a7      	cmp	r7, r4
 800b6cc:	d1e9      	bne.n	800b6a2 <_ZN12MainMenuViewC1Ev+0x92>
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	f7f7 f8d4 	bl	800287c <_ZN14SwipeContainerC1Ev>
    {
 800b6d4:	4b12      	ldr	r3, [pc, #72]	@ (800b720 <_ZN12MainMenuViewC1Ev+0x110>)
        this->pmemfun_1 = pmemfun_1;
 800b6d6:	4a13      	ldr	r2, [pc, #76]	@ (800b724 <_ZN12MainMenuViewC1Ev+0x114>)
}
 800b6d8:	4628      	mov	r0, r5
    {
 800b6da:	f8c5 3644 	str.w	r3, [r5, #1604]	@ 0x644
        this->pmemfun_1 = pmemfun_1;
 800b6de:	4b12      	ldr	r3, [pc, #72]	@ (800b728 <_ZN12MainMenuViewC1Ev+0x118>)
        this->pobject = pobject;
 800b6e0:	f8c5 5648 	str.w	r5, [r5, #1608]	@ 0x648
        this->pmemfun_1 = pmemfun_1;
 800b6e4:	f8c5 364c 	str.w	r3, [r5, #1612]	@ 0x64c
    {
 800b6e8:	4b10      	ldr	r3, [pc, #64]	@ (800b72c <_ZN12MainMenuViewC1Ev+0x11c>)
        this->pmemfun_1 = pmemfun_1;
 800b6ea:	f8c5 6650 	str.w	r6, [r5, #1616]	@ 0x650
    {
 800b6ee:	f8c5 3654 	str.w	r3, [r5, #1620]	@ 0x654
 800b6f2:	f8c5 3664 	str.w	r3, [r5, #1636]	@ 0x664
        this->pmemfun_1 = pmemfun_1;
 800b6f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b730 <_ZN12MainMenuViewC1Ev+0x120>)
        this->pobject = pobject;
 800b6f8:	f8c5 5658 	str.w	r5, [r5, #1624]	@ 0x658
        this->pmemfun_1 = pmemfun_1;
 800b6fc:	f8c5 265c 	str.w	r2, [r5, #1628]	@ 0x65c
 800b700:	f8c5 6660 	str.w	r6, [r5, #1632]	@ 0x660
        this->pobject = pobject;
 800b704:	f8c5 5668 	str.w	r5, [r5, #1640]	@ 0x668
        this->pmemfun_1 = pmemfun_1;
 800b708:	f8c5 366c 	str.w	r3, [r5, #1644]	@ 0x66c
 800b70c:	f8c5 6670 	str.w	r6, [r5, #1648]	@ 0x670
 800b710:	b003      	add	sp, #12
 800b712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b716:	bf00      	nop
 800b718:	080225d0 	.word	0x080225d0
 800b71c:	080250b0 	.word	0x080250b0
 800b720:	08024920 	.word	0x08024920
 800b724:	0800b3e5 	.word	0x0800b3e5
 800b728:	0800b509 	.word	0x0800b509
 800b72c:	08024938 	.word	0x08024938
 800b730:	0800b4f9 	.word	0x0800b4f9
 800b734:	08025f10 	.word	0x08025f10

0800b738 <_ZN12MainMenuViewD1Ev>:
MainMenuView::~MainMenuView()
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4b13      	ldr	r3, [pc, #76]	@ (800b788 <_ZN12MainMenuViewD1Ev+0x50>)
}
 800b73c:	f44f 7556 	mov.w	r5, #856	@ 0x358
MainMenuView::~MainMenuView()
 800b740:	4604      	mov	r4, r0
 800b742:	6003      	str	r3, [r0, #0]
 800b744:	3338      	adds	r3, #56	@ 0x38
 800b746:	6403      	str	r3, [r0, #64]	@ 0x40
}
 800b748:	f500 7063 	add.w	r0, r0, #908	@ 0x38c
 800b74c:	f7f7 f9fe 	bl	8002b4c <_ZN14SwipeContainerD1Ev>
MainMenuView::~MainMenuView()
 800b750:	5963      	ldr	r3, [r4, r5]
 800b752:	1960      	adds	r0, r4, r5
 800b754:	3d34      	subs	r5, #52	@ 0x34
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4798      	blx	r3
}
 800b75a:	f5b5 7f22 	cmp.w	r5, #648	@ 0x288
 800b75e:	d1f7      	bne.n	800b750 <_ZN12MainMenuViewD1Ev+0x18>
MainMenuView::~MainMenuView()
 800b760:	f44f 7524 	mov.w	r5, #656	@ 0x290
 800b764:	5963      	ldr	r3, [r4, r5]
 800b766:	1960      	adds	r0, r4, r5
 800b768:	3d2c      	subs	r5, #44	@ 0x2c
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4798      	blx	r3
}
 800b76e:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 800b772:	d1f7      	bne.n	800b764 <_ZN12MainMenuViewD1Ev+0x2c>
MainMenuView::~MainMenuView()
 800b774:	5963      	ldr	r3, [r4, r5]
 800b776:	1960      	adds	r0, r4, r5
 800b778:	3d2c      	subs	r5, #44	@ 0x2c
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4798      	blx	r3
}
 800b77e:	f5b5 7f98 	cmp.w	r5, #304	@ 0x130
 800b782:	d1f7      	bne.n	800b774 <_ZN12MainMenuViewD1Ev+0x3c>
 800b784:	4620      	mov	r0, r4
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	080225d0 	.word	0x080225d0

0800b78c <_ZThn64_N12MainMenuViewD1Ev>:

class MainMenuView : public DemoView<MainMenuPresenter>
{
public:
    MainMenuView();
    virtual ~MainMenuView();
 800b78c:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800b790:	f7ff bfd2 	b.w	800b738 <_ZN12MainMenuViewD1Ev>

0800b794 <_ZN12MainMenuViewD0Ev>:
MainMenuView::~MainMenuView()
 800b794:	b510      	push	{r4, lr}
 800b796:	4604      	mov	r4, r0
}
 800b798:	f7ff ffce 	bl	800b738 <_ZN12MainMenuViewD1Ev>
 800b79c:	f240 6174 	movw	r1, #1652	@ 0x674
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f013 f9c0 	bl	801eb26 <_ZdlPvj>
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	bd10      	pop	{r4, pc}

0800b7aa <_ZThn64_N12MainMenuViewD0Ev>:
 800b7aa:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800b7ae:	f7ff bff1 	b.w	800b794 <_ZN12MainMenuViewD0Ev>
	...

0800b7b4 <_ZN12MainMenuView11setupScreenEv>:
{
 800b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    backgroundLeft.setBitmap(Bitmap(BITMAP_MENU_STAGE_STRETCH_LEFT_SIDE_ID));
 800b7b8:	f500 7582 	add.w	r5, r0, #260	@ 0x104
{
 800b7bc:	b087      	sub	sp, #28
 800b7be:	2355      	movs	r3, #85	@ 0x55
 800b7c0:	4604      	mov	r4, r0
    backgroundLeft.setBitmap(Bitmap(BITMAP_MENU_STAGE_STRETCH_LEFT_SIDE_ID));
 800b7c2:	a905      	add	r1, sp, #20
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b7ca:	f00b fdc0 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundLeft.setXY(0, 0);
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f104 0804 	add.w	r8, r4, #4
 800b7d4:	4628      	mov	r0, r5
    backgroundRight.setXY(HAL::DISPLAY_WIDTH - backgroundRight.getWidth(), 0);
 800b7d6:	4f8b      	ldr	r7, [pc, #556]	@ (800ba04 <_ZN12MainMenuView11setupScreenEv+0x250>)
    backgroundLeft.setXY(0, 0);
 800b7d8:	4611      	mov	r1, r2
    menuContainer.setXY(0, 0);
 800b7da:	f504 7663 	add.w	r6, r4, #908	@ 0x38c
    backgroundLeft.setXY(0, 0);
 800b7de:	f7f5 faff 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4640      	mov	r0, r8
    backgroundRight.setBitmap(Bitmap(BITMAP_MENU_STAGE_STRETCH_RIGHT_SIDE_ID));
 800b7e6:	f504 7598 	add.w	r5, r4, #304	@ 0x130
 800b7ea:	f007 fab1 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800b7ee:	2356      	movs	r3, #86	@ 0x56
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	a905      	add	r1, sp, #20
 800b7f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b7f8:	f00b fda9 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundRight.setXY(HAL::DISPLAY_WIDTH - backgroundRight.getWidth(), 0);
 800b7fc:	f8b4 3138 	ldrh.w	r3, [r4, #312]	@ 0x138
 800b800:	2200      	movs	r2, #0
 800b802:	8839      	ldrh	r1, [r7, #0]
 800b804:	4628      	mov	r0, r5
 800b806:	f04f 0b00 	mov.w	fp, #0
    demoScreensButton[0].setBitmaps(Bitmap(BITMAP_DEMO_BUTTON_02_03_ID), Bitmap(BITMAP_DEMO_BUTTON_02_03_PRESSED_ID));
 800b80a:	f504 7a2f 	add.w	sl, r4, #700	@ 0x2bc
    backgroundRight.setXY(HAL::DISPLAY_WIDTH - backgroundRight.getWidth(), 0);
 800b80e:	1ac9      	subs	r1, r1, r3
 800b810:	f04f 0925 	mov.w	r9, #37	@ 0x25
 800b814:	b209      	sxth	r1, r1
 800b816:	f7f5 fae3 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 800b81a:	4629      	mov	r1, r5
 800b81c:	4640      	mov	r0, r8
    demoScreens[0].setBitmap(Bitmap(BITMAP_MENU_DEMO_SCREEN_02_ID));
 800b81e:	f504 7503 	add.w	r5, r4, #524	@ 0x20c
 800b822:	f007 fa95 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    menuContainer.setXY(0, 0);
 800b826:	2200      	movs	r2, #0
 800b828:	4630      	mov	r0, r6
 800b82a:	4611      	mov	r1, r2
 800b82c:	f7f5 fad8 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    menuContainer.setSwipeCutoff(80);
 800b830:	2150      	movs	r1, #80	@ 0x50
 800b832:	4630      	mov	r0, r6
 800b834:	f7f6 ff92 	bl	800275c <_ZN14SwipeContainer14setSwipeCutoffEt>
    menuContainer.setEndSwipeElasticWidth(50);
 800b838:	2132      	movs	r1, #50	@ 0x32
 800b83a:	4630      	mov	r0, r6
 800b83c:	f7f7 f86a 	bl	8002914 <_ZN14SwipeContainer23setEndSwipeElasticWidthEt>
 800b840:	2372      	movs	r3, #114	@ 0x72
    menuContainer.setDotIndicatorBitmaps(Bitmap(BITMAP_SCREEN_SWIPE_DOTS_INACTIVE_ID), Bitmap(BITMAP_SCREEN_SWIPE_DOTS_ACTIVE_ID));
 800b842:	aa05      	add	r2, sp, #20
 800b844:	a904      	add	r1, sp, #16
 800b846:	f8ad 3010 	strh.w	r3, [sp, #16]
 800b84a:	2371      	movs	r3, #113	@ 0x71
 800b84c:	4630      	mov	r0, r6
 800b84e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b852:	f7f7 f861 	bl	8002918 <_ZN14SwipeContainer22setDotIndicatorBitmapsERKN8touchgfx6BitmapES3_>
    menuContainer.setDotIndicatorXYWithCenteredX(HAL::DISPLAY_WIDTH / 2, HAL::DISPLAY_HEIGHT - 16);
 800b856:	4b6c      	ldr	r3, [pc, #432]	@ (800ba08 <_ZN12MainMenuView11setupScreenEv+0x254>)
 800b858:	4630      	mov	r0, r6
 800b85a:	8839      	ldrh	r1, [r7, #0]
 800b85c:	2726      	movs	r7, #38	@ 0x26
 800b85e:	881a      	ldrh	r2, [r3, #0]
 800b860:	0849      	lsrs	r1, r1, #1
 800b862:	3a10      	subs	r2, #16
 800b864:	b292      	uxth	r2, r2
 800b866:	f7f7 f85a 	bl	800291e <_ZN14SwipeContainer30setDotIndicatorXYWithCenteredXEtt>
    menuContainer.setMenuChangeInitiatedCallback(menuStateChangeInitiatedCallback);
 800b86a:	f204 6354 	addw	r3, r4, #1620	@ 0x654
    demoScreens[0].setBitmap(Bitmap(BITMAP_MENU_DEMO_SCREEN_02_ID));
 800b86e:	a905      	add	r1, sp, #20
 800b870:	4628      	mov	r0, r5
     *
     * @see GenericCallback
     */
    void setMenuChangeInitiatedCallback(touchgfx::GenericCallback<const SwipeContainer&>& callback)
    {
        menuChangeInitiatedAction = &callback;
 800b872:	f8c4 363c 	str.w	r3, [r4, #1596]	@ 0x63c
    menuContainer.setMenuChangeEndedCallback(menuStateChangeEndedCallback);
 800b876:	f204 6364 	addw	r3, r4, #1636	@ 0x664
 800b87a:	f884 b3b0 	strb.w	fp, [r4, #944]	@ 0x3b0
     *
     * @see GenericCallback
     */
    void setMenuChangeEndedCallback(touchgfx::GenericCallback<const SwipeContainer&>& callback)
    {
        menuChangeEndedAction = &callback;
 800b87e:	f8c4 3640 	str.w	r3, [r4, #1600]	@ 0x640
 800b882:	2351      	movs	r3, #81	@ 0x51
 800b884:	f8ad 3014 	strh.w	r3, [sp, #20]
    demoScreens[0].setBitmap(Bitmap(BITMAP_MENU_DEMO_SCREEN_02_ID));
 800b888:	f00b fd61 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800b88c:	2252      	movs	r2, #82	@ 0x52
    demoScreens[1].setBitmap(Bitmap(BITMAP_MENU_DEMO_SCREEN_03_ID));
 800b88e:	f8d4 3238 	ldr.w	r3, [r4, #568]	@ 0x238
 800b892:	a905      	add	r1, sp, #20
 800b894:	f504 700e 	add.w	r0, r4, #568	@ 0x238
 800b898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b89a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b89e:	4798      	blx	r3
 800b8a0:	2253      	movs	r2, #83	@ 0x53
    demoScreens[2].setBitmap(Bitmap(BITMAP_MENU_DEMO_SCREEN_04_ID));
 800b8a2:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
 800b8a6:	a905      	add	r1, sp, #20
 800b8a8:	f504 7019 	add.w	r0, r4, #612	@ 0x264
 800b8ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8ae:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b8b2:	4798      	blx	r3
 800b8b4:	2254      	movs	r2, #84	@ 0x54
    demoScreens[3].setBitmap(Bitmap(BITMAP_MENU_DEMO_SCREEN_05_ID));
 800b8b6:	f8d4 3290 	ldr.w	r3, [r4, #656]	@ 0x290
 800b8ba:	a905      	add	r1, sp, #20
 800b8bc:	f504 7024 	add.w	r0, r4, #656	@ 0x290
 800b8c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8c2:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b8c6:	4798      	blx	r3
    demoScreensButton[0].setBitmaps(Bitmap(BITMAP_DEMO_BUTTON_02_03_ID), Bitmap(BITMAP_DEMO_BUTTON_02_03_PRESSED_ID));
 800b8c8:	aa05      	add	r2, sp, #20
 800b8ca:	a904      	add	r1, sp, #16
 800b8cc:	4650      	mov	r0, sl
 800b8ce:	f8ad 9010 	strh.w	r9, [sp, #16]
 800b8d2:	f8ad 7014 	strh.w	r7, [sp, #20]
 800b8d6:	f00b fc33 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    demoScreensButton[1].setBitmaps(Bitmap(BITMAP_DEMO_BUTTON_02_03_ID), Bitmap(BITMAP_DEMO_BUTTON_02_03_PRESSED_ID));
 800b8da:	f8d4 32f0 	ldr.w	r3, [r4, #752]	@ 0x2f0
 800b8de:	aa05      	add	r2, sp, #20
 800b8e0:	a904      	add	r1, sp, #16
 800b8e2:	f504 703c 	add.w	r0, r4, #752	@ 0x2f0
 800b8e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b8e8:	f8ad 9010 	strh.w	r9, [sp, #16]
 800b8ec:	f8ad 7014 	strh.w	r7, [sp, #20]
 800b8f0:	4798      	blx	r3
    demoScreensButton[2].setBitmaps(Bitmap(BITMAP_DEMO_BUTTON_04_ID), Bitmap(BITMAP_DEMO_BUTTON_04_PRESSED_ID));
 800b8f2:	f8d4 3324 	ldr.w	r3, [r4, #804]	@ 0x324
 800b8f6:	2227      	movs	r2, #39	@ 0x27
 800b8f8:	a904      	add	r1, sp, #16
 800b8fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b8fc:	f504 7049 	add.w	r0, r4, #804	@ 0x324
 800b900:	f8ad 2010 	strh.w	r2, [sp, #16]
 800b904:	2228      	movs	r2, #40	@ 0x28
 800b906:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b90a:	aa05      	add	r2, sp, #20
 800b90c:	4798      	blx	r3
    demoScreensButton[3].setBitmaps(Bitmap(BITMAP_DEMO_BUTTON_05_06_ID), Bitmap(BITMAP_DEMO_BUTTON_05_06_PRESSED_ID));
 800b90e:	f8d4 3358 	ldr.w	r3, [r4, #856]	@ 0x358
 800b912:	2229      	movs	r2, #41	@ 0x29
 800b914:	a904      	add	r1, sp, #16
 800b916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b918:	f504 7056 	add.w	r0, r4, #856	@ 0x358
 800b91c:	f8ad 2010 	strh.w	r2, [sp, #16]
 800b920:	222a      	movs	r2, #42	@ 0x2a
 800b922:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b926:	aa05      	add	r2, sp, #20
 800b928:	4798      	blx	r3
    for (int i = 0; i < NUMBER_OF_DEMO_SCREENS; i++)
 800b92a:	f8cd a00c 	str.w	sl, [sp, #12]
        demoScreensButton[i].setXY(318, 137);
 800b92e:	9b03      	ldr	r3, [sp, #12]
 800b930:	2289      	movs	r2, #137	@ 0x89
 800b932:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 800b936:	9803      	ldr	r0, [sp, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
        demoScreensContainer[i].setPosition(0, 0, demoScreens[i].getWidth(), demoScreens[i].getHeight());
 800b93a:	f1a5 09b0 	sub.w	r9, r5, #176	@ 0xb0
        demoScreensButton[i].setXY(318, 137);
 800b93e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b940:	4798      	blx	r3
 800b942:	9b03      	ldr	r3, [sp, #12]
        action = &callback;
 800b944:	9a03      	ldr	r2, [sp, #12]
        demoScreensContainer[i].setPosition(0, 0, demoScreens[i].getWidth(), demoScreens[i].getHeight());
 800b946:	4648      	mov	r0, r9
 800b948:	f883 b024 	strb.w	fp, [r3, #36]	@ 0x24
        demoScreensButton[i].setAction(buttonPressedCallback);
 800b94c:	f204 6344 	addw	r3, r4, #1604	@ 0x644
 800b950:	6293      	str	r3, [r2, #40]	@ 0x28
        demoScreensContainer[i].setPosition(0, 0, demoScreens[i].getWidth(), demoScreens[i].getHeight());
 800b952:	f855 2cb0 	ldr.w	r2, [r5, #-176]
 800b956:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
 800b95a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800b95e:	9100      	str	r1, [sp, #0]
 800b960:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b962:	4617      	mov	r7, r2
 800b964:	2200      	movs	r2, #0
 800b966:	4611      	mov	r1, r2
 800b968:	47b8      	blx	r7
        demoScreensContainer[i].add(demoScreens[i]);
 800b96a:	f855 3cb0 	ldr.w	r3, [r5, #-176]
 800b96e:	4629      	mov	r1, r5
 800b970:	4648      	mov	r0, r9
 800b972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    for (int i = 0; i < NUMBER_OF_DEMO_SCREENS; i++)
 800b974:	352c      	adds	r5, #44	@ 0x2c
        demoScreensContainer[i].add(demoScreens[i]);
 800b976:	4798      	blx	r3
        demoScreensContainer[i].add(demoScreensButton[i]);
 800b978:	f855 3cdc 	ldr.w	r3, [r5, #-220]
 800b97c:	9903      	ldr	r1, [sp, #12]
 800b97e:	4648      	mov	r0, r9
 800b980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b982:	4798      	blx	r3
        menuContainer.add(demoScreensContainer[i]);
 800b984:	4649      	mov	r1, r9
 800b986:	4630      	mov	r0, r6
 800b988:	f7f6 feea 	bl	8002760 <_ZN14SwipeContainer3addERN8touchgfx8DrawableE>
    for (int i = 0; i < NUMBER_OF_DEMO_SCREENS; i++)
 800b98c:	9b03      	ldr	r3, [sp, #12]
 800b98e:	4555      	cmp	r5, sl
 800b990:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800b994:	9303      	str	r3, [sp, #12]
 800b996:	d1ca      	bne.n	800b92e <_ZN12MainMenuView11setupScreenEv+0x17a>
 800b998:	4631      	mov	r1, r6
 800b99a:	4640      	mov	r0, r8
 800b99c:	f007 f9d8 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mcuLoadTxt.setXY(370, 30 - mcuLoadTxt.getTypedText().getFont()->getFontHeight());
 800b9a0:	f8b4 309e 	ldrh.w	r3, [r4, #158]	@ 0x9e
 800b9a4:	a805      	add	r0, sp, #20
 800b9a6:	f104 0678 	add.w	r6, r4, #120	@ 0x78
 800b9aa:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b9ae:	f7f7 f951 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 800b9b2:	6803      	ldr	r3, [r0, #0]
    mcuLoadValueTxt.setPosition(mcuLoadTxt.getRect().right(), mcuLoadTxt.getY(), 34, 14);
 800b9b4:	f104 05ac 	add.w	r5, r4, #172	@ 0xac
    mcuLoadTxt.setXY(370, 30 - mcuLoadTxt.getTypedText().getFont()->getFontHeight());
 800b9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ba:	4798      	blx	r3
 800b9bc:	f1c0 021e 	rsb	r2, r0, #30
 800b9c0:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	b212      	sxth	r2, r2
 800b9c8:	f7f5 fa0a 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
        return x + width;
 800b9cc:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 800b9d0:	f8b4 107c 	ldrh.w	r1, [r4, #124]	@ 0x7c
    mcuLoadValueTxt.setPosition(mcuLoadTxt.getRect().right(), mcuLoadTxt.getY(), 34, 14);
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	4419      	add	r1, r3
 800b9d8:	230e      	movs	r3, #14
 800b9da:	b209      	sxth	r1, r1
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	2322      	movs	r3, #34	@ 0x22
 800b9e0:	f9b4 207e 	ldrsh.w	r2, [r4, #126]	@ 0x7e
 800b9e4:	f7f5 f9e4 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800b9e8:	4631      	mov	r1, r6
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	f007 f9b0 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	f007 f9ac 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    demoScreenIndex[0] = MainMenuPresenter::CUSTOM_CONTROLS;
 800b9f8:	4b04      	ldr	r3, [pc, #16]	@ (800ba0c <_ZN12MainMenuView11setupScreenEv+0x258>)
 800b9fa:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
}
 800b9fe:	b007      	add	sp, #28
 800ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba04:	20024e28 	.word	0x20024e28
 800ba08:	20024e2a 	.word	0x20024e2a
 800ba0c:	01030200 	.word	0x01030200

0800ba10 <_ZN5ModelC1Ev>:
extern uint32_t SystemCoreClock;
static int freqMHz;
#endif /* SIMULATOR */

Model::Model() :
    modelListener(0),
 800ba10:	2300      	movs	r3, #0
    mcuLoadActive(true),
 800ba12:	2201      	movs	r2, #1
Model::Model() :
 800ba14:	b510      	push	{r4, lr}
    modelListener(0),
 800ba16:	6003      	str	r3, [r0, #0]
Model::Model() :
 800ba18:	4604      	mov	r4, r0
    Time() : hours(0), minutes(0), seconds(0), milliseconds(0) {}
 800ba1a:	80c3      	strh	r3, [r0, #6]
 800ba1c:	7203      	strb	r3, [r0, #8]
 800ba1e:	8143      	strh	r3, [r0, #10]
    selectedMenuIndex(0)
 800ba20:	7303      	strb	r3, [r0, #12]
        return instance;
 800ba22:	4b07      	ldr	r3, [pc, #28]	@ (800ba40 <_ZN5ModelC1Ev+0x30>)
    mcuLoadActive(true),
 800ba24:	7102      	strb	r2, [r0, #4]
{
#ifndef SIMULATOR
    lastUs = touchgfx::HAL::getInstance()->getCPUCycles();
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	f008 ffae 	bl	8014988 <_ZN8touchgfx3HAL12getCPUCyclesEv>
    freqMHz = SystemCoreClock / 1000000;
 800ba2c:	4b05      	ldr	r3, [pc, #20]	@ (800ba44 <_ZN5ModelC1Ev+0x34>)
 800ba2e:	4906      	ldr	r1, [pc, #24]	@ (800ba48 <_ZN5ModelC1Ev+0x38>)
 800ba30:	681b      	ldr	r3, [r3, #0]
    lastUs = touchgfx::HAL::getInstance()->getCPUCycles();
 800ba32:	4a06      	ldr	r2, [pc, #24]	@ (800ba4c <_ZN5ModelC1Ev+0x3c>)
    freqMHz = SystemCoreClock / 1000000;
 800ba34:	fbb3 f3f1 	udiv	r3, r3, r1
    lastUs = touchgfx::HAL::getInstance()->getCPUCycles();
 800ba38:	6010      	str	r0, [r2, #0]
#endif
}
 800ba3a:	4620      	mov	r0, r4
    freqMHz = SystemCoreClock / 1000000;
 800ba3c:	6053      	str	r3, [r2, #4]
}
 800ba3e:	bd10      	pop	{r4, pc}
 800ba40:	20024e34 	.word	0x20024e34
 800ba44:	20000040 	.word	0x20000040
 800ba48:	000f4240 	.word	0x000f4240
 800ba4c:	200018b0 	.word	0x200018b0

0800ba50 <_ZN5Model4tickEv>:
//extern volatile uint32_t mcu_load_pct;
static uint8_t mcuLoadLast = 0;
#endif // SIMULATOR

void Model::tick()
{
 800ba50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     *
     * @return mcuLoadPct the MCU Load in %.
     */
    uint8_t getMCULoadPct() const
    {
        return mcuLoadPct;
 800ba54:	4f27      	ldr	r7, [pc, #156]	@ (800baf4 <_ZN5Model4tickEv+0xa4>)
 800ba56:	4605      	mov	r5, r0
    currentTime.milliseconds = timenow.tv_usec / 1000;
#endif  /*_MSC_VER*/
#else
    static int milliseconds = 123456;
    uint8_t mcuLoadPct = touchgfx::HAL::getInstance()->getMCULoadPct();
    if (mcuLoadLast != /*mcu_load_pct*/ mcuLoadPct)
 800ba58:	4e27      	ldr	r6, [pc, #156]	@ (800baf8 <_ZN5Model4tickEv+0xa8>)
 800ba5a:	683b      	ldr	r3, [r7, #0]
    Time previousTime = currentTime;
 800ba5c:	7a04      	ldrb	r4, [r0, #8]
 800ba5e:	f893 1055 	ldrb.w	r1, [r3, #85]	@ 0x55
    if (mcuLoadLast != /*mcu_load_pct*/ mcuLoadPct)
 800ba62:	7a33      	ldrb	r3, [r6, #8]
 800ba64:	428b      	cmp	r3, r1
 800ba66:	d004      	beq.n	800ba72 <_ZN5Model4tickEv+0x22>
    {
        mcuLoadLast = mcuLoadPct;
        modelListener->mcuLoadUpdated(mcuLoadLast);
 800ba68:	6800      	ldr	r0, [r0, #0]
        mcuLoadLast = mcuLoadPct;
 800ba6a:	7231      	strb	r1, [r6, #8]
        modelListener->mcuLoadUpdated(mcuLoadLast);
 800ba6c:	6803      	ldr	r3, [r0, #0]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	4798      	blx	r3
    }

    //long now = cpu_cycles();
    long now = touchgfx::HAL::getInstance()->getCPUCycles();
 800ba72:	6838      	ldr	r0, [r7, #0]
 800ba74:	f008 ff88 	bl	8014988 <_ZN8touchgfx3HAL12getCPUCyclesEv>
    milliseconds += (now - lastUs + freqMHz / 2) / freqMHz / 1000;
 800ba78:	6872      	ldr	r2, [r6, #4]
 800ba7a:	6833      	ldr	r3, [r6, #0]
 800ba7c:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    lastUs = now;
 800ba80:	6030      	str	r0, [r6, #0]
    milliseconds += (now - lastUs + freqMHz / 2) / freqMHz / 1000;
 800ba82:	1ac3      	subs	r3, r0, r3
    currentTime.hours = (milliseconds / 1000 / 60 / 60) % 24;
 800ba84:	2018      	movs	r0, #24
    milliseconds += (now - lastUs + freqMHz / 2) / freqMHz / 1000;
 800ba86:	eb03 0361 	add.w	r3, r3, r1, asr #1
 800ba8a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ba8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba92:	4a1a      	ldr	r2, [pc, #104]	@ (800bafc <_ZN5Model4tickEv+0xac>)
 800ba94:	fb93 f3f1 	sdiv	r3, r3, r1
 800ba98:	6817      	ldr	r7, [r2, #0]
 800ba9a:	443b      	add	r3, r7
 800ba9c:	6013      	str	r3, [r2, #0]
    currentTime.hours = (milliseconds / 1000 / 60 / 60) % 24;
 800ba9e:	4a18      	ldr	r2, [pc, #96]	@ (800bb00 <_ZN5Model4tickEv+0xb0>)
 800baa0:	fb93 f2f2 	sdiv	r2, r3, r2
 800baa4:	fb92 f6f0 	sdiv	r6, r2, r0
 800baa8:	fb00 2216 	mls	r2, r0, r6, r2
    currentTime.minutes = (milliseconds / 1000 / 60) % 60;
 800baac:	203c      	movs	r0, #60	@ 0x3c
    currentTime.hours = (milliseconds / 1000 / 60 / 60) % 24;
 800baae:	71aa      	strb	r2, [r5, #6]
    currentTime.minutes = (milliseconds / 1000 / 60) % 60;
 800bab0:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800bab4:	fb93 f2f2 	sdiv	r2, r3, r2
 800bab8:	fb92 f6f0 	sdiv	r6, r2, r0
 800babc:	fb00 2216 	mls	r2, r0, r6, r2
    currentTime.seconds = (milliseconds / 1000) % 60;
 800bac0:	fb93 f6f1 	sdiv	r6, r3, r1
    currentTime.minutes = (milliseconds / 1000 / 60) % 60;
 800bac4:	71ea      	strb	r2, [r5, #7]
    currentTime.milliseconds = milliseconds % 1000;
 800bac6:	fb01 3316 	mls	r3, r1, r6, r3
    currentTime.seconds = (milliseconds / 1000) % 60;
 800baca:	fb96 f2f0 	sdiv	r2, r6, r0
 800bace:	fb00 6212 	mls	r2, r0, r2, r6
    currentTime.milliseconds = milliseconds % 1000;
 800bad2:	816b      	strh	r3, [r5, #10]
    currentTime.seconds = (milliseconds / 1000) % 60;
 800bad4:	b2d2      	uxtb	r2, r2

#endif /* SIMULATOR */

    if (currentTime.seconds != previousTime.seconds)
 800bad6:	42a2      	cmp	r2, r4
    currentTime.seconds = (milliseconds / 1000) % 60;
 800bad8:	722a      	strb	r2, [r5, #8]
    if (currentTime.seconds != previousTime.seconds)
 800bada:	d009      	beq.n	800baf0 <_ZN5Model4tickEv+0xa0>
    {
        if (modelListener)
 800badc:	6828      	ldr	r0, [r5, #0]
 800bade:	b138      	cbz	r0, 800baf0 <_ZN5Model4tickEv+0xa0>
        {
            modelListener->timeUpdated(currentTime);
 800bae0:	6803      	ldr	r3, [r0, #0]
 800bae2:	f8d5 1006 	ldr.w	r1, [r5, #6]
 800bae6:	896a      	ldrh	r2, [r5, #10]
 800bae8:	689b      	ldr	r3, [r3, #8]
        }
    }
}
 800baea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            modelListener->timeUpdated(currentTime);
 800baee:	4718      	bx	r3
}
 800baf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf4:	20024e34 	.word	0x20024e34
 800baf8:	200018b0 	.word	0x200018b0
 800bafc:	20000010 	.word	0x20000010
 800bb00:	0036ee80 	.word	0x0036ee80

0800bb04 <_ZN5Model20screenSaverMinorTickEv>:

void Model::screenSaverMinorTick()
{
    modelListener->screenSaverMinorTick();
 800bb04:	6800      	ldr	r0, [r0, #0]
 800bb06:	6803      	ldr	r3, [r0, #0]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	4718      	bx	r3

0800bb0c <_ZN5Model20screenSaverMajorTickEv>:
}

void Model::screenSaverMajorTick()
{
    modelListener->screenSaverMajorTick();
 800bb0c:	6800      	ldr	r0, [r0, #0]
 800bb0e:	6803      	ldr	r3, [r0, #0]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	4718      	bx	r3

0800bb14 <_ZN25ProductPresenterPresenterD1Ev>:
{
}

ProductPresenterPresenter::~ProductPresenterPresenter()
{
}
 800bb14:	4770      	bx	lr

0800bb16 <_ZN25ProductPresenterPresenter10deactivateEv>:

void ProductPresenterPresenter::activate()
{
}
 800bb16:	4770      	bx	lr

0800bb18 <_ZN25ProductPresenterPresenter20screenSaverMinorTickEv>:

}

void ProductPresenterPresenter::screenSaverMinorTick()
{
    view.screenSaverMinorTick();
 800bb18:	6900      	ldr	r0, [r0, #16]
 800bb1a:	6803      	ldr	r3, [r0, #0]
 800bb1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb1e:	4718      	bx	r3

0800bb20 <_ZThn4_N25ProductPresenterPresenter20screenSaverMinorTickEv>:
    virtual ~ProductPresenterPresenter();

    virtual void activate();
    virtual void deactivate();

    virtual void screenSaverMinorTick();
 800bb20:	f1a0 0004 	sub.w	r0, r0, #4
 800bb24:	f7ff bff8 	b.w	800bb18 <_ZN25ProductPresenterPresenter20screenSaverMinorTickEv>

0800bb28 <_ZN25ProductPresenterPresenterD0Ev>:
ProductPresenterPresenter::~ProductPresenterPresenter()
 800bb28:	b510      	push	{r4, lr}
 800bb2a:	4604      	mov	r4, r0
}
 800bb2c:	2114      	movs	r1, #20
 800bb2e:	f012 fffa 	bl	801eb26 <_ZdlPvj>
 800bb32:	4620      	mov	r0, r4
 800bb34:	bd10      	pop	{r4, pc}

0800bb36 <_ZThn4_N25ProductPresenterPresenterD0Ev>:
    virtual ~ProductPresenterPresenter();
 800bb36:	f1a0 0004 	sub.w	r0, r0, #4
 800bb3a:	f7ff bff5 	b.w	800bb28 <_ZN25ProductPresenterPresenterD0Ev>

0800bb3e <_ZThn4_N25ProductPresenterPresenterD1Ev>:
 800bb3e:	3804      	subs	r0, #4
 800bb40:	4770      	bx	lr
	...

0800bb44 <_ZN25ProductPresenterPresenterC1ER20ProductPresenterView>:
ProductPresenterPresenter::ProductPresenterPresenter(ProductPresenterView& v) :
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	460d      	mov	r5, r1
    view(v)
 800bb48:	3140      	adds	r1, #64	@ 0x40
ProductPresenterPresenter::ProductPresenterPresenter(ProductPresenterView& v) :
 800bb4a:	4604      	mov	r4, r0
    view(v)
 800bb4c:	f7f5 fe0a 	bl	8001764 <_ZN13DemoPresenterC1ER17DemoViewInterface>
 800bb50:	4b04      	ldr	r3, [pc, #16]	@ (800bb64 <_ZN25ProductPresenterPresenterC1ER20ProductPresenterView+0x20>)
}
 800bb52:	4620      	mov	r0, r4
    view(v)
 800bb54:	6125      	str	r5, [r4, #16]
 800bb56:	f103 0208 	add.w	r2, r3, #8
 800bb5a:	3328      	adds	r3, #40	@ 0x28
 800bb5c:	6022      	str	r2, [r4, #0]
 800bb5e:	6063      	str	r3, [r4, #4]
}
 800bb60:	bd38      	pop	{r3, r4, r5, pc}
 800bb62:	bf00      	nop
 800bb64:	08022614 	.word	0x08022614

0800bb68 <_ZNK8touchgfx5Image7getTypeEv>:
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_IMAGE;
    }
 800bb68:	2008      	movs	r0, #8
 800bb6a:	4770      	bx	lr

0800bb6c <_ZN8DemoViewI25ProductPresenterPresenterED1Ev>:
class DemoView : public View<T>, public DemoViewInterface
 800bb6c:	4770      	bx	lr

0800bb6e <_ZThn64_N8DemoViewI25ProductPresenterPresenterED1Ev>:
 800bb6e:	3840      	subs	r0, #64	@ 0x40
 800bb70:	4770      	bx	lr

0800bb72 <_ZN20ProductPresenterView14tearDownScreenEv>:
    animateToPoster(0, 1);
}

void ProductPresenterView::tearDownScreen()
{
}
 800bb72:	4770      	bx	lr

0800bb74 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED1Ev>:
    }
 800bb74:	4770      	bx	lr

0800bb76 <_ZN8touchgfx8CallbackI20ProductPresenterViewRKNS_12FadeAnimatorINS_8TextAreaEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800bb76:	4770      	bx	lr

0800bb78 <_ZN8touchgfx8CallbackI20ProductPresenterViewRK15CollapsibleMenuKbvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800bb78:	4770      	bx	lr

0800bb7a <_ZN8touchgfx8CallbackI20ProductPresenterViewRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800bb7a:	4770      	bx	lr

0800bb7c <_ZN8touchgfx8CallbackI8DemoViewI25ProductPresenterPresenterERKNS_14AbstractButtonEvvED1Ev>:
 800bb7c:	4770      	bx	lr

0800bb7e <_ZN8touchgfx8CallbackI20ProductPresenterViewRKNS_12FadeAnimatorINS_8TextAreaEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 800bb7e:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800bb80:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800bb82:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800bb84:	68c2      	ldr	r2, [r0, #12]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	1055      	asrs	r5, r2, #1
 800bb8a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800bb8e:	07d2      	lsls	r2, r2, #31
 800bb90:	bf48      	it	mi
 800bb92:	5962      	ldrmi	r2, [r4, r5]
    }
 800bb94:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800bb96:	bf48      	it	mi
 800bb98:	58d3      	ldrmi	r3, [r2, r3]
 800bb9a:	4718      	bx	r3

0800bb9c <_ZNK8touchgfx8CallbackI20ProductPresenterViewRKNS_12FadeAnimatorINS_8TextAreaEEEvvE7isValidEv>:
    virtual bool isValid() const
 800bb9c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 800bb9e:	6840      	ldr	r0, [r0, #4]
 800bba0:	b130      	cbz	r0, 800bbb0 <_ZNK8touchgfx8CallbackI20ProductPresenterViewRKNS_12FadeAnimatorINS_8TextAreaEEEvvE7isValidEv+0x14>
 800bba2:	689a      	ldr	r2, [r3, #8]
 800bba4:	b91a      	cbnz	r2, 800bbae <_ZNK8touchgfx8CallbackI20ProductPresenterViewRKNS_12FadeAnimatorINS_8TextAreaEEEvvE7isValidEv+0x12>
 800bba6:	68d8      	ldr	r0, [r3, #12]
 800bba8:	f000 0001 	and.w	r0, r0, #1
 800bbac:	4770      	bx	lr
 800bbae:	2001      	movs	r0, #1
    }
 800bbb0:	4770      	bx	lr

0800bbb2 <_ZN8touchgfx8CallbackI20ProductPresenterViewRK15CollapsibleMenuKbvE7executeES4_b>:
    virtual void execute(T1 t1, T2 t2)
 800bbb2:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 800bbb4:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 800bbb6:	4603      	mov	r3, r0
        (pobject->*pmemfun_2)(t1, t2);
 800bbb8:	68c4      	ldr	r4, [r0, #12]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	1066      	asrs	r6, r4, #1
 800bbbe:	eb05 0064 	add.w	r0, r5, r4, asr #1
 800bbc2:	07e4      	lsls	r4, r4, #31
 800bbc4:	bf44      	itt	mi
 800bbc6:	59ac      	ldrmi	r4, [r5, r6]
 800bbc8:	58e3      	ldrmi	r3, [r4, r3]
    }
 800bbca:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 800bbcc:	4718      	bx	r3

0800bbce <_ZNK8touchgfx8CallbackI20ProductPresenterViewRK15CollapsibleMenuKbvE7isValidEv>:
    virtual bool isValid() const
 800bbce:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_2 != 0);
 800bbd0:	6840      	ldr	r0, [r0, #4]
 800bbd2:	b130      	cbz	r0, 800bbe2 <_ZNK8touchgfx8CallbackI20ProductPresenterViewRK15CollapsibleMenuKbvE7isValidEv+0x14>
 800bbd4:	689a      	ldr	r2, [r3, #8]
 800bbd6:	b91a      	cbnz	r2, 800bbe0 <_ZNK8touchgfx8CallbackI20ProductPresenterViewRK15CollapsibleMenuKbvE7isValidEv+0x12>
 800bbd8:	68d8      	ldr	r0, [r3, #12]
 800bbda:	f000 0001 	and.w	r0, r0, #1
 800bbde:	4770      	bx	lr
 800bbe0:	2001      	movs	r0, #1
    }
 800bbe2:	4770      	bx	lr

0800bbe4 <_ZN8touchgfx8CallbackI20ProductPresenterViewRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800bbe4:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800bbe6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800bbe8:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800bbea:	68c2      	ldr	r2, [r0, #12]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	1055      	asrs	r5, r2, #1
 800bbf0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800bbf4:	07d2      	lsls	r2, r2, #31
 800bbf6:	bf48      	it	mi
 800bbf8:	5962      	ldrmi	r2, [r4, r5]
    }
 800bbfa:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800bbfc:	bf48      	it	mi
 800bbfe:	58d3      	ldrmi	r3, [r2, r3]
 800bc00:	4718      	bx	r3

0800bc02 <_ZNK8touchgfx8CallbackI20ProductPresenterViewRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800bc02:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 800bc04:	6840      	ldr	r0, [r0, #4]
 800bc06:	b130      	cbz	r0, 800bc16 <_ZNK8touchgfx8CallbackI20ProductPresenterViewRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800bc08:	689a      	ldr	r2, [r3, #8]
 800bc0a:	b91a      	cbnz	r2, 800bc14 <_ZNK8touchgfx8CallbackI20ProductPresenterViewRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800bc0c:	68d8      	ldr	r0, [r3, #12]
 800bc0e:	f000 0001 	and.w	r0, r0, #1
 800bc12:	4770      	bx	lr
 800bc14:	2001      	movs	r0, #1
    }
 800bc16:	4770      	bx	lr

0800bc18 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21setMoveAnimationDelayEt>:
        moveAnimationDelay = delay;
 800bc18:	85c1      	strh	r1, [r0, #46]	@ 0x2e
    }
 800bc1a:	4770      	bx	lr

0800bc1c <_ZNK8touchgfx12MoveAnimatorINS_5ImageEE21getMoveAnimationDelayEv>:
    }
 800bc1c:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 800bc1e:	4770      	bx	lr

0800bc20 <_ZNK8touchgfx12MoveAnimatorINS_5ImageEE9isRunningEv>:
        return isMoveAnimationRunning();
 800bc20:	6803      	ldr	r3, [r0, #0]
 800bc22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc24:	4718      	bx	r3

0800bc26 <_ZNK8touchgfx12MoveAnimatorINS_5ImageEE22isMoveAnimationRunningEv>:
    }
 800bc26:	f890 002a 	ldrb.w	r0, [r0, #42]	@ 0x2a
 800bc2a:	4770      	bx	lr

0800bc2c <_ZN8touchgfx8CallbackI8DemoViewI25ProductPresenterPresenterERKNS_14AbstractButtonEvvE7executeES6_>:
    virtual void execute(T1 t1)
 800bc2c:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800bc2e:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800bc30:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800bc32:	68c2      	ldr	r2, [r0, #12]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	1055      	asrs	r5, r2, #1
 800bc38:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800bc3c:	07d2      	lsls	r2, r2, #31
 800bc3e:	bf48      	it	mi
 800bc40:	5962      	ldrmi	r2, [r4, r5]
    }
 800bc42:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800bc44:	bf48      	it	mi
 800bc46:	58d3      	ldrmi	r3, [r2, r3]
 800bc48:	4718      	bx	r3

0800bc4a <_ZNK8touchgfx8CallbackI8DemoViewI25ProductPresenterPresenterERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800bc4a:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun_1 != 0);
 800bc4c:	6840      	ldr	r0, [r0, #4]
 800bc4e:	b130      	cbz	r0, 800bc5e <_ZNK8touchgfx8CallbackI8DemoViewI25ProductPresenterPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800bc50:	689a      	ldr	r2, [r3, #8]
 800bc52:	b91a      	cbnz	r2, 800bc5c <_ZNK8touchgfx8CallbackI8DemoViewI25ProductPresenterPresenterERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800bc54:	68d8      	ldr	r0, [r3, #12]
 800bc56:	f000 0001 	and.w	r0, r0, #1
 800bc5a:	4770      	bx	lr
 800bc5c:	2001      	movs	r0, #1
    }
 800bc5e:	4770      	bx	lr

0800bc60 <_ZN8DemoViewI25ProductPresenterPresenterE22gotoMenuClickedHandlerERKN8touchgfx14AbstractButtonE>:
        View<T>::presenter->backOptionSelected();
 800bc60:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800bc62:	f7f5 bd8d 	b.w	8001780 <_ZN13DemoPresenter18backOptionSelectedEv>
	...

0800bc68 <_ZN8DemoViewI25ProductPresenterPresenterE19updateProcessorLoadEh>:
    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 800bc68:	b510      	push	{r4, lr}
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	460b      	mov	r3, r1
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", mcuLoadInProcent);
 800bc6e:	4a05      	ldr	r2, [pc, #20]	@ (800bc84 <_ZN8DemoViewI25ProductPresenterPresenterE19updateProcessorLoadEh+0x1c>)
 800bc70:	2105      	movs	r1, #5
 800bc72:	30e4      	adds	r0, #228	@ 0xe4
 800bc74:	f010 fd1a 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.invalidate();
 800bc78:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
    }
 800bc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mcuLoadValueTxt.invalidate();
 800bc80:	f00e bb83 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 800bc84:	08023468 	.word	0x08023468

0800bc88 <_ZThn64_N8DemoViewI25ProductPresenterPresenterE19updateProcessorLoadEh>:
    virtual void updateProcessorLoad(uint8_t mcuLoadInProcent)
 800bc88:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800bc8c:	e7ec      	b.n	800bc68 <_ZN8DemoViewI25ProductPresenterPresenterE19updateProcessorLoadEh>
 800bc8e:	bf00      	nop

0800bc90 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED0Ev>:
    virtual ~MoveAnimator()
 800bc90:	b510      	push	{r4, lr}
 800bc92:	4604      	mov	r4, r0
    }
 800bc94:	2148      	movs	r1, #72	@ 0x48
 800bc96:	f012 ff46 	bl	801eb26 <_ZdlPvj>
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	bd10      	pop	{r4, pc}

0800bc9e <_ZN8DemoViewI25ProductPresenterPresenterED0Ev>:
class DemoView : public View<T>, public DemoViewInterface
 800bc9e:	b510      	push	{r4, lr}
 800bca0:	4604      	mov	r4, r0
 800bca2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bca6:	f012 ff3e 	bl	801eb26 <_ZdlPvj>
 800bcaa:	4620      	mov	r0, r4
 800bcac:	bd10      	pop	{r4, pc}

0800bcae <_ZThn64_N8DemoViewI25ProductPresenterPresenterED0Ev>:
 800bcae:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800bcb2:	e7f4      	b.n	800bc9e <_ZN8DemoViewI25ProductPresenterPresenterED0Ev>

0800bcb4 <_ZN8touchgfx8CallbackI8DemoViewI25ProductPresenterPresenterERKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	2110      	movs	r1, #16
 800bcba:	f012 ff34 	bl	801eb26 <_ZdlPvj>
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	bd10      	pop	{r4, pc}

0800bcc2 <_ZN8touchgfx8CallbackI20ProductPresenterViewRKNS_14AbstractButtonEvvED0Ev>:
 800bcc2:	b510      	push	{r4, lr}
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	2110      	movs	r1, #16
 800bcc8:	f012 ff2d 	bl	801eb26 <_ZdlPvj>
 800bccc:	4620      	mov	r0, r4
 800bcce:	bd10      	pop	{r4, pc}

0800bcd0 <_ZN8touchgfx8CallbackI20ProductPresenterViewRK15CollapsibleMenuKbvED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	2110      	movs	r1, #16
 800bcd6:	f012 ff26 	bl	801eb26 <_ZdlPvj>
 800bcda:	4620      	mov	r0, r4
 800bcdc:	bd10      	pop	{r4, pc}

0800bcde <_ZN8touchgfx8CallbackI20ProductPresenterViewRKNS_12FadeAnimatorINS_8TextAreaEEEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800bcde:	b510      	push	{r4, lr}
 800bce0:	4604      	mov	r4, r0
 800bce2:	2110      	movs	r1, #16
 800bce4:	f012 ff1f 	bl	801eb26 <_ZdlPvj>
 800bce8:	4620      	mov	r0, r4
 800bcea:	bd10      	pop	{r4, pc}

0800bcec <_ZN20ProductPresenterViewC1Ev>:
ProductPresenterView::ProductPresenterView() :
 800bcec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcee:	4604      	mov	r4, r0
 800bcf0:	f00e fe78 	bl	801a9e4 <_ZN8touchgfx6ScreenC1Ev>
        onGotoMenuButtonClicked(this, &DemoView::gotoMenuClickedHandler)
 800bcf4:	4b78      	ldr	r3, [pc, #480]	@ (800bed8 <_ZN20ProductPresenterViewC1Ev+0x1ec>)
 800bcf6:	2500      	movs	r5, #0
 800bcf8:	f104 0778 	add.w	r7, r4, #120	@ 0x78
 800bcfc:	f104 06ac 	add.w	r6, r4, #172	@ 0xac
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	3338      	adds	r3, #56	@ 0x38
 800bd04:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 800bd08:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800bd0a:	6423      	str	r3, [r4, #64]	@ 0x40
 800bd0c:	f7f7 fcf4 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
 800bd10:	4638      	mov	r0, r7
 800bd12:	f7f7 fd09 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
    TextAreaWithWildcardBase() : TextArea() {  }
 800bd16:	4630      	mov	r0, r6
 800bd18:	f7f7 fd06 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 800bd1c:	4b6f      	ldr	r3, [pc, #444]	@ (800bedc <_ZN20ProductPresenterViewC1Ev+0x1f0>)
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4638      	mov	r0, r7
 800bd22:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 800bd26:	f104 07e4 	add.w	r7, r4, #228	@ 0xe4
    {
 800bd2a:	4b6d      	ldr	r3, [pc, #436]	@ (800bee0 <_ZN20ProductPresenterViewC1Ev+0x1f4>)
 800bd2c:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
        this->pobject = pobject;
 800bd30:	e9c4 343c 	strd	r3, r4, [r4, #240]	@ 0xf0
        this->pmemfun_1 = pmemfun_1;
 800bd34:	4b6b      	ldr	r3, [pc, #428]	@ (800bee4 <_ZN20ProductPresenterViewC1Ev+0x1f8>)
 800bd36:	e9c4 353e 	strd	r3, r5, [r4, #248]	@ 0xf8
        gotoMenuButton.setAction(onGotoMenuButtonClicked);
 800bd3a:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 800bd3e:	66e3      	str	r3, [r4, #108]	@ 0x6c
        mcuLoadTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_TEXT));
 800bd40:	f00b f976 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 800bd44:	22ff      	movs	r2, #255	@ 0xff
 800bd46:	4611      	mov	r1, r2
 800bd48:	4610      	mov	r0, r2
 800bd4a:	f010 fcbd 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        Unicode::snprintf(mcuLoadTxtValueBuffer, 5, "%d", 0);
 800bd4e:	462b      	mov	r3, r5
 800bd50:	4a65      	ldr	r2, [pc, #404]	@ (800bee8 <_ZN20ProductPresenterViewC1Ev+0x1fc>)
 800bd52:	2105      	movs	r1, #5
 800bd54:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f010 fca7 	bl	801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        mcuLoadValueTxt.setTypedText(TypedText(T_DEMO_VIEW_MCU_LOAD_VALUE));
 800bd5e:	4630      	mov	r0, r6
        wildcard = value;
 800bd60:	f8c4 70e0 	str.w	r7, [r4, #224]	@ 0xe0
 800bd64:	f04f 0101 	mov.w	r1, #1
 800bd68:	f00b f962 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        mcuLoadValueTxt.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 800bd6c:	22ff      	movs	r2, #255	@ 0xff
 800bd6e:	f64f 76ff 	movw	r6, #65535	@ 0xffff
        moveAnimationEndedCallback(0)
 800bd72:	4f5e      	ldr	r7, [pc, #376]	@ (800beec <_ZN20ProductPresenterViewC1Ev+0x200>)
 800bd74:	4611      	mov	r1, r2
 800bd76:	4610      	mov	r0, r2
 800bd78:	f010 fca6 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    onFadeAnimationEnded(this, &ProductPresenterView::fadeAnimationEndedHandler)
 800bd7c:	4b5c      	ldr	r3, [pc, #368]	@ (800bef0 <_ZN20ProductPresenterViewC1Ev+0x204>)
 800bd7e:	a901      	add	r1, sp, #4
 800bd80:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
 800bd84:	f103 0208 	add.w	r2, r3, #8
 800bd88:	3344      	adds	r3, #68	@ 0x44
 800bd8a:	f504 709e 	add.w	r0, r4, #316	@ 0x13c
        nextDrawChainElement(0),
 800bd8e:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 800bd92:	6423      	str	r3, [r4, #64]	@ 0x40
        touchable(false),
 800bd94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd98:	6022      	str	r2, [r4, #0]
 800bd9a:	f8a4 3134 	strh.w	r3, [r4, #308]	@ 0x134
 800bd9e:	4b55      	ldr	r3, [pc, #340]	@ (800bef4 <_ZN20ProductPresenterViewC1Ev+0x208>)
 800bda0:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 800bda4:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 800bda8:	f8ad 6004 	strh.w	r6, [sp, #4]
        this->width = width;
 800bdac:	e9c4 5545 	strd	r5, r5, [r4, #276]	@ 0x114
        this->width = 0;
 800bdb0:	e9c4 5547 	strd	r5, r5, [r4, #284]	@ 0x11c
        nextSibling(0),
 800bdb4:	e9c4 5549 	strd	r5, r5, [r4, #292]	@ 0x124
 800bdb8:	f7f8 f922 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800bdbc:	a901      	add	r1, sp, #4
 800bdbe:	f8c4 713c 	str.w	r7, [r4, #316]	@ 0x13c
 800bdc2:	f504 70c2 	add.w	r0, r4, #388	@ 0x184
        moveAnimationRunning(false),
 800bdc6:	f884 5166 	strb.w	r5, [r4, #358]	@ 0x166
        moveAnimationCounter(0),
 800bdca:	f8c4 5168 	str.w	r5, [r4, #360]	@ 0x168
        moveAnimationEndedCallback(0)
 800bdce:	f8c4 5180 	str.w	r5, [r4, #384]	@ 0x180
 800bdd2:	f8ad 6004 	strh.w	r6, [sp, #4]
 800bdd6:	f7f8 f913 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800bdda:	f8c4 7184 	str.w	r7, [r4, #388]	@ 0x184
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800bdde:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 800bde2:	4f45      	ldr	r7, [pc, #276]	@ (800bef8 <_ZN20ProductPresenterViewC1Ev+0x20c>)
        moveAnimationRunning(false),
 800bde4:	f884 51ae 	strb.w	r5, [r4, #430]	@ 0x1ae
        moveAnimationCounter(0),
 800bde8:	f8c4 51b0 	str.w	r5, [r4, #432]	@ 0x1b0
    selectedPoster(0),
 800bdec:	e9c4 5572 	strd	r5, r5, [r4, #456]	@ 0x1c8
 800bdf0:	f7f7 fc72 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 800bdf4:	f8c4 71d0 	str.w	r7, [r4, #464]	@ 0x1d0
    onFadeAnimationEnded(this, &ProductPresenterView::fadeAnimationEndedHandler)
 800bdf8:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 800bdfc:	f884 61f6 	strb.w	r6, [r4, #502]	@ 0x1f6
        color = col;
 800be00:	f8c4 51f8 	str.w	r5, [r4, #504]	@ 0x1f8
 800be04:	f884 51fc 	strb.w	r5, [r4, #508]	@ 0x1fc
 800be08:	f7f7 fc76 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
 800be0c:	f504 700d 	add.w	r0, r4, #564	@ 0x234
 800be10:	f7f7 fc62 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 800be14:	f8c4 7234 	str.w	r7, [r4, #564]	@ 0x234
        moveAnimationEndedCallback(0)
 800be18:	4f38      	ldr	r7, [pc, #224]	@ (800befc <_ZN20ProductPresenterViewC1Ev+0x210>)
 800be1a:	f504 7019 	add.w	r0, r4, #612	@ 0x264
 800be1e:	f884 625a 	strb.w	r6, [r4, #602]	@ 0x25a
 800be22:	f8c4 525c 	str.w	r5, [r4, #604]	@ 0x25c
 800be26:	f884 5260 	strb.w	r5, [r4, #608]	@ 0x260
 800be2a:	f7f7 fc7d 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
 800be2e:	f504 702d 	add.w	r0, r4, #692	@ 0x2b4
 800be32:	f8c4 7264 	str.w	r7, [r4, #612]	@ 0x264
        moveAnimationRunning(false),
 800be36:	f884 5296 	strb.w	r5, [r4, #662]	@ 0x296
        moveAnimationCounter(0),
 800be3a:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
        moveAnimationEndedCallback(0)
 800be3e:	f8c4 52b0 	str.w	r5, [r4, #688]	@ 0x2b0
 800be42:	f7f7 fc71 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
 800be46:	f504 7041 	add.w	r0, r4, #772	@ 0x304
 800be4a:	f8c4 72b4 	str.w	r7, [r4, #692]	@ 0x2b4
        moveAnimationRunning(false),
 800be4e:	f884 52e6 	strb.w	r5, [r4, #742]	@ 0x2e6
        moveAnimationCounter(0),
 800be52:	f8c4 52e8 	str.w	r5, [r4, #744]	@ 0x2e8
        moveAnimationEndedCallback(0)
 800be56:	f8c4 5300 	str.w	r5, [r4, #768]	@ 0x300
 800be5a:	f007 fd8b 	bl	8013974 <_ZN8touchgfx19ScrollableContainerC1Ev>
        fadeAnimationEndedCallback(0)
 800be5e:	f504 7071 	add.w	r0, r4, #964	@ 0x3c4
 800be62:	f7f7 fc61 	bl	8003728 <_ZN8touchgfx8TextAreaC1Ev>
 800be66:	4b26      	ldr	r3, [pc, #152]	@ (800bf00 <_ZN20ProductPresenterViewC1Ev+0x214>)
 800be68:	a901      	add	r1, sp, #4
 800be6a:	f204 4014 	addw	r0, r4, #1044	@ 0x414
 800be6e:	f8c4 33c4 	str.w	r3, [r4, #964]	@ 0x3c4
        fadeAnimationRunning(false),
 800be72:	f884 53f6 	strb.w	r5, [r4, #1014]	@ 0x3f6
        fadeAnimationCounter(0),
 800be76:	f8c4 53f8 	str.w	r5, [r4, #1016]	@ 0x3f8
        fadeAnimationEndedCallback(0)
 800be7a:	f8c4 5408 	str.w	r5, [r4, #1032]	@ 0x408
 800be7e:	f8ad 6004 	strh.w	r6, [sp, #4]
 800be82:	f7f8 f8bd 	bl	8004000 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800be86:	f504 6088 	add.w	r0, r4, #1088	@ 0x440
 800be8a:	f7f5 f9ad 	bl	80011e8 <_ZN15CollapsibleMenuC1Ev>
 800be8e:	f604 009c 	addw	r0, r4, #2204	@ 0x89c
 800be92:	f7f7 fc31 	bl	80036f8 <_ZN8touchgfx6ButtonC1Ev>
    {
 800be96:	4b1b      	ldr	r3, [pc, #108]	@ (800bf04 <_ZN20ProductPresenterViewC1Ev+0x218>)
}
 800be98:	4620      	mov	r0, r4
        this->pobject = pobject;
 800be9a:	f8c4 48d4 	str.w	r4, [r4, #2260]	@ 0x8d4
    {
 800be9e:	f8c4 38d0 	str.w	r3, [r4, #2256]	@ 0x8d0
        this->pmemfun_1 = pmemfun_1;
 800bea2:	4b19      	ldr	r3, [pc, #100]	@ (800bf08 <_ZN20ProductPresenterViewC1Ev+0x21c>)
 800bea4:	f8c4 58dc 	str.w	r5, [r4, #2268]	@ 0x8dc
 800bea8:	f8c4 38d8 	str.w	r3, [r4, #2264]	@ 0x8d8
    {
 800beac:	4b17      	ldr	r3, [pc, #92]	@ (800bf0c <_ZN20ProductPresenterViewC1Ev+0x220>)
        this->pobject = pobject;
 800beae:	f8c4 48e4 	str.w	r4, [r4, #2276]	@ 0x8e4
    {
 800beb2:	f8c4 38e0 	str.w	r3, [r4, #2272]	@ 0x8e0
        this->pmemfun_2 = pmemfun_2;
 800beb6:	4b16      	ldr	r3, [pc, #88]	@ (800bf10 <_ZN20ProductPresenterViewC1Ev+0x224>)
 800beb8:	f8c4 58ec 	str.w	r5, [r4, #2284]	@ 0x8ec
 800bebc:	f8c4 38e8 	str.w	r3, [r4, #2280]	@ 0x8e8
    {
 800bec0:	4b14      	ldr	r3, [pc, #80]	@ (800bf14 <_ZN20ProductPresenterViewC1Ev+0x228>)
        this->pobject = pobject;
 800bec2:	f8c4 48f4 	str.w	r4, [r4, #2292]	@ 0x8f4
    {
 800bec6:	f8c4 38f0 	str.w	r3, [r4, #2288]	@ 0x8f0
        this->pmemfun_1 = pmemfun_1;
 800beca:	4b13      	ldr	r3, [pc, #76]	@ (800bf18 <_ZN20ProductPresenterViewC1Ev+0x22c>)
 800becc:	f8c4 58fc 	str.w	r5, [r4, #2300]	@ 0x8fc
 800bed0:	f8c4 38f8 	str.w	r3, [r4, #2296]	@ 0x8f8
 800bed4:	b003      	add	sp, #12
 800bed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bed8:	08024a28 	.word	0x08024a28
 800bedc:	08023474 	.word	0x08023474
 800bee0:	08024a10 	.word	0x08024a10
 800bee4:	0800bc61 	.word	0x0800bc61
 800bee8:	08023468 	.word	0x08023468
 800beec:	08024a74 	.word	0x08024a74
 800bef0:	08022654 	.word	0x08022654
 800bef4:	080250b0 	.word	0x080250b0
 800bef8:	08025ea4 	.word	0x08025ea4
 800befc:	08023aa8 	.word	0x08023aa8
 800bf00:	0802364c 	.word	0x0802364c
 800bf04:	08024af4 	.word	0x08024af4
 800bf08:	0800c759 	.word	0x0800c759
 800bf0c:	08024b0c 	.word	0x08024b0c
 800bf10:	0800bfa3 	.word	0x0800bfa3
 800bf14:	08024b24 	.word	0x08024b24
 800bf18:	0800c0b9 	.word	0x0800c0b9

0800bf1c <_ZN20ProductPresenterView11setLanguageEv>:
        setLanguage();
    }
}

void ProductPresenterView::setLanguage()
{
 800bf1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf1e:	4604      	mov	r4, r0
    int languageIndex = languageSelector.getSelectedElementIndex();
 800bf20:	f500 6088 	add.w	r0, r0, #1088	@ 0x440
 800bf24:	f7f5 fad7 	bl	80014d6 <_ZN15CollapsibleMenu23getSelectedElementIndexEv>
    activateLanguageSelectorButton.setBitmaps(Bitmap(inactiveLanguageButtons[languageIndex]), Bitmap(inactiveLanguageButtons[languageIndex]));
 800bf28:	aa01      	add	r2, sp, #4
 800bf2a:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 800bf2e:	f604 069c 	addw	r6, r4, #2204	@ 0x89c
 800bf32:	4669      	mov	r1, sp
    int languageIndex = languageSelector.getSelectedElementIndex();
 800bf34:	4605      	mov	r5, r0
    activateLanguageSelectorButton.setBitmaps(Bitmap(inactiveLanguageButtons[languageIndex]), Bitmap(inactiveLanguageButtons[languageIndex]));
 800bf36:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800bf3a:	4630      	mov	r0, r6
    activateLanguageSelectorButton.setWidth(activateLanguageSelectorButton.getWidth() + 20); // Increase the button active area to better react to click
    activateLanguageSelectorButton.setHeight(activateLanguageSelectorButton.getHeight() + 20); // Increase the button active area to better react to click
    activateLanguageSelectorButton.invalidate();

    Texts::setLanguage(languages[languageIndex]);
 800bf3c:	4425      	add	r5, r4
 800bf3e:	f8ad 3000 	strh.w	r3, [sp]
 800bf42:	f8ad 3004 	strh.w	r3, [sp, #4]
    activateLanguageSelectorButton.setBitmaps(Bitmap(inactiveLanguageButtons[languageIndex]), Bitmap(inactiveLanguageButtons[languageIndex]));
 800bf46:	f00b f8fb 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    activateLanguageSelectorButton.setWidth(activateLanguageSelectorButton.getWidth() + 20); // Increase the button active area to better react to click
 800bf4a:	f8b4 38a4 	ldrh.w	r3, [r4, #2212]	@ 0x8a4
    activateLanguageSelectorButton.invalidate();
 800bf4e:	4630      	mov	r0, r6
    bodyText.resizeToCurrentText();
    textAreaContainer.reset();
 800bf50:	f504 7641 	add.w	r6, r4, #772	@ 0x304
    activateLanguageSelectorButton.setWidth(activateLanguageSelectorButton.getWidth() + 20); // Increase the button active area to better react to click
 800bf54:	3314      	adds	r3, #20
        rect.width = width;
 800bf56:	f8a4 38a4 	strh.w	r3, [r4, #2212]	@ 0x8a4
    activateLanguageSelectorButton.setHeight(activateLanguageSelectorButton.getHeight() + 20); // Increase the button active area to better react to click
 800bf5a:	f8b4 38a6 	ldrh.w	r3, [r4, #2214]	@ 0x8a6
 800bf5e:	3314      	adds	r3, #20
        rect.height = height;
 800bf60:	f8a4 38a6 	strh.w	r3, [r4, #2214]	@ 0x8a6
    activateLanguageSelectorButton.invalidate();
 800bf64:	f00e fa11 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    Texts::setLanguage(languages[languageIndex]);
 800bf68:	f895 0100 	ldrb.w	r0, [r5, #256]	@ 0x100
    bodyText.resizeToCurrentText();
 800bf6c:	f504 7571 	add.w	r5, r4, #964	@ 0x3c4
    Texts::setLanguage(languages[languageIndex]);
 800bf70:	f7f4 febc 	bl	8000cec <_ZN8touchgfx5Texts11setLanguageEt>
    bodyText.resizeToCurrentText();
 800bf74:	4628      	mov	r0, r5
 800bf76:	f00b f831 	bl	8016fdc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaContainer.reset();
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f008 f903 	bl	8014186 <_ZN8touchgfx19ScrollableContainer5resetEv>
    textAreaContainer.invalidate();
 800bf80:	4630      	mov	r0, r6
 800bf82:	f00e fa02 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    mcuLoadTxt.invalidate();
 800bf86:	f104 0078 	add.w	r0, r4, #120	@ 0x78
 800bf8a:	f00e f9fe 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    headlineText.invalidate();
 800bf8e:	f504 7019 	add.w	r0, r4, #612	@ 0x264
 800bf92:	f00e f9fa 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
    bodyText.invalidate();
 800bf96:	4628      	mov	r0, r5
}
 800bf98:	b002      	add	sp, #8
 800bf9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bodyText.invalidate();
 800bf9e:	f00e b9f4 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>

0800bfa2 <_ZN20ProductPresenterView35languageSelectorStateChangedHandlerERK15CollapsibleMenub>:
{
 800bfa2:	b510      	push	{r4, lr}
 800bfa4:	4604      	mov	r4, r0
    if (!isExpanded)
 800bfa6:	b94a      	cbnz	r2, 800bfbc <_ZN20ProductPresenterView35languageSelectorStateChangedHandlerERK15CollapsibleMenub+0x1a>
        languageSelector.fadeOut();
 800bfa8:	f500 6088 	add.w	r0, r0, #1088	@ 0x440
 800bfac:	210e      	movs	r1, #14
 800bfae:	f7f5 fa0d 	bl	80013cc <_ZN15CollapsibleMenu7fadeOutEi>
        setLanguage();
 800bfb2:	4620      	mov	r0, r4
}
 800bfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        setLanguage();
 800bfb8:	f7ff bfb0 	b.w	800bf1c <_ZN20ProductPresenterView11setLanguageEv>
}
 800bfbc:	bd10      	pop	{r4, pc}

0800bfbe <_ZN20ProductPresenterView15getPosterBitmapEi>:

}

touchgfx::BitmapId ProductPresenterView::getPosterBitmap(int index)
{
    switch (index)
 800bfbe:	2901      	cmp	r1, #1
 800bfc0:	d004      	beq.n	800bfcc <_ZN20ProductPresenterView15getPosterBitmapEi+0xe>
    {
    default:
    case 0:
        return BITMAP_POSTER_IMAGE_00_ID;
 800bfc2:	2902      	cmp	r1, #2
 800bfc4:	bf0c      	ite	eq
 800bfc6:	206b      	moveq	r0, #107	@ 0x6b
 800bfc8:	2069      	movne	r0, #105	@ 0x69
 800bfca:	4770      	bx	lr
    switch (index)
 800bfcc:	206a      	movs	r0, #106	@ 0x6a
    case 1:
        return BITMAP_POSTER_IMAGE_01_ID;
    case 2:
        return BITMAP_POSTER_IMAGE_02_ID;
    }
}
 800bfce:	4770      	bx	lr

0800bfd0 <_ZN20ProductPresenterView11getHeadlineEi>:

TEXTS ProductPresenterView::getHeadline(int index)
{
    switch (index)
 800bfd0:	2901      	cmp	r1, #1
 800bfd2:	d004      	beq.n	800bfde <_ZN20ProductPresenterView11getHeadlineEi+0xe>
    {
    default:
    case 0:
        return T_POSTER_HEADLINE_00;
 800bfd4:	2902      	cmp	r1, #2
 800bfd6:	bf0c      	ite	eq
 800bfd8:	2008      	moveq	r0, #8
 800bfda:	2004      	movne	r0, #4
 800bfdc:	4770      	bx	lr
    switch (index)
 800bfde:	2006      	movs	r0, #6
    case 1:
        return T_POSTER_HEADLINE_01;
    case 2:
        return T_POSTER_HEADLINE_02;
    }
}
 800bfe0:	4770      	bx	lr

0800bfe2 <_ZN20ProductPresenterView11getBodyTextEi>:

TEXTS ProductPresenterView::getBodyText(int index)
{
    switch (index)
 800bfe2:	2901      	cmp	r1, #1
 800bfe4:	d004      	beq.n	800bff0 <_ZN20ProductPresenterView11getBodyTextEi+0xe>
    {
    default:
    case 0:
        return T_POSTER_TEXT_00;
 800bfe6:	2902      	cmp	r1, #2
 800bfe8:	bf0c      	ite	eq
 800bfea:	2009      	moveq	r0, #9
 800bfec:	2005      	movne	r0, #5
 800bfee:	4770      	bx	lr
    switch (index)
 800bff0:	2007      	movs	r0, #7
    case 1:
        return T_POSTER_TEXT_01;
    case 2:
        return T_POSTER_TEXT_02;
    }
}
 800bff2:	4770      	bx	lr

0800bff4 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 800bff4:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
    void nextFadeAnimationStep()
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 800bffc:	b12b      	cbz	r3, 800c00a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x16>
            if (fadeAnimationCounter < fadeAnimationDelay)
 800bffe:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 800c000:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800c002:	4288      	cmp	r0, r1
 800c004:	d202      	bcs.n	800c00c <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x18>
                fadeAnimationCounter++;
 800c006:	3001      	adds	r0, #1
 800c008:	86a0      	strh	r0, [r4, #52]	@ 0x34
    }
 800c00a:	bd70      	pop	{r4, r5, r6, pc}
                if (fadeAnimationCounter <= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800c00c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800c00e:	18ca      	adds	r2, r1, r3
 800c010:	4290      	cmp	r0, r2
 800c012:	d917      	bls.n	800c044 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x50>
                    fadeAnimationRunning = false;
 800c014:	2300      	movs	r3, #0
 800c016:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
                    fadeAnimationDuration = 0;
 800c01a:	8723      	strh	r3, [r4, #56]	@ 0x38
                    Application::getInstance()->unregisterTimerWidget(this);
 800c01c:	f00d fdca 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800c020:	4621      	mov	r1, r4
 800c022:	f00d fdfd 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 800c026:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800c028:	2800      	cmp	r0, #0
 800c02a:	d0ee      	beq.n	800c00a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x16>
 800c02c:	6803      	ldr	r3, [r0, #0]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	4798      	blx	r3
 800c032:	2800      	cmp	r0, #0
 800c034:	d0e9      	beq.n	800c00a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x16>
                        fadeAnimationEndedCallback->execute(*this);
 800c036:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800c038:	4621      	mov	r1, r4
 800c03a:	6803      	ldr	r3, [r0, #0]
    }
 800c03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	4718      	bx	r3
                    int16_t deltaAlpha = (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 800c044:	8f65      	ldrh	r5, [r4, #58]	@ 0x3a
 800c046:	1a40      	subs	r0, r0, r1
 800c048:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800c04a:	2100      	movs	r1, #0
 800c04c:	b280      	uxth	r0, r0
 800c04e:	1b52      	subs	r2, r2, r5
 800c050:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c052:	b212      	sxth	r2, r2
 800c054:	47a8      	blx	r5
                    T::setAlpha(fadeAnimationStartAlpha + deltaAlpha);
 800c056:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 800c058:	4418      	add	r0, r3
        this->alpha = alpha;
 800c05a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
                    T::invalidate();
 800c05e:	4620      	mov	r0, r4
 800c060:	f00e f993 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
                    fadeAnimationCounter++;
 800c064:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800c066:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
                    fadeAnimationCounter++;
 800c068:	3301      	adds	r3, #1
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800c06a:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
                    fadeAnimationCounter++;
 800c06c:	b29b      	uxth	r3, r3
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800c06e:	440a      	add	r2, r1
 800c070:	4293      	cmp	r3, r2
                    fadeAnimationCounter++;
 800c072:	86a3      	strh	r3, [r4, #52]	@ 0x34
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800c074:	d9c9      	bls.n	800c00a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x16>
 800c076:	e7cd      	b.n	800c014 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x20>

0800c078 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE18startFadeAnimationEhtPFstsstE>:
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	461e      	mov	r6, r3
        if (!fadeAnimationRunning)
 800c07c:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 800c080:	4604      	mov	r4, r0
 800c082:	460f      	mov	r7, r1
 800c084:	4615      	mov	r5, r2
        if (!fadeAnimationRunning)
 800c086:	b923      	cbnz	r3, 800c092 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE18startFadeAnimationEhtPFstsstE+0x1a>
            Application::getInstance()->registerTimerWidget(this);
 800c088:	f00d fd94 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800c08c:	4621      	mov	r1, r4
 800c08e:	f00d fd97 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 800c092:	2300      	movs	r3, #0
        fadeAnimationEndAlpha = endAlpha;
 800c094:	87a7      	strh	r7, [r4, #60]	@ 0x3c
        fadeAnimationDuration = duration;
 800c096:	8725      	strh	r5, [r4, #56]	@ 0x38
        fadeAnimationCounter = 0;
 800c098:	86a3      	strh	r3, [r4, #52]	@ 0x34
        fadeAnimationStartAlpha = T::getAlpha();
 800c09a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 800c09e:	6426      	str	r6, [r4, #64]	@ 0x40
        fadeAnimationStartAlpha = T::getAlpha();
 800c0a0:	8763      	strh	r3, [r4, #58]	@ 0x3a
        fadeAnimationRunning = true;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 800c0a8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800c0aa:	432b      	orrs	r3, r5
 800c0ac:	d102      	bne.n	800c0b4 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE18startFadeAnimationEhtPFstsstE+0x3c>
            nextFadeAnimationStep(); // Set end alpha and shut down
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f7ff ffa0 	bl	800bff4 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv>
    }
 800c0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0b8 <_ZN20ProductPresenterView25fadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_8TextAreaEEE>:

void ProductPresenterView::fadeAnimationEndedHandler(const FadeAnimator<TextArea>& textArea)
{
 800c0b8:	b538      	push	{r3, r4, r5, lr}
    if (&textArea == &bodyText)
 800c0ba:	f500 7571 	add.w	r5, r0, #964	@ 0x3c4
{
 800c0be:	4604      	mov	r4, r0
    if (&textArea == &bodyText)
 800c0c0:	428d      	cmp	r5, r1
 800c0c2:	d11f      	bne.n	800c104 <_ZN20ProductPresenterView25fadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_8TextAreaEEE+0x4c>
    {
        if (bodyText.getAlpha() == 0)
 800c0c4:	f890 33f2 	ldrb.w	r3, [r0, #1010]	@ 0x3f2
 800c0c8:	b9e3      	cbnz	r3, 800c104 <_ZN20ProductPresenterView25fadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_8TextAreaEEE+0x4c>
        {
            bodyText.setTypedText(TypedText(getBodyText(nextTextIndex)));
 800c0ca:	f8d0 1410 	ldr.w	r1, [r0, #1040]	@ 0x410
 800c0ce:	f7ff ff88 	bl	800bfe2 <_ZN20ProductPresenterView11getBodyTextEi>
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f00a ffab 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
            bodyText.resizeToCurrentText();
 800c0da:	4628      	mov	r0, r5
 800c0dc:	f00a ff7e 	bl	8016fdc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
            bodyText.startFadeAnimation(255, fadeDuration);
 800c0e0:	4628      	mov	r0, r5

            textAreaContainer.reset();
 800c0e2:	f504 7541 	add.w	r5, r4, #772	@ 0x304
            bodyText.startFadeAnimation(255, fadeDuration);
 800c0e6:	4b08      	ldr	r3, [pc, #32]	@ (800c108 <_ZN20ProductPresenterView25fadeAnimationEndedHandlerERKN8touchgfx12FadeAnimatorINS0_8TextAreaEEE+0x50>)
 800c0e8:	f8b4 240c 	ldrh.w	r2, [r4, #1036]	@ 0x40c
 800c0ec:	21ff      	movs	r1, #255	@ 0xff
 800c0ee:	f7ff ffc3 	bl	800c078 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE18startFadeAnimationEhtPFstsstE>
            textAreaContainer.reset();
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f008 f847 	bl	8014186 <_ZN8touchgfx19ScrollableContainer5resetEv>
            textAreaContainer.invalidate();
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f00e f946 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        touchable = touch;
 800c0fe:	2301      	movs	r3, #1
 800c100:	f884 3224 	strb.w	r3, [r4, #548]	@ 0x224

            nextButton.setTouchable(true);
        }
    }

}
 800c104:	bd38      	pop	{r3, r4, r5, pc}
 800c106:	bf00      	nop
 800c108:	0801b59b 	.word	0x0801b59b

0800c10c <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>:
        if (moveAnimationRunning)
 800c10c:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
    void nextMoveAnimationStep()
 800c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c114:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 800c116:	b12b      	cbz	r3, 800c124 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x18>
            if (moveAnimationCounter < moveAnimationDelay)
 800c118:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800c11a:	8dc1      	ldrh	r1, [r0, #46]	@ 0x2e
 800c11c:	428a      	cmp	r2, r1
 800c11e:	d203      	bcs.n	800c128 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x1c>
                moveAnimationCounter++;
 800c120:	3201      	adds	r2, #1
 800c122:	8582      	strh	r2, [r0, #44]	@ 0x2c
    }
 800c124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800c128:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800c12a:	18c8      	adds	r0, r1, r3
 800c12c:	4282      	cmp	r2, r0
 800c12e:	d917      	bls.n	800c160 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x54>
                    moveAnimationRunning = false;
 800c130:	2300      	movs	r3, #0
 800c132:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
                    moveAnimationCounter = 0;
 800c136:	85a3      	strh	r3, [r4, #44]	@ 0x2c
                    Application::getInstance()->unregisterTimerWidget(this);
 800c138:	f00d fd3c 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800c13c:	4621      	mov	r1, r4
 800c13e:	f00d fd6f 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800c142:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800c144:	2800      	cmp	r0, #0
 800c146:	d0ed      	beq.n	800c124 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x18>
 800c148:	6803      	ldr	r3, [r0, #0]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	4798      	blx	r3
 800c14e:	2800      	cmp	r0, #0
 800c150:	d0e8      	beq.n	800c124 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x18>
                        moveAnimationEndedCallback->execute(*this);
 800c152:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800c154:	4621      	mov	r1, r4
 800c156:	6803      	ldr	r3, [r0, #0]
    }
 800c158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        moveAnimationEndedCallback->execute(*this);
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	4718      	bx	r3
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800c160:	1a52      	subs	r2, r2, r1
 800c162:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 800c164:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800c166:	b295      	uxth	r5, r2
 800c168:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800c16a:	1a52      	subs	r2, r2, r1
 800c16c:	4628      	mov	r0, r5
 800c16e:	2100      	movs	r1, #0
 800c170:	b212      	sxth	r2, r2
 800c172:	47b0      	blx	r6
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800c174:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800c176:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800c178:	4606      	mov	r6, r0
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800c17a:	2100      	movs	r1, #0
 800c17c:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	4628      	mov	r0, r5
 800c182:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800c184:	b212      	sxth	r2, r2
 800c186:	47b8      	blx	r7
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800c188:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800c18a:	18c2      	adds	r2, r0, r3
 800c18c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800c18e:	4620      	mov	r0, r4
 800c190:	18f1      	adds	r1, r6, r3
 800c192:	b212      	sxth	r2, r2
 800c194:	b209      	sxth	r1, r1
 800c196:	f7f4 fe39 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 800c19a:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800c19c:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
                    moveAnimationCounter++;
 800c19e:	3301      	adds	r3, #1
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800c1a0:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
                    moveAnimationCounter++;
 800c1a2:	b29b      	uxth	r3, r3
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800c1a4:	440a      	add	r2, r1
 800c1a6:	4293      	cmp	r3, r2
                    moveAnimationCounter++;
 800c1a8:	85a3      	strh	r3, [r4, #44]	@ 0x2c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800c1aa:	d9bb      	bls.n	800c124 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x18>
 800c1ac:	e7c0      	b.n	800c130 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x24>

0800c1ae <_ZN8touchgfx12MoveAnimatorINS_5ImageEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800c1ae:	b508      	push	{r3, lr}
        nextMoveAnimationStep();
 800c1b0:	f7ff ffac 	bl	800c10c <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>
    }
 800c1b4:	bd08      	pop	{r3, pc}

0800c1b6 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800c1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b8:	461d      	mov	r5, r3
        if (!moveAnimationRunning)
 800c1ba:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800c1be:	4604      	mov	r4, r0
 800c1c0:	460f      	mov	r7, r1
 800c1c2:	4616      	mov	r6, r2
        if (!moveAnimationRunning)
 800c1c4:	b923      	cbnz	r3, 800c1d0 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_+0x1a>
            Application::getInstance()->registerTimerWidget(this);
 800c1c6:	f00d fcf5 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	f00d fcf8 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 800c1d0:	2300      	movs	r3, #0
        moveAnimationEndX = endX;
 800c1d2:	86e7      	strh	r7, [r4, #54]	@ 0x36
        moveAnimationEndY = endY;
 800c1d4:	8726      	strh	r6, [r4, #56]	@ 0x38
        moveAnimationCounter = 0;
 800c1d6:	85a3      	strh	r3, [r4, #44]	@ 0x2c
        moveAnimationStartX = T::getX();
 800c1d8:	88a3      	ldrh	r3, [r4, #4]
        moveAnimationDuration = duration;
 800c1da:	8625      	strh	r5, [r4, #48]	@ 0x30
        moveAnimationStartX = T::getX();
 800c1dc:	8663      	strh	r3, [r4, #50]	@ 0x32
        moveAnimationStartY = T::getY();
 800c1de:	88e3      	ldrh	r3, [r4, #6]
 800c1e0:	86a3      	strh	r3, [r4, #52]	@ 0x34
        moveAnimationXEquation = xProgressionEquation;
 800c1e2:	9b06      	ldr	r3, [sp, #24]
 800c1e4:	63e3      	str	r3, [r4, #60]	@ 0x3c
        moveAnimationYEquation = yProgressionEquation;
 800c1e6:	9b07      	ldr	r3, [sp, #28]
 800c1e8:	6423      	str	r3, [r4, #64]	@ 0x40
        moveAnimationRunning = true;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800c1f0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800c1f2:	432b      	orrs	r3, r5
 800c1f4:	d102      	bne.n	800c1fc <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_+0x46>
            nextMoveAnimationStep(); // Set end position and shut down
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f7ff ff88 	bl	800c10c <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>
    }
 800c1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c200 <_ZN20ProductPresenterView15animateToPosterEii>:
{
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        bodyText.setTypedText(TypedText(getBodyText(posterIndex)));
 800c204:	f500 7371 	add.w	r3, r0, #964	@ 0x3c4
{
 800c208:	b087      	sub	sp, #28
    if (duration < 2)
 800c20a:	2a01      	cmp	r2, #1
{
 800c20c:	4604      	mov	r4, r0
 800c20e:	460d      	mov	r5, r1
        headlineText.setTypedText(TypedText(getHeadline(posterIndex)));
 800c210:	f500 7619 	add.w	r6, r0, #612	@ 0x264
 800c214:	f500 789e 	add.w	r8, r0, #316	@ 0x13c
{
 800c218:	9203      	str	r2, [sp, #12]
        bodyText.setTypedText(TypedText(getBodyText(posterIndex)));
 800c21a:	9302      	str	r3, [sp, #8]
    if (duration < 2)
 800c21c:	dc22      	bgt.n	800c264 <_ZN20ProductPresenterView15animateToPosterEii+0x64>
        headlineText.setTypedText(TypedText(getHeadline(posterIndex)));
 800c21e:	f7ff fed7 	bl	800bfd0 <_ZN20ProductPresenterView11getHeadlineEi>
 800c222:	4601      	mov	r1, r0
 800c224:	4630      	mov	r0, r6
 800c226:	f00a ff03 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        headlineText.invalidate();
 800c22a:	4630      	mov	r0, r6
 800c22c:	f00e f8ad 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        bodyText.setTypedText(TypedText(getBodyText(posterIndex)));
 800c230:	4629      	mov	r1, r5
 800c232:	4620      	mov	r0, r4
 800c234:	f7ff fed5 	bl	800bfe2 <_ZN20ProductPresenterView11getBodyTextEi>
 800c238:	4601      	mov	r1, r0
 800c23a:	9802      	ldr	r0, [sp, #8]
 800c23c:	f00a fef8 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        bodyText.invalidate();
 800c240:	9802      	ldr	r0, [sp, #8]
 800c242:	f00e f8a2 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        poster.setBitmap(Bitmap(getPosterBitmap(posterIndex)));
 800c246:	4629      	mov	r1, r5
 800c248:	4620      	mov	r0, r4
 800c24a:	f7ff feb8 	bl	800bfbe <_ZN20ProductPresenterView15getPosterBitmapEi>
 800c24e:	a905      	add	r1, sp, #20
 800c250:	f8ad 0014 	strh.w	r0, [sp, #20]
 800c254:	4640      	mov	r0, r8
 800c256:	f00b f87a 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    selectedPoster = posterIndex;
 800c25a:	f8c4 51cc 	str.w	r5, [r4, #460]	@ 0x1cc
}
 800c25e:	b007      	add	sp, #28
 800c260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c264:	f04f 0300 	mov.w	r3, #0
        headlineTextSwap.setTypedText(headlineText.getTypedText());
 800c268:	f500 772d 	add.w	r7, r0, #692	@ 0x2b4
 800c26c:	f8b0 128a 	ldrh.w	r1, [r0, #650]	@ 0x28a
 800c270:	f880 3224 	strb.w	r3, [r0, #548]	@ 0x224
 800c274:	4638      	mov	r0, r7
 800c276:	f00a fedb 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        headlineTextSwap.setXY(headlineText.getX(), headlineText.getY());
 800c27a:	f9b4 226a 	ldrsh.w	r2, [r4, #618]	@ 0x26a
 800c27e:	f9b4 1268 	ldrsh.w	r1, [r4, #616]	@ 0x268
 800c282:	4638      	mov	r0, r7
 800c284:	f7f4 fdac 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
        headlineTextSwap.invalidate();
 800c288:	4638      	mov	r0, r7
 800c28a:	f00e f87e 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        headlineText.setTypedText(TypedText(getHeadline(posterIndex)));
 800c28e:	4629      	mov	r1, r5
 800c290:	4620      	mov	r0, r4
        headlineTextSwap.startMoveAnimation(headlineTextSwap.getX() - headlineTextSwap.getWidth(), headlineTextSwap.getY(), duration, EasingEquations::cubicEaseInOut);
 800c292:	f8df a128 	ldr.w	sl, [pc, #296]	@ 800c3bc <_ZN20ProductPresenterView15animateToPosterEii+0x1bc>
        headlineText.setTypedText(TypedText(getHeadline(posterIndex)));
 800c296:	f7ff fe9b 	bl	800bfd0 <_ZN20ProductPresenterView11getHeadlineEi>
 800c29a:	4601      	mov	r1, r0
 800c29c:	4630      	mov	r0, r6
        headlineTextSwap.startMoveAnimation(headlineTextSwap.getX() - headlineTextSwap.getWidth(), headlineTextSwap.getY(), duration, EasingEquations::cubicEaseInOut);
 800c29e:	f8df b120 	ldr.w	fp, [pc, #288]	@ 800c3c0 <_ZN20ProductPresenterView15animateToPosterEii+0x1c0>
        headlineText.setTypedText(TypedText(getHeadline(posterIndex)));
 800c2a2:	f00a fec5 	bl	8017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        return x + width;
 800c2a6:	f8b4 32bc 	ldrh.w	r3, [r4, #700]	@ 0x2bc
 800c2aa:	f8b4 12b8 	ldrh.w	r1, [r4, #696]	@ 0x2b8
        headlineText.moveTo(headlineTextSwap.getRect().right(), headlineTextSwap.getY());
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f9b4 22ba 	ldrsh.w	r2, [r4, #698]	@ 0x2ba
 800c2b4:	4419      	add	r1, r3
 800c2b6:	b209      	sxth	r1, r1
 800c2b8:	f7f4 fda8 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
        headlineText.invalidate();
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f00e f864 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        headlineTextSwap.startMoveAnimation(headlineTextSwap.getX() - headlineTextSwap.getWidth(), headlineTextSwap.getY(), duration, EasingEquations::cubicEaseInOut);
 800c2c2:	f8b4 32bc 	ldrh.w	r3, [r4, #700]	@ 0x2bc
 800c2c6:	f8b4 12b8 	ldrh.w	r1, [r4, #696]	@ 0x2b8
 800c2ca:	4638      	mov	r0, r7
 800c2cc:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 800c2d0:	1ac9      	subs	r1, r1, r3
 800c2d2:	f8cd a004 	str.w	sl, [sp, #4]
 800c2d6:	464b      	mov	r3, r9
 800c2d8:	f8cd b000 	str.w	fp, [sp]
 800c2dc:	b209      	sxth	r1, r1
 800c2de:	f9b4 22ba 	ldrsh.w	r2, [r4, #698]	@ 0x2ba
 800c2e2:	f7f9 fdba 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
        headlineText.startMoveAnimation(headlineTextSwap.getX(), headlineTextSwap.getY(), duration, EasingEquations::cubicEaseInOut);
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	464b      	mov	r3, r9
        posterSwap.setBitmap(Bitmap(poster.getBitmap()));
 800c2ea:	f504 76c2 	add.w	r6, r4, #388	@ 0x184
        headlineText.startMoveAnimation(headlineTextSwap.getX(), headlineTextSwap.getY(), duration, EasingEquations::cubicEaseInOut);
 800c2ee:	e9cd ba00 	strd	fp, sl, [sp]
 800c2f2:	f9b4 22ba 	ldrsh.w	r2, [r4, #698]	@ 0x2ba
 800c2f6:	f9b4 12b8 	ldrsh.w	r1, [r4, #696]	@ 0x2b8
 800c2fa:	f7f9 fdae 	bl	8005e5a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
        bodyText.startFadeAnimation(0, duration);
 800c2fe:	4653      	mov	r3, sl
 800c300:	464a      	mov	r2, r9
 800c302:	2100      	movs	r1, #0
 800c304:	9802      	ldr	r0, [sp, #8]
 800c306:	f7ff feb7 	bl	800c078 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE18startFadeAnimationEhtPFstsstE>
        fadeDuration = duration;
 800c30a:	9b03      	ldr	r3, [sp, #12]
        nextTextIndex = posterIndex;
 800c30c:	f8c4 5410 	str.w	r5, [r4, #1040]	@ 0x410
        fadeDuration = duration;
 800c310:	f8c4 340c 	str.w	r3, [r4, #1036]	@ 0x40c
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800c314:	4b25      	ldr	r3, [pc, #148]	@ (800c3ac <_ZN20ProductPresenterView15animateToPosterEii+0x1ac>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	b92b      	cbnz	r3, 800c326 <_ZN20ProductPresenterView15animateToPosterEii+0x126>
 800c31a:	4b25      	ldr	r3, [pc, #148]	@ (800c3b0 <_ZN20ProductPresenterView15animateToPosterEii+0x1b0>)
 800c31c:	2195      	movs	r1, #149	@ 0x95
 800c31e:	4a25      	ldr	r2, [pc, #148]	@ (800c3b4 <_ZN20ProductPresenterView15animateToPosterEii+0x1b4>)
 800c320:	4825      	ldr	r0, [pc, #148]	@ (800c3b8 <_ZN20ProductPresenterView15animateToPosterEii+0x1b8>)
 800c322:	f013 fd27 	bl	801fd74 <__assert_func>
        return bitmapId;
 800c326:	f8b4 3162 	ldrh.w	r3, [r4, #354]	@ 0x162
        posterSwap.setBitmap(Bitmap(poster.getBitmap()));
 800c32a:	a905      	add	r1, sp, #20
 800c32c:	4630      	mov	r0, r6
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800c32e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c332:	f00b f80c 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        posterSwap.setXY(poster.getX(), poster.getY());
 800c336:	f9b4 2142 	ldrsh.w	r2, [r4, #322]	@ 0x142
 800c33a:	4630      	mov	r0, r6
 800c33c:	f9b4 1140 	ldrsh.w	r1, [r4, #320]	@ 0x140
 800c340:	f7f4 fd4e 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
        posterSwap.invalidate();
 800c344:	4630      	mov	r0, r6
 800c346:	f00e f820 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        poster.setBitmap(Bitmap(getPosterBitmap(posterIndex)));
 800c34a:	4629      	mov	r1, r5
 800c34c:	4620      	mov	r0, r4
 800c34e:	f7ff fe36 	bl	800bfbe <_ZN20ProductPresenterView15getPosterBitmapEi>
 800c352:	a905      	add	r1, sp, #20
 800c354:	f8ad 0014 	strh.w	r0, [sp, #20]
 800c358:	4640      	mov	r0, r8
 800c35a:	f00a fff8 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800c35e:	f8b4 3188 	ldrh.w	r3, [r4, #392]	@ 0x188
 800c362:	f8b4 118c 	ldrh.w	r1, [r4, #396]	@ 0x18c
        poster.moveTo(posterSwap.getRect().right(), posterSwap.getY());
 800c366:	4640      	mov	r0, r8
 800c368:	f9b4 218a 	ldrsh.w	r2, [r4, #394]	@ 0x18a
 800c36c:	4419      	add	r1, r3
 800c36e:	b209      	sxth	r1, r1
 800c370:	f7f4 fd4c 	bl	8000e0c <_ZN8touchgfx8Drawable6moveToEss>
        poster.invalidate();
 800c374:	4640      	mov	r0, r8
 800c376:	f00e f808 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
        posterSwap.startMoveAnimation(posterSwap.getX() - posterSwap.getWidth(), posterSwap.getY(), duration, EasingEquations::cubicEaseInOut);
 800c37a:	f8b4 318c 	ldrh.w	r3, [r4, #396]	@ 0x18c
 800c37e:	f8b4 1188 	ldrh.w	r1, [r4, #392]	@ 0x188
 800c382:	4630      	mov	r0, r6
 800c384:	1ac9      	subs	r1, r1, r3
 800c386:	464b      	mov	r3, r9
 800c388:	e9cd ba00 	strd	fp, sl, [sp]
 800c38c:	b209      	sxth	r1, r1
 800c38e:	f9b4 218a 	ldrsh.w	r2, [r4, #394]	@ 0x18a
 800c392:	f7ff ff10 	bl	800c1b6 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>
        poster.startMoveAnimation(posterSwap.getX(), posterSwap.getY(), duration, EasingEquations::cubicEaseInOut);
 800c396:	464b      	mov	r3, r9
 800c398:	4640      	mov	r0, r8
 800c39a:	e9cd ba00 	strd	fp, sl, [sp]
 800c39e:	f9b4 218a 	ldrsh.w	r2, [r4, #394]	@ 0x18a
 800c3a2:	f9b4 1188 	ldrsh.w	r1, [r4, #392]	@ 0x188
 800c3a6:	f7ff ff06 	bl	800c1b6 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>
 800c3aa:	e756      	b.n	800c25a <_ZN20ProductPresenterView15animateToPosterEii+0x5a>
 800c3ac:	20024eec 	.word	0x20024eec
 800c3b0:	08024948 	.word	0x08024948
 800c3b4:	08024984 	.word	0x08024984
 800c3b8:	080249b7 	.word	0x080249b7
 800c3bc:	0801b59b 	.word	0x0801b59b
 800c3c0:	0801b1ed 	.word	0x0801b1ed

0800c3c4 <_ZN20ProductPresenterView11setupScreenEv>:
{
 800c3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	b085      	sub	sp, #20
 800c3ca:	2769      	movs	r7, #105	@ 0x69
 800c3cc:	4604      	mov	r4, r0
    posterContainer.setPosition(0, 0, Bitmap(BITMAP_POSTER_IMAGE_00_ID).getWidth(), Bitmap(BITMAP_POSTER_IMAGE_00_ID).getHeight());
 800c3ce:	f500 7688 	add.w	r6, r0, #272	@ 0x110
 800c3d2:	a802      	add	r0, sp, #8
 800c3d4:	f8ad 7008 	strh.w	r7, [sp, #8]
 800c3d8:	f010 fa78 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800c3dc:	4605      	mov	r5, r0
 800c3de:	a803      	add	r0, sp, #12
 800c3e0:	f8ad 700c 	strh.w	r7, [sp, #12]
 800c3e4:	f010 faaa 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	b200      	sxth	r0, r0
    shadowBox.setPosition(posterContainer.getRect().right(), posterContainer.getY(), 1, posterContainer.getHeight());
 800c3ec:	f504 77e8 	add.w	r7, r4, #464	@ 0x1d0
    posterContainer.setPosition(0, 0, Bitmap(BITMAP_POSTER_IMAGE_00_ID).getWidth(), Bitmap(BITMAP_POSTER_IMAGE_00_ID).getHeight());
 800c3f0:	b22b      	sxth	r3, r5
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	9000      	str	r0, [sp, #0]
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	f7f4 fcda 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    poster.setXY(0, 0);
 800c3fc:	f504 759e 	add.w	r5, r4, #316	@ 0x13c
 800c400:	2200      	movs	r2, #0
    textBackground.setPosition(shadowBox.getRect().right(), 0, HAL::DISPLAY_WIDTH - shadowBox.getRect().right(), posterContainer.getHeight());
 800c402:	f8df 8350 	ldr.w	r8, [pc, #848]	@ 800c754 <_ZN20ProductPresenterView11setupScreenEv+0x390>
    poster.setXY(0, 0);
 800c406:	4628      	mov	r0, r5
    headlineText.setPosition(textBackground.getX() + BODY_TEXT_MARGIN, textBackground.getY() + 20, nextButton.getX() - textBackground.getX(), 30);
 800c408:	f504 7919 	add.w	r9, r4, #612	@ 0x264
    poster.setXY(0, 0);
 800c40c:	4611      	mov	r1, r2
 800c40e:	f7f4 fce7 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    posterContainer.add(poster);
 800c412:	4629      	mov	r1, r5
 800c414:	4630      	mov	r0, r6
 800c416:	1d25      	adds	r5, r4, #4
 800c418:	f006 fc9a 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    posterContainer.add(posterSwap);
 800c41c:	f504 71c2 	add.w	r1, r4, #388	@ 0x184
 800c420:	4630      	mov	r0, r6
 800c422:	f006 fc95 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    shadowBox.setColor(Color::getColorFrom24BitRGB(0x0, 0x0, 0x0));
 800c426:	2200      	movs	r2, #0
 800c428:	4611      	mov	r1, r2
 800c42a:	4610      	mov	r0, r2
 800c42c:	f010 f94c 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c430:	f8b4 3118 	ldrh.w	r3, [r4, #280]	@ 0x118
 800c434:	f8b4 1114 	ldrh.w	r1, [r4, #276]	@ 0x114
        this->color = color;
 800c438:	f8c4 01f8 	str.w	r0, [r4, #504]	@ 0x1f8
    shadowBox.setPosition(posterContainer.getRect().right(), posterContainer.getY(), 1, posterContainer.getHeight());
 800c43c:	4638      	mov	r0, r7
 800c43e:	4419      	add	r1, r3
 800c440:	f9b4 311a 	ldrsh.w	r3, [r4, #282]	@ 0x11a
 800c444:	b209      	sxth	r1, r1
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	2301      	movs	r3, #1
 800c44a:	f9b4 2116 	ldrsh.w	r2, [r4, #278]	@ 0x116
 800c44e:	f7f4 fcaf 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800c452:	4639      	mov	r1, r7
 800c454:	4628      	mov	r0, r5
    textBackground.setPosition(shadowBox.getRect().right(), 0, HAL::DISPLAY_WIDTH - shadowBox.getRect().right(), posterContainer.getHeight());
 800c456:	f504 770d 	add.w	r7, r4, #564	@ 0x234
 800c45a:	f006 fc79 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textBackground.setColor(Color::getColorFrom24BitRGB(0xFF, 0xFF, 0xFF));
 800c45e:	22ff      	movs	r2, #255	@ 0xff
 800c460:	4611      	mov	r1, r2
 800c462:	4610      	mov	r0, r2
 800c464:	f010 f930 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c468:	f8b4 31d8 	ldrh.w	r3, [r4, #472]	@ 0x1d8
 800c46c:	f8b4 11d4 	ldrh.w	r1, [r4, #468]	@ 0x1d4
    textBackground.setPosition(shadowBox.getRect().right(), 0, HAL::DISPLAY_WIDTH - shadowBox.getRect().right(), posterContainer.getHeight());
 800c470:	f9b4 211a 	ldrsh.w	r2, [r4, #282]	@ 0x11a
 800c474:	4419      	add	r1, r3
 800c476:	f8b8 3000 	ldrh.w	r3, [r8]
 800c47a:	f8c4 025c 	str.w	r0, [r4, #604]	@ 0x25c
 800c47e:	4638      	mov	r0, r7
 800c480:	b289      	uxth	r1, r1
 800c482:	9200      	str	r2, [sp, #0]
 800c484:	2200      	movs	r2, #0
 800c486:	1a5b      	subs	r3, r3, r1
 800c488:	b209      	sxth	r1, r1
 800c48a:	b21b      	sxth	r3, r3
 800c48c:	f7f4 fc90 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800c490:	4639      	mov	r1, r7
 800c492:	4628      	mov	r0, r5
    nextButton.setBitmaps(Bitmap(BITMAP_PRODUCT_PRESENTER_NEXT_ID), Bitmap(BITMAP_PRODUCT_PRESENTER_NEXT_PRESSED_ID));
 800c494:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 800c498:	f006 fc5a 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c49c:	236f      	movs	r3, #111	@ 0x6f
 800c49e:	aa03      	add	r2, sp, #12
 800c4a0:	a902      	add	r1, sp, #8
 800c4a2:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c4a6:	2370      	movs	r3, #112	@ 0x70
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c4ae:	f00a fe47 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    nextButton.setXY(HAL::DISPLAY_WIDTH - nextButton.getWidth(), 0);
 800c4b2:	f8b4 3208 	ldrh.w	r3, [r4, #520]	@ 0x208
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	f8b8 1000 	ldrh.w	r1, [r8]
 800c4bc:	2200      	movs	r2, #0
    nextButton.setAction(onButtonPressed);
 800c4be:	f504 680d 	add.w	r8, r4, #2256	@ 0x8d0
    nextButton.setXY(HAL::DISPLAY_WIDTH - nextButton.getWidth(), 0);
 800c4c2:	1ac9      	subs	r1, r1, r3
 800c4c4:	b209      	sxth	r1, r1
 800c4c6:	f7f4 fc8b 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    headlineText.setPosition(textBackground.getX() + BODY_TEXT_MARGIN, textBackground.getY() + 20, nextButton.getX() - textBackground.getX(), 30);
 800c4ca:	f8b4 1238 	ldrh.w	r1, [r4, #568]	@ 0x238
 800c4ce:	f8b4 3204 	ldrh.w	r3, [r4, #516]	@ 0x204
 800c4d2:	201e      	movs	r0, #30
 800c4d4:	f8b4 223a 	ldrh.w	r2, [r4, #570]	@ 0x23a
 800c4d8:	1a5b      	subs	r3, r3, r1
 800c4da:	3112      	adds	r1, #18
 800c4dc:	3214      	adds	r2, #20
 800c4de:	f8c4 8228 	str.w	r8, [r4, #552]	@ 0x228
 800c4e2:	b21b      	sxth	r3, r3
 800c4e4:	9000      	str	r0, [sp, #0]
 800c4e6:	b212      	sxth	r2, r2
 800c4e8:	4648      	mov	r0, r9
 800c4ea:	b209      	sxth	r1, r1
 800c4ec:	f7f4 fc60 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    headlineText.setColor(Color::getColorFrom24BitRGB(0x76, 0x76, 0x76));
 800c4f0:	2276      	movs	r2, #118	@ 0x76
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	f010 f8e7 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        rect.width = width;
 800c4fa:	f8d4 326c 	ldr.w	r3, [r4, #620]	@ 0x26c
 800c4fe:	4649      	mov	r1, r9
        this->color = color;
 800c500:	f8c4 028c 	str.w	r0, [r4, #652]	@ 0x28c
 800c504:	f8c4 32bc 	str.w	r3, [r4, #700]	@ 0x2bc
    bodyText.setPosition(BODY_TEXT_MARGIN, 0, textAreaContainer.getWidth() - 2 * BODY_TEXT_MARGIN, textAreaContainer.getWidth() - BODY_TEXT_MARGIN);
 800c508:	f504 7971 	add.w	r9, r4, #964	@ 0x3c4
 800c50c:	f8c4 02dc 	str.w	r0, [r4, #732]	@ 0x2dc
 800c510:	4628      	mov	r0, r5
 800c512:	f006 fc1d 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c516:	f504 712d 	add.w	r1, r4, #692	@ 0x2b4
 800c51a:	4628      	mov	r0, r5
 800c51c:	f006 fc18 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c520:	4639      	mov	r1, r7
 800c522:	4628      	mov	r0, r5
    textAreaContainer.setPosition(textBackground.getX(), nextButton.getRect().bottom(), textBackground.getWidth(), textBackground.getHeight() - nextButton.getRect().bottom());
 800c524:	f504 7741 	add.w	r7, r4, #772	@ 0x304
 800c528:	f006 fc12 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        return y + height;
 800c52c:	f8b4 320a 	ldrh.w	r3, [r4, #522]	@ 0x20a
 800c530:	f8b4 2206 	ldrh.w	r2, [r4, #518]	@ 0x206
 800c534:	4638      	mov	r0, r7
 800c536:	441a      	add	r2, r3
 800c538:	f8b4 323e 	ldrh.w	r3, [r4, #574]	@ 0x23e
 800c53c:	1a9b      	subs	r3, r3, r2
 800c53e:	b212      	sxth	r2, r2
 800c540:	b21b      	sxth	r3, r3
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	f9b4 323c 	ldrsh.w	r3, [r4, #572]	@ 0x23c
 800c548:	f9b4 1238 	ldrsh.w	r1, [r4, #568]	@ 0x238
 800c54c:	f7f4 fc30 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
    bodyText.setPosition(BODY_TEXT_MARGIN, 0, textAreaContainer.getWidth() - 2 * BODY_TEXT_MARGIN, textAreaContainer.getWidth() - BODY_TEXT_MARGIN);
 800c550:	f8b4 230c 	ldrh.w	r2, [r4, #780]	@ 0x30c
 800c554:	4648      	mov	r0, r9
 800c556:	2112      	movs	r1, #18
 800c558:	f1a2 0324 	sub.w	r3, r2, #36	@ 0x24
 800c55c:	3a12      	subs	r2, #18
 800c55e:	b212      	sxth	r2, r2
 800c560:	b21b      	sxth	r3, r3
 800c562:	9200      	str	r2, [sp, #0]
 800c564:	2200      	movs	r2, #0
 800c566:	f7f4 fc23 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800c56a:	f8d4 328c 	ldr.w	r3, [r4, #652]	@ 0x28c
    textAreaContainer.add(bodyText);
 800c56e:	4649      	mov	r1, r9
 800c570:	4638      	mov	r0, r7
 800c572:	f8c4 33ec 	str.w	r3, [r4, #1004]	@ 0x3ec
    bodyText.setFadeAnimationEndedAction(onFadeAnimationEnded);
 800c576:	f504 630f 	add.w	r3, r4, #2288	@ 0x8f0
        fadeAnimationEndedCallback = &callback;
 800c57a:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
    textAreaContainer.add(bodyText);
 800c57e:	f006 ff50 	bl	8013422 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
 800c582:	4639      	mov	r1, r7
 800c584:	4628      	mov	r0, r5
    mcuLoadValueTxt.setPosition(mcuLoadTxt.getRect().right(), mcuLoadTxt.getY(), 34, 14);
 800c586:	f104 07ac 	add.w	r7, r4, #172	@ 0xac
 800c58a:	f006 fbe1 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c58e:	4631      	mov	r1, r6
 800c590:	4628      	mov	r0, r5
    navigationBar.setBitmap(Bitmap(BITMAP_PRODUCT_PRESENTER_NAV_BAR_ID));
 800c592:	f204 4614 	addw	r6, r4, #1044	@ 0x414
 800c596:	f006 fbdb 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c59a:	236e      	movs	r3, #110	@ 0x6e
 800c59c:	a903      	add	r1, sp, #12
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c5a4:	f00a fed3 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800c5a8:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
    navigationBar.setXY(posterContainer.getX(), posterContainer.getRect().bottom());
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f8b4 211a 	ldrh.w	r2, [r4, #282]	@ 0x11a
 800c5b2:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 800c5b6:	441a      	add	r2, r3
 800c5b8:	b212      	sxth	r2, r2
 800c5ba:	f7f4 fc11 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 800c5be:	4631      	mov	r1, r6
 800c5c0:	4628      	mov	r0, r5
    gotoMenuButton.setBitmaps(Bitmap(BITMAP_PRODUCT_PRESENTER_MENU_BUTTON_ID), Bitmap(BITMAP_PRODUCT_PRESENTER_MENU_BUTTON_PRESSED_ID));
 800c5c2:	f104 0644 	add.w	r6, r4, #68	@ 0x44
 800c5c6:	f006 fbc3 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c5ca:	236c      	movs	r3, #108	@ 0x6c
 800c5cc:	aa03      	add	r2, sp, #12
 800c5ce:	a902      	add	r1, sp, #8
 800c5d0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c5d4:	236d      	movs	r3, #109	@ 0x6d
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c5dc:	f00a fdb0 	bl	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    gotoMenuButton.setXY(0, navigationBar.getY());
 800c5e0:	f9b4 241a 	ldrsh.w	r2, [r4, #1050]	@ 0x41a
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	f7f4 fbfa 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	4628      	mov	r0, r5
    mcuLoadTxt.setXY(8, 208 - mcuLoadTxt.getTypedText().getFont()->getFontHeight());
 800c5f0:	f104 0678 	add.w	r6, r4, #120	@ 0x78
 800c5f4:	f006 fbac 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c5f8:	f8b4 309e 	ldrh.w	r3, [r4, #158]	@ 0x9e
 800c5fc:	a803      	add	r0, sp, #12
 800c5fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c602:	f7f6 fb27 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 800c606:	6803      	ldr	r3, [r0, #0]
 800c608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c60a:	4798      	blx	r3
 800c60c:	f1c0 02d0 	rsb	r2, r0, #208	@ 0xd0
 800c610:	2108      	movs	r1, #8
 800c612:	4630      	mov	r0, r6
 800c614:	b212      	sxth	r2, r2
 800c616:	f7f4 fbe3 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
        return x + width;
 800c61a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	@ 0x7c
 800c61e:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
    mcuLoadValueTxt.setPosition(mcuLoadTxt.getRect().right(), mcuLoadTxt.getY(), 34, 14);
 800c622:	4638      	mov	r0, r7
 800c624:	4419      	add	r1, r3
 800c626:	230e      	movs	r3, #14
 800c628:	b209      	sxth	r1, r1
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	2322      	movs	r3, #34	@ 0x22
 800c62e:	f9b4 207e 	ldrsh.w	r2, [r4, #126]	@ 0x7e
 800c632:	f7f4 fbbd 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800c636:	4631      	mov	r1, r6
 800c638:	4628      	mov	r0, r5
    activateLanguageSelectorButton.setXY(419, 231);
 800c63a:	f604 069c 	addw	r6, r4, #2204	@ 0x89c
 800c63e:	f006 fb87 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c642:	4639      	mov	r1, r7
 800c644:	4628      	mov	r0, r5
 800c646:	f006 fb83 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800c64a:	22e7      	movs	r2, #231	@ 0xe7
 800c64c:	4630      	mov	r0, r6
 800c64e:	f240 11a3 	movw	r1, #419	@ 0x1a3
 800c652:	f7f4 fbc5 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 800c656:	4631      	mov	r1, r6
 800c658:	4628      	mov	r0, r5
 800c65a:	f8c4 88c4 	str.w	r8, [r4, #2244]	@ 0x8c4
 800c65e:	f006 fb77 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    languages[0] = GBR;
 800c662:	4b39      	ldr	r3, [pc, #228]	@ (800c748 <_ZN20ProductPresenterView11setupScreenEv+0x384>)
    inactiveLanguageButtons[3] = BITMAP_FLAG_UKR_INACTIVE_ID;
 800c664:	4a39      	ldr	r2, [pc, #228]	@ (800c74c <_ZN20ProductPresenterView11setupScreenEv+0x388>)
    languageSelector.addMenuElement(Bitmap(BITMAP_FLAG_GBR_ACTIVE_ID), Bitmap(BITMAP_FLAG_GBR_ACTIVE_ID));
 800c666:	f504 6688 	add.w	r6, r4, #1088	@ 0x440
    languages[0] = GBR;
 800c66a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
    languages[4] = NLD;
 800c66e:	2304      	movs	r3, #4
    languageSelector.addMenuElement(Bitmap(BITMAP_FLAG_GBR_ACTIVE_ID), Bitmap(BITMAP_FLAG_GBR_ACTIVE_ID));
 800c670:	a902      	add	r1, sp, #8
 800c672:	4630      	mov	r0, r6
    languages[4] = NLD;
 800c674:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
    inactiveLanguageButtons[0] = BITMAP_FLAG_GBR_INACTIVE_ID;
 800c678:	2338      	movs	r3, #56	@ 0x38
 800c67a:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
    inactiveLanguageButtons[3] = BITMAP_FLAG_UKR_INACTIVE_ID;
 800c67e:	4b34      	ldr	r3, [pc, #208]	@ (800c750 <_ZN20ProductPresenterView11setupScreenEv+0x38c>)
 800c680:	e9c4 2342 	strd	r2, r3, [r4, #264]	@ 0x108
 800c684:	2337      	movs	r3, #55	@ 0x37
    languageSelector.addMenuElement(Bitmap(BITMAP_FLAG_GBR_ACTIVE_ID), Bitmap(BITMAP_FLAG_GBR_ACTIVE_ID));
 800c686:	aa03      	add	r2, sp, #12
 800c688:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c68c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c690:	f7f4 fe42 	bl	8001318 <_ZN15CollapsibleMenu14addMenuElementERKN8touchgfx6BitmapES3_>
 800c694:	2335      	movs	r3, #53	@ 0x35
    languageSelector.addMenuElement(Bitmap(BITMAP_FLAG_DNK_ACTIVE_ID), Bitmap(BITMAP_FLAG_DNK_ACTIVE_ID));
 800c696:	aa03      	add	r2, sp, #12
 800c698:	a902      	add	r1, sp, #8
 800c69a:	4630      	mov	r0, r6
 800c69c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c6a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c6a4:	f7f4 fe38 	bl	8001318 <_ZN15CollapsibleMenu14addMenuElementERKN8touchgfx6BitmapES3_>
 800c6a8:	2339      	movs	r3, #57	@ 0x39
    languageSelector.addMenuElement(Bitmap(BITMAP_FLAG_JPN_ACTIVE_ID), Bitmap(BITMAP_FLAG_JPN_ACTIVE_ID));
 800c6aa:	aa03      	add	r2, sp, #12
 800c6ac:	a902      	add	r1, sp, #8
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c6b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c6b8:	f7f4 fe2e 	bl	8001318 <_ZN15CollapsibleMenu14addMenuElementERKN8touchgfx6BitmapES3_>
 800c6bc:	233d      	movs	r3, #61	@ 0x3d
    languageSelector.addMenuElement(Bitmap(BITMAP_FLAG_UKR_ACTIVE_ID), Bitmap(BITMAP_FLAG_UKR_ACTIVE_ID));
 800c6be:	aa03      	add	r2, sp, #12
 800c6c0:	a902      	add	r1, sp, #8
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c6c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c6cc:	f7f4 fe24 	bl	8001318 <_ZN15CollapsibleMenu14addMenuElementERKN8touchgfx6BitmapES3_>
 800c6d0:	233b      	movs	r3, #59	@ 0x3b
    languageSelector.addMenuElement(Bitmap(BITMAP_FLAG_NLD_ACTIVE_ID), Bitmap(BITMAP_FLAG_NLD_ACTIVE_ID));
 800c6d2:	aa03      	add	r2, sp, #12
 800c6d4:	a902      	add	r1, sp, #8
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c6dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c6e0:	f7f4 fe1a 	bl	8001318 <_ZN15CollapsibleMenu14addMenuElementERKN8touchgfx6BitmapES3_>
    languageSelector.setElementSpace(20);
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	2114      	movs	r1, #20
 800c6e8:	f7f4 fe2c 	bl	8001344 <_ZN15CollapsibleMenu15setElementSpaceEt>
    languageSelector.setExpandDirection(CollapsibleMenu::LEFT);
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	f7f4 fe2a 	bl	8001348 <_ZN15CollapsibleMenu18setExpandDirectionENS_15ExpandDirectionE>
    languageSelector.setStateChangedCallback(languageSelectorStateChanged);
 800c6f4:	f504 630e 	add.w	r3, r4, #2272	@ 0x8e0
    languageSelector.setTimeout(300);
 800c6f8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800c6fc:	4630      	mov	r0, r6
     *
     * @see GenericCallback
     */
    void setStateChangedCallback(touchgfx::GenericCallback<const CollapsibleMenu&, const bool>& callback)
    {
        stateChangedAction = &callback;
 800c6fe:	f8c4 3898 	str.w	r3, [r4, #2200]	@ 0x898
 800c702:	f7f4 fe9e 	bl	8001442 <_ZN15CollapsibleMenu10setTimeoutEi>
    languageSelector.finilizeInitialization();
 800c706:	4630      	mov	r0, r6
 800c708:	f7f4 fe21 	bl	800134e <_ZN15CollapsibleMenu22finilizeInitializationEv>
    languageSelector.setXY(469 - languageSelector.getWidth(), 227);
 800c70c:	f8b4 1448 	ldrh.w	r1, [r4, #1096]	@ 0x448
 800c710:	22e3      	movs	r2, #227	@ 0xe3
 800c712:	4630      	mov	r0, r6
 800c714:	f5c1 71ea 	rsb	r1, r1, #468	@ 0x1d4
 800c718:	3101      	adds	r1, #1
 800c71a:	b209      	sxth	r1, r1
 800c71c:	f7f4 fb60 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
    languageSelector.fadeOut(10);
 800c720:	4630      	mov	r0, r6
 800c722:	210a      	movs	r1, #10
 800c724:	f7f4 fe52 	bl	80013cc <_ZN15CollapsibleMenu7fadeOutEi>
 800c728:	4631      	mov	r1, r6
 800c72a:	4628      	mov	r0, r5
 800c72c:	f006 fb10 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    setLanguage();
 800c730:	4620      	mov	r0, r4
 800c732:	f7ff fbf3 	bl	800bf1c <_ZN20ProductPresenterView11setLanguageEv>
    animateToPoster(0, 1);
 800c736:	2201      	movs	r2, #1
 800c738:	2100      	movs	r1, #0
 800c73a:	4620      	mov	r0, r4
}
 800c73c:	b005      	add	sp, #20
 800c73e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    animateToPoster(0, 1);
 800c742:	f7ff bd5d 	b.w	800c200 <_ZN20ProductPresenterView15animateToPosterEii>
 800c746:	bf00      	nop
 800c748:	03020100 	.word	0x03020100
 800c74c:	003a0036 	.word	0x003a0036
 800c750:	003c003e 	.word	0x003c003e
 800c754:	20024e28 	.word	0x20024e28

0800c758 <_ZN20ProductPresenterView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE>:
    if (&button == &activateLanguageSelectorButton)
 800c758:	f600 029c 	addw	r2, r0, #2204	@ 0x89c
 800c75c:	4291      	cmp	r1, r2
{
 800c75e:	b510      	push	{r4, lr}
    if (&button == &activateLanguageSelectorButton)
 800c760:	d10b      	bne.n	800c77a <_ZN20ProductPresenterView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x22>
        if (languageSelector.isFadedOut())
 800c762:	f500 6488 	add.w	r4, r0, #1088	@ 0x440
 800c766:	4620      	mov	r0, r4
 800c768:	f7f4 fe47 	bl	80013fa <_ZN15CollapsibleMenu10isFadedOutEv>
 800c76c:	b1b8      	cbz	r0, 800c79e <_ZN20ProductPresenterView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x46>
            languageSelector.fadeInAndExpand();
 800c76e:	4620      	mov	r0, r4
 800c770:	210e      	movs	r1, #14
}
 800c772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            languageSelector.fadeInAndExpand();
 800c776:	f7f4 bfcd 	b.w	8001714 <_ZN15CollapsibleMenu15fadeInAndExpandEi>
    else if (&button == &nextButton)
 800c77a:	f500 7200 	add.w	r2, r0, #512	@ 0x200
 800c77e:	4291      	cmp	r1, r2
 800c780:	d10d      	bne.n	800c79e <_ZN20ProductPresenterView20buttonPressedHandlerERKN8touchgfx14AbstractButtonE+0x46>
        animateToPoster((selectedPoster + 1) % NUMBER_OF_POSTERS, 10);
 800c782:	f8d0 11cc 	ldr.w	r1, [r0, #460]	@ 0x1cc
 800c786:	2303      	movs	r3, #3
 800c788:	220a      	movs	r2, #10
 800c78a:	3101      	adds	r1, #1
 800c78c:	fb91 f3f3 	sdiv	r3, r1, r3
 800c790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
}
 800c794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        animateToPoster((selectedPoster + 1) % NUMBER_OF_POSTERS, 10);
 800c798:	1ac9      	subs	r1, r1, r3
 800c79a:	f7ff bd31 	b.w	800c200 <_ZN20ProductPresenterView15animateToPosterEii>
}
 800c79e:	bd10      	pop	{r4, pc}

0800c7a0 <_ZN20ProductPresenterViewD1Ev>:
ProductPresenterView::~ProductPresenterView()
 800c7a0:	4b08      	ldr	r3, [pc, #32]	@ (800c7c4 <_ZN20ProductPresenterViewD1Ev+0x24>)
 800c7a2:	f103 0208 	add.w	r2, r3, #8
 800c7a6:	3344      	adds	r3, #68	@ 0x44
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	6002      	str	r2, [r0, #0]
 800c7ae:	6403      	str	r3, [r0, #64]	@ 0x40
    Texts::setLanguage(GBR);
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	f7f4 fa9b 	bl	8000cec <_ZN8touchgfx5Texts11setLanguageEt>
}
 800c7b6:	f504 6088 	add.w	r0, r4, #1088	@ 0x440
 800c7ba:	f7f4 fb47 	bl	8000e4c <_ZN15CollapsibleMenuD1Ev>
 800c7be:	4620      	mov	r0, r4
 800c7c0:	bd10      	pop	{r4, pc}
 800c7c2:	bf00      	nop
 800c7c4:	08022654 	.word	0x08022654

0800c7c8 <_ZThn64_N20ProductPresenterViewD1Ev>:

class ProductPresenterView : public DemoView<ProductPresenterPresenter>
{
public:
    ProductPresenterView();
    virtual ~ProductPresenterView();
 800c7c8:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800c7cc:	f7ff bfe8 	b.w	800c7a0 <_ZN20ProductPresenterViewD1Ev>

0800c7d0 <_ZN20ProductPresenterViewD0Ev>:
ProductPresenterView::~ProductPresenterView()
 800c7d0:	b510      	push	{r4, lr}
 800c7d2:	4604      	mov	r4, r0
}
 800c7d4:	f7ff ffe4 	bl	800c7a0 <_ZN20ProductPresenterViewD1Ev>
 800c7d8:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f012 f9a2 	bl	801eb26 <_ZdlPvj>
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	bd10      	pop	{r4, pc}

0800c7e6 <_ZThn64_N20ProductPresenterViewD0Ev>:
 800c7e6:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 800c7ea:	f7ff bff1 	b.w	800c7d0 <_ZN20ProductPresenterViewD0Ev>

0800c7ee <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800c7ee:	4770      	bx	lr

0800c7f0 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	4770      	bx	lr

0800c7f4 <ft5336_TS_DetectTouch>:
{
 800c7f4:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 800c7f6:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800c7f8:	2102      	movs	r1, #2
 800c7fa:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 800c7fc:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800c800:	f000 fa3e 	bl	800cc80 <TS_IO_Read>
 800c804:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 800c808:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c80c:	f003 030f 	and.w	r3, r3, #15
 800c810:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800c814:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c818:	2b05      	cmp	r3, #5
 800c81a:	d901      	bls.n	800c820 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 800c81c:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800c820:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c824:	4b03      	ldr	r3, [pc, #12]	@ (800c834 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 800c826:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800c82a:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 800c82c:	2200      	movs	r2, #0
 800c82e:	709a      	strb	r2, [r3, #2]
}
 800c830:	b002      	add	sp, #8
 800c832:	bd10      	pop	{r4, pc}
 800c834:	200018ba 	.word	0x200018ba

0800c838 <ft5336_TS_GetXY>:
{
 800c838:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800c83c:	4c2b      	ldr	r4, [pc, #172]	@ (800c8ec <ft5336_TS_GetXY+0xb4>)
{
 800c83e:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 800c840:	f04f 0800 	mov.w	r8, #0
{
 800c844:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800c846:	78a3      	ldrb	r3, [r4, #2]
 800c848:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
 800c84a:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800c84e:	429a      	cmp	r2, r3
 800c850:	d945      	bls.n	800c8de <ft5336_TS_GetXY+0xa6>
    switch(ft5336_handle.currActiveTouchIdx)
 800c852:	2b09      	cmp	r3, #9
 800c854:	d846      	bhi.n	800c8e4 <ft5336_TS_GetXY+0xac>
 800c856:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c85a:	005b      	lsls	r3, r3, #1
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	1d19      	adds	r1, r3, #4
 800c860:	f103 0a03 	add.w	sl, r3, #3
 800c864:	f103 0906 	add.w	r9, r3, #6
 800c868:	3305      	adds	r3, #5
 800c86a:	b2c9      	uxtb	r1, r1
 800c86c:	fa5f fa8a 	uxtb.w	sl, sl
 800c870:	fa5f f989 	uxtb.w	r9, r9
 800c874:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800c878:	b2c6      	uxtb	r6, r0
 800c87a:	4630      	mov	r0, r6
 800c87c:	f000 fa00 	bl	800cc80 <TS_IO_Read>
 800c880:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800c884:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800c888:	4651      	mov	r1, sl
 800c88a:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800c88c:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800c88e:	f000 f9f7 	bl	800cc80 <TS_IO_Read>
 800c892:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800c896:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c898:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800c89c:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c89e:	88a2      	ldrh	r2, [r4, #4]
 800c8a0:	021b      	lsls	r3, r3, #8
 800c8a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c8a6:	4313      	orrs	r3, r2
    *X = coord;
 800c8a8:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c8aa:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800c8ac:	f000 f9e8 	bl	800cc80 <TS_IO_Read>
 800c8b0:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800c8b4:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800c8b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800c8ba:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800c8bc:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800c8be:	f000 f9df 	bl	800cc80 <TS_IO_Read>
 800c8c2:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c8c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c8ca:	88a2      	ldrh	r2, [r4, #4]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
 800c8d6:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800c8d8:	78a3      	ldrb	r3, [r4, #2]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	70a3      	strb	r3, [r4, #2]
}
 800c8de:	b002      	add	sp, #8
 800c8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800c8e4:	46c1      	mov	r9, r8
 800c8e6:	46c2      	mov	sl, r8
 800c8e8:	4641      	mov	r1, r8
 800c8ea:	e7c5      	b.n	800c878 <ft5336_TS_GetXY+0x40>
 800c8ec:	200018ba 	.word	0x200018ba

0800c8f0 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	21a4      	movs	r1, #164	@ 0xa4
 800c8f4:	b2c0      	uxtb	r0, r0
 800c8f6:	f000 b9b1 	b.w	800cc5c <TS_IO_Write>

0800c8fa <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	21a4      	movs	r1, #164	@ 0xa4
 800c8fe:	b2c0      	uxtb	r0, r0
 800c900:	f000 b9ac 	b.w	800cc5c <TS_IO_Write>

0800c904 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 800c904:	f7ff bff9 	b.w	800c8fa <ft5336_TS_DisableIT>

0800c908 <ft5336_Init>:
{
 800c908:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 800c90a:	4c05      	ldr	r4, [pc, #20]	@ (800c920 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 800c90c:	20c8      	movs	r0, #200	@ 0xc8
 800c90e:	f000 f9cd 	bl	800ccac <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800c912:	7823      	ldrb	r3, [r4, #0]
 800c914:	b91b      	cbnz	r3, 800c91e <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800c916:	f000 f99f 	bl	800cc58 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800c91a:	2301      	movs	r3, #1
 800c91c:	7023      	strb	r3, [r4, #0]
}
 800c91e:	bd10      	pop	{r4, pc}
 800c920:	200018ba 	.word	0x200018ba

0800c924 <ft5336_TS_ClearIT>:
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
 800c924:	4770      	bx	lr
	...

0800c928 <ft5336_ReadID>:
{
 800c928:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 800c92a:	2300      	movs	r3, #0
  return(ft5336_handle.i2cInitialized);
 800c92c:	4c0f      	ldr	r4, [pc, #60]	@ (800c96c <ft5336_ReadID+0x44>)
{
 800c92e:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 800c930:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800c934:	7823      	ldrb	r3, [r4, #0]
 800c936:	b91b      	cbnz	r3, 800c940 <ft5336_ReadID+0x18>
    TS_IO_Init();
 800c938:	f000 f98e 	bl	800cc58 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800c93c:	2301      	movs	r3, #1
 800c93e:	7023      	strb	r3, [r4, #0]
{
 800c940:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800c942:	b2ed      	uxtb	r5, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800c944:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800c946:	21a8      	movs	r1, #168	@ 0xa8
 800c948:	4628      	mov	r0, r5
 800c94a:	f000 f999 	bl	800cc80 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800c94e:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800c952:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 800c956:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c95a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800c95c:	d001      	beq.n	800c962 <ft5336_ReadID+0x3a>
 800c95e:	2b51      	cmp	r3, #81	@ 0x51
 800c960:	d1f0      	bne.n	800c944 <ft5336_ReadID+0x1c>
  return (ucReadId);
 800c962:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800c966:	b003      	add	sp, #12
 800c968:	bd30      	pop	{r4, r5, pc}
 800c96a:	bf00      	nop
 800c96c:	200018ba 	.word	0x200018ba

0800c970 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 800c970:	2300      	movs	r3, #0
{
 800c972:	b513      	push	{r0, r1, r4, lr}
 800c974:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800c976:	b2c0      	uxtb	r0, r0
 800c978:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 800c97a:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800c97e:	f000 f97f 	bl	800cc80 <TS_IO_Read>
 800c982:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 800c986:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c98a:	6023      	str	r3, [r4, #0]
}
 800c98c:	b002      	add	sp, #8
 800c98e:	bd10      	pop	{r4, pc}

0800c990 <ft5336_TS_GetTouchInfo>:
{
 800c990:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c994:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800c996:	4b1d      	ldr	r3, [pc, #116]	@ (800ca0c <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
 800c998:	2400      	movs	r4, #0
{
 800c99a:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800c99c:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 800c99e:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800c9a2:	428b      	cmp	r3, r1
 800c9a4:	d92c      	bls.n	800ca00 <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
 800c9a6:	2909      	cmp	r1, #9
 800c9a8:	d82d      	bhi.n	800ca06 <ft5336_TS_GetTouchInfo+0x76>
 800c9aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800c9ae:	004c      	lsls	r4, r1, #1
 800c9b0:	b2e4      	uxtb	r4, r4
 800c9b2:	1ce1      	adds	r1, r4, #3
 800c9b4:	1de7      	adds	r7, r4, #7
 800c9b6:	3408      	adds	r4, #8
 800c9b8:	b2c9      	uxtb	r1, r1
 800c9ba:	b2ff      	uxtb	r7, r7
 800c9bc:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800c9be:	fa5f f880 	uxtb.w	r8, r0
 800c9c2:	4640      	mov	r0, r8
 800c9c4:	f000 f95c 	bl	800cc80 <TS_IO_Read>
 800c9c8:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800c9cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800c9d0:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800c9d2:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800c9d4:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800c9d6:	099b      	lsrs	r3, r3, #6
 800c9d8:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800c9da:	f000 f951 	bl	800cc80 <TS_IO_Read>
 800c9de:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800c9e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800c9ea:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800c9ec:	f000 f948 	bl	800cc80 <TS_IO_Read>
 800c9f0:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800c9f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c9f8:	0912      	lsrs	r2, r2, #4
 800c9fa:	f002 0204 	and.w	r2, r2, #4
 800c9fe:	602a      	str	r2, [r5, #0]
}
 800ca00:	b002      	add	sp, #8
 800ca02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800ca06:	4627      	mov	r7, r4
 800ca08:	4621      	mov	r1, r4
 800ca0a:	e7d8      	b.n	800c9be <ft5336_TS_GetTouchInfo+0x2e>
 800ca0c:	200018ba 	.word	0x200018ba

0800ca10 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800ca10:	b570      	push	{r4, r5, r6, lr}
 800ca12:	b08a      	sub	sp, #40	@ 0x28
 800ca14:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800ca16:	f001 fd81 	bl	800e51c <HAL_I2C_GetState>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	f040 8096 	bne.w	800cb4c <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ca20:	4b4b      	ldr	r3, [pc, #300]	@ (800cb50 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 800ca22:	2600      	movs	r6, #0
 800ca24:	4c4b      	ldr	r4, [pc, #300]	@ (800cb54 <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ca26:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 800ca28:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800ca2a:	bf0c      	ite	eq
 800ca2c:	4a4a      	ldreq	r2, [pc, #296]	@ (800cb58 <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800ca2e:	4a4b      	ldrne	r2, [pc, #300]	@ (800cb5c <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ca30:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800ca32:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 800ca34:	4a4a      	ldr	r2, [pc, #296]	@ (800cb60 <I2Cx_Init+0x150>)
 800ca36:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800ca3a:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800ca3e:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800ca42:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ca46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ca48:	d143      	bne.n	800cad2 <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ca4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800ca4e:	2080      	movs	r0, #128	@ 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800ca50:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ca54:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ca56:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 800ca5a:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ca5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca60:	9301      	str	r3, [sp, #4]
 800ca62:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800ca64:	2312      	movs	r3, #18
 800ca66:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800ca6a:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ca6c:	483d      	ldr	r0, [pc, #244]	@ (800cb64 <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800ca6e:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ca72:	f001 f923 	bl	800dcbc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800ca76:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ca7a:	a905      	add	r1, sp, #20
 800ca7c:	4839      	ldr	r0, [pc, #228]	@ (800cb64 <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800ca7e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ca80:	f001 f91c 	bl	800dcbc <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800ca84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800ca86:	4632      	mov	r2, r6
 800ca88:	210f      	movs	r1, #15
 800ca8a:	2048      	movs	r0, #72	@ 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800ca8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca90:	6423      	str	r3, [r4, #64]	@ 0x40
 800ca92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca98:	9302      	str	r3, [sp, #8]
 800ca9a:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800ca9c:	6a23      	ldr	r3, [r4, #32]
 800ca9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800caa2:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800caa4:	6a23      	ldr	r3, [r4, #32]
 800caa6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800caaa:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800caac:	f000 fd62 	bl	800d574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800cab0:	2048      	movs	r0, #72	@ 0x48
 800cab2:	f000 fd91 	bl	800d5d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800cab6:	2049      	movs	r0, #73	@ 0x49
 800cab8:	4632      	mov	r2, r6
 800caba:	210f      	movs	r1, #15
 800cabc:	f000 fd5a 	bl	800d574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800cac0:	2049      	movs	r0, #73	@ 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800cac2:	f000 fd89 	bl	800d5d8 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 800cac6:	4628      	mov	r0, r5
  }
}
 800cac8:	b00a      	add	sp, #40	@ 0x28
 800caca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
 800cace:	f001 bb02 	b.w	800e0d6 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800cad2:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800cad6:	f44f 7280 	mov.w	r2, #256	@ 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800cada:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800cadc:	4822      	ldr	r0, [pc, #136]	@ (800cb68 <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800cade:	6323      	str	r3, [r4, #48]	@ 0x30
 800cae0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 800cae2:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800cae4:	f003 0302 	and.w	r3, r3, #2
 800cae8:	9303      	str	r3, [sp, #12]
 800caea:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800caec:	2312      	movs	r3, #18
 800caee:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800caf2:	2304      	movs	r3, #4
 800caf4:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800caf8:	a905      	add	r1, sp, #20
 800cafa:	f001 f8df 	bl	800dcbc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800cafe:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800cb02:	a905      	add	r1, sp, #20
 800cb04:	4818      	ldr	r0, [pc, #96]	@ (800cb68 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800cb06:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800cb08:	f001 f8d8 	bl	800dcbc <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800cb0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800cb0e:	4632      	mov	r2, r6
 800cb10:	210f      	movs	r1, #15
 800cb12:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800cb14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cb18:	6423      	str	r3, [r4, #64]	@ 0x40
 800cb1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cb20:	9304      	str	r3, [sp, #16]
 800cb22:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800cb24:	6a23      	ldr	r3, [r4, #32]
 800cb26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cb2a:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800cb2c:	6a23      	ldr	r3, [r4, #32]
 800cb2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cb32:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800cb34:	f000 fd1e 	bl	800d574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800cb38:	201f      	movs	r0, #31
 800cb3a:	f000 fd4d 	bl	800d5d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800cb3e:	2020      	movs	r0, #32
 800cb40:	4632      	mov	r2, r6
 800cb42:	210f      	movs	r1, #15
 800cb44:	f000 fd16 	bl	800d574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800cb48:	2020      	movs	r0, #32
 800cb4a:	e7ba      	b.n	800cac2 <I2Cx_Init+0xb2>
}
 800cb4c:	b00a      	add	sp, #40	@ 0x28
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	200018c0 	.word	0x200018c0
 800cb54:	40023800 	.word	0x40023800
 800cb58:	40005c00 	.word	0x40005c00
 800cb5c:	40005400 	.word	0x40005400
 800cb60:	40912732 	.word	0x40912732
 800cb64:	40021c00 	.word	0x40021c00
 800cb68:	40020400 	.word	0x40020400

0800cb6c <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800cb6c:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800cb6e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 800cb72:	b085      	sub	sp, #20
 800cb74:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800cb76:	9402      	str	r4, [sp, #8]
 800cb78:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800cb7c:	9401      	str	r4, [sp, #4]
 800cb7e:	9c08      	ldr	r4, [sp, #32]
 800cb80:	9400      	str	r4, [sp, #0]
 800cb82:	f001 fb13 	bl	800e1ac <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 800cb86:	4604      	mov	r4, r0
 800cb88:	b128      	cbz	r0, 800cb96 <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f001 faf5 	bl	800e17a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800cb90:	4628      	mov	r0, r5
 800cb92:	f7ff ff3d 	bl	800ca10 <I2Cx_Init>
}
 800cb96:	4620      	mov	r0, r4
 800cb98:	b005      	add	sp, #20
 800cb9a:	bd30      	pop	{r4, r5, pc}

0800cb9c <I2Cx_ReadMultiple>:
{
 800cb9c:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800cb9e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 800cba2:	b085      	sub	sp, #20
 800cba4:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800cba6:	9402      	str	r4, [sp, #8]
 800cba8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800cbac:	9401      	str	r4, [sp, #4]
 800cbae:	9c08      	ldr	r4, [sp, #32]
 800cbb0:	9400      	str	r4, [sp, #0]
 800cbb2:	f001 fbd5 	bl	800e360 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	b128      	cbz	r0, 800cbc6 <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 800cbba:	4628      	mov	r0, r5
 800cbbc:	f001 fadd 	bl	800e17a <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f7ff ff25 	bl	800ca10 <I2Cx_Init>
}
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	b005      	add	sp, #20
 800cbca:	bd30      	pop	{r4, r5, pc}

0800cbcc <BSP_LED_Init>:
{
 800cbcc:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 800cbce:	4604      	mov	r4, r0
{
 800cbd0:	b087      	sub	sp, #28
  if (Led == LED1)
 800cbd2:	b9c8      	cbnz	r0, 800cc08 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 800cbd4:	4b0d      	ldr	r3, [pc, #52]	@ (800cc0c <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800cbd6:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800cbd8:	a901      	add	r1, sp, #4
 800cbda:	480d      	ldr	r0, [pc, #52]	@ (800cc10 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 800cbdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cbde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cbe2:	631a      	str	r2, [r3, #48]	@ 0x30
 800cbe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800cbf4:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800cbf6:	2303      	movs	r3, #3
 800cbf8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800cbfa:	f001 f85f 	bl	800dcbc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 800cbfe:	4622      	mov	r2, r4
 800cc00:	4629      	mov	r1, r5
 800cc02:	4803      	ldr	r0, [pc, #12]	@ (800cc10 <BSP_LED_Init+0x44>)
 800cc04:	f001 f93e 	bl	800de84 <HAL_GPIO_WritePin>
}
 800cc08:	b007      	add	sp, #28
 800cc0a:	bd30      	pop	{r4, r5, pc}
 800cc0c:	40023800 	.word	0x40023800
 800cc10:	40022000 	.word	0x40022000

0800cc14 <BSP_LED_On>:
  if (Led == LED1)	/* Switch On LED connected to GPIO */
 800cc14:	b920      	cbnz	r0, 800cc20 <BSP_LED_On+0xc>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 800cc16:	2201      	movs	r2, #1
 800cc18:	2102      	movs	r1, #2
 800cc1a:	4802      	ldr	r0, [pc, #8]	@ (800cc24 <BSP_LED_On+0x10>)
 800cc1c:	f001 b932 	b.w	800de84 <HAL_GPIO_WritePin>
}
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	40022000 	.word	0x40022000

0800cc28 <BSP_LED_Off>:
  if (Led == LED1) /* Switch Off LED connected to GPIO */
 800cc28:	4602      	mov	r2, r0
 800cc2a:	b918      	cbnz	r0, 800cc34 <BSP_LED_Off+0xc>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 800cc2c:	2102      	movs	r1, #2
 800cc2e:	4802      	ldr	r0, [pc, #8]	@ (800cc38 <BSP_LED_Off+0x10>)
 800cc30:	f001 b928 	b.w	800de84 <HAL_GPIO_WritePin>
}
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	40022000 	.word	0x40022000

0800cc3c <BSP_LED_Toggle>:
  if (Led == LED1)	/* Toggle LED connected to GPIO */
 800cc3c:	b918      	cbnz	r0, 800cc46 <BSP_LED_Toggle+0xa>
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 800cc3e:	2102      	movs	r1, #2
 800cc40:	4801      	ldr	r0, [pc, #4]	@ (800cc48 <BSP_LED_Toggle+0xc>)
 800cc42:	f001 b924 	b.w	800de8e <HAL_GPIO_TogglePin>
}
 800cc46:	4770      	bx	lr
 800cc48:	40022000 	.word	0x40022000

0800cc4c <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 800cc4c:	4801      	ldr	r0, [pc, #4]	@ (800cc54 <AUDIO_IO_Init+0x8>)
 800cc4e:	f7ff bedf 	b.w	800ca10 <I2Cx_Init>
 800cc52:	bf00      	nop
 800cc54:	200018c0 	.word	0x200018c0

0800cc58 <TS_IO_Init>:

/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
 800cc58:	f7ff bff8 	b.w	800cc4c <AUDIO_IO_Init>

0800cc5c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800cc5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc5e:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800cc62:	f10d 020f 	add.w	r2, sp, #15
 800cc66:	2301      	movs	r3, #1
 800cc68:	9200      	str	r2, [sp, #0]
 800cc6a:	460a      	mov	r2, r1
 800cc6c:	4601      	mov	r1, r0
 800cc6e:	9301      	str	r3, [sp, #4]
 800cc70:	4802      	ldr	r0, [pc, #8]	@ (800cc7c <TS_IO_Write+0x20>)
 800cc72:	f7ff ff7b 	bl	800cb6c <I2Cx_WriteMultiple>
}
 800cc76:	b005      	add	sp, #20
 800cc78:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc7c:	200018c0 	.word	0x200018c0

0800cc80 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800cc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 800cc82:	2300      	movs	r3, #0
{
 800cc84:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800cc86:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
 800cc8a:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800cc8e:	2301      	movs	r3, #1
 800cc90:	9100      	str	r1, [sp, #0]
 800cc92:	4601      	mov	r1, r0
 800cc94:	9301      	str	r3, [sp, #4]
 800cc96:	4804      	ldr	r0, [pc, #16]	@ (800cca8 <TS_IO_Read+0x28>)
 800cc98:	f7ff ff80 	bl	800cb9c <I2Cx_ReadMultiple>

  return read_value;
}
 800cc9c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800cca0:	b005      	add	sp, #20
 800cca2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cca6:	bf00      	nop
 800cca8:	200018c0 	.word	0x200018c0

0800ccac <TS_IO_Delay>:
/**
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
 800ccac:	f000 bc3e 	b.w	800d52c <HAL_Delay>

0800ccb0 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 800ccb0:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ccb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 800ccb6:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800ccb8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 800ccbc:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ccbe:	920c      	str	r2, [sp, #48]	@ 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800ccc0:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800ccc2:	910f      	str	r1, [sp, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 800ccc4:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800ccc6:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ccc8:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 800ccca:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 800cccc:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ccce:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 800ccd0:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800ccd2:	480b      	ldr	r0, [pc, #44]	@ (800cd00 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 800ccd4:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ccd8:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ccdc:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 800cce0:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800cce2:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 800cce4:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800cce6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800ccea:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800ccec:	466a      	mov	r2, sp
 800ccee:	f001 ff78 	bl	800ebe2 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 800ccf2:	3800      	subs	r0, #0
 800ccf4:	bf18      	it	ne
 800ccf6:	2001      	movne	r0, #1
 800ccf8:	b015      	add	sp, #84	@ 0x54
 800ccfa:	f85d fb04 	ldr.w	pc, [sp], #4
 800ccfe:	bf00      	nop
 800cd00:	20001968 	.word	0x20001968

0800cd04 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800cd04:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800cd06:	f44f 7380 	mov.w	r3, #256	@ 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800cd0a:	b095      	sub	sp, #84	@ 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cd0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd10:	4817      	ldr	r0, [pc, #92]	@ (800cd70 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800cd12:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800cd14:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cd16:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800cd18:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800cd1a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800cd1c:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800cd20:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 800cd22:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800cd24:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800cd26:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cd2a:	f001 ff15 	bl	800eb58 <HAL_QSPI_Command>
 800cd2e:	b9e0      	cbnz	r0, 800cd6a <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 800cd30:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 800cd32:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800cd34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800cd38:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cd3a:	480d      	ldr	r0, [pc, #52]	@ (800cd70 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 800cd3c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 800cd40:	2310      	movs	r3, #16
 800cd42:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800cd46:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cd48:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800cd4a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800cd4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cd52:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800cd54:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cd56:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cd5a:	f001 ff42 	bl	800ebe2 <HAL_QSPI_AutoPolling>
 800cd5e:	3800      	subs	r0, #0
 800cd60:	bf18      	it	ne
 800cd62:	2001      	movne	r0, #1
}
 800cd64:	b015      	add	sp, #84	@ 0x54
 800cd66:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 800cd6a:	2001      	movs	r0, #1
 800cd6c:	e7fa      	b.n	800cd64 <QSPI_WriteEnable.constprop.0+0x60>
 800cd6e:	bf00      	nop
 800cd70:	20001968 	.word	0x20001968

0800cd74 <BSP_QSPI_EnableMemoryMappedMode>:
{
 800cd74:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800cd76:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 800cd7a:	b091      	sub	sp, #68	@ 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800cd7c:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800cd80:	480e      	ldr	r0, [pc, #56]	@ (800cdbc <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800cd82:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800cd84:	23eb      	movs	r3, #235	@ 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800cd86:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800cd88:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800cd8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800cd8e:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800cd90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd94:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800cd96:	2300      	movs	r3, #0
 800cd98:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800cd9c:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800cd9e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800cda0:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800cda2:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800cda4:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800cda8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800cdac:	f001 ff6a 	bl	800ec84 <HAL_QSPI_MemoryMapped>
}
 800cdb0:	3800      	subs	r0, #0
 800cdb2:	bf18      	it	ne
 800cdb4:	2001      	movne	r0, #1
 800cdb6:	b011      	add	sp, #68	@ 0x44
 800cdb8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdbc:	20001968 	.word	0x20001968

0800cdc0 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 800cdc0:	4b45      	ldr	r3, [pc, #276]	@ (800ced8 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800cdc2:	2101      	movs	r1, #1
  QSPI_CLK_ENABLE();
 800cdc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdc6:	f042 0202 	orr.w	r2, r2, #2
{
 800cdca:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 800cdcc:	639a      	str	r2, [r3, #56]	@ 0x38
{
 800cdce:	b08d      	sub	sp, #52	@ 0x34
  QSPI_CLK_ENABLE();
 800cdd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800cdd2:	2409      	movs	r4, #9
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800cdd4:	4d41      	ldr	r5, [pc, #260]	@ (800cedc <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800cdd6:	2704      	movs	r7, #4
  QSPI_CLK_ENABLE();
 800cdd8:	f002 0202 	and.w	r2, r2, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800cddc:	2600      	movs	r6, #0
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800cdde:	4628      	mov	r0, r5
  QSPI_CLK_ENABLE();
 800cde0:	9200      	str	r2, [sp, #0]
 800cde2:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 800cde4:	699a      	ldr	r2, [r3, #24]
 800cde6:	f042 0202 	orr.w	r2, r2, #2
 800cdea:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 800cdec:	699a      	ldr	r2, [r3, #24]
 800cdee:	f022 0202 	bic.w	r2, r2, #2
 800cdf2:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 800cdf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdf6:	f042 0202 	orr.w	r2, r2, #2
 800cdfa:	631a      	str	r2, [r3, #48]	@ 0x30
 800cdfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdfe:	f002 0202 	and.w	r2, r2, #2
 800ce02:	9201      	str	r2, [sp, #4]
 800ce04:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800ce06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce08:	f042 0202 	orr.w	r2, r2, #2
 800ce0c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce10:	f002 0202 	and.w	r2, r2, #2
 800ce14:	9202      	str	r2, [sp, #8]
 800ce16:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 800ce18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce1a:	f042 0208 	orr.w	r2, r2, #8
 800ce1e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce22:	f002 0208 	and.w	r2, r2, #8
 800ce26:	9203      	str	r2, [sp, #12]
 800ce28:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 800ce2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce2c:	f042 0208 	orr.w	r2, r2, #8
 800ce30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce34:	f002 0208 	and.w	r2, r2, #8
 800ce38:	9204      	str	r2, [sp, #16]
 800ce3a:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 800ce3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce3e:	f042 0210 	orr.w	r2, r2, #16
 800ce42:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce46:	f002 0210 	and.w	r2, r2, #16
 800ce4a:	9205      	str	r2, [sp, #20]
 800ce4c:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 800ce4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce50:	f042 0208 	orr.w	r2, r2, #8
 800ce54:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ce56:	2240      	movs	r2, #64	@ 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 800ce58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce5a:	f003 0308 	and.w	r3, r3, #8
 800ce5e:	9306      	str	r3, [sp, #24]
 800ce60:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ce62:	2302      	movs	r3, #2
 800ce64:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800ce6e:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800ce70:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800ce72:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800ce74:	f000 ff22 	bl	800dcbc <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800ce78:	a907      	add	r1, sp, #28
 800ce7a:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800ce7c:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800ce7e:	9609      	str	r6, [sp, #36]	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800ce80:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800ce82:	f000 ff1b 	bl	800dcbc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800ce86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800ce8a:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800ce8c:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800ce8e:	441d      	add	r5, r3
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800ce90:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800ce92:	4628      	mov	r0, r5
 800ce94:	f000 ff12 	bl	800dcbc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 800ce98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800ce9c:	a907      	add	r1, sp, #28
 800ce9e:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 800cea0:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800cea2:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800cea4:	f000 ff0a 	bl	800dcbc <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800cea8:	a907      	add	r1, sp, #28
 800ceaa:	480d      	ldr	r0, [pc, #52]	@ (800cee0 <BSP_QSPI_MspInit+0x120>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 800ceac:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800ceae:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800ceb0:	f000 ff04 	bl	800dcbc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800ceb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800ceb8:	a907      	add	r1, sp, #28
 800ceba:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800cebc:	940b      	str	r4, [sp, #44]	@ 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800cebe:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800cec0:	f000 fefc 	bl	800dcbc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800cec4:	4632      	mov	r2, r6
 800cec6:	210f      	movs	r1, #15
 800cec8:	205c      	movs	r0, #92	@ 0x5c
 800ceca:	f000 fb53 	bl	800d574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800cece:	205c      	movs	r0, #92	@ 0x5c
 800ced0:	f000 fb82 	bl	800d5d8 <HAL_NVIC_EnableIRQ>
}
 800ced4:	b00d      	add	sp, #52	@ 0x34
 800ced6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced8:	40023800 	.word	0x40023800
 800cedc:	40020400 	.word	0x40020400
 800cee0:	40021000 	.word	0x40021000

0800cee4 <BSP_QSPI_Init>:
{ 
 800cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 800cee6:	4c49      	ldr	r4, [pc, #292]	@ (800d00c <BSP_QSPI_Init+0x128>)
{ 
 800cee8:	b091      	sub	sp, #68	@ 0x44
  QSPIHandle.Instance = QUADSPI;
 800ceea:	4b49      	ldr	r3, [pc, #292]	@ (800d010 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800ceec:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 800ceee:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800cef0:	f001 fe1f 	bl	800eb32 <HAL_QSPI_DeInit>
 800cef4:	4605      	mov	r5, r0
 800cef6:	b110      	cbz	r0, 800cefe <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 800cef8:	2001      	movs	r0, #1
}
 800cefa:	b011      	add	sp, #68	@ 0x44
 800cefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 800cefe:	4601      	mov	r1, r0
 800cf00:	4620      	mov	r0, r4
 800cf02:	f7ff ff5d 	bl	800cdc0 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 800cf06:	2601      	movs	r6, #1
 800cf08:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf0a:	f04f 7780 	mov.w	r7, #16777216	@ 0x1000000
 800cf0e:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800cf12:	2310      	movs	r3, #16
 800cf14:	60e3      	str	r3, [r4, #12]
 800cf16:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800cf1a:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800cf1e:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800cf20:	3b01      	subs	r3, #1
 800cf22:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 800cf24:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 800cf28:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800cf2c:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800cf30:	f001 fdac 	bl	800ea8c <HAL_QSPI_Init>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d1df      	bne.n	800cef8 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800cf38:	f44f 7580 	mov.w	r5, #256	@ 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 800cf3c:	2366      	movs	r3, #102	@ 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 800cf3e:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cf40:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.DummyCycles       = 0;
 800cf44:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cf46:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800cf48:	900f      	str	r0, [sp, #60]	@ 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800cf4a:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 800cf4c:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800cf4e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800cf52:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cf56:	4620      	mov	r0, r4
 800cf58:	f001 fdfe 	bl	800eb58 <HAL_QSPI_Command>
 800cf5c:	b108      	cbz	r0, 800cf62 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 800cf5e:	2004      	movs	r0, #4
 800cf60:	e7cb      	b.n	800cefa <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 800cf62:	2399      	movs	r3, #153	@ 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cf64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf68:	a902      	add	r1, sp, #8
 800cf6a:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 800cf6c:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cf6e:	f001 fdf3 	bl	800eb58 <HAL_QSPI_Command>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d1f3      	bne.n	800cf5e <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800cf76:	f241 3088 	movw	r0, #5000	@ 0x1388
 800cf7a:	f7ff fe99 	bl	800ccb0 <QSPI_AutoPollingMemReady.constprop.0>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d1ed      	bne.n	800cf5e <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800cf82:	2385      	movs	r3, #133	@ 0x85
  s_command.DummyCycles       = 0;
 800cf84:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cf86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf8a:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800cf8c:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800cf8e:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800cf90:	970b      	str	r7, [sp, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800cf92:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800cf96:	e9cd 600c 	strd	r6, r0, [sp, #48]	@ 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800cf9a:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f001 fdda 	bl	800eb58 <HAL_QSPI_Command>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d1da      	bne.n	800cf5e <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cfa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfac:	f10d 0107 	add.w	r1, sp, #7
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f001 ff51 	bl	800ee58 <HAL_QSPI_Receive>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d1d1      	bne.n	800cf5e <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800cfba:	f7ff fea3 	bl	800cd04 <QSPI_WriteEnable.constprop.0>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d1cd      	bne.n	800cf5e <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 800cfc2:	2381      	movs	r3, #129	@ 0x81
 800cfc4:	22f0      	movs	r2, #240	@ 0xf0
 800cfc6:	9302      	str	r3, [sp, #8]
 800cfc8:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800cfcc:	210a      	movs	r1, #10
 800cfce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cfd2:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cfd6:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800cfd8:	f003 030f 	and.w	r3, r3, #15
 800cfdc:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cfe0:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800cfe2:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cfe4:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800cfe8:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cfec:	f001 fdb4 	bl	800eb58 <HAL_QSPI_Command>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d1b4      	bne.n	800cf5e <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cff8:	f10d 0107 	add.w	r1, sp, #7
 800cffc:	4620      	mov	r0, r4
 800cffe:	f001 fecc 	bl	800ed9a <HAL_QSPI_Transmit>
 800d002:	2800      	cmp	r0, #0
 800d004:	f43f af79 	beq.w	800cefa <BSP_QSPI_Init+0x16>
 800d008:	e7a9      	b.n	800cf5e <BSP_QSPI_Init+0x7a>
 800d00a:	bf00      	nop
 800d00c:	20001968 	.word	0x20001968
 800d010:	a0001000 	.word	0xa0001000

0800d014 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800d014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800d018:	4c21      	ldr	r4, [pc, #132]	@ (800d0a0 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800d01a:	2710      	movs	r7, #16
 800d01c:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 800d01e:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800d022:	19e5      	adds	r5, r4, r7
 800d024:	4621      	mov	r1, r4
{
 800d026:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800d028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d02c:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800d02e:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800d032:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800d036:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800d03a:	f002 fcd6 	bl	800f9ea <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800d03e:	4630      	mov	r0, r6
 800d040:	f000 fa74 	bl	800d52c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800d044:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800d046:	4621      	mov	r1, r4
 800d048:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d04c:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800d04e:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800d052:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800d056:	f002 fcc8 	bl	800f9ea <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800d05a:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800d05c:	4621      	mov	r1, r4
 800d05e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d062:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800d064:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 800d068:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 800d06a:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800d06e:	f002 fcbc 	bl	800f9ea <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800d072:	f44f 7308 	mov.w	r3, #544	@ 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800d076:	4621      	mov	r1, r4
 800d078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800d07c:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800d07e:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800d080:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 800d082:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800d084:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 800d088:	9b01      	ldr	r3, [sp, #4]
 800d08a:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800d08c:	f002 fcad 	bl	800f9ea <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800d090:	4649      	mov	r1, r9
 800d092:	4628      	mov	r0, r5
}
 800d094:	b003      	add	sp, #12
 800d096:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800d09a:	f002 bcc5 	b.w	800fa28 <HAL_SDRAM_ProgramRefreshRate>
 800d09e:	bf00      	nop
 800d0a0:	200019b4 	.word	0x200019b4

0800d0a4 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800d0a4:	4b55      	ldr	r3, [pc, #340]	@ (800d1fc <BSP_SDRAM_MspInit+0x158>)
 800d0a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0a8:	f042 0201 	orr.w	r2, r2, #1
{  
 800d0ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 800d0ae:	639a      	str	r2, [r3, #56]	@ 0x38
{  
 800d0b0:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 800d0b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
{  
 800d0b4:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800d0b6:	a909      	add	r1, sp, #36	@ 0x24
 800d0b8:	4851      	ldr	r0, [pc, #324]	@ (800d200 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800d0ba:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800d0be:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 800d0c0:	9201      	str	r2, [sp, #4]
 800d0c2:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 800d0c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0c6:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800d0ca:	631a      	str	r2, [r3, #48]	@ 0x30
 800d0cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0ce:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 800d0d2:	9202      	str	r2, [sp, #8]
 800d0d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d0d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0d8:	f042 0204 	orr.w	r2, r2, #4
 800d0dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800d0de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0e0:	f002 0204 	and.w	r2, r2, #4
 800d0e4:	9203      	str	r2, [sp, #12]
 800d0e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d0e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0ea:	f042 0208 	orr.w	r2, r2, #8
 800d0ee:	631a      	str	r2, [r3, #48]	@ 0x30
 800d0f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0f2:	f002 0208 	and.w	r2, r2, #8
 800d0f6:	9204      	str	r2, [sp, #16]
 800d0f8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d0fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0fc:	f042 0210 	orr.w	r2, r2, #16
 800d100:	631a      	str	r2, [r3, #48]	@ 0x30
 800d102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d104:	f002 0210 	and.w	r2, r2, #16
 800d108:	9205      	str	r2, [sp, #20]
 800d10a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d10c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d10e:	f042 0220 	orr.w	r2, r2, #32
 800d112:	631a      	str	r2, [r3, #48]	@ 0x30
 800d114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d116:	f002 0220 	and.w	r2, r2, #32
 800d11a:	9206      	str	r2, [sp, #24]
 800d11c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d11e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d124:	631a      	str	r2, [r3, #48]	@ 0x30
 800d126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d128:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800d12c:	9207      	str	r2, [sp, #28]
 800d12e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d132:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d136:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800d138:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d13c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d140:	9308      	str	r3, [sp, #32]
 800d142:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800d144:	2302      	movs	r3, #2
 800d146:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800d14a:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800d14c:	230c      	movs	r3, #12
 800d14e:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800d150:	2308      	movs	r3, #8
 800d152:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800d154:	f000 fdb2 	bl	800dcbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800d158:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800d15c:	a909      	add	r1, sp, #36	@ 0x24
 800d15e:	4829      	ldr	r0, [pc, #164]	@ (800d204 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800d160:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800d162:	f000 fdab 	bl	800dcbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800d166:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800d16a:	a909      	add	r1, sp, #36	@ 0x24
 800d16c:	4826      	ldr	r0, [pc, #152]	@ (800d208 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800d16e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800d170:	f000 fda4 	bl	800dcbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800d174:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800d178:	a909      	add	r1, sp, #36	@ 0x24
 800d17a:	4824      	ldr	r0, [pc, #144]	@ (800d20c <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800d17c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800d17e:	f000 fd9d 	bl	800dcbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800d182:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800d186:	a909      	add	r1, sp, #36	@ 0x24
 800d188:	4821      	ldr	r0, [pc, #132]	@ (800d210 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800d18a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800d18c:	f000 fd96 	bl	800dcbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800d190:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800d192:	a909      	add	r1, sp, #36	@ 0x24
 800d194:	481f      	ldr	r0, [pc, #124]	@ (800d214 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800d196:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800d198:	f000 fd90 	bl	800dcbc <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800d19c:	4b1e      	ldr	r3, [pc, #120]	@ (800d218 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800d19e:	2280      	movs	r2, #128	@ 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800d1a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800d1a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800d1a8:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800d1aa:	675c      	str	r4, [r3, #116]	@ 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 800d1ac:	661c      	str	r4, [r3, #96]	@ 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800d1ae:	e9c3 4212 	strd	r4, r2, [r3, #72]	@ 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800d1b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d1b6:	e9c3 1214 	strd	r1, r2, [r3, #80]	@ 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800d1ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800d1be:	e9c3 0216 	strd	r0, r2, [r3, #88]	@ 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800d1c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800d1c6:	e9c3 2419 	strd	r2, r4, [r3, #100]	@ 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800d1ca:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800d1cc:	e9c3 241b 	strd	r2, r4, [r3, #108]	@ 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800d1d0:	4a12      	ldr	r2, [pc, #72]	@ (800d21c <BSP_SDRAM_MspInit+0x178>)
 800d1d2:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800d1d6:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800d1d8:	6335      	str	r5, [r6, #48]	@ 0x30
 800d1da:	67de      	str	r6, [r3, #124]	@ 0x7c
  HAL_DMA_DeInit(&dma_handle);
 800d1dc:	f000 fafa 	bl	800d7d4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	f000 fa79 	bl	800d6d8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800d1e6:	4622      	mov	r2, r4
 800d1e8:	210f      	movs	r1, #15
 800d1ea:	2038      	movs	r0, #56	@ 0x38
 800d1ec:	f000 f9c2 	bl	800d574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800d1f0:	2038      	movs	r0, #56	@ 0x38
 800d1f2:	f000 f9f1 	bl	800d5d8 <HAL_NVIC_EnableIRQ>
}
 800d1f6:	b00e      	add	sp, #56	@ 0x38
 800d1f8:	bd70      	pop	{r4, r5, r6, pc}
 800d1fa:	bf00      	nop
 800d1fc:	40023800 	.word	0x40023800
 800d200:	40020800 	.word	0x40020800
 800d204:	40020c00 	.word	0x40020c00
 800d208:	40021000 	.word	0x40021000
 800d20c:	40021400 	.word	0x40021400
 800d210:	40021800 	.word	0x40021800
 800d214:	40021c00 	.word	0x40021c00
 800d218:	200019b4 	.word	0x200019b4
 800d21c:	40026410 	.word	0x40026410

0800d220 <BSP_SDRAM_Init>:
{ 
 800d220:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800d222:	4c1b      	ldr	r4, [pc, #108]	@ (800d290 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 800d224:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800d226:	4b1b      	ldr	r3, [pc, #108]	@ (800d294 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 800d228:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800d22a:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800d22c:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800d230:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 800d232:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800d234:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 800d236:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 800d23a:	e9c4 3129 	strd	r3, r1, [r4, #164]	@ 0xa4
  Timing.RPDelay              = 2;
 800d23e:	e9c4 332d 	strd	r3, r3, [r4, #180]	@ 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800d242:	2340      	movs	r3, #64	@ 0x40
  Timing.RowCycleDelay        = 7;
 800d244:	e9c4 212b 	strd	r2, r1, [r4, #172]	@ 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800d248:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800d24c:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800d24e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800d252:	e9c4 310a 	strd	r3, r1, [r4, #40]	@ 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800d256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800d25a:	63a1      	str	r1, [r4, #56]	@ 0x38
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800d25c:	e9c4 530c 	strd	r5, r3, [r4, #48]	@ 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800d260:	f104 0510 	add.w	r5, r4, #16
 800d264:	4628      	mov	r0, r5
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800d266:	e9c4 1105 	strd	r1, r1, [r4, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800d26a:	f7ff ff1b 	bl	800d0a4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800d26e:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 800d272:	4628      	mov	r0, r5
 800d274:	4c08      	ldr	r4, [pc, #32]	@ (800d298 <BSP_SDRAM_Init+0x78>)
 800d276:	f002 fb98 	bl	800f9aa <HAL_SDRAM_Init>
 800d27a:	3800      	subs	r0, #0
 800d27c:	bf18      	it	ne
 800d27e:	2001      	movne	r0, #1
 800d280:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800d282:	f240 6003 	movw	r0, #1539	@ 0x603
 800d286:	f7ff fec5 	bl	800d014 <BSP_SDRAM_Initialization_sequence>
}
 800d28a:	7820      	ldrb	r0, [r4, #0]
 800d28c:	bd38      	pop	{r3, r4, r5, pc}
 800d28e:	bf00      	nop
 800d290:	200019b4 	.word	0x200019b4
 800d294:	a0000140 	.word	0xa0000140
 800d298:	2000003c 	.word	0x2000003c

0800d29c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800d29c:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 800d29e:	4c0b      	ldr	r4, [pc, #44]	@ (800d2cc <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800d2a0:	4d0b      	ldr	r5, [pc, #44]	@ (800d2d0 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
 800d2a2:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800d2a4:	2070      	movs	r0, #112	@ 0x70
 800d2a6:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
 800d2a8:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800d2aa:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800d2ac:	686b      	ldr	r3, [r5, #4]
 800d2ae:	2070      	movs	r0, #112	@ 0x70
 800d2b0:	4798      	blx	r3
 800d2b2:	2851      	cmp	r0, #81	@ 0x51
 800d2b4:	d108      	bne.n	800d2c8 <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
 800d2b6:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
 800d2b8:	2070      	movs	r0, #112	@ 0x70
    tsDriver = &ft5336_ts_drv;
 800d2ba:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
 800d2bc:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800d2be:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
 800d2c0:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
 800d2c2:	4798      	blx	r3
  uint8_t status = TS_OK;
 800d2c4:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 800d2c6:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
 800d2c8:	2003      	movs	r0, #3
 800d2ca:	e7fc      	b.n	800d2c6 <BSP_TS_Init+0x2a>
 800d2cc:	20001ad4 	.word	0x20001ad4
 800d2d0:	20000014 	.word	0x20000014

0800d2d4 <BSP_TS_Get_GestureId>:
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
  uint32_t gestureId = 0;
 800d2d4:	2300      	movs	r3, #0
{
 800d2d6:	b513      	push	{r0, r1, r4, lr}
  uint32_t gestureId = 0;
 800d2d8:	9301      	str	r3, [sp, #4]
{
 800d2da:	4604      	mov	r4, r0
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800d2dc:	4b12      	ldr	r3, [pc, #72]	@ (800d328 <BSP_TS_Get_GestureId+0x54>)
 800d2de:	a901      	add	r1, sp, #4
 800d2e0:	7a18      	ldrb	r0, [r3, #8]
 800d2e2:	f7ff fb45 	bl	800c970 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	2b18      	cmp	r3, #24
 800d2ea:	d012      	beq.n	800d312 <BSP_TS_Get_GestureId+0x3e>
 800d2ec:	d806      	bhi.n	800d2fc <BSP_TS_Get_GestureId+0x28>
 800d2ee:	2b10      	cmp	r3, #16
 800d2f0:	d011      	beq.n	800d316 <BSP_TS_Get_GestureId+0x42>
 800d2f2:	2b14      	cmp	r3, #20
 800d2f4:	d011      	beq.n	800d31a <BSP_TS_Get_GestureId+0x46>
 800d2f6:	b143      	cbz	r3, 800d30a <BSP_TS_Get_GestureId+0x36>
 800d2f8:	2001      	movs	r0, #1
 800d2fa:	e008      	b.n	800d30e <BSP_TS_Get_GestureId+0x3a>
 800d2fc:	2b40      	cmp	r3, #64	@ 0x40
 800d2fe:	d00e      	beq.n	800d31e <BSP_TS_Get_GestureId+0x4a>
 800d300:	2b49      	cmp	r3, #73	@ 0x49
 800d302:	d00e      	beq.n	800d322 <BSP_TS_Get_GestureId+0x4e>
 800d304:	2b1c      	cmp	r3, #28
 800d306:	d1f7      	bne.n	800d2f8 <BSP_TS_Get_GestureId+0x24>
 800d308:	2304      	movs	r3, #4
  uint8_t  ts_status = TS_OK;
 800d30a:	2000      	movs	r0, #0
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
      break;
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800d30c:	62a3      	str	r3, [r4, #40]	@ 0x28
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 800d30e:	b002      	add	sp, #8
 800d310:	bd10      	pop	{r4, pc}
  switch(gestureId)
 800d312:	2303      	movs	r3, #3
 800d314:	e7f9      	b.n	800d30a <BSP_TS_Get_GestureId+0x36>
 800d316:	2301      	movs	r3, #1
 800d318:	e7f7      	b.n	800d30a <BSP_TS_Get_GestureId+0x36>
 800d31a:	2302      	movs	r3, #2
 800d31c:	e7f5      	b.n	800d30a <BSP_TS_Get_GestureId+0x36>
 800d31e:	2305      	movs	r3, #5
 800d320:	e7f3      	b.n	800d30a <BSP_TS_Get_GestureId+0x36>
 800d322:	2306      	movs	r3, #6
 800d324:	e7f1      	b.n	800d30a <BSP_TS_Get_GestureId+0x36>
 800d326:	bf00      	nop
 800d328:	20001ad4 	.word	0x20001ad4

0800d32c <BSP_TS_GetState>:
{
 800d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800d330:	4c55      	ldr	r4, [pc, #340]	@ (800d488 <BSP_TS_GetState+0x15c>)
{
 800d332:	b097      	sub	sp, #92	@ 0x5c
  uint32_t weight = 0;
 800d334:	2300      	movs	r3, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800d336:	6862      	ldr	r2, [r4, #4]
{
 800d338:	9004      	str	r0, [sp, #16]
  uint32_t event = 0;
 800d33a:	9309      	str	r3, [sp, #36]	@ 0x24
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800d33c:	6912      	ldr	r2, [r2, #16]
 800d33e:	7a20      	ldrb	r0, [r4, #8]
  uint32_t area = 0;
 800d340:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800d344:	4790      	blx	r2
 800d346:	9b04      	ldr	r3, [sp, #16]
 800d348:	7018      	strb	r0, [r3, #0]
  if(TS_State->touchDetected)
 800d34a:	b1b8      	cbz	r0, 800d37c <BSP_TS_GetState+0x50>
 800d34c:	f103 0615 	add.w	r6, r3, #21
 800d350:	f103 0b02 	add.w	fp, r3, #2
 800d354:	ab0d      	add	r3, sp, #52	@ 0x34
 800d356:	f104 0a0c 	add.w	sl, r4, #12
 800d35a:	f104 0920 	add.w	r9, r4, #32
 800d35e:	ad0a      	add	r5, sp, #40	@ 0x28
 800d360:	9303      	str	r3, [sp, #12]
 800d362:	af10      	add	r7, sp, #64	@ 0x40
    for(index=0; index < TS_State->touchDetected; index++)
 800d364:	2300      	movs	r3, #0
 800d366:	f10d 084c 	add.w	r8, sp, #76	@ 0x4c
 800d36a:	9305      	str	r3, [sp, #20]
 800d36c:	9b04      	ldr	r3, [sp, #16]
 800d36e:	9a05      	ldr	r2, [sp, #20]
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	4293      	cmp	r3, r2
 800d374:	d805      	bhi.n	800d382 <BSP_TS_GetState+0x56>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800d376:	9804      	ldr	r0, [sp, #16]
 800d378:	f7ff ffac 	bl	800d2d4 <BSP_TS_Get_GestureId>
}
 800d37c:	b017      	add	sp, #92	@ 0x5c
 800d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800d382:	6863      	ldr	r3, [r4, #4]
 800d384:	4642      	mov	r2, r8
 800d386:	4639      	mov	r1, r7
 800d388:	7a20      	ldrb	r0, [r4, #8]
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 800d38e:	7a63      	ldrb	r3, [r4, #9]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d13e      	bne.n	800d412 <BSP_TS_GetState+0xe6>
        x[index] = brute_x[index];
 800d394:	883b      	ldrh	r3, [r7, #0]
        y[index] = brute_y[index];
 800d396:	9a03      	ldr	r2, [sp, #12]
        x[index] = brute_x[index];
 800d398:	802b      	strh	r3, [r5, #0]
        y[index] = brute_y[index];
 800d39a:	f8b8 3000 	ldrh.w	r3, [r8]
 800d39e:	8013      	strh	r3, [r2, #0]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800d3a0:	f835 cb02 	ldrh.w	ip, [r5], #2
 800d3a4:	f8da 2000 	ldr.w	r2, [sl]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800d3a8:	9903      	ldr	r1, [sp, #12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800d3aa:	b293      	uxth	r3, r2
 800d3ac:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800d3ae:	f8d9 0000 	ldr.w	r0, [r9]
 800d3b2:	f831 2b02 	ldrh.w	r2, [r1], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800d3b6:	bf8c      	ite	hi
 800d3b8:	ebac 0303 	subhi.w	r3, ip, r3
 800d3bc:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800d3c0:	9103      	str	r1, [sp, #12]
 800d3c2:	4282      	cmp	r2, r0
 800d3c4:	b281      	uxth	r1, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800d3c6:	7a20      	ldrb	r0, [r4, #8]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800d3c8:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800d3ca:	bf8c      	ite	hi
 800d3cc:	1a51      	subhi	r1, r2, r1
 800d3ce:	1a89      	subls	r1, r1, r2
 800d3d0:	b289      	uxth	r1, r1
      if ((x_diff + y_diff) > 5)
 800d3d2:	440b      	add	r3, r1
 800d3d4:	2b05      	cmp	r3, #5
        _x[index] = x[index];
 800d3d6:	bfc4      	itt	gt
 800d3d8:	f8ca c000 	strgt.w	ip, [sl]
        _y[index] = y[index];
 800d3dc:	f8c9 2000 	strgt.w	r2, [r9]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800d3e0:	2870      	cmp	r0, #112	@ 0x70
 800d3e2:	d12d      	bne.n	800d440 <BSP_TS_GetState+0x114>
        TS_State->touchX[index] = x[index];
 800d3e4:	f8ab c000 	strh.w	ip, [fp]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800d3e8:	ab09      	add	r3, sp, #36	@ 0x24
        TS_State->touchY[index] = y[index];
 800d3ea:	f8ab 200a 	strh.w	r2, [fp, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800d3ee:	9905      	ldr	r1, [sp, #20]
 800d3f0:	aa07      	add	r2, sp, #28
 800d3f2:	9300      	str	r3, [sp, #0]
 800d3f4:	ab08      	add	r3, sp, #32
 800d3f6:	f7ff facb 	bl	800c990 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 800d3fa:	9b07      	ldr	r3, [sp, #28]
 800d3fc:	f806 3f01 	strb.w	r3, [r6, #1]!
      TS_State->touchArea[index]   = area;
 800d400:	9b08      	ldr	r3, [sp, #32]
 800d402:	72b3      	strb	r3, [r6, #10]
      switch(event)
 800d404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d406:	2b03      	cmp	r3, #3
 800d408:	d82a      	bhi.n	800d460 <BSP_TS_GetState+0x134>
 800d40a:	e8df f003 	tbb	[pc, r3]
 800d40e:	3627      	.short	0x3627
 800d410:	3a38      	.short	0x3a38
      if(tsOrientation & TS_SWAP_X)
 800d412:	0799      	lsls	r1, r3, #30
        x[index] = 4096 - brute_x[index];
 800d414:	bf42      	ittt	mi
 800d416:	883a      	ldrhmi	r2, [r7, #0]
 800d418:	f5c2 5280 	rsbmi	r2, r2, #4096	@ 0x1000
 800d41c:	802a      	strhmi	r2, [r5, #0]
      if(tsOrientation & TS_SWAP_Y)
 800d41e:	075a      	lsls	r2, r3, #29
        y[index] = 4096 - brute_y[index];
 800d420:	bf41      	itttt	mi
 800d422:	f8b8 2000 	ldrhmi.w	r2, [r8]
 800d426:	9903      	ldrmi	r1, [sp, #12]
 800d428:	f5c2 5280 	rsbmi	r2, r2, #4096	@ 0x1000
 800d42c:	800a      	strhmi	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_XY)
 800d42e:	071b      	lsls	r3, r3, #28
 800d430:	d5b6      	bpl.n	800d3a0 <BSP_TS_GetState+0x74>
        y[index] = brute_x[index];
 800d432:	883b      	ldrh	r3, [r7, #0]
 800d434:	9a03      	ldr	r2, [sp, #12]
 800d436:	8013      	strh	r3, [r2, #0]
        x[index] = brute_y[index];
 800d438:	f8b8 3000 	ldrh.w	r3, [r8]
 800d43c:	802b      	strh	r3, [r5, #0]
 800d43e:	e7af      	b.n	800d3a0 <BSP_TS_GetState+0x74>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800d440:	f8da 2000 	ldr.w	r2, [sl]
 800d444:	8823      	ldrh	r3, [r4, #0]
 800d446:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800d448:	8862      	ldrh	r2, [r4, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800d44a:	0b1b      	lsrs	r3, r3, #12
 800d44c:	f8ab 3000 	strh.w	r3, [fp]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800d450:	f8d9 3000 	ldr.w	r3, [r9]
 800d454:	435a      	muls	r2, r3
 800d456:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800d45a:	e7c5      	b.n	800d3e8 <BSP_TS_GetState+0xbc>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800d45c:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800d45e:	7173      	strb	r3, [r6, #5]
    for(index=0; index < TS_State->touchDetected; index++)
 800d460:	9b05      	ldr	r3, [sp, #20]
 800d462:	f10b 0b02 	add.w	fp, fp, #2
 800d466:	f10a 0a04 	add.w	sl, sl, #4
 800d46a:	f109 0904 	add.w	r9, r9, #4
 800d46e:	3301      	adds	r3, #1
 800d470:	3702      	adds	r7, #2
 800d472:	f108 0802 	add.w	r8, r8, #2
 800d476:	9305      	str	r3, [sp, #20]
 800d478:	e778      	b.n	800d36c <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800d47a:	2302      	movs	r3, #2
 800d47c:	e7ef      	b.n	800d45e <BSP_TS_GetState+0x132>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800d47e:	2303      	movs	r3, #3
 800d480:	e7ed      	b.n	800d45e <BSP_TS_GetState+0x132>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800d482:	2300      	movs	r3, #0
 800d484:	e7eb      	b.n	800d45e <BSP_TS_GetState+0x132>
 800d486:	bf00      	nop
 800d488:	20001ad4 	.word	0x20001ad4

0800d48c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d48c:	490f      	ldr	r1, [pc, #60]	@ (800d4cc <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d48e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d490:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800d494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800d49c:	4b0c      	ldr	r3, [pc, #48]	@ (800d4d0 <SystemInit+0x44>)
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	f042 0201 	orr.w	r2, r2, #1
 800d4a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800d4a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 800d4ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d4b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d4b4:	4a07      	ldr	r2, [pc, #28]	@ (800d4d4 <SystemInit+0x48>)
 800d4b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d4be:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d4c0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d4c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d4c6:	608b      	str	r3, [r1, #8]
#endif
}
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	e000ed00 	.word	0xe000ed00
 800d4d0:	40023800 	.word	0x40023800
 800d4d4:	24003010 	.word	0x24003010

0800d4d8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800d4d8:	4770      	bx	lr
	...

0800d4dc <HAL_Init>:
{
 800d4dc:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 800d4de:	4b09      	ldr	r3, [pc, #36]	@ (800d504 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d4e0:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4e8:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d4f0:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d4f2:	f000 f82d 	bl	800d550 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800d4f6:	2001      	movs	r0, #1
 800d4f8:	f7f3 f8a2 	bl	8000640 <HAL_InitTick>
  HAL_MspInit();
 800d4fc:	f7ff ffec 	bl	800d4d8 <HAL_MspInit>
}
 800d500:	2000      	movs	r0, #0
 800d502:	bd08      	pop	{r3, pc}
 800d504:	40023c00 	.word	0x40023c00

0800d508 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800d508:	4a03      	ldr	r2, [pc, #12]	@ (800d518 <HAL_IncTick+0x10>)
 800d50a:	4b04      	ldr	r3, [pc, #16]	@ (800d51c <HAL_IncTick+0x14>)
 800d50c:	6811      	ldr	r1, [r2, #0]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	440b      	add	r3, r1
 800d512:	6013      	str	r3, [r2, #0]
}
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	20001b08 	.word	0x20001b08
 800d51c:	20000044 	.word	0x20000044

0800d520 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800d520:	4b01      	ldr	r3, [pc, #4]	@ (800d528 <HAL_GetTick+0x8>)
 800d522:	6818      	ldr	r0, [r3, #0]
}
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	20001b08 	.word	0x20001b08

0800d52c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d530:	f7ff fff6 	bl	800d520 <HAL_GetTick>
 800d534:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d536:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800d538:	bf1e      	ittt	ne
 800d53a:	4b04      	ldrne	r3, [pc, #16]	@ (800d54c <HAL_Delay+0x20>)
 800d53c:	781b      	ldrbne	r3, [r3, #0]
 800d53e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800d540:	f7ff ffee 	bl	800d520 <HAL_GetTick>
 800d544:	1b43      	subs	r3, r0, r5
 800d546:	42a3      	cmp	r3, r4
 800d548:	d3fa      	bcc.n	800d540 <HAL_Delay+0x14>
  {
  }
}
 800d54a:	bd38      	pop	{r3, r4, r5, pc}
 800d54c:	20000044 	.word	0x20000044

0800d550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d550:	4907      	ldr	r1, [pc, #28]	@ (800d570 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d552:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d554:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d556:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d55a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800d55e:	0412      	lsls	r2, r2, #16
 800d560:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800d56c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800d56e:	4770      	bx	lr
 800d570:	e000ed00 	.word	0xe000ed00

0800d574 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d574:	4b16      	ldr	r3, [pc, #88]	@ (800d5d0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d576:	b530      	push	{r4, r5, lr}
 800d578:	68dc      	ldr	r4, [r3, #12]
 800d57a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d57e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d582:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d584:	2b04      	cmp	r3, #4
 800d586:	bf28      	it	cs
 800d588:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d58a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d58c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d590:	bf8c      	ite	hi
 800d592:	3c03      	subhi	r4, #3
 800d594:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d596:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800d59a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d59c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d5a0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d5a4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d5a8:	fa03 f304 	lsl.w	r3, r3, r4
 800d5ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d5b4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800d5b6:	db06      	blt.n	800d5c6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5b8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800d5bc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800d5c0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800d5c4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5c6:	f000 000f 	and.w	r0, r0, #15
 800d5ca:	4a02      	ldr	r2, [pc, #8]	@ (800d5d4 <HAL_NVIC_SetPriority+0x60>)
 800d5cc:	5413      	strb	r3, [r2, r0]
 800d5ce:	e7f9      	b.n	800d5c4 <HAL_NVIC_SetPriority+0x50>
 800d5d0:	e000ed00 	.word	0xe000ed00
 800d5d4:	e000ed14 	.word	0xe000ed14

0800d5d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	db07      	blt.n	800d5ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d5dc:	0941      	lsrs	r1, r0, #5
 800d5de:	2301      	movs	r3, #1
 800d5e0:	f000 001f 	and.w	r0, r0, #31
 800d5e4:	4a02      	ldr	r2, [pc, #8]	@ (800d5f0 <HAL_NVIC_EnableIRQ+0x18>)
 800d5e6:	4083      	lsls	r3, r0
 800d5e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop
 800d5f0:	e000e100 	.word	0xe000e100

0800d5f4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	db0c      	blt.n	800d612 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d5f8:	0943      	lsrs	r3, r0, #5
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f000 001f 	and.w	r0, r0, #31
 800d600:	4904      	ldr	r1, [pc, #16]	@ (800d614 <HAL_NVIC_DisableIRQ+0x20>)
 800d602:	3320      	adds	r3, #32
 800d604:	4082      	lsls	r2, r0
 800d606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d60a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d60e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800d612:	4770      	bx	lr
 800d614:	e000e100 	.word	0xe000e100

0800d618 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800d618:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800d61c:	4b04      	ldr	r3, [pc, #16]	@ (800d630 <HAL_MPU_Disable+0x18>)
 800d61e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d620:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d624:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800d626:	2200      	movs	r2, #0
 800d628:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	e000ed00 	.word	0xe000ed00

0800d634 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800d634:	4b06      	ldr	r3, [pc, #24]	@ (800d650 <HAL_MPU_Enable+0x1c>)
 800d636:	f040 0001 	orr.w	r0, r0, #1
 800d63a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800d63e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d640:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d644:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800d646:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d64a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800d64e:	4770      	bx	lr
 800d650:	e000ed00 	.word	0xe000ed00

0800d654 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800d654:	7843      	ldrb	r3, [r0, #1]
 800d656:	4a14      	ldr	r2, [pc, #80]	@ (800d6a8 <HAL_MPU_ConfigRegion+0x54>)
{
 800d658:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800d65a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 800d65e:	7801      	ldrb	r1, [r0, #0]
 800d660:	b1e9      	cbz	r1, 800d69e <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800d662:	6843      	ldr	r3, [r0, #4]
 800d664:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d668:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d66a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d66c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d66e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d672:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d674:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d676:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d67a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d67c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d680:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d682:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d686:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d688:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d68c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d68e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d692:	7a01      	ldrb	r1, [r0, #8]
 800d694:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d698:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800d69c:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800d69e:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 800d6a2:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 800d6a6:	e7f9      	b.n	800d69c <HAL_MPU_ConfigRegion+0x48>
 800d6a8:	e000ed00 	.word	0xe000ed00

0800d6ac <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d6ac:	6803      	ldr	r3, [r0, #0]
{
 800d6ae:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d6b0:	2018      	movs	r0, #24
 800d6b2:	b2d9      	uxtb	r1, r3
 800d6b4:	3910      	subs	r1, #16
 800d6b6:	fbb1 f0f0 	udiv	r0, r1, r0
{
 800d6ba:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d6bc:	4c05      	ldr	r4, [pc, #20]	@ (800d6d4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800d6be:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d6c0:	5c20      	ldrb	r0, [r4, r0]
 800d6c2:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d6c4:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 800d6c8:	f020 0003 	bic.w	r0, r0, #3
 800d6cc:	bf88      	it	hi
 800d6ce:	3004      	addhi	r0, #4
 800d6d0:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800d6d2:	bd10      	pop	{r4, pc}
 800d6d4:	080226bc 	.word	0x080226bc

0800d6d8 <HAL_DMA_Init>:
{
 800d6d8:	b570      	push	{r4, r5, r6, lr}
 800d6da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d6dc:	f7ff ff20 	bl	800d520 <HAL_GetTick>
 800d6e0:	4605      	mov	r5, r0
  if(hdma == NULL)
 800d6e2:	2c00      	cmp	r4, #0
 800d6e4:	d060      	beq.n	800d7a8 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 800d6e6:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 800d6e8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800d6ea:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800d6f4:	6813      	ldr	r3, [r2, #0]
 800d6f6:	f023 0301 	bic.w	r3, r3, #1
 800d6fa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d6fc:	6822      	ldr	r2, [r4, #0]
 800d6fe:	6813      	ldr	r3, [r2, #0]
 800d700:	07d8      	lsls	r0, r3, #31
 800d702:	d42e      	bmi.n	800d762 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 800d704:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d706:	4832      	ldr	r0, [pc, #200]	@ (800d7d0 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d708:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d70a:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d70c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d710:	432b      	orrs	r3, r5
 800d712:	68e5      	ldr	r5, [r4, #12]
 800d714:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d716:	6925      	ldr	r5, [r4, #16]
 800d718:	432b      	orrs	r3, r5
 800d71a:	6965      	ldr	r5, [r4, #20]
 800d71c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d71e:	69e5      	ldr	r5, [r4, #28]
 800d720:	430b      	orrs	r3, r1
 800d722:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800d724:	6a25      	ldr	r5, [r4, #32]
 800d726:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d728:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d72a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d72c:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d72e:	bf02      	ittt	eq
 800d730:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 800d734:	4335      	orreq	r5, r6
 800d736:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d738:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 800d73a:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 800d73c:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d73e:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800d742:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d746:	d135      	bne.n	800d7b4 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 800d748:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d74a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800d74c:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d74e:	b38d      	cbz	r5, 800d7b4 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d750:	b991      	cbnz	r1, 800d778 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 800d752:	2801      	cmp	r0, #1
 800d754:	d020      	beq.n	800d798 <HAL_DMA_Init+0xc0>
 800d756:	f030 0102 	bics.w	r1, r0, #2
 800d75a:	d12b      	bne.n	800d7b4 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d75c:	01e9      	lsls	r1, r5, #7
 800d75e:	d529      	bpl.n	800d7b4 <HAL_DMA_Init+0xdc>
 800d760:	e01d      	b.n	800d79e <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d762:	f7ff fedd 	bl	800d520 <HAL_GetTick>
 800d766:	1b40      	subs	r0, r0, r5
 800d768:	2805      	cmp	r0, #5
 800d76a:	d9c7      	bls.n	800d6fc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d76c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d76e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d770:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d772:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800d776:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d778:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800d77c:	d116      	bne.n	800d7ac <HAL_DMA_Init+0xd4>
    switch (tmp)
 800d77e:	2803      	cmp	r0, #3
 800d780:	d818      	bhi.n	800d7b4 <HAL_DMA_Init+0xdc>
 800d782:	a101      	add	r1, pc, #4	@ (adr r1, 800d788 <HAL_DMA_Init+0xb0>)
 800d784:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800d788:	0800d79f 	.word	0x0800d79f
 800d78c:	0800d75d 	.word	0x0800d75d
 800d790:	0800d79f 	.word	0x0800d79f
 800d794:	0800d799 	.word	0x0800d799
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d798:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 800d79c:	d10a      	bne.n	800d7b4 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d79e:	2340      	movs	r3, #64	@ 0x40
 800d7a0:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800d7a8:	2001      	movs	r0, #1
 800d7aa:	e7e4      	b.n	800d776 <HAL_DMA_Init+0x9e>
    switch (tmp)
 800d7ac:	2802      	cmp	r0, #2
 800d7ae:	d9f6      	bls.n	800d79e <HAL_DMA_Init+0xc6>
 800d7b0:	2803      	cmp	r0, #3
 800d7b2:	d0d3      	beq.n	800d75c <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 800d7b4:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f7ff ff78 	bl	800d6ac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d7bc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800d7be:	233f      	movs	r3, #63	@ 0x3f
 800d7c0:	4093      	lsls	r3, r2
 800d7c2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d7c4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800d7c6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d7c8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800d7ca:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800d7ce:	e7d2      	b.n	800d776 <HAL_DMA_Init+0x9e>
 800d7d0:	f010803f 	.word	0xf010803f

0800d7d4 <HAL_DMA_DeInit>:
{
 800d7d4:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	b320      	cbz	r0, 800d824 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800d7da:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	b2dc      	uxtb	r4, r3
 800d7e2:	d01d      	beq.n	800d820 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 800d7e4:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 800d7e6:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	f022 0201 	bic.w	r2, r2, #1
 800d7ee:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800d7f0:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 800d7f2:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800d7f4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800d7f6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800d7f8:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800d7fa:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800d7fc:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d7fe:	f7ff ff55 	bl	800d6ac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d802:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800d804:	233f      	movs	r3, #63	@ 0x3f
 800d806:	4093      	lsls	r3, r2
 800d808:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d80a:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 800d80c:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800d810:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 800d814:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800d818:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 800d81c:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 800d820:	4620      	mov	r0, r4
 800d822:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d824:	2401      	movs	r4, #1
 800d826:	e7fb      	b.n	800d820 <HAL_DMA_DeInit+0x4c>

0800d828 <HAL_DMA_Abort>:
{
 800d828:	b570      	push	{r4, r5, r6, lr}
 800d82a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d82c:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 800d82e:	f7ff fe77 	bl	800d520 <HAL_GetTick>
 800d832:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d834:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800d838:	2b02      	cmp	r3, #2
 800d83a:	d006      	beq.n	800d84a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d83c:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 800d83e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d840:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800d842:	2300      	movs	r3, #0
 800d844:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800d848:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d84a:	6823      	ldr	r3, [r4, #0]
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	f022 0216 	bic.w	r2, r2, #22
 800d852:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d854:	695a      	ldr	r2, [r3, #20]
 800d856:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d85a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d85c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d85e:	b90a      	cbnz	r2, 800d864 <HAL_DMA_Abort+0x3c>
 800d860:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800d862:	b11a      	cbz	r2, 800d86c <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	f022 0208 	bic.w	r2, r2, #8
 800d86a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	f022 0201 	bic.w	r2, r2, #1
 800d872:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d874:	6823      	ldr	r3, [r4, #0]
 800d876:	6818      	ldr	r0, [r3, #0]
 800d878:	f010 0001 	ands.w	r0, r0, #1
 800d87c:	d107      	bne.n	800d88e <HAL_DMA_Abort+0x66>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d87e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800d880:	233f      	movs	r3, #63	@ 0x3f
 800d882:	4093      	lsls	r3, r2
 800d884:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800d886:	2301      	movs	r3, #1
 800d888:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800d88c:	e7d9      	b.n	800d842 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d88e:	f7ff fe47 	bl	800d520 <HAL_GetTick>
 800d892:	1b40      	subs	r0, r0, r5
 800d894:	2805      	cmp	r0, #5
 800d896:	d9ed      	bls.n	800d874 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d898:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d89a:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d89c:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d89e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 800d8a2:	e7ce      	b.n	800d842 <HAL_DMA_Abort+0x1a>

0800d8a4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800d8a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800d8a6:	6804      	ldr	r4, [r0, #0]
 800d8a8:	9d04      	ldr	r5, [sp, #16]
 800d8aa:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800d8ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800d8b0:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800d8b2:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800d8b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800d8ba:	ea45 0506 	orr.w	r5, r5, r6
 800d8be:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800d8c0:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800d8c2:	d130      	bne.n	800d926 <DMA2D_SetConfig+0x82>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800d8c4:	6885      	ldr	r5, [r0, #8]
 800d8c6:	b11d      	cbz	r5, 800d8d0 <DMA2D_SetConfig+0x2c>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800d8c8:	2d01      	cmp	r5, #1
 800d8ca:	d103      	bne.n	800d8d4 <DMA2D_SetConfig+0x30>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800d8cc:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800d8d0:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800d8d4:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800d8d6:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800d8da:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800d8de:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800d8e0:	d107      	bne.n	800d8f2 <DMA2D_SetConfig+0x4e>
      tmp2 = (tmp2 >> 19U);
 800d8e2:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 800d8e4:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800d8e6:	02c9      	lsls	r1, r1, #11
 800d8e8:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 800d8ec:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 800d8f0:	e7ee      	b.n	800d8d0 <DMA2D_SetConfig+0x2c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800d8f2:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800d8f4:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800d8f8:	d10a      	bne.n	800d910 <DMA2D_SetConfig+0x6c>
      tmp2 = (tmp2 >> 19U);
 800d8fa:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800d8fc:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800d8fe:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800d900:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800d902:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 800d906:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800d90a:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800d90e:	e7df      	b.n	800d8d0 <DMA2D_SetConfig+0x2c>
      tmp2 = (tmp2 >> 20U);
 800d910:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800d912:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800d914:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800d916:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800d918:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800d91c:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800d920:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 800d924:	e7d4      	b.n	800d8d0 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800d926:	60e1      	str	r1, [r4, #12]
}
 800d928:	e7d3      	b.n	800d8d2 <DMA2D_SetConfig+0x2e>

0800d92a <HAL_DMA2D_MspInit>:
}
 800d92a:	4770      	bx	lr

0800d92c <HAL_DMA2D_Init>:
{
 800d92c:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 800d92e:	4604      	mov	r4, r0
 800d930:	b330      	cbz	r0, 800d980 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d932:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d936:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d93a:	b91b      	cbnz	r3, 800d944 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 800d93c:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800d940:	f7ff fff3 	bl	800d92a <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800d944:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d946:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800d948:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d94a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d94c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800d950:	6813      	ldr	r3, [r2, #0]
 800d952:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800d956:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800d958:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800d95a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800d95c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800d95e:	f023 0307 	bic.w	r3, r3, #7
 800d962:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d964:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800d966:	6353      	str	r3, [r2, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d968:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d96a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800d96e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800d972:	430b      	orrs	r3, r1
 800d974:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d976:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d978:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d97a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 800d97e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d980:	2001      	movs	r0, #1
 800d982:	e7fc      	b.n	800d97e <HAL_DMA2D_Init+0x52>

0800d984 <HAL_DMA2D_MspDeInit>:
__weak void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef *hdma2d)
 800d984:	4770      	bx	lr

0800d986 <HAL_DMA2D_Start_IT>:
{
 800d986:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 800d988:	f890 5038 	ldrb.w	r5, [r0, #56]	@ 0x38
{
 800d98c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 800d98e:	2d01      	cmp	r5, #1
 800d990:	f04f 0502 	mov.w	r5, #2
 800d994:	d013      	beq.n	800d9be <HAL_DMA2D_Start_IT+0x38>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d996:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  __HAL_LOCK(hdma2d);
 800d99a:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800d99c:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 800d99e:	f880 6038 	strb.w	r6, [r0, #56]	@ 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800d9a2:	9500      	str	r5, [sp, #0]
 800d9a4:	f7ff ff7e 	bl	800d8a4 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800d9a8:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800d9aa:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	f442 520c 	orr.w	r2, r2, #8960	@ 0x2300
 800d9b2:	601a      	str	r2, [r3, #0]
  __HAL_DMA2D_ENABLE(hdma2d);
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	4332      	orrs	r2, r6
 800d9b8:	601a      	str	r2, [r3, #0]
}
 800d9ba:	b002      	add	sp, #8
 800d9bc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 800d9be:	4628      	mov	r0, r5
 800d9c0:	e7fb      	b.n	800d9ba <HAL_DMA2D_Start_IT+0x34>

0800d9c2 <HAL_DMA2D_BlendingStart_IT>:
{
 800d9c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9c4:	4616      	mov	r6, r2
 800d9c6:	461a      	mov	r2, r3
  __HAL_LOCK(hdma2d);
 800d9c8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d9cc:	2502      	movs	r5, #2
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d016      	beq.n	800da00 <HAL_DMA2D_BlendingStart_IT+0x3e>
 800d9d2:	2301      	movs	r3, #1
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800d9d4:	6804      	ldr	r4, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d9d6:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  __HAL_LOCK(hdma2d);
 800d9da:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800d9de:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800d9e0:	6166      	str	r6, [r4, #20]
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	9b06      	ldr	r3, [sp, #24]
 800d9e6:	f7ff ff5d 	bl	800d8a4 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800d9ea:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800d9ec:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800d9ee:	f443 530c 	orr.w	r3, r3, #8960	@ 0x2300
 800d9f2:	6023      	str	r3, [r4, #0]
  __HAL_DMA2D_ENABLE(hdma2d);
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	f043 0301 	orr.w	r3, r3, #1
 800d9fa:	6023      	str	r3, [r4, #0]
}
 800d9fc:	b002      	add	sp, #8
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 800da00:	4628      	mov	r0, r5
 800da02:	e7fb      	b.n	800d9fc <HAL_DMA2D_BlendingStart_IT+0x3a>

0800da04 <HAL_DMA2D_Abort>:
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT | DMA2D_CR_START, DMA2D_CR_ABORT);
 800da04:	6802      	ldr	r2, [r0, #0]
{
 800da06:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT | DMA2D_CR_START, DMA2D_CR_ABORT);
 800da08:	6813      	ldr	r3, [r2, #0]
{
 800da0a:	4604      	mov	r4, r0
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT | DMA2D_CR_START, DMA2D_CR_ABORT);
 800da0c:	f023 0305 	bic.w	r3, r3, #5
 800da10:	f043 0304 	orr.w	r3, r3, #4
 800da14:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800da16:	f7ff fd83 	bl	800d520 <HAL_GetTick>
 800da1a:	4605      	mov	r5, r0
  while ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800da1c:	6822      	ldr	r2, [r4, #0]
 800da1e:	6810      	ldr	r0, [r2, #0]
 800da20:	f010 0001 	ands.w	r0, r0, #1
 800da24:	d107      	bne.n	800da36 <HAL_DMA2D_Abort+0x32>
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800da26:	6813      	ldr	r3, [r2, #0]
 800da28:	f423 530c 	bic.w	r3, r3, #8960	@ 0x2300
 800da2c:	6013      	str	r3, [r2, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800da2e:	2301      	movs	r3, #1
 800da30:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  return HAL_OK;
 800da34:	e00c      	b.n	800da50 <HAL_DMA2D_Abort+0x4c>
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 800da36:	f7ff fd73 	bl	800d520 <HAL_GetTick>
 800da3a:	1b40      	subs	r0, r0, r5
 800da3c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800da40:	d9ec      	bls.n	800da1c <HAL_DMA2D_Abort+0x18>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800da42:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800da44:	2003      	movs	r0, #3
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800da46:	f043 0320 	orr.w	r3, r3, #32
 800da4a:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800da4c:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800da50:	2300      	movs	r3, #0
 800da52:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 800da56:	bd38      	pop	{r3, r4, r5, pc}

0800da58 <HAL_DMA2D_CLUTLoading_Abort>:
{
 800da58:	b570      	push	{r4, r5, r6, lr}
  const __IO uint32_t *reg =  &(hdma2d->Instance->BGPFCCR);  /* by default, point at background register */
 800da5a:	6805      	ldr	r5, [r0, #0]
  if (LayerIdx == DMA2D_FOREGROUND_LAYER)
 800da5c:	2901      	cmp	r1, #1
{
 800da5e:	4604      	mov	r4, r0
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800da60:	682a      	ldr	r2, [r5, #0]
 800da62:	f042 0204 	orr.w	r2, r2, #4
 800da66:	602a      	str	r2, [r5, #0]
  const __IO uint32_t *reg =  &(hdma2d->Instance->BGPFCCR);  /* by default, point at background register */
 800da68:	bf14      	ite	ne
 800da6a:	3524      	addne	r5, #36	@ 0x24
    reg  = &(hdma2d->Instance->FGPFCCR);
 800da6c:	351c      	addeq	r5, #28
  tickstart = HAL_GetTick();
 800da6e:	f7ff fd57 	bl	800d520 <HAL_GetTick>
 800da72:	4606      	mov	r6, r0
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 800da74:	6828      	ldr	r0, [r5, #0]
 800da76:	f010 0020 	ands.w	r0, r0, #32
 800da7a:	d108      	bne.n	800da8e <HAL_DMA2D_CLUTLoading_Abort+0x36>
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 800da7c:	6822      	ldr	r2, [r4, #0]
 800da7e:	6813      	ldr	r3, [r2, #0]
 800da80:	f423 5364 	bic.w	r3, r3, #14592	@ 0x3900
 800da84:	6013      	str	r3, [r2, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800da86:	2301      	movs	r3, #1
 800da88:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  return HAL_OK;
 800da8c:	e00c      	b.n	800daa8 <HAL_DMA2D_CLUTLoading_Abort+0x50>
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 800da8e:	f7ff fd47 	bl	800d520 <HAL_GetTick>
 800da92:	1b80      	subs	r0, r0, r6
 800da94:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800da98:	d9ec      	bls.n	800da74 <HAL_DMA2D_CLUTLoading_Abort+0x1c>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800da9a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800da9c:	2003      	movs	r0, #3
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800da9e:	f043 0320 	orr.w	r3, r3, #32
 800daa2:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800daa4:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800daa8:	2300      	movs	r3, #0
 800daaa:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 800daae:	bd70      	pop	{r4, r5, r6, pc}

0800dab0 <HAL_DMA2D_DeInit>:
{
 800dab0:	b538      	push	{r3, r4, r5, lr}
  if (hdma2d == NULL)
 800dab2:	4605      	mov	r5, r0
 800dab4:	b908      	cbnz	r0, 800daba <HAL_DMA2D_DeInit+0xa>
    return HAL_ERROR;
 800dab6:	2001      	movs	r0, #1
}
 800dab8:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800daba:	4b16      	ldr	r3, [pc, #88]	@ (800db14 <HAL_DMA2D_DeInit+0x64>)
 800dabc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800dabe:	6803      	ldr	r3, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800dac0:	0211      	lsls	r1, r2, #8
 800dac2:	d413      	bmi.n	800daec <HAL_DMA2D_DeInit+0x3c>
  hdma2d->Instance->CR       =    0U;
 800dac4:	2400      	movs	r4, #0
 800dac6:	682b      	ldr	r3, [r5, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800dac8:	223f      	movs	r2, #63	@ 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800daca:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800dacc:	601c      	str	r4, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800dace:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 800dad0:	611c      	str	r4, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800dad2:	619c      	str	r4, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800dad4:	61dc      	str	r4, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800dad6:	625c      	str	r4, [r3, #36]	@ 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800dad8:	635c      	str	r4, [r3, #52]	@ 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800dada:	f7ff ff53 	bl	800d984 <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800dade:	63ec      	str	r4, [r5, #60]	@ 0x3c
  return HAL_OK;
 800dae0:	4620      	mov	r0, r4
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800dae2:	f885 4039 	strb.w	r4, [r5, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 800dae6:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  return HAL_OK;
 800daea:	e7e5      	b.n	800dab8 <HAL_DMA2D_DeInit+0x8>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800daec:	6819      	ldr	r1, [r3, #0]
 800daee:	f011 0101 	ands.w	r1, r1, #1
 800daf2:	d004      	beq.n	800dafe <HAL_DMA2D_DeInit+0x4e>
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800daf4:	f7ff ff86 	bl	800da04 <HAL_DMA2D_Abort>
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d0e3      	beq.n	800dac4 <HAL_DMA2D_DeInit+0x14>
 800dafc:	e7db      	b.n	800dab6 <HAL_DMA2D_DeInit+0x6>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800dafe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db00:	0692      	lsls	r2, r2, #26
 800db02:	d502      	bpl.n	800db0a <HAL_DMA2D_DeInit+0x5a>
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800db04:	f7ff ffa8 	bl	800da58 <HAL_DMA2D_CLUTLoading_Abort>
 800db08:	e7f6      	b.n	800daf8 <HAL_DMA2D_DeInit+0x48>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800db0a:	69db      	ldr	r3, [r3, #28]
 800db0c:	069b      	lsls	r3, r3, #26
 800db0e:	d5d9      	bpl.n	800dac4 <HAL_DMA2D_DeInit+0x14>
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800db10:	2101      	movs	r1, #1
 800db12:	e7f7      	b.n	800db04 <HAL_DMA2D_DeInit+0x54>
 800db14:	40023800 	.word	0x40023800

0800db18 <HAL_DMA2D_LineEventCallback>:
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800db18:	4770      	bx	lr

0800db1a <HAL_DMA2D_CLUTLoadingCpltCallback>:
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800db1a:	4770      	bx	lr

0800db1c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800db1c:	6803      	ldr	r3, [r0, #0]
{
 800db1e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800db20:	685e      	ldr	r6, [r3, #4]
{
 800db22:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800db24:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800db26:	07f2      	lsls	r2, r6, #31
 800db28:	d514      	bpl.n	800db54 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800db2a:	05e9      	lsls	r1, r5, #23
 800db2c:	d512      	bpl.n	800db54 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800db34:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800db36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800db38:	f042 0201 	orr.w	r2, r2, #1
 800db3c:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800db3e:	2201      	movs	r2, #1
 800db40:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800db42:	2304      	movs	r3, #4
 800db44:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800db48:	2300      	movs	r3, #0
 800db4a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800db4e:	6943      	ldr	r3, [r0, #20]
 800db50:	b103      	cbz	r3, 800db54 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800db52:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800db54:	06b2      	lsls	r2, r6, #26
 800db56:	d516      	bpl.n	800db86 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800db58:	04ab      	lsls	r3, r5, #18
 800db5a:	d514      	bpl.n	800db86 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800db5c:	6823      	ldr	r3, [r4, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800db64:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800db66:	2220      	movs	r2, #32
 800db68:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800db6a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800db6c:	f043 0302 	orr.w	r3, r3, #2
 800db70:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800db72:	2304      	movs	r3, #4
 800db74:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800db78:	2300      	movs	r3, #0
 800db7a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800db7e:	6963      	ldr	r3, [r4, #20]
 800db80:	b10b      	cbz	r3, 800db86 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800db82:	4620      	mov	r0, r4
 800db84:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800db86:	0730      	lsls	r0, r6, #28
 800db88:	d516      	bpl.n	800dbb8 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800db8a:	0529      	lsls	r1, r5, #20
 800db8c:	d514      	bpl.n	800dbb8 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800db8e:	6823      	ldr	r3, [r4, #0]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800db96:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800db98:	2208      	movs	r2, #8
 800db9a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800db9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800db9e:	f043 0304 	orr.w	r3, r3, #4
 800dba2:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800dba4:	2304      	movs	r3, #4
 800dba6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800dbaa:	2300      	movs	r3, #0
 800dbac:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800dbb0:	6963      	ldr	r3, [r4, #20]
 800dbb2:	b10b      	cbz	r3, 800dbb8 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800dbb8:	0772      	lsls	r2, r6, #29
 800dbba:	d50b      	bpl.n	800dbd4 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800dbbc:	056b      	lsls	r3, r5, #21
 800dbbe:	d509      	bpl.n	800dbd4 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800dbc0:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800dbc2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbca:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800dbcc:	2204      	movs	r2, #4
 800dbce:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800dbd0:	f7ff ffa2 	bl	800db18 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800dbd4:	07b0      	lsls	r0, r6, #30
 800dbd6:	d514      	bpl.n	800dc02 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800dbd8:	05a9      	lsls	r1, r5, #22
 800dbda:	d512      	bpl.n	800dc02 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800dbe4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800dbe6:	2202      	movs	r2, #2
 800dbe8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800dbea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dbec:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 800dbfa:	6923      	ldr	r3, [r4, #16]
 800dbfc:	b10b      	cbz	r3, 800dc02 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800dbfe:	4620      	mov	r0, r4
 800dc00:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800dc02:	06f2      	lsls	r2, r6, #27
 800dc04:	d513      	bpl.n	800dc2e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800dc06:	04eb      	lsls	r3, r5, #19
 800dc08:	d511      	bpl.n	800dc2e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800dc0a:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800dc0c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dc14:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800dc16:	2210      	movs	r2, #16
 800dc18:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800dc1a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc1c:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800dc24:	2300      	movs	r3, #0
 800dc26:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800dc2a:	f7ff ff76 	bl	800db1a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}

0800dc30 <HAL_DMA2D_ConfigLayer>:
{
 800dc30:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 800dc32:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
{
 800dc36:	4603      	mov	r3, r0
 800dc38:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 800dc3a:	2a01      	cmp	r2, #1
 800dc3c:	d02b      	beq.n	800dc96 <HAL_DMA2D_ConfigLayer+0x66>
 800dc3e:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800dc40:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800dc44:	010e      	lsls	r6, r1, #4
 800dc46:	4f1c      	ldr	r7, [pc, #112]	@ (800dcb8 <HAL_DMA2D_ConfigLayer+0x88>)
  __HAL_LOCK(hdma2d);
 800dc48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800dc4c:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 800dc50:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 800dc54:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 800dc56:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800dc5a:	3c09      	subs	r4, #9
 800dc5c:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800dc5e:	bf96      	itet	ls
 800dc60:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800dc64:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800dc68:	4310      	orrls	r0, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800dc6a:	681a      	ldr	r2, [r3, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800dc6c:	b9a1      	cbnz	r1, 800dc98 <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800dc6e:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800dc70:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800dc72:	ea01 0107 	and.w	r1, r1, r7
 800dc76:	ea41 0100 	orr.w	r1, r1, r0
 800dc7a:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800dc7c:	6999      	ldr	r1, [r3, #24]
 800dc7e:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800dc80:	d803      	bhi.n	800dc8a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800dc82:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800dc84:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800dc88:	6291      	str	r1, [r2, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800dc8a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdma2d);
 800dc8c:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800dc8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 800dc92:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
}
 800dc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800dc98:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800dc9a:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800dc9c:	ea01 0107 	and.w	r1, r1, r7
 800dca0:	ea41 0100 	orr.w	r1, r1, r0
 800dca4:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800dca6:	eb03 0106 	add.w	r1, r3, r6
 800dcaa:	6989      	ldr	r1, [r1, #24]
 800dcac:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800dcae:	d8ec      	bhi.n	800dc8a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800dcb0:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 800dcb4:	6215      	str	r5, [r2, #32]
 800dcb6:	e7e8      	b.n	800dc8a <HAL_DMA2D_ConfigLayer+0x5a>
 800dcb8:	00fcfff0 	.word	0x00fcfff0

0800dcbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dcbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800dcc0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dcc2:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 800de80 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800dcc6:	4a6c      	ldr	r2, [pc, #432]	@ (800de78 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 800dcc8:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dcca:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800dccc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dcce:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800dcd2:	43ac      	bics	r4, r5
 800dcd4:	f040 80b7 	bne.w	800de46 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dcd8:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800dcda:	2703      	movs	r7, #3
 800dcdc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dce0:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800dce4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dce8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800dcea:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dcee:	2f01      	cmp	r7, #1
 800dcf0:	d834      	bhi.n	800dd5c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800dcf2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800dcf4:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 800dcf8:	68cf      	ldr	r7, [r1, #12]
 800dcfa:	fa07 f70e 	lsl.w	r7, r7, lr
 800dcfe:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 800dd02:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800dd04:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dd06:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dd0a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800dd0e:	409f      	lsls	r7, r3
 800dd10:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800dd14:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800dd16:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd18:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800dd1a:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800dd1e:	688f      	ldr	r7, [r1, #8]
 800dd20:	fa07 f70e 	lsl.w	r7, r7, lr
 800dd24:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 800dd28:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd2a:	d119      	bne.n	800dd60 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 800dd2c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800dd30:	f003 0a07 	and.w	sl, r3, #7
 800dd34:	f04f 0b0f 	mov.w	fp, #15
 800dd38:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800dd3c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800dd40:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800dd44:	fa0b fb0a 	lsl.w	fp, fp, sl
 800dd48:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800dd4c:	690f      	ldr	r7, [r1, #16]
 800dd4e:	fa07 f70a 	lsl.w	r7, r7, sl
 800dd52:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 800dd56:	f8c8 7020 	str.w	r7, [r8, #32]
 800dd5a:	e001      	b.n	800dd60 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dd5c:	2c03      	cmp	r4, #3
 800dd5e:	d1da      	bne.n	800dd16 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800dd60:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800dd62:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800dd66:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800dd6a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800dd6e:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800dd72:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800dd74:	d067      	beq.n	800de46 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd76:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800dd7a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800dd7e:	f003 0c03 	and.w	ip, r3, #3
 800dd82:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd86:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800dd8a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800dd8e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd92:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 800dd96:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800dd9a:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800dd9e:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dda2:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800dda6:	9401      	str	r4, [sp, #4]
 800dda8:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800ddaa:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ddac:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ddb0:	4c32      	ldr	r4, [pc, #200]	@ (800de7c <HAL_GPIO_Init+0x1c0>)
 800ddb2:	42a0      	cmp	r0, r4
 800ddb4:	d04e      	beq.n	800de54 <HAL_GPIO_Init+0x198>
 800ddb6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ddba:	42a0      	cmp	r0, r4
 800ddbc:	d04c      	beq.n	800de58 <HAL_GPIO_Init+0x19c>
 800ddbe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ddc2:	42a0      	cmp	r0, r4
 800ddc4:	d04a      	beq.n	800de5c <HAL_GPIO_Init+0x1a0>
 800ddc6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ddca:	42a0      	cmp	r0, r4
 800ddcc:	d048      	beq.n	800de60 <HAL_GPIO_Init+0x1a4>
 800ddce:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ddd2:	42a0      	cmp	r0, r4
 800ddd4:	d046      	beq.n	800de64 <HAL_GPIO_Init+0x1a8>
 800ddd6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ddda:	42a0      	cmp	r0, r4
 800dddc:	d044      	beq.n	800de68 <HAL_GPIO_Init+0x1ac>
 800ddde:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800dde2:	42a0      	cmp	r0, r4
 800dde4:	d042      	beq.n	800de6c <HAL_GPIO_Init+0x1b0>
 800dde6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ddea:	42a0      	cmp	r0, r4
 800ddec:	d040      	beq.n	800de70 <HAL_GPIO_Init+0x1b4>
 800ddee:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ddf2:	42a0      	cmp	r0, r4
 800ddf4:	d03e      	beq.n	800de74 <HAL_GPIO_Init+0x1b8>
 800ddf6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800ddfa:	42a0      	cmp	r0, r4
 800ddfc:	bf14      	ite	ne
 800ddfe:	240a      	movne	r4, #10
 800de00:	2409      	moveq	r4, #9
 800de02:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800de06:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800de0a:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800de0e:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800de10:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 800de14:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800de16:	bf0c      	ite	eq
 800de18:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800de1a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800de1c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 800de20:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800de22:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800de24:	bf0c      	ite	eq
 800de26:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800de28:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800de2a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 800de2e:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800de30:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800de32:	bf0c      	ite	eq
 800de34:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800de36:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800de38:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800de3a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800de3c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800de3e:	bf54      	ite	pl
 800de40:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800de42:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 800de44:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800de46:	3301      	adds	r3, #1
 800de48:	2b10      	cmp	r3, #16
 800de4a:	f47f af3d 	bne.w	800dcc8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800de4e:	b003      	add	sp, #12
 800de50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800de54:	2400      	movs	r4, #0
 800de56:	e7d4      	b.n	800de02 <HAL_GPIO_Init+0x146>
 800de58:	2401      	movs	r4, #1
 800de5a:	e7d2      	b.n	800de02 <HAL_GPIO_Init+0x146>
 800de5c:	2402      	movs	r4, #2
 800de5e:	e7d0      	b.n	800de02 <HAL_GPIO_Init+0x146>
 800de60:	2403      	movs	r4, #3
 800de62:	e7ce      	b.n	800de02 <HAL_GPIO_Init+0x146>
 800de64:	2404      	movs	r4, #4
 800de66:	e7cc      	b.n	800de02 <HAL_GPIO_Init+0x146>
 800de68:	2405      	movs	r4, #5
 800de6a:	e7ca      	b.n	800de02 <HAL_GPIO_Init+0x146>
 800de6c:	2406      	movs	r4, #6
 800de6e:	e7c8      	b.n	800de02 <HAL_GPIO_Init+0x146>
 800de70:	2407      	movs	r4, #7
 800de72:	e7c6      	b.n	800de02 <HAL_GPIO_Init+0x146>
 800de74:	2408      	movs	r4, #8
 800de76:	e7c4      	b.n	800de02 <HAL_GPIO_Init+0x146>
 800de78:	40013c00 	.word	0x40013c00
 800de7c:	40020000 	.word	0x40020000
 800de80:	40023800 	.word	0x40023800

0800de84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800de84:	b10a      	cbz	r2, 800de8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800de86:	6181      	str	r1, [r0, #24]
  }
}
 800de88:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800de8a:	0409      	lsls	r1, r1, #16
 800de8c:	e7fb      	b.n	800de86 <HAL_GPIO_WritePin+0x2>

0800de8e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800de8e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800de90:	ea01 0203 	and.w	r2, r1, r3
 800de94:	ea21 0103 	bic.w	r1, r1, r3
 800de98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800de9c:	6181      	str	r1, [r0, #24]
}
 800de9e:	4770      	bx	lr

0800dea0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800dea0:	6803      	ldr	r3, [r0, #0]
 800dea2:	699a      	ldr	r2, [r3, #24]
 800dea4:	0791      	lsls	r1, r2, #30
 800dea6:	d501      	bpl.n	800deac <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800dea8:	2200      	movs	r2, #0
 800deaa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800deac:	699a      	ldr	r2, [r3, #24]
 800deae:	07d2      	lsls	r2, r2, #31
 800deb0:	d403      	bmi.n	800deba <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800deb2:	699a      	ldr	r2, [r3, #24]
 800deb4:	f042 0201 	orr.w	r2, r2, #1
 800deb8:	619a      	str	r2, [r3, #24]
  }
}
 800deba:	4770      	bx	lr

0800debc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800debc:	b530      	push	{r4, r5, lr}
 800debe:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dec0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800dec4:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dec6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800dec8:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800deca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800dece:	4a05      	ldr	r2, [pc, #20]	@ (800dee4 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ded0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800ded2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ded6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800deda:	ea20 0002 	bic.w	r0, r0, r2
 800dede:	4303      	orrs	r3, r0
 800dee0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800dee2:	bd30      	pop	{r4, r5, pc}
 800dee4:	03ff63ff 	.word	0x03ff63ff

0800dee8 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800dee8:	6803      	ldr	r3, [r0, #0]
{
 800deea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800deee:	699c      	ldr	r4, [r3, #24]
{
 800def0:	4605      	mov	r5, r0
 800def2:	460f      	mov	r7, r1
 800def4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800def6:	f014 0410 	ands.w	r4, r4, #16
 800defa:	d06f      	beq.n	800dfdc <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800defc:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800defe:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800df00:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df02:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	699a      	ldr	r2, [r3, #24]
 800df08:	0690      	lsls	r0, r2, #26
 800df0a:	d461      	bmi.n	800dfd0 <I2C_IsErrorOccurred+0xe8>
 800df0c:	f1b8 0f00 	cmp.w	r8, #0
 800df10:	d035      	beq.n	800df7e <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800df12:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800df16:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800df18:	682e      	ldr	r6, [r5, #0]
 800df1a:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800df1c:	05d9      	lsls	r1, r3, #23
 800df1e:	d505      	bpl.n	800df2c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800df20:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800df24:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800df28:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800df2a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800df2c:	055a      	lsls	r2, r3, #21
 800df2e:	d505      	bpl.n	800df3c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800df30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800df34:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800df38:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800df3a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800df3c:	059b      	lsls	r3, r3, #22
 800df3e:	d54f      	bpl.n	800dfe0 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800df40:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800df44:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800df48:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800df4a:	4628      	mov	r0, r5
 800df4c:	f7ff ffa8 	bl	800dea0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800df50:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800df52:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800df54:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800df58:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800df5c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800df60:	f023 0301 	bic.w	r3, r3, #1
 800df64:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800df66:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800df68:	4323      	orrs	r3, r4
 800df6a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800df6c:	2320      	movs	r3, #32
 800df6e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800df72:	2300      	movs	r3, #0
 800df74:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800df78:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800df7c:	e032      	b.n	800dfe4 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800df7e:	1c7a      	adds	r2, r7, #1
 800df80:	d0c1      	beq.n	800df06 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800df82:	f7ff facd 	bl	800d520 <HAL_GetTick>
 800df86:	1b80      	subs	r0, r0, r6
 800df88:	42b8      	cmp	r0, r7
 800df8a:	d801      	bhi.n	800df90 <I2C_IsErrorOccurred+0xa8>
 800df8c:	2f00      	cmp	r7, #0
 800df8e:	d1b9      	bne.n	800df04 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800df90:	682b      	ldr	r3, [r5, #0]
 800df92:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800df94:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800df98:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800df9a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800df9c:	0400      	lsls	r0, r0, #16
 800df9e:	d50a      	bpl.n	800dfb6 <I2C_IsErrorOccurred+0xce>
 800dfa0:	0449      	lsls	r1, r1, #17
 800dfa2:	d408      	bmi.n	800dfb6 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800dfa4:	2a20      	cmp	r2, #32
 800dfa6:	d006      	beq.n	800dfb6 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dfa8:	685a      	ldr	r2, [r3, #4]
 800dfaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dfae:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800dfb0:	f7ff fab6 	bl	800d520 <HAL_GetTick>
 800dfb4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dfb6:	682b      	ldr	r3, [r5, #0]
 800dfb8:	699b      	ldr	r3, [r3, #24]
 800dfba:	069b      	lsls	r3, r3, #26
 800dfbc:	d4a2      	bmi.n	800df04 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800dfbe:	f7ff faaf 	bl	800d520 <HAL_GetTick>
 800dfc2:	1b80      	subs	r0, r0, r6
 800dfc4:	2819      	cmp	r0, #25
 800dfc6:	d9f6      	bls.n	800dfb6 <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800dfc8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800dfca:	f04f 0801 	mov.w	r8, #1
 800dfce:	e799      	b.n	800df04 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800dfd0:	f1b8 0f00 	cmp.w	r8, #0
 800dfd4:	d19d      	bne.n	800df12 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dfd6:	2220      	movs	r2, #32
 800dfd8:	61da      	str	r2, [r3, #28]
 800dfda:	e79a      	b.n	800df12 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800dfdc:	4620      	mov	r0, r4
 800dfde:	e79b      	b.n	800df18 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d1b2      	bne.n	800df4a <I2C_IsErrorOccurred+0x62>
}
 800dfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dfe8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	4604      	mov	r4, r0
 800dfec:	460d      	mov	r5, r1
 800dfee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	079b      	lsls	r3, r3, #30
 800dff6:	d501      	bpl.n	800dffc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800dff8:	2000      	movs	r0, #0
 800dffa:	e01b      	b.n	800e034 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dffc:	4632      	mov	r2, r6
 800dffe:	4629      	mov	r1, r5
 800e000:	4620      	mov	r0, r4
 800e002:	f7ff ff71 	bl	800dee8 <I2C_IsErrorOccurred>
 800e006:	b9a0      	cbnz	r0, 800e032 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800e008:	1c6a      	adds	r2, r5, #1
 800e00a:	d0f1      	beq.n	800dff0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e00c:	f7ff fa88 	bl	800d520 <HAL_GetTick>
 800e010:	1b80      	subs	r0, r0, r6
 800e012:	42a8      	cmp	r0, r5
 800e014:	d801      	bhi.n	800e01a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800e016:	2d00      	cmp	r5, #0
 800e018:	d1ea      	bne.n	800dff0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e01a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e01c:	f043 0320 	orr.w	r3, r3, #32
 800e020:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e022:	2320      	movs	r3, #32
 800e024:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e028:	2300      	movs	r3, #0
 800e02a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800e02e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800e032:	2001      	movs	r0, #1
}
 800e034:	bd70      	pop	{r4, r5, r6, pc}

0800e036 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800e036:	b570      	push	{r4, r5, r6, lr}
 800e038:	4604      	mov	r4, r0
 800e03a:	460d      	mov	r5, r1
 800e03c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	699b      	ldr	r3, [r3, #24]
 800e042:	069b      	lsls	r3, r3, #26
 800e044:	d501      	bpl.n	800e04a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800e046:	2000      	movs	r0, #0
 800e048:	e019      	b.n	800e07e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e04a:	4632      	mov	r2, r6
 800e04c:	4629      	mov	r1, r5
 800e04e:	4620      	mov	r0, r4
 800e050:	f7ff ff4a 	bl	800dee8 <I2C_IsErrorOccurred>
 800e054:	b990      	cbnz	r0, 800e07c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e056:	f7ff fa63 	bl	800d520 <HAL_GetTick>
 800e05a:	1b80      	subs	r0, r0, r6
 800e05c:	42a8      	cmp	r0, r5
 800e05e:	d801      	bhi.n	800e064 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800e060:	2d00      	cmp	r5, #0
 800e062:	d1ec      	bne.n	800e03e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e064:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e066:	f043 0320 	orr.w	r3, r3, #32
 800e06a:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e06c:	2320      	movs	r3, #32
 800e06e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e072:	2300      	movs	r3, #0
 800e074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800e078:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800e07c:	2001      	movs	r0, #1
}
 800e07e:	bd70      	pop	{r4, r5, r6, pc}

0800e080 <I2C_WaitOnFlagUntilTimeout>:
{
 800e080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e084:	9f06      	ldr	r7, [sp, #24]
 800e086:	4604      	mov	r4, r0
 800e088:	4688      	mov	r8, r1
 800e08a:	4616      	mov	r6, r2
 800e08c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e08e:	6822      	ldr	r2, [r4, #0]
 800e090:	6993      	ldr	r3, [r2, #24]
 800e092:	ea38 0303 	bics.w	r3, r8, r3
 800e096:	bf0c      	ite	eq
 800e098:	2301      	moveq	r3, #1
 800e09a:	2300      	movne	r3, #0
 800e09c:	42b3      	cmp	r3, r6
 800e09e:	d001      	beq.n	800e0a4 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	e015      	b.n	800e0d0 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800e0a4:	1c6b      	adds	r3, r5, #1
 800e0a6:	d0f3      	beq.n	800e090 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0a8:	f7ff fa3a 	bl	800d520 <HAL_GetTick>
 800e0ac:	1bc0      	subs	r0, r0, r7
 800e0ae:	42a8      	cmp	r0, r5
 800e0b0:	d801      	bhi.n	800e0b6 <I2C_WaitOnFlagUntilTimeout+0x36>
 800e0b2:	2d00      	cmp	r5, #0
 800e0b4:	d1eb      	bne.n	800e08e <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800e0b8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0ba:	f043 0320 	orr.w	r3, r3, #32
 800e0be:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e0c0:	2320      	movs	r3, #32
 800e0c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800e0cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0d4 <HAL_I2C_MspInit>:
}
 800e0d4:	4770      	bx	lr

0800e0d6 <HAL_I2C_Init>:
{
 800e0d6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800e0d8:	4604      	mov	r4, r0
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d04a      	beq.n	800e174 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e0de:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800e0e2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800e0e6:	b91b      	cbnz	r3, 800e0f0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800e0e8:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800e0ec:	f7ff fff2 	bl	800e0d4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e0f0:	2324      	movs	r3, #36	@ 0x24
 800e0f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800e0f6:	6823      	ldr	r3, [r4, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	f022 0201 	bic.w	r2, r2, #1
 800e0fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e100:	6862      	ldr	r2, [r4, #4]
 800e102:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e106:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e108:	689a      	ldr	r2, [r3, #8]
 800e10a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e10e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e110:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e114:	2901      	cmp	r1, #1
 800e116:	d124      	bne.n	800e162 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e118:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e11c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e11e:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e120:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e122:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800e126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e12a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e12c:	68da      	ldr	r2, [r3, #12]
 800e12e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e132:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e134:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800e138:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e13a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e13c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e140:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e142:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800e146:	430a      	orrs	r2, r1
 800e148:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	f042 0201 	orr.w	r2, r2, #1
 800e150:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800e152:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e154:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e156:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e15a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e15c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800e160:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e162:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e166:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e168:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e16a:	d1d8      	bne.n	800e11e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e16c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e170:	605a      	str	r2, [r3, #4]
 800e172:	e7d4      	b.n	800e11e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800e174:	2001      	movs	r0, #1
 800e176:	e7f3      	b.n	800e160 <HAL_I2C_Init+0x8a>

0800e178 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800e178:	4770      	bx	lr

0800e17a <HAL_I2C_DeInit>:
{
 800e17a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800e17c:	4604      	mov	r4, r0
 800e17e:	b198      	cbz	r0, 800e1a8 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800e180:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e182:	2324      	movs	r3, #36	@ 0x24
 800e184:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800e188:	6813      	ldr	r3, [r2, #0]
 800e18a:	f023 0301 	bic.w	r3, r3, #1
 800e18e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800e190:	f7ff fff2 	bl	800e178 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e194:	2000      	movs	r0, #0
 800e196:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800e198:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800e19c:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e1a0:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1a2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800e1a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e1a8:	2001      	movs	r0, #1
 800e1aa:	e7fc      	b.n	800e1a6 <HAL_I2C_DeInit+0x2c>

0800e1ac <HAL_I2C_Mem_Write>:
{
 800e1ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1b2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1ba:	2b20      	cmp	r3, #32
{
 800e1bc:	4616      	mov	r6, r2
 800e1be:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800e1c2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1c6:	f040 80c6 	bne.w	800e356 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800e1ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1cc:	b113      	cbz	r3, 800e1d4 <HAL_I2C_Mem_Write+0x28>
 800e1ce:	f1ba 0f00 	cmp.w	sl, #0
 800e1d2:	d106      	bne.n	800e1e2 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e1d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e1d8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800e1da:	2001      	movs	r0, #1
}
 800e1dc:	b003      	add	sp, #12
 800e1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800e1e2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	f000 80b5 	beq.w	800e356 <HAL_I2C_Mem_Write+0x1aa>
 800e1ec:	f04f 0b01 	mov.w	fp, #1
 800e1f0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800e1f4:	f7ff f994 	bl	800d520 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e1f8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800e1fa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e1fc:	9000      	str	r0, [sp, #0]
 800e1fe:	465a      	mov	r2, fp
 800e200:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e204:	4620      	mov	r0, r4
 800e206:	f7ff ff3b 	bl	800e080 <I2C_WaitOnFlagUntilTimeout>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d1e5      	bne.n	800e1da <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e20e:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800e210:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e212:	fa5f f289 	uxtb.w	r2, r9
 800e216:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e218:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e21c:	2340      	movs	r3, #64	@ 0x40
 800e21e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800e222:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e224:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e226:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800e228:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e22a:	4b4c      	ldr	r3, [pc, #304]	@ (800e35c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800e22c:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e236:	f7ff fe41 	bl	800debc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e23a:	462a      	mov	r2, r5
 800e23c:	4641      	mov	r1, r8
 800e23e:	4620      	mov	r0, r4
 800e240:	f7ff fed2 	bl	800dfe8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e244:	bb18      	cbnz	r0, 800e28e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e246:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e24a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e24c:	d115      	bne.n	800e27a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e24e:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e250:	2200      	movs	r2, #0
 800e252:	2180      	movs	r1, #128	@ 0x80
 800e254:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e256:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e258:	4643      	mov	r3, r8
 800e25a:	9500      	str	r5, [sp, #0]
 800e25c:	f7ff ff10 	bl	800e080 <I2C_WaitOnFlagUntilTimeout>
 800e260:	b9a8      	cbnz	r0, 800e28e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e262:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e264:	b29b      	uxth	r3, r3
 800e266:	2bff      	cmp	r3, #255	@ 0xff
 800e268:	d815      	bhi.n	800e296 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800e26a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e26c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800e270:	b292      	uxth	r2, r2
 800e272:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e274:	b2d2      	uxtb	r2, r2
 800e276:	9000      	str	r0, [sp, #0]
 800e278:	e012      	b.n	800e2a0 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e27a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e27c:	4641      	mov	r1, r8
 800e27e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e280:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e282:	462a      	mov	r2, r5
 800e284:	f7ff feb0 	bl	800dfe8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e288:	b908      	cbnz	r0, 800e28e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	e7df      	b.n	800e24e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800e28e:	2300      	movs	r3, #0
 800e290:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800e294:	e7a1      	b.n	800e1da <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e296:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e298:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e29c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e29e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e2a0:	4639      	mov	r1, r7
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f7ff fe0a 	bl	800debc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e2a8:	462a      	mov	r2, r5
 800e2aa:	4641      	mov	r1, r8
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f7ff fe9b 	bl	800dfe8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d191      	bne.n	800e1da <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e2b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e2b8:	6822      	ldr	r2, [r4, #0]
 800e2ba:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e2be:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800e2c0:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800e2c2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800e2c4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800e2c6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800e2c8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800e2ca:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800e2cc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800e2ce:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e2d0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800e2d2:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	b1b3      	cbz	r3, 800e306 <HAL_I2C_Mem_Write+0x15a>
 800e2d8:	b9aa      	cbnz	r2, 800e306 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e2da:	4643      	mov	r3, r8
 800e2dc:	2180      	movs	r1, #128	@ 0x80
 800e2de:	4620      	mov	r0, r4
 800e2e0:	9500      	str	r5, [sp, #0]
 800e2e2:	f7ff fecd 	bl	800e080 <I2C_WaitOnFlagUntilTimeout>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f47f af77 	bne.w	800e1da <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e2ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	2bff      	cmp	r3, #255	@ 0xff
 800e2f2:	d928      	bls.n	800e346 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e2f4:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e2f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e2fa:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e2fc:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e2fe:	4639      	mov	r1, r7
 800e300:	4620      	mov	r0, r4
 800e302:	f7ff fddb 	bl	800debc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800e306:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e308:	b29b      	uxth	r3, r3
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d1cc      	bne.n	800e2a8 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e30e:	462a      	mov	r2, r5
 800e310:	4641      	mov	r1, r8
 800e312:	4620      	mov	r0, r4
 800e314:	f7ff fe8f 	bl	800e036 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e318:	2800      	cmp	r0, #0
 800e31a:	f47f af5e 	bne.w	800e1da <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	2120      	movs	r1, #32
 800e322:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800e324:	685a      	ldr	r2, [r3, #4]
 800e326:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800e32a:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800e32e:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800e332:	f022 0201 	bic.w	r2, r2, #1
 800e336:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e338:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800e33c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e340:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800e344:	e74a      	b.n	800e1dc <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800e346:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e348:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800e34c:	b292      	uxth	r2, r2
 800e34e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e350:	b2d2      	uxtb	r2, r2
 800e352:	9000      	str	r0, [sp, #0]
 800e354:	e7d3      	b.n	800e2fe <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800e356:	2002      	movs	r0, #2
 800e358:	e740      	b.n	800e1dc <HAL_I2C_Mem_Write+0x30>
 800e35a:	bf00      	nop
 800e35c:	80002000 	.word	0x80002000

0800e360 <HAL_I2C_Mem_Read>:
{
 800e360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e366:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800e36a:	4604      	mov	r4, r0
 800e36c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e36e:	2b20      	cmp	r3, #32
{
 800e370:	4616      	mov	r6, r2
 800e372:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800e376:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e37a:	f040 80c9 	bne.w	800e510 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800e37e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e380:	b113      	cbz	r3, 800e388 <HAL_I2C_Mem_Read+0x28>
 800e382:	f1ba 0f00 	cmp.w	sl, #0
 800e386:	d106      	bne.n	800e396 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e38c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800e38e:	2001      	movs	r0, #1
}
 800e390:	b003      	add	sp, #12
 800e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800e396:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	f000 80b8 	beq.w	800e510 <HAL_I2C_Mem_Read+0x1b0>
 800e3a0:	f04f 0b01 	mov.w	fp, #1
 800e3a4:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800e3a8:	f7ff f8ba 	bl	800d520 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e3ac:	2319      	movs	r3, #25
 800e3ae:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800e3b0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e3b2:	465a      	mov	r2, fp
 800e3b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f7ff fe61 	bl	800e080 <I2C_WaitOnFlagUntilTimeout>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	d1e4      	bne.n	800e38e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e3c4:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800e3c6:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e3c8:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e3ca:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e3ce:	2240      	movs	r2, #64	@ 0x40
 800e3d0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800e3d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e3d6:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e3d8:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800e3da:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e3dc:	4a4d      	ldr	r2, [pc, #308]	@ (800e514 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800e3de:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e3e2:	9200      	str	r2, [sp, #0]
 800e3e4:	fa5f f289 	uxtb.w	r2, r9
 800e3e8:	f7ff fd68 	bl	800debc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3ec:	462a      	mov	r2, r5
 800e3ee:	4641      	mov	r1, r8
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f7ff fdf9 	bl	800dfe8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e3f6:	bb20      	cbnz	r0, 800e442 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e3f8:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e3fc:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e3fe:	d116      	bne.n	800e42e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e400:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e402:	2200      	movs	r2, #0
 800e404:	2140      	movs	r1, #64	@ 0x40
 800e406:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e408:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e40a:	4643      	mov	r3, r8
 800e40c:	9500      	str	r5, [sp, #0]
 800e40e:	f7ff fe37 	bl	800e080 <I2C_WaitOnFlagUntilTimeout>
 800e412:	b9b0      	cbnz	r0, 800e442 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e414:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e416:	b29b      	uxth	r3, r3
 800e418:	2bff      	cmp	r3, #255	@ 0xff
 800e41a:	4b3f      	ldr	r3, [pc, #252]	@ (800e518 <HAL_I2C_Mem_Read+0x1b8>)
 800e41c:	d815      	bhi.n	800e44a <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800e41e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800e420:	b292      	uxth	r2, r2
 800e422:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e424:	b2d2      	uxtb	r2, r2
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e42c:	e012      	b.n	800e454 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e42e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e430:	4641      	mov	r1, r8
 800e432:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e434:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e436:	462a      	mov	r2, r5
 800e438:	f7ff fdd6 	bl	800dfe8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e43c:	b908      	cbnz	r0, 800e442 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	e7de      	b.n	800e400 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800e442:	2300      	movs	r3, #0
 800e444:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800e448:	e7a1      	b.n	800e38e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e44a:	22ff      	movs	r2, #255	@ 0xff
 800e44c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e454:	4639      	mov	r1, r7
 800e456:	4620      	mov	r0, r4
 800e458:	f7ff fd30 	bl	800debc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e45c:	4643      	mov	r3, r8
 800e45e:	2200      	movs	r2, #0
 800e460:	2104      	movs	r1, #4
 800e462:	4620      	mov	r0, r4
 800e464:	9500      	str	r5, [sp, #0]
 800e466:	f7ff fe0b 	bl	800e080 <I2C_WaitOnFlagUntilTimeout>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d18f      	bne.n	800e38e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e46e:	6823      	ldr	r3, [r4, #0]
 800e470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e472:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e474:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800e476:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800e478:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800e47a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800e47c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800e47e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800e480:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800e482:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800e484:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800e486:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800e488:	b29b      	uxth	r3, r3
 800e48a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e48c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e48e:	b29b      	uxth	r3, r3
 800e490:	b1b3      	cbz	r3, 800e4c0 <HAL_I2C_Mem_Read+0x160>
 800e492:	b9aa      	cbnz	r2, 800e4c0 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e494:	4643      	mov	r3, r8
 800e496:	2180      	movs	r1, #128	@ 0x80
 800e498:	4620      	mov	r0, r4
 800e49a:	9500      	str	r5, [sp, #0]
 800e49c:	f7ff fdf0 	bl	800e080 <I2C_WaitOnFlagUntilTimeout>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	f47f af74 	bne.w	800e38e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	2bff      	cmp	r3, #255	@ 0xff
 800e4ac:	d928      	bls.n	800e500 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e4ae:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e4b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e4b4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e4b6:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e4b8:	4639      	mov	r1, r7
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	f7ff fcfe 	bl	800debc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800e4c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1c9      	bne.n	800e45c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e4c8:	462a      	mov	r2, r5
 800e4ca:	4641      	mov	r1, r8
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7ff fdb2 	bl	800e036 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	f47f af5b 	bne.w	800e38e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	2120      	movs	r1, #32
 800e4dc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800e4de:	685a      	ldr	r2, [r3, #4]
 800e4e0:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800e4e4:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800e4e8:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800e4ec:	f022 0201 	bic.w	r2, r2, #1
 800e4f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e4f2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800e4f6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e4fa:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800e4fe:	e747      	b.n	800e390 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800e500:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e502:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800e506:	b292      	uxth	r2, r2
 800e508:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e50a:	b2d2      	uxtb	r2, r2
 800e50c:	9000      	str	r0, [sp, #0]
 800e50e:	e7d3      	b.n	800e4b8 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800e510:	2002      	movs	r0, #2
 800e512:	e73d      	b.n	800e390 <HAL_I2C_Mem_Read+0x30>
 800e514:	80002000 	.word	0x80002000
 800e518:	80002400 	.word	0x80002400

0800e51c <HAL_I2C_GetState>:
  return hi2c->State;
 800e51c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800e520:	4770      	bx	lr

0800e522 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e522:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e524:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e526:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e52a:	3284      	adds	r2, #132	@ 0x84
 800e52c:	1883      	adds	r3, r0, r2
{
 800e52e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e532:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e534:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e538:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800e53a:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e53e:	684c      	ldr	r4, [r1, #4]
 800e540:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e544:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800e548:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e54c:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e54e:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e550:	68c5      	ldr	r5, [r0, #12]
 800e552:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800e556:	443d      	add	r5, r7
 800e558:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e55c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800e55e:	68c6      	ldr	r6, [r0, #12]
 800e560:	68cd      	ldr	r5, [r1, #12]
 800e562:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800e566:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800e568:	689d      	ldr	r5, [r3, #8]
 800e56a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800e56e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800e570:	688d      	ldr	r5, [r1, #8]
 800e572:	68c7      	ldr	r7, [r0, #12]
 800e574:	3501      	adds	r5, #1
 800e576:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800e57a:	443d      	add	r5, r7
 800e57c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800e580:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800e582:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800e584:	691d      	ldr	r5, [r3, #16]
 800e586:	f025 0507 	bic.w	r5, r5, #7
 800e58a:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800e58c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800e58e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800e590:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800e594:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800e598:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800e59c:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800e5a0:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800e5a4:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800e5a8:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800e5ac:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800e5ae:	695d      	ldr	r5, [r3, #20]
 800e5b0:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800e5b4:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800e5b6:	694d      	ldr	r5, [r1, #20]
 800e5b8:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800e5ba:	69dd      	ldr	r5, [r3, #28]
 800e5bc:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800e5c0:	f025 0507 	bic.w	r5, r5, #7
 800e5c4:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800e5c6:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800e5ca:	433d      	orrs	r5, r7
 800e5cc:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800e5ce:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800e5d0:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800e5d2:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800e5d6:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800e5d8:	b31e      	cbz	r6, 800e622 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800e5da:	2e01      	cmp	r6, #1
 800e5dc:	d023      	beq.n	800e626 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800e5de:	1eb5      	subs	r5, r6, #2
 800e5e0:	2d02      	cmp	r5, #2
 800e5e2:	d922      	bls.n	800e62a <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800e5e4:	2e07      	cmp	r6, #7
 800e5e6:	bf14      	ite	ne
 800e5e8:	2501      	movne	r5, #1
 800e5ea:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800e5ec:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800e5ee:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800e5f2:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800e5f6:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800e5f8:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800e5fa:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800e5fc:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800e5fe:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800e600:	436e      	muls	r6, r5
 800e602:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800e606:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800e608:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800e60a:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800e60e:	f024 0407 	bic.w	r4, r4, #7
 800e612:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800e614:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800e616:	5883      	ldr	r3, [r0, r2]
 800e618:	f043 0301 	orr.w	r3, r3, #1
 800e61c:	5083      	str	r3, [r0, r2]
}
 800e61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800e622:	2504      	movs	r5, #4
 800e624:	e7e2      	b.n	800e5ec <LTDC_SetConfig+0xca>
    tmp = 3U;
 800e626:	2503      	movs	r5, #3
 800e628:	e7e0      	b.n	800e5ec <LTDC_SetConfig+0xca>
    tmp = 2U;
 800e62a:	2502      	movs	r5, #2
 800e62c:	e7de      	b.n	800e5ec <LTDC_SetConfig+0xca>

0800e62e <HAL_LTDC_MspInit>:
}
 800e62e:	4770      	bx	lr

0800e630 <HAL_LTDC_Init>:
{
 800e630:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800e632:	4604      	mov	r4, r0
 800e634:	2800      	cmp	r0, #0
 800e636:	d063      	beq.n	800e700 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e638:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800e63c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800e640:	b91b      	cbnz	r3, 800e64a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800e642:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800e646:	f7ff fff2 	bl	800e62e <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e64a:	2302      	movs	r3, #2
 800e64c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	699a      	ldr	r2, [r3, #24]
 800e654:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800e658:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e65a:	6999      	ldr	r1, [r3, #24]
 800e65c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800e660:	4302      	orrs	r2, r0
 800e662:	68e0      	ldr	r0, [r4, #12]
 800e664:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e666:	6920      	ldr	r0, [r4, #16]
 800e668:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e66a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e66c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e66e:	4925      	ldr	r1, [pc, #148]	@ (800e704 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e670:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e672:	689a      	ldr	r2, [r3, #8]
 800e674:	400a      	ands	r2, r1
 800e676:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e678:	689a      	ldr	r2, [r3, #8]
 800e67a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e67e:	69a0      	ldr	r0, [r4, #24]
 800e680:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e682:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e684:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e686:	68da      	ldr	r2, [r3, #12]
 800e688:	400a      	ands	r2, r1
 800e68a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e68c:	68da      	ldr	r2, [r3, #12]
 800e68e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e692:	6a20      	ldr	r0, [r4, #32]
 800e694:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e696:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e698:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e69a:	691a      	ldr	r2, [r3, #16]
 800e69c:	400a      	ands	r2, r1
 800e69e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e6a0:	691a      	ldr	r2, [r3, #16]
 800e6a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e6a6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800e6a8:	4302      	orrs	r2, r0
 800e6aa:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e6ac:	695a      	ldr	r2, [r3, #20]
 800e6ae:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e6b0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e6b2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e6b4:	695a      	ldr	r2, [r3, #20]
 800e6b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e6ba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e6bc:	430a      	orrs	r2, r1
 800e6be:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e6c2:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e6c6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800e6ca:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e6ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e6d0:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800e6d2:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800e6d6:	432a      	orrs	r2, r5
 800e6d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e6dc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e6de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e6e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e6e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e6e6:	f042 0206 	orr.w	r2, r2, #6
 800e6ea:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800e6ec:	699a      	ldr	r2, [r3, #24]
 800e6ee:	f042 0201 	orr.w	r2, r2, #1
 800e6f2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800e6f4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e6f6:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800e6fa:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800e6fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e700:	2001      	movs	r0, #1
 800e702:	e7fc      	b.n	800e6fe <HAL_LTDC_Init+0xce>
 800e704:	f000f800 	.word	0xf000f800

0800e708 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800e708:	4770      	bx	lr

0800e70a <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800e70a:	4770      	bx	lr

0800e70c <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e70c:	6803      	ldr	r3, [r0, #0]
{
 800e70e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e710:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800e712:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800e714:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800e716:	0772      	lsls	r2, r6, #29
 800e718:	d514      	bpl.n	800e744 <HAL_LTDC_IRQHandler+0x38>
 800e71a:	0769      	lsls	r1, r5, #29
 800e71c:	d512      	bpl.n	800e744 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800e71e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e720:	f022 0204 	bic.w	r2, r2, #4
 800e724:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800e726:	2204      	movs	r2, #4
 800e728:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800e72a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800e72e:	f043 0301 	orr.w	r3, r3, #1
 800e732:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800e736:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e738:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800e73c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800e740:	f7ff ffe2 	bl	800e708 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800e744:	07b2      	lsls	r2, r6, #30
 800e746:	d516      	bpl.n	800e776 <HAL_LTDC_IRQHandler+0x6a>
 800e748:	07ab      	lsls	r3, r5, #30
 800e74a:	d514      	bpl.n	800e776 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e74c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800e74e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e752:	f022 0202 	bic.w	r2, r2, #2
 800e756:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800e758:	2202      	movs	r2, #2
 800e75a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800e75c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800e760:	4313      	orrs	r3, r2
 800e762:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e766:	2304      	movs	r3, #4
 800e768:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800e76c:	2300      	movs	r3, #0
 800e76e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800e772:	f7ff ffc9 	bl	800e708 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800e776:	07f0      	lsls	r0, r6, #31
 800e778:	d510      	bpl.n	800e79c <HAL_LTDC_IRQHandler+0x90>
 800e77a:	07e9      	lsls	r1, r5, #31
 800e77c:	d50e      	bpl.n	800e79c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e77e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800e780:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e784:	f022 0201 	bic.w	r2, r2, #1
 800e788:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800e78a:	2201      	movs	r2, #1
 800e78c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800e78e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800e790:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800e794:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800e798:	f003 fe64 	bl	8012464 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800e79c:	0732      	lsls	r2, r6, #28
 800e79e:	d511      	bpl.n	800e7c4 <HAL_LTDC_IRQHandler+0xb8>
 800e7a0:	072b      	lsls	r3, r5, #28
 800e7a2:	d50f      	bpl.n	800e7c4 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800e7a4:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800e7a6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800e7a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e7aa:	f022 0208 	bic.w	r2, r2, #8
 800e7ae:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800e7b0:	2208      	movs	r2, #8
 800e7b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800e7c0:	f7ff ffa3 	bl	800e70a <HAL_LTDC_ReloadEventCallback>
}
 800e7c4:	bd70      	pop	{r4, r5, r6, pc}

0800e7c6 <HAL_LTDC_ConfigLayer>:
{
 800e7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800e7ca:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	460f      	mov	r7, r1
 800e7d2:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	f04f 0002 	mov.w	r0, #2
 800e7da:	d01f      	beq.n	800e81c <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e7dc:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800e7de:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e7e2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e7e4:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e7e8:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800e7ec:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e7f0:	3438      	adds	r4, #56	@ 0x38
 800e7f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7fe:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800e800:	4630      	mov	r0, r6
 800e802:	4662      	mov	r2, ip
 800e804:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e806:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800e808:	f7ff fe8b 	bl	800e522 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e80c:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800e80e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e810:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800e814:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800e818:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800e81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e820 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800e820:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
{
 800e824:	4603      	mov	r3, r0
 800e826:	2002      	movs	r0, #2
  __HAL_LOCK(hltdc);
 800e828:	2a01      	cmp	r2, #1
 800e82a:	d012      	beq.n	800e852 <HAL_LTDC_ProgramLineEvent+0x32>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e82c:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e82e:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e832:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800e834:	f020 0001 	bic.w	r0, r0, #1
 800e838:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800e83a:	4806      	ldr	r0, [pc, #24]	@ (800e854 <HAL_LTDC_ProgramLineEvent+0x34>)
 800e83c:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_UNLOCK(hltdc);
 800e83e:	2000      	movs	r0, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800e840:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800e842:	f041 0101 	orr.w	r1, r1, #1
 800e846:	6351      	str	r1, [r2, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800e848:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 800e84a:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
 800e84e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
}
 800e852:	4770      	bx	lr
 800e854:	40016800 	.word	0x40016800

0800e858 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800e858:	4b19      	ldr	r3, [pc, #100]	@ (800e8c0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800e85a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800e85c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e85e:	4c19      	ldr	r4, [pc, #100]	@ (800e8c4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800e860:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800e864:	641a      	str	r2, [r3, #64]	@ 0x40
 800e866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e86c:	9301      	str	r3, [sp, #4]
 800e86e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e870:	6823      	ldr	r3, [r4, #0]
 800e872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e876:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e878:	f7fe fe52 	bl	800d520 <HAL_GetTick>
 800e87c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e87e:	6863      	ldr	r3, [r4, #4]
 800e880:	03da      	lsls	r2, r3, #15
 800e882:	d50c      	bpl.n	800e89e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e884:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e886:	4d0f      	ldr	r5, [pc, #60]	@ (800e8c4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e88c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800e88e:	f7fe fe47 	bl	800d520 <HAL_GetTick>
 800e892:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e894:	686b      	ldr	r3, [r5, #4]
 800e896:	039b      	lsls	r3, r3, #14
 800e898:	d50a      	bpl.n	800e8b0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800e89a:	2000      	movs	r0, #0
 800e89c:	e006      	b.n	800e8ac <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e89e:	f7fe fe3f 	bl	800d520 <HAL_GetTick>
 800e8a2:	1b40      	subs	r0, r0, r5
 800e8a4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800e8a8:	d9e9      	bls.n	800e87e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800e8aa:	2003      	movs	r0, #3
}
 800e8ac:	b003      	add	sp, #12
 800e8ae:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e8b0:	f7fe fe36 	bl	800d520 <HAL_GetTick>
 800e8b4:	1b00      	subs	r0, r0, r4
 800e8b6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800e8ba:	d9eb      	bls.n	800e894 <HAL_PWREx_EnableOverDrive+0x3c>
 800e8bc:	e7f5      	b.n	800e8aa <HAL_PWREx_EnableOverDrive+0x52>
 800e8be:	bf00      	nop
 800e8c0:	40023800 	.word	0x40023800
 800e8c4:	40007000 	.word	0x40007000

0800e8c8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e8cc:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800e8ce:	b136      	cbz	r6, 800e8de <QSPI_Config+0x16>
 800e8d0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800e8d4:	d003      	beq.n	800e8de <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e8d6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800e8d8:	6804      	ldr	r4, [r0, #0]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e8de:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e8e2:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e8e6:	f1ba 0f00 	cmp.w	sl, #0
 800e8ea:	d04c      	beq.n	800e986 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e8ec:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e8ee:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e8f0:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800e8f4:	ea4a 0406 	orr.w	r4, sl, r6
 800e8f8:	680b      	ldr	r3, [r1, #0]
 800e8fa:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800e8fe:	ea44 0a02 	orr.w	sl, r4, r2
 800e902:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e906:	f1be 0f00 	cmp.w	lr, #0
 800e90a:	d024      	beq.n	800e956 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e90c:	688e      	ldr	r6, [r1, #8]
 800e90e:	ea4a 040e 	orr.w	r4, sl, lr
 800e912:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e914:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e916:	b19f      	cbz	r7, 800e940 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e918:	433b      	orrs	r3, r7
 800e91a:	4303      	orrs	r3, r0
 800e91c:	68c8      	ldr	r0, [r1, #12]
 800e91e:	ea43 0309 	orr.w	r3, r3, r9
 800e922:	ea43 0308 	orr.w	r3, r3, r8
 800e926:	4333      	orrs	r3, r6
 800e928:	4303      	orrs	r3, r0
 800e92a:	ea43 030c 	orr.w	r3, r3, ip
 800e92e:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e930:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e934:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e936:	d001      	beq.n	800e93c <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e938:	684b      	ldr	r3, [r1, #4]
 800e93a:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800e93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e940:	4303      	orrs	r3, r0
 800e942:	ea43 0309 	orr.w	r3, r3, r9
 800e946:	ea43 0308 	orr.w	r3, r3, r8
 800e94a:	4333      	orrs	r3, r6
 800e94c:	ea43 030c 	orr.w	r3, r3, ip
 800e950:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e952:	616b      	str	r3, [r5, #20]
 800e954:	e7f2      	b.n	800e93c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e956:	b167      	cbz	r7, 800e972 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e958:	433b      	orrs	r3, r7
 800e95a:	4303      	orrs	r3, r0
 800e95c:	68c8      	ldr	r0, [r1, #12]
 800e95e:	ea43 0309 	orr.w	r3, r3, r9
 800e962:	ea43 0308 	orr.w	r3, r3, r8
 800e966:	4303      	orrs	r3, r0
 800e968:	ea43 030c 	orr.w	r3, r3, ip
 800e96c:	ea43 030a 	orr.w	r3, r3, sl
 800e970:	e7de      	b.n	800e930 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e972:	4303      	orrs	r3, r0
 800e974:	ea43 0309 	orr.w	r3, r3, r9
 800e978:	ea43 0408 	orr.w	r4, r3, r8
 800e97c:	ea44 030c 	orr.w	r3, r4, ip
 800e980:	ea43 030a 	orr.w	r3, r3, sl
 800e984:	e7e5      	b.n	800e952 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e986:	f1be 0f00 	cmp.w	lr, #0
 800e98a:	d02c      	beq.n	800e9e6 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e98c:	ea46 050e 	orr.w	r5, r6, lr
 800e990:	688b      	ldr	r3, [r1, #8]
 800e992:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e994:	694e      	ldr	r6, [r1, #20]
 800e996:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e998:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e99a:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e99e:	04b6      	lsls	r6, r6, #18
 800e9a0:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e9a2:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e9a6:	b1a7      	cbz	r7, 800e9d2 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e9a8:	433b      	orrs	r3, r7
 800e9aa:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e9ac:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e9b0:	ea43 0308 	orr.w	r3, r3, r8
 800e9b4:	ea43 030e 	orr.w	r3, r3, lr
 800e9b8:	ea43 030c 	orr.w	r3, r3, ip
 800e9bc:	ea43 0300 	orr.w	r3, r3, r0
 800e9c0:	ea43 0306 	orr.w	r3, r3, r6
 800e9c4:	ea43 0305 	orr.w	r3, r3, r5
 800e9c8:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e9ca:	d0b7      	beq.n	800e93c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e9cc:	684b      	ldr	r3, [r1, #4]
 800e9ce:	61a3      	str	r3, [r4, #24]
 800e9d0:	e7b4      	b.n	800e93c <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e9d2:	ea43 0308 	orr.w	r3, r3, r8
 800e9d6:	ea43 030e 	orr.w	r3, r3, lr
 800e9da:	ea43 030c 	orr.w	r3, r3, ip
 800e9de:	4333      	orrs	r3, r6
 800e9e0:	432b      	orrs	r3, r5
 800e9e2:	6163      	str	r3, [r4, #20]
 800e9e4:	e7aa      	b.n	800e93c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e9e6:	b1d7      	cbz	r7, 800ea1e <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e9e8:	ea46 0307 	orr.w	r3, r6, r7
 800e9ec:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800e9ee:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e9f0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e9f4:	ea43 0302 	orr.w	r3, r3, r2
 800e9f8:	ea43 0304 	orr.w	r3, r3, r4
 800e9fc:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800e9fe:	ea43 0304 	orr.w	r3, r3, r4
 800ea02:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800ea04:	ea43 0304 	orr.w	r3, r3, r4
 800ea08:	68cc      	ldr	r4, [r1, #12]
 800ea0a:	ea43 0304 	orr.w	r3, r3, r4
 800ea0e:	694c      	ldr	r4, [r1, #20]
 800ea10:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800ea14:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ea16:	d091      	beq.n	800e93c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ea18:	684b      	ldr	r3, [r1, #4]
 800ea1a:	6183      	str	r3, [r0, #24]
 800ea1c:	e78e      	b.n	800e93c <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800ea1e:	2e00      	cmp	r6, #0
 800ea20:	d08c      	beq.n	800e93c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ea22:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800ea24:	6800      	ldr	r0, [r0, #0]
 800ea26:	4333      	orrs	r3, r6
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800ea30:	4313      	orrs	r3, r2
 800ea32:	694a      	ldr	r2, [r1, #20]
 800ea34:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800ea38:	6143      	str	r3, [r0, #20]
}
 800ea3a:	e77f      	b.n	800e93c <QSPI_Config+0x74>

0800ea3c <QSPI_WaitFlagStateUntilTimeout>:
{
 800ea3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ea44:	4604      	mov	r4, r0
 800ea46:	460e      	mov	r6, r1
 800ea48:	4615      	mov	r5, r2
 800ea4a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ea4c:	6822      	ldr	r2, [r4, #0]
 800ea4e:	6893      	ldr	r3, [r2, #8]
 800ea50:	4233      	tst	r3, r6
 800ea52:	bf14      	ite	ne
 800ea54:	2301      	movne	r3, #1
 800ea56:	2300      	moveq	r3, #0
 800ea58:	42ab      	cmp	r3, r5
 800ea5a:	d101      	bne.n	800ea60 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	e012      	b.n	800ea86 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800ea60:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ea64:	d0f3      	beq.n	800ea4e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea66:	f7fe fd5b 	bl	800d520 <HAL_GetTick>
 800ea6a:	1bc0      	subs	r0, r0, r7
 800ea6c:	4540      	cmp	r0, r8
 800ea6e:	d802      	bhi.n	800ea76 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800ea70:	f1b8 0f00 	cmp.w	r8, #0
 800ea74:	d1ea      	bne.n	800ea4c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ea76:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ea78:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ea7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ea7e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ea80:	f043 0301 	orr.w	r3, r3, #1
 800ea84:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800ea86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea8a <HAL_QSPI_MspInit>:
}
 800ea8a:	4770      	bx	lr

0800ea8c <HAL_QSPI_Init>:
{
 800ea8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ea90:	f7fe fd46 	bl	800d520 <HAL_GetTick>
 800ea94:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800ea96:	2c00      	cmp	r4, #0
 800ea98:	d046      	beq.n	800eb28 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ea9a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ea9e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800eaa2:	b93b      	cbnz	r3, 800eab4 <HAL_QSPI_Init+0x28>
    HAL_QSPI_MspInit(hqspi);
 800eaa4:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800eaa6:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_QSPI_MspInit(hqspi);
 800eaaa:	f7ff ffee 	bl	800ea8a <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800eaae:	f241 3388 	movw	r3, #5000	@ 0x1388
 800eab2:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800eab4:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800eab6:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800eab8:	68a3      	ldr	r3, [r4, #8]
 800eaba:	680a      	ldr	r2, [r1, #0]
 800eabc:	3b01      	subs	r3, #1
 800eabe:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800eac2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800eac6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800eac8:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800eaca:	2200      	movs	r2, #0
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	2120      	movs	r1, #32
 800ead0:	462b      	mov	r3, r5
 800ead2:	f7ff ffb3 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800ead6:	bb10      	cbnz	r0, 800eb1e <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ead8:	6822      	ldr	r2, [r4, #0]
 800eada:	69e5      	ldr	r5, [r4, #28]
 800eadc:	68e3      	ldr	r3, [r4, #12]
 800eade:	6811      	ldr	r1, [r2, #0]
 800eae0:	432b      	orrs	r3, r5
 800eae2:	6a25      	ldr	r5, [r4, #32]
 800eae4:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800eae8:	432b      	orrs	r3, r5
 800eaea:	6865      	ldr	r5, [r4, #4]
 800eaec:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800eaf0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800eaf4:	430b      	orrs	r3, r1
 800eaf6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800eaf8:	6855      	ldr	r5, [r2, #4]
 800eafa:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800eafe:	430b      	orrs	r3, r1
 800eb00:	6921      	ldr	r1, [r4, #16]
 800eb02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800eb06:	4909      	ldr	r1, [pc, #36]	@ (800eb2c <HAL_QSPI_Init+0xa0>)
 800eb08:	4029      	ands	r1, r5
 800eb0a:	430b      	orrs	r3, r1
 800eb0c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800eb0e:	6813      	ldr	r3, [r2, #0]
 800eb10:	f043 0301 	orr.w	r3, r3, #1
 800eb14:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800eb16:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800eb18:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800eb1a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800eb1e:	2300      	movs	r3, #0
 800eb20:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800eb24:	b003      	add	sp, #12
 800eb26:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800eb28:	2001      	movs	r0, #1
 800eb2a:	e7fb      	b.n	800eb24 <HAL_QSPI_Init+0x98>
 800eb2c:	ffe0f8fe 	.word	0xffe0f8fe

0800eb30 <HAL_QSPI_MspDeInit>:
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
 800eb30:	4770      	bx	lr

0800eb32 <HAL_QSPI_DeInit>:
{
 800eb32:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 800eb34:	4604      	mov	r4, r0
 800eb36:	b168      	cbz	r0, 800eb54 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 800eb38:	6802      	ldr	r2, [r0, #0]
 800eb3a:	6813      	ldr	r3, [r2, #0]
 800eb3c:	f023 0301 	bic.w	r3, r3, #1
 800eb40:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 800eb42:	f7ff fff5 	bl	800eb30 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800eb46:	2000      	movs	r0, #0
 800eb48:	6460      	str	r0, [r4, #68]	@ 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 800eb4a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800eb4e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800eb52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800eb54:	2001      	movs	r0, #1
 800eb56:	e7fc      	b.n	800eb52 <HAL_QSPI_DeInit+0x20>

0800eb58 <HAL_QSPI_Command>:
{
 800eb58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb5c:	4604      	mov	r4, r0
 800eb5e:	468a      	mov	sl, r1
 800eb60:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800eb62:	f7fe fcdd 	bl	800d520 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800eb66:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800eb6a:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d036      	beq.n	800ebde <HAL_QSPI_Command+0x86>
 800eb70:	2301      	movs	r3, #1
 800eb72:	2602      	movs	r6, #2
 800eb74:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800eb78:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	fa5f f983 	uxtb.w	r9, r3
 800eb82:	d128      	bne.n	800ebd6 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800eb84:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800eb86:	4603      	mov	r3, r0
 800eb88:	2120      	movs	r1, #32
 800eb8a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800eb8c:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800eb8e:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800eb92:	f8cd 8000 	str.w	r8, [sp]
 800eb96:	f7ff ff51 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800eb9a:	4605      	mov	r5, r0
 800eb9c:	b9a0      	cbnz	r0, 800ebc8 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800eb9e:	4602      	mov	r2, r0
 800eba0:	4651      	mov	r1, sl
 800eba2:	4620      	mov	r0, r4
 800eba4:	f7ff fe90 	bl	800e8c8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800eba8:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800ebac:	b953      	cbnz	r3, 800ebc4 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ebae:	463b      	mov	r3, r7
 800ebb0:	464a      	mov	r2, r9
 800ebb2:	4631      	mov	r1, r6
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f8cd 8000 	str.w	r8, [sp]
 800ebba:	f7ff ff3f 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800ebbe:	b960      	cbnz	r0, 800ebda <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ebc0:	6823      	ldr	r3, [r4, #0]
 800ebc2:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800ebc4:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ebce:	4628      	mov	r0, r5
 800ebd0:	b002      	add	sp, #8
 800ebd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800ebd6:	4635      	mov	r5, r6
 800ebd8:	e7f6      	b.n	800ebc8 <HAL_QSPI_Command+0x70>
 800ebda:	4605      	mov	r5, r0
 800ebdc:	e7f4      	b.n	800ebc8 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800ebde:	2502      	movs	r5, #2
 800ebe0:	e7f5      	b.n	800ebce <HAL_QSPI_Command+0x76>

0800ebe2 <HAL_QSPI_AutoPolling>:
{
 800ebe2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	461f      	mov	r7, r3
 800ebea:	4689      	mov	r9, r1
 800ebec:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800ebee:	f7fe fc97 	bl	800d520 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ebf2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ebf6:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d041      	beq.n	800ec80 <HAL_QSPI_AutoPolling+0x9e>
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ec02:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	fa5f f883 	uxtb.w	r8, r3
 800ec0c:	d136      	bne.n	800ec7c <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800ec0e:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ec10:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ec12:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ec14:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800ec16:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	9700      	str	r7, [sp, #0]
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f7ff ff0c 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ec24:	bb20      	cbnz	r0, 800ec70 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800ec26:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ec28:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800ec2a:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ec2c:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800ec2e:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800ec30:	686b      	ldr	r3, [r5, #4]
 800ec32:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800ec34:	68ab      	ldr	r3, [r5, #8]
 800ec36:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ec38:	6813      	ldr	r3, [r2, #0]
 800ec3a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ec3e:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ec40:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ec42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ec46:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ec48:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800ec4c:	68eb      	ldr	r3, [r5, #12]
 800ec4e:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ec52:	f7ff fe39 	bl	800e8c8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ec56:	4633      	mov	r3, r6
 800ec58:	4642      	mov	r2, r8
 800ec5a:	2108      	movs	r1, #8
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	9700      	str	r7, [sp, #0]
 800ec60:	f7ff feec 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800ec64:	b920      	cbnz	r0, 800ec70 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	2208      	movs	r2, #8
 800ec6a:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800ec6c:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ec70:	2300      	movs	r3, #0
 800ec72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ec76:	b003      	add	sp, #12
 800ec78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800ec7c:	2002      	movs	r0, #2
 800ec7e:	e7f7      	b.n	800ec70 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800ec80:	2002      	movs	r0, #2
 800ec82:	e7f8      	b.n	800ec76 <HAL_QSPI_AutoPolling+0x94>

0800ec84 <HAL_QSPI_MemoryMapped>:
{
 800ec84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec86:	4604      	mov	r4, r0
 800ec88:	4616      	mov	r6, r2
 800ec8a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800ec8c:	f7fe fc48 	bl	800d520 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ec90:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ec94:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800ec96:	2a01      	cmp	r2, #1
 800ec98:	d033      	beq.n	800ed02 <HAL_QSPI_MemoryMapped+0x7e>
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800eca0:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800eca4:	2a01      	cmp	r2, #1
 800eca6:	d12a      	bne.n	800ecfe <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800eca8:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ecaa:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ecac:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ecae:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ecb0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ecb4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ecb6:	9100      	str	r1, [sp, #0]
 800ecb8:	2120      	movs	r1, #32
 800ecba:	f7ff febf 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ecbe:	4605      	mov	r5, r0
 800ecc0:	b9b8      	cbnz	r0, 800ecf2 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ecc2:	6823      	ldr	r3, [r4, #0]
 800ecc4:	6872      	ldr	r2, [r6, #4]
 800ecc6:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ecc8:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ecca:	f020 0008 	bic.w	r0, r0, #8
 800ecce:	ea40 0002 	orr.w	r0, r0, r2
 800ecd2:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ecd4:	d107      	bne.n	800ece6 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800ecd6:	6832      	ldr	r2, [r6, #0]
 800ecd8:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800ecda:	2210      	movs	r2, #16
 800ecdc:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800ece4:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800ece6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800ecea:	4639      	mov	r1, r7
 800ecec:	4620      	mov	r0, r4
 800ecee:	f7ff fdeb 	bl	800e8c8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	b003      	add	sp, #12
 800ecfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800ecfe:	2502      	movs	r5, #2
 800ed00:	e7f7      	b.n	800ecf2 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800ed02:	2502      	movs	r5, #2
 800ed04:	e7f8      	b.n	800ecf8 <HAL_QSPI_MemoryMapped+0x74>

0800ed06 <HAL_QSPI_Abort>:
{
 800ed06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed08:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ed0a:	f7fe fc09 	bl	800d520 <HAL_GetTick>
 800ed0e:	4605      	mov	r5, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800ed10:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ed14:	0798      	lsls	r0, r3, #30
 800ed16:	d534      	bpl.n	800ed82 <HAL_QSPI_Abort+0x7c>
    __HAL_UNLOCK(hqspi);
 800ed18:	2300      	movs	r3, #0
 800ed1a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	0751      	lsls	r1, r2, #29
 800ed24:	d507      	bpl.n	800ed36 <HAL_QSPI_Abort+0x30>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ed26:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800ed28:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ed2a:	f022 0204 	bic.w	r2, r2, #4
 800ed2e:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800ed30:	f7fe fd7a 	bl	800d828 <HAL_DMA_Abort>
      if(status != HAL_OK)
 800ed34:	bb40      	cbnz	r0, 800ed88 <HAL_QSPI_Abort+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800ed36:	2000      	movs	r0, #0
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	689a      	ldr	r2, [r3, #8]
 800ed3c:	0692      	lsls	r2, r2, #26
 800ed3e:	d528      	bpl.n	800ed92 <HAL_QSPI_Abort+0x8c>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ed40:	681a      	ldr	r2, [r3, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800ed42:	2102      	movs	r1, #2
 800ed44:	4620      	mov	r0, r4
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ed46:	f042 0202 	orr.w	r2, r2, #2
 800ed4a:	601a      	str	r2, [r3, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ed50:	9300      	str	r3, [sp, #0]
 800ed52:	462b      	mov	r3, r5
 800ed54:	f7ff fe72 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800ed58:	b9a0      	cbnz	r0, 800ed84 <HAL_QSPI_Abort+0x7e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ed5a:	6823      	ldr	r3, [r4, #0]
 800ed5c:	2202      	movs	r2, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ed5e:	2120      	movs	r1, #32
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ed60:	60da      	str	r2, [r3, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ed62:	4602      	mov	r2, r0
 800ed64:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ed66:	4620      	mov	r0, r4
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	462b      	mov	r3, r5
 800ed6c:	f7ff fe66 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800ed70:	b940      	cbnz	r0, 800ed84 <HAL_QSPI_Abort+0x7e>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800ed72:	6822      	ldr	r2, [r4, #0]
 800ed74:	6953      	ldr	r3, [r2, #20]
 800ed76:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800ed7a:	6153      	str	r3, [r2, #20]
        hqspi->State = HAL_QSPI_STATE_READY;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_StatusTypeDef status = HAL_OK;
 800ed82:	2000      	movs	r0, #0
}
 800ed84:	b003      	add	sp, #12
 800ed86:	bd30      	pop	{r4, r5, pc}
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800ed88:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ed8a:	f043 0304 	orr.w	r3, r3, #4
 800ed8e:	6463      	str	r3, [r4, #68]	@ 0x44
 800ed90:	e7d2      	b.n	800ed38 <HAL_QSPI_Abort+0x32>
      hqspi->State = HAL_QSPI_STATE_READY;
 800ed92:	2301      	movs	r3, #1
 800ed94:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ed98:	e7f4      	b.n	800ed84 <HAL_QSPI_Abort+0x7e>

0800ed9a <HAL_QSPI_Transmit>:
{
 800ed9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ed9e:	4604      	mov	r4, r0
 800eda0:	4688      	mov	r8, r1
 800eda2:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800eda4:	f7fe fbbc 	bl	800d520 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800eda8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800edac:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800edae:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d04f      	beq.n	800ee54 <HAL_QSPI_Transmit+0xba>
 800edb4:	2301      	movs	r3, #1
 800edb6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800edba:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	b2d8      	uxtb	r0, r3
 800edc2:	d145      	bne.n	800ee50 <HAL_QSPI_Transmit+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800edc4:	2300      	movs	r3, #0
 800edc6:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800edc8:	f1b8 0f00 	cmp.w	r8, #0
 800edcc:	d03b      	beq.n	800ee46 <HAL_QSPI_Transmit+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800edce:	2312      	movs	r3, #18
 800edd0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800edd4:	692b      	ldr	r3, [r5, #16]
 800edd6:	3301      	adds	r3, #1
 800edd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800edda:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800eddc:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ede0:	3301      	adds	r3, #1
 800ede2:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ede4:	696b      	ldr	r3, [r5, #20]
 800ede6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800edea:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800edec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800edee:	b9b3      	cbnz	r3, 800ee1e <HAL_QSPI_Transmit+0x84>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800edf0:	4633      	mov	r3, r6
 800edf2:	2201      	movs	r2, #1
 800edf4:	2102      	movs	r1, #2
 800edf6:	4620      	mov	r0, r4
 800edf8:	9700      	str	r7, [sp, #0]
 800edfa:	f7ff fe1f 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800edfe:	b928      	cbnz	r0, 800ee0c <HAL_QSPI_Transmit+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ee00:	6823      	ldr	r3, [r4, #0]
 800ee02:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 800ee04:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ee06:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 800ee08:	f7ff ff7d 	bl	800ed06 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ee12:	2300      	movs	r3, #0
 800ee14:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ee18:	b002      	add	sp, #8
 800ee1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800ee1e:	4633      	mov	r3, r6
 800ee20:	2201      	movs	r2, #1
 800ee22:	2104      	movs	r1, #4
 800ee24:	4620      	mov	r0, r4
 800ee26:	9700      	str	r7, [sp, #0]
 800ee28:	f7ff fe08 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d1ed      	bne.n	800ee0c <HAL_QSPI_Transmit+0x72>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ee30:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800ee38:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800ee3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ee40:	3b01      	subs	r3, #1
 800ee42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ee44:	e7d2      	b.n	800edec <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ee46:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ee48:	f043 0308 	orr.w	r3, r3, #8
 800ee4c:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800ee4e:	e7e0      	b.n	800ee12 <HAL_QSPI_Transmit+0x78>
    status = HAL_BUSY;
 800ee50:	2002      	movs	r0, #2
 800ee52:	e7de      	b.n	800ee12 <HAL_QSPI_Transmit+0x78>
  __HAL_LOCK(hqspi);
 800ee54:	2002      	movs	r0, #2
 800ee56:	e7df      	b.n	800ee18 <HAL_QSPI_Transmit+0x7e>

0800ee58 <HAL_QSPI_Receive>:
{
 800ee58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	4616      	mov	r6, r2
 800ee60:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800ee62:	f7fe fb5d 	bl	800d520 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ee66:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800ee68:	4607      	mov	r7, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ee6a:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800ee6c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d052      	beq.n	800ef1a <HAL_QSPI_Receive+0xc2>
 800ee74:	2301      	movs	r3, #1
 800ee76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ee7a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	b2d8      	uxtb	r0, r3
 800ee82:	d148      	bne.n	800ef16 <HAL_QSPI_Receive+0xbe>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ee84:	2300      	movs	r3, #0
 800ee86:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800ee88:	f1b8 0f00 	cmp.w	r8, #0
 800ee8c:	d03e      	beq.n	800ef0c <HAL_QSPI_Receive+0xb4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ee8e:	2322      	movs	r3, #34	@ 0x22
 800ee90:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ee94:	692b      	ldr	r3, [r5, #16]
 800ee96:	3301      	adds	r3, #1
 800ee98:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ee9a:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800ee9c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800eea0:	3301      	adds	r3, #1
 800eea2:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800eea4:	6969      	ldr	r1, [r5, #20]
 800eea6:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800eeaa:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800eeae:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800eeb0:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800eeb2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800eeb4:	b9b3      	cbnz	r3, 800eee4 <HAL_QSPI_Receive+0x8c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800eeb6:	463b      	mov	r3, r7
 800eeb8:	2201      	movs	r2, #1
 800eeba:	2102      	movs	r1, #2
 800eebc:	4620      	mov	r0, r4
 800eebe:	9600      	str	r6, [sp, #0]
 800eec0:	f7ff fdbc 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800eec4:	b928      	cbnz	r0, 800eed2 <HAL_QSPI_Receive+0x7a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800eec6:	6823      	ldr	r3, [r4, #0]
 800eec8:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 800eeca:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800eecc:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 800eece:	f7ff ff1a 	bl	800ed06 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 800eed2:	2301      	movs	r3, #1
 800eed4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800eed8:	2300      	movs	r3, #0
 800eeda:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800eede:	b002      	add	sp, #8
 800eee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800eee4:	463b      	mov	r3, r7
 800eee6:	2201      	movs	r2, #1
 800eee8:	2106      	movs	r1, #6
 800eeea:	4620      	mov	r0, r4
 800eeec:	9600      	str	r6, [sp, #0]
 800eeee:	f7ff fda5 	bl	800ea3c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d1ed      	bne.n	800eed2 <HAL_QSPI_Receive+0x7a>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800eef6:	f895 2020 	ldrb.w	r2, [r5, #32]
 800eefa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eefc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800eefe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef00:	3301      	adds	r3, #1
 800ef02:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800ef04:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ef06:	3b01      	subs	r3, #1
 800ef08:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ef0a:	e7d2      	b.n	800eeb2 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ef0c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ef0e:	f043 0308 	orr.w	r3, r3, #8
 800ef12:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800ef14:	e7e0      	b.n	800eed8 <HAL_QSPI_Receive+0x80>
    status = HAL_BUSY;
 800ef16:	2002      	movs	r0, #2
 800ef18:	e7de      	b.n	800eed8 <HAL_QSPI_Receive+0x80>
  __HAL_LOCK(hqspi);
 800ef1a:	2002      	movs	r0, #2
 800ef1c:	e7df      	b.n	800eede <HAL_QSPI_Receive+0x86>
	...

0800ef20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ef20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ef24:	4604      	mov	r4, r0
 800ef26:	b340      	cbz	r0, 800ef7a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ef28:	6803      	ldr	r3, [r0, #0]
 800ef2a:	07de      	lsls	r6, r3, #31
 800ef2c:	d410      	bmi.n	800ef50 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ef2e:	6823      	ldr	r3, [r4, #0]
 800ef30:	079d      	lsls	r5, r3, #30
 800ef32:	d461      	bmi.n	800eff8 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ef34:	6823      	ldr	r3, [r4, #0]
 800ef36:	0719      	lsls	r1, r3, #28
 800ef38:	f100 80a6 	bmi.w	800f088 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ef3c:	6823      	ldr	r3, [r4, #0]
 800ef3e:	075a      	lsls	r2, r3, #29
 800ef40:	f100 80c7 	bmi.w	800f0d2 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ef44:	69a2      	ldr	r2, [r4, #24]
 800ef46:	2a00      	cmp	r2, #0
 800ef48:	f040 8130 	bne.w	800f1ac <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	e02c      	b.n	800efaa <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ef50:	4b94      	ldr	r3, [pc, #592]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800ef52:	689a      	ldr	r2, [r3, #8]
 800ef54:	f002 020c 	and.w	r2, r2, #12
 800ef58:	2a04      	cmp	r2, #4
 800ef5a:	d007      	beq.n	800ef6c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ef5c:	689a      	ldr	r2, [r3, #8]
 800ef5e:	f002 020c 	and.w	r2, r2, #12
 800ef62:	2a08      	cmp	r2, #8
 800ef64:	d10b      	bne.n	800ef7e <HAL_RCC_OscConfig+0x5e>
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	0259      	lsls	r1, r3, #9
 800ef6a:	d508      	bpl.n	800ef7e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ef6c:	4b8d      	ldr	r3, [pc, #564]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	039a      	lsls	r2, r3, #14
 800ef72:	d5dc      	bpl.n	800ef2e <HAL_RCC_OscConfig+0xe>
 800ef74:	6863      	ldr	r3, [r4, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1d9      	bne.n	800ef2e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800ef7a:	2001      	movs	r0, #1
 800ef7c:	e015      	b.n	800efaa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ef7e:	6863      	ldr	r3, [r4, #4]
 800ef80:	4d88      	ldr	r5, [pc, #544]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800ef82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef86:	d113      	bne.n	800efb0 <HAL_RCC_OscConfig+0x90>
 800ef88:	682b      	ldr	r3, [r5, #0]
 800ef8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ef8e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ef90:	f7fe fac6 	bl	800d520 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef94:	4e83      	ldr	r6, [pc, #524]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 800ef96:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef98:	6833      	ldr	r3, [r6, #0]
 800ef9a:	039b      	lsls	r3, r3, #14
 800ef9c:	d4c7      	bmi.n	800ef2e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ef9e:	f7fe fabf 	bl	800d520 <HAL_GetTick>
 800efa2:	1b40      	subs	r0, r0, r5
 800efa4:	2864      	cmp	r0, #100	@ 0x64
 800efa6:	d9f7      	bls.n	800ef98 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800efa8:	2003      	movs	r0, #3
}
 800efaa:	b002      	add	sp, #8
 800efac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800efb0:	b99b      	cbnz	r3, 800efda <HAL_RCC_OscConfig+0xba>
 800efb2:	682b      	ldr	r3, [r5, #0]
 800efb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800efb8:	602b      	str	r3, [r5, #0]
 800efba:	682b      	ldr	r3, [r5, #0]
 800efbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800efc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800efc2:	f7fe faad 	bl	800d520 <HAL_GetTick>
 800efc6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800efc8:	682b      	ldr	r3, [r5, #0]
 800efca:	039f      	lsls	r7, r3, #14
 800efcc:	d5af      	bpl.n	800ef2e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800efce:	f7fe faa7 	bl	800d520 <HAL_GetTick>
 800efd2:	1b80      	subs	r0, r0, r6
 800efd4:	2864      	cmp	r0, #100	@ 0x64
 800efd6:	d9f7      	bls.n	800efc8 <HAL_RCC_OscConfig+0xa8>
 800efd8:	e7e6      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800efda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800efde:	682b      	ldr	r3, [r5, #0]
 800efe0:	d103      	bne.n	800efea <HAL_RCC_OscConfig+0xca>
 800efe2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800efe6:	602b      	str	r3, [r5, #0]
 800efe8:	e7ce      	b.n	800ef88 <HAL_RCC_OscConfig+0x68>
 800efea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800efee:	602b      	str	r3, [r5, #0]
 800eff0:	682b      	ldr	r3, [r5, #0]
 800eff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eff6:	e7ca      	b.n	800ef8e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800eff8:	4b6a      	ldr	r3, [pc, #424]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800effa:	689a      	ldr	r2, [r3, #8]
 800effc:	f012 0f0c 	tst.w	r2, #12
 800f000:	d007      	beq.n	800f012 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f002:	689a      	ldr	r2, [r3, #8]
 800f004:	f002 020c 	and.w	r2, r2, #12
 800f008:	2a08      	cmp	r2, #8
 800f00a:	d111      	bne.n	800f030 <HAL_RCC_OscConfig+0x110>
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	025d      	lsls	r5, r3, #9
 800f010:	d40e      	bmi.n	800f030 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f012:	4a64      	ldr	r2, [pc, #400]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800f014:	6813      	ldr	r3, [r2, #0]
 800f016:	0799      	lsls	r1, r3, #30
 800f018:	d502      	bpl.n	800f020 <HAL_RCC_OscConfig+0x100>
 800f01a:	68e3      	ldr	r3, [r4, #12]
 800f01c:	2b01      	cmp	r3, #1
 800f01e:	d1ac      	bne.n	800ef7a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f020:	6813      	ldr	r3, [r2, #0]
 800f022:	6921      	ldr	r1, [r4, #16]
 800f024:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800f028:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800f02c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f02e:	e781      	b.n	800ef34 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f030:	68e3      	ldr	r3, [r4, #12]
 800f032:	4d5c      	ldr	r5, [pc, #368]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800f034:	b1bb      	cbz	r3, 800f066 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 800f036:	682b      	ldr	r3, [r5, #0]
 800f038:	f043 0301 	orr.w	r3, r3, #1
 800f03c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f03e:	f7fe fa6f 	bl	800d520 <HAL_GetTick>
 800f042:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	079b      	lsls	r3, r3, #30
 800f048:	d507      	bpl.n	800f05a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f04a:	682b      	ldr	r3, [r5, #0]
 800f04c:	6922      	ldr	r2, [r4, #16]
 800f04e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800f052:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f056:	602b      	str	r3, [r5, #0]
 800f058:	e76c      	b.n	800ef34 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f05a:	f7fe fa61 	bl	800d520 <HAL_GetTick>
 800f05e:	1b80      	subs	r0, r0, r6
 800f060:	2802      	cmp	r0, #2
 800f062:	d9ef      	bls.n	800f044 <HAL_RCC_OscConfig+0x124>
 800f064:	e7a0      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800f066:	682b      	ldr	r3, [r5, #0]
 800f068:	f023 0301 	bic.w	r3, r3, #1
 800f06c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f06e:	f7fe fa57 	bl	800d520 <HAL_GetTick>
 800f072:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f074:	682b      	ldr	r3, [r5, #0]
 800f076:	079f      	lsls	r7, r3, #30
 800f078:	f57f af5c 	bpl.w	800ef34 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f07c:	f7fe fa50 	bl	800d520 <HAL_GetTick>
 800f080:	1b80      	subs	r0, r0, r6
 800f082:	2802      	cmp	r0, #2
 800f084:	d9f6      	bls.n	800f074 <HAL_RCC_OscConfig+0x154>
 800f086:	e78f      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f088:	6963      	ldr	r3, [r4, #20]
 800f08a:	4d46      	ldr	r5, [pc, #280]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800f08c:	b183      	cbz	r3, 800f0b0 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800f08e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f090:	f043 0301 	orr.w	r3, r3, #1
 800f094:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800f096:	f7fe fa43 	bl	800d520 <HAL_GetTick>
 800f09a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f09c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f09e:	079b      	lsls	r3, r3, #30
 800f0a0:	f53f af4c 	bmi.w	800ef3c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f0a4:	f7fe fa3c 	bl	800d520 <HAL_GetTick>
 800f0a8:	1b80      	subs	r0, r0, r6
 800f0aa:	2802      	cmp	r0, #2
 800f0ac:	d9f6      	bls.n	800f09c <HAL_RCC_OscConfig+0x17c>
 800f0ae:	e77b      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800f0b0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f0b2:	f023 0301 	bic.w	r3, r3, #1
 800f0b6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800f0b8:	f7fe fa32 	bl	800d520 <HAL_GetTick>
 800f0bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f0be:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f0c0:	079f      	lsls	r7, r3, #30
 800f0c2:	f57f af3b 	bpl.w	800ef3c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f0c6:	f7fe fa2b 	bl	800d520 <HAL_GetTick>
 800f0ca:	1b80      	subs	r0, r0, r6
 800f0cc:	2802      	cmp	r0, #2
 800f0ce:	d9f6      	bls.n	800f0be <HAL_RCC_OscConfig+0x19e>
 800f0d0:	e76a      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f0d2:	4b34      	ldr	r3, [pc, #208]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800f0d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f0d6:	00d5      	lsls	r5, r2, #3
 800f0d8:	d427      	bmi.n	800f12a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800f0da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 800f0dc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800f0de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800f0e2:	641a      	str	r2, [r3, #64]	@ 0x40
 800f0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f0ea:	9301      	str	r3, [sp, #4]
 800f0ec:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f0ee:	4d2e      	ldr	r5, [pc, #184]	@ (800f1a8 <HAL_RCC_OscConfig+0x288>)
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	05d8      	lsls	r0, r3, #23
 800f0f4:	d51b      	bpl.n	800f12e <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f0f6:	68a3      	ldr	r3, [r4, #8]
 800f0f8:	4d2a      	ldr	r5, [pc, #168]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d127      	bne.n	800f14e <HAL_RCC_OscConfig+0x22e>
 800f0fe:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f100:	f043 0301 	orr.w	r3, r3, #1
 800f104:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f106:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800f10a:	f7fe fa09 	bl	800d520 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f10e:	4e25      	ldr	r6, [pc, #148]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 800f110:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f112:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800f114:	079a      	lsls	r2, r3, #30
 800f116:	d53f      	bpl.n	800f198 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 800f118:	2f00      	cmp	r7, #0
 800f11a:	f43f af13 	beq.w	800ef44 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f11e:	4a21      	ldr	r2, [pc, #132]	@ (800f1a4 <HAL_RCC_OscConfig+0x284>)
 800f120:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800f122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f126:	6413      	str	r3, [r2, #64]	@ 0x40
 800f128:	e70c      	b.n	800ef44 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800f12a:	2700      	movs	r7, #0
 800f12c:	e7df      	b.n	800f0ee <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800f12e:	682b      	ldr	r3, [r5, #0]
 800f130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f134:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800f136:	f7fe f9f3 	bl	800d520 <HAL_GetTick>
 800f13a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	05d9      	lsls	r1, r3, #23
 800f140:	d4d9      	bmi.n	800f0f6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f142:	f7fe f9ed 	bl	800d520 <HAL_GetTick>
 800f146:	1b80      	subs	r0, r0, r6
 800f148:	2864      	cmp	r0, #100	@ 0x64
 800f14a:	d9f7      	bls.n	800f13c <HAL_RCC_OscConfig+0x21c>
 800f14c:	e72c      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f14e:	b9ab      	cbnz	r3, 800f17c <HAL_RCC_OscConfig+0x25c>
 800f150:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f152:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f156:	f023 0301 	bic.w	r3, r3, #1
 800f15a:	672b      	str	r3, [r5, #112]	@ 0x70
 800f15c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f15e:	f023 0304 	bic.w	r3, r3, #4
 800f162:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800f164:	f7fe f9dc 	bl	800d520 <HAL_GetTick>
 800f168:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f16a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f16c:	079b      	lsls	r3, r3, #30
 800f16e:	d5d3      	bpl.n	800f118 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f170:	f7fe f9d6 	bl	800d520 <HAL_GetTick>
 800f174:	1b80      	subs	r0, r0, r6
 800f176:	4540      	cmp	r0, r8
 800f178:	d9f7      	bls.n	800f16a <HAL_RCC_OscConfig+0x24a>
 800f17a:	e715      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f17c:	2b05      	cmp	r3, #5
 800f17e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f180:	d103      	bne.n	800f18a <HAL_RCC_OscConfig+0x26a>
 800f182:	f043 0304 	orr.w	r3, r3, #4
 800f186:	672b      	str	r3, [r5, #112]	@ 0x70
 800f188:	e7b9      	b.n	800f0fe <HAL_RCC_OscConfig+0x1de>
 800f18a:	f023 0301 	bic.w	r3, r3, #1
 800f18e:	672b      	str	r3, [r5, #112]	@ 0x70
 800f190:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f192:	f023 0304 	bic.w	r3, r3, #4
 800f196:	e7b5      	b.n	800f104 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f198:	f7fe f9c2 	bl	800d520 <HAL_GetTick>
 800f19c:	1b40      	subs	r0, r0, r5
 800f19e:	4540      	cmp	r0, r8
 800f1a0:	d9b7      	bls.n	800f112 <HAL_RCC_OscConfig+0x1f2>
 800f1a2:	e701      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
 800f1a4:	40023800 	.word	0x40023800
 800f1a8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f1ac:	4d38      	ldr	r5, [pc, #224]	@ (800f290 <HAL_RCC_OscConfig+0x370>)
 800f1ae:	68ab      	ldr	r3, [r5, #8]
 800f1b0:	f003 030c 	and.w	r3, r3, #12
 800f1b4:	2b08      	cmp	r3, #8
 800f1b6:	d041      	beq.n	800f23c <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 800f1b8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f1ba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800f1bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f1c0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f1c2:	d12e      	bne.n	800f222 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 800f1c4:	f7fe f9ac 	bl	800d520 <HAL_GetTick>
 800f1c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f1ca:	682b      	ldr	r3, [r5, #0]
 800f1cc:	0199      	lsls	r1, r3, #6
 800f1ce:	d422      	bmi.n	800f216 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f1d0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f1d2:	085b      	lsrs	r3, r3, #1
 800f1d4:	1e5a      	subs	r2, r3, #1
 800f1d6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800f1da:	430b      	orrs	r3, r1
 800f1dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800f1e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800f1e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f1e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f1ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f1f0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800f1f2:	682b      	ldr	r3, [r5, #0]
 800f1f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f1f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f1fa:	f7fe f991 	bl	800d520 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f1fe:	4d24      	ldr	r5, [pc, #144]	@ (800f290 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 800f200:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f202:	682b      	ldr	r3, [r5, #0]
 800f204:	019a      	lsls	r2, r3, #6
 800f206:	f53f aea1 	bmi.w	800ef4c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f20a:	f7fe f989 	bl	800d520 <HAL_GetTick>
 800f20e:	1b00      	subs	r0, r0, r4
 800f210:	2802      	cmp	r0, #2
 800f212:	d9f6      	bls.n	800f202 <HAL_RCC_OscConfig+0x2e2>
 800f214:	e6c8      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f216:	f7fe f983 	bl	800d520 <HAL_GetTick>
 800f21a:	1b80      	subs	r0, r0, r6
 800f21c:	2802      	cmp	r0, #2
 800f21e:	d9d4      	bls.n	800f1ca <HAL_RCC_OscConfig+0x2aa>
 800f220:	e6c2      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800f222:	f7fe f97d 	bl	800d520 <HAL_GetTick>
 800f226:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f228:	682b      	ldr	r3, [r5, #0]
 800f22a:	019b      	lsls	r3, r3, #6
 800f22c:	f57f ae8e 	bpl.w	800ef4c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f230:	f7fe f976 	bl	800d520 <HAL_GetTick>
 800f234:	1b00      	subs	r0, r0, r4
 800f236:	2802      	cmp	r0, #2
 800f238:	d9f6      	bls.n	800f228 <HAL_RCC_OscConfig+0x308>
 800f23a:	e6b5      	b.n	800efa8 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f23c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800f23e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f240:	f43f ae9b 	beq.w	800ef7a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f244:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f248:	69e1      	ldr	r1, [r4, #28]
 800f24a:	428a      	cmp	r2, r1
 800f24c:	f47f ae95 	bne.w	800ef7a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f250:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f254:	6a21      	ldr	r1, [r4, #32]
 800f256:	428a      	cmp	r2, r1
 800f258:	f47f ae8f 	bne.w	800ef7a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f25c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f260:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f262:	401a      	ands	r2, r3
 800f264:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800f268:	f47f ae87 	bne.w	800ef7a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800f26c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f26e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800f272:	0852      	lsrs	r2, r2, #1
 800f274:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f276:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800f27a:	f47f ae7e 	bne.w	800ef7a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f27e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f280:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800f284:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800f288:	bf14      	ite	ne
 800f28a:	2001      	movne	r0, #1
 800f28c:	2000      	moveq	r0, #0
 800f28e:	e68c      	b.n	800efaa <HAL_RCC_OscConfig+0x8a>
 800f290:	40023800 	.word	0x40023800

0800f294 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f294:	4913      	ldr	r1, [pc, #76]	@ (800f2e4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800f296:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f298:	688b      	ldr	r3, [r1, #8]
 800f29a:	f003 030c 	and.w	r3, r3, #12
 800f29e:	2b04      	cmp	r3, #4
 800f2a0:	d01b      	beq.n	800f2da <HAL_RCC_GetSysClockFreq+0x46>
 800f2a2:	2b08      	cmp	r3, #8
 800f2a4:	d11b      	bne.n	800f2de <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f2a6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800f2a8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f2aa:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f2ac:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800f2b0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f2b4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800f2b8:	bf1a      	itte	ne
 800f2ba:	480b      	ldrne	r0, [pc, #44]	@ (800f2e8 <HAL_RCC_GetSysClockFreq+0x54>)
 800f2bc:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f2be:	480b      	ldreq	r0, [pc, #44]	@ (800f2ec <HAL_RCC_GetSysClockFreq+0x58>)
 800f2c0:	fba1 0100 	umull	r0, r1, r1, r0
 800f2c4:	f7f0 fff4 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800f2c8:	4b06      	ldr	r3, [pc, #24]	@ (800f2e4 <HAL_RCC_GetSysClockFreq+0x50>)
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800f2d4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800f2d8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f2da:	4803      	ldr	r0, [pc, #12]	@ (800f2e8 <HAL_RCC_GetSysClockFreq+0x54>)
 800f2dc:	e7fc      	b.n	800f2d8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800f2de:	4803      	ldr	r0, [pc, #12]	@ (800f2ec <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800f2e0:	e7fa      	b.n	800f2d8 <HAL_RCC_GetSysClockFreq+0x44>
 800f2e2:	bf00      	nop
 800f2e4:	40023800 	.word	0x40023800
 800f2e8:	017d7840 	.word	0x017d7840
 800f2ec:	00f42400 	.word	0x00f42400

0800f2f0 <HAL_RCC_ClockConfig>:
{
 800f2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	b910      	cbnz	r0, 800f300 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800f2fa:	2001      	movs	r0, #1
}
 800f2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f300:	4a45      	ldr	r2, [pc, #276]	@ (800f418 <HAL_RCC_ClockConfig+0x128>)
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	f003 030f 	and.w	r3, r3, #15
 800f308:	428b      	cmp	r3, r1
 800f30a:	d328      	bcc.n	800f35e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f30c:	6821      	ldr	r1, [r4, #0]
 800f30e:	078f      	lsls	r7, r1, #30
 800f310:	d430      	bmi.n	800f374 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f312:	07c8      	lsls	r0, r1, #31
 800f314:	d443      	bmi.n	800f39e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f316:	4a40      	ldr	r2, [pc, #256]	@ (800f418 <HAL_RCC_ClockConfig+0x128>)
 800f318:	6813      	ldr	r3, [r2, #0]
 800f31a:	f003 030f 	and.w	r3, r3, #15
 800f31e:	42ab      	cmp	r3, r5
 800f320:	d866      	bhi.n	800f3f0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f322:	6822      	ldr	r2, [r4, #0]
 800f324:	0751      	lsls	r1, r2, #29
 800f326:	d46f      	bmi.n	800f408 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f328:	0713      	lsls	r3, r2, #28
 800f32a:	d507      	bpl.n	800f33c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f32c:	4a3b      	ldr	r2, [pc, #236]	@ (800f41c <HAL_RCC_ClockConfig+0x12c>)
 800f32e:	6921      	ldr	r1, [r4, #16]
 800f330:	6893      	ldr	r3, [r2, #8]
 800f332:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800f336:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800f33a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f33c:	f7ff ffaa 	bl	800f294 <HAL_RCC_GetSysClockFreq>
 800f340:	4b36      	ldr	r3, [pc, #216]	@ (800f41c <HAL_RCC_ClockConfig+0x12c>)
 800f342:	4a37      	ldr	r2, [pc, #220]	@ (800f420 <HAL_RCC_ClockConfig+0x130>)
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f34a:	5cd3      	ldrb	r3, [r2, r3]
 800f34c:	40d8      	lsrs	r0, r3
 800f34e:	4b35      	ldr	r3, [pc, #212]	@ (800f424 <HAL_RCC_ClockConfig+0x134>)
 800f350:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800f352:	4b35      	ldr	r3, [pc, #212]	@ (800f428 <HAL_RCC_ClockConfig+0x138>)
 800f354:	6818      	ldr	r0, [r3, #0]
 800f356:	f7f1 f973 	bl	8000640 <HAL_InitTick>
  return HAL_OK;
 800f35a:	2000      	movs	r0, #0
 800f35c:	e7ce      	b.n	800f2fc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f35e:	6813      	ldr	r3, [r2, #0]
 800f360:	f023 030f 	bic.w	r3, r3, #15
 800f364:	430b      	orrs	r3, r1
 800f366:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f368:	6813      	ldr	r3, [r2, #0]
 800f36a:	f003 030f 	and.w	r3, r3, #15
 800f36e:	428b      	cmp	r3, r1
 800f370:	d1c3      	bne.n	800f2fa <HAL_RCC_ClockConfig+0xa>
 800f372:	e7cb      	b.n	800f30c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f374:	f011 0f04 	tst.w	r1, #4
 800f378:	4b28      	ldr	r3, [pc, #160]	@ (800f41c <HAL_RCC_ClockConfig+0x12c>)
 800f37a:	d003      	beq.n	800f384 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f37c:	689a      	ldr	r2, [r3, #8]
 800f37e:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800f382:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f384:	070e      	lsls	r6, r1, #28
 800f386:	d503      	bpl.n	800f390 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f388:	689a      	ldr	r2, [r3, #8]
 800f38a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800f38e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f390:	689a      	ldr	r2, [r3, #8]
 800f392:	68a0      	ldr	r0, [r4, #8]
 800f394:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800f398:	4302      	orrs	r2, r0
 800f39a:	609a      	str	r2, [r3, #8]
 800f39c:	e7b9      	b.n	800f312 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f39e:	6861      	ldr	r1, [r4, #4]
 800f3a0:	4b1e      	ldr	r3, [pc, #120]	@ (800f41c <HAL_RCC_ClockConfig+0x12c>)
 800f3a2:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3a4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f3a6:	d11b      	bne.n	800f3e0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3a8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f3ac:	d0a5      	beq.n	800f2fa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f3ae:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f3b0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3b4:	4f19      	ldr	r7, [pc, #100]	@ (800f41c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f3b6:	f022 0203 	bic.w	r2, r2, #3
 800f3ba:	430a      	orrs	r2, r1
 800f3bc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800f3be:	f7fe f8af 	bl	800d520 <HAL_GetTick>
 800f3c2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	6862      	ldr	r2, [r4, #4]
 800f3c8:	f003 030c 	and.w	r3, r3, #12
 800f3cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800f3d0:	d0a1      	beq.n	800f316 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f3d2:	f7fe f8a5 	bl	800d520 <HAL_GetTick>
 800f3d6:	1b80      	subs	r0, r0, r6
 800f3d8:	4540      	cmp	r0, r8
 800f3da:	d9f3      	bls.n	800f3c4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800f3dc:	2003      	movs	r0, #3
 800f3de:	e78d      	b.n	800f2fc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f3e0:	2902      	cmp	r1, #2
 800f3e2:	d102      	bne.n	800f3ea <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f3e4:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800f3e8:	e7e0      	b.n	800f3ac <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f3ea:	f012 0f02 	tst.w	r2, #2
 800f3ee:	e7dd      	b.n	800f3ac <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3f0:	6813      	ldr	r3, [r2, #0]
 800f3f2:	f023 030f 	bic.w	r3, r3, #15
 800f3f6:	432b      	orrs	r3, r5
 800f3f8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3fa:	6813      	ldr	r3, [r2, #0]
 800f3fc:	f003 030f 	and.w	r3, r3, #15
 800f400:	42ab      	cmp	r3, r5
 800f402:	f47f af7a 	bne.w	800f2fa <HAL_RCC_ClockConfig+0xa>
 800f406:	e78c      	b.n	800f322 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f408:	4904      	ldr	r1, [pc, #16]	@ (800f41c <HAL_RCC_ClockConfig+0x12c>)
 800f40a:	68e0      	ldr	r0, [r4, #12]
 800f40c:	688b      	ldr	r3, [r1, #8]
 800f40e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800f412:	4303      	orrs	r3, r0
 800f414:	608b      	str	r3, [r1, #8]
 800f416:	e787      	b.n	800f328 <HAL_RCC_ClockConfig+0x38>
 800f418:	40023c00 	.word	0x40023c00
 800f41c:	40023800 	.word	0x40023800
 800f420:	080226a4 	.word	0x080226a4
 800f424:	20000040 	.word	0x20000040
 800f428:	20000048 	.word	0x20000048

0800f42c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800f42c:	4b01      	ldr	r3, [pc, #4]	@ (800f434 <HAL_RCC_GetHCLKFreq+0x8>)
 800f42e:	6818      	ldr	r0, [r3, #0]
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop
 800f434:	20000040 	.word	0x20000040

0800f438 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f438:	4b04      	ldr	r3, [pc, #16]	@ (800f44c <HAL_RCC_GetPCLK1Freq+0x14>)
 800f43a:	4a05      	ldr	r2, [pc, #20]	@ (800f450 <HAL_RCC_GetPCLK1Freq+0x18>)
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800f442:	5cd3      	ldrb	r3, [r2, r3]
 800f444:	4a03      	ldr	r2, [pc, #12]	@ (800f454 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800f446:	6810      	ldr	r0, [r2, #0]
}
 800f448:	40d8      	lsrs	r0, r3
 800f44a:	4770      	bx	lr
 800f44c:	40023800 	.word	0x40023800
 800f450:	080226b4 	.word	0x080226b4
 800f454:	20000040 	.word	0x20000040

0800f458 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f458:	230f      	movs	r3, #15
 800f45a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f45c:	4b0b      	ldr	r3, [pc, #44]	@ (800f48c <HAL_RCC_GetClockConfig+0x34>)
 800f45e:	689a      	ldr	r2, [r3, #8]
 800f460:	f002 0203 	and.w	r2, r2, #3
 800f464:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f466:	689a      	ldr	r2, [r3, #8]
 800f468:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800f46c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f46e:	689a      	ldr	r2, [r3, #8]
 800f470:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800f474:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	08db      	lsrs	r3, r3, #3
 800f47a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800f47e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f480:	4b03      	ldr	r3, [pc, #12]	@ (800f490 <HAL_RCC_GetClockConfig+0x38>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f003 030f 	and.w	r3, r3, #15
 800f488:	600b      	str	r3, [r1, #0]
}
 800f48a:	4770      	bx	lr
 800f48c:	40023800 	.word	0x40023800
 800f490:	40023c00 	.word	0x40023c00

0800f494 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f494:	6803      	ldr	r3, [r0, #0]
{
 800f496:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f49a:	f013 0601 	ands.w	r6, r3, #1
{
 800f49e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f4a0:	d00b      	beq.n	800f4ba <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f4a2:	4aad      	ldr	r2, [pc, #692]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f4a4:	6891      	ldr	r1, [r2, #8]
 800f4a6:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 800f4aa:	6091      	str	r1, [r2, #8]
 800f4ac:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800f4ae:	6891      	ldr	r1, [r2, #8]
 800f4b0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800f4b2:	fab6 f686 	clz	r6, r6
 800f4b6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f4b8:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f4ba:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800f4be:	d012      	beq.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f4c0:	49a5      	ldr	r1, [pc, #660]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f4c2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800f4c4:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800f4c8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f4cc:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 800f4d0:	bf08      	it	eq
 800f4d2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f4d4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800f4d8:	bf16      	itet	ne
 800f4da:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800f4de:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800f4e0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f4e2:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f4e6:	02d8      	lsls	r0, r3, #11
 800f4e8:	d510      	bpl.n	800f50c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f4ea:	489b      	ldr	r0, [pc, #620]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f4ec:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800f4ee:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f4f2:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f4f6:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800f4fa:	ea42 0201 	orr.w	r2, r2, r1
 800f4fe:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f502:	f000 8186 	beq.w	800f812 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800f506:	2900      	cmp	r1, #0
 800f508:	bf08      	it	eq
 800f50a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800f50c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800f510:	bf18      	it	ne
 800f512:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f514:	0699      	lsls	r1, r3, #26
 800f516:	d532      	bpl.n	800f57e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f518:	4b8f      	ldr	r3, [pc, #572]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f51a:	4f90      	ldr	r7, [pc, #576]	@ (800f75c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800f51c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f51e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800f522:	641a      	str	r2, [r3, #64]	@ 0x40
 800f524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f52a:	9301      	str	r3, [sp, #4]
 800f52c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f534:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f536:	f7fd fff3 	bl	800d520 <HAL_GetTick>
 800f53a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	05da      	lsls	r2, r3, #23
 800f540:	f140 8169 	bpl.w	800f816 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f544:	4f84      	ldr	r7, [pc, #528]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f546:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f548:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f54a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800f54e:	f040 816d 	bne.w	800f82c <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f552:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f554:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800f558:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800f55c:	4a7e      	ldr	r2, [pc, #504]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f55e:	f040 818a 	bne.w	800f876 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800f562:	6891      	ldr	r1, [r2, #8]
 800f564:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 800f568:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800f56c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800f570:	4301      	orrs	r1, r0
 800f572:	6091      	str	r1, [r2, #8]
 800f574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f578:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800f57a:	430b      	orrs	r3, r1
 800f57c:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	06d9      	lsls	r1, r3, #27
 800f582:	d50c      	bpl.n	800f59e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f584:	4a74      	ldr	r2, [pc, #464]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f586:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800f58a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800f58e:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800f592:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800f596:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800f598:	4301      	orrs	r1, r0
 800f59a:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f59e:	045a      	lsls	r2, r3, #17
 800f5a0:	d508      	bpl.n	800f5b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f5a2:	496d      	ldr	r1, [pc, #436]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f5a4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800f5a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f5aa:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800f5ae:	4302      	orrs	r2, r0
 800f5b0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f5b4:	041f      	lsls	r7, r3, #16
 800f5b6:	d508      	bpl.n	800f5ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f5b8:	4967      	ldr	r1, [pc, #412]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f5ba:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800f5bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f5c0:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800f5c4:	4302      	orrs	r2, r0
 800f5c6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f5ca:	03d8      	lsls	r0, r3, #15
 800f5cc:	d508      	bpl.n	800f5e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f5ce:	4962      	ldr	r1, [pc, #392]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f5d0:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800f5d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f5d6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800f5da:	4302      	orrs	r2, r0
 800f5dc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f5e0:	0399      	lsls	r1, r3, #14
 800f5e2:	d508      	bpl.n	800f5f6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f5e4:	495c      	ldr	r1, [pc, #368]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f5e6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800f5e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f5ec:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800f5f0:	4302      	orrs	r2, r0
 800f5f2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f5f6:	065a      	lsls	r2, r3, #25
 800f5f8:	d508      	bpl.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f5fa:	4957      	ldr	r1, [pc, #348]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f5fc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800f5fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f602:	f022 0203 	bic.w	r2, r2, #3
 800f606:	4302      	orrs	r2, r0
 800f608:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f60c:	061f      	lsls	r7, r3, #24
 800f60e:	d508      	bpl.n	800f622 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f610:	4951      	ldr	r1, [pc, #324]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f612:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800f614:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f618:	f022 020c 	bic.w	r2, r2, #12
 800f61c:	4302      	orrs	r2, r0
 800f61e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f622:	05d8      	lsls	r0, r3, #23
 800f624:	d508      	bpl.n	800f638 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f626:	494c      	ldr	r1, [pc, #304]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f628:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800f62a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f62e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800f632:	4302      	orrs	r2, r0
 800f634:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f638:	0599      	lsls	r1, r3, #22
 800f63a:	d508      	bpl.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f63c:	4946      	ldr	r1, [pc, #280]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f63e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800f640:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f644:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800f648:	4302      	orrs	r2, r0
 800f64a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f64e:	055a      	lsls	r2, r3, #21
 800f650:	d508      	bpl.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f652:	4941      	ldr	r1, [pc, #260]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f654:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800f656:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f65a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800f65e:	4302      	orrs	r2, r0
 800f660:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f664:	051f      	lsls	r7, r3, #20
 800f666:	d508      	bpl.n	800f67a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f668:	493b      	ldr	r1, [pc, #236]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f66a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f66c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f670:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800f674:	4302      	orrs	r2, r0
 800f676:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f67a:	04d8      	lsls	r0, r3, #19
 800f67c:	d508      	bpl.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f67e:	4936      	ldr	r1, [pc, #216]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f680:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800f682:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f686:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800f68a:	4302      	orrs	r2, r0
 800f68c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f690:	0499      	lsls	r1, r3, #18
 800f692:	d508      	bpl.n	800f6a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f694:	4930      	ldr	r1, [pc, #192]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f696:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800f698:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f69c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f6a0:	4302      	orrs	r2, r0
 800f6a2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f6a6:	025a      	lsls	r2, r3, #9
 800f6a8:	d508      	bpl.n	800f6bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f6aa:	492b      	ldr	r1, [pc, #172]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f6ac:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800f6ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f6b2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800f6b6:	4302      	orrs	r2, r0
 800f6b8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f6bc:	029f      	lsls	r7, r3, #10
 800f6be:	d50c      	bpl.n	800f6da <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f6c0:	4825      	ldr	r0, [pc, #148]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f6c2:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800f6c4:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800f6c8:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f6cc:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 800f6d0:	bf08      	it	eq
 800f6d2:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f6d4:	430a      	orrs	r2, r1
 800f6d6:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800f6da:	f013 0f08 	tst.w	r3, #8
 800f6de:	bf18      	it	ne
 800f6e0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f6e2:	0358      	lsls	r0, r3, #13
 800f6e4:	d508      	bpl.n	800f6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f6e6:	491c      	ldr	r1, [pc, #112]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f6e8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f6ea:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f6ee:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800f6f2:	4302      	orrs	r2, r0
 800f6f4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f6f8:	0219      	lsls	r1, r3, #8
 800f6fa:	d509      	bpl.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f6fc:	4916      	ldr	r1, [pc, #88]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f6fe:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800f702:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800f706:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800f70a:	4302      	orrs	r2, r0
 800f70c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f710:	2e01      	cmp	r6, #1
 800f712:	f000 80b4 	beq.w	800f87e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800f716:	019a      	lsls	r2, r3, #6
 800f718:	f100 80b1 	bmi.w	800f87e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f71c:	2d01      	cmp	r5, #1
 800f71e:	d176      	bne.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800f720:	4d0d      	ldr	r5, [pc, #52]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f722:	682b      	ldr	r3, [r5, #0]
 800f724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f728:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f72a:	f7fd fef9 	bl	800d520 <HAL_GetTick>
 800f72e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f730:	682b      	ldr	r3, [r5, #0]
 800f732:	009f      	lsls	r7, r3, #2
 800f734:	f100 8127 	bmi.w	800f986 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f738:	6821      	ldr	r1, [r4, #0]
 800f73a:	030e      	lsls	r6, r1, #12
 800f73c:	d501      	bpl.n	800f742 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800f73e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f740:	b11b      	cbz	r3, 800f74a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800f742:	02cd      	lsls	r5, r1, #11
 800f744:	d523      	bpl.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f746:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f748:	bb0b      	cbnz	r3, 800f78e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f74a:	4a03      	ldr	r2, [pc, #12]	@ (800f758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f74c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f750:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 800f754:	e004      	b.n	800f760 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800f756:	bf00      	nop
 800f758:	40023800 	.word	0x40023800
 800f75c:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f760:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f764:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800f768:	4303      	orrs	r3, r0
 800f76a:	6960      	ldr	r0, [r4, #20]
 800f76c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f770:	69a0      	ldr	r0, [r4, #24]
 800f772:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f776:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f77a:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800f77e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f780:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800f784:	3801      	subs	r0, #1
 800f786:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800f78a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f78e:	0288      	lsls	r0, r1, #10
 800f790:	d515      	bpl.n	800f7be <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800f792:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800f794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f798:	d111      	bne.n	800f7be <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f79a:	4a82      	ldr	r2, [pc, #520]	@ (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800f79c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f7a0:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f7a4:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800f7a8:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800f7ac:	4303      	orrs	r3, r0
 800f7ae:	6960      	ldr	r0, [r4, #20]
 800f7b0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f7b4:	6a20      	ldr	r0, [r4, #32]
 800f7b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f7ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f7be:	070a      	lsls	r2, r1, #28
 800f7c0:	d519      	bpl.n	800f7f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f7c2:	4a78      	ldr	r2, [pc, #480]	@ (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800f7c4:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f7c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f7cc:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800f7d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f7d4:	430b      	orrs	r3, r1
 800f7d6:	6961      	ldr	r1, [r4, #20]
 800f7d8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800f7dc:	69e1      	ldr	r1, [r4, #28]
 800f7de:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f7e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f7e6:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800f7ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f7ec:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800f7f0:	430b      	orrs	r3, r1
 800f7f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800f7f6:	4c6b      	ldr	r4, [pc, #428]	@ (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800f7f8:	6823      	ldr	r3, [r4, #0]
 800f7fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f7fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f800:	f7fd fe8e 	bl	800d520 <HAL_GetTick>
 800f804:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	f140 80c3 	bpl.w	800f994 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800f80e:	2000      	movs	r0, #0
 800f810:	e009      	b.n	800f826 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 800f812:	2601      	movs	r6, #1
 800f814:	e67a      	b.n	800f50c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f816:	f7fd fe83 	bl	800d520 <HAL_GetTick>
 800f81a:	eba0 0008 	sub.w	r0, r0, r8
 800f81e:	2864      	cmp	r0, #100	@ 0x64
 800f820:	f67f ae8c 	bls.w	800f53c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800f824:	2003      	movs	r0, #3
}
 800f826:	b003      	add	sp, #12
 800f828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f82c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800f830:	4293      	cmp	r3, r2
 800f832:	f43f ae8e 	beq.w	800f552 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f836:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800f838:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f83a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800f83e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f842:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f844:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f846:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f84a:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 800f84c:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f84e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f850:	07db      	lsls	r3, r3, #31
 800f852:	f57f ae7e 	bpl.w	800f552 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 800f856:	f7fd fe63 	bl	800d520 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f85a:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800f85e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f860:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f862:	0798      	lsls	r0, r3, #30
 800f864:	f53f ae75 	bmi.w	800f552 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f868:	f7fd fe5a 	bl	800d520 <HAL_GetTick>
 800f86c:	eba0 0008 	sub.w	r0, r0, r8
 800f870:	4548      	cmp	r0, r9
 800f872:	d9f5      	bls.n	800f860 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800f874:	e7d6      	b.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f876:	6891      	ldr	r1, [r2, #8]
 800f878:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800f87c:	e679      	b.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800f87e:	4e49      	ldr	r6, [pc, #292]	@ (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800f880:	6833      	ldr	r3, [r6, #0]
 800f882:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f886:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800f888:	f7fd fe4a 	bl	800d520 <HAL_GetTick>
 800f88c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f88e:	6833      	ldr	r3, [r6, #0]
 800f890:	011b      	lsls	r3, r3, #4
 800f892:	d472      	bmi.n	800f97a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800f894:	6822      	ldr	r2, [r4, #0]
 800f896:	07d7      	lsls	r7, r2, #31
 800f898:	d512      	bpl.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800f89a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f89c:	b983      	cbnz	r3, 800f8c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f89e:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f8a2:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f8a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f8aa:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800f8ae:	430b      	orrs	r3, r1
 800f8b0:	6861      	ldr	r1, [r4, #4]
 800f8b2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800f8b6:	68a1      	ldr	r1, [r4, #8]
 800f8b8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f8bc:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f8c0:	0316      	lsls	r6, r2, #12
 800f8c2:	d503      	bpl.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0x438>
 800f8c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f8c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f8ca:	d005      	beq.n	800f8d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800f8cc:	02d0      	lsls	r0, r2, #11
 800f8ce:	d51e      	bpl.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f8d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f8d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f8d6:	d11a      	bne.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f8d8:	4932      	ldr	r1, [pc, #200]	@ (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800f8da:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f8de:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800f8e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f8e6:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800f8ea:	4303      	orrs	r3, r0
 800f8ec:	6860      	ldr	r0, [r4, #4]
 800f8ee:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f8f2:	68e0      	ldr	r0, [r4, #12]
 800f8f4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f8f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f8fc:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 800f900:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f902:	f020 001f 	bic.w	r0, r0, #31
 800f906:	3b01      	subs	r3, #1
 800f908:	4303      	orrs	r3, r0
 800f90a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f90e:	01d1      	lsls	r1, r2, #7
 800f910:	d511      	bpl.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f912:	4924      	ldr	r1, [pc, #144]	@ (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800f914:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f918:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f91c:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800f920:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800f924:	4303      	orrs	r3, r0
 800f926:	6860      	ldr	r0, [r4, #4]
 800f928:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f92c:	6920      	ldr	r0, [r4, #16]
 800f92e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f932:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f936:	0192      	lsls	r2, r2, #6
 800f938:	d50d      	bpl.n	800f956 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f93a:	6923      	ldr	r3, [r4, #16]
 800f93c:	6862      	ldr	r2, [r4, #4]
 800f93e:	041b      	lsls	r3, r3, #16
 800f940:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800f944:	68e2      	ldr	r2, [r4, #12]
 800f946:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f94a:	68a2      	ldr	r2, [r4, #8]
 800f94c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800f950:	4a14      	ldr	r2, [pc, #80]	@ (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800f952:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800f956:	4e13      	ldr	r6, [pc, #76]	@ (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800f958:	6833      	ldr	r3, [r6, #0]
 800f95a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f95e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800f960:	f7fd fdde 	bl	800d520 <HAL_GetTick>
 800f964:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f966:	6833      	ldr	r3, [r6, #0]
 800f968:	011b      	lsls	r3, r3, #4
 800f96a:	f53f aed7 	bmi.w	800f71c <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f96e:	f7fd fdd7 	bl	800d520 <HAL_GetTick>
 800f972:	1bc0      	subs	r0, r0, r7
 800f974:	2864      	cmp	r0, #100	@ 0x64
 800f976:	d9f6      	bls.n	800f966 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f978:	e754      	b.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f97a:	f7fd fdd1 	bl	800d520 <HAL_GetTick>
 800f97e:	1bc0      	subs	r0, r0, r7
 800f980:	2864      	cmp	r0, #100	@ 0x64
 800f982:	d984      	bls.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800f984:	e74e      	b.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f986:	f7fd fdcb 	bl	800d520 <HAL_GetTick>
 800f98a:	1b80      	subs	r0, r0, r6
 800f98c:	2864      	cmp	r0, #100	@ 0x64
 800f98e:	f67f aecf 	bls.w	800f730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800f992:	e747      	b.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f994:	f7fd fdc4 	bl	800d520 <HAL_GetTick>
 800f998:	1b40      	subs	r0, r0, r5
 800f99a:	2864      	cmp	r0, #100	@ 0x64
 800f99c:	f67f af33 	bls.w	800f806 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800f9a0:	e740      	b.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800f9a2:	bf00      	nop
 800f9a4:	40023800 	.word	0x40023800

0800f9a8 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800f9a8:	4770      	bx	lr

0800f9aa <HAL_SDRAM_Init>:
{
 800f9aa:	b538      	push	{r3, r4, r5, lr}
 800f9ac:	460d      	mov	r5, r1
  if (hsdram == NULL)
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	b1c8      	cbz	r0, 800f9e6 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800f9b2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800f9b6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800f9ba:	b91b      	cbnz	r3, 800f9c4 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800f9bc:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800f9c0:	f7ff fff2 	bl	800f9a8 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f9c4:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f9c6:	1d21      	adds	r1, r4, #4
 800f9c8:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f9ca:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f9ce:	f000 fa0a 	bl	800fde6 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800f9d2:	6862      	ldr	r2, [r4, #4]
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	6820      	ldr	r0, [r4, #0]
 800f9d8:	f000 fa3d 	bl	800fe56 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f9dc:	2301      	movs	r3, #1
  return HAL_OK;
 800f9de:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f9e0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800f9e4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f9e6:	2001      	movs	r0, #1
 800f9e8:	e7fc      	b.n	800f9e4 <HAL_SDRAM_Init+0x3a>

0800f9ea <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800f9ea:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800f9ec:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800f9f4:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800f9f6:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800f9f8:	d010      	beq.n	800fa1c <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800f9fa:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800f9fe:	2c01      	cmp	r4, #1
 800fa00:	d110      	bne.n	800fa24 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fa02:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800fa04:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fa06:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800fa0a:	f000 fa5a 	bl	800fec2 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800fa0e:	6833      	ldr	r3, [r6, #0]
 800fa10:	2b02      	cmp	r3, #2
 800fa12:	d104      	bne.n	800fa1e <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800fa14:	2305      	movs	r3, #5
 800fa16:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800fa1a:	2000      	movs	r0, #0
}
 800fa1c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800fa1e:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800fa22:	e7fa      	b.n	800fa1a <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800fa24:	2001      	movs	r0, #1
 800fa26:	e7f9      	b.n	800fa1c <HAL_SDRAM_SendCommand+0x32>

0800fa28 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800fa28:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800fa2a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800fa2e:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	b2d8      	uxtb	r0, r3
 800fa34:	d00d      	beq.n	800fa52 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800fa36:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	b2dd      	uxtb	r5, r3
 800fa3e:	d109      	bne.n	800fa54 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fa40:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800fa42:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fa44:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800fa48:	f000 fa4d 	bl	800fee6 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800fa4c:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800fa4e:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800fa52:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800fa54:	2001      	movs	r0, #1
 800fa56:	e7fc      	b.n	800fa52 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800fa58 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800fa58:	4770      	bx	lr
	...

0800fa5c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fa5c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d12f      	bne.n	800fac4 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa64:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa66:	4a18      	ldr	r2, [pc, #96]	@ (800fac8 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800fa68:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa6c:	6803      	ldr	r3, [r0, #0]
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d01a      	beq.n	800faa8 <HAL_TIM_Base_Start+0x4c>
 800fa72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa76:	d017      	beq.n	800faa8 <HAL_TIM_Base_Start+0x4c>
 800fa78:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d013      	beq.n	800faa8 <HAL_TIM_Base_Start+0x4c>
 800fa80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d00f      	beq.n	800faa8 <HAL_TIM_Base_Start+0x4c>
 800fa88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d00b      	beq.n	800faa8 <HAL_TIM_Base_Start+0x4c>
 800fa90:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d007      	beq.n	800faa8 <HAL_TIM_Base_Start+0x4c>
 800fa98:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d003      	beq.n	800faa8 <HAL_TIM_Base_Start+0x4c>
 800faa0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d107      	bne.n	800fab8 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800faa8:	6899      	ldr	r1, [r3, #8]
 800faaa:	4a08      	ldr	r2, [pc, #32]	@ (800facc <HAL_TIM_Base_Start+0x70>)
 800faac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faae:	2a06      	cmp	r2, #6
 800fab0:	d006      	beq.n	800fac0 <HAL_TIM_Base_Start+0x64>
 800fab2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800fab6:	d003      	beq.n	800fac0 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	f042 0201 	orr.w	r2, r2, #1
 800fabe:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800fac0:	2000      	movs	r0, #0
 800fac2:	4770      	bx	lr
    return HAL_ERROR;
 800fac4:	2001      	movs	r0, #1
}
 800fac6:	4770      	bx	lr
 800fac8:	40010000 	.word	0x40010000
 800facc:	00010007 	.word	0x00010007

0800fad0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fad0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d133      	bne.n	800fb40 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fad8:	2302      	movs	r3, #2
 800fada:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fade:	6803      	ldr	r3, [r0, #0]
 800fae0:	68da      	ldr	r2, [r3, #12]
 800fae2:	f042 0201 	orr.w	r2, r2, #1
 800fae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fae8:	4a16      	ldr	r2, [pc, #88]	@ (800fb44 <HAL_TIM_Base_Start_IT+0x74>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d01a      	beq.n	800fb24 <HAL_TIM_Base_Start_IT+0x54>
 800faee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faf2:	d017      	beq.n	800fb24 <HAL_TIM_Base_Start_IT+0x54>
 800faf4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d013      	beq.n	800fb24 <HAL_TIM_Base_Start_IT+0x54>
 800fafc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d00f      	beq.n	800fb24 <HAL_TIM_Base_Start_IT+0x54>
 800fb04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d00b      	beq.n	800fb24 <HAL_TIM_Base_Start_IT+0x54>
 800fb0c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d007      	beq.n	800fb24 <HAL_TIM_Base_Start_IT+0x54>
 800fb14:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d003      	beq.n	800fb24 <HAL_TIM_Base_Start_IT+0x54>
 800fb1c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d107      	bne.n	800fb34 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb24:	6899      	ldr	r1, [r3, #8]
 800fb26:	4a08      	ldr	r2, [pc, #32]	@ (800fb48 <HAL_TIM_Base_Start_IT+0x78>)
 800fb28:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb2a:	2a06      	cmp	r2, #6
 800fb2c:	d006      	beq.n	800fb3c <HAL_TIM_Base_Start_IT+0x6c>
 800fb2e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800fb32:	d003      	beq.n	800fb3c <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	f042 0201 	orr.w	r2, r2, #1
 800fb3a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	4770      	bx	lr
    return HAL_ERROR;
 800fb40:	2001      	movs	r0, #1
}
 800fb42:	4770      	bx	lr
 800fb44:	40010000 	.word	0x40010000
 800fb48:	00010007 	.word	0x00010007

0800fb4c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800fb4c:	4770      	bx	lr

0800fb4e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800fb4e:	4770      	bx	lr

0800fb50 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800fb50:	4770      	bx	lr

0800fb52 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800fb52:	4770      	bx	lr

0800fb54 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb54:	6803      	ldr	r3, [r0, #0]
 800fb56:	691a      	ldr	r2, [r3, #16]
 800fb58:	0791      	lsls	r1, r2, #30
{
 800fb5a:	b510      	push	{r4, lr}
 800fb5c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb5e:	d50f      	bpl.n	800fb80 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb60:	68da      	ldr	r2, [r3, #12]
 800fb62:	0792      	lsls	r2, r2, #30
 800fb64:	d50c      	bpl.n	800fb80 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb66:	f06f 0202 	mvn.w	r2, #2
 800fb6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb70:	699b      	ldr	r3, [r3, #24]
 800fb72:	0799      	lsls	r1, r3, #30
 800fb74:	f000 8085 	beq.w	800fc82 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800fb78:	f7ff ffe9 	bl	800fb4e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb80:	6823      	ldr	r3, [r4, #0]
 800fb82:	691a      	ldr	r2, [r3, #16]
 800fb84:	0752      	lsls	r2, r2, #29
 800fb86:	d510      	bpl.n	800fbaa <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fb88:	68da      	ldr	r2, [r3, #12]
 800fb8a:	0750      	lsls	r0, r2, #29
 800fb8c:	d50d      	bpl.n	800fbaa <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fb8e:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800fb92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fb94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb96:	2202      	movs	r2, #2
 800fb98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb9a:	699b      	ldr	r3, [r3, #24]
 800fb9c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800fba0:	d075      	beq.n	800fc8e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800fba2:	f7ff ffd4 	bl	800fb4e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fba6:	2300      	movs	r3, #0
 800fba8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fbaa:	6823      	ldr	r3, [r4, #0]
 800fbac:	691a      	ldr	r2, [r3, #16]
 800fbae:	0711      	lsls	r1, r2, #28
 800fbb0:	d50f      	bpl.n	800fbd2 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fbb2:	68da      	ldr	r2, [r3, #12]
 800fbb4:	0712      	lsls	r2, r2, #28
 800fbb6:	d50c      	bpl.n	800fbd2 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fbb8:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800fbbc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fbbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbc0:	2204      	movs	r2, #4
 800fbc2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fbc4:	69db      	ldr	r3, [r3, #28]
 800fbc6:	079b      	lsls	r3, r3, #30
 800fbc8:	d067      	beq.n	800fc9a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800fbca:	f7ff ffc0 	bl	800fb4e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fbd2:	6823      	ldr	r3, [r4, #0]
 800fbd4:	691a      	ldr	r2, [r3, #16]
 800fbd6:	06d0      	lsls	r0, r2, #27
 800fbd8:	d510      	bpl.n	800fbfc <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fbda:	68da      	ldr	r2, [r3, #12]
 800fbdc:	06d1      	lsls	r1, r2, #27
 800fbde:	d50d      	bpl.n	800fbfc <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fbe0:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800fbe4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fbe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fbe8:	2208      	movs	r2, #8
 800fbea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fbec:	69db      	ldr	r3, [r3, #28]
 800fbee:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800fbf2:	d058      	beq.n	800fca6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800fbf4:	f7ff ffab 	bl	800fb4e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fbfc:	6823      	ldr	r3, [r4, #0]
 800fbfe:	691a      	ldr	r2, [r3, #16]
 800fc00:	07d2      	lsls	r2, r2, #31
 800fc02:	d508      	bpl.n	800fc16 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fc04:	68da      	ldr	r2, [r3, #12]
 800fc06:	07d0      	lsls	r0, r2, #31
 800fc08:	d505      	bpl.n	800fc16 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc0a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc10:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc12:	f7f0 fd57 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc16:	6823      	ldr	r3, [r4, #0]
 800fc18:	691a      	ldr	r2, [r3, #16]
 800fc1a:	0611      	lsls	r1, r2, #24
 800fc1c:	d508      	bpl.n	800fc30 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc1e:	68da      	ldr	r2, [r3, #12]
 800fc20:	0612      	lsls	r2, r2, #24
 800fc22:	d505      	bpl.n	800fc30 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800fc28:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800fc2c:	f000 f8d9 	bl	800fde2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fc30:	6823      	ldr	r3, [r4, #0]
 800fc32:	691a      	ldr	r2, [r3, #16]
 800fc34:	05d0      	lsls	r0, r2, #23
 800fc36:	d508      	bpl.n	800fc4a <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc38:	68da      	ldr	r2, [r3, #12]
 800fc3a:	0611      	lsls	r1, r2, #24
 800fc3c:	d505      	bpl.n	800fc4a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800fc42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800fc46:	f000 f8cd 	bl	800fde4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc4a:	6823      	ldr	r3, [r4, #0]
 800fc4c:	691a      	ldr	r2, [r3, #16]
 800fc4e:	0652      	lsls	r2, r2, #25
 800fc50:	d508      	bpl.n	800fc64 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc52:	68da      	ldr	r2, [r3, #12]
 800fc54:	0650      	lsls	r0, r2, #25
 800fc56:	d505      	bpl.n	800fc64 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800fc5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800fc60:	f7ff ff77 	bl	800fb52 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	691a      	ldr	r2, [r3, #16]
 800fc68:	0691      	lsls	r1, r2, #26
 800fc6a:	d522      	bpl.n	800fcb2 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc6c:	68da      	ldr	r2, [r3, #12]
 800fc6e:	0692      	lsls	r2, r2, #26
 800fc70:	d51f      	bpl.n	800fcb2 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc72:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800fc76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc78:	611a      	str	r2, [r3, #16]
}
 800fc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800fc7e:	f000 b8af 	b.w	800fde0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc82:	f7ff ff63 	bl	800fb4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc86:	4620      	mov	r0, r4
 800fc88:	f7ff ff62 	bl	800fb50 <HAL_TIM_PWM_PulseFinishedCallback>
 800fc8c:	e776      	b.n	800fb7c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc8e:	f7ff ff5d 	bl	800fb4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc92:	4620      	mov	r0, r4
 800fc94:	f7ff ff5c 	bl	800fb50 <HAL_TIM_PWM_PulseFinishedCallback>
 800fc98:	e785      	b.n	800fba6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc9a:	f7ff ff57 	bl	800fb4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f7ff ff56 	bl	800fb50 <HAL_TIM_PWM_PulseFinishedCallback>
 800fca4:	e793      	b.n	800fbce <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fca6:	f7ff ff51 	bl	800fb4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f7ff ff50 	bl	800fb50 <HAL_TIM_PWM_PulseFinishedCallback>
 800fcb0:	e7a2      	b.n	800fbf8 <HAL_TIM_IRQHandler+0xa4>
}
 800fcb2:	bd10      	pop	{r4, pc}

0800fcb4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fcb4:	4a30      	ldr	r2, [pc, #192]	@ (800fd78 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800fcb6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fcb8:	4290      	cmp	r0, r2
 800fcba:	d012      	beq.n	800fce2 <TIM_Base_SetConfig+0x2e>
 800fcbc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800fcc0:	d00f      	beq.n	800fce2 <TIM_Base_SetConfig+0x2e>
 800fcc2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800fcc6:	4290      	cmp	r0, r2
 800fcc8:	d00b      	beq.n	800fce2 <TIM_Base_SetConfig+0x2e>
 800fcca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fcce:	4290      	cmp	r0, r2
 800fcd0:	d007      	beq.n	800fce2 <TIM_Base_SetConfig+0x2e>
 800fcd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fcd6:	4290      	cmp	r0, r2
 800fcd8:	d003      	beq.n	800fce2 <TIM_Base_SetConfig+0x2e>
 800fcda:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800fcde:	4290      	cmp	r0, r2
 800fce0:	d119      	bne.n	800fd16 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800fce2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800fce8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fcea:	4a23      	ldr	r2, [pc, #140]	@ (800fd78 <TIM_Base_SetConfig+0xc4>)
 800fcec:	4290      	cmp	r0, r2
 800fcee:	d029      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fcf0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800fcf4:	d026      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fcf6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800fcfa:	4290      	cmp	r0, r2
 800fcfc:	d022      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fcfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fd02:	4290      	cmp	r0, r2
 800fd04:	d01e      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fd06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fd0a:	4290      	cmp	r0, r2
 800fd0c:	d01a      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fd0e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800fd12:	4290      	cmp	r0, r2
 800fd14:	d016      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fd16:	4a19      	ldr	r2, [pc, #100]	@ (800fd7c <TIM_Base_SetConfig+0xc8>)
 800fd18:	4290      	cmp	r0, r2
 800fd1a:	d013      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fd1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fd20:	4290      	cmp	r0, r2
 800fd22:	d00f      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fd24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fd28:	4290      	cmp	r0, r2
 800fd2a:	d00b      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fd2c:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800fd30:	4290      	cmp	r0, r2
 800fd32:	d007      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fd34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fd38:	4290      	cmp	r0, r2
 800fd3a:	d003      	beq.n	800fd44 <TIM_Base_SetConfig+0x90>
 800fd3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fd40:	4290      	cmp	r0, r2
 800fd42:	d103      	bne.n	800fd4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd48:	68ca      	ldr	r2, [r1, #12]
 800fd4a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd4c:	694a      	ldr	r2, [r1, #20]
 800fd4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd52:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800fd54:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd56:	688b      	ldr	r3, [r1, #8]
 800fd58:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd5a:	680b      	ldr	r3, [r1, #0]
 800fd5c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd5e:	4b06      	ldr	r3, [pc, #24]	@ (800fd78 <TIM_Base_SetConfig+0xc4>)
 800fd60:	4298      	cmp	r0, r3
 800fd62:	d003      	beq.n	800fd6c <TIM_Base_SetConfig+0xb8>
 800fd64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fd68:	4298      	cmp	r0, r3
 800fd6a:	d101      	bne.n	800fd70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fd6c:	690b      	ldr	r3, [r1, #16]
 800fd6e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fd70:	2301      	movs	r3, #1
 800fd72:	6143      	str	r3, [r0, #20]
}
 800fd74:	4770      	bx	lr
 800fd76:	bf00      	nop
 800fd78:	40010000 	.word	0x40010000
 800fd7c:	40014000 	.word	0x40014000

0800fd80 <HAL_TIM_Base_Init>:
{
 800fd80:	b510      	push	{r4, lr}
  if (htim == NULL)
 800fd82:	4604      	mov	r4, r0
 800fd84:	b350      	cbz	r0, 800fddc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800fd86:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800fd8a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800fd8e:	b91b      	cbnz	r3, 800fd98 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800fd90:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800fd94:	f7ff fe60 	bl	800fa58 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800fd98:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd9a:	6820      	ldr	r0, [r4, #0]
 800fd9c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800fd9e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fda2:	f7ff ff87 	bl	800fcb4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fda6:	2301      	movs	r3, #1
  return HAL_OK;
 800fda8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fdaa:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fdae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800fdb2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800fdb6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800fdba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800fdbe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fdc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fdc6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800fdca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800fdce:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800fdd2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800fdd6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800fdda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800fddc:	2001      	movs	r0, #1
 800fdde:	e7fc      	b.n	800fdda <HAL_TIM_Base_Init+0x5a>

0800fde0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800fde0:	4770      	bx	lr

0800fde2 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800fde2:	4770      	bx	lr

0800fde4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800fde4:	4770      	bx	lr

0800fde6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800fde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fdea:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800fdee:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800fdf2:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800fdf6:	ea43 0308 	orr.w	r3, r3, r8
 800fdfa:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800fdfe:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800fe02:	6809      	ldr	r1, [r1, #0]
 800fe04:	b991      	cbnz	r1, 800fe2c <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fe06:	ea43 030e 	orr.w	r3, r3, lr
 800fe0a:	6801      	ldr	r1, [r0, #0]
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800fe12:	ea43 030c 	orr.w	r3, r3, ip
 800fe16:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800fe1a:	433b      	orrs	r3, r7
 800fe1c:	4333      	orrs	r3, r6
 800fe1e:	432b      	orrs	r3, r5
 800fe20:	4323      	orrs	r3, r4
 800fe22:	430b      	orrs	r3, r1
 800fe24:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800fe26:	2000      	movs	r0, #0
 800fe28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fe2c:	6801      	ldr	r1, [r0, #0]
 800fe2e:	ea43 030e 	orr.w	r3, r3, lr
 800fe32:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800fe36:	430b      	orrs	r3, r1
 800fe38:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fe3a:	ea42 030c 	orr.w	r3, r2, ip
 800fe3e:	6841      	ldr	r1, [r0, #4]
 800fe40:	433b      	orrs	r3, r7
 800fe42:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800fe46:	4333      	orrs	r3, r6
 800fe48:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800fe4c:	432b      	orrs	r3, r5
 800fe4e:	4323      	orrs	r3, r4
 800fe50:	4313      	orrs	r3, r2
 800fe52:	6043      	str	r3, [r0, #4]
 800fe54:	e7e7      	b.n	800fe26 <FMC_SDRAM_Init+0x40>

0800fe56 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fe56:	68cb      	ldr	r3, [r1, #12]
 800fe58:	f103 3cff 	add.w	ip, r3, #4294967295
 800fe5c:	694b      	ldr	r3, [r1, #20]
{
 800fe5e:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fe60:	3b01      	subs	r3, #1
 800fe62:	680f      	ldr	r7, [r1, #0]
 800fe64:	684c      	ldr	r4, [r1, #4]
 800fe66:	688e      	ldr	r6, [r1, #8]
 800fe68:	051b      	lsls	r3, r3, #20
 800fe6a:	690d      	ldr	r5, [r1, #16]
 800fe6c:	3c01      	subs	r4, #1
 800fe6e:	6989      	ldr	r1, [r1, #24]
 800fe70:	3e01      	subs	r6, #1
 800fe72:	3d01      	subs	r5, #1
 800fe74:	3f01      	subs	r7, #1
 800fe76:	3901      	subs	r1, #1
 800fe78:	0124      	lsls	r4, r4, #4
 800fe7a:	0236      	lsls	r6, r6, #8
 800fe7c:	042d      	lsls	r5, r5, #16
 800fe7e:	0609      	lsls	r1, r1, #24
 800fe80:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800fe84:	b95a      	cbnz	r2, 800fe9e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fe86:	433b      	orrs	r3, r7
 800fe88:	6882      	ldr	r2, [r0, #8]
 800fe8a:	4323      	orrs	r3, r4
 800fe8c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800fe90:	4333      	orrs	r3, r6
 800fe92:	432b      	orrs	r3, r5
 800fe94:	430b      	orrs	r3, r1
 800fe96:	4313      	orrs	r3, r2
 800fe98:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800fe9a:	2000      	movs	r0, #0
 800fe9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fe9e:	6882      	ldr	r2, [r0, #8]
 800fea0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800fea4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800fea8:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800feaa:	ea44 0306 	orr.w	r3, r4, r6
 800feae:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800feb0:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800feb2:	68c2      	ldr	r2, [r0, #12]
 800feb4:	432b      	orrs	r3, r5
 800feb6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800feba:	430b      	orrs	r3, r1
 800febc:	4313      	orrs	r3, r2
 800febe:	60c3      	str	r3, [r0, #12]
 800fec0:	e7eb      	b.n	800fe9a <FMC_SDRAM_Timing_Init+0x44>

0800fec2 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fec2:	6902      	ldr	r2, [r0, #16]
{
 800fec4:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fec6:	e9d1 3400 	ldrd	r3, r4, [r1]
 800feca:	0d92      	lsrs	r2, r2, #22
 800fecc:	4323      	orrs	r3, r4
 800fece:	68cc      	ldr	r4, [r1, #12]
 800fed0:	0592      	lsls	r2, r2, #22
 800fed2:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800fed6:	4313      	orrs	r3, r2
 800fed8:	688a      	ldr	r2, [r1, #8]
 800feda:	3a01      	subs	r2, #1
 800fedc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800fee0:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800fee2:	2000      	movs	r0, #0
 800fee4:	bd10      	pop	{r4, pc}

0800fee6 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800fee6:	6943      	ldr	r3, [r0, #20]
 800fee8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800feec:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800fef0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800fef4:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800fef6:	2000      	movs	r0, #0
 800fef8:	4770      	bx	lr

0800fefa <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800fefa:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800fefc:	f001 fa00 	bl	8011300 <xTaskGetSchedulerState>
 800ff00:	2801      	cmp	r0, #1
 800ff02:	d003      	beq.n	800ff0c <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800ff04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800ff08:	f000 b9bc 	b.w	8010284 <xPortSysTickHandler>
}
 800ff0c:	bd08      	pop	{r3, pc}
	...

0800ff10 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff10:	4b10      	ldr	r3, [pc, #64]	@ (800ff54 <prvInsertBlockIntoFreeList+0x44>)
{
 800ff12:	b530      	push	{r4, r5, lr}
 800ff14:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff16:	461a      	mov	r2, r3
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4283      	cmp	r3, r0
 800ff1c:	d3fb      	bcc.n	800ff16 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff1e:	6854      	ldr	r4, [r2, #4]
 800ff20:	1911      	adds	r1, r2, r4
 800ff22:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff24:	bf01      	itttt	eq
 800ff26:	6841      	ldreq	r1, [r0, #4]
 800ff28:	4610      	moveq	r0, r2
 800ff2a:	1909      	addeq	r1, r1, r4
 800ff2c:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff2e:	6844      	ldr	r4, [r0, #4]
 800ff30:	1901      	adds	r1, r0, r4
 800ff32:	428b      	cmp	r3, r1
 800ff34:	d10b      	bne.n	800ff4e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff36:	68a9      	ldr	r1, [r5, #8]
 800ff38:	428b      	cmp	r3, r1
 800ff3a:	d003      	beq.n	800ff44 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ff3c:	6859      	ldr	r1, [r3, #4]
 800ff3e:	4421      	add	r1, r4
 800ff40:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff42:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff44:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff46:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff48:	bf18      	it	ne
 800ff4a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff4c:	bd30      	pop	{r4, r5, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff4e:	4619      	mov	r1, r3
 800ff50:	e7f8      	b.n	800ff44 <prvInsertBlockIntoFreeList+0x34>
 800ff52:	bf00      	nop
 800ff54:	20001b0c 	.word	0x20001b0c

0800ff58 <pvPortMalloc>:
{
 800ff58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800ff5c:	4c40      	ldr	r4, [pc, #256]	@ (8010060 <pvPortMalloc+0x108>)
{
 800ff5e:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800ff60:	f000 ff98 	bl	8010e94 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ff64:	68a3      	ldr	r3, [r4, #8]
 800ff66:	b9f3      	cbnz	r3, 800ffa6 <pvPortMalloc+0x4e>
	uxAddress = ( size_t ) ucHeap;
 800ff68:	4a3e      	ldr	r2, [pc, #248]	@ (8010064 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff6a:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff6c:	bf1b      	ittet	ne
 800ff6e:	1dd1      	addne	r1, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff70:	f502 3200 	addne.w	r2, r2, #131072	@ 0x20000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff74:	f44f 3300 	moveq.w	r3, #131072	@ 0x20000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff78:	f021 0107 	bicne.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff7c:	bf1c      	itt	ne
 800ff7e:	1a53      	subne	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff80:	460a      	movne	r2, r1
	xStart.xBlockSize = ( size_t ) 0;
 800ff82:	2100      	movs	r1, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff84:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff86:	6022      	str	r2, [r4, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff88:	6061      	str	r1, [r4, #4]
	uxAddress -= xHeapStructSize;
 800ff8a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff8c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800ff90:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff94:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800ff96:	60a3      	str	r3, [r4, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff98:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffa0:	e9c4 1103 	strd	r1, r1, [r4, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ffa4:	6163      	str	r3, [r4, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ffa6:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800ffaa:	ea18 0f05 	tst.w	r8, r5
 800ffae:	d007      	beq.n	800ffc0 <pvPortMalloc+0x68>
			vApplicationMallocFailedHook();
 800ffb0:	2700      	movs	r7, #0
	( void ) xTaskResumeAll();
 800ffb2:	f000 ffed 	bl	8010f90 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800ffb6:	f001 fb44 	bl	8011642 <vApplicationMallocFailedHook>
}
 800ffba:	4638      	mov	r0, r7
 800ffbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xWantedSize > 0 )
 800ffc0:	2d00      	cmp	r5, #0
 800ffc2:	d0f5      	beq.n	800ffb0 <pvPortMalloc+0x58>
				xWantedSize += xHeapStructSize;
 800ffc4:	f105 0308 	add.w	r3, r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ffc8:	0768      	lsls	r0, r5, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ffca:	bf1c      	itt	ne
 800ffcc:	f023 0307 	bicne.w	r3, r3, #7
 800ffd0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d0ec      	beq.n	800ffb0 <pvPortMalloc+0x58>
 800ffd6:	6926      	ldr	r6, [r4, #16]
 800ffd8:	429e      	cmp	r6, r3
 800ffda:	d3e9      	bcc.n	800ffb0 <pvPortMalloc+0x58>
				pxBlock = xStart.pxNextFreeBlock;
 800ffdc:	6825      	ldr	r5, [r4, #0]
				pxPreviousBlock = &xStart;
 800ffde:	4820      	ldr	r0, [pc, #128]	@ (8010060 <pvPortMalloc+0x108>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffe0:	686a      	ldr	r2, [r5, #4]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d201      	bcs.n	800ffea <pvPortMalloc+0x92>
 800ffe6:	6829      	ldr	r1, [r5, #0]
 800ffe8:	b9c1      	cbnz	r1, 801001c <pvPortMalloc+0xc4>
				if( pxBlock != pxEnd )
 800ffea:	68a1      	ldr	r1, [r4, #8]
 800ffec:	42a9      	cmp	r1, r5
 800ffee:	d0df      	beq.n	800ffb0 <pvPortMalloc+0x58>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fff0:	1ad2      	subs	r2, r2, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fff2:	6807      	ldr	r7, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fff4:	6829      	ldr	r1, [r5, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fff6:	2a10      	cmp	r2, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fff8:	f107 0708 	add.w	r7, r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fffc:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fffe:	d914      	bls.n	801002a <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010000:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010002:	0741      	lsls	r1, r0, #29
 8010004:	d00d      	beq.n	8010022 <pvPortMalloc+0xca>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801000a:	b672      	cpsid	i
 801000c:	f383 8811 	msr	BASEPRI, r3
 8010010:	f3bf 8f6f 	isb	sy
 8010014:	f3bf 8f4f 	dsb	sy
 8010018:	b662      	cpsie	i
 801001a:	e7fe      	b.n	801001a <pvPortMalloc+0xc2>
 801001c:	4628      	mov	r0, r5
 801001e:	460d      	mov	r5, r1
 8010020:	e7de      	b.n	800ffe0 <pvPortMalloc+0x88>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010022:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010024:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010026:	f7ff ff73 	bl	800ff10 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801002a:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801002c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801002e:	68e1      	ldr	r1, [r4, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010030:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010032:	ea48 0202 	orr.w	r2, r8, r2
					pxBlock->pxNextFreeBlock = NULL;
 8010036:	602b      	str	r3, [r5, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010038:	428e      	cmp	r6, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801003a:	606a      	str	r2, [r5, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801003c:	6126      	str	r6, [r4, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801003e:	bf38      	it	cc
 8010040:	60e6      	strcc	r6, [r4, #12]
	( void ) xTaskResumeAll();
 8010042:	f000 ffa5 	bl	8010f90 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010046:	077b      	lsls	r3, r7, #29
 8010048:	d0b7      	beq.n	800ffba <pvPortMalloc+0x62>
 801004a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801004e:	b672      	cpsid	i
 8010050:	f383 8811 	msr	BASEPRI, r3
 8010054:	f3bf 8f6f 	isb	sy
 8010058:	f3bf 8f4f 	dsb	sy
 801005c:	b662      	cpsie	i
 801005e:	e7fe      	b.n	801005e <pvPortMalloc+0x106>
 8010060:	20001b0c 	.word	0x20001b0c
 8010064:	20001b24 	.word	0x20001b24

08010068 <vPortFree>:
{
 8010068:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 801006a:	4604      	mov	r4, r0
 801006c:	b388      	cbz	r0, 80100d2 <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801006e:	4d19      	ldr	r5, [pc, #100]	@ (80100d4 <vPortFree+0x6c>)
 8010070:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010074:	696a      	ldr	r2, [r5, #20]
 8010076:	4213      	tst	r3, r2
 8010078:	d10a      	bne.n	8010090 <vPortFree+0x28>
 801007a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801007e:	b672      	cpsid	i
 8010080:	f383 8811 	msr	BASEPRI, r3
 8010084:	f3bf 8f6f 	isb	sy
 8010088:	f3bf 8f4f 	dsb	sy
 801008c:	b662      	cpsie	i
 801008e:	e7fe      	b.n	801008e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010090:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8010094:	b151      	cbz	r1, 80100ac <vPortFree+0x44>
 8010096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801009a:	b672      	cpsid	i
 801009c:	f383 8811 	msr	BASEPRI, r3
 80100a0:	f3bf 8f6f 	isb	sy
 80100a4:	f3bf 8f4f 	dsb	sy
 80100a8:	b662      	cpsie	i
 80100aa:	e7fe      	b.n	80100aa <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80100ac:	ea23 0302 	bic.w	r3, r3, r2
 80100b0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80100b4:	f000 feee 	bl	8010e94 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100b8:	692a      	ldr	r2, [r5, #16]
 80100ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100be:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100c2:	4413      	add	r3, r2
 80100c4:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100c6:	f7ff ff23 	bl	800ff10 <prvInsertBlockIntoFreeList>
}
 80100ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 80100ce:	f000 bf5f 	b.w	8010f90 <xTaskResumeAll>
}
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	20001b0c 	.word	0x20001b0c

080100d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100d8:	4808      	ldr	r0, [pc, #32]	@ (80100fc <prvPortStartFirstTask+0x24>)
 80100da:	6800      	ldr	r0, [r0, #0]
 80100dc:	6800      	ldr	r0, [r0, #0]
 80100de:	f380 8808 	msr	MSP, r0
 80100e2:	f04f 0000 	mov.w	r0, #0
 80100e6:	f380 8814 	msr	CONTROL, r0
 80100ea:	b662      	cpsie	i
 80100ec:	b661      	cpsie	f
 80100ee:	f3bf 8f4f 	dsb	sy
 80100f2:	f3bf 8f6f 	isb	sy
 80100f6:	df00      	svc	0
 80100f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80100fa:	0000      	.short	0x0000
 80100fc:	e000ed08 	.word	0xe000ed08

08010100 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010100:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010110 <vPortEnableVFP+0x10>
 8010104:	6801      	ldr	r1, [r0, #0]
 8010106:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801010a:	6001      	str	r1, [r0, #0]
 801010c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801010e:	0000      	.short	0x0000
 8010110:	e000ed88 	.word	0xe000ed88

08010114 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8010114:	2300      	movs	r3, #0
{
 8010116:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8010118:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 801011a:	4b0f      	ldr	r3, [pc, #60]	@ (8010158 <prvTaskExitError+0x44>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	3301      	adds	r3, #1
 8010120:	d00a      	beq.n	8010138 <prvTaskExitError+0x24>
 8010122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010126:	b672      	cpsid	i
 8010128:	f383 8811 	msr	BASEPRI, r3
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	b662      	cpsie	i
 8010136:	e7fe      	b.n	8010136 <prvTaskExitError+0x22>
 8010138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801013c:	b672      	cpsid	i
 801013e:	f383 8811 	msr	BASEPRI, r3
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	f3bf 8f4f 	dsb	sy
 801014a:	b662      	cpsie	i
	while( ulDummy == 0 )
 801014c:	9b01      	ldr	r3, [sp, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d0fc      	beq.n	801014c <prvTaskExitError+0x38>
}
 8010152:	b002      	add	sp, #8
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop
 8010158:	2000004c 	.word	0x2000004c

0801015c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801015c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010160:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010164:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8010168:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801016a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801016c:	4b03      	ldr	r3, [pc, #12]	@ (801017c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801016e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010170:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010172:	f06f 0302 	mvn.w	r3, #2
 8010176:	6203      	str	r3, [r0, #32]
}
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	08010115 	.word	0x08010115

08010180 <SVC_Handler>:
	__asm volatile (
 8010180:	4b07      	ldr	r3, [pc, #28]	@ (80101a0 <pxCurrentTCBConst2>)
 8010182:	6819      	ldr	r1, [r3, #0]
 8010184:	6808      	ldr	r0, [r1, #0]
 8010186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801018a:	f380 8809 	msr	PSP, r0
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f04f 0000 	mov.w	r0, #0
 8010196:	f380 8811 	msr	BASEPRI, r0
 801019a:	4770      	bx	lr
 801019c:	f3af 8000 	nop.w

080101a0 <pxCurrentTCBConst2>:
 80101a0:	20021b30 	.word	0x20021b30

080101a4 <vPortEnterCritical>:
 80101a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101a8:	b672      	cpsid	i
 80101aa:	f383 8811 	msr	BASEPRI, r3
 80101ae:	f3bf 8f6f 	isb	sy
 80101b2:	f3bf 8f4f 	dsb	sy
 80101b6:	b662      	cpsie	i
	uxCriticalNesting++;
 80101b8:	4a0b      	ldr	r2, [pc, #44]	@ (80101e8 <vPortEnterCritical+0x44>)
 80101ba:	6813      	ldr	r3, [r2, #0]
 80101bc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80101be:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80101c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80101c2:	d110      	bne.n	80101e6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80101c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80101c8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	b153      	cbz	r3, 80101e6 <vPortEnterCritical+0x42>
 80101d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d4:	b672      	cpsid	i
 80101d6:	f383 8811 	msr	BASEPRI, r3
 80101da:	f3bf 8f6f 	isb	sy
 80101de:	f3bf 8f4f 	dsb	sy
 80101e2:	b662      	cpsie	i
 80101e4:	e7fe      	b.n	80101e4 <vPortEnterCritical+0x40>
}
 80101e6:	4770      	bx	lr
 80101e8:	2000004c 	.word	0x2000004c

080101ec <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80101ec:	4a09      	ldr	r2, [pc, #36]	@ (8010214 <vPortExitCritical+0x28>)
 80101ee:	6813      	ldr	r3, [r2, #0]
 80101f0:	b953      	cbnz	r3, 8010208 <vPortExitCritical+0x1c>
 80101f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101f6:	b672      	cpsid	i
 80101f8:	f383 8811 	msr	BASEPRI, r3
 80101fc:	f3bf 8f6f 	isb	sy
 8010200:	f3bf 8f4f 	dsb	sy
 8010204:	b662      	cpsie	i
 8010206:	e7fe      	b.n	8010206 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8010208:	3b01      	subs	r3, #1
 801020a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801020c:	b90b      	cbnz	r3, 8010212 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801020e:	f383 8811 	msr	BASEPRI, r3
}
 8010212:	4770      	bx	lr
 8010214:	2000004c 	.word	0x2000004c
	...

08010220 <PendSV_Handler>:
	__asm volatile
 8010220:	f3ef 8009 	mrs	r0, PSP
 8010224:	f3bf 8f6f 	isb	sy
 8010228:	4b15      	ldr	r3, [pc, #84]	@ (8010280 <pxCurrentTCBConst>)
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	f01e 0f10 	tst.w	lr, #16
 8010230:	bf08      	it	eq
 8010232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801023a:	6010      	str	r0, [r2, #0]
 801023c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010244:	b672      	cpsid	i
 8010246:	f380 8811 	msr	BASEPRI, r0
 801024a:	f3bf 8f4f 	dsb	sy
 801024e:	f3bf 8f6f 	isb	sy
 8010252:	b662      	cpsie	i
 8010254:	f000 ff62 	bl	801111c <vTaskSwitchContext>
 8010258:	f04f 0000 	mov.w	r0, #0
 801025c:	f380 8811 	msr	BASEPRI, r0
 8010260:	bc09      	pop	{r0, r3}
 8010262:	6819      	ldr	r1, [r3, #0]
 8010264:	6808      	ldr	r0, [r1, #0]
 8010266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026a:	f01e 0f10 	tst.w	lr, #16
 801026e:	bf08      	it	eq
 8010270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010274:	f380 8809 	msr	PSP, r0
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <pxCurrentTCBConst>:
 8010280:	20021b30 	.word	0x20021b30

08010284 <xPortSysTickHandler>:
{
 8010284:	b508      	push	{r3, lr}
	__asm volatile
 8010286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801028a:	b672      	cpsid	i
 801028c:	f383 8811 	msr	BASEPRI, r3
 8010290:	f3bf 8f6f 	isb	sy
 8010294:	f3bf 8f4f 	dsb	sy
 8010298:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801029a:	f000 fe05 	bl	8010ea8 <xTaskIncrementTick>
 801029e:	b128      	cbz	r0, 80102ac <xPortSysTickHandler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80102a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80102a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80102ac:	2300      	movs	r3, #0
 80102ae:	f383 8811 	msr	BASEPRI, r3
}
 80102b2:	bd08      	pop	{r3, pc}

080102b4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80102b4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80102b8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80102ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80102be:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80102c0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80102c2:	4b04      	ldr	r3, [pc, #16]	@ (80102d4 <vPortSetupTimerInterrupt+0x20>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80102ca:	3b01      	subs	r3, #1
 80102cc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80102ce:	2307      	movs	r3, #7
 80102d0:	6113      	str	r3, [r2, #16]
}
 80102d2:	4770      	bx	lr
 80102d4:	20000040 	.word	0x20000040

080102d8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80102d8:	4b2c      	ldr	r3, [pc, #176]	@ (801038c <xPortStartScheduler+0xb4>)
{
 80102da:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80102dc:	781a      	ldrb	r2, [r3, #0]
 80102de:	b2d2      	uxtb	r2, r2
 80102e0:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80102e2:	22ff      	movs	r2, #255	@ 0xff
 80102e4:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80102ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80102f2:	4b27      	ldr	r3, [pc, #156]	@ (8010390 <xPortStartScheduler+0xb8>)
 80102f4:	f002 0250 	and.w	r2, r2, #80	@ 0x50
 80102f8:	701a      	strb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80102fa:	2207      	movs	r2, #7
 80102fc:	605a      	str	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102fe:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8010302:	685a      	ldr	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010304:	0609      	lsls	r1, r1, #24
 8010306:	d40c      	bmi.n	8010322 <xPortStartScheduler+0x4a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010308:	2a03      	cmp	r2, #3
 801030a:	d013      	beq.n	8010334 <xPortStartScheduler+0x5c>
	__asm volatile
 801030c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010310:	b672      	cpsid	i
 8010312:	f383 8811 	msr	BASEPRI, r3
 8010316:	f3bf 8f6f 	isb	sy
 801031a:	f3bf 8f4f 	dsb	sy
 801031e:	b662      	cpsie	i
 8010320:	e7fe      	b.n	8010320 <xPortStartScheduler+0x48>
			ulMaxPRIGROUPValue--;
 8010322:	3a01      	subs	r2, #1
 8010324:	605a      	str	r2, [r3, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010326:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801032a:	0052      	lsls	r2, r2, #1
 801032c:	b2d2      	uxtb	r2, r2
 801032e:	f88d 2003 	strb.w	r2, [sp, #3]
 8010332:	e7e4      	b.n	80102fe <xPortStartScheduler+0x26>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010334:	f44f 7240 	mov.w	r2, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010338:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 801033c:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801033e:	605a      	str	r2, [r3, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010340:	9b01      	ldr	r3, [sp, #4]
 8010342:	4a12      	ldr	r2, [pc, #72]	@ (801038c <xPortStartScheduler+0xb4>)
 8010344:	b2db      	uxtb	r3, r3
 8010346:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010348:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801034c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010350:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010354:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8010358:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801035c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8010360:	f7ff ffa8 	bl	80102b4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8010364:	4b0b      	ldr	r3, [pc, #44]	@ (8010394 <xPortStartScheduler+0xbc>)
 8010366:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8010368:	f7ff feca 	bl	8010100 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801036c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8010370:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010374:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8010378:	f7ff feae 	bl	80100d8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801037c:	f000 fece 	bl	801111c <vTaskSwitchContext>
}
 8010380:	4628      	mov	r0, r5
	prvTaskExitError();
 8010382:	f7ff fec7 	bl	8010114 <prvTaskExitError>
}
 8010386:	b003      	add	sp, #12
 8010388:	bd30      	pop	{r4, r5, pc}
 801038a:	bf00      	nop
 801038c:	e000e400 	.word	0xe000e400
 8010390:	20021b24 	.word	0x20021b24
 8010394:	2000004c 	.word	0x2000004c

08010398 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010398:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801039c:	2b0f      	cmp	r3, #15
 801039e:	4a13      	ldr	r2, [pc, #76]	@ (80103ec <vPortValidateInterruptPriority+0x54>)
 80103a0:	d90f      	bls.n	80103c2 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80103a2:	4913      	ldr	r1, [pc, #76]	@ (80103f0 <vPortValidateInterruptPriority+0x58>)
 80103a4:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80103a6:	7811      	ldrb	r1, [r2, #0]
 80103a8:	4299      	cmp	r1, r3
 80103aa:	d90a      	bls.n	80103c2 <vPortValidateInterruptPriority+0x2a>
 80103ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103b0:	b672      	cpsid	i
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	b662      	cpsie	i
 80103c0:	e7fe      	b.n	80103c0 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80103c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80103c6:	6852      	ldr	r2, [r2, #4]
 80103c8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80103cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d90a      	bls.n	80103ea <vPortValidateInterruptPriority+0x52>
 80103d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d8:	b672      	cpsid	i
 80103da:	f383 8811 	msr	BASEPRI, r3
 80103de:	f3bf 8f6f 	isb	sy
 80103e2:	f3bf 8f4f 	dsb	sy
 80103e6:	b662      	cpsie	i
 80103e8:	e7fe      	b.n	80103e8 <vPortValidateInterruptPriority+0x50>
	}
 80103ea:	4770      	bx	lr
 80103ec:	20021b24 	.word	0x20021b24
 80103f0:	e000e3f0 	.word	0xe000e3f0

080103f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103f4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80103f8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103fc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103fe:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010400:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010404:	2300      	movs	r3, #0
 8010406:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010408:	4770      	bx	lr

0801040a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801040a:	2300      	movs	r3, #0
 801040c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801040e:	4770      	bx	lr

08010410 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8010410:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010412:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8010414:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010416:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010418:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801041a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801041c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 801041e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010420:	3301      	adds	r3, #1
 8010422:	6003      	str	r3, [r0, #0]
}
 8010424:	4770      	bx	lr

08010426 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010426:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010428:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801042a:	1c63      	adds	r3, r4, #1
 801042c:	d10a      	bne.n	8010444 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801042e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010430:	685a      	ldr	r2, [r3, #4]
 8010432:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010434:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010436:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8010438:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801043a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 801043c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801043e:	3301      	adds	r3, #1
 8010440:	6003      	str	r3, [r0, #0]
}
 8010442:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010444:	f100 0208 	add.w	r2, r0, #8
 8010448:	4613      	mov	r3, r2
 801044a:	6852      	ldr	r2, [r2, #4]
 801044c:	6815      	ldr	r5, [r2, #0]
 801044e:	42a5      	cmp	r5, r4
 8010450:	d9fa      	bls.n	8010448 <vListInsert+0x22>
 8010452:	e7ed      	b.n	8010430 <vListInsert+0xa>

08010454 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010454:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010456:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 801045a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801045c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801045e:	6859      	ldr	r1, [r3, #4]
 8010460:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010462:	bf08      	it	eq
 8010464:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010466:	2200      	movs	r2, #0
 8010468:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	3a01      	subs	r2, #1
 801046e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010470:	6818      	ldr	r0, [r3, #0]
}
 8010472:	4770      	bx	lr

08010474 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010474:	b510      	push	{r4, lr}
 8010476:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010478:	f7ff fe94 	bl	80101a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801047c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801047e:	f7ff feb5 	bl	80101ec <vPortExitCritical>

	return xReturn;
}
 8010482:	fab4 f084 	clz	r0, r4
 8010486:	0940      	lsrs	r0, r0, #5
 8010488:	bd10      	pop	{r4, pc}

0801048a <prvCopyDataToQueue>:
{
 801048a:	b570      	push	{r4, r5, r6, lr}
 801048c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801048e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8010490:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010492:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010494:	b942      	cbnz	r2, 80104a8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010496:	6806      	ldr	r6, [r0, #0]
 8010498:	b99e      	cbnz	r6, 80104c2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801049a:	6880      	ldr	r0, [r0, #8]
 801049c:	f000 ff8c 	bl	80113b8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80104a0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80104a2:	3501      	adds	r5, #1
 80104a4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80104a6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80104a8:	b96e      	cbnz	r6, 80104c6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104aa:	6840      	ldr	r0, [r0, #4]
 80104ac:	f00f ff2b 	bl	8020306 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104b0:	6863      	ldr	r3, [r4, #4]
 80104b2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80104b4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80104b6:	68a2      	ldr	r2, [r4, #8]
 80104b8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104ba:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80104bc:	bf24      	itt	cs
 80104be:	6823      	ldrcs	r3, [r4, #0]
 80104c0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80104c2:	2000      	movs	r0, #0
 80104c4:	e7ed      	b.n	80104a2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80104c6:	68c0      	ldr	r0, [r0, #12]
 80104c8:	f00f ff1d 	bl	8020306 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80104cc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80104ce:	68e3      	ldr	r3, [r4, #12]
 80104d0:	4251      	negs	r1, r2
 80104d2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80104d4:	6822      	ldr	r2, [r4, #0]
 80104d6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80104d8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80104da:	bf3e      	ittt	cc
 80104dc:	68a3      	ldrcc	r3, [r4, #8]
 80104de:	185b      	addcc	r3, r3, r1
 80104e0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80104e2:	2e02      	cmp	r6, #2
 80104e4:	d1ed      	bne.n	80104c2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104e6:	b10d      	cbz	r5, 80104ec <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80104e8:	3d01      	subs	r5, #1
 80104ea:	e7ea      	b.n	80104c2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80104ec:	4628      	mov	r0, r5
 80104ee:	e7d8      	b.n	80104a2 <prvCopyDataToQueue+0x18>

080104f0 <prvCopyDataFromQueue>:
{
 80104f0:	4603      	mov	r3, r0
 80104f2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80104f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80104f6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80104f8:	b162      	cbz	r2, 8010514 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104fa:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80104fc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104fe:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010500:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010502:	60dc      	str	r4, [r3, #12]
}
 8010504:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010508:	bf24      	itt	cs
 801050a:	6819      	ldrcs	r1, [r3, #0]
 801050c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801050e:	68d9      	ldr	r1, [r3, #12]
 8010510:	f00f bef9 	b.w	8020306 <memcpy>
}
 8010514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010518:	4770      	bx	lr

0801051a <prvUnlockQueue>:
{
 801051a:	b570      	push	{r4, r5, r6, lr}
 801051c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801051e:	f7ff fe41 	bl	80101a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010522:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010526:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 801052a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801052c:	2d00      	cmp	r5, #0
 801052e:	dc14      	bgt.n	801055a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8010530:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010532:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8010536:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801053a:	f7ff fe57 	bl	80101ec <vPortExitCritical>
	taskENTER_CRITICAL();
 801053e:	f7ff fe31 	bl	80101a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010542:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 8010546:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010548:	2d00      	cmp	r5, #0
 801054a:	dc12      	bgt.n	8010572 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 801054c:	23ff      	movs	r3, #255	@ 0xff
 801054e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8010552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8010556:	f7ff be49 	b.w	80101ec <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801055a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801055c:	2b00      	cmp	r3, #0
 801055e:	d0e7      	beq.n	8010530 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010560:	4630      	mov	r0, r6
 8010562:	f000 fe41 	bl	80111e8 <xTaskRemoveFromEventList>
 8010566:	b108      	cbz	r0, 801056c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8010568:	f000 fec2 	bl	80112f0 <vTaskMissedYield>
			--cTxLock;
 801056c:	3d01      	subs	r5, #1
 801056e:	b26d      	sxtb	r5, r5
 8010570:	e7dc      	b.n	801052c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010572:	6923      	ldr	r3, [r4, #16]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d0e9      	beq.n	801054c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010578:	4630      	mov	r0, r6
 801057a:	f000 fe35 	bl	80111e8 <xTaskRemoveFromEventList>
 801057e:	b108      	cbz	r0, 8010584 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8010580:	f000 feb6 	bl	80112f0 <vTaskMissedYield>
				--cRxLock;
 8010584:	3d01      	subs	r5, #1
 8010586:	b26d      	sxtb	r5, r5
 8010588:	e7de      	b.n	8010548 <prvUnlockQueue+0x2e>

0801058a <xQueueGenericReset>:
{
 801058a:	b538      	push	{r3, r4, r5, lr}
 801058c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 801058e:	4604      	mov	r4, r0
 8010590:	b950      	cbnz	r0, 80105a8 <xQueueGenericReset+0x1e>
 8010592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010596:	b672      	cpsid	i
 8010598:	f383 8811 	msr	BASEPRI, r3
 801059c:	f3bf 8f6f 	isb	sy
 80105a0:	f3bf 8f4f 	dsb	sy
 80105a4:	b662      	cpsie	i
 80105a6:	e7fe      	b.n	80105a6 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80105a8:	f7ff fdfc 	bl	80101a4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105ac:	6822      	ldr	r2, [r4, #0]
 80105ae:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80105b2:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105b4:	434b      	muls	r3, r1
 80105b6:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105b8:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105ba:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105bc:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80105be:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80105c0:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105c2:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80105c4:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80105c6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80105ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80105ce:	b9a5      	cbnz	r5, 80105fa <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105d0:	6923      	ldr	r3, [r4, #16]
 80105d2:	b173      	cbz	r3, 80105f2 <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105d4:	f104 0010 	add.w	r0, r4, #16
 80105d8:	f000 fe06 	bl	80111e8 <xTaskRemoveFromEventList>
 80105dc:	b148      	cbz	r0, 80105f2 <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 80105de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80105e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80105f2:	f7ff fdfb 	bl	80101ec <vPortExitCritical>
}
 80105f6:	2001      	movs	r0, #1
 80105f8:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80105fa:	f104 0010 	add.w	r0, r4, #16
 80105fe:	f7ff fef9 	bl	80103f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010602:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010606:	f7ff fef5 	bl	80103f4 <vListInitialise>
 801060a:	e7f2      	b.n	80105f2 <xQueueGenericReset+0x68>

0801060c <xQueueGenericCreate>:
	{
 801060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801060e:	460d      	mov	r5, r1
 8010610:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010612:	4606      	mov	r6, r0
 8010614:	b950      	cbnz	r0, 801062c <xQueueGenericCreate+0x20>
 8010616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801061a:	b672      	cpsid	i
 801061c:	f383 8811 	msr	BASEPRI, r3
 8010620:	f3bf 8f6f 	isb	sy
 8010624:	f3bf 8f4f 	dsb	sy
 8010628:	b662      	cpsie	i
 801062a:	e7fe      	b.n	801062a <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801062c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801062e:	3050      	adds	r0, #80	@ 0x50
 8010630:	f7ff fc92 	bl	800ff58 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010634:	4604      	mov	r4, r0
 8010636:	b158      	cbz	r0, 8010650 <xQueueGenericCreate+0x44>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8010638:	b165      	cbz	r5, 8010654 <xQueueGenericCreate+0x48>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801063a:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801063e:	2101      	movs	r1, #1
 8010640:	4620      	mov	r0, r4
 8010642:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8010644:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010648:	f7ff ff9f 	bl	801058a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801064c:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8010650:	4620      	mov	r0, r4
 8010652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010654:	4603      	mov	r3, r0
 8010656:	e7f2      	b.n	801063e <xQueueGenericCreate+0x32>

08010658 <xQueueGenericSend>:
{
 8010658:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801065c:	460f      	mov	r7, r1
 801065e:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8010660:	4604      	mov	r4, r0
{
 8010662:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010664:	b950      	cbnz	r0, 801067c <xQueueGenericSend+0x24>
 8010666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801066a:	b672      	cpsid	i
 801066c:	f383 8811 	msr	BASEPRI, r3
 8010670:	f3bf 8f6f 	isb	sy
 8010674:	f3bf 8f4f 	dsb	sy
 8010678:	b662      	cpsie	i
 801067a:	e7fe      	b.n	801067a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801067c:	b961      	cbnz	r1, 8010698 <xQueueGenericSend+0x40>
 801067e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010680:	b153      	cbz	r3, 8010698 <xQueueGenericSend+0x40>
 8010682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010686:	b672      	cpsid	i
 8010688:	f383 8811 	msr	BASEPRI, r3
 801068c:	f3bf 8f6f 	isb	sy
 8010690:	f3bf 8f4f 	dsb	sy
 8010694:	b662      	cpsie	i
 8010696:	e7fe      	b.n	8010696 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010698:	2e02      	cmp	r6, #2
 801069a:	d10d      	bne.n	80106b8 <xQueueGenericSend+0x60>
 801069c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d00a      	beq.n	80106b8 <xQueueGenericSend+0x60>
 80106a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a6:	b672      	cpsid	i
 80106a8:	f383 8811 	msr	BASEPRI, r3
 80106ac:	f3bf 8f6f 	isb	sy
 80106b0:	f3bf 8f4f 	dsb	sy
 80106b4:	b662      	cpsie	i
 80106b6:	e7fe      	b.n	80106b6 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80106b8:	f000 fe22 	bl	8011300 <xTaskGetSchedulerState>
 80106bc:	4605      	mov	r5, r0
 80106be:	b330      	cbz	r0, 801070e <xQueueGenericSend+0xb6>
 80106c0:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80106c2:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80106c6:	f7ff fd6d 	bl	80101a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80106ca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80106cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d301      	bcc.n	80106d6 <xQueueGenericSend+0x7e>
 80106d2:	2e02      	cmp	r6, #2
 80106d4:	d129      	bne.n	801072a <xQueueGenericSend+0xd2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80106d6:	4632      	mov	r2, r6
 80106d8:	4639      	mov	r1, r7
 80106da:	4620      	mov	r0, r4
 80106dc:	f7ff fed5 	bl	801048a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80106e2:	b11b      	cbz	r3, 80106ec <xQueueGenericSend+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106e4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80106e8:	f000 fd7e 	bl	80111e8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80106ec:	b148      	cbz	r0, 8010702 <xQueueGenericSend+0xaa>
						queueYIELD_IF_USING_PREEMPTION();
 80106ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80106f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010702:	f7ff fd73 	bl	80101ec <vPortExitCritical>
				return pdPASS;
 8010706:	2001      	movs	r0, #1
}
 8010708:	b004      	add	sp, #16
 801070a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801070e:	9b01      	ldr	r3, [sp, #4]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d0d6      	beq.n	80106c2 <xQueueGenericSend+0x6a>
 8010714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010718:	b672      	cpsid	i
 801071a:	f383 8811 	msr	BASEPRI, r3
 801071e:	f3bf 8f6f 	isb	sy
 8010722:	f3bf 8f4f 	dsb	sy
 8010726:	b662      	cpsie	i
 8010728:	e7fe      	b.n	8010728 <xQueueGenericSend+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 801072a:	9b01      	ldr	r3, [sp, #4]
 801072c:	b91b      	cbnz	r3, 8010736 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 801072e:	f7ff fd5d 	bl	80101ec <vPortExitCritical>
					return errQUEUE_FULL;
 8010732:	2000      	movs	r0, #0
 8010734:	e7e8      	b.n	8010708 <xQueueGenericSend+0xb0>
				else if( xEntryTimeSet == pdFALSE )
 8010736:	b915      	cbnz	r5, 801073e <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010738:	a802      	add	r0, sp, #8
 801073a:	f000 fd91 	bl	8011260 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801073e:	f7ff fd55 	bl	80101ec <vPortExitCritical>
		vTaskSuspendAll();
 8010742:	f000 fba7 	bl	8010e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010746:	f7ff fd2d 	bl	80101a4 <vPortEnterCritical>
 801074a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801074e:	2bff      	cmp	r3, #255	@ 0xff
 8010750:	d101      	bne.n	8010756 <xQueueGenericSend+0xfe>
 8010752:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8010756:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801075a:	2bff      	cmp	r3, #255	@ 0xff
 801075c:	d101      	bne.n	8010762 <xQueueGenericSend+0x10a>
 801075e:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8010762:	f7ff fd43 	bl	80101ec <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010766:	a901      	add	r1, sp, #4
 8010768:	a802      	add	r0, sp, #8
 801076a:	f000 fd83 	bl	8011274 <xTaskCheckForTimeOut>
 801076e:	bb38      	cbnz	r0, 80107c0 <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010770:	f7ff fd18 	bl	80101a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010774:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010776:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010778:	429a      	cmp	r2, r3
 801077a:	d10e      	bne.n	801079a <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801077c:	f7ff fd36 	bl	80101ec <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010780:	9901      	ldr	r1, [sp, #4]
 8010782:	f104 0010 	add.w	r0, r4, #16
 8010786:	f000 fd13 	bl	80111b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801078a:	4620      	mov	r0, r4
 801078c:	f7ff fec5 	bl	801051a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010790:	f000 fbfe 	bl	8010f90 <xTaskResumeAll>
 8010794:	b148      	cbz	r0, 80107aa <xQueueGenericSend+0x152>
 8010796:	2501      	movs	r5, #1
 8010798:	e795      	b.n	80106c6 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 801079a:	f7ff fd27 	bl	80101ec <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801079e:	4620      	mov	r0, r4
 80107a0:	f7ff febb 	bl	801051a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107a4:	f000 fbf4 	bl	8010f90 <xTaskResumeAll>
 80107a8:	e7f5      	b.n	8010796 <xQueueGenericSend+0x13e>
					portYIELD_WITHIN_API();
 80107aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80107ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80107b6:	f3bf 8f4f 	dsb	sy
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	e7ea      	b.n	8010796 <xQueueGenericSend+0x13e>
			prvUnlockQueue( pxQueue );
 80107c0:	4620      	mov	r0, r4
 80107c2:	f7ff feaa 	bl	801051a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80107c6:	f000 fbe3 	bl	8010f90 <xTaskResumeAll>
			return errQUEUE_FULL;
 80107ca:	e7b2      	b.n	8010732 <xQueueGenericSend+0xda>

080107cc <xQueueGenericSendFromISR>:
{
 80107cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107d0:	4689      	mov	r9, r1
 80107d2:	4617      	mov	r7, r2
 80107d4:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80107d6:	4604      	mov	r4, r0
 80107d8:	b950      	cbnz	r0, 80107f0 <xQueueGenericSendFromISR+0x24>
 80107da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107de:	b672      	cpsid	i
 80107e0:	f383 8811 	msr	BASEPRI, r3
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	b662      	cpsie	i
 80107ee:	e7fe      	b.n	80107ee <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107f0:	b961      	cbnz	r1, 801080c <xQueueGenericSendFromISR+0x40>
 80107f2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80107f4:	b153      	cbz	r3, 801080c <xQueueGenericSendFromISR+0x40>
 80107f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107fa:	b672      	cpsid	i
 80107fc:	f383 8811 	msr	BASEPRI, r3
 8010800:	f3bf 8f6f 	isb	sy
 8010804:	f3bf 8f4f 	dsb	sy
 8010808:	b662      	cpsie	i
 801080a:	e7fe      	b.n	801080a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801080c:	2e02      	cmp	r6, #2
 801080e:	d10d      	bne.n	801082c <xQueueGenericSendFromISR+0x60>
 8010810:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010812:	2b01      	cmp	r3, #1
 8010814:	d00a      	beq.n	801082c <xQueueGenericSendFromISR+0x60>
 8010816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801081a:	b672      	cpsid	i
 801081c:	f383 8811 	msr	BASEPRI, r3
 8010820:	f3bf 8f6f 	isb	sy
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	b662      	cpsie	i
 801082a:	e7fe      	b.n	801082a <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801082c:	f7ff fdb4 	bl	8010398 <vPortValidateInterruptPriority>
	__asm volatile
 8010830:	f3ef 8811 	mrs	r8, BASEPRI
 8010834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010838:	b672      	cpsid	i
 801083a:	f383 8811 	msr	BASEPRI, r3
 801083e:	f3bf 8f6f 	isb	sy
 8010842:	f3bf 8f4f 	dsb	sy
 8010846:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010848:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801084a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801084c:	429a      	cmp	r2, r3
 801084e:	d301      	bcc.n	8010854 <xQueueGenericSendFromISR+0x88>
 8010850:	2e02      	cmp	r6, #2
 8010852:	d11d      	bne.n	8010890 <xQueueGenericSendFromISR+0xc4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8010854:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010858:	4632      	mov	r2, r6
 801085a:	4649      	mov	r1, r9
 801085c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 801085e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010860:	f7ff fe13 	bl	801048a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010864:	1c6b      	adds	r3, r5, #1
 8010866:	d10e      	bne.n	8010886 <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010868:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801086a:	b13b      	cbz	r3, 801087c <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801086c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010870:	f000 fcba 	bl	80111e8 <xTaskRemoveFromEventList>
 8010874:	b110      	cbz	r0, 801087c <xQueueGenericSendFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 8010876:	b10f      	cbz	r7, 801087c <xQueueGenericSendFromISR+0xb0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010878:	2301      	movs	r3, #1
 801087a:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 801087c:	2001      	movs	r0, #1
	__asm volatile
 801087e:	f388 8811 	msr	BASEPRI, r8
}
 8010882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010886:	3501      	adds	r5, #1
 8010888:	b26d      	sxtb	r5, r5
 801088a:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 801088e:	e7f5      	b.n	801087c <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
 8010890:	2000      	movs	r0, #0
 8010892:	e7f4      	b.n	801087e <xQueueGenericSendFromISR+0xb2>

08010894 <xQueueGiveFromISR>:
{
 8010894:	b570      	push	{r4, r5, r6, lr}
 8010896:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8010898:	4604      	mov	r4, r0
 801089a:	b950      	cbnz	r0, 80108b2 <xQueueGiveFromISR+0x1e>
	__asm volatile
 801089c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a0:	b672      	cpsid	i
 80108a2:	f383 8811 	msr	BASEPRI, r3
 80108a6:	f3bf 8f6f 	isb	sy
 80108aa:	f3bf 8f4f 	dsb	sy
 80108ae:	b662      	cpsie	i
 80108b0:	e7fe      	b.n	80108b0 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80108b2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80108b4:	b153      	cbz	r3, 80108cc <xQueueGiveFromISR+0x38>
 80108b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108ba:	b672      	cpsid	i
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	b662      	cpsie	i
 80108ca:	e7fe      	b.n	80108ca <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80108cc:	6803      	ldr	r3, [r0, #0]
 80108ce:	b963      	cbnz	r3, 80108ea <xQueueGiveFromISR+0x56>
 80108d0:	6883      	ldr	r3, [r0, #8]
 80108d2:	b153      	cbz	r3, 80108ea <xQueueGiveFromISR+0x56>
 80108d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108d8:	b672      	cpsid	i
 80108da:	f383 8811 	msr	BASEPRI, r3
 80108de:	f3bf 8f6f 	isb	sy
 80108e2:	f3bf 8f4f 	dsb	sy
 80108e6:	b662      	cpsie	i
 80108e8:	e7fe      	b.n	80108e8 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108ea:	f7ff fd55 	bl	8010398 <vPortValidateInterruptPriority>
	__asm volatile
 80108ee:	f3ef 8611 	mrs	r6, BASEPRI
 80108f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f6:	b672      	cpsid	i
 80108f8:	f383 8811 	msr	BASEPRI, r3
 80108fc:	f3bf 8f6f 	isb	sy
 8010900:	f3bf 8f4f 	dsb	sy
 8010904:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010906:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010908:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801090a:	4293      	cmp	r3, r2
 801090c:	d919      	bls.n	8010942 <xQueueGiveFromISR+0xae>
			const int8_t cTxLock = pxQueue->cTxLock;
 801090e:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010912:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8010914:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8010916:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010918:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 801091a:	d10d      	bne.n	8010938 <xQueueGiveFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801091c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801091e:	b13b      	cbz	r3, 8010930 <xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010920:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010924:	f000 fc60 	bl	80111e8 <xTaskRemoveFromEventList>
 8010928:	b110      	cbz	r0, 8010930 <xQueueGiveFromISR+0x9c>
							if( pxHigherPriorityTaskWoken != NULL )
 801092a:	b10d      	cbz	r5, 8010930 <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801092c:	2301      	movs	r3, #1
 801092e:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8010930:	2001      	movs	r0, #1
	__asm volatile
 8010932:	f386 8811 	msr	BASEPRI, r6
}
 8010936:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010938:	3301      	adds	r3, #1
 801093a:	b25b      	sxtb	r3, r3
 801093c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8010940:	e7f6      	b.n	8010930 <xQueueGiveFromISR+0x9c>
			xReturn = errQUEUE_FULL;
 8010942:	2000      	movs	r0, #0
 8010944:	e7f5      	b.n	8010932 <xQueueGiveFromISR+0x9e>

08010946 <xQueueReceive>:
{
 8010946:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801094a:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 801094c:	4604      	mov	r4, r0
{
 801094e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010950:	b950      	cbnz	r0, 8010968 <xQueueReceive+0x22>
	__asm volatile
 8010952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010956:	b672      	cpsid	i
 8010958:	f383 8811 	msr	BASEPRI, r3
 801095c:	f3bf 8f6f 	isb	sy
 8010960:	f3bf 8f4f 	dsb	sy
 8010964:	b662      	cpsie	i
 8010966:	e7fe      	b.n	8010966 <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010968:	b961      	cbnz	r1, 8010984 <xQueueReceive+0x3e>
 801096a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801096c:	b153      	cbz	r3, 8010984 <xQueueReceive+0x3e>
 801096e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010972:	b672      	cpsid	i
 8010974:	f383 8811 	msr	BASEPRI, r3
 8010978:	f3bf 8f6f 	isb	sy
 801097c:	f3bf 8f4f 	dsb	sy
 8010980:	b662      	cpsie	i
 8010982:	e7fe      	b.n	8010982 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010984:	f000 fcbc 	bl	8011300 <xTaskGetSchedulerState>
 8010988:	4605      	mov	r5, r0
 801098a:	b318      	cbz	r0, 80109d4 <xQueueReceive+0x8e>
 801098c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 801098e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8010992:	f7ff fc07 	bl	80101a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010996:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010998:	b357      	cbz	r7, 80109f0 <xQueueReceive+0xaa>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801099a:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801099c:	4631      	mov	r1, r6
 801099e:	4620      	mov	r0, r4
 80109a0:	f7ff fda6 	bl	80104f0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109a4:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109a6:	6923      	ldr	r3, [r4, #16]
 80109a8:	b173      	cbz	r3, 80109c8 <xQueueReceive+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109aa:	f104 0010 	add.w	r0, r4, #16
 80109ae:	f000 fc1b 	bl	80111e8 <xTaskRemoveFromEventList>
 80109b2:	b148      	cbz	r0, 80109c8 <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
 80109b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80109b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80109c0:	f3bf 8f4f 	dsb	sy
 80109c4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80109c8:	f7ff fc10 	bl	80101ec <vPortExitCritical>
				return pdPASS;
 80109cc:	2001      	movs	r0, #1
}
 80109ce:	b004      	add	sp, #16
 80109d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109d4:	9b01      	ldr	r3, [sp, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d0d9      	beq.n	801098e <xQueueReceive+0x48>
 80109da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109de:	b672      	cpsid	i
 80109e0:	f383 8811 	msr	BASEPRI, r3
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	f3bf 8f4f 	dsb	sy
 80109ec:	b662      	cpsie	i
 80109ee:	e7fe      	b.n	80109ee <xQueueReceive+0xa8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80109f0:	9b01      	ldr	r3, [sp, #4]
 80109f2:	b91b      	cbnz	r3, 80109fc <xQueueReceive+0xb6>
					taskEXIT_CRITICAL();
 80109f4:	f7ff fbfa 	bl	80101ec <vPortExitCritical>
					return errQUEUE_EMPTY;
 80109f8:	2000      	movs	r0, #0
 80109fa:	e7e8      	b.n	80109ce <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 80109fc:	b915      	cbnz	r5, 8010a04 <xQueueReceive+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109fe:	a802      	add	r0, sp, #8
 8010a00:	f000 fc2e 	bl	8011260 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010a04:	f7ff fbf2 	bl	80101ec <vPortExitCritical>
		vTaskSuspendAll();
 8010a08:	f000 fa44 	bl	8010e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a0c:	f7ff fbca 	bl	80101a4 <vPortEnterCritical>
 8010a10:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010a14:	2bff      	cmp	r3, #255	@ 0xff
 8010a16:	d101      	bne.n	8010a1c <xQueueReceive+0xd6>
 8010a18:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8010a1c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010a20:	2bff      	cmp	r3, #255	@ 0xff
 8010a22:	d101      	bne.n	8010a28 <xQueueReceive+0xe2>
 8010a24:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8010a28:	f7ff fbe0 	bl	80101ec <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a2c:	a901      	add	r1, sp, #4
 8010a2e:	a802      	add	r0, sp, #8
 8010a30:	f000 fc20 	bl	8011274 <xTaskCheckForTimeOut>
 8010a34:	bb00      	cbnz	r0, 8010a78 <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a36:	4620      	mov	r0, r4
 8010a38:	f7ff fd1c 	bl	8010474 <prvIsQueueEmpty>
 8010a3c:	b1b0      	cbz	r0, 8010a6c <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a3e:	9901      	ldr	r1, [sp, #4]
 8010a40:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010a44:	f000 fbb4 	bl	80111b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f7ff fd66 	bl	801051a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010a4e:	f000 fa9f 	bl	8010f90 <xTaskResumeAll>
 8010a52:	b948      	cbnz	r0, 8010a68 <xQueueReceive+0x122>
					portYIELD_WITHIN_API();
 8010a54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010a60:	f3bf 8f4f 	dsb	sy
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	2501      	movs	r5, #1
 8010a6a:	e792      	b.n	8010992 <xQueueReceive+0x4c>
				prvUnlockQueue( pxQueue );
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f7ff fd54 	bl	801051a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a72:	f000 fa8d 	bl	8010f90 <xTaskResumeAll>
 8010a76:	e7f7      	b.n	8010a68 <xQueueReceive+0x122>
			prvUnlockQueue( pxQueue );
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f7ff fd4e 	bl	801051a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a7e:	f000 fa87 	bl	8010f90 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a82:	4620      	mov	r0, r4
 8010a84:	f7ff fcf6 	bl	8010474 <prvIsQueueEmpty>
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	d0ed      	beq.n	8010a68 <xQueueReceive+0x122>
 8010a8c:	e7b4      	b.n	80109f8 <xQueueReceive+0xb2>

08010a8e <xQueueSemaphoreTake>:
{
 8010a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a90:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8010a92:	4604      	mov	r4, r0
{
 8010a94:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010a96:	b950      	cbnz	r0, 8010aae <xQueueSemaphoreTake+0x20>
 8010a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a9c:	b672      	cpsid	i
 8010a9e:	f383 8811 	msr	BASEPRI, r3
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	f3bf 8f4f 	dsb	sy
 8010aaa:	b662      	cpsie	i
 8010aac:	e7fe      	b.n	8010aac <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8010aae:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8010ab0:	b155      	cbz	r5, 8010ac8 <xQueueSemaphoreTake+0x3a>
 8010ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ab6:	b672      	cpsid	i
 8010ab8:	f383 8811 	msr	BASEPRI, r3
 8010abc:	f3bf 8f6f 	isb	sy
 8010ac0:	f3bf 8f4f 	dsb	sy
 8010ac4:	b662      	cpsie	i
 8010ac6:	e7fe      	b.n	8010ac6 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ac8:	f000 fc1a 	bl	8011300 <xTaskGetSchedulerState>
 8010acc:	4606      	mov	r6, r0
 8010ace:	b320      	cbz	r0, 8010b1a <xQueueSemaphoreTake+0x8c>
 8010ad0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8010ad2:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8010ad4:	f7ff fb66 	bl	80101a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010ad8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010ada:	b363      	cbz	r3, 8010b36 <xQueueSemaphoreTake+0xa8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010adc:	3b01      	subs	r3, #1
 8010ade:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ae0:	6823      	ldr	r3, [r4, #0]
 8010ae2:	b913      	cbnz	r3, 8010aea <xQueueSemaphoreTake+0x5c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010ae4:	f000 fd16 	bl	8011514 <pvTaskIncrementMutexHeldCount>
 8010ae8:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010aea:	6923      	ldr	r3, [r4, #16]
 8010aec:	b173      	cbz	r3, 8010b0c <xQueueSemaphoreTake+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010aee:	f104 0010 	add.w	r0, r4, #16
 8010af2:	f000 fb79 	bl	80111e8 <xTaskRemoveFromEventList>
 8010af6:	b148      	cbz	r0, 8010b0c <xQueueSemaphoreTake+0x7e>
						queueYIELD_IF_USING_PREEMPTION();
 8010af8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b00:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010b04:	f3bf 8f4f 	dsb	sy
 8010b08:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010b0c:	f7ff fb6e 	bl	80101ec <vPortExitCritical>
				return pdPASS;
 8010b10:	2001      	movs	r0, #1
}
 8010b12:	b005      	add	sp, #20
 8010b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b16:	4635      	mov	r5, r6
 8010b18:	e7db      	b.n	8010ad2 <xQueueSemaphoreTake+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b1a:	9b01      	ldr	r3, [sp, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d0fa      	beq.n	8010b16 <xQueueSemaphoreTake+0x88>
 8010b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b24:	b672      	cpsid	i
 8010b26:	f383 8811 	msr	BASEPRI, r3
 8010b2a:	f3bf 8f6f 	isb	sy
 8010b2e:	f3bf 8f4f 	dsb	sy
 8010b32:	b662      	cpsie	i
 8010b34:	e7fe      	b.n	8010b34 <xQueueSemaphoreTake+0xa6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b36:	9b01      	ldr	r3, [sp, #4]
 8010b38:	b963      	cbnz	r3, 8010b54 <xQueueSemaphoreTake+0xc6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010b3a:	2d00      	cmp	r5, #0
 8010b3c:	d068      	beq.n	8010c10 <xQueueSemaphoreTake+0x182>
 8010b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b42:	b672      	cpsid	i
 8010b44:	f383 8811 	msr	BASEPRI, r3
 8010b48:	f3bf 8f6f 	isb	sy
 8010b4c:	f3bf 8f4f 	dsb	sy
 8010b50:	b662      	cpsie	i
 8010b52:	e7fe      	b.n	8010b52 <xQueueSemaphoreTake+0xc4>
				else if( xEntryTimeSet == pdFALSE )
 8010b54:	b916      	cbnz	r6, 8010b5c <xQueueSemaphoreTake+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b56:	a802      	add	r0, sp, #8
 8010b58:	f000 fb82 	bl	8011260 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010b5c:	f7ff fb46 	bl	80101ec <vPortExitCritical>
		vTaskSuspendAll();
 8010b60:	f000 f998 	bl	8010e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b64:	f7ff fb1e 	bl	80101a4 <vPortEnterCritical>
 8010b68:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010b6c:	2bff      	cmp	r3, #255	@ 0xff
 8010b6e:	d101      	bne.n	8010b74 <xQueueSemaphoreTake+0xe6>
 8010b70:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8010b74:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010b78:	2bff      	cmp	r3, #255	@ 0xff
 8010b7a:	d101      	bne.n	8010b80 <xQueueSemaphoreTake+0xf2>
 8010b7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010b80:	f7ff fb34 	bl	80101ec <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b84:	a901      	add	r1, sp, #4
 8010b86:	a802      	add	r0, sp, #8
 8010b88:	f000 fb74 	bl	8011274 <xTaskCheckForTimeOut>
 8010b8c:	bb50      	cbnz	r0, 8010be4 <xQueueSemaphoreTake+0x156>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f7ff fc70 	bl	8010474 <prvIsQueueEmpty>
 8010b94:	b300      	cbz	r0, 8010bd8 <xQueueSemaphoreTake+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b96:	6823      	ldr	r3, [r4, #0]
 8010b98:	b93b      	cbnz	r3, 8010baa <xQueueSemaphoreTake+0x11c>
						taskENTER_CRITICAL();
 8010b9a:	f7ff fb03 	bl	80101a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b9e:	68a0      	ldr	r0, [r4, #8]
 8010ba0:	f000 fbbe 	bl	8011320 <xTaskPriorityInherit>
 8010ba4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8010ba6:	f7ff fb21 	bl	80101ec <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010baa:	9901      	ldr	r1, [sp, #4]
 8010bac:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010bb0:	f000 fafe 	bl	80111b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f7ff fcb0 	bl	801051a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010bba:	f000 f9e9 	bl	8010f90 <xTaskResumeAll>
 8010bbe:	b948      	cbnz	r0, 8010bd4 <xQueueSemaphoreTake+0x146>
					portYIELD_WITHIN_API();
 8010bc0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010bc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bc8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	f3bf 8f6f 	isb	sy
 8010bd4:	2601      	movs	r6, #1
 8010bd6:	e77d      	b.n	8010ad4 <xQueueSemaphoreTake+0x46>
				prvUnlockQueue( pxQueue );
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f7ff fc9e 	bl	801051a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010bde:	f000 f9d7 	bl	8010f90 <xTaskResumeAll>
 8010be2:	e7f7      	b.n	8010bd4 <xQueueSemaphoreTake+0x146>
			prvUnlockQueue( pxQueue );
 8010be4:	4620      	mov	r0, r4
 8010be6:	f7ff fc98 	bl	801051a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010bea:	f000 f9d1 	bl	8010f90 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f7ff fc40 	bl	8010474 <prvIsQueueEmpty>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	d0ed      	beq.n	8010bd4 <xQueueSemaphoreTake+0x146>
					if( xInheritanceOccurred != pdFALSE )
 8010bf8:	b165      	cbz	r5, 8010c14 <xQueueSemaphoreTake+0x186>
						taskENTER_CRITICAL();
 8010bfa:	f7ff fad3 	bl	80101a4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010bfe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010c00:	b119      	cbz	r1, 8010c0a <xQueueSemaphoreTake+0x17c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010c02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010c04:	6819      	ldr	r1, [r3, #0]
 8010c06:	f1c1 010c 	rsb	r1, r1, #12
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010c0a:	68a0      	ldr	r0, [r4, #8]
 8010c0c:	f000 fc26 	bl	801145c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010c10:	f7ff faec 	bl	80101ec <vPortExitCritical>
					return errQUEUE_EMPTY;
 8010c14:	2000      	movs	r0, #0
 8010c16:	e77c      	b.n	8010b12 <xQueueSemaphoreTake+0x84>

08010c18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010c1a:	4c18      	ldr	r4, [pc, #96]	@ (8010c7c <prvAddCurrentTaskToDelayedList+0x64>)
{
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8010c20:	6825      	ldr	r5, [r4, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c22:	6860      	ldr	r0, [r4, #4]
 8010c24:	3004      	adds	r0, #4
 8010c26:	f7ff fc15 	bl	8010454 <uxListRemove>
 8010c2a:	b938      	cbnz	r0, 8010c3c <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010c2c:	6862      	ldr	r2, [r4, #4]
 8010c2e:	68a3      	ldr	r3, [r4, #8]
 8010c30:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8010c32:	2201      	movs	r2, #1
 8010c34:	408a      	lsls	r2, r1
 8010c36:	ea23 0302 	bic.w	r3, r3, r2
 8010c3a:	60a3      	str	r3, [r4, #8]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010c3c:	1c73      	adds	r3, r6, #1
 8010c3e:	d107      	bne.n	8010c50 <prvAddCurrentTaskToDelayedList+0x38>
 8010c40:	b137      	cbz	r7, 8010c50 <prvAddCurrentTaskToDelayedList+0x38>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c42:	6861      	ldr	r1, [r4, #4]
 8010c44:	480e      	ldr	r0, [pc, #56]	@ (8010c80 <prvAddCurrentTaskToDelayedList+0x68>)
 8010c46:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c4c:	f7ff bbe0 	b.w	8010410 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010c50:	19ad      	adds	r5, r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010c52:	6863      	ldr	r3, [r4, #4]
 8010c54:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010c56:	d306      	bcc.n	8010c66 <prvAddCurrentTaskToDelayedList+0x4e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c58:	6a20      	ldr	r0, [r4, #32]
 8010c5a:	6861      	ldr	r1, [r4, #4]
}
 8010c5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c60:	3104      	adds	r1, #4
 8010c62:	f7ff bbe0 	b.w	8010426 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c66:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010c68:	6861      	ldr	r1, [r4, #4]
 8010c6a:	3104      	adds	r1, #4
 8010c6c:	f7ff fbdb 	bl	8010426 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010c70:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010c72:	42ab      	cmp	r3, r5
 8010c74:	d900      	bls.n	8010c78 <prvAddCurrentTaskToDelayedList+0x60>
					xNextTaskUnblockTime = xTimeToWake;
 8010c76:	62a5      	str	r5, [r4, #40]	@ 0x28
}
 8010c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	20021b2c 	.word	0x20021b2c
 8010c80:	20021b38 	.word	0x20021b38

08010c84 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c84:	4b06      	ldr	r3, [pc, #24]	@ (8010ca0 <prvResetNextTaskUnblockTime+0x1c>)
 8010c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c88:	6812      	ldr	r2, [r2, #0]
 8010c8a:	b91a      	cbnz	r2, 8010c94 <prvResetNextTaskUnblockTime+0x10>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010c8c:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010c90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010c92:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c96:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010c98:	68d2      	ldr	r2, [r2, #12]
 8010c9a:	6852      	ldr	r2, [r2, #4]
 8010c9c:	e7f8      	b.n	8010c90 <prvResetNextTaskUnblockTime+0xc>
 8010c9e:	bf00      	nop
 8010ca0:	20021b2c 	.word	0x20021b2c

08010ca4 <prvIdleTask>:
{
 8010ca4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ca6:	4c14      	ldr	r4, [pc, #80]	@ (8010cf8 <prvIdleTask+0x54>)
				taskYIELD();
 8010ca8:	f04f 26e0 	mov.w	r6, #3758153728	@ 0xe000e000
 8010cac:	f04f 5780 	mov.w	r7, #268435456	@ 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010cb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010cb2:	b95b      	cbnz	r3, 8010ccc <prvIdleTask+0x28>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010cb4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010cb6:	2b01      	cmp	r3, #1
 8010cb8:	d905      	bls.n	8010cc6 <prvIdleTask+0x22>
				taskYIELD();
 8010cba:	f8c6 7d04 	str.w	r7, [r6, #3332]	@ 0xd04
 8010cbe:	f3bf 8f4f 	dsb	sy
 8010cc2:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8010cc6:	f000 fcbd 	bl	8011644 <vApplicationIdleHook>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010cca:	e7f1      	b.n	8010cb0 <prvIdleTask+0xc>
			taskENTER_CRITICAL();
 8010ccc:	f7ff fa6a 	bl	80101a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cd0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010cd2:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010cd4:	1d28      	adds	r0, r5, #4
 8010cd6:	f7ff fbbd 	bl	8010454 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010cda:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	6563      	str	r3, [r4, #84]	@ 0x54
				--uxDeletedTasksWaitingCleanUp;
 8010ce0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010ce2:	3b01      	subs	r3, #1
 8010ce4:	65a3      	str	r3, [r4, #88]	@ 0x58
			taskEXIT_CRITICAL();
 8010ce6:	f7ff fa81 	bl	80101ec <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8010cea:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8010cec:	f7ff f9bc 	bl	8010068 <vPortFree>
			vPortFree( pxTCB );
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	f7ff f9b9 	bl	8010068 <vPortFree>
	}
 8010cf6:	e7db      	b.n	8010cb0 <prvIdleTask+0xc>
 8010cf8:	20021b2c 	.word	0x20021b2c

08010cfc <xTaskCreate>:
	{
 8010cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d00:	0096      	lsls	r6, r2, #2
	{
 8010d02:	4607      	mov	r7, r0
 8010d04:	460d      	mov	r5, r1
 8010d06:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d08:	4630      	mov	r0, r6
	{
 8010d0a:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d0e:	f7ff f923 	bl	800ff58 <pvPortMalloc>
			if( pxStack != NULL )
 8010d12:	4682      	mov	sl, r0
 8010d14:	b918      	cbnz	r0, 8010d1e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d16:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8010d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d1e:	2060      	movs	r0, #96	@ 0x60
 8010d20:	f7ff f91a 	bl	800ff58 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8010d24:	4604      	mov	r4, r0
 8010d26:	2800      	cmp	r0, #0
 8010d28:	f000 80ac 	beq.w	8010e84 <xTaskCreate+0x188>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d2c:	4632      	mov	r2, r6
					pxNewTCB->pxStack = pxStack;
 8010d2e:	f8c0 a030 	str.w	sl, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d32:	21a5      	movs	r1, #165	@ 0xa5
 8010d34:	4650      	mov	r0, sl
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d36:	3e04      	subs	r6, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d38:	f00f fa15 	bl	8020166 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d3e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010d40:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8010d44:	2d00      	cmp	r5, #0
 8010d46:	f000 808f 	beq.w	8010e68 <xTaskCreate+0x16c>
 8010d4a:	1e6b      	subs	r3, r5, #1
 8010d4c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8010d50:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010d52:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010d56:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8010d5a:	b109      	cbz	r1, 8010d60 <xTaskCreate+0x64>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010d5c:	42ab      	cmp	r3, r5
 8010d5e:	d1f8      	bne.n	8010d52 <xTaskCreate+0x56>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010d60:	2300      	movs	r3, #0
 8010d62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010d66:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8010d68:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010d6c:	f104 0a04 	add.w	sl, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010d70:	2d0b      	cmp	r5, #11
		pxNewTCB->uxMutexesHeld = 0;
 8010d72:	f8c4 b050 	str.w	fp, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010d76:	4650      	mov	r0, sl
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010d78:	bf28      	it	cs
 8010d7a:	250b      	movcs	r5, #11
	pxNewTCB->uxPriority = uxPriority;
 8010d7c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8010d7e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d80:	f1c5 050c 	rsb	r5, r5, #12
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010d84:	f7ff fb41 	bl	801040a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010d88:	f104 0018 	add.w	r0, r4, #24
 8010d8c:	f7ff fb3d 	bl	801040a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8010d90:	f8c4 b058 	str.w	fp, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010d94:	4642      	mov	r2, r8
 8010d96:	4639      	mov	r1, r7
 8010d98:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010d9a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d9c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010d9e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8010da0:	f8c4 b054 	str.w	fp, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010da4:	f884 b05c 	strb.w	fp, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010da8:	f7ff f9d8 	bl	801015c <pxPortInitialiseStack>
 8010dac:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8010dae:	f1b9 0f00 	cmp.w	r9, #0
 8010db2:	d001      	beq.n	8010db8 <xTaskCreate+0xbc>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010db4:	f8c9 4000 	str.w	r4, [r9]
		uxCurrentNumberOfTasks++;
 8010db8:	4d34      	ldr	r5, [pc, #208]	@ (8010e8c <xTaskCreate+0x190>)
	taskENTER_CRITICAL();
 8010dba:	f7ff f9f3 	bl	80101a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8010dbe:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8010dc0:	f105 075c 	add.w	r7, r5, #92	@ 0x5c
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	656b      	str	r3, [r5, #84]	@ 0x54
		if( pxCurrentTCB == NULL )
 8010dc8:	686e      	ldr	r6, [r5, #4]
 8010dca:	2e00      	cmp	r6, #0
 8010dcc:	d14f      	bne.n	8010e6e <xTaskCreate+0x172>
			pxCurrentTCB = pxNewTCB;
 8010dce:	606c      	str	r4, [r5, #4]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010dd0:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d120      	bne.n	8010e18 <xTaskCreate+0x11c>
 8010dd6:	46b8      	mov	r8, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010dd8:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010dda:	4640      	mov	r0, r8
 8010ddc:	f7ff fb0a 	bl	80103f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010de0:	f108 0814 	add.w	r8, r8, #20
 8010de4:	2e0c      	cmp	r6, #12
 8010de6:	d1f7      	bne.n	8010dd8 <xTaskCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 8010de8:	4e29      	ldr	r6, [pc, #164]	@ (8010e90 <xTaskCreate+0x194>)
	vListInitialise( &xDelayedTaskList2 );
 8010dea:	f106 0814 	add.w	r8, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8010dee:	4630      	mov	r0, r6
 8010df0:	f7ff fb00 	bl	80103f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010df4:	4640      	mov	r0, r8
 8010df6:	f7ff fafd 	bl	80103f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010dfa:	f5a6 7090 	sub.w	r0, r6, #288	@ 0x120
 8010dfe:	f7ff faf9 	bl	80103f4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8010e02:	f5a6 7086 	sub.w	r0, r6, #268	@ 0x10c
 8010e06:	f7ff faf5 	bl	80103f4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8010e0a:	f5a6 70a0 	sub.w	r0, r6, #320	@ 0x140
 8010e0e:	f7ff faf1 	bl	80103f4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8010e12:	626e      	str	r6, [r5, #36]	@ 0x24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010e14:	f8c5 8020 	str.w	r8, [r5, #32]
		uxTaskNumber++;
 8010e18:	f8d5 3178 	ldr.w	r3, [r5, #376]	@ 0x178
		prvAddTaskToReadyList( pxNewTCB );
 8010e1c:	2014      	movs	r0, #20
 8010e1e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
		uxTaskNumber++;
 8010e20:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8010e22:	68a9      	ldr	r1, [r5, #8]
 8010e24:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 8010e28:	f8c5 3178 	str.w	r3, [r5, #376]	@ 0x178
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010e2c:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8010e2e:	2301      	movs	r3, #1
 8010e30:	4093      	lsls	r3, r2
 8010e32:	430b      	orrs	r3, r1
 8010e34:	4651      	mov	r1, sl
 8010e36:	60ab      	str	r3, [r5, #8]
 8010e38:	f7ff faea 	bl	8010410 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8010e3c:	f7ff f9d6 	bl	80101ec <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8010e40:	f8d5 3174 	ldr.w	r3, [r5, #372]	@ 0x174
 8010e44:	b173      	cbz	r3, 8010e64 <xTaskCreate+0x168>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010e46:	686b      	ldr	r3, [r5, #4]
 8010e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e4a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d209      	bcs.n	8010e64 <xTaskCreate+0x168>
			taskYIELD_IF_USING_PREEMPTION();
 8010e50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e58:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010e5c:	f3bf 8f4f 	dsb	sy
 8010e60:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8010e64:	2001      	movs	r0, #1
		return xReturn;
 8010e66:	e758      	b.n	8010d1a <xTaskCreate+0x1e>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e68:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8010e6c:	e77b      	b.n	8010d66 <xTaskCreate+0x6a>
			if( xSchedulerRunning == pdFALSE )
 8010e6e:	f8d5 2174 	ldr.w	r2, [r5, #372]	@ 0x174
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010e72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8010e74:	2a00      	cmp	r2, #0
 8010e76:	d1cf      	bne.n	8010e18 <xTaskCreate+0x11c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010e78:	686a      	ldr	r2, [r5, #4]
 8010e7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d8cb      	bhi.n	8010e18 <xTaskCreate+0x11c>
					pxCurrentTCB = pxNewTCB;
 8010e80:	606c      	str	r4, [r5, #4]
 8010e82:	e7c9      	b.n	8010e18 <xTaskCreate+0x11c>
					vPortFree( pxStack );
 8010e84:	4650      	mov	r0, sl
 8010e86:	f7ff f8ef 	bl	8010068 <vPortFree>
		if( pxNewTCB != NULL )
 8010e8a:	e744      	b.n	8010d16 <xTaskCreate+0x1a>
 8010e8c:	20021b2c 	.word	0x20021b2c
 8010e90:	20021c78 	.word	0x20021c78

08010e94 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010e94:	4a03      	ldr	r2, [pc, #12]	@ (8010ea4 <vTaskSuspendAll+0x10>)
 8010e96:	f8d2 317c 	ldr.w	r3, [r2, #380]	@ 0x17c
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
}
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	20021b2c 	.word	0x20021b2c

08010ea8 <xTaskIncrementTick>:
{
 8010ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010eac:	4c36      	ldr	r4, [pc, #216]	@ (8010f88 <xTaskIncrementTick+0xe0>)
 8010eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d161      	bne.n	8010f7a <xTaskIncrementTick+0xd2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010eb6:	6827      	ldr	r7, [r4, #0]
 8010eb8:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8010eba:	6027      	str	r7, [r4, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010ebc:	b9c7      	cbnz	r7, 8010ef0 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8010ebe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	b153      	cbz	r3, 8010eda <xTaskIncrementTick+0x32>
 8010ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ec8:	b672      	cpsid	i
 8010eca:	f383 8811 	msr	BASEPRI, r3
 8010ece:	f3bf 8f6f 	isb	sy
 8010ed2:	f3bf 8f4f 	dsb	sy
 8010ed6:	b662      	cpsie	i
 8010ed8:	e7fe      	b.n	8010ed8 <xTaskIncrementTick+0x30>
 8010eda:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010edc:	6a22      	ldr	r2, [r4, #32]
 8010ede:	6262      	str	r2, [r4, #36]	@ 0x24
 8010ee0:	6223      	str	r3, [r4, #32]
 8010ee2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	f8c4 3180 	str.w	r3, [r4, #384]	@ 0x180
 8010eec:	f7ff feca 	bl	8010c84 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010ef0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
BaseType_t xSwitchRequired = pdFALSE;
 8010ef2:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010ef4:	42bb      	cmp	r3, r7
 8010ef6:	d910      	bls.n	8010f1a <xTaskIncrementTick+0x72>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010ef8:	6863      	ldr	r3, [r4, #4]
 8010efa:	2214      	movs	r2, #20
 8010efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010efe:	fb02 4303 	mla	r3, r2, r3, r4
 8010f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
				xSwitchRequired = pdTRUE;
 8010f04:	2b02      	cmp	r3, #2
 8010f06:	bf28      	it	cs
 8010f08:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8010f0a:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
			xSwitchRequired = pdTRUE;
 8010f0e:	2b00      	cmp	r3, #0
}
 8010f10:	bf0c      	ite	eq
 8010f12:	4628      	moveq	r0, r5
 8010f14:	2001      	movne	r0, #1
 8010f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8010f1a:	f04f 0b01 	mov.w	fp, #1
 8010f1e:	f8df 906c 	ldr.w	r9, [pc, #108]	@ 8010f8c <xTaskIncrementTick+0xe4>
 8010f22:	f04f 0a14 	mov.w	sl, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	b91b      	cbnz	r3, 8010f34 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f2c:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8010f30:	62a3      	str	r3, [r4, #40]	@ 0x28
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f32:	e7e1      	b.n	8010ef8 <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f34:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010f3a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8010f3c:	429f      	cmp	r7, r3
 8010f3e:	d3f7      	bcc.n	8010f30 <xTaskIncrementTick+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f40:	f106 0804 	add.w	r8, r6, #4
 8010f44:	4640      	mov	r0, r8
 8010f46:	f7ff fa85 	bl	8010454 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f4a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8010f4c:	b11b      	cbz	r3, 8010f56 <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f4e:	f106 0018 	add.w	r0, r6, #24
 8010f52:	f7ff fa7f 	bl	8010454 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f56:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8010f58:	4641      	mov	r1, r8
 8010f5a:	68a2      	ldr	r2, [r4, #8]
 8010f5c:	fa0b f300 	lsl.w	r3, fp, r0
 8010f60:	fb0a 9000 	mla	r0, sl, r0, r9
 8010f64:	4313      	orrs	r3, r2
 8010f66:	60a3      	str	r3, [r4, #8]
 8010f68:	f7ff fa52 	bl	8010410 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f6c:	6863      	ldr	r3, [r4, #4]
 8010f6e:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8010f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8010f72:	429a      	cmp	r2, r3
 8010f74:	bf28      	it	cs
 8010f76:	2501      	movcs	r5, #1
 8010f78:	e7d5      	b.n	8010f26 <xTaskIncrementTick+0x7e>
		++uxPendedTicks;
 8010f7a:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
BaseType_t xSwitchRequired = pdFALSE;
 8010f7e:	2500      	movs	r5, #0
		++uxPendedTicks;
 8010f80:	3301      	adds	r3, #1
 8010f82:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
 8010f86:	e7c0      	b.n	8010f0a <xTaskIncrementTick+0x62>
 8010f88:	20021b2c 	.word	0x20021b2c
 8010f8c:	20021b88 	.word	0x20021b88

08010f90 <xTaskResumeAll>:
{
 8010f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8010f94:	4c33      	ldr	r4, [pc, #204]	@ (8011064 <xTaskResumeAll+0xd4>)
 8010f96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010f9a:	b953      	cbnz	r3, 8010fb2 <xTaskResumeAll+0x22>
 8010f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fa0:	b672      	cpsid	i
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	b662      	cpsie	i
 8010fb0:	e7fe      	b.n	8010fb0 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 8010fb2:	f7ff f8f7 	bl	80101a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010fb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fc0:	f8d4 517c 	ldr.w	r5, [r4, #380]	@ 0x17c
 8010fc4:	b12d      	cbz	r5, 8010fd2 <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 8010fc6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010fc8:	f7ff f910 	bl	80101ec <vPortExitCritical>
}
 8010fcc:	4620      	mov	r0, r4
 8010fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010fd2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d0f6      	beq.n	8010fc6 <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 8010fd8:	2601      	movs	r6, #1
 8010fda:	f104 075c 	add.w	r7, r4, #92	@ 0x5c
 8010fde:	f04f 0814 	mov.w	r8, #20
 8010fe2:	e01c      	b.n	801101e <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fe4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010fe6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010fe8:	f105 0904 	add.w	r9, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010fec:	f105 0018 	add.w	r0, r5, #24
 8010ff0:	f7ff fa30 	bl	8010454 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ff4:	4648      	mov	r0, r9
 8010ff6:	f7ff fa2d 	bl	8010454 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ffa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8010ffc:	68a2      	ldr	r2, [r4, #8]
 8010ffe:	4649      	mov	r1, r9
 8011000:	fa06 f300 	lsl.w	r3, r6, r0
 8011004:	fb08 7000 	mla	r0, r8, r0, r7
 8011008:	4313      	orrs	r3, r2
 801100a:	60a3      	str	r3, [r4, #8]
 801100c:	f7ff fa00 	bl	8010410 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011010:	6863      	ldr	r3, [r4, #4]
 8011012:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8011014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011016:	429a      	cmp	r2, r3
 8011018:	d301      	bcc.n	801101e <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 801101a:	f8c4 6188 	str.w	r6, [r4, #392]	@ 0x188
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801101e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1df      	bne.n	8010fe4 <xTaskResumeAll+0x54>
				if( pxTCB != NULL )
 8011024:	b10d      	cbz	r5, 801102a <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 8011026:	f7ff fe2d 	bl	8010c84 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801102a:	f8d4 5184 	ldr.w	r5, [r4, #388]	@ 0x184
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801102e:	b14d      	cbz	r5, 8011044 <xTaskResumeAll+0xb4>
								xYieldPending = pdTRUE;
 8011030:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8011032:	f7ff ff39 	bl	8010ea8 <xTaskIncrementTick>
 8011036:	b108      	cbz	r0, 801103c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8011038:	f8c4 6188 	str.w	r6, [r4, #392]	@ 0x188
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801103c:	3d01      	subs	r5, #1
 801103e:	d1f8      	bne.n	8011032 <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
 8011040:	f8c4 5184 	str.w	r5, [r4, #388]	@ 0x184
				if( xYieldPending != pdFALSE )
 8011044:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8011048:	2b00      	cmp	r3, #0
 801104a:	d0bc      	beq.n	8010fc6 <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 801104c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011054:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011058:	f3bf 8f4f 	dsb	sy
 801105c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011060:	2401      	movs	r4, #1
 8011062:	e7b1      	b.n	8010fc8 <xTaskResumeAll+0x38>
 8011064:	20021b2c 	.word	0x20021b2c

08011068 <vTaskSetApplicationTaskTag>:
	{
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	460d      	mov	r5, r1
		if( xTask == NULL )
 801106c:	4604      	mov	r4, r0
 801106e:	b908      	cbnz	r0, 8011074 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8011070:	4b04      	ldr	r3, [pc, #16]	@ (8011084 <vTaskSetApplicationTaskTag+0x1c>)
 8011072:	685c      	ldr	r4, [r3, #4]
		taskENTER_CRITICAL();
 8011074:	f7ff f896 	bl	80101a4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8011078:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 801107a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 801107e:	f7ff b8b5 	b.w	80101ec <vPortExitCritical>
 8011082:	bf00      	nop
 8011084:	20021b2c 	.word	0x20021b2c

08011088 <xTaskCallApplicationTaskHook>:
	{
 8011088:	4603      	mov	r3, r0
 801108a:	4608      	mov	r0, r1
		if( xTask == NULL )
 801108c:	b90b      	cbnz	r3, 8011092 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 801108e:	4b03      	ldr	r3, [pc, #12]	@ (801109c <xTaskCallApplicationTaskHook+0x14>)
 8011090:	685b      	ldr	r3, [r3, #4]
		if( xTCB->pxTaskTag != NULL )
 8011092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011094:	b103      	cbz	r3, 8011098 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8011096:	4718      	bx	r3
	}
 8011098:	4618      	mov	r0, r3
 801109a:	4770      	bx	lr
 801109c:	20021b2c 	.word	0x20021b2c

080110a0 <vTaskStartScheduler>:
{
 80110a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80110a2:	4c1b      	ldr	r4, [pc, #108]	@ (8011110 <vTaskStartScheduler+0x70>)
 80110a4:	2500      	movs	r5, #0
 80110a6:	2280      	movs	r2, #128	@ 0x80
 80110a8:	491a      	ldr	r1, [pc, #104]	@ (8011114 <vTaskStartScheduler+0x74>)
 80110aa:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 80110ae:	481a      	ldr	r0, [pc, #104]	@ (8011118 <vTaskStartScheduler+0x78>)
 80110b0:	9500      	str	r5, [sp, #0]
 80110b2:	9301      	str	r3, [sp, #4]
 80110b4:	462b      	mov	r3, r5
 80110b6:	f7ff fe21 	bl	8010cfc <xTaskCreate>
	if( xReturn == pdPASS )
 80110ba:	2801      	cmp	r0, #1
 80110bc:	d118      	bne.n	80110f0 <vTaskStartScheduler+0x50>
 80110be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110c2:	b672      	cpsid	i
 80110c4:	f383 8811 	msr	BASEPRI, r3
 80110c8:	f3bf 8f6f 	isb	sy
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80110d2:	f04f 33ff 	mov.w	r3, #4294967295
		traceTASK_SWITCHED_IN();
 80110d6:	4629      	mov	r1, r5
		xNextTaskUnblockTime = portMAX_DELAY;
 80110d8:	62a3      	str	r3, [r4, #40]	@ 0x28
		xSchedulerRunning = pdTRUE;
 80110da:	f8c4 0174 	str.w	r0, [r4, #372]	@ 0x174
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110de:	6025      	str	r5, [r4, #0]
		traceTASK_SWITCHED_IN();
 80110e0:	6860      	ldr	r0, [r4, #4]
 80110e2:	f7ff ffd1 	bl	8011088 <xTaskCallApplicationTaskHook>
}
 80110e6:	b003      	add	sp, #12
 80110e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80110ec:	f7ff b8f4 	b.w	80102d8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110f0:	3001      	adds	r0, #1
 80110f2:	d10a      	bne.n	801110a <vTaskStartScheduler+0x6a>
 80110f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110f8:	b672      	cpsid	i
 80110fa:	f383 8811 	msr	BASEPRI, r3
 80110fe:	f3bf 8f6f 	isb	sy
 8011102:	f3bf 8f4f 	dsb	sy
 8011106:	b662      	cpsie	i
 8011108:	e7fe      	b.n	8011108 <vTaskStartScheduler+0x68>
}
 801110a:	b003      	add	sp, #12
 801110c:	bd30      	pop	{r4, r5, pc}
 801110e:	bf00      	nop
 8011110:	20021b2c 	.word	0x20021b2c
 8011114:	08024b34 	.word	0x08024b34
 8011118:	08010ca5 	.word	0x08010ca5

0801111c <vTaskSwitchContext>:
{
 801111c:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801111e:	4c22      	ldr	r4, [pc, #136]	@ (80111a8 <vTaskSwitchContext+0x8c>)
 8011120:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011124:	b11b      	cbz	r3, 801112e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8011126:	2301      	movs	r3, #1
 8011128:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
}
 801112c:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 801112e:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
		traceTASK_SWITCHED_OUT();
 8011132:	2101      	movs	r1, #1
 8011134:	6860      	ldr	r0, [r4, #4]
 8011136:	f7ff ffa7 	bl	8011088 <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 801113a:	6862      	ldr	r2, [r4, #4]
 801113c:	6863      	ldr	r3, [r4, #4]
 801113e:	6812      	ldr	r2, [r2, #0]
 8011140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011142:	429a      	cmp	r2, r3
 8011144:	d804      	bhi.n	8011150 <vTaskSwitchContext+0x34>
 8011146:	6860      	ldr	r0, [r4, #4]
 8011148:	6861      	ldr	r1, [r4, #4]
 801114a:	3134      	adds	r1, #52	@ 0x34
 801114c:	f000 fa78 	bl	8011640 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011150:	68a3      	ldr	r3, [r4, #8]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011152:	fab3 f383 	clz	r3, r3
 8011156:	b2db      	uxtb	r3, r3
 8011158:	2214      	movs	r2, #20
 801115a:	f1c3 031f 	rsb	r3, r3, #31
 801115e:	435a      	muls	r2, r3
 8011160:	18a1      	adds	r1, r4, r2
 8011162:	6dc8      	ldr	r0, [r1, #92]	@ 0x5c
 8011164:	b950      	cbnz	r0, 801117c <vTaskSwitchContext+0x60>
	__asm volatile
 8011166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801116a:	b672      	cpsid	i
 801116c:	f383 8811 	msr	BASEPRI, r3
 8011170:	f3bf 8f6f 	isb	sy
 8011174:	f3bf 8f4f 	dsb	sy
 8011178:	b662      	cpsie	i
 801117a:	e7fe      	b.n	801117a <vTaskSwitchContext+0x5e>
 801117c:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 801117e:	4d0b      	ldr	r5, [pc, #44]	@ (80111ac <vTaskSwitchContext+0x90>)
 8011180:	6840      	ldr	r0, [r0, #4]
 8011182:	442a      	add	r2, r5
 8011184:	6608      	str	r0, [r1, #96]	@ 0x60
 8011186:	4290      	cmp	r0, r2
 8011188:	bf04      	itt	eq
 801118a:	6842      	ldreq	r2, [r0, #4]
 801118c:	660a      	streq	r2, [r1, #96]	@ 0x60
 801118e:	2214      	movs	r2, #20
		traceTASK_SWITCHED_IN();
 8011190:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011192:	fb02 4303 	mla	r3, r2, r3, r4
 8011196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	6063      	str	r3, [r4, #4]
		traceTASK_SWITCHED_IN();
 801119c:	6860      	ldr	r0, [r4, #4]
}
 801119e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		traceTASK_SWITCHED_IN();
 80111a2:	f7ff bf71 	b.w	8011088 <xTaskCallApplicationTaskHook>
 80111a6:	bf00      	nop
 80111a8:	20021b2c 	.word	0x20021b2c
 80111ac:	20021b90 	.word	0x20021b90

080111b0 <vTaskPlaceOnEventList>:
{
 80111b0:	b510      	push	{r4, lr}
 80111b2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80111b4:	b950      	cbnz	r0, 80111cc <vTaskPlaceOnEventList+0x1c>
 80111b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111ba:	b672      	cpsid	i
 80111bc:	f383 8811 	msr	BASEPRI, r3
 80111c0:	f3bf 8f6f 	isb	sy
 80111c4:	f3bf 8f4f 	dsb	sy
 80111c8:	b662      	cpsie	i
 80111ca:	e7fe      	b.n	80111ca <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80111cc:	4b05      	ldr	r3, [pc, #20]	@ (80111e4 <vTaskPlaceOnEventList+0x34>)
 80111ce:	6859      	ldr	r1, [r3, #4]
 80111d0:	3118      	adds	r1, #24
 80111d2:	f7ff f928 	bl	8010426 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80111d6:	4620      	mov	r0, r4
 80111d8:	2101      	movs	r1, #1
}
 80111da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80111de:	f7ff bd1b 	b.w	8010c18 <prvAddCurrentTaskToDelayedList>
 80111e2:	bf00      	nop
 80111e4:	20021b2c 	.word	0x20021b2c

080111e8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111e8:	68c3      	ldr	r3, [r0, #12]
{
 80111ea:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111ec:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80111ee:	b955      	cbnz	r5, 8011206 <xTaskRemoveFromEventList+0x1e>
 80111f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111f4:	b672      	cpsid	i
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	b662      	cpsie	i
 8011204:	e7fe      	b.n	8011204 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011206:	f105 0618 	add.w	r6, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801120a:	4c14      	ldr	r4, [pc, #80]	@ (801125c <xTaskRemoveFromEventList+0x74>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801120c:	4630      	mov	r0, r6
 801120e:	f7ff f921 	bl	8010454 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011212:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011216:	b9d3      	cbnz	r3, 801124e <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011218:	1d2e      	adds	r6, r5, #4
 801121a:	4630      	mov	r0, r6
 801121c:	f7ff f91a 	bl	8010454 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011220:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8011222:	2301      	movs	r3, #1
 8011224:	68a1      	ldr	r1, [r4, #8]
 8011226:	2014      	movs	r0, #20
 8011228:	4093      	lsls	r3, r2
 801122a:	430b      	orrs	r3, r1
 801122c:	4631      	mov	r1, r6
 801122e:	60a3      	str	r3, [r4, #8]
 8011230:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8011234:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011238:	f7ff f8ea 	bl	8010410 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801123c:	6863      	ldr	r3, [r4, #4]
 801123e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8011240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011242:	429a      	cmp	r2, r3
 8011244:	d907      	bls.n	8011256 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8011246:	2001      	movs	r0, #1
 8011248:	f8c4 0188 	str.w	r0, [r4, #392]	@ 0x188
}
 801124c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801124e:	4631      	mov	r1, r6
 8011250:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011254:	e7f0      	b.n	8011238 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8011256:	2000      	movs	r0, #0
	return xReturn;
 8011258:	e7f8      	b.n	801124c <xTaskRemoveFromEventList+0x64>
 801125a:	bf00      	nop
 801125c:	20021b2c 	.word	0x20021b2c

08011260 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011260:	4b03      	ldr	r3, [pc, #12]	@ (8011270 <vTaskInternalSetTimeOutState+0x10>)
 8011262:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011266:	681b      	ldr	r3, [r3, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011268:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801126a:	6043      	str	r3, [r0, #4]
}
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop
 8011270:	20021b2c 	.word	0x20021b2c

08011274 <xTaskCheckForTimeOut>:
{
 8011274:	b570      	push	{r4, r5, r6, lr}
 8011276:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8011278:	4605      	mov	r5, r0
 801127a:	b950      	cbnz	r0, 8011292 <xTaskCheckForTimeOut+0x1e>
 801127c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011280:	b672      	cpsid	i
 8011282:	f383 8811 	msr	BASEPRI, r3
 8011286:	f3bf 8f6f 	isb	sy
 801128a:	f3bf 8f4f 	dsb	sy
 801128e:	b662      	cpsie	i
 8011290:	e7fe      	b.n	8011290 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8011292:	b951      	cbnz	r1, 80112aa <xTaskCheckForTimeOut+0x36>
 8011294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011298:	b672      	cpsid	i
 801129a:	f383 8811 	msr	BASEPRI, r3
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	f3bf 8f4f 	dsb	sy
 80112a6:	b662      	cpsie	i
 80112a8:	e7fe      	b.n	80112a8 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 80112aa:	f7fe ff7b 	bl	80101a4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 80112ae:	6823      	ldr	r3, [r4, #0]
		const TickType_t xConstTickCount = xTickCount;
 80112b0:	480e      	ldr	r0, [pc, #56]	@ (80112ec <xTaskCheckForTimeOut+0x78>)
			if( *pxTicksToWait == portMAX_DELAY )
 80112b2:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 80112b4:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80112b6:	d010      	beq.n	80112da <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80112b8:	f8d0 0180 	ldr.w	r0, [r0, #384]	@ 0x180
 80112bc:	682e      	ldr	r6, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80112be:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80112c0:	4286      	cmp	r6, r0
 80112c2:	d001      	beq.n	80112c8 <xTaskCheckForTimeOut+0x54>
 80112c4:	428a      	cmp	r2, r1
 80112c6:	d90f      	bls.n	80112e8 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80112c8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80112ca:	4283      	cmp	r3, r0
 80112cc:	d90a      	bls.n	80112e4 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 80112ce:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80112d0:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80112d2:	4413      	add	r3, r2
 80112d4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80112d6:	f7ff ffc3 	bl	8011260 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80112da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80112dc:	f7fe ff86 	bl	80101ec <vPortExitCritical>
}
 80112e0:	4620      	mov	r0, r4
 80112e2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80112e4:	2300      	movs	r3, #0
 80112e6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80112e8:	2401      	movs	r4, #1
 80112ea:	e7f7      	b.n	80112dc <xTaskCheckForTimeOut+0x68>
 80112ec:	20021b2c 	.word	0x20021b2c

080112f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80112f0:	4b02      	ldr	r3, [pc, #8]	@ (80112fc <vTaskMissedYield+0xc>)
 80112f2:	2201      	movs	r2, #1
 80112f4:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
}
 80112f8:	4770      	bx	lr
 80112fa:	bf00      	nop
 80112fc:	20021b2c 	.word	0x20021b2c

08011300 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011300:	4b06      	ldr	r3, [pc, #24]	@ (801131c <xTaskGetSchedulerState+0x1c>)
 8011302:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 8011306:	b132      	cbz	r2, 8011316 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011308:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 801130c:	fab0 f080 	clz	r0, r0
 8011310:	0940      	lsrs	r0, r0, #5
 8011312:	0040      	lsls	r0, r0, #1
 8011314:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011316:	2001      	movs	r0, #1
	}
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	20021b2c 	.word	0x20021b2c

08011320 <xTaskPriorityInherit>:
	{
 8011320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8011324:	4604      	mov	r4, r0
 8011326:	2800      	cmp	r0, #0
 8011328:	d034      	beq.n	8011394 <xTaskPriorityInherit+0x74>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801132a:	4d21      	ldr	r5, [pc, #132]	@ (80113b0 <xTaskPriorityInherit+0x90>)
 801132c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801132e:	686a      	ldr	r2, [r5, #4]
 8011330:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011332:	4293      	cmp	r3, r2
 8011334:	d234      	bcs.n	80113a0 <xTaskPriorityInherit+0x80>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011336:	6982      	ldr	r2, [r0, #24]
 8011338:	2a00      	cmp	r2, #0
 801133a:	db04      	blt.n	8011346 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801133c:	686a      	ldr	r2, [r5, #4]
 801133e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011340:	f1c2 020c 	rsb	r2, r2, #12
 8011344:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011346:	4f1b      	ldr	r7, [pc, #108]	@ (80113b4 <xTaskPriorityInherit+0x94>)
 8011348:	2614      	movs	r6, #20
 801134a:	6962      	ldr	r2, [r4, #20]
 801134c:	fb06 7303 	mla	r3, r6, r3, r7
 8011350:	429a      	cmp	r2, r3
 8011352:	d121      	bne.n	8011398 <xTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011354:	f104 0804 	add.w	r8, r4, #4
 8011358:	4640      	mov	r0, r8
 801135a:	f7ff f87b 	bl	8010454 <uxListRemove>
 801135e:	b950      	cbnz	r0, 8011376 <xTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011360:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011362:	fb06 5601 	mla	r6, r6, r1, r5
 8011366:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8011368:	b92b      	cbnz	r3, 8011376 <xTaskPriorityInherit+0x56>
 801136a:	2201      	movs	r2, #1
 801136c:	68ab      	ldr	r3, [r5, #8]
 801136e:	408a      	lsls	r2, r1
 8011370:	ea23 0302 	bic.w	r3, r3, r2
 8011374:	60ab      	str	r3, [r5, #8]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011376:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011378:	2014      	movs	r0, #20
 801137a:	68a9      	ldr	r1, [r5, #8]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801137c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801137e:	2301      	movs	r3, #1
 8011380:	4093      	lsls	r3, r2
 8011382:	fb00 7002 	mla	r0, r0, r2, r7
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011386:	62e2      	str	r2, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011388:	430b      	orrs	r3, r1
 801138a:	4641      	mov	r1, r8
 801138c:	60ab      	str	r3, [r5, #8]
 801138e:	f7ff f83f 	bl	8010410 <vListInsertEnd>
				xReturn = pdTRUE;
 8011392:	2001      	movs	r0, #1
	}
 8011394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011398:	686b      	ldr	r3, [r5, #4]
 801139a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801139c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801139e:	e7f8      	b.n	8011392 <xTaskPriorityInherit+0x72>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80113a0:	686b      	ldr	r3, [r5, #4]
 80113a2:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80113a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113a6:	4298      	cmp	r0, r3
 80113a8:	bf2c      	ite	cs
 80113aa:	2000      	movcs	r0, #0
 80113ac:	2001      	movcc	r0, #1
 80113ae:	e7f1      	b.n	8011394 <xTaskPriorityInherit+0x74>
 80113b0:	20021b2c 	.word	0x20021b2c
 80113b4:	20021b88 	.word	0x20021b88

080113b8 <xTaskPriorityDisinherit>:
	{
 80113b8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80113ba:	4604      	mov	r4, r0
 80113bc:	b908      	cbnz	r0, 80113c2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80113be:	2000      	movs	r0, #0
	}
 80113c0:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80113c2:	4d24      	ldr	r5, [pc, #144]	@ (8011454 <xTaskPriorityDisinherit+0x9c>)
 80113c4:	686b      	ldr	r3, [r5, #4]
 80113c6:	4283      	cmp	r3, r0
 80113c8:	d00a      	beq.n	80113e0 <xTaskPriorityDisinherit+0x28>
 80113ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113ce:	b672      	cpsid	i
 80113d0:	f383 8811 	msr	BASEPRI, r3
 80113d4:	f3bf 8f6f 	isb	sy
 80113d8:	f3bf 8f4f 	dsb	sy
 80113dc:	b662      	cpsie	i
 80113de:	e7fe      	b.n	80113de <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 80113e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113e2:	b953      	cbnz	r3, 80113fa <xTaskPriorityDisinherit+0x42>
 80113e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113e8:	b672      	cpsid	i
 80113ea:	f383 8811 	msr	BASEPRI, r3
 80113ee:	f3bf 8f6f 	isb	sy
 80113f2:	f3bf 8f4f 	dsb	sy
 80113f6:	b662      	cpsie	i
 80113f8:	e7fe      	b.n	80113f8 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80113fa:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 80113fc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80113fe:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8011400:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011402:	4291      	cmp	r1, r2
 8011404:	d0db      	beq.n	80113be <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011406:	2b00      	cmp	r3, #0
 8011408:	d1d9      	bne.n	80113be <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801140a:	1d06      	adds	r6, r0, #4
 801140c:	4630      	mov	r0, r6
 801140e:	f7ff f821 	bl	8010454 <uxListRemove>
 8011412:	b958      	cbnz	r0, 801142c <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011414:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011416:	2314      	movs	r3, #20
 8011418:	fb03 5301 	mla	r3, r3, r1, r5
 801141c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801141e:	b92b      	cbnz	r3, 801142c <xTaskPriorityDisinherit+0x74>
 8011420:	2201      	movs	r2, #1
 8011422:	68ab      	ldr	r3, [r5, #8]
 8011424:	408a      	lsls	r2, r1
 8011426:	ea23 0302 	bic.w	r3, r3, r2
 801142a:	60ab      	str	r3, [r5, #8]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801142c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 801142e:	2014      	movs	r0, #20
 8011430:	68a9      	ldr	r1, [r5, #8]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011432:	f1c3 020c 	rsb	r2, r3, #12
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011436:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011438:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801143a:	2401      	movs	r4, #1
 801143c:	fa04 f203 	lsl.w	r2, r4, r3
 8011440:	430a      	orrs	r2, r1
 8011442:	4631      	mov	r1, r6
 8011444:	60aa      	str	r2, [r5, #8]
 8011446:	4a04      	ldr	r2, [pc, #16]	@ (8011458 <xTaskPriorityDisinherit+0xa0>)
 8011448:	fb00 2003 	mla	r0, r0, r3, r2
 801144c:	f7fe ffe0 	bl	8010410 <vListInsertEnd>
					xReturn = pdTRUE;
 8011450:	4620      	mov	r0, r4
		return xReturn;
 8011452:	e7b5      	b.n	80113c0 <xTaskPriorityDisinherit+0x8>
 8011454:	20021b2c 	.word	0x20021b2c
 8011458:	20021b88 	.word	0x20021b88

0801145c <vTaskPriorityDisinheritAfterTimeout>:
	{
 801145c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8011460:	4604      	mov	r4, r0
 8011462:	2800      	cmp	r0, #0
 8011464:	d050      	beq.n	8011508 <vTaskPriorityDisinheritAfterTimeout+0xac>
			configASSERT( pxTCB->uxMutexesHeld );
 8011466:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8011468:	b952      	cbnz	r2, 8011480 <vTaskPriorityDisinheritAfterTimeout+0x24>
 801146a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801146e:	b672      	cpsid	i
 8011470:	f383 8811 	msr	BASEPRI, r3
 8011474:	f3bf 8f6f 	isb	sy
 8011478:	f3bf 8f4f 	dsb	sy
 801147c:	b662      	cpsie	i
 801147e:	e7fe      	b.n	801147e <vTaskPriorityDisinheritAfterTimeout+0x22>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011480:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011482:	4299      	cmp	r1, r3
 8011484:	bf38      	it	cc
 8011486:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011488:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801148a:	428b      	cmp	r3, r1
 801148c:	d03c      	beq.n	8011508 <vTaskPriorityDisinheritAfterTimeout+0xac>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801148e:	2a01      	cmp	r2, #1
 8011490:	d13a      	bne.n	8011508 <vTaskPriorityDisinheritAfterTimeout+0xac>
					configASSERT( pxTCB != pxCurrentTCB );
 8011492:	4d1e      	ldr	r5, [pc, #120]	@ (801150c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8011494:	686a      	ldr	r2, [r5, #4]
 8011496:	4282      	cmp	r2, r0
 8011498:	d10a      	bne.n	80114b0 <vTaskPriorityDisinheritAfterTimeout+0x54>
 801149a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801149e:	b672      	cpsid	i
 80114a0:	f383 8811 	msr	BASEPRI, r3
 80114a4:	f3bf 8f6f 	isb	sy
 80114a8:	f3bf 8f4f 	dsb	sy
 80114ac:	b662      	cpsie	i
 80114ae:	e7fe      	b.n	80114ae <vTaskPriorityDisinheritAfterTimeout+0x52>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114b0:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80114b2:	2614      	movs	r6, #20
 80114b4:	4f16      	ldr	r7, [pc, #88]	@ (8011510 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114b6:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 80114b8:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80114ba:	fb06 7303 	mla	r3, r6, r3, r7
 80114be:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114c0:	bfa4      	itt	ge
 80114c2:	f1c1 010c 	rsbge	r1, r1, #12
 80114c6:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d11d      	bne.n	8011508 <vTaskPriorityDisinheritAfterTimeout+0xac>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114cc:	f100 0804 	add.w	r8, r0, #4
 80114d0:	4640      	mov	r0, r8
 80114d2:	f7fe ffbf 	bl	8010454 <uxListRemove>
 80114d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80114d8:	b948      	cbnz	r0, 80114ee <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80114da:	fb06 5602 	mla	r6, r6, r2, r5
 80114de:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80114e0:	b92b      	cbnz	r3, 80114ee <vTaskPriorityDisinheritAfterTimeout+0x92>
 80114e2:	2101      	movs	r1, #1
 80114e4:	68ab      	ldr	r3, [r5, #8]
 80114e6:	4091      	lsls	r1, r2
 80114e8:	ea23 0301 	bic.w	r3, r3, r1
 80114ec:	60ab      	str	r3, [r5, #8]
						prvAddTaskToReadyList( pxTCB );
 80114ee:	2301      	movs	r3, #1
 80114f0:	68a9      	ldr	r1, [r5, #8]
 80114f2:	2014      	movs	r0, #20
 80114f4:	4093      	lsls	r3, r2
 80114f6:	fb00 7002 	mla	r0, r0, r2, r7
 80114fa:	430b      	orrs	r3, r1
 80114fc:	4641      	mov	r1, r8
 80114fe:	60ab      	str	r3, [r5, #8]
	}
 8011500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						prvAddTaskToReadyList( pxTCB );
 8011504:	f7fe bf84 	b.w	8010410 <vListInsertEnd>
	}
 8011508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801150c:	20021b2c 	.word	0x20021b2c
 8011510:	20021b88 	.word	0x20021b88

08011514 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8011514:	4b04      	ldr	r3, [pc, #16]	@ (8011528 <pvTaskIncrementMutexHeldCount+0x14>)
 8011516:	685a      	ldr	r2, [r3, #4]
 8011518:	b11a      	cbz	r2, 8011522 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 801151a:	6859      	ldr	r1, [r3, #4]
 801151c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 801151e:	3201      	adds	r2, #1
 8011520:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8011522:	6858      	ldr	r0, [r3, #4]
	}
 8011524:	4770      	bx	lr
 8011526:	bf00      	nop
 8011528:	20021b2c 	.word	0x20021b2c

0801152c <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 801152c:	4601      	mov	r1, r0
 801152e:	b508      	push	{r3, lr}
        return instance;
 8011530:	4b03      	ldr	r3, [pc, #12]	@ (8011540 <_ZL12IdleTaskHookPv+0x14>)
 8011532:	6818      	ldr	r0, [r3, #0]
    if ((int)p) //idle task sched out
 8011534:	b101      	cbz	r1, 8011538 <_ZL12IdleTaskHookPv+0xc>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8011536:	2101      	movs	r1, #1
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8011538:	f003 fa0e 	bl	8014958 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
}
 801153c:	2001      	movs	r0, #1
 801153e:	bd08      	pop	{r3, pc}
 8011540:	20024e34 	.word	0x20024e34

08011544 <_ZN8touchgfx10OSWrappers10initializeEv>:
{
 8011544:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(frame_buffer_sem);
 8011546:	4c0a      	ldr	r4, [pc, #40]	@ (8011570 <_ZN8touchgfx10OSWrappers10initializeEv+0x2c>)
 8011548:	2203      	movs	r2, #3
 801154a:	2100      	movs	r1, #0
 801154c:	2001      	movs	r0, #1
 801154e:	f7ff f85d 	bl	801060c <xQueueGenericCreate>
 8011552:	6020      	str	r0, [r4, #0]
 8011554:	b120      	cbz	r0, 8011560 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
 8011556:	2300      	movs	r3, #0
 8011558:	461a      	mov	r2, r3
 801155a:	4619      	mov	r1, r3
 801155c:	f7ff f87c 	bl	8010658 <xQueueGenericSend>
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8011560:	2101      	movs	r1, #1
 8011562:	2200      	movs	r2, #0
 8011564:	4608      	mov	r0, r1
 8011566:	f7ff f851 	bl	801060c <xQueueGenericCreate>
 801156a:	6060      	str	r0, [r4, #4]
}
 801156c:	bd10      	pop	{r4, pc}
 801156e:	bf00      	nop
 8011570:	20021cbc 	.word	0x20021cbc

08011574 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8011574:	4b02      	ldr	r3, [pc, #8]	@ (8011580 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8011576:	f04f 31ff 	mov.w	r1, #4294967295
 801157a:	6818      	ldr	r0, [r3, #0]
 801157c:	f7ff ba87 	b.w	8010a8e <xQueueSemaphoreTake>
 8011580:	20021cbc 	.word	0x20021cbc

08011584 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
    xSemaphoreGive(frame_buffer_sem);
 8011584:	2300      	movs	r3, #0
 8011586:	4803      	ldr	r0, [pc, #12]	@ (8011594 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x10>)
 8011588:	461a      	mov	r2, r3
 801158a:	4619      	mov	r1, r3
 801158c:	6800      	ldr	r0, [r0, #0]
 801158e:	f7ff b863 	b.w	8010658 <xQueueGenericSend>
 8011592:	bf00      	nop
 8011594:	20021cbc 	.word	0x20021cbc

08011598 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
    xSemaphoreTake(frame_buffer_sem, 0);
 8011598:	4b02      	ldr	r3, [pc, #8]	@ (80115a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 801159a:	2100      	movs	r1, #0
 801159c:	6818      	ldr	r0, [r3, #0]
 801159e:	f7ff ba76 	b.w	8010a8e <xQueueSemaphoreTake>
 80115a2:	bf00      	nop
 80115a4:	20021cbc 	.word	0x20021cbc

080115a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
    portBASE_TYPE px = pdFALSE;
 80115a8:	2300      	movs	r3, #0
{
 80115aa:	b507      	push	{r0, r1, r2, lr}
    portBASE_TYPE px = pdFALSE;
 80115ac:	9301      	str	r3, [sp, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80115ae:	a901      	add	r1, sp, #4
 80115b0:	4b09      	ldr	r3, [pc, #36]	@ (80115d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 80115b2:	6818      	ldr	r0, [r3, #0]
 80115b4:	f7ff f96e 	bl	8010894 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80115b8:	9b01      	ldr	r3, [sp, #4]
 80115ba:	b14b      	cbz	r3, 80115d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
 80115bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80115c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80115c8:	f3bf 8f4f 	dsb	sy
 80115cc:	f3bf 8f6f 	isb	sy
}
 80115d0:	b003      	add	sp, #12
 80115d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80115d6:	bf00      	nop
 80115d8:	20021cbc 	.word	0x20021cbc

080115dc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
    if (vsync_q)
 80115dc:	4b0c      	ldr	r3, [pc, #48]	@ (8011610 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
{
 80115de:	b507      	push	{r0, r1, r2, lr}
    if (vsync_q)
 80115e0:	6858      	ldr	r0, [r3, #4]
 80115e2:	b188      	cbz	r0, 8011608 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
        portBASE_TYPE px = pdFALSE;
 80115e4:	2300      	movs	r3, #0
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80115e6:	aa01      	add	r2, sp, #4
 80115e8:	490a      	ldr	r1, [pc, #40]	@ (8011614 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x38>)
        portBASE_TYPE px = pdFALSE;
 80115ea:	9301      	str	r3, [sp, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80115ec:	f7ff f8ee 	bl	80107cc <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 80115f0:	9b01      	ldr	r3, [sp, #4]
 80115f2:	b14b      	cbz	r3, 8011608 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
 80115f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80115f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	f3bf 8f6f 	isb	sy
}
 8011608:	b003      	add	sp, #12
 801160a:	f85d fb04 	ldr.w	pc, [sp], #4
 801160e:	bf00      	nop
 8011610:	20021cbc 	.word	0x20021cbc
 8011614:	20000050 	.word	0x20000050

08011618 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
{
 8011618:	b538      	push	{r3, r4, r5, lr}
    xQueueReceive(vsync_q, &dummy, 0);
 801161a:	4d07      	ldr	r5, [pc, #28]	@ (8011638 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x20>)
 801161c:	2200      	movs	r2, #0
 801161e:	4c07      	ldr	r4, [pc, #28]	@ (801163c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8011620:	4629      	mov	r1, r5
 8011622:	6860      	ldr	r0, [r4, #4]
 8011624:	f7ff f98f 	bl	8010946 <xQueueReceive>
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8011628:	4629      	mov	r1, r5
 801162a:	6860      	ldr	r0, [r4, #4]
 801162c:	f04f 32ff 	mov.w	r2, #4294967295
}
 8011630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8011634:	f7ff b987 	b.w	8010946 <xQueueReceive>
 8011638:	20000050 	.word	0x20000050
 801163c:	20021cbc 	.word	0x20021cbc

08011640 <vApplicationStackOverflowHook>:
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
        while (1);
 8011640:	e7fe      	b.n	8011640 <vApplicationStackOverflowHook>

08011642 <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
        while (1);
 8011642:	e7fe      	b.n	8011642 <vApplicationMallocFailedHook>

08011644 <vApplicationIdleHook>:
    void vApplicationIdleHook(void)
    {
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8011644:	4901      	ldr	r1, [pc, #4]	@ (801164c <vApplicationIdleHook+0x8>)
 8011646:	2000      	movs	r0, #0
 8011648:	f7ff bd0e 	b.w	8011068 <vTaskSetApplicationTaskTag>
 801164c:	0801152d 	.word	0x0801152d

08011650 <__tcf_1>:
static Texts texts; ///< The texts

template <class T>
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
{
    static T hal(dma, display, tc, width, height);
 8011650:	4770      	bx	lr

08011652 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS_15SlideTransitionILNS_9DirectionE0EEENS2_INS4_ILS5_1EEENS1_3NilEEEEEEELt1EE8capacityEv>:
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8011652:	2001      	movs	r0, #1
 8011654:	4770      	bx	lr

08011656 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS_15SlideTransitionILNS_9DirectionE0EEENS2_INS4_ILS5_1EEENS1_3NilEEEEEEELt1EE12element_sizeEv>:
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8011656:	2058      	movs	r0, #88	@ 0x58
 8011658:	4770      	bx	lr

0801165a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS_15SlideTransitionILNS_9DirectionE0EEENS2_INS4_ILS5_1EEENS1_3NilEEEEEEELt1EE7elementEt>:
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 801165a:	2358      	movs	r3, #88	@ 0x58
 801165c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8011660:	3008      	adds	r0, #8
 8011662:	4770      	bx	lr

08011664 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS_15SlideTransitionILNS_9DirectionE0EEENS2_INS4_ILS5_1EEENS1_3NilEEEEEEELt1EE7elementEt>:
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8011664:	2358      	movs	r3, #88	@ 0x58
 8011666:	fb03 0001 	mla	r0, r3, r1, r0
    }
 801166a:	3008      	adds	r0, #8
 801166c:	4770      	bx	lr

0801166e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12MainMenuViewNS2_I18CustomControlsViewNS2_I9GraphViewNS2_I18EasingEquationViewNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EE8capacityEv>:
    }
 801166e:	2001      	movs	r0, #1
 8011670:	4770      	bx	lr

08011672 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12MainMenuViewNS2_I18CustomControlsViewNS2_I9GraphViewNS2_I18EasingEquationViewNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EE12element_sizeEv>:
    }
 8011672:	f641 200c 	movw	r0, #6668	@ 0x1a0c
 8011676:	4770      	bx	lr

08011678 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12MainMenuViewNS2_I18CustomControlsViewNS2_I9GraphViewNS2_I18EasingEquationViewNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EE7elementEt>:
        return &stBlocks[index];
 8011678:	f641 230c 	movw	r3, #6668	@ 0x1a0c
 801167c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8011680:	3008      	adds	r0, #8
 8011682:	4770      	bx	lr

08011684 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12MainMenuViewNS2_I18CustomControlsViewNS2_I9GraphViewNS2_I18EasingEquationViewNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EE7elementEt>:
        return &stBlocks[index];
 8011684:	f641 230c 	movw	r3, #6668	@ 0x1a0c
 8011688:	fb03 0001 	mla	r0, r3, r1, r0
    }
 801168c:	3008      	adds	r0, #8
 801168e:	4770      	bx	lr

08011690 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17MainMenuPresenterNS2_I23CustomControlsPresenterNS2_I14GraphPresenterNS2_I23EasingEquationPresenterNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EE8capacityEv>:
    }
 8011690:	2001      	movs	r0, #1
 8011692:	4770      	bx	lr

08011694 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MainMenuPresenterNS2_I23CustomControlsPresenterNS2_I14GraphPresenterNS2_I23EasingEquationPresenterNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EE12element_sizeEv>:
    }
 8011694:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8011698:	4770      	bx	lr

0801169a <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MainMenuPresenterNS2_I23CustomControlsPresenterNS2_I14GraphPresenterNS2_I23EasingEquationPresenterNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EE7elementEt>:
        return &stBlocks[index];
 801169a:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 801169e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80116a2:	3008      	adds	r0, #8
 80116a4:	4770      	bx	lr

080116a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17MainMenuPresenterNS2_I23CustomControlsPresenterNS2_I14GraphPresenterNS2_I23EasingEquationPresenterNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EE7elementEt>:
        return &stBlocks[index];
 80116a6:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80116aa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80116ae:	3008      	adds	r0, #8
 80116b0:	4770      	bx	lr
	...

080116b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS_15SlideTransitionILNS_9DirectionE0EEENS2_INS4_ILS5_1EEENS1_3NilEEEEEEELt1EED1Ev>:
    }
 80116b4:	4b03      	ldr	r3, [pc, #12]	@ (80116c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS_15SlideTransitionILNS_9DirectionE0EEENS2_INS4_ILS5_1EEENS1_3NilEEEEEEELt1EED1Ev+0x10>)
    virtual ~Partition()
 80116b6:	b510      	push	{r4, lr}
 80116b8:	4604      	mov	r4, r0
    }
 80116ba:	6003      	str	r3, [r0, #0]
 80116bc:	f000 ffe6 	bl	801268c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80116c0:	4620      	mov	r0, r4
 80116c2:	bd10      	pop	{r4, pc}
 80116c4:	08024bac 	.word	0x08024bac

080116c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS_15SlideTransitionILNS_9DirectionE0EEENS2_INS4_ILS5_1EEENS1_3NilEEEEEEELt1EED0Ev>:
    virtual ~Partition()
 80116c8:	b510      	push	{r4, lr}
 80116ca:	4604      	mov	r4, r0
    }
 80116cc:	f7ff fff2 	bl	80116b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS_15SlideTransitionILNS_9DirectionE0EEENS2_INS4_ILS5_1EEENS1_3NilEEEEEEELt1EED1Ev>
 80116d0:	2160      	movs	r1, #96	@ 0x60
 80116d2:	4620      	mov	r0, r4
 80116d4:	f00d fa27 	bl	801eb26 <_ZdlPvj>
 80116d8:	4620      	mov	r0, r4
 80116da:	bd10      	pop	{r4, pc}

080116dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12MainMenuViewNS2_I18CustomControlsViewNS2_I9GraphViewNS2_I18EasingEquationViewNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED1Ev>:
 80116dc:	4b03      	ldr	r3, [pc, #12]	@ (80116ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI12MainMenuViewNS2_I18CustomControlsViewNS2_I9GraphViewNS2_I18EasingEquationViewNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED1Ev+0x10>)
    virtual ~Partition()
 80116de:	b510      	push	{r4, lr}
 80116e0:	4604      	mov	r4, r0
    }
 80116e2:	6003      	str	r3, [r0, #0]
 80116e4:	f000 ffd2 	bl	801268c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80116e8:	4620      	mov	r0, r4
 80116ea:	bd10      	pop	{r4, pc}
 80116ec:	08024b78 	.word	0x08024b78

080116f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12MainMenuViewNS2_I18CustomControlsViewNS2_I9GraphViewNS2_I18EasingEquationViewNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED0Ev>:
    virtual ~Partition()
 80116f0:	b510      	push	{r4, lr}
 80116f2:	4604      	mov	r4, r0
    }
 80116f4:	f7ff fff2 	bl	80116dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12MainMenuViewNS2_I18CustomControlsViewNS2_I9GraphViewNS2_I18EasingEquationViewNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED1Ev>
 80116f8:	f641 2114 	movw	r1, #6676	@ 0x1a14
 80116fc:	4620      	mov	r0, r4
 80116fe:	f00d fa12 	bl	801eb26 <_ZdlPvj>
 8011702:	4620      	mov	r0, r4
 8011704:	bd10      	pop	{r4, pc}
	...

08011708 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MainMenuPresenterNS2_I23CustomControlsPresenterNS2_I14GraphPresenterNS2_I23EasingEquationPresenterNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED1Ev>:
 8011708:	4b03      	ldr	r3, [pc, #12]	@ (8011718 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MainMenuPresenterNS2_I23CustomControlsPresenterNS2_I14GraphPresenterNS2_I23EasingEquationPresenterNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED1Ev+0x10>)
    virtual ~Partition()
 801170a:	b510      	push	{r4, lr}
 801170c:	4604      	mov	r4, r0
    }
 801170e:	6003      	str	r3, [r0, #0]
 8011710:	f000 ffbc 	bl	801268c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011714:	4620      	mov	r0, r4
 8011716:	bd10      	pop	{r4, pc}
 8011718:	08024b44 	.word	0x08024b44

0801171c <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MainMenuPresenterNS2_I23CustomControlsPresenterNS2_I14GraphPresenterNS2_I23EasingEquationPresenterNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED0Ev>:
    virtual ~Partition()
 801171c:	b510      	push	{r4, lr}
 801171e:	4604      	mov	r4, r0
    }
 8011720:	f7ff fff2 	bl	8011708 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MainMenuPresenterNS2_I23CustomControlsPresenterNS2_I14GraphPresenterNS2_I23EasingEquationPresenterNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED1Ev>
 8011724:	f640 1108 	movw	r1, #2312	@ 0x908
 8011728:	4620      	mov	r0, r4
 801172a:	f00d f9fc 	bl	801eb26 <_ZdlPvj>
 801172e:	4620      	mov	r0, r4
 8011730:	bd10      	pop	{r4, pc}
	...

08011734 <_ZN12FrontendHeapD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeap : public MVPHeap
 8011734:	4b09      	ldr	r3, [pc, #36]	@ (801175c <_ZN12FrontendHeapD1Ev+0x28>)
 8011736:	b510      	push	{r4, lr}
 8011738:	4604      	mov	r4, r0
 801173a:	6003      	str	r3, [r0, #0]
 801173c:	f500 500c 	add.w	r0, r0, #8960	@ 0x2300
 8011740:	3030      	adds	r0, #48	@ 0x30
 8011742:	f7ff ffb7 	bl	80116b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS_15SlideTransitionILNS_9DirectionE0EEENS2_INS4_ILS5_1EEENS1_3NilEEEEEEELt1EED1Ev>
 8011746:	f604 101c 	addw	r0, r4, #2332	@ 0x91c
 801174a:	f7ff ffc7 	bl	80116dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12MainMenuViewNS2_I18CustomControlsViewNS2_I9GraphViewNS2_I18EasingEquationViewNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED1Ev>
 801174e:	f104 0014 	add.w	r0, r4, #20
 8011752:	f7ff ffd9 	bl	8011708 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MainMenuPresenterNS2_I23CustomControlsPresenterNS2_I14GraphPresenterNS2_I23EasingEquationPresenterNS2_I20ProductPresenterViewNS1_3NilEEEEEEEEEEELt1EED1Ev>
 8011756:	4620      	mov	r0, r4
 8011758:	bd10      	pop	{r4, pc}
 801175a:	bf00      	nop
 801175c:	08024be0 	.word	0x08024be0

08011760 <__tcf_0>:
     */
    typedef meta::select_type_maxsize< TransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011760:	b508      	push	{r3, lr}
 8011762:	4802      	ldr	r0, [pc, #8]	@ (801176c <__tcf_0+0xc>)
 8011764:	f7ff ffe6 	bl	8011734 <_ZN12FrontendHeapD1Ev>
 8011768:	bd08      	pop	{r3, pc}
 801176a:	bf00      	nop
 801176c:	20022928 	.word	0x20022928

08011770 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public MVPHeap
 8011770:	b510      	push	{r4, lr}
 8011772:	4604      	mov	r4, r0
 8011774:	f7ff ffde 	bl	8011734 <_ZN12FrontendHeapD1Ev>
 8011778:	f44f 5114 	mov.w	r1, #9472	@ 0x2500
 801177c:	4620      	mov	r0, r4
 801177e:	f00d f9d2 	bl	801eb26 <_ZdlPvj>
 8011782:	4620      	mov	r0, r4
 8011784:	bd10      	pop	{r4, pc}

08011786 <LCD_GetXSize>:

extern "C" {
uint32_t LCD_GetXSize(void)
{
    return RK043FN48H_WIDTH;
}
 8011786:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 801178a:	4770      	bx	lr

0801178c <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
    return RK043FN48H_HEIGHT;
}
 801178c:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8011790:	4770      	bx	lr
	...

08011794 <_ZN8touchgfx7hw_initEv>:
}

namespace touchgfx
{
void hw_init()
{
 8011794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Init();

    __HAL_RCC_CRC_CLK_ENABLE();
 8011798:	4c1d      	ldr	r4, [pc, #116]	@ (8011810 <_ZN8touchgfx7hw_initEv+0x7c>)
{
 801179a:	b0bd      	sub	sp, #244	@ 0xf4
    HAL_Init();
 801179c:	f7fb fe9e 	bl	800d4dc <HAL_Init>

    /* Enable HSE Oscillator and activate PLL with HSE as source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80117a0:	2602      	movs	r6, #2
    __HAL_RCC_CRC_CLK_ENABLE();
 80117a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLM = 25;
    RCC_OscInitStruct.PLL.PLLN = 400;
 80117a4:	2019      	movs	r0, #25
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80117a6:	2701      	movs	r7, #1
 80117a8:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
    __HAL_RCC_CRC_CLK_ENABLE();
 80117ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 8;
 80117b0:	f04f 0808 	mov.w	r8, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 80117b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80117b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80117b8:	9625      	str	r6, [sp, #148]	@ 0x94
    __HAL_RCC_CRC_CLK_ENABLE();
 80117ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    RCC_OscInitStruct.PLL.PLLQ = 8;
 80117be:	f8cd 8098 	str.w	r8, [sp, #152]	@ 0x98
    __HAL_RCC_CRC_CLK_ENABLE();
 80117c2:	9300      	str	r3, [sp, #0]
 80117c4:	9b00      	ldr	r3, [sp, #0]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80117c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80117ca:	e9cd 6321 	strd	r6, r3, [sp, #132]	@ 0x84
    RCC_OscInitStruct.PLL.PLLN = 400;
 80117ce:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80117d2:	e9cd 0323 	strd	r0, r3, [sp, #140]	@ 0x8c

    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80117d6:	a81b      	add	r0, sp, #108	@ 0x6c
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80117d8:	e9cd 7a1b 	strd	r7, sl, [sp, #108]	@ 0x6c
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80117dc:	f7fd fba0 	bl	800ef20 <HAL_RCC_OscConfig>
    if (ret != HAL_OK)
 80117e0:	b100      	cbz	r0, 80117e4 <_ZN8touchgfx7hw_initEv+0x50>
    {
        while (1)
 80117e2:	e7fe      	b.n	80117e2 <_ZN8touchgfx7hw_initEv+0x4e>
            ;
        }
    }

    /* Activate the OverDrive to reach the 200 MHz Frequency */
    ret = HAL_PWREx_EnableOverDrive();
 80117e4:	f7fd f838 	bl	800e858 <HAL_PWREx_EnableOverDrive>
    if (ret != HAL_OK)
 80117e8:	b100      	cbz	r0, 80117ec <_ZN8touchgfx7hw_initEv+0x58>
    {
        while (1)
 80117ea:	e7fe      	b.n	80117ea <_ZN8touchgfx7hw_initEv+0x56>
            ;
        }
    }

    /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80117ec:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80117ee:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80117f2:	9010      	str	r0, [sp, #64]	@ 0x40

    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 80117f4:	2106      	movs	r1, #6
 80117f6:	a80e      	add	r0, sp, #56	@ 0x38
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80117f8:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80117fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8011800:	e9cd 3911 	strd	r3, r9, [sp, #68]	@ 0x44
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 8011804:	f7fd fd74 	bl	800f2f0 <HAL_RCC_ClockConfig>
    if (ret != HAL_OK)
 8011808:	4605      	mov	r5, r0
 801180a:	b118      	cbz	r0, 8011814 <_ZN8touchgfx7hw_initEv+0x80>
    {
        while (1)
 801180c:	e7fe      	b.n	801180c <_ZN8touchgfx7hw_initEv+0x78>
 801180e:	bf00      	nop
 8011810:	40023800 	.word	0x40023800
    BSP_QSPI_Init();
 8011814:	f7fb fb66 	bl	800cee4 <BSP_QSPI_Init>
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8011818:	f240 1b01 	movw	fp, #257	@ 0x101
    BSP_QSPI_MemoryMappedMode();
 801181c:	f7fb faaa 	bl	800cd74 <BSP_QSPI_EnableMemoryMappedMode>
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8011820:	205c      	movs	r0, #92	@ 0x5c
 8011822:	f7fb fee7 	bl	800d5f4 <HAL_NVIC_DisableIRQ>
    BSP_SDRAM_Init();
 8011826:	f7fb fcfb 	bl	800d220 <BSP_SDRAM_Init>
    HAL_MPU_Disable();
 801182a:	f7fb fef5 	bl	800d618 <HAL_MPU_Disable>
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 801182e:	f248 731f 	movw	r3, #34591	@ 0x871f
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011832:	a80a      	add	r0, sp, #40	@ 0x28
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011834:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
    MPU_InitStruct.BaseAddress = 0x00;
 8011838:	950b      	str	r5, [sp, #44]	@ 0x2c
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 801183a:	e9cd 3b0c 	strd	r3, fp, [sp, #48]	@ 0x30
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801183e:	f7fb ff09 	bl	800d654 <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011842:	f240 3301 	movw	r3, #769	@ 0x301
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8011846:	4ab5      	ldr	r2, [pc, #724]	@ (8011b1c <_ZN8touchgfx7hw_initEv+0x388>)
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011848:	a80a      	add	r0, sp, #40	@ 0x28
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801184a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 801184e:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8011852:	950d      	str	r5, [sp, #52]	@ 0x34
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8011854:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011858:	f7fb fefc 	bl	800d654 <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801185c:	f240 4201 	movw	r2, #1025	@ 0x401
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8011860:	4baf      	ldr	r3, [pc, #700]	@ (8011b20 <_ZN8touchgfx7hw_initEv+0x38c>)
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011862:	a80a      	add	r0, sp, #40	@ 0x28
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011864:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8011868:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 801186c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8011870:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011874:	f7fb feee 	bl	800d654 <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011878:	f8ad b028 	strh.w	fp, [sp, #40]	@ 0x28
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 801187c:	4ba9      	ldr	r3, [pc, #676]	@ (8011b24 <_ZN8touchgfx7hw_initEv+0x390>)
 801187e:	f04f 4b40 	mov.w	fp, #3221225472	@ 0xc0000000
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011882:	a80a      	add	r0, sp, #40	@ 0x28
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8011884:	e9cd b30b 	strd	fp, r3, [sp, #44]	@ 0x2c
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8011888:	4ba7      	ldr	r3, [pc, #668]	@ (8011b28 <_ZN8touchgfx7hw_initEv+0x394>)
 801188a:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801188c:	f7fb fee2 	bl	800d654 <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011890:	f240 2301 	movw	r3, #513	@ 0x201
    MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8011894:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011898:	a80a      	add	r0, sp, #40	@ 0x28
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801189a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
    MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 801189e:	4ba3      	ldr	r3, [pc, #652]	@ (8011b2c <_ZN8touchgfx7hw_initEv+0x398>)
 80118a0:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80118a4:	4ba2      	ldr	r3, [pc, #648]	@ (8011b30 <_ZN8touchgfx7hw_initEv+0x39c>)
 80118a6:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80118a8:	f7fb fed4 	bl	800d654 <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80118ac:	2004      	movs	r0, #4
 80118ae:	f7fb fec1 	bl	800d634 <HAL_MPU_Enable>
    __HAL_RCC_LTDC_CLK_ENABLE();
 80118b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80118b4:	a91b      	add	r1, sp, #108	@ 0x6c
 80118b6:	489f      	ldr	r0, [pc, #636]	@ (8011b34 <_ZN8touchgfx7hw_initEv+0x3a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80118b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80118bc:	6463      	str	r3, [r4, #68]	@ 0x44
 80118be:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80118c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80118c4:	9301      	str	r3, [sp, #4]
 80118c6:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80118c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80118ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80118d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80118d6:	9302      	str	r3, [sp, #8]
 80118d8:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80118da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118dc:	f043 0310 	orr.w	r3, r3, #16
 80118e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80118e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118e4:	f003 0310 	and.w	r3, r3, #16
 80118e8:	9303      	str	r3, [sp, #12]
 80118ea:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80118ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80118f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118fa:	9304      	str	r3, [sp, #16]
 80118fc:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80118fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011904:	6323      	str	r3, [r4, #48]	@ 0x30
 8011906:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801190c:	9305      	str	r3, [sp, #20]
 801190e:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8011910:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011916:	6323      	str	r3, [r4, #48]	@ 0x30
 8011918:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801191a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801191e:	9306      	str	r3, [sp, #24]
 8011920:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8011922:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011924:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011928:	6323      	str	r3, [r4, #48]	@ 0x30
 801192a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801192c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011930:	9307      	str	r3, [sp, #28]
 8011932:	9b07      	ldr	r3, [sp, #28]
    LCD_DISP_GPIO_CLK_ENABLE();
 8011934:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801193a:	6323      	str	r3, [r4, #48]	@ 0x30
 801193c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801193e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011942:	9308      	str	r3, [sp, #32]
 8011944:	9b08      	ldr	r3, [sp, #32]
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8011946:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011948:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801194c:	6323      	str	r3, [r4, #48]	@ 0x30
 801194e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8011950:	240e      	movs	r4, #14
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8011952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8011956:	941f      	str	r4, [sp, #124]	@ 0x7c
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8011958:	9309      	str	r3, [sp, #36]	@ 0x24
 801195a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    gpio_init_structure.Pin       = GPIO_PIN_4;
 801195c:	2310      	movs	r3, #16
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 801195e:	e9cd 561d 	strd	r5, r6, [sp, #116]	@ 0x74
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8011962:	e9cd 361b 	strd	r3, r6, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8011966:	f7fc f9a9 	bl	800dcbc <HAL_GPIO_Init>
    gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 801196a:	2209      	movs	r2, #9
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 801196c:	a91b      	add	r1, sp, #108	@ 0x6c
 801196e:	4872      	ldr	r0, [pc, #456]	@ (8011b38 <_ZN8touchgfx7hw_initEv+0x3a4>)
    gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8011970:	921f      	str	r2, [sp, #124]	@ 0x7c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8011972:	e9cd 961b 	strd	r9, r6, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8011976:	f7fc f9a1 	bl	800dcbc <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 |
 801197a:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 801197e:	a91b      	add	r1, sp, #108	@ 0x6c
 8011980:	486e      	ldr	r0, [pc, #440]	@ (8011b3c <_ZN8touchgfx7hw_initEv+0x3a8>)
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8011982:	941f      	str	r4, [sp, #124]	@ 0x7c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8011984:	e9cd 361b 	strd	r3, r6, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8011988:	f7fc f998 	bl	800dcbc <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
 801198c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8011990:	a91b      	add	r1, sp, #108	@ 0x6c
 8011992:	486b      	ldr	r0, [pc, #428]	@ (8011b40 <_ZN8touchgfx7hw_initEv+0x3ac>)
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8011994:	941f      	str	r4, [sp, #124]	@ 0x7c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8011996:	e9cd 361b 	strd	r3, r6, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 801199a:	f7fc f98f 	bl	800dcbc <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 801199e:	23f7      	movs	r3, #247	@ 0xf7
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80119a0:	a91b      	add	r1, sp, #108	@ 0x6c
 80119a2:	4868      	ldr	r0, [pc, #416]	@ (8011b44 <_ZN8touchgfx7hw_initEv+0x3b0>)
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80119a4:	941f      	str	r4, [sp, #124]	@ 0x7c
    hltdc.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80119a6:	4c68      	ldr	r4, [pc, #416]	@ (8011b48 <_ZN8touchgfx7hw_initEv+0x3b4>)
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80119a8:	e9cd 361b 	strd	r3, r6, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80119ac:	f7fc f986 	bl	800dcbc <HAL_GPIO_Init>
    HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80119b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80119b2:	4862      	ldr	r0, [pc, #392]	@ (8011b3c <_ZN8touchgfx7hw_initEv+0x3a8>)
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80119b4:	e9cd 971b 	strd	r9, r7, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80119b8:	f7fc f980 	bl	800dcbc <HAL_GPIO_Init>
    HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80119bc:	a91b      	add	r1, sp, #108	@ 0x6c
 80119be:	4861      	ldr	r0, [pc, #388]	@ (8011b44 <_ZN8touchgfx7hw_initEv+0x3b0>)
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80119c0:	e9cd 871b 	strd	r8, r7, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80119c4:	f7fc f97a 	bl	800dcbc <HAL_GPIO_Init>
    periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80119c8:	23c0      	movs	r3, #192	@ 0xc0
    HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80119ca:	a81b      	add	r0, sp, #108	@ 0x6c
    periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80119cc:	f8cd a098 	str.w	sl, [sp, #152]	@ 0x98
    periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80119d0:	9320      	str	r3, [sp, #128]	@ 0x80
    periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80119d2:	2305      	movs	r3, #5
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80119d4:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
    hltdc.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80119d8:	f44f 7a88 	mov.w	sl, #272	@ 0x110
    periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80119dc:	9322      	str	r3, [sp, #136]	@ 0x88
    HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80119de:	f7fd fd59 	bl	800f494 <HAL_RCCEx_PeriphCLKConfig>
    hltdc.Instance = LTDC;
 80119e2:	495a      	ldr	r1, [pc, #360]	@ (8011b4c <_ZN8touchgfx7hw_initEv+0x3b8>)
    hltdc.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80119e4:	2209      	movs	r2, #9
    hltdc.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80119e6:	f04f 0c35 	mov.w	ip, #53	@ 0x35
    hltdc.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80119ea:	f240 2e15 	movw	lr, #533	@ 0x215
    hltdc.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80119ee:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
    HAL_LTDC_Init(&hltdc);
 80119f2:	4620      	mov	r0, r4
    hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80119f4:	6125      	str	r5, [r4, #16]
    hltdc.Init.Backcolor.Blue = 0;
 80119f6:	86a5      	strh	r5, [r4, #52]	@ 0x34
    hltdc.Init.Backcolor.Red = 0;
 80119f8:	f884 5036 	strb.w	r5, [r4, #54]	@ 0x36
    hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80119fc:	e9c4 1500 	strd	r1, r5, [r4]
    hltdc.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8011a00:	2128      	movs	r1, #40	@ 0x28
 8011a02:	e9c4 1205 	strd	r1, r2, [r4, #20]
    hltdc.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8011a06:	220b      	movs	r2, #11
 8011a08:	e9c4 c207 	strd	ip, r2, [r4, #28]
    hltdc.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8011a0c:	f240 121b 	movw	r2, #283	@ 0x11b
    hltdc.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8011a10:	e9c4 3a18 	strd	r3, sl, [r4, #96]	@ 0x60
    hltdc.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8011a14:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hltdc.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8011a18:	f240 2335 	movw	r3, #565	@ 0x235
 8011a1c:	f240 121d 	movw	r2, #285	@ 0x11d
    hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8011a20:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hltdc.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8011a24:	e9c4 320b 	strd	r3, r2, [r4, #44]	@ 0x2c
    HAL_LTDC_Init(&hltdc);
 8011a28:	f7fc fe02 	bl	800e630 <HAL_LTDC_Init>
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8011a2c:	463a      	mov	r2, r7
 8011a2e:	4649      	mov	r1, r9
 8011a30:	4842      	ldr	r0, [pc, #264]	@ (8011b3c <_ZN8touchgfx7hw_initEv+0x3a8>)
 8011a32:	f7fc fa27 	bl	800de84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8011a36:	463a      	mov	r2, r7
 8011a38:	4641      	mov	r1, r8
 8011a3a:	4842      	ldr	r0, [pc, #264]	@ (8011b44 <_ZN8touchgfx7hw_initEv+0x3b0>)
 8011a3c:	f7fc fa22 	bl	800de84 <HAL_GPIO_WritePin>
    Layercfg.Alpha = 255;
 8011a40:	22ff      	movs	r2, #255	@ 0xff
    Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8011a42:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
    Layercfg.WindowX1 = LCD_GetXSize();
 8011a46:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
    HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 8011a4a:	4620      	mov	r0, r4
    Layercfg.WindowX0 = 0;
 8011a4c:	950e      	str	r5, [sp, #56]	@ 0x38
    Layercfg.ImageHeight = LCD_GetYSize();
 8011a4e:	f8cd a064 	str.w	sl, [sp, #100]	@ 0x64
    Layercfg.Backcolor.Blue = 0;
 8011a52:	f8ad 5068 	strh.w	r5, [sp, #104]	@ 0x68
    Layercfg.Backcolor.Red = 0;
 8011a56:	f88d 506a 	strb.w	r5, [sp, #106]	@ 0x6a
    Layercfg.Alpha0 = 0;
 8011a5a:	e9cd 2513 	strd	r2, r5, [sp, #76]	@ 0x4c
    Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8011a5e:	2207      	movs	r2, #7
 8011a60:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
    HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 8011a64:	462a      	mov	r2, r5
 8011a66:	a90e      	add	r1, sp, #56	@ 0x38
    Layercfg.WindowY0 = 0;
 8011a68:	e9cd 350f 	strd	r3, r5, [sp, #60]	@ 0x3c
    Layercfg.ImageWidth = LCD_GetXSize();
 8011a6c:	e9cd b317 	strd	fp, r3, [sp, #92]	@ 0x5c
    Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8011a70:	e9cd a611 	strd	sl, r6, [sp, #68]	@ 0x44
    HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 8011a74:	f7fc fea7 	bl	800e7c6 <HAL_LTDC_ConfigLayer>
    __HAL_LTDC_ENABLE(&hltdc);
 8011a78:	6822      	ldr	r2, [r4, #0]
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8011a7a:	4649      	mov	r1, r9
 8011a7c:	482f      	ldr	r0, [pc, #188]	@ (8011b3c <_ZN8touchgfx7hw_initEv+0x3a8>)
    __HAL_LTDC_ENABLE(&hltdc);
 8011a7e:	6993      	ldr	r3, [r2, #24]
 8011a80:	f043 0301 	orr.w	r3, r3, #1
 8011a84:	6193      	str	r3, [r2, #24]
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8011a86:	463a      	mov	r2, r7
 8011a88:	f7fc f9fc 	bl	800de84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8011a8c:	463a      	mov	r2, r7
 8011a8e:	4641      	mov	r1, r8
 8011a90:	482c      	ldr	r0, [pc, #176]	@ (8011b44 <_ZN8touchgfx7hw_initEv+0x3b0>)
 8011a92:	f7fc f9f7 	bl	800de84 <HAL_GPIO_WritePin>
    GPIO::init();
 8011a96:	f000 f991 	bl	8011dbc <_ZN8touchgfx4GPIO4initEv>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8011a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8011b50 <_ZN8touchgfx7hw_initEv+0x3bc>)
 8011a9c:	f8c2 5084 	str.w	r5, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011aa0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8011aa4:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011aa8:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011aac:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011ab0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8011ab4:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011ab6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011aba:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011abc:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8011ac0:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011ac2:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8011ac6:	d2f9      	bcs.n	8011abc <_ZN8touchgfx7hw_initEv+0x328>
    } while(sets-- != 0U);
 8011ac8:	3b20      	subs	r3, #32
 8011aca:	f113 0f20 	cmn.w	r3, #32
 8011ace:	d1f2      	bne.n	8011ab6 <_ZN8touchgfx7hw_initEv+0x322>
 8011ad0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8011ad4:	6953      	ldr	r3, [r2, #20]
 8011ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011ada:	6153      	str	r3, [r2, #20]
 8011adc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011ae0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8011ae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011ae8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8011aec:	2300      	movs	r3, #0
 8011aee:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8011af2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011af6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8011afa:	6953      	ldr	r3, [r2, #20]
 8011afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011b00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011b02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011b06:	f3bf 8f6f 	isb	sy
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8011b0a:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 8011b0e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8011b12:	601a      	str	r2, [r3, #0]
}
 8011b14:	b03d      	add	sp, #244	@ 0xf4
 8011b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b1a:	bf00      	nop
 8011b1c:	0300001b 	.word	0x0300001b
 8011b20:	03000017 	.word	0x03000017
 8011b24:	03000016 	.word	0x03000016
 8011b28:	00010101 	.word	0x00010101
 8011b2c:	0300000c 	.word	0x0300000c
 8011b30:	01000101 	.word	0x01000101
 8011b34:	40021000 	.word	0x40021000
 8011b38:	40021800 	.word	0x40021800
 8011b3c:	40022000 	.word	0x40022000
 8011b40:	40022400 	.word	0x40022400
 8011b44:	40022800 	.word	0x40022800
 8011b48:	20021cc4 	.word	0x20021cc4
 8011b4c:	40016800 	.word	0x40016800
 8011b50:	e000ed00 	.word	0xe000ed00

08011b54 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8011b54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    static T hal(dma, display, tc, width, height);
 8011b58:	4f56      	ldr	r7, [pc, #344]	@ (8011cb4 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x160>)
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8011b5a:	4680      	mov	r8, r0
 8011b5c:	4689      	mov	r9, r1
 8011b5e:	4692      	mov	sl, r2
    static T hal(dma, display, tc, width, height);
 8011b60:	683d      	ldr	r5, [r7, #0]
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8011b62:	461c      	mov	r4, r3
    static T hal(dma, display, tc, width, height);
 8011b64:	f3bf 8f5b 	dmb	ish
 8011b68:	f015 0501 	ands.w	r5, r5, #1
 8011b6c:	d141      	bne.n	8011bf2 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x9e>
 8011b6e:	4638      	mov	r0, r7
 8011b70:	f00c ffdb 	bl	801eb2a <__cxa_guard_acquire>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d03c      	beq.n	8011bf2 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x9e>
 8011b78:	b2a3      	uxth	r3, r4
        refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8011b7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
        dma(dmaInterface),
 8011b7e:	4c4e      	ldr	r4, [pc, #312]	@ (8011cb8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x164>)
 8011b80:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
        refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8011b84:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
        lockDMAToPorch(true),
 8011b88:	2201      	movs	r2, #1
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011b8a:	42b3      	cmp	r3, r6
 8011b8c:	484b      	ldr	r0, [pc, #300]	@ (8011cbc <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x168>)
        lockDMAToPorch(true),
 8011b8e:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
        touchSampleRate(1),
 8011b92:	f102 7280 	add.w	r2, r2, #16777216	@ 0x1000000
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8011b96:	85a5      	strh	r5, [r4, #44]	@ 0x2c
        updateMCULoad(0),
 8011b98:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
        cc_begin(0),
 8011b9c:	6625      	str	r5, [r4, #96]	@ 0x60
        displayOrientationChangeRequested(false)
 8011b9e:	f884 5065 	strb.w	r5, [r4, #101]	@ 0x65
        vSyncCompensationEnabled(false),
 8011ba2:	e9c4 2515 	strd	r2, r5, [r4, #84]	@ 0x54
        instance = this;
 8011ba6:	4a46      	ldr	r2, [pc, #280]	@ (8011cc0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x16c>)
 8011ba8:	6014      	str	r4, [r2, #0]
        DISPLAY_WIDTH = width;
 8011baa:	4a46      	ldr	r2, [pc, #280]	@ (8011cc4 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x170>)
 8011bac:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8011bae:	4a46      	ldr	r2, [pc, #280]	@ (8011cc8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x174>)
 8011bb0:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8011bb2:	4a46      	ldr	r2, [pc, #280]	@ (8011ccc <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x178>)
 8011bb4:	7015      	strb	r5, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8011bb6:	4a46      	ldr	r2, [pc, #280]	@ (8011cd0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x17c>)
 8011bb8:	8013      	strh	r3, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011bba:	bf2c      	ite	cs
 8011bbc:	2300      	movcs	r3, #0
 8011bbe:	2301      	movcc	r3, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8011bc0:	4a44      	ldr	r2, [pc, #272]	@ (8011cd4 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x180>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011bc2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8011bc6:	4b44      	ldr	r3, [pc, #272]	@ (8011cd8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x184>)
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8011bc8:	8016      	strh	r6, [r2, #0]
 8011bca:	6023      	str	r3, [r4, #0]
        lcdRef(display),
 8011bcc:	e9c4 8901 	strd	r8, r9, [r4, #4]
        mcuInstrumentation(0),
 8011bd0:	e9c4 a503 	strd	sl, r5, [r4, #12]
 8011bd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011bd8:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8011bdc:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        frameBuffer0(0),
 8011be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
        frameBuffer2(0),
 8011be4:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8011be8:	f00e f8e2 	bl	801fdb0 <atexit>
 8011bec:	4638      	mov	r0, r7
 8011bee:	f00c ffa8 	bl	801eb42 <__cxa_guard_release>
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
    hal.initialize();
 8011bf2:	4831      	ldr	r0, [pc, #196]	@ (8011cb8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x164>)
 8011bf4:	f002 fcaa 	bl	801454c <_ZN8touchgfx3HAL10initializeEv>
        static FrontendHeap instance;
 8011bf8:	4f38      	ldr	r7, [pc, #224]	@ (8011cdc <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x188>)

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 8011bfa:	f7ef f871 	bl	8000ce0 <_ZN14BitmapDatabase11getInstanceEv>
 8011bfe:	4604      	mov	r4, r0
 8011c00:	f7ef f872 	bl	8000ce8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8011c04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c06:	4601      	mov	r1, r0
 8011c08:	4620      	mov	r0, r4
 8011c0a:	9300      	str	r3, [sp, #0]
 8011c0c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8011c10:	f00a fe48 	bl	801c8a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
        texts = t;
 8011c14:	4b32      	ldr	r3, [pc, #200]	@ (8011ce0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x18c>)
 8011c16:	4a33      	ldr	r2, [pc, #204]	@ (8011ce4 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x190>)
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8011c18:	2000      	movs	r0, #0
 8011c1a:	601a      	str	r2, [r3, #0]
 8011c1c:	f7ef f866 	bl	8000cec <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8011c20:	4831      	ldr	r0, [pc, #196]	@ (8011ce8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x194>)
 8011c22:	f00a fda9 	bl	801c778 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	f3bf 8f5b 	dmb	ish
 8011c2c:	07db      	lsls	r3, r3, #31
 8011c2e:	d437      	bmi.n	8011ca0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x14c>
 8011c30:	4638      	mov	r0, r7
 8011c32:	f00c ff7a 	bl	801eb2a <__cxa_guard_acquire>
 8011c36:	b398      	cbz	r0, 8011ca0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x14c>
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
 8011c38:	4c2c      	ldr	r4, [pc, #176]	@ (8011cec <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x198>)
        screenStorage(scr),
        transitionStorage(tra),
 8011c3a:	4d2d      	ldr	r5, [pc, #180]	@ (8011cf0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x19c>)
    FrontendHeap()
        : MVPHeap(presenters, views, transitions, app),
          presenters(),
          views(),
          transitions(),
          app(model, *this)
 8011c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8011cf4 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x1a0>)
            MVPApplication& app) : presenterStorage(pres),
 8011c3e:	f104 0014 	add.w	r0, r4, #20
        frontendApplication(app)
 8011c42:	f105 0860 	add.w	r8, r5, #96	@ 0x60
        screenStorage(scr),
 8011c46:	f604 161c 	addw	r6, r4, #2332	@ 0x91c
 8011c4a:	6023      	str	r3, [r4, #0]
            MVPApplication& app) : presenterStorage(pres),
 8011c4c:	6060      	str	r0, [r4, #4]
        screenStorage(scr),
 8011c4e:	60a6      	str	r6, [r4, #8]
        transitionStorage(tra),
 8011c50:	60e5      	str	r5, [r4, #12]
        frontendApplication(app)
 8011c52:	f8c4 8010 	str.w	r8, [r4, #16]
    Partition() : AbstractPartition()
 8011c56:	f000 fd1b 	bl	8012690 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011c5a:	4b27      	ldr	r3, [pc, #156]	@ (8011cf8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x1a4>)
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	6163      	str	r3, [r4, #20]
 8011c60:	f000 fd16 	bl	8012690 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011c64:	4b25      	ldr	r3, [pc, #148]	@ (8011cfc <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x1a8>)
 8011c66:	4628      	mov	r0, r5
 8011c68:	f8c4 391c 	str.w	r3, [r4, #2332]	@ 0x91c
 8011c6c:	f000 fd10 	bl	8012690 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011c70:	f504 5300 	add.w	r3, r4, #8192	@ 0x2000
 8011c74:	4a22      	ldr	r2, [pc, #136]	@ (8011d00 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x1ac>)
 8011c76:	4640      	mov	r0, r8
 8011c78:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330
 8011c7c:	f503 619e 	add.w	r1, r3, #1264	@ 0x4f0
 8011c80:	4622      	mov	r2, r4
 8011c82:	f7f0 f9d3 	bl	800202c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8011c86:	f505 70e0 	add.w	r0, r5, #448	@ 0x1c0
 8011c8a:	f7f9 fec1 	bl	800ba10 <_ZN5ModelC1Ev>
    {
        // Goto start screen
        app.gotoMainMenuScreenNoTransition();
 8011c8e:	4640      	mov	r0, r8
 8011c90:	f7f0 fa12 	bl	80020b8 <_ZN19FrontendApplication30gotoMainMenuScreenNoTransitionEv>
        static FrontendHeap instance;
 8011c94:	481b      	ldr	r0, [pc, #108]	@ (8011d04 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x1b0>)
 8011c96:	f00e f88b 	bl	801fdb0 <atexit>
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	f00c ff51 	bl	801eb42 <__cxa_guard_release>

    FrontendHeap& heap = FrontendHeap::getInstance();
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 8011ca0:	f007 ff88 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8011ca4:	4601      	mov	r1, r0
 8011ca6:	4804      	ldr	r0, [pc, #16]	@ (8011cb8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x164>)
 8011ca8:	f002 fb92 	bl	80143d0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>

    return hal;
}
 8011cac:	4802      	ldr	r0, [pc, #8]	@ (8011cb8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x164>)
 8011cae:	b002      	add	sp, #8
 8011cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cb4:	200228b8 	.word	0x200228b8
 8011cb8:	200228bc 	.word	0x200228bc
 8011cbc:	08011651 	.word	0x08011651
 8011cc0:	20024e34 	.word	0x20024e34
 8011cc4:	20024e28 	.word	0x20024e28
 8011cc8:	20024e2a 	.word	0x20024e2a
 8011ccc:	20024e2c 	.word	0x20024e2c
 8011cd0:	20024e2e 	.word	0x20024e2e
 8011cd4:	20024e30 	.word	0x20024e30
 8011cd8:	08022730 	.word	0x08022730
 8011cdc:	20022924 	.word	0x20022924
 8011ce0:	20024ec0 	.word	0x20024ec0
 8011ce4:	20021d6c 	.word	0x20021d6c
 8011ce8:	20000054 	.word	0x20000054
 8011cec:	20022928 	.word	0x20022928
 8011cf0:	20024c58 	.word	0x20024c58
 8011cf4:	08024be0 	.word	0x08024be0
 8011cf8:	08024b44 	.word	0x08024b44
 8011cfc:	08024b78 	.word	0x08024b78
 8011d00:	08024bac 	.word	0x08024bac
 8011d04:	08011761 	.word	0x08011761

08011d08 <_ZN8touchgfx13touchgfx_initEv>:
{
 8011d08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,
 8011d0c:	2710      	movs	r7, #16
 8011d0e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011d12:	4d18      	ldr	r5, [pc, #96]	@ (8011d74 <_ZN8touchgfx13touchgfx_initEv+0x6c>)
    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0);
 8011d14:	2601      	movs	r6, #1
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,
 8011d16:	4a18      	ldr	r2, [pc, #96]	@ (8011d78 <_ZN8touchgfx13touchgfx_initEv+0x70>)
 8011d18:	4918      	ldr	r1, [pc, #96]	@ (8011d7c <_ZN8touchgfx13touchgfx_initEv+0x74>)
 8011d1a:	f105 00b0 	add.w	r0, r5, #176	@ 0xb0
 8011d1e:	e9cd 3702 	strd	r3, r7, [sp, #8]
 8011d22:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8011d26:	e9cd 3200 	strd	r3, r2, [sp]
 8011d2a:	f105 02ac 	add.w	r2, r5, #172	@ 0xac
 8011d2e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8011d32:	f7ff ff0f 	bl	8011b54 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0);
 8011d36:	6803      	ldr	r3, [r0, #0]
 8011d38:	463a      	mov	r2, r7
 8011d3a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8011d3e:	9600      	str	r6, [sp, #0]
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,
 8011d40:	4604      	mov	r4, r0
    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0);
 8011d42:	f8d3 8074 	ldr.w	r8, [r3, #116]	@ 0x74
 8011d46:	4633      	mov	r3, r6
 8011d48:	47c0      	blx	r8
            touchSampleRate = sampleRateInTicks;
 8011d4a:	2302      	movs	r3, #2
    mcuInstr.init();
 8011d4c:	f505 6535 	add.w	r5, r5, #2896	@ 0xb50
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
    {
        fingerSize = size;
 8011d50:	f884 6045 	strb.w	r6, [r4, #69]	@ 0x45
            touchSampleRate = sampleRateInTicks;
 8011d54:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        vSyncCompensationEnabled = enabled;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
        lockDMAToPorch = enableLock;
 8011d60:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8011d64:	f000 fbbe 	bl	80124e4 <_ZN8touchgfx22STM32F7Instrumentation4initEv>
        mcuInstrumentation = mcuInstr;
 8011d68:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8011d6a:	f884 605c 	strb.w	r6, [r4, #92]	@ 0x5c
}
 8011d6e:	b004      	add	sp, #16
 8011d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d74:	20021cc4 	.word	0x20021cc4
 8011d78:	c00bf400 	.word	0xc00bf400
 8011d7c:	20000058 	.word	0x20000058

08011d80 <_GLOBAL__sub_I_hltdc>:
        {
            ;
        }
    }
}
 8011d80:	b510      	push	{r4, lr}
STM32F7DMA dma;
 8011d82:	4c08      	ldr	r4, [pc, #32]	@ (8011da4 <_GLOBAL__sub_I_hltdc+0x24>)
 8011d84:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 8011d88:	f000 fa1a 	bl	80121c0 <_ZN10STM32F7DMAC1Ev>
namespace touchgfx
{
class STM32F746GTouchController: public TouchController
{
public:
    STM32F746GTouchController() {}
 8011d8c:	4b06      	ldr	r3, [pc, #24]	@ (8011da8 <_GLOBAL__sub_I_hltdc+0x28>)
 8011d8e:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
        cc_consumed(0),
 8011d92:	2300      	movs	r3, #0
 8011d94:	f8c4 3b54 	str.w	r3, [r4, #2900]	@ 0xb54
        cc_in(0)
 8011d98:	f8c4 3b58 	str.w	r3, [r4, #2904]	@ 0xb58
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 8011d9c:	4b03      	ldr	r3, [pc, #12]	@ (8011dac <_GLOBAL__sub_I_hltdc+0x2c>)
 8011d9e:	f8c4 3b50 	str.w	r3, [r4, #2896]	@ 0xb50
}
 8011da2:	bd10      	pop	{r4, pc}
 8011da4:	20021cc4 	.word	0x20021cc4
 8011da8:	080226cc 	.word	0x080226cc
 8011dac:	080227d8 	.word	0x080227d8

08011db0 <_GLOBAL__sub_D_hltdc>:
STM32F7DMA dma;
 8011db0:	4801      	ldr	r0, [pc, #4]	@ (8011db8 <_GLOBAL__sub_D_hltdc+0x8>)
 8011db2:	f000 b885 	b.w	8011ec0 <_ZN10STM32F7DMAD1Ev>
 8011db6:	bf00      	nop
 8011db8:	20021d74 	.word	0x20021d74

08011dbc <_ZN8touchgfx4GPIO4initEv>:
{
    return id == GPIO::RENDER_TIME;
}

void GPIO::init()
{
 8011dbc:	b508      	push	{r3, lr}
    BSP_LED_Init(LED_GREEN);
 8011dbe:	2000      	movs	r0, #0
 8011dc0:	f7fa ff04 	bl	800cbcc <BSP_LED_Init>

void GPIO::clear(GPIO::GPIO_ID id)
{
    if (isRenderTime(id))
    {
        ledState = 0;
 8011dc4:	4b03      	ldr	r3, [pc, #12]	@ (8011dd4 <_ZN8touchgfx4GPIO4initEv+0x18>)
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	7018      	strb	r0, [r3, #0]
}
 8011dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BSP_LED_Off(LED_GREEN);
 8011dce:	f7fa bf2b 	b.w	800cc28 <BSP_LED_Off>
 8011dd2:	bf00      	nop
 8011dd4:	20022864 	.word	0x20022864

08011dd8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    if (isRenderTime(id))
 8011dd8:	2801      	cmp	r0, #1
 8011dda:	d104      	bne.n	8011de6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xe>
        ledState = 1;
 8011ddc:	4b02      	ldr	r3, [pc, #8]	@ (8011de8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x10>)
 8011dde:	7018      	strb	r0, [r3, #0]
        BSP_LED_On(LED_GREEN);
 8011de0:	2000      	movs	r0, #0
 8011de2:	f7fa bf17 	b.w	800cc14 <BSP_LED_On>
}
 8011de6:	4770      	bx	lr
 8011de8:	20022864 	.word	0x20022864

08011dec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    if (isRenderTime(id))
 8011dec:	2801      	cmp	r0, #1
 8011dee:	d104      	bne.n	8011dfa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xe>
        ledState = 0;
 8011df0:	2000      	movs	r0, #0
 8011df2:	4b02      	ldr	r3, [pc, #8]	@ (8011dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x10>)
 8011df4:	7018      	strb	r0, [r3, #0]
        BSP_LED_Off(LED_GREEN);
 8011df6:	f7fa bf17 	b.w	800cc28 <BSP_LED_Off>
    }
}
 8011dfa:	4770      	bx	lr
 8011dfc:	20022864 	.word	0x20022864

08011e00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO::GPIO_ID id)
{
    if (isRenderTime(id))
 8011e00:	2801      	cmp	r0, #1
 8011e02:	d102      	bne.n	8011e0a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
    {
        BSP_LED_Toggle(LED_GREEN);
 8011e04:	2000      	movs	r0, #0
 8011e06:	f7fa bf19 	b.w	800cc3c <BSP_LED_Toggle>
    }
}
 8011e0a:	4770      	bx	lr

08011e0c <_ZN8touchgfx25STM32F746GTouchControllerD1Ev>:

#include <platform/driver/touch/TouchController.hpp>

namespace touchgfx
{
class STM32F746GTouchController: public TouchController
 8011e0c:	4770      	bx	lr

08011e0e <_ZN8touchgfx25STM32F746GTouchController4initEv>:
}

using namespace touchgfx;

void STM32F746GTouchController::init()
{
 8011e0e:	b510      	push	{r4, lr}
    BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 8011e10:	f7ff fcb9 	bl	8011786 <LCD_GetXSize>
 8011e14:	4604      	mov	r4, r0
 8011e16:	f7ff fcb9 	bl	801178c <LCD_GetYSize>
 8011e1a:	b281      	uxth	r1, r0
 8011e1c:	b2a0      	uxth	r0, r4
}
 8011e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 8011e22:	f7fb ba3b 	b.w	800d29c <BSP_TS_Init>

08011e26 <_ZN8touchgfx25STM32F746GTouchController11sampleTouchERlS1_>:

bool STM32F746GTouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8011e26:	b530      	push	{r4, r5, lr}
 8011e28:	b08d      	sub	sp, #52	@ 0x34
 8011e2a:	460d      	mov	r5, r1
 8011e2c:	4614      	mov	r4, r2
    TS_StateTypeDef state = { 0 };
 8011e2e:	2100      	movs	r1, #0
 8011e30:	222c      	movs	r2, #44	@ 0x2c
 8011e32:	a801      	add	r0, sp, #4
 8011e34:	f00e f997 	bl	8020166 <memset>
    BSP_TS_GetState(&state);
 8011e38:	a801      	add	r0, sp, #4
 8011e3a:	f7fb fa77 	bl	800d32c <BSP_TS_GetState>
    if (state.touchDetected)
 8011e3e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011e42:	b130      	cbz	r0, 8011e52 <_ZN8touchgfx25STM32F746GTouchController11sampleTouchERlS1_+0x2c>
    {
        x = state.touchX[0];
 8011e44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        y = state.touchY[0];

        return true;
 8011e48:	2001      	movs	r0, #1
        x = state.touchX[0];
 8011e4a:	602b      	str	r3, [r5, #0]
        y = state.touchY[0];
 8011e4c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011e50:	6023      	str	r3, [r4, #0]
    }
    return false;
}
 8011e52:	b00d      	add	sp, #52	@ 0x34
 8011e54:	bd30      	pop	{r4, r5, pc}

08011e56 <_ZN8touchgfx25STM32F746GTouchControllerD0Ev>:
 8011e56:	b510      	push	{r4, lr}
 8011e58:	4604      	mov	r4, r0
 8011e5a:	2104      	movs	r1, #4
 8011e5c:	f00c fe63 	bl	801eb26 <_ZdlPvj>
 8011e60:	4620      	mov	r0, r4
 8011e62:	bd10      	pop	{r4, pc}

08011e64 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8011e64:	6803      	ldr	r3, [r0, #0]
 8011e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e68:	4718      	bx	r3

08011e6a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8011e6a:	6803      	ldr	r3, [r0, #0]
 8011e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e6e:	4718      	bx	r3

08011e70 <DMA2D_XferErrorCallback>:
}

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
    //assert(0);
}
 8011e70:	4770      	bx	lr
	...

08011e74 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
    if (disableChromArt)
 8011e74:	4b03      	ldr	r3, [pc, #12]	@ (8011e84 <_ZN10STM32F7DMA11getBlitCapsEv+0x10>)
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
    }
}
 8011e76:	f240 10ef 	movw	r0, #495	@ 0x1ef
    if (disableChromArt)
 8011e7a:	781b      	ldrb	r3, [r3, #0]
        return static_cast<BlitOperations>(0);
 8011e7c:	2b00      	cmp	r3, #0
}
 8011e7e:	bf18      	it	ne
 8011e80:	2000      	movne	r0, #0
 8011e82:	4770      	bx	lr
 8011e84:	20022865 	.word	0x20022865

08011e88 <_ZN10STM32F7DMA5startEv>:
void STM32F7DMA::start()
{
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 8011e88:	f002 be84 	b.w	8014b94 <_ZN8touchgfx13DMA_Interface5startEv>

08011e8c <_ZN10STM32F7DMA10initializeEv>:
{
 8011e8c:	b510      	push	{r4, lr}
    hdma2d.Instance = DMA2D;
 8011e8e:	4c07      	ldr	r4, [pc, #28]	@ (8011eac <_ZN10STM32F7DMA10initializeEv+0x20>)
 8011e90:	4b07      	ldr	r3, [pc, #28]	@ (8011eb0 <_ZN10STM32F7DMA10initializeEv+0x24>)
    HAL_DMA2D_Init(&hdma2d);
 8011e92:	4620      	mov	r0, r4
    hdma2d.Instance = DMA2D;
 8011e94:	6023      	str	r3, [r4, #0]
    HAL_DMA2D_Init(&hdma2d);
 8011e96:	f7fb fd49 	bl	800d92c <HAL_DMA2D_Init>
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8011e9a:	4b06      	ldr	r3, [pc, #24]	@ (8011eb4 <_ZN10STM32F7DMA10initializeEv+0x28>)
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011e9c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011ea0:	6123      	str	r3, [r4, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8011ea2:	4b05      	ldr	r3, [pc, #20]	@ (8011eb8 <_ZN10STM32F7DMA10initializeEv+0x2c>)
 8011ea4:	6163      	str	r3, [r4, #20]
 8011ea6:	4b05      	ldr	r3, [pc, #20]	@ (8011ebc <_ZN10STM32F7DMA10initializeEv+0x30>)
 8011ea8:	609a      	str	r2, [r3, #8]
}
 8011eaa:	bd10      	pop	{r4, pc}
 8011eac:	20022824 	.word	0x20022824
 8011eb0:	4002b000 	.word	0x4002b000
 8011eb4:	080120b1 	.word	0x080120b1
 8011eb8:	08011e71 	.word	0x08011e71
 8011ebc:	e000e100 	.word	0xe000e100

08011ec0 <_ZN10STM32F7DMAD1Ev>:
STM32F7DMA::~STM32F7DMA()
 8011ec0:	4b08      	ldr	r3, [pc, #32]	@ (8011ee4 <_ZN10STM32F7DMAD1Ev+0x24>)
 8011ec2:	b510      	push	{r4, lr}
 8011ec4:	6003      	str	r3, [r0, #0]
 8011ec6:	4604      	mov	r4, r0
    HAL_DMA2D_DeInit(&hdma2d);
 8011ec8:	4807      	ldr	r0, [pc, #28]	@ (8011ee8 <_ZN10STM32F7DMAD1Ev+0x28>)
 8011eca:	f7fb fdf1 	bl	800dab0 <HAL_DMA2D_DeInit>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011ece:	4b07      	ldr	r3, [pc, #28]	@ (8011eec <_ZN10STM32F7DMAD1Ev+0x2c>)
 8011ed0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8011ed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011edc:	f3bf 8f6f 	isb	sy
}
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	bd10      	pop	{r4, pc}
 8011ee4:	080226e4 	.word	0x080226e4
 8011ee8:	20022824 	.word	0x20022824
 8011eec:	e000e100 	.word	0xe000e100

08011ef0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8011ef0:	b510      	push	{r4, lr}
 8011ef2:	4604      	mov	r4, r0
}
 8011ef4:	f7ff ffe4 	bl	8011ec0 <_ZN10STM32F7DMAD1Ev>
 8011ef8:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 8011efc:	4620      	mov	r0, r4
 8011efe:	f00c fe12 	bl	801eb26 <_ZdlPvj>
 8011f02:	4620      	mov	r0, r4
 8011f04:	bd10      	pop	{r4, pc}
	...

08011f08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8011f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8011f0c:	680d      	ldr	r5, [r1, #0]
{
 8011f0e:	460c      	mov	r4, r1
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8011f10:	2d20      	cmp	r5, #32
 8011f12:	f000 80a4 	beq.w	801205e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8011f16:	2d40      	cmp	r5, #64	@ 0x40
 8011f18:	f000 80a1 	beq.w	801205e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8011f1c:	2d04      	cmp	r5, #4
 8011f1e:	f000 809e 	beq.w	801205e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8011f22:	2d80      	cmp	r5, #128	@ 0x80
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8011f24:	f04f 0600 	mov.w	r6, #0
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8011f28:	f000 809b 	beq.w	8012062 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15a>
 8011f2c:	f5a5 7380 	sub.w	r3, r5, #256	@ 0x100
 8011f30:	425d      	negs	r5, r3
 8011f32:	415d      	adcs	r5, r3
        return instance->lcdRef;
 8011f34:	4b5c      	ldr	r3, [pc, #368]	@ (80120a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	6898      	ldr	r0, [r3, #8]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8011f3a:	6803      	ldr	r3, [r0, #0]
 8011f3c:	6a1b      	ldr	r3, [r3, #32]
 8011f3e:	4798      	blx	r3
    switch (blitOp.operation)
 8011f40:	6823      	ldr	r3, [r4, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8011f42:	4601      	mov	r1, r0
    switch (blitOp.operation)
 8011f44:	2b80      	cmp	r3, #128	@ 0x80
 8011f46:	f000 809e 	beq.w	8012086 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17e>
 8011f4a:	f200 808c 	bhi.w	8012066 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15e>
 8011f4e:	2b20      	cmp	r3, #32
 8011f50:	f000 809c 	beq.w	801208c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
 8011f54:	2b40      	cmp	r3, #64	@ 0x40
 8011f56:	f000 8099 	beq.w	801208c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
 8011f5a:	2b04      	cmp	r3, #4
 8011f5c:	f000 808a 	beq.w	8012074 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011f60:	2910      	cmp	r1, #16
 8011f62:	f04f 0200 	mov.w	r2, #0
 8011f66:	bf0c      	ite	eq
 8011f68:	f04f 0c02 	moveq.w	ip, #2
 8011f6c:	f04f 0c01 	movne.w	ip, #1
    hdma2d.Init.Mode = dma2dTransferMode;
 8011f70:	4b4e      	ldr	r3, [pc, #312]	@ (80120ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8011f72:	2910      	cmp	r1, #16
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011f74:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8011f78:	f8d3 e000 	ldr.w	lr, [r3]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8011f7c:	bf08      	it	eq
 8011f7e:	2002      	moveq	r0, #2
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011f80:	8a67      	ldrh	r7, [r4, #18]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8011f82:	bf18      	it	ne
 8011f84:	2001      	movne	r0, #1
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8011f86:	f8de 9000 	ldr.w	r9, [lr]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011f8a:	eba7 0708 	sub.w	r7, r7, r8
    hdma2d.Init.Mode = dma2dTransferMode;
 8011f8e:	605a      	str	r2, [r3, #4]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8011f90:	f429 3940 	bic.w	r9, r9, #196608	@ 0x30000
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8011f94:	6098      	str	r0, [r3, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011f96:	60df      	str	r7, [r3, #12]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8011f98:	ea49 0202 	orr.w	r2, r9, r2
 8011f9c:	f8ce 2000 	str.w	r2, [lr]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8011fa0:	f8de 2034 	ldr.w	r2, [lr, #52]	@ 0x34
    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8011fa4:	f8c3 c02c 	str.w	ip, [r3, #44]	@ 0x2c
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8011fa8:	f022 0207 	bic.w	r2, r2, #7
 8011fac:	4302      	orrs	r2, r0
 8011fae:	f8ce 2034 	str.w	r2, [lr, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8011fb2:	f8de 2040 	ldr.w	r2, [lr, #64]	@ 0x40
 8011fb6:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8011fba:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8011fbe:	433a      	orrs	r2, r7
 8011fc0:	f8ce 2040 	str.w	r2, [lr, #64]	@ 0x40
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8011fc4:	8a22      	ldrh	r2, [r4, #16]
 8011fc6:	eba2 0208 	sub.w	r2, r2, r8
 8011fca:	629a      	str	r2, [r3, #40]	@ 0x28
    if (blendingImage || blendingText)
 8011fcc:	b906      	cbnz	r6, 8011fd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
 8011fce:	b39d      	cbz	r5, 8012038 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
        if (blitOp.alpha < 255)
 8011fd0:	7e22      	ldrb	r2, [r4, #24]
 8011fd2:	2aff      	cmp	r2, #255	@ 0xff
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8011fd4:	bf15      	itete	ne
 8011fd6:	f04f 0c02 	movne.w	ip, #2
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8011fda:	f04f 0c00 	moveq.w	ip, #0
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8011fde:	e9c3 c20c 	strdne	ip, r2, [r3, #48]	@ 0x30
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8011fe2:	f8c3 c030 	streq.w	ip, [r3, #48]	@ 0x30
        if (blendingText)
 8011fe6:	b30d      	cbz	r5, 801202c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
            if (bitDepth == 16)
 8011fe8:	2910      	cmp	r1, #16
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8011fea:	ea4f 6c02 	mov.w	ip, r2, lsl #24
        return (uint16_t)color;
 8011fee:	6962      	ldr	r2, [r4, #20]
            if (bitDepth == 16)
 8011ff0:	d14f      	bne.n	8012092 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8011ff2:	f3c2 21c4 	ubfx	r1, r2, #11, #5
 8011ff6:	f04f 081f 	mov.w	r8, #31
 8011ffa:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8011ffe:	fbb1 fef8 	udiv	lr, r1, r8
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8012002:	ea02 0108 	and.w	r1, r2, r8
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8012006:	f3c2 1245 	ubfx	r2, r2, #5, #6
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801200a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801200e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8012012:	fbb1 f1f8 	udiv	r1, r1, r8
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8012016:	ea41 010c 	orr.w	r1, r1, ip
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801201a:	f04f 0c3f 	mov.w	ip, #63	@ 0x3f
 801201e:	fbb2 f2fc 	udiv	r2, r2, ip
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8012022:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8012026:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 801202a:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801202c:	2100      	movs	r1, #0
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801202e:	e9c3 7006 	strd	r7, r0, [r3, #24]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8012032:	481e      	ldr	r0, [pc, #120]	@ (80120ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 8012034:	f7fb fdfc 	bl	800dc30 <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8012038:	2101      	movs	r1, #1
 801203a:	481c      	ldr	r0, [pc, #112]	@ (80120ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 801203c:	f7fb fdf8 	bl	800dc30 <HAL_DMA2D_ConfigLayer>
    if (blendingImage || blendingText)
 8012040:	89a3      	ldrh	r3, [r4, #12]
 8012042:	89e2      	ldrh	r2, [r4, #14]
 8012044:	b906      	cbnz	r6, 8012048 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>
 8012046:	b33d      	cbz	r5, 8012098 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012048:	4818      	ldr	r0, [pc, #96]	@ (80120ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 801204a:	e9cd 3200 	strd	r3, r2, [sp]
 801204e:	68a3      	ldr	r3, [r4, #8]
 8012050:	6861      	ldr	r1, [r4, #4]
 8012052:	461a      	mov	r2, r3
 8012054:	f7fb fcb5 	bl	800d9c2 <HAL_DMA2D_BlendingStart_IT>
}
 8012058:	b003      	add	sp, #12
 801205a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801205e:	2601      	movs	r6, #1
 8012060:	e764      	b.n	8011f2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24>
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8012062:	2501      	movs	r5, #1
 8012064:	e766      	b.n	8011f34 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
 8012066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801206a:	f47f af79 	bne.w	8011f60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x58>
 801206e:	f04f 0c09 	mov.w	ip, #9
 8012072:	e005      	b.n	8012080 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x178>
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012074:	2810      	cmp	r0, #16
 8012076:	bf0c      	ite	eq
 8012078:	f04f 0c02 	moveq.w	ip, #2
 801207c:	f04f 0c01 	movne.w	ip, #1
    switch (blitOp.operation)
 8012080:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8012084:	e774      	b.n	8011f70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x68>
        dma2dColorMode = CM_A4;
 8012086:	f04f 0c0a 	mov.w	ip, #10
 801208a:	e7f9      	b.n	8012080 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x178>
        dma2dColorMode = CM_ARGB8888;
 801208c:	f04f 0c00 	mov.w	ip, #0
 8012090:	e7f6      	b.n	8012080 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x178>
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8012092:	ea42 020c 	orr.w	r2, r2, ip
 8012096:	e7c8      	b.n	801202a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x122>
        HAL_DMA2D_Start_IT(&hdma2d,
 8012098:	9200      	str	r2, [sp, #0]
 801209a:	4804      	ldr	r0, [pc, #16]	@ (80120ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 801209c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80120a0:	f7fb fc71 	bl	800d986 <HAL_DMA2D_Start_IT>
}
 80120a4:	e7d8      	b.n	8012058 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
 80120a6:	bf00      	nop
 80120a8:	20024e34 	.word	0x20024e34
 80120ac:	20022824 	.word	0x20022824

080120b0 <DMA2D_XferCpltCallback>:
        return instance;
 80120b0:	4b02      	ldr	r3, [pc, #8]	@ (80120bc <DMA2D_XferCpltCallback+0xc>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80120b6:	6803      	ldr	r3, [r0, #0]
 80120b8:	695b      	ldr	r3, [r3, #20]
 80120ba:	4718      	bx	r3
 80120bc:	20024e34 	.word	0x20024e34

080120c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
        return instance->lcdRef;
 80120c0:	4b3d      	ldr	r3, [pc, #244]	@ (80121b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf8>)
 80120c2:	681b      	ldr	r3, [r3, #0]
{
 80120c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120c6:	6898      	ldr	r0, [r3, #8]
 80120c8:	460d      	mov	r5, r1
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80120ca:	6803      	ldr	r3, [r0, #0]
 80120cc:	6a1b      	ldr	r3, [r3, #32]
 80120ce:	4798      	blx	r3
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80120d0:	2810      	cmp	r0, #16
 80120d2:	696b      	ldr	r3, [r5, #20]
 80120d4:	7e29      	ldrb	r1, [r5, #24]
 80120d6:	d15f      	bne.n	8012198 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80120d8:	f003 021f 	and.w	r2, r3, #31
 80120dc:	201f      	movs	r0, #31
 80120de:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80120e2:	fbb2 f2f0 	udiv	r2, r2, r0
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80120e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80120ea:	f3c3 21c4 	ubfx	r1, r3, #11, #5
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80120ee:	f3c3 1345 	ubfx	r3, r3, #5, #6
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80120f2:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80120f6:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80120fa:	fbb1 f1f0 	udiv	r1, r1, r0
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80120fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8012102:	213f      	movs	r1, #63	@ 0x3f
 8012104:	fbb3 f3f1 	udiv	r3, r3, r1
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012108:	2102      	movs	r1, #2
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801210a:	ea42 2403 	orr.w	r4, r2, r3, lsl #8
    switch (blitOp.operation)
 801210e:	682b      	ldr	r3, [r5, #0]
    hdma2d.Init.Mode = dma2dTransferMode;
 8012110:	482a      	ldr	r0, [pc, #168]	@ (80121bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>)
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8012112:	2b08      	cmp	r3, #8
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012114:	8a6e      	ldrh	r6, [r5, #18]
 8012116:	89ab      	ldrh	r3, [r5, #12]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8012118:	6802      	ldr	r2, [r0, #0]
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801211a:	bf18      	it	ne
 801211c:	f44f 3740 	movne.w	r7, #196608	@ 0x30000
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012120:	eba6 0603 	sub.w	r6, r6, r3
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8012124:	bf08      	it	eq
 8012126:	f44f 3700 	moveq.w	r7, #131072	@ 0x20000
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801212a:	6813      	ldr	r3, [r2, #0]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801212c:	60c6      	str	r6, [r0, #12]
    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801212e:	f5b7 3f00 	cmp.w	r7, #131072	@ 0x20000
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8012132:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8012136:	ea43 0307 	orr.w	r3, r3, r7
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801213a:	e9c0 7101 	strd	r7, r1, [r0, #4]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801213e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8012140:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8012142:	f023 0307 	bic.w	r3, r3, #7
 8012146:	ea43 0301 	orr.w	r3, r3, r1
 801214a:	6353      	str	r3, [r2, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801214c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801214e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8012152:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8012156:	ea43 0306 	orr.w	r3, r3, r6
 801215a:	6413      	str	r3, [r2, #64]	@ 0x40
    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801215c:	d120      	bne.n	80121a0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801215e:	2301      	movs	r3, #1
        hdma2d.LayerCfg[1].InputAlpha = color;
 8012160:	e9c0 340c 	strd	r3, r4, [r0, #48]	@ 0x30
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8012164:	2309      	movs	r3, #9
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012166:	e9c0 6106 	strd	r6, r1, [r0, #24]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801216a:	2100      	movs	r1, #0
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801216c:	62c3      	str	r3, [r0, #44]	@ 0x2c
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801216e:	f7fb fd5f 	bl	800dc30 <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8012172:	2101      	movs	r1, #1
 8012174:	4811      	ldr	r0, [pc, #68]	@ (80121bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>)
 8012176:	f7fb fd5b 	bl	800dc30 <HAL_DMA2D_ConfigLayer>
    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 801217a:	f5b7 3f00 	cmp.w	r7, #131072	@ 0x20000
 801217e:	89ab      	ldrh	r3, [r5, #12]
 8012180:	89ea      	ldrh	r2, [r5, #14]
 8012182:	d111      	bne.n	80121a8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012184:	68a9      	ldr	r1, [r5, #8]
 8012186:	480d      	ldr	r0, [pc, #52]	@ (80121bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>)
 8012188:	e9cd 3200 	strd	r3, r2, [sp]
 801218c:	460b      	mov	r3, r1
 801218e:	460a      	mov	r2, r1
 8012190:	f7fb fc17 	bl	800d9c2 <HAL_DMA2D_BlendingStart_IT>
}
 8012194:	b003      	add	sp, #12
 8012196:	bdf0      	pop	{r4, r5, r6, r7, pc}
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8012198:	ea43 6401 	orr.w	r4, r3, r1, lsl #24
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801219c:	2101      	movs	r1, #1
 801219e:	e7b6      	b.n	801210e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x4e>
        hdma2d.LayerCfg[1].InputOffset = 0;
 80121a0:	2300      	movs	r3, #0
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80121a2:	62c1      	str	r1, [r0, #44]	@ 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80121a4:	6283      	str	r3, [r0, #40]	@ 0x28
 80121a6:	e7e4      	b.n	8012172 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb2>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80121a8:	9200      	str	r2, [sp, #0]
 80121aa:	4621      	mov	r1, r4
 80121ac:	68aa      	ldr	r2, [r5, #8]
 80121ae:	4803      	ldr	r0, [pc, #12]	@ (80121bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>)
 80121b0:	f7fb fbe9 	bl	800d986 <HAL_DMA2D_Start_IT>
}
 80121b4:	e7ee      	b.n	8012194 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd4>
 80121b6:	bf00      	nop
 80121b8:	20024e34 	.word	0x20024e34
 80121bc:	20022824 	.word	0x20022824

080121c0 <_ZN10STM32F7DMAC1Ev>:
STM32F7DMA::STM32F7DMA()
 80121c0:	b570      	push	{r4, r5, r6, lr}
 80121c2:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80121c4:	4b0a      	ldr	r3, [pc, #40]	@ (80121f0 <_ZN10STM32F7DMAC1Ev+0x30>)
 80121c6:	300c      	adds	r0, #12
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80121c8:	2600      	movs	r6, #0
 80121ca:	4625      	mov	r5, r4
 80121cc:	2260      	movs	r2, #96	@ 0x60
 80121ce:	6060      	str	r0, [r4, #4]
 80121d0:	7226      	strb	r6, [r4, #8]
 80121d2:	7266      	strb	r6, [r4, #9]
 80121d4:	f845 3b20 	str.w	r3, [r5], #32
 80121d8:	4629      	mov	r1, r5
 80121da:	f002 fced 	bl	8014bb8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80121de:	f504 632a 	add.w	r3, r4, #2720	@ 0xaa0
    colortype() : color(0) {}
 80121e2:	616e      	str	r6, [r5, #20]
 80121e4:	351c      	adds	r5, #28
 80121e6:	429d      	cmp	r5, r3
 80121e8:	d1fb      	bne.n	80121e2 <_ZN10STM32F7DMAC1Ev+0x22>
{}
 80121ea:	4620      	mov	r0, r4
 80121ec:	bd70      	pop	{r4, r5, r6, pc}
 80121ee:	bf00      	nop
 80121f0:	080226e4 	.word	0x080226e4

080121f4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
        displayOrientationChangeRequested = true;
 80121f4:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80121f6:	f880 1064 	strb.w	r1, [r0, #100]	@ 0x64
        displayOrientationChangeRequested = true;
 80121fa:	f880 3065 	strb.w	r3, [r0, #101]	@ 0x65
    }
 80121fe:	4770      	bx	lr

08012200 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        return dma.getBlitCaps();
 8012200:	6840      	ldr	r0, [r0, #4]
 8012202:	6803      	ldr	r3, [r0, #0]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	4718      	bx	r3

08012208 <_ZN8touchgfx3HAL9sampleKeyERh>:
    }
 8012208:	2000      	movs	r0, #0
 801220a:	4770      	bx	lr

0801220c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 801220c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801220e:	b10b      	cbz	r3, 8012214 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8012210:	4608      	mov	r0, r1
 8012212:	4718      	bx	r3
        }
    }
 8012214:	4770      	bx	lr
	...

08012218 <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8012218:	4b01      	ldr	r3, [pc, #4]	@ (8012220 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x8>)
 801221a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 801221e:	4770      	bx	lr
 8012220:	40016800 	.word	0x40016800

08012224 <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8012224:	4b02      	ldr	r3, [pc, #8]	@ (8012230 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8012226:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8012228:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801222c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801222e:	4770      	bx	lr
 8012230:	40016800 	.word	0x40016800

08012234 <_ZN10STM32F7HAL17getTFTCurrentLineEv>:
{
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8012234:	4b06      	ldr	r3, [pc, #24]	@ (8012250 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x1c>)
 8012236:	6c58      	ldr	r0, [r3, #68]	@ 0x44
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8012238:	68db      	ldr	r3, [r3, #12]
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801223a:	b280      	uxth	r0, r0
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801223c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012240:	3301      	adds	r3, #1

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8012242:	4298      	cmp	r0, r3
    {
        return 0;
    }
    else
    {
        return curr - backPorchY;
 8012244:	bf26      	itte	cs
 8012246:	1ac0      	subcs	r0, r0, r3
 8012248:	b280      	uxthcs	r0, r0
        return 0;
 801224a:	2000      	movcc	r0, #0
    }
}
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	40016800 	.word	0x40016800

08012254 <_ZN10STM32F7HAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012254:	4b03      	ldr	r3, [pc, #12]	@ (8012264 <_ZN10STM32F7HAL19configureInterruptsEv+0x10>)
 8012256:	2290      	movs	r2, #144	@ 0x90
 8012258:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 801225c:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358
void STM32F7HAL::configureInterrupts()
{
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8012260:	4770      	bx	lr
 8012262:	bf00      	nop
 8012264:	e000e100 	.word	0xe000e100

08012268 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 8012268:	4770      	bx	lr
	...

0801226c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F7HAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801226c:	4b0b      	ldr	r3, [pc, #44]	@ (801229c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x30>)
 801226e:	4a0c      	ldr	r2, [pc, #48]	@ (80122a0 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x34>)
 8012270:	68d9      	ldr	r1, [r3, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8012272:	691b      	ldr	r3, [r3, #16]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8012274:	f3c1 010a 	ubfx	r1, r1, #0, #11
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8012278:	f3c3 030a 	ubfx	r3, r3, #0, #11
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801227c:	3901      	subs	r1, #1
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801227e:	3b01      	subs	r3, #1
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8012280:	b289      	uxth	r1, r1
{
 8012282:	b510      	push	{r4, lr}

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8012284:	4c07      	ldr	r4, [pc, #28]	@ (80122a4 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x38>)
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8012286:	8053      	strh	r3, [r2, #2]
    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8012288:	4620      	mov	r0, r4
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801228a:	8011      	strh	r1, [r2, #0]
    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 801228c:	f7fc fac8 	bl	800e820 <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 8012290:	6822      	ldr	r2, [r4, #0]
 8012292:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8012294:	f043 0303 	orr.w	r3, r3, #3
 8012298:	6353      	str	r3, [r2, #52]	@ 0x34
}
 801229a:	bd10      	pop	{r4, pc}
 801229c:	40016800 	.word	0x40016800
 80122a0:	20022866 	.word	0x20022866
 80122a4:	20021cc4 	.word	0x20021cc4

080122a8 <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:
{
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 80122a8:	f001 bf8e 	b.w	80141c8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080122ac <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80122ac:	b510      	push	{r4, lr}
 80122ae:	4604      	mov	r4, r0
        swapFrameBuffers();
 80122b0:	f002 fb38 	bl	8014924 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80122b4:	6823      	ldr	r3, [r4, #0]
 80122b6:	4620      	mov	r0, r4
 80122b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
    }
 80122bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80122c0:	4718      	bx	r3

080122c2 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80122c2:	f001 bf7b 	b.w	80141bc <_ZN8touchgfx3HAL16flushFrameBufferEv>

080122c6 <_ZN10STM32F7HALD0Ev>:
class STM32F7HAL : public touchgfx::HAL
 80122c6:	b510      	push	{r4, lr}
 80122c8:	4604      	mov	r4, r0
 80122ca:	2168      	movs	r1, #104	@ 0x68
 80122cc:	f00c fc2b 	bl	801eb26 <_ZdlPvj>
 80122d0:	4620      	mov	r0, r4
 80122d2:	bd10      	pop	{r4, pc}

080122d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80122d4:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
        {
            if (DISPLAY_ROTATION == rotate0)
 80122d8:	4b11      	ldr	r3, [pc, #68]	@ (8012320 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x4c>)
    virtual void performDisplayOrientationChange()
 80122da:	b530      	push	{r4, r5, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80122dc:	f890 4064 	ldrb.w	r4, [r0, #100]	@ 0x64
            if (DISPLAY_ROTATION == rotate0)
 80122e0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80122e2:	428c      	cmp	r4, r1
 80122e4:	d00d      	beq.n	8012302 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            if (DISPLAY_ROTATION == rotate0)
 80122e6:	b95a      	cbnz	r2, 8012300 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2c>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80122e8:	4a0e      	ldr	r2, [pc, #56]	@ (8012324 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x50>)
 80122ea:	490f      	ldr	r1, [pc, #60]	@ (8012328 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x54>)
 80122ec:	8814      	ldrh	r4, [r2, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80122ee:	480f      	ldr	r0, [pc, #60]	@ (801232c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80122f0:	800c      	strh	r4, [r1, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80122f2:	8801      	ldrh	r1, [r0, #0]
 80122f4:	4d0e      	ldr	r5, [pc, #56]	@ (8012330 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80122f6:	8011      	strh	r1, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80122f8:	2201      	movs	r2, #1
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80122fa:	8029      	strh	r1, [r5, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80122fc:	8004      	strh	r4, [r0, #0]
        {
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
 80122fe:	701a      	strb	r2, [r3, #0]
        }
    }
 8012300:	bd30      	pop	{r4, r5, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8012302:	2a00      	cmp	r2, #0
 8012304:	d0fc      	beq.n	8012300 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2c>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8012306:	4809      	ldr	r0, [pc, #36]	@ (801232c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8012308:	4a07      	ldr	r2, [pc, #28]	@ (8012328 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x54>)
 801230a:	8801      	ldrh	r1, [r0, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 801230c:	4d08      	ldr	r5, [pc, #32]	@ (8012330 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801230e:	8011      	strh	r1, [r2, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8012310:	4a04      	ldr	r2, [pc, #16]	@ (8012324 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x50>)
 8012312:	8814      	ldrh	r4, [r2, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8012314:	8011      	strh	r1, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8012316:	2200      	movs	r2, #0
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8012318:	802c      	strh	r4, [r5, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801231a:	8004      	strh	r4, [r0, #0]
            DISPLAY_ROTATION = rotate0;
 801231c:	e7ef      	b.n	80122fe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2a>
 801231e:	bf00      	nop
 8012320:	20024e2c 	.word	0x20024e2c
 8012324:	20024e28 	.word	0x20024e28
 8012328:	20024e2e 	.word	0x20024e2e
 801232c:	20024e2a 	.word	0x20024e2a
 8012330:	20024e30 	.word	0x20024e30

08012334 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8012334:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8012336:	b931      	cbnz	r1, 8012346 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 8012338:	4b0a      	ldr	r3, [pc, #40]	@ (8012364 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 801233a:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 801233e:	4a0a      	ldr	r2, [pc, #40]	@ (8012368 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8012340:	480a      	ldr	r0, [pc, #40]	@ (801236c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8012342:	f00d fd17 	bl	801fd74 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012346:	e9c0 120e 	strd	r1, r2, [r0, #56]	@ 0x38
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801234a:	3a00      	subs	r2, #0
 801234c:	4908      	ldr	r1, [pc, #32]	@ (8012370 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801234e:	6403      	str	r3, [r0, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8012350:	bf18      	it	ne
 8012352:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012354:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8012356:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012358:	bf18      	it	ne
 801235a:	2301      	movne	r3, #1
 801235c:	4a05      	ldr	r2, [pc, #20]	@ (8012374 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 801235e:	7013      	strb	r3, [r2, #0]
    }
 8012360:	bd08      	pop	{r3, pc}
 8012362:	bf00      	nop
 8012364:	08024be8 	.word	0x08024be8
 8012368:	08024c20 	.word	0x08024c20
 801236c:	08024c6e 	.word	0x08024c6e
 8012370:	20024e32 	.word	0x20024e32
 8012374:	20024e33 	.word	0x20024e33

08012378 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
        switch (depth)
 8012378:	2a02      	cmp	r2, #2
 801237a:	f8df c090 	ldr.w	ip, [pc, #144]	@ 801240c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x94>
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 801237e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012380:	4615      	mov	r5, r2
 8012382:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8012386:	4f1b      	ldr	r7, [pc, #108]	@ (80123f4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x7c>)
        switch (depth)
 8012388:	d808      	bhi.n	801239c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x24>
 801238a:	b19a      	cbz	r2, 80123b4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x3c>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 801238c:	f8bc 2000 	ldrh.w	r2, [ip]
 8012390:	883c      	ldrh	r4, [r7, #0]
 8012392:	436a      	muls	r2, r5
 8012394:	3207      	adds	r2, #7
 8012396:	10d2      	asrs	r2, r2, #3
 8012398:	4362      	muls	r2, r4
            break;
 801239a:	e019      	b.n	80123d0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x58>
        switch (depth)
 801239c:	3a04      	subs	r2, #4
 801239e:	b292      	uxth	r2, r2
 80123a0:	2a1c      	cmp	r2, #28
 80123a2:	d807      	bhi.n	80123b4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x3c>
 80123a4:	2401      	movs	r4, #1
 80123a6:	fa04 f202 	lsl.w	r2, r4, r2
 80123aa:	f012 3f10 	tst.w	r2, #269488144	@ 0x10101010
 80123ae:	d108      	bne.n	80123c2 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x4a>
 80123b0:	07d2      	lsls	r2, r2, #31
 80123b2:	d4eb      	bmi.n	801238c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x14>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 80123b4:	4b10      	ldr	r3, [pc, #64]	@ (80123f8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x80>)
 80123b6:	f44f 7139 	mov.w	r1, #740	@ 0x2e4
 80123ba:	4a10      	ldr	r2, [pc, #64]	@ (80123fc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x84>)
 80123bc:	4810      	ldr	r0, [pc, #64]	@ (8012400 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x88>)
 80123be:	f00d fcd9 	bl	801fd74 <__assert_func>
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 80123c2:	883a      	ldrh	r2, [r7, #0]
 80123c4:	08ed      	lsrs	r5, r5, #3
 80123c6:	f8bc 4000 	ldrh.w	r4, [ip]
 80123ca:	4354      	muls	r4, r2
 80123cc:	fb05 f204 	mul.w	r2, r5, r4
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 80123d0:	6381      	str	r1, [r0, #56]	@ 0x38
        if (useDoubleBuffering)
 80123d2:	b153      	cbz	r3, 80123ea <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x72>
            buffer += bufferSizeInBytes;
 80123d4:	4411      	add	r1, r2
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 80123d6:	460c      	mov	r4, r1
 80123d8:	63c4      	str	r4, [r0, #60]	@ 0x3c
        if (useAnimationStorage)
 80123da:	b146      	cbz	r6, 80123ee <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x76>
            buffer += bufferSizeInBytes;
 80123dc:	4411      	add	r1, r2
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 80123de:	4a09      	ldr	r2, [pc, #36]	@ (8012404 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x8c>)
 80123e0:	6401      	str	r1, [r0, #64]	@ 0x40
 80123e2:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 80123e4:	4b08      	ldr	r3, [pc, #32]	@ (8012408 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>)
 80123e6:	701e      	strb	r6, [r3, #0]
    }
 80123e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            frameBuffer1 = 0;
 80123ea:	461c      	mov	r4, r3
 80123ec:	e7f4      	b.n	80123d8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x60>
            frameBuffer2 = 0;
 80123ee:	4631      	mov	r1, r6
 80123f0:	e7f5      	b.n	80123de <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x66>
 80123f2:	bf00      	nop
 80123f4:	20024e2a 	.word	0x20024e2a
 80123f8:	08024cbf 	.word	0x08024cbf
 80123fc:	08024cdc 	.word	0x08024cdc
 8012400:	08024c6e 	.word	0x08024c6e
 8012404:	20024e32 	.word	0x20024e32
 8012408:	20024e33 	.word	0x20024e33
 801240c:	20024e28 	.word	0x20024e28

08012410 <_ZN10STM32F7HAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012410:	4b05      	ldr	r3, [pc, #20]	@ (8012428 <_ZN10STM32F7HAL16enableInterruptsEv+0x18>)
 8012412:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012416:	609a      	str	r2, [r3, #8]
 8012418:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 801241c:	609a      	str	r2, [r3, #8]
 801241e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8012422:	609a      	str	r2, [r3, #8]
}
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	e000e100 	.word	0xe000e100

0801242c <_ZN10STM32F7HAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801242c:	4b0c      	ldr	r3, [pc, #48]	@ (8012460 <_ZN10STM32F7HAL17disableInterruptsEv+0x34>)
 801242e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8012436:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801243a:	f3bf 8f6f 	isb	sy
 801243e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8012442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8012446:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801244a:	f3bf 8f6f 	isb	sy
 801244e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8012452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8012456:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801245a:	f3bf 8f6f 	isb	sy
}
 801245e:	4770      	bx	lr
 8012460:	e000e100 	.word	0xe000e100

08012464 <HAL_LTDC_LineEventCallback>:
}

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
    if (LTDC->LIPCR == lcd_int_active_line)
 8012464:	4b12      	ldr	r3, [pc, #72]	@ (80124b0 <HAL_LTDC_LineEventCallback+0x4c>)
 8012466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012468:	4b12      	ldr	r3, [pc, #72]	@ (80124b4 <HAL_LTDC_LineEventCallback+0x50>)
 801246a:	8819      	ldrh	r1, [r3, #0]
 801246c:	428a      	cmp	r2, r1
{
 801246e:	b510      	push	{r4, lr}
 8012470:	4c11      	ldr	r4, [pc, #68]	@ (80124b8 <HAL_LTDC_LineEventCallback+0x54>)
    if (LTDC->LIPCR == lcd_int_active_line)
 8012472:	d112      	bne.n	801249a <HAL_LTDC_LineEventCallback+0x36>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8012474:	8859      	ldrh	r1, [r3, #2]
 8012476:	f7fc f9d3 	bl	800e820 <HAL_LTDC_ProgramLineEvent>
        return instance;
 801247a:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 801247c:	f892 3056 	ldrb.w	r3, [r2, #86]	@ 0x56
 8012480:	3301      	adds	r3, #1
 8012482:	f882 3056 	strb.w	r3, [r2, #86]	@ 0x56
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8012486:	f7ff f8a9 	bl	80115dc <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 801248a:	6820      	ldr	r0, [r4, #0]
 801248c:	f002 fa4a 	bl	8014924 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 8012490:	2000      	movs	r0, #0
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 8012492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        GPIO::set(GPIO::VSYNC_FREQ);
 8012496:	f7ff bc9f 	b.w	8011dd8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801249a:	f7fc f9c1 	bl	800e820 <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 801249e:	2000      	movs	r0, #0
 80124a0:	f7ff fca4 	bl	8011dec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 80124a4:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80124a6:	6803      	ldr	r3, [r0, #0]
}
 80124a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124ac:	699b      	ldr	r3, [r3, #24]
 80124ae:	4718      	bx	r3
 80124b0:	40016800 	.word	0x40016800
 80124b4:	20022866 	.word	0x20022866
 80124b8:	20024e34 	.word	0x20024e34

080124bc <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80124bc:	6840      	ldr	r0, [r0, #4]
    }
 80124be:	4770      	bx	lr

080124c0 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80124c0:	6041      	str	r1, [r0, #4]
    }
 80124c2:	4770      	bx	lr

080124c4 <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:
}

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80124c4:	1a52      	subs	r2, r2, r1
 80124c6:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 80124ca:	fbb2 f0f3 	udiv	r0, r2, r3
 80124ce:	4770      	bx	lr

080124d0 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80124d0:	4b02      	ldr	r3, [pc, #8]	@ (80124dc <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0xc>)
 80124d2:	68c0      	ldr	r0, [r0, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80124d8:	4358      	muls	r0, r3
 80124da:	4770      	bx	lr
 80124dc:	2002286c 	.word	0x2002286c

080124e0 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 80124e0:	4770      	bx	lr
	...

080124e4 <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
    __TIM2_CLK_ENABLE();
 80124e4:	4b19      	ldr	r3, [pc, #100]	@ (801254c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x68>)
    tim.Init.Period = 0xFFFFFFFF;
 80124e6:	f04f 31ff 	mov.w	r1, #4294967295
    __TIM2_CLK_ENABLE();
 80124ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80124ec:	f042 0201 	orr.w	r2, r2, #1
{
 80124f0:	b530      	push	{r4, r5, lr}
    __TIM2_CLK_ENABLE();
 80124f2:	641a      	str	r2, [r3, #64]	@ 0x40
{
 80124f4:	b089      	sub	sp, #36	@ 0x24
    __TIM2_CLK_ENABLE();
 80124f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    tim.Instance = TIM2;
 80124f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
{
 80124fc:	4605      	mov	r5, r0
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80124fe:	a803      	add	r0, sp, #12
    __TIM2_CLK_ENABLE();
 8012500:	f003 0301 	and.w	r3, r3, #1
 8012504:	9302      	str	r3, [sp, #8]
 8012506:	9b02      	ldr	r3, [sp, #8]
    tim.Instance = TIM2;
 8012508:	4b11      	ldr	r3, [pc, #68]	@ (8012550 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x6c>)
 801250a:	601a      	str	r2, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801250c:	2200      	movs	r2, #0
    tim.Init.Period = 0xFFFFFFFF;
 801250e:	60d9      	str	r1, [r3, #12]
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012510:	a901      	add	r1, sp, #4
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012512:	611a      	str	r2, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012514:	609a      	str	r2, [r3, #8]
    tim.Init.Prescaler = 0;
 8012516:	605a      	str	r2, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8012518:	2201      	movs	r2, #1
 801251a:	615a      	str	r2, [r3, #20]
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801251c:	f7fc ff9c 	bl	800f458 <HAL_RCC_GetClockConfig>
    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8012520:	9b06      	ldr	r3, [sp, #24]
 8012522:	b97b      	cbnz	r3, 8012544 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x60>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 8012524:	f7fc ff88 	bl	800f438 <HAL_RCC_GetPCLK1Freq>
 8012528:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 801252a:	f7fc ff7f 	bl	800f42c <HAL_RCC_GetHCLKFreq>
 801252e:	fbb0 f0f4 	udiv	r0, r0, r4
 8012532:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8012534:	4806      	ldr	r0, [pc, #24]	@ (8012550 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x6c>)
 8012536:	f7fd fc23 	bl	800fd80 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 801253a:	4805      	ldr	r0, [pc, #20]	@ (8012550 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x6c>)
 801253c:	f7fd fa8e 	bl	800fa5c <HAL_TIM_Base_Start>
}
 8012540:	b009      	add	sp, #36	@ 0x24
 8012542:	bd30      	pop	{r4, r5, pc}
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8012544:	f7fc ff78 	bl	800f438 <HAL_RCC_GetPCLK1Freq>
 8012548:	0044      	lsls	r4, r0, #1
 801254a:	e7ee      	b.n	801252a <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x46>
 801254c:	40023800 	.word	0x40023800
 8012550:	2002286c 	.word	0x2002286c

08012554 <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 8012554:	b510      	push	{r4, lr}
 8012556:	4604      	mov	r4, r0
 8012558:	2110      	movs	r1, #16
 801255a:	f00c fae4 	bl	801eb26 <_ZdlPvj>
 801255e:	4620      	mov	r0, r4
 8012560:	bd10      	pop	{r4, pc}

08012562 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 8012562:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8012564:	6803      	ldr	r3, [r0, #0]
{
 8012566:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8012568:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 801256a:	b131      	cbz	r1, 801257a <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 801256c:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 801256e:	4798      	blx	r3
 8012570:	6863      	ldr	r3, [r4, #4]
 8012572:	1b5b      	subs	r3, r3, r5
 8012574:	4403      	add	r3, r0
 8012576:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8012578:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 801257a:	4798      	blx	r3
 801257c:	60a0      	str	r0, [r4, #8]
}
 801257e:	e7fb      	b.n	8012578 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x16>

08012580 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012580:	8880      	ldrh	r0, [r0, #4]
 8012582:	4770      	bx	lr

08012584 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012584:	2300      	movs	r3, #0
 8012586:	8083      	strh	r3, [r0, #4]
 8012588:	4770      	bx	lr
	...

0801258c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801258e:	6803      	ldr	r3, [r0, #0]
 8012590:	460e      	mov	r6, r1
 8012592:	2100      	movs	r1, #0
 8012594:	4604      	mov	r4, r0
 8012596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012598:	4798      	blx	r3
 801259a:	4605      	mov	r5, r0
 801259c:	6823      	ldr	r3, [r4, #0]
 801259e:	4620      	mov	r0, r4
 80125a0:	1b75      	subs	r5, r6, r5
 80125a2:	6a1b      	ldr	r3, [r3, #32]
 80125a4:	b2ad      	uxth	r5, r5
 80125a6:	4798      	blx	r3
 80125a8:	88a3      	ldrh	r3, [r4, #4]
 80125aa:	fbb5 f0f0 	udiv	r0, r5, r0
 80125ae:	4298      	cmp	r0, r3
 80125b0:	b285      	uxth	r5, r0
 80125b2:	db05      	blt.n	80125c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 80125b4:	4b0e      	ldr	r3, [pc, #56]	@ (80125f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80125b6:	211e      	movs	r1, #30
 80125b8:	4a0e      	ldr	r2, [pc, #56]	@ (80125f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80125ba:	480f      	ldr	r0, [pc, #60]	@ (80125f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80125bc:	f00d fbda 	bl	801fd74 <__assert_func>
 80125c0:	6823      	ldr	r3, [r4, #0]
 80125c2:	2100      	movs	r1, #0
 80125c4:	4620      	mov	r0, r4
 80125c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125c8:	4798      	blx	r3
 80125ca:	4607      	mov	r7, r0
 80125cc:	6823      	ldr	r3, [r4, #0]
 80125ce:	4620      	mov	r0, r4
 80125d0:	1bf6      	subs	r6, r6, r7
 80125d2:	6a1b      	ldr	r3, [r3, #32]
 80125d4:	b2b6      	uxth	r6, r6
 80125d6:	4798      	blx	r3
 80125d8:	fbb6 f3f0 	udiv	r3, r6, r0
 80125dc:	fb03 6610 	mls	r6, r3, r0, r6
 80125e0:	b11e      	cbz	r6, 80125ea <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 80125e2:	4b06      	ldr	r3, [pc, #24]	@ (80125fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 80125e4:	211f      	movs	r1, #31
 80125e6:	4a03      	ldr	r2, [pc, #12]	@ (80125f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80125e8:	e7e7      	b.n	80125ba <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 80125ea:	4628      	mov	r0, r5
 80125ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125ee:	bf00      	nop
 80125f0:	08024d30 	.word	0x08024d30
 80125f4:	08024e9e 	.word	0x08024e9e
 80125f8:	08024d45 	.word	0x08024d45
 80125fc:	08024d73 	.word	0x08024d73

08012600 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012600:	b538      	push	{r3, r4, r5, lr}
 8012602:	6803      	ldr	r3, [r0, #0]
 8012604:	460d      	mov	r5, r1
 8012606:	4604      	mov	r4, r0
 8012608:	6a1b      	ldr	r3, [r3, #32]
 801260a:	4798      	blx	r3
 801260c:	4285      	cmp	r5, r0
 801260e:	d905      	bls.n	801261c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8012610:	4b0c      	ldr	r3, [pc, #48]	@ (8012644 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8012612:	212f      	movs	r1, #47	@ 0x2f
 8012614:	4a0c      	ldr	r2, [pc, #48]	@ (8012648 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012616:	480d      	ldr	r0, [pc, #52]	@ (801264c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8012618:	f00d fbac 	bl	801fd74 <__assert_func>
 801261c:	6823      	ldr	r3, [r4, #0]
 801261e:	4620      	mov	r0, r4
 8012620:	88a5      	ldrh	r5, [r4, #4]
 8012622:	69db      	ldr	r3, [r3, #28]
 8012624:	4798      	blx	r3
 8012626:	4285      	cmp	r5, r0
 8012628:	db03      	blt.n	8012632 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801262a:	4b09      	ldr	r3, [pc, #36]	@ (8012650 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801262c:	2130      	movs	r1, #48	@ 0x30
 801262e:	4a06      	ldr	r2, [pc, #24]	@ (8012648 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012630:	e7f1      	b.n	8012616 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8012632:	6823      	ldr	r3, [r4, #0]
 8012634:	4620      	mov	r0, r4
 8012636:	88a1      	ldrh	r1, [r4, #4]
 8012638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801263a:	4798      	blx	r3
 801263c:	88a3      	ldrh	r3, [r4, #4]
 801263e:	3301      	adds	r3, #1
 8012640:	80a3      	strh	r3, [r4, #4]
 8012642:	bd38      	pop	{r3, r4, r5, pc}
 8012644:	08024ded 	.word	0x08024ded
 8012648:	08024ee1 	.word	0x08024ee1
 801264c:	08024d45 	.word	0x08024d45
 8012650:	08024e04 	.word	0x08024e04

08012654 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012654:	b570      	push	{r4, r5, r6, lr}
 8012656:	6803      	ldr	r3, [r0, #0]
 8012658:	4616      	mov	r6, r2
 801265a:	4604      	mov	r4, r0
 801265c:	460d      	mov	r5, r1
 801265e:	6a1b      	ldr	r3, [r3, #32]
 8012660:	4798      	blx	r3
 8012662:	4286      	cmp	r6, r0
 8012664:	d905      	bls.n	8012672 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8012666:	4b06      	ldr	r3, [pc, #24]	@ (8012680 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8012668:	2139      	movs	r1, #57	@ 0x39
 801266a:	4a06      	ldr	r2, [pc, #24]	@ (8012684 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801266c:	4806      	ldr	r0, [pc, #24]	@ (8012688 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801266e:	f00d fb81 	bl	801fd74 <__assert_func>
 8012672:	6823      	ldr	r3, [r4, #0]
 8012674:	4629      	mov	r1, r5
 8012676:	4620      	mov	r0, r4
 8012678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801267a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801267e:	4718      	bx	r3
 8012680:	08024ded 	.word	0x08024ded
 8012684:	08024e54 	.word	0x08024e54
 8012688:	08024d45 	.word	0x08024d45

0801268c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801268c:	4770      	bx	lr
	...

08012690 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012690:	4a02      	ldr	r2, [pc, #8]	@ (801269c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012692:	6002      	str	r2, [r0, #0]
 8012694:	2200      	movs	r2, #0
 8012696:	8082      	strh	r2, [r0, #4]
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	08024e28 	.word	0x08024e28

080126a0 <_ZNK8touchgfx18ZoomAnimationImage7getTypeEv>:
 80126a0:	2015      	movs	r0, #21
 80126a2:	4770      	bx	lr

080126a4 <_ZN8touchgfx18ZoomAnimationImage11setPositionEssss>:
 80126a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80126a8:	461f      	mov	r7, r3
 80126aa:	6803      	ldr	r3, [r0, #0]
 80126ac:	4604      	mov	r4, r0
 80126ae:	460d      	mov	r5, r1
 80126b0:	4616      	mov	r6, r2
 80126b2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80126b6:	695b      	ldr	r3, [r3, #20]
 80126b8:	4798      	blx	r3
 80126ba:	463b      	mov	r3, r7
 80126bc:	4620      	mov	r0, r4
 80126be:	f8cd 8000 	str.w	r8, [sp]
 80126c2:	4632      	mov	r2, r6
 80126c4:	4629      	mov	r1, r5
 80126c6:	f7ee fb73 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80126ca:	6823      	ldr	r3, [r4, #0]
 80126cc:	4620      	mov	r0, r4
 80126ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80126d2:	b002      	add	sp, #8
 80126d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126d8:	4718      	bx	r3

080126da <_ZN8touchgfx18ZoomAnimationImage8setWidthEs>:
 80126da:	6802      	ldr	r2, [r0, #0]
 80126dc:	b410      	push	{r4}
 80126de:	f8d2 4088 	ldr.w	r4, [r2, #136]	@ 0x88
 80126e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80126e6:	4623      	mov	r3, r4
 80126e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126ec:	4718      	bx	r3

080126ee <_ZN8touchgfx18ZoomAnimationImage9setHeightEs>:
 80126ee:	6802      	ldr	r2, [r0, #0]
 80126f0:	b410      	push	{r4}
 80126f2:	f8d2 4088 	ldr.w	r4, [r2, #136]	@ 0x88
 80126f6:	460a      	mov	r2, r1
 80126f8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80126fc:	4623      	mov	r3, r4
 80126fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012702:	4718      	bx	r3

08012704 <_ZN8touchgfx18ZoomAnimationImage12setDimensionEss>:
 8012704:	b570      	push	{r4, r5, r6, lr}
 8012706:	6803      	ldr	r3, [r0, #0]
 8012708:	4604      	mov	r4, r0
 801270a:	460e      	mov	r6, r1
 801270c:	4615      	mov	r5, r2
 801270e:	695b      	ldr	r3, [r3, #20]
 8012710:	4798      	blx	r3
 8012712:	6823      	ldr	r3, [r4, #0]
 8012714:	8126      	strh	r6, [r4, #8]
 8012716:	4620      	mov	r0, r4
 8012718:	8165      	strh	r5, [r4, #10]
 801271a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801271e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012722:	4718      	bx	r3

08012724 <_ZN8touchgfx18ZoomAnimationImage8setAlphaEh>:
 8012724:	f880 1064 	strb.w	r1, [r0, #100]	@ 0x64
 8012728:	f880 1092 	strb.w	r1, [r0, #146]	@ 0x92
 801272c:	4770      	bx	lr

0801272e <_ZNK8touchgfx18ZoomAnimationImage8getAlphaEv>:
 801272e:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8012732:	4770      	bx	lr

08012734 <_ZN8touchgfx18ZoomAnimationImage17setAnimationDelayEt>:
 8012734:	8681      	strh	r1, [r0, #52]	@ 0x34
 8012736:	4770      	bx	lr

08012738 <_ZNK8touchgfx18ZoomAnimationImage17getAnimationDelayEv>:
 8012738:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 801273a:	4770      	bx	lr

0801273c <_ZNK8touchgfx18ZoomAnimationImage9isRunningEv>:
 801273c:	6803      	ldr	r3, [r0, #0]
 801273e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012742:	4718      	bx	r3

08012744 <_ZNK8touchgfx18ZoomAnimationImage22isZoomAnimationRunningEv>:
 8012744:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012748:	3802      	subs	r0, #2
 801274a:	bf18      	it	ne
 801274c:	2001      	movne	r0, #1
 801274e:	4770      	bx	lr

08012750 <_ZN8touchgfx18ZoomAnimationImage15setCurrentStateENS0_6StatesE>:
 8012750:	2300      	movs	r3, #0
 8012752:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8012756:	6303      	str	r3, [r0, #48]	@ 0x30
 8012758:	4770      	bx	lr

0801275a <_ZN8touchgfx18ZoomAnimationImage26updateZoomAnimationDeltaXYEv>:
 801275a:	f8b0 209a 	ldrh.w	r2, [r0, #154]	@ 0x9a
 801275e:	f8b0 3096 	ldrh.w	r3, [r0, #150]	@ 0x96
 8012762:	f8b0 109c 	ldrh.w	r1, [r0, #156]	@ 0x9c
 8012766:	1a9b      	subs	r3, r3, r2
 8012768:	f8b0 2098 	ldrh.w	r2, [r0, #152]	@ 0x98
 801276c:	1a52      	subs	r2, r2, r1
 801276e:	b21b      	sxth	r3, r3
 8012770:	f890 1094 	ldrb.w	r1, [r0, #148]	@ 0x94
 8012774:	b212      	sxth	r2, r2
 8012776:	f8a0 30a2 	strh.w	r3, [r0, #162]	@ 0xa2
 801277a:	b500      	push	{lr}
 801277c:	f8a0 20a4 	strh.w	r2, [r0, #164]	@ 0xa4
 8012780:	2907      	cmp	r1, #7
 8012782:	d80e      	bhi.n	80127a2 <_ZN8touchgfx18ZoomAnimationImage26updateZoomAnimationDeltaXYEv+0x48>
 8012784:	e8df f001 	tbb	[pc, r1]
 8012788:	16120f04 	.word	0x16120f04
 801278c:	291b231d 	.word	0x291b231d
 8012790:	2102      	movs	r1, #2
 8012792:	fb93 f3f1 	sdiv	r3, r3, r1
 8012796:	fb92 f2f1 	sdiv	r2, r2, r1
 801279a:	f8a0 30a2 	strh.w	r3, [r0, #162]	@ 0xa2
 801279e:	f8a0 20a4 	strh.w	r2, [r0, #164]	@ 0xa4
 80127a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80127a6:	2300      	movs	r3, #0
 80127a8:	f8a0 30a2 	strh.w	r3, [r0, #162]	@ 0xa2
 80127ac:	2302      	movs	r3, #2
 80127ae:	fb92 f2f3 	sdiv	r2, r2, r3
 80127b2:	e7f4      	b.n	801279e <_ZN8touchgfx18ZoomAnimationImage26updateZoomAnimationDeltaXYEv+0x44>
 80127b4:	2202      	movs	r2, #2
 80127b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80127ba:	f8a0 30a2 	strh.w	r3, [r0, #162]	@ 0xa2
 80127be:	2300      	movs	r3, #0
 80127c0:	e008      	b.n	80127d4 <_ZN8touchgfx18ZoomAnimationImage26updateZoomAnimationDeltaXYEv+0x7a>
 80127c2:	2202      	movs	r2, #2
 80127c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80127c8:	f8a0 30a2 	strh.w	r3, [r0, #162]	@ 0xa2
 80127cc:	e7e9      	b.n	80127a2 <_ZN8touchgfx18ZoomAnimationImage26updateZoomAnimationDeltaXYEv+0x48>
 80127ce:	2300      	movs	r3, #0
 80127d0:	f8a0 30a2 	strh.w	r3, [r0, #162]	@ 0xa2
 80127d4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80127d8:	e7e3      	b.n	80127a2 <_ZN8touchgfx18ZoomAnimationImage26updateZoomAnimationDeltaXYEv+0x48>
 80127da:	2300      	movs	r3, #0
 80127dc:	e7f4      	b.n	80127c8 <_ZN8touchgfx18ZoomAnimationImage26updateZoomAnimationDeltaXYEv+0x6e>

080127de <_ZN8touchgfx18ZoomAnimationImage21updateRenderingMethodEv>:
 80127de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e0:	f100 0736 	add.w	r7, r0, #54	@ 0x36
 80127e4:	4604      	mov	r4, r0
 80127e6:	4638      	mov	r0, r7
 80127e8:	f104 053c 	add.w	r5, r4, #60	@ 0x3c
 80127ec:	f00a f86e 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80127f0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80127f4:	f104 0668 	add.w	r6, r4, #104	@ 0x68
 80127f8:	4298      	cmp	r0, r3
 80127fa:	d118      	bne.n	801282e <_ZN8touchgfx18ZoomAnimationImage21updateRenderingMethodEv+0x50>
 80127fc:	4638      	mov	r0, r7
 80127fe:	f00a f89d 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012802:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012806:	4298      	cmp	r0, r3
 8012808:	d111      	bne.n	801282e <_ZN8touchgfx18ZoomAnimationImage21updateRenderingMethodEv+0x50>
 801280a:	2301      	movs	r3, #1
 801280c:	4628      	mov	r0, r5
 801280e:	4639      	mov	r1, r7
 8012810:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8012814:	2300      	movs	r3, #0
 8012816:	f884 308d 	strb.w	r3, [r4, #141]	@ 0x8d
 801281a:	f004 fd98 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801281e:	4628      	mov	r0, r5
 8012820:	f007 fdb3 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8012824:	4630      	mov	r0, r6
 8012826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801282a:	f007 bdae 	b.w	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 801282e:	f104 0738 	add.w	r7, r4, #56	@ 0x38
 8012832:	4638      	mov	r0, r7
 8012834:	f00a f84a 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012838:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801283c:	4298      	cmp	r0, r3
 801283e:	d106      	bne.n	801284e <_ZN8touchgfx18ZoomAnimationImage21updateRenderingMethodEv+0x70>
 8012840:	4638      	mov	r0, r7
 8012842:	f00a f87b 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012846:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801284a:	4298      	cmp	r0, r3
 801284c:	d0dd      	beq.n	801280a <_ZN8touchgfx18ZoomAnimationImage21updateRenderingMethodEv+0x2c>
 801284e:	2300      	movs	r3, #0
 8012850:	4628      	mov	r0, r5
 8012852:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8012856:	f007 fd98 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 801285a:	2301      	movs	r3, #1
 801285c:	f884 308d 	strb.w	r3, [r4, #141]	@ 0x8d
 8012860:	8923      	ldrh	r3, [r4, #8]
 8012862:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 8012866:	8963      	ldrh	r3, [r4, #10]
 8012868:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 801286c:	e7da      	b.n	8012824 <_ZN8touchgfx18ZoomAnimationImage21updateRenderingMethodEv+0x46>

0801286e <_ZN8touchgfx18ZoomAnimationImage19cancelZoomAnimationEv>:
 801286e:	b510      	push	{r4, lr}
 8012870:	4604      	mov	r4, r0
 8012872:	f007 f99f 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8012876:	4621      	mov	r1, r4
 8012878:	f007 f9d2 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801287c:	6823      	ldr	r3, [r4, #0]
 801287e:	4620      	mov	r0, r4
 8012880:	2102      	movs	r1, #2
 8012882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801288a:	4718      	bx	r3

0801288c <_ZN8touchgfx18ZoomAnimationImage15handleTickEventEv>:
 801288c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012890:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8012894:	4604      	mov	r4, r0
 8012896:	2b01      	cmp	r3, #1
 8012898:	f200 808b 	bhi.w	80129b2 <_ZN8touchgfx18ZoomAnimationImage15handleTickEventEv+0x126>
 801289c:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 801289e:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 80128a0:	4295      	cmp	r5, r2
 80128a2:	d203      	bcs.n	80128ac <_ZN8touchgfx18ZoomAnimationImage15handleTickEventEv+0x20>
 80128a4:	3501      	adds	r5, #1
 80128a6:	6305      	str	r5, [r0, #48]	@ 0x30
 80128a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128ac:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	@ 0xaa
 80128b0:	18d1      	adds	r1, r2, r3
 80128b2:	428d      	cmp	r5, r1
 80128b4:	d86c      	bhi.n	8012990 <_ZN8touchgfx18ZoomAnimationImage15handleTickEventEv+0x104>
 80128b6:	f8b0 1096 	ldrh.w	r1, [r0, #150]	@ 0x96
 80128ba:	1aad      	subs	r5, r5, r2
 80128bc:	f8b0 209a 	ldrh.w	r2, [r0, #154]	@ 0x9a
 80128c0:	b2ad      	uxth	r5, r5
 80128c2:	f8d0 60ac 	ldr.w	r6, [r0, #172]	@ 0xac
 80128c6:	1a52      	subs	r2, r2, r1
 80128c8:	2100      	movs	r1, #0
 80128ca:	4628      	mov	r0, r5
 80128cc:	b212      	sxth	r2, r2
 80128ce:	47b0      	blx	r6
 80128d0:	f8b4 3098 	ldrh.w	r3, [r4, #152]	@ 0x98
 80128d4:	f8b4 209c 	ldrh.w	r2, [r4, #156]	@ 0x9c
 80128d8:	4606      	mov	r6, r0
 80128da:	2100      	movs	r1, #0
 80128dc:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 80128e0:	1ad2      	subs	r2, r2, r3
 80128e2:	4628      	mov	r0, r5
 80128e4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80128e8:	b212      	sxth	r2, r2
 80128ea:	47b8      	blx	r7
 80128ec:	f8b4 2098 	ldrh.w	r2, [r4, #152]	@ 0x98
 80128f0:	f8b4 1096 	ldrh.w	r1, [r4, #150]	@ 0x96
 80128f4:	4402      	add	r2, r0
 80128f6:	6823      	ldr	r3, [r4, #0]
 80128f8:	4431      	add	r1, r6
 80128fa:	4620      	mov	r0, r4
 80128fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012900:	b212      	sxth	r2, r2
 8012902:	b209      	sxth	r1, r1
 8012904:	4798      	blx	r3
 8012906:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801290a:	2b01      	cmp	r3, #1
 801290c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8012910:	d12f      	bne.n	8012972 <_ZN8touchgfx18ZoomAnimationImage15handleTickEventEv+0xe6>
 8012912:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	@ 0xa2
 8012916:	4628      	mov	r0, r5
 8012918:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801291c:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8012920:	440a      	add	r2, r1
 8012922:	f8b4 109e 	ldrh.w	r1, [r4, #158]	@ 0x9e
 8012926:	1a52      	subs	r2, r2, r1
 8012928:	2100      	movs	r1, #0
 801292a:	b212      	sxth	r2, r2
 801292c:	47b0      	blx	r6
 801292e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8012932:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	@ 0xa8
 8012936:	4607      	mov	r7, r0
 8012938:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 801293c:	441a      	add	r2, r3
 801293e:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	@ 0xa0
 8012942:	1ad2      	subs	r2, r2, r3
 8012944:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8012948:	b212      	sxth	r2, r2
 801294a:	2100      	movs	r1, #0
 801294c:	4628      	mov	r0, r5
 801294e:	47b0      	blx	r6
 8012950:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	@ 0xa0
 8012954:	f8b4 109e 	ldrh.w	r1, [r4, #158]	@ 0x9e
 8012958:	4402      	add	r2, r0
 801295a:	6823      	ldr	r3, [r4, #0]
 801295c:	4439      	add	r1, r7
 801295e:	4620      	mov	r0, r4
 8012960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012962:	b212      	sxth	r2, r2
 8012964:	b209      	sxth	r1, r1
 8012966:	4798      	blx	r3
 8012968:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801296a:	3301      	adds	r3, #1
 801296c:	6323      	str	r3, [r4, #48]	@ 0x30
 801296e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012972:	f8d4 60ac 	ldr.w	r6, [r4, #172]	@ 0xac
 8012976:	2100      	movs	r1, #0
 8012978:	f9b4 20a2 	ldrsh.w	r2, [r4, #162]	@ 0xa2
 801297c:	4628      	mov	r0, r5
 801297e:	47b0      	blx	r6
 8012980:	f8d4 60b0 	ldr.w	r6, [r4, #176]	@ 0xb0
 8012984:	4607      	mov	r7, r0
 8012986:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801298a:	f9b4 20a4 	ldrsh.w	r2, [r4, #164]	@ 0xa4
 801298e:	e7dc      	b.n	801294a <_ZN8touchgfx18ZoomAnimationImage15handleTickEventEv+0xbe>
 8012990:	f7ff ff6d 	bl	801286e <_ZN8touchgfx18ZoomAnimationImage19cancelZoomAnimationEv>
 8012994:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8012998:	b158      	cbz	r0, 80129b2 <_ZN8touchgfx18ZoomAnimationImage15handleTickEventEv+0x126>
 801299a:	6803      	ldr	r3, [r0, #0]
 801299c:	68db      	ldr	r3, [r3, #12]
 801299e:	4798      	blx	r3
 80129a0:	b138      	cbz	r0, 80129b2 <_ZN8touchgfx18ZoomAnimationImage15handleTickEventEv+0x126>
 80129a2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 80129a6:	4621      	mov	r1, r4
 80129a8:	6803      	ldr	r3, [r0, #0]
 80129aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129ae:	689b      	ldr	r3, [r3, #8]
 80129b0:	4718      	bx	r3
 80129b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129b6 <_ZN8touchgfx18ZoomAnimationImage26startTimerAndSetParametersEsstNS0_8ZoomModeEPFstsstES3_>:
 80129b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129ba:	4604      	mov	r4, r0
 80129bc:	4690      	mov	r8, r2
 80129be:	461f      	mov	r7, r3
 80129c0:	4689      	mov	r9, r1
 80129c2:	f89d a020 	ldrb.w	sl, [sp, #32]
 80129c6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80129c8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80129ca:	f007 f8f3 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 80129ce:	4621      	mov	r1, r4
 80129d0:	f007 f8f6 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 80129d4:	88a3      	ldrh	r3, [r4, #4]
 80129d6:	f884 a094 	strb.w	sl, [r4, #148]	@ 0x94
 80129da:	4620      	mov	r0, r4
 80129dc:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 80129e0:	88e3      	ldrh	r3, [r4, #6]
 80129e2:	f8a4 909a 	strh.w	r9, [r4, #154]	@ 0x9a
 80129e6:	f8a4 30a0 	strh.w	r3, [r4, #160]	@ 0xa0
 80129ea:	8923      	ldrh	r3, [r4, #8]
 80129ec:	f8a4 809c 	strh.w	r8, [r4, #156]	@ 0x9c
 80129f0:	f8a4 3096 	strh.w	r3, [r4, #150]	@ 0x96
 80129f4:	8963      	ldrh	r3, [r4, #10]
 80129f6:	f8a4 70aa 	strh.w	r7, [r4, #170]	@ 0xaa
 80129fa:	f8a4 3098 	strh.w	r3, [r4, #152]	@ 0x98
 80129fe:	6823      	ldr	r3, [r4, #0]
 8012a00:	f8c4 60ac 	str.w	r6, [r4, #172]	@ 0xac
 8012a04:	f8c4 50b0 	str.w	r5, [r4, #176]	@ 0xb0
 8012a08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012a0c:	4798      	blx	r3
 8012a0e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012a10:	b943      	cbnz	r3, 8012a24 <_ZN8touchgfx18ZoomAnimationImage26startTimerAndSetParametersEsstNS0_8ZoomModeEPFstsstES3_+0x6e>
 8012a12:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8012a16:	b92b      	cbnz	r3, 8012a24 <_ZN8touchgfx18ZoomAnimationImage26startTimerAndSetParametersEsstNS0_8ZoomModeEPFstsstES3_+0x6e>
 8012a18:	6823      	ldr	r3, [r4, #0]
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a22:	4718      	bx	r3
 8012a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012a28 <_ZN8touchgfx18ZoomAnimationImage25startZoomAndMoveAnimationEsssstNS0_8ZoomModeEPFstsstES3_S3_S3_>:
 8012a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a2c:	461d      	mov	r5, r3
 8012a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a30:	4604      	mov	r4, r0
 8012a32:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8012a36:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
 8012a3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a3c:	f8bd 7024 	ldrh.w	r7, [sp, #36]	@ 0x24
 8012a40:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8012a44:	6803      	ldr	r3, [r0, #0]
 8012a46:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8012a4a:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 8012a4e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8012a52:	f8a0 10a6 	strh.w	r1, [r0, #166]	@ 0xa6
 8012a56:	2101      	movs	r1, #1
 8012a58:	f8a0 20a8 	strh.w	r2, [r0, #168]	@ 0xa8
 8012a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012a60:	4798      	blx	r3
 8012a62:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8012a66:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012a6a:	463b      	mov	r3, r7
 8012a6c:	f8cd 8020 	str.w	r8, [sp, #32]
 8012a70:	4632      	mov	r2, r6
 8012a72:	4629      	mov	r1, r5
 8012a74:	4620      	mov	r0, r4
 8012a76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a7a:	f7ff bf9c 	b.w	80129b6 <_ZN8touchgfx18ZoomAnimationImage26startTimerAndSetParametersEsstNS0_8ZoomModeEPFstsstES3_>
	...

08012a80 <_ZN8touchgfx18ZoomAnimationImageC1Ev>:
 8012a80:	4b44      	ldr	r3, [pc, #272]	@ (8012b94 <_ZN8touchgfx18ZoomAnimationImageC1Ev+0x114>)
 8012a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a84:	6003      	str	r3, [r0, #0]
 8012a86:	2302      	movs	r3, #2
 8012a88:	2500      	movs	r5, #0
 8012a8a:	a902      	add	r1, sp, #8
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8012a92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012a96:	4604      	mov	r4, r0
 8012a98:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 8012a9c:	8085      	strh	r5, [r0, #4]
 8012a9e:	86c3      	strh	r3, [r0, #54]	@ 0x36
 8012aa0:	f104 0668 	add.w	r6, r4, #104	@ 0x68
 8012aa4:	8703      	strh	r3, [r0, #56]	@ 0x38
 8012aa6:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8012aaa:	80c5      	strh	r5, [r0, #6]
 8012aac:	8105      	strh	r5, [r0, #8]
 8012aae:	8145      	strh	r5, [r0, #10]
 8012ab0:	8185      	strh	r5, [r0, #12]
 8012ab2:	81c5      	strh	r5, [r0, #14]
 8012ab4:	8205      	strh	r5, [r0, #16]
 8012ab6:	8245      	strh	r5, [r0, #18]
 8012ab8:	6145      	str	r5, [r0, #20]
 8012aba:	6185      	str	r5, [r0, #24]
 8012abc:	61c5      	str	r5, [r0, #28]
 8012abe:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8012ac2:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8012ac6:	6285      	str	r5, [r0, #40]	@ 0x28
 8012ac8:	6305      	str	r5, [r0, #48]	@ 0x30
 8012aca:	8685      	strh	r5, [r0, #52]	@ 0x34
 8012acc:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8012ad0:	f8a0 5042 	strh.w	r5, [r0, #66]	@ 0x42
 8012ad4:	f8a0 5044 	strh.w	r5, [r0, #68]	@ 0x44
 8012ad8:	f8a0 5046 	strh.w	r5, [r0, #70]	@ 0x46
 8012adc:	f8a0 5048 	strh.w	r5, [r0, #72]	@ 0x48
 8012ae0:	f8a0 504a 	strh.w	r5, [r0, #74]	@ 0x4a
 8012ae4:	f8a0 504c 	strh.w	r5, [r0, #76]	@ 0x4c
 8012ae8:	f8a0 504e 	strh.w	r5, [r0, #78]	@ 0x4e
 8012aec:	6505      	str	r5, [r0, #80]	@ 0x50
 8012aee:	6545      	str	r5, [r0, #84]	@ 0x54
 8012af0:	6585      	str	r5, [r0, #88]	@ 0x58
 8012af2:	f880 2061 	strb.w	r2, [r0, #97]	@ 0x61
 8012af6:	4a28      	ldr	r2, [pc, #160]	@ (8012b98 <_ZN8touchgfx18ZoomAnimationImageC1Ev+0x118>)
 8012af8:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
 8012afc:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8012afe:	f880 3064 	strb.w	r3, [r0, #100]	@ 0x64
 8012b02:	f880 5060 	strb.w	r5, [r0, #96]	@ 0x60
 8012b06:	4638      	mov	r0, r7
 8012b08:	f004 fc21 	bl	801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f003 ffed 	bl	8016aec <_ZN8touchgfx13ScalableImageC1Ev>
 8012b12:	2305      	movs	r3, #5
 8012b14:	462a      	mov	r2, r5
 8012b16:	4629      	mov	r1, r5
 8012b18:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
 8012b1c:	4638      	mov	r0, r7
 8012b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8012b9c <_ZN8touchgfx18ZoomAnimationImageC1Ev+0x11c>)
 8012b20:	f8a4 5096 	strh.w	r5, [r4, #150]	@ 0x96
 8012b24:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8012b28:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8012b2c:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8012b30:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8012b34:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
 8012b38:	f8a4 509a 	strh.w	r5, [r4, #154]	@ 0x9a
 8012b3c:	f8a4 509c 	strh.w	r5, [r4, #156]	@ 0x9c
 8012b40:	f8a4 509e 	strh.w	r5, [r4, #158]	@ 0x9e
 8012b44:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 8012b48:	f8a4 50a2 	strh.w	r5, [r4, #162]	@ 0xa2
 8012b4c:	f8a4 50a4 	strh.w	r5, [r4, #164]	@ 0xa4
 8012b50:	f8a4 50a6 	strh.w	r5, [r4, #166]	@ 0xa6
 8012b54:	f8a4 50a8 	strh.w	r5, [r4, #168]	@ 0xa8
 8012b58:	f8a4 50aa 	strh.w	r5, [r4, #170]	@ 0xaa
 8012b5c:	f8c4 50bc 	str.w	r5, [r4, #188]	@ 0xbc
 8012b60:	f7ee f93e 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8012b64:	4629      	mov	r1, r5
 8012b66:	4630      	mov	r0, r6
 8012b68:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8012b6c:	f003 ff6d 	bl	8016a4a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8012b70:	462a      	mov	r2, r5
 8012b72:	4629      	mov	r1, r5
 8012b74:	4630      	mov	r0, r6
 8012b76:	f7ee f933 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 8012b7a:	4639      	mov	r1, r7
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f884 508d 	strb.w	r5, [r4, #141]	@ 0x8d
 8012b82:	f000 f8e5 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012b86:	4620      	mov	r0, r4
 8012b88:	4631      	mov	r1, r6
 8012b8a:	f000 f8e1 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012b8e:	4620      	mov	r0, r4
 8012b90:	b003      	add	sp, #12
 8012b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b94:	08024f28 	.word	0x08024f28
 8012b98:	08025fb8 	.word	0x08025fb8
 8012b9c:	0801b59b 	.word	0x0801b59b

08012ba0 <_ZN8touchgfx18ZoomAnimationImage14setScalingModeENS_13ScalableImage16ScalingAlgorithmE>:
 8012ba0:	3068      	adds	r0, #104	@ 0x68
 8012ba2:	f003 bf52 	b.w	8016a4a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
	...

08012ba8 <_ZN8touchgfx18ZoomAnimationImageD1Ev>:
 8012ba8:	4b04      	ldr	r3, [pc, #16]	@ (8012bbc <_ZN8touchgfx18ZoomAnimationImageD1Ev+0x14>)
 8012baa:	b510      	push	{r4, lr}
 8012bac:	4604      	mov	r4, r0
 8012bae:	f840 3b68 	str.w	r3, [r0], #104
 8012bb2:	f003 ff49 	bl	8016a48 <_ZN8touchgfx13ScalableImageD1Ev>
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	bd10      	pop	{r4, pc}
 8012bba:	bf00      	nop
 8012bbc:	08024f28 	.word	0x08024f28

08012bc0 <_ZN8touchgfx18ZoomAnimationImageD0Ev>:
 8012bc0:	b510      	push	{r4, lr}
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	f7ff fff0 	bl	8012ba8 <_ZN8touchgfx18ZoomAnimationImageD1Ev>
 8012bc8:	21c0      	movs	r1, #192	@ 0xc0
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f00b ffab 	bl	801eb26 <_ZdlPvj>
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	bd10      	pop	{r4, pc}

08012bd4 <_ZN8touchgfx18ZoomAnimationImage10setBitmapsERKNS_6BitmapES3_>:
 8012bd4:	b570      	push	{r4, r5, r6, lr}
 8012bd6:	880b      	ldrh	r3, [r1, #0]
 8012bd8:	4605      	mov	r5, r0
 8012bda:	4604      	mov	r4, r0
 8012bdc:	3068      	adds	r0, #104	@ 0x68
 8012bde:	f820 3c32 	strh.w	r3, [r0, #-50]
 8012be2:	8813      	ldrh	r3, [r2, #0]
 8012be4:	f825 3f38 	strh.w	r3, [r5, #56]!
 8012be8:	4629      	mov	r1, r5
 8012bea:	f003 ff3b 	bl	8016a64 <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>
 8012bee:	4628      	mov	r0, r5
 8012bf0:	f009 fe6c 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012bf4:	8120      	strh	r0, [r4, #8]
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	f009 fea0 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012bfc:	6823      	ldr	r3, [r4, #0]
 8012bfe:	8160      	strh	r0, [r4, #10]
 8012c00:	4620      	mov	r0, r4
 8012c02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c0a:	4718      	bx	r3

08012c0c <_ZN8touchgfx18ZoomAnimationImage14getScalingModeEv>:
 8012c0c:	3068      	adds	r0, #104	@ 0x68
 8012c0e:	f003 bf1f 	b.w	8016a50 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>

08012c12 <_ZN8touchgfx9ContainerD1Ev>:
 8012c12:	4770      	bx	lr

08012c14 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012c14:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012c16:	2000      	movs	r0, #0
 8012c18:	b12b      	cbz	r3, 8012c26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012c1a:	b920      	cbnz	r0, 8012c26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012c1c:	1a5a      	subs	r2, r3, r1
 8012c1e:	699b      	ldr	r3, [r3, #24]
 8012c20:	4250      	negs	r0, r2
 8012c22:	4150      	adcs	r0, r2
 8012c24:	e7f8      	b.n	8012c18 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012c26:	4770      	bx	lr

08012c28 <_ZN8touchgfx9Container9removeAllEv>:
 8012c28:	2200      	movs	r2, #0
 8012c2a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012c2c:	b123      	cbz	r3, 8012c38 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012c2e:	6999      	ldr	r1, [r3, #24]
 8012c30:	6281      	str	r1, [r0, #40]	@ 0x28
 8012c32:	615a      	str	r2, [r3, #20]
 8012c34:	619a      	str	r2, [r3, #24]
 8012c36:	e7f8      	b.n	8012c2a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012c38:	4770      	bx	lr

08012c3a <_ZN8touchgfx9Container6unlinkEv>:
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	6283      	str	r3, [r0, #40]	@ 0x28
 8012c3e:	4770      	bx	lr

08012c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c44:	461f      	mov	r7, r3
 8012c46:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8012c4a:	460d      	mov	r5, r1
 8012c4c:	4616      	mov	r6, r2
 8012c4e:	b103      	cbz	r3, 8012c52 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012c50:	6038      	str	r0, [r7, #0]
 8012c52:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012c54:	b314      	cbz	r4, 8012c9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012c56:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012c5a:	b1eb      	cbz	r3, 8012c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c5c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012c60:	428d      	cmp	r5, r1
 8012c62:	db19      	blt.n	8012c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c64:	b289      	uxth	r1, r1
 8012c66:	8923      	ldrh	r3, [r4, #8]
 8012c68:	440b      	add	r3, r1
 8012c6a:	b21b      	sxth	r3, r3
 8012c6c:	429d      	cmp	r5, r3
 8012c6e:	da13      	bge.n	8012c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c70:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012c74:	4296      	cmp	r6, r2
 8012c76:	db0f      	blt.n	8012c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c78:	b292      	uxth	r2, r2
 8012c7a:	8963      	ldrh	r3, [r4, #10]
 8012c7c:	4413      	add	r3, r2
 8012c7e:	b21b      	sxth	r3, r3
 8012c80:	429e      	cmp	r6, r3
 8012c82:	da09      	bge.n	8012c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c84:	6823      	ldr	r3, [r4, #0]
 8012c86:	1ab2      	subs	r2, r6, r2
 8012c88:	1a69      	subs	r1, r5, r1
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8012c90:	b212      	sxth	r2, r2
 8012c92:	463b      	mov	r3, r7
 8012c94:	b209      	sxth	r1, r1
 8012c96:	47c0      	blx	r8
 8012c98:	69a4      	ldr	r4, [r4, #24]
 8012c9a:	e7db      	b.n	8012c54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ca0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	8002      	strh	r2, [r0, #0]
 8012ca4:	8042      	strh	r2, [r0, #2]
 8012ca6:	8082      	strh	r2, [r0, #4]
 8012ca8:	80c2      	strh	r2, [r0, #6]
 8012caa:	4770      	bx	lr

08012cac <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012cac:	b570      	push	{r4, r5, r6, lr}
 8012cae:	460d      	mov	r5, r1
 8012cb0:	4616      	mov	r6, r2
 8012cb2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012cb4:	b13c      	cbz	r4, 8012cc6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012cb6:	6823      	ldr	r3, [r4, #0]
 8012cb8:	4620      	mov	r0, r4
 8012cba:	4632      	mov	r2, r6
 8012cbc:	4629      	mov	r1, r5
 8012cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cc0:	4798      	blx	r3
 8012cc2:	69a4      	ldr	r4, [r4, #24]
 8012cc4:	e7f6      	b.n	8012cb4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012cc6:	bd70      	pop	{r4, r5, r6, pc}

08012cc8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012cc8:	b538      	push	{r3, r4, r5, lr}
 8012cca:	460d      	mov	r5, r1
 8012ccc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012cce:	b134      	cbz	r4, 8012cde <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012cd0:	682b      	ldr	r3, [r5, #0]
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	689b      	ldr	r3, [r3, #8]
 8012cd8:	4798      	blx	r3
 8012cda:	69a4      	ldr	r4, [r4, #24]
 8012cdc:	e7f7      	b.n	8012cce <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012cde:	bd38      	pop	{r3, r4, r5, pc}

08012ce0 <_ZN8touchgfx9ContainerD0Ev>:
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	212c      	movs	r1, #44	@ 0x2c
 8012ce6:	f00b ff1e 	bl	801eb26 <_ZdlPvj>
 8012cea:	4620      	mov	r0, r4
 8012cec:	bd10      	pop	{r4, pc}

08012cee <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012cee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012cf0:	b19b      	cbz	r3, 8012d1a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012cf2:	428b      	cmp	r3, r1
 8012cf4:	d109      	bne.n	8012d0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012cf6:	2100      	movs	r1, #0
 8012cf8:	699a      	ldr	r2, [r3, #24]
 8012cfa:	6159      	str	r1, [r3, #20]
 8012cfc:	6282      	str	r2, [r0, #40]	@ 0x28
 8012cfe:	b902      	cbnz	r2, 8012d02 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012d00:	4770      	bx	lr
 8012d02:	6199      	str	r1, [r3, #24]
 8012d04:	4770      	bx	lr
 8012d06:	4613      	mov	r3, r2
 8012d08:	b13a      	cbz	r2, 8012d1a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012d0a:	699a      	ldr	r2, [r3, #24]
 8012d0c:	4291      	cmp	r1, r2
 8012d0e:	d1fa      	bne.n	8012d06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012d10:	698a      	ldr	r2, [r1, #24]
 8012d12:	619a      	str	r2, [r3, #24]
 8012d14:	2300      	movs	r3, #0
 8012d16:	614b      	str	r3, [r1, #20]
 8012d18:	618b      	str	r3, [r1, #24]
 8012d1a:	4770      	bx	lr

08012d1c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012d1c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012d1e:	b410      	push	{r4}
 8012d20:	4604      	mov	r4, r0
 8012d22:	b92b      	cbnz	r3, 8012d30 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012d24:	6803      	ldr	r3, [r0, #0]
 8012d26:	4611      	mov	r1, r2
 8012d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d2e:	4718      	bx	r3
 8012d30:	b941      	cbnz	r1, 8012d44 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012d32:	6193      	str	r3, [r2, #24]
 8012d34:	6282      	str	r2, [r0, #40]	@ 0x28
 8012d36:	6154      	str	r4, [r2, #20]
 8012d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d3c:	4770      	bx	lr
 8012d3e:	699b      	ldr	r3, [r3, #24]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d0f9      	beq.n	8012d38 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012d44:	4299      	cmp	r1, r3
 8012d46:	d1fa      	bne.n	8012d3e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012d48:	698b      	ldr	r3, [r1, #24]
 8012d4a:	6193      	str	r3, [r2, #24]
 8012d4c:	618a      	str	r2, [r1, #24]
 8012d4e:	e7f2      	b.n	8012d36 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012d50:	4288      	cmp	r0, r1
 8012d52:	b508      	push	{r3, lr}
 8012d54:	d105      	bne.n	8012d62 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8012d56:	4b11      	ldr	r3, [pc, #68]	@ (8012d9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8012d58:	2123      	movs	r1, #35	@ 0x23
 8012d5a:	4a11      	ldr	r2, [pc, #68]	@ (8012da0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012d5c:	4811      	ldr	r0, [pc, #68]	@ (8012da4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8012d5e:	f00d f809 	bl	801fd74 <__assert_func>
 8012d62:	694b      	ldr	r3, [r1, #20]
 8012d64:	b11b      	cbz	r3, 8012d6e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8012d66:	4b10      	ldr	r3, [pc, #64]	@ (8012da8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8012d68:	2124      	movs	r1, #36	@ 0x24
 8012d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8012da0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012d6c:	e7f6      	b.n	8012d5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8012d6e:	6148      	str	r0, [r1, #20]
 8012d70:	618b      	str	r3, [r1, #24]
 8012d72:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012d74:	b913      	cbnz	r3, 8012d7c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8012d76:	6281      	str	r1, [r0, #40]	@ 0x28
 8012d78:	bd08      	pop	{r3, pc}
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	699a      	ldr	r2, [r3, #24]
 8012d7e:	b12a      	cbz	r2, 8012d8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8012d80:	428b      	cmp	r3, r1
 8012d82:	d1fa      	bne.n	8012d7a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8012d84:	4b09      	ldr	r3, [pc, #36]	@ (8012dac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8012d86:	2135      	movs	r1, #53	@ 0x35
 8012d88:	4a05      	ldr	r2, [pc, #20]	@ (8012da0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012d8a:	e7e7      	b.n	8012d5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8012d8c:	428b      	cmp	r3, r1
 8012d8e:	d103      	bne.n	8012d98 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8012d90:	4b06      	ldr	r3, [pc, #24]	@ (8012dac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8012d92:	2138      	movs	r1, #56	@ 0x38
 8012d94:	4a02      	ldr	r2, [pc, #8]	@ (8012da0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012d96:	e7e1      	b.n	8012d5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8012d98:	6199      	str	r1, [r3, #24]
 8012d9a:	bd08      	pop	{r3, pc}
 8012d9c:	08024fe0 	.word	0x08024fe0
 8012da0:	08025138 	.word	0x08025138
 8012da4:	0802500c 	.word	0x0802500c
 8012da8:	0802503f 	.word	0x0802503f
 8012dac:	08025075 	.word	0x08025075

08012db0 <_ZN8touchgfx4RectaNERKS0_>:
 8012db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012db4:	888b      	ldrh	r3, [r1, #4]
 8012db6:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012dba:	f9b0 a000 	ldrsh.w	sl, [r0]
 8012dbe:	444b      	add	r3, r9
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	fa0f f883 	sxth.w	r8, r3
 8012dc6:	45c2      	cmp	sl, r8
 8012dc8:	da30      	bge.n	8012e2c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8012dca:	8882      	ldrh	r2, [r0, #4]
 8012dcc:	4452      	add	r2, sl
 8012dce:	b292      	uxth	r2, r2
 8012dd0:	fa0f fc82 	sxth.w	ip, r2
 8012dd4:	45e1      	cmp	r9, ip
 8012dd6:	da29      	bge.n	8012e2c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8012dd8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012ddc:	88cc      	ldrh	r4, [r1, #6]
 8012dde:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012de2:	442c      	add	r4, r5
 8012de4:	b224      	sxth	r4, r4
 8012de6:	42a6      	cmp	r6, r4
 8012de8:	da20      	bge.n	8012e2c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8012dea:	88c7      	ldrh	r7, [r0, #6]
 8012dec:	4437      	add	r7, r6
 8012dee:	b2bf      	uxth	r7, r7
 8012df0:	fa0f fe87 	sxth.w	lr, r7
 8012df4:	4575      	cmp	r5, lr
 8012df6:	da19      	bge.n	8012e2c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8012df8:	45ca      	cmp	sl, r9
 8012dfa:	4654      	mov	r4, sl
 8012dfc:	bfb8      	it	lt
 8012dfe:	464c      	movlt	r4, r9
 8012e00:	42b5      	cmp	r5, r6
 8012e02:	bfb8      	it	lt
 8012e04:	4635      	movlt	r5, r6
 8012e06:	45e0      	cmp	r8, ip
 8012e08:	bfc8      	it	gt
 8012e0a:	4613      	movgt	r3, r2
 8012e0c:	1b1b      	subs	r3, r3, r4
 8012e0e:	8083      	strh	r3, [r0, #4]
 8012e10:	88ca      	ldrh	r2, [r1, #6]
 8012e12:	884b      	ldrh	r3, [r1, #2]
 8012e14:	8004      	strh	r4, [r0, #0]
 8012e16:	4413      	add	r3, r2
 8012e18:	8045      	strh	r5, [r0, #2]
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	b21a      	sxth	r2, r3
 8012e1e:	4596      	cmp	lr, r2
 8012e20:	bfb8      	it	lt
 8012e22:	463b      	movlt	r3, r7
 8012e24:	1b5b      	subs	r3, r3, r5
 8012e26:	80c3      	strh	r3, [r0, #6]
 8012e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	8003      	strh	r3, [r0, #0]
 8012e30:	8043      	strh	r3, [r0, #2]
 8012e32:	8083      	strh	r3, [r0, #4]
 8012e34:	80c3      	strh	r3, [r0, #6]
 8012e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012e3a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012e3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012e3e:	b12b      	cbz	r3, 8012e4c <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8012e40:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012e44:	fab0 f080 	clz	r0, r0
 8012e48:	0940      	lsrs	r0, r0, #5
 8012e4a:	4770      	bx	lr
 8012e4c:	2001      	movs	r0, #1
 8012e4e:	4770      	bx	lr

08012e50 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e52:	2300      	movs	r3, #0
 8012e54:	4604      	mov	r4, r0
 8012e56:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8012e58:	8003      	strh	r3, [r0, #0]
 8012e5a:	8043      	strh	r3, [r0, #2]
 8012e5c:	8083      	strh	r3, [r0, #4]
 8012e5e:	80c3      	strh	r3, [r0, #6]
 8012e60:	2d00      	cmp	r5, #0
 8012e62:	d041      	beq.n	8012ee8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012e64:	1d28      	adds	r0, r5, #4
 8012e66:	f7ff ffe8 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e6a:	b958      	cbnz	r0, 8012e84 <_ZNK8touchgfx9Container16getContainedAreaEv+0x34>
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f7ff ffe4 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e72:	b148      	cbz	r0, 8012e88 <_ZNK8touchgfx9Container16getContainedAreaEv+0x38>
 8012e74:	88ab      	ldrh	r3, [r5, #4]
 8012e76:	8023      	strh	r3, [r4, #0]
 8012e78:	88eb      	ldrh	r3, [r5, #6]
 8012e7a:	8063      	strh	r3, [r4, #2]
 8012e7c:	892b      	ldrh	r3, [r5, #8]
 8012e7e:	80a3      	strh	r3, [r4, #4]
 8012e80:	896b      	ldrh	r3, [r5, #10]
 8012e82:	80e3      	strh	r3, [r4, #6]
 8012e84:	69ad      	ldr	r5, [r5, #24]
 8012e86:	e7eb      	b.n	8012e60 <_ZNK8touchgfx9Container16getContainedAreaEv+0x10>
 8012e88:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012e8c:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8012e90:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8012e94:	4607      	mov	r7, r0
 8012e96:	4288      	cmp	r0, r1
 8012e98:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012e9c:	4470      	add	r0, lr
 8012e9e:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8012ea2:	bfa8      	it	ge
 8012ea4:	460f      	movge	r7, r1
 8012ea6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012eaa:	4471      	add	r1, lr
 8012eac:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	4616      	mov	r6, r2
 8012eb4:	4472      	add	r2, lr
 8012eb6:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 8012eba:	bfa8      	it	ge
 8012ebc:	461e      	movge	r6, r3
 8012ebe:	b200      	sxth	r0, r0
 8012ec0:	b209      	sxth	r1, r1
 8012ec2:	4473      	add	r3, lr
 8012ec4:	b212      	sxth	r2, r2
 8012ec6:	8027      	strh	r7, [r4, #0]
 8012ec8:	b21b      	sxth	r3, r3
 8012eca:	4288      	cmp	r0, r1
 8012ecc:	bfac      	ite	ge
 8012ece:	ebc7 0100 	rsbge	r1, r7, r0
 8012ed2:	ebc7 0101 	rsblt	r1, r7, r1
 8012ed6:	8066      	strh	r6, [r4, #2]
 8012ed8:	80a1      	strh	r1, [r4, #4]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	bfac      	ite	ge
 8012ede:	ebc6 0302 	rsbge	r3, r6, r2
 8012ee2:	ebc6 0303 	rsblt	r3, r6, r3
 8012ee6:	e7cc      	b.n	8012e82 <_ZNK8touchgfx9Container16getContainedAreaEv+0x32>
 8012ee8:	4620      	mov	r0, r4
 8012eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012eec <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012eec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012ef0:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012ef4:	b10b      	cbz	r3, 8012efa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xe>
 8012ef6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012ef8:	b914      	cbnz	r4, 8012f00 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x14>
 8012efa:	b002      	add	sp, #8
 8012efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f00:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012f04:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012f08:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8012f0c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012f10:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012f14:	b303      	cbz	r3, 8012f58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012f16:	4668      	mov	r0, sp
 8012f18:	1d21      	adds	r1, r4, #4
 8012f1a:	f8ad 7000 	strh.w	r7, [sp]
 8012f1e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012f22:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012f26:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012f2a:	f7ff ff41 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 8012f2e:	4668      	mov	r0, sp
 8012f30:	f7ff ff83 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f34:	b980      	cbnz	r0, 8012f58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012f36:	f8bd 3000 	ldrh.w	r3, [sp]
 8012f3a:	4669      	mov	r1, sp
 8012f3c:	88a2      	ldrh	r2, [r4, #4]
 8012f3e:	4620      	mov	r0, r4
 8012f40:	1a9b      	subs	r3, r3, r2
 8012f42:	88e2      	ldrh	r2, [r4, #6]
 8012f44:	f8ad 3000 	strh.w	r3, [sp]
 8012f48:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012f4c:	1a9b      	subs	r3, r3, r2
 8012f4e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	689b      	ldr	r3, [r3, #8]
 8012f56:	4798      	blx	r3
 8012f58:	69a4      	ldr	r4, [r4, #24]
 8012f5a:	2c00      	cmp	r4, #0
 8012f5c:	d1d8      	bne.n	8012f10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
 8012f5e:	e7cc      	b.n	8012efa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xe>

08012f60 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f62:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012f66:	460d      	mov	r5, r1
 8012f68:	4616      	mov	r6, r2
 8012f6a:	b323      	cbz	r3, 8012fb6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012f6c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012f6e:	b314      	cbz	r4, 8012fb6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012f70:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012f74:	b1eb      	cbz	r3, 8012fb2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012f76:	6828      	ldr	r0, [r5, #0]
 8012f78:	466b      	mov	r3, sp
 8012f7a:	6869      	ldr	r1, [r5, #4]
 8012f7c:	c303      	stmia	r3!, {r0, r1}
 8012f7e:	4668      	mov	r0, sp
 8012f80:	1d21      	adds	r1, r4, #4
 8012f82:	f7ff ff15 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 8012f86:	4668      	mov	r0, sp
 8012f88:	f7ff ff57 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f8c:	b988      	cbnz	r0, 8012fb2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012f8e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012f92:	4669      	mov	r1, sp
 8012f94:	88a2      	ldrh	r2, [r4, #4]
 8012f96:	4620      	mov	r0, r4
 8012f98:	1a9b      	subs	r3, r3, r2
 8012f9a:	88e2      	ldrh	r2, [r4, #6]
 8012f9c:	f8ad 3000 	strh.w	r3, [sp]
 8012fa0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012fa4:	1a9b      	subs	r3, r3, r2
 8012fa6:	4632      	mov	r2, r6
 8012fa8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012fac:	6823      	ldr	r3, [r4, #0]
 8012fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012fb0:	4798      	blx	r3
 8012fb2:	69a4      	ldr	r4, [r4, #24]
 8012fb4:	e7db      	b.n	8012f6e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012fb6:	b002      	add	sp, #8
 8012fb8:	bd70      	pop	{r4, r5, r6, pc}

08012fba <_ZN8touchgfx10ListLayoutD1Ev>:
 8012fba:	4770      	bx	lr

08012fbc <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 8012fbc:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012fc0:	4770      	bx	lr

08012fc2 <_ZNK8touchgfx10ListLayout7getTypeEv>:
 8012fc2:	2013      	movs	r0, #19
 8012fc4:	4770      	bx	lr

08012fc6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 8012fc6:	b538      	push	{r3, r4, r5, lr}
 8012fc8:	7882      	ldrb	r2, [r0, #2]
 8012fca:	4604      	mov	r4, r0
 8012fcc:	460d      	mov	r5, r1
 8012fce:	6843      	ldr	r3, [r0, #4]
 8012fd0:	b98a      	cbnz	r2, 8012ff6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 8012fd2:	428b      	cmp	r3, r1
 8012fd4:	d101      	bne.n	8012fda <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	7083      	strb	r3, [r0, #2]
 8012fda:	6863      	ldr	r3, [r4, #4]
 8012fdc:	429d      	cmp	r5, r3
 8012fde:	d009      	beq.n	8012ff4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8012fe0:	7a23      	ldrb	r3, [r4, #8]
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	d11b      	bne.n	801301e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 8012fe6:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8012fea:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	bfb8      	it	lt
 8012ff2:	8023      	strhlt	r3, [r4, #0]
 8012ff4:	bd38      	pop	{r3, r4, r5, pc}
 8012ff6:	7a02      	ldrb	r2, [r0, #8]
 8012ff8:	2a01      	cmp	r2, #1
 8012ffa:	d108      	bne.n	801300e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 8012ffc:	895b      	ldrh	r3, [r3, #10]
 8012ffe:	88c9      	ldrh	r1, [r1, #6]
 8013000:	1ac9      	subs	r1, r1, r3
 8013002:	682b      	ldr	r3, [r5, #0]
 8013004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013006:	b209      	sxth	r1, r1
 8013008:	4628      	mov	r0, r5
 801300a:	4798      	blx	r3
 801300c:	e7e5      	b.n	8012fda <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801300e:	2a02      	cmp	r2, #2
 8013010:	d1e3      	bne.n	8012fda <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8013012:	891b      	ldrh	r3, [r3, #8]
 8013014:	8889      	ldrh	r1, [r1, #4]
 8013016:	1ac9      	subs	r1, r1, r3
 8013018:	682b      	ldr	r3, [r5, #0]
 801301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801301c:	e7f3      	b.n	8013006 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 801301e:	2b02      	cmp	r3, #2
 8013020:	d1e8      	bne.n	8012ff4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8013022:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8013026:	e7e0      	b.n	8012fea <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

08013028 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 8013028:	4770      	bx	lr

0801302a <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 801302a:	4770      	bx	lr

0801302c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 801302c:	b410      	push	{r4}
 801302e:	68c2      	ldr	r2, [r0, #12]
 8013030:	6883      	ldr	r3, [r0, #8]
 8013032:	f012 0f01 	tst.w	r2, #1
 8013036:	6840      	ldr	r0, [r0, #4]
 8013038:	ea4f 0262 	mov.w	r2, r2, asr #1
 801303c:	bf18      	it	ne
 801303e:	5884      	ldrne	r4, [r0, r2]
 8013040:	4410      	add	r0, r2
 8013042:	bf18      	it	ne
 8013044:	58e3      	ldrne	r3, [r4, r3]
 8013046:	f85d 4b04 	ldr.w	r4, [sp], #4
 801304a:	4718      	bx	r3

0801304c <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 801304c:	6843      	ldr	r3, [r0, #4]
 801304e:	b12b      	cbz	r3, 801305c <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 8013050:	6883      	ldr	r3, [r0, #8]
 8013052:	b92b      	cbnz	r3, 8013060 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 8013054:	68c0      	ldr	r0, [r0, #12]
 8013056:	f000 0001 	and.w	r0, r0, #1
 801305a:	4770      	bx	lr
 801305c:	4618      	mov	r0, r3
 801305e:	4770      	bx	lr
 8013060:	2001      	movs	r0, #1
 8013062:	4770      	bx	lr

08013064 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 8013064:	b410      	push	{r4}
 8013066:	68c2      	ldr	r2, [r0, #12]
 8013068:	6883      	ldr	r3, [r0, #8]
 801306a:	f012 0f01 	tst.w	r2, #1
 801306e:	6840      	ldr	r0, [r0, #4]
 8013070:	ea4f 0262 	mov.w	r2, r2, asr #1
 8013074:	bf18      	it	ne
 8013076:	5884      	ldrne	r4, [r0, r2]
 8013078:	4410      	add	r0, r2
 801307a:	bf18      	it	ne
 801307c:	58e3      	ldrne	r3, [r4, r3]
 801307e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013082:	4718      	bx	r3

08013084 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 8013084:	6843      	ldr	r3, [r0, #4]
 8013086:	b12b      	cbz	r3, 8013094 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 8013088:	6883      	ldr	r3, [r0, #8]
 801308a:	b92b      	cbnz	r3, 8013098 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 801308c:	68c0      	ldr	r0, [r0, #12]
 801308e:	f000 0001 	and.w	r0, r0, #1
 8013092:	4770      	bx	lr
 8013094:	4618      	mov	r0, r3
 8013096:	4770      	bx	lr
 8013098:	2001      	movs	r0, #1
 801309a:	4770      	bx	lr

0801309c <_ZN8touchgfx10ListLayoutD0Ev>:
 801309c:	b510      	push	{r4, lr}
 801309e:	4604      	mov	r4, r0
 80130a0:	2130      	movs	r1, #48	@ 0x30
 80130a2:	f00b fd40 	bl	801eb26 <_ZdlPvj>
 80130a6:	4620      	mov	r0, r4
 80130a8:	bd10      	pop	{r4, pc}

080130aa <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 80130aa:	b510      	push	{r4, lr}
 80130ac:	4604      	mov	r4, r0
 80130ae:	2110      	movs	r1, #16
 80130b0:	f00b fd39 	bl	801eb26 <_ZdlPvj>
 80130b4:	4620      	mov	r0, r4
 80130b6:	bd10      	pop	{r4, pc}

080130b8 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 80130b8:	b510      	push	{r4, lr}
 80130ba:	4604      	mov	r4, r0
 80130bc:	2110      	movs	r1, #16
 80130be:	f00b fd32 	bl	801eb26 <_ZdlPvj>
 80130c2:	4620      	mov	r0, r4
 80130c4:	bd10      	pop	{r4, pc}

080130c6 <_ZN8touchgfx10ListLayout9removeAllEv>:
 80130c6:	b570      	push	{r4, r5, r6, lr}
 80130c8:	2500      	movs	r5, #0
 80130ca:	6803      	ldr	r3, [r0, #0]
 80130cc:	4604      	mov	r4, r0
 80130ce:	85c5      	strh	r5, [r0, #46]	@ 0x2e
 80130d0:	4629      	mov	r1, r5
 80130d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130d4:	4798      	blx	r3
 80130d6:	6823      	ldr	r3, [r4, #0]
 80130d8:	4629      	mov	r1, r5
 80130da:	4620      	mov	r0, r4
 80130dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130de:	4798      	blx	r3
 80130e0:	4620      	mov	r0, r4
 80130e2:	f7ff fda1 	bl	8012c28 <_ZN8touchgfx9Container9removeAllEv>
 80130e6:	6960      	ldr	r0, [r4, #20]
 80130e8:	b120      	cbz	r0, 80130f4 <_ZN8touchgfx10ListLayout9removeAllEv+0x2e>
 80130ea:	6803      	ldr	r3, [r0, #0]
 80130ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130f2:	4718      	bx	r3
 80130f4:	bd70      	pop	{r4, r5, r6, pc}

080130f6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 80130f6:	4603      	mov	r3, r0
 80130f8:	4608      	mov	r0, r1
 80130fa:	789a      	ldrb	r2, [r3, #2]
 80130fc:	b992      	cbnz	r2, 8013124 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 80130fe:	685a      	ldr	r2, [r3, #4]
 8013100:	428a      	cmp	r2, r1
 8013102:	d102      	bne.n	801310a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 8013104:	2201      	movs	r2, #1
 8013106:	709a      	strb	r2, [r3, #2]
 8013108:	4770      	bx	lr
 801310a:	7a1a      	ldrb	r2, [r3, #8]
 801310c:	2a01      	cmp	r2, #1
 801310e:	d104      	bne.n	801311a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8013110:	88ca      	ldrh	r2, [r1, #6]
 8013112:	8949      	ldrh	r1, [r1, #10]
 8013114:	440a      	add	r2, r1
 8013116:	801a      	strh	r2, [r3, #0]
 8013118:	4770      	bx	lr
 801311a:	2a02      	cmp	r2, #2
 801311c:	d116      	bne.n	801314c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 801311e:	888a      	ldrh	r2, [r1, #4]
 8013120:	8909      	ldrh	r1, [r1, #8]
 8013122:	e7f7      	b.n	8013114 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 8013124:	7a1a      	ldrb	r2, [r3, #8]
 8013126:	2a01      	cmp	r2, #1
 8013128:	d107      	bne.n	801313a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	8959      	ldrh	r1, [r3, #10]
 801312e:	88c3      	ldrh	r3, [r0, #6]
 8013130:	4419      	add	r1, r3
 8013132:	6803      	ldr	r3, [r0, #0]
 8013134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013136:	b209      	sxth	r1, r1
 8013138:	4718      	bx	r3
 801313a:	2a02      	cmp	r2, #2
 801313c:	d106      	bne.n	801314c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	8919      	ldrh	r1, [r3, #8]
 8013142:	8883      	ldrh	r3, [r0, #4]
 8013144:	4419      	add	r1, r3
 8013146:	6803      	ldr	r3, [r0, #0]
 8013148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801314a:	e7f4      	b.n	8013136 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 801314c:	4770      	bx	lr
	...

08013150 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 8013150:	1e4b      	subs	r3, r1, #1
 8013152:	2b01      	cmp	r3, #1
 8013154:	b530      	push	{r4, r5, lr}
 8013156:	4604      	mov	r4, r0
 8013158:	b085      	sub	sp, #20
 801315a:	d905      	bls.n	8013168 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x18>
 801315c:	4b14      	ldr	r3, [pc, #80]	@ (80131b0 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x60>)
 801315e:	21af      	movs	r1, #175	@ 0xaf
 8013160:	4a14      	ldr	r2, [pc, #80]	@ (80131b4 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x64>)
 8013162:	4815      	ldr	r0, [pc, #84]	@ (80131b8 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x68>)
 8013164:	f00c fe06 	bl	801fd74 <__assert_func>
 8013168:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801316c:	428b      	cmp	r3, r1
 801316e:	d01c      	beq.n	80131aa <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x5a>
 8013170:	2500      	movs	r5, #0
 8013172:	6803      	ldr	r3, [r0, #0]
 8013174:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8013178:	85c5      	strh	r5, [r0, #46]	@ 0x2e
 801317a:	4629      	mov	r1, r5
 801317c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801317e:	4798      	blx	r3
 8013180:	6823      	ldr	r3, [r4, #0]
 8013182:	4629      	mov	r1, r5
 8013184:	4620      	mov	r0, r4
 8013186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013188:	4798      	blx	r3
 801318a:	4b0c      	ldr	r3, [pc, #48]	@ (80131bc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x6c>)
 801318c:	4620      	mov	r0, r4
 801318e:	9503      	str	r5, [sp, #12]
 8013190:	4669      	mov	r1, sp
 8013192:	e88d 0018 	stmia.w	sp, {r3, r4}
 8013196:	4b0a      	ldr	r3, [pc, #40]	@ (80131c0 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x70>)
 8013198:	9302      	str	r3, [sp, #8]
 801319a:	6823      	ldr	r3, [r4, #0]
 801319c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801319e:	4798      	blx	r3
 80131a0:	6960      	ldr	r0, [r4, #20]
 80131a2:	b110      	cbz	r0, 80131aa <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x5a>
 80131a4:	6803      	ldr	r3, [r0, #0]
 80131a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131a8:	4798      	blx	r3
 80131aa:	b005      	add	sp, #20
 80131ac:	bd30      	pop	{r4, r5, pc}
 80131ae:	bf00      	nop
 80131b0:	080251a4 	.word	0x080251a4
 80131b4:	080252b0 	.word	0x080252b0
 80131b8:	080251e2 	.word	0x080251e2
 80131bc:	0802517c 	.word	0x0802517c
 80131c0:	0801322d 	.word	0x0801322d

080131c4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 80131c4:	b538      	push	{r3, r4, r5, lr}
 80131c6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80131ca:	460d      	mov	r5, r1
 80131cc:	4604      	mov	r4, r0
 80131ce:	4611      	mov	r1, r2
 80131d0:	2b01      	cmp	r3, #1
 80131d2:	d002      	beq.n	80131da <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d016      	beq.n	8013206 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x42>
 80131d8:	bd38      	pop	{r3, r4, r5, pc}
 80131da:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80131de:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	bfb8      	it	lt
 80131e6:	8103      	strhlt	r3, [r0, #8]
 80131e8:	8943      	ldrh	r3, [r0, #10]
 80131ea:	896a      	ldrh	r2, [r5, #10]
 80131ec:	4413      	add	r3, r2
 80131ee:	460a      	mov	r2, r1
 80131f0:	2100      	movs	r1, #0
 80131f2:	8143      	strh	r3, [r0, #10]
 80131f4:	4628      	mov	r0, r5
 80131f6:	682b      	ldr	r3, [r5, #0]
 80131f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131fa:	4798      	blx	r3
 80131fc:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80131fe:	896a      	ldrh	r2, [r5, #10]
 8013200:	4413      	add	r3, r2
 8013202:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8013204:	bd38      	pop	{r3, r4, r5, pc}
 8013206:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801320a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801320e:	429a      	cmp	r2, r3
 8013210:	bfb8      	it	lt
 8013212:	8143      	strhlt	r3, [r0, #10]
 8013214:	8903      	ldrh	r3, [r0, #8]
 8013216:	892a      	ldrh	r2, [r5, #8]
 8013218:	4413      	add	r3, r2
 801321a:	2200      	movs	r2, #0
 801321c:	8103      	strh	r3, [r0, #8]
 801321e:	4628      	mov	r0, r5
 8013220:	682b      	ldr	r3, [r5, #0]
 8013222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013224:	4798      	blx	r3
 8013226:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8013228:	892a      	ldrh	r2, [r5, #8]
 801322a:	e7e9      	b.n	8013200 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3c>

0801322c <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 801322c:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
 8013230:	f7ff bfc8 	b.w	80131c4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08013234 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8013234:	b570      	push	{r4, r5, r6, lr}
 8013236:	4604      	mov	r4, r0
 8013238:	460d      	mov	r5, r1
 801323a:	f7ff fff7 	bl	801322c <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 801323e:	4620      	mov	r0, r4
 8013240:	4629      	mov	r1, r5
 8013242:	f7ff fd85 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013246:	6960      	ldr	r0, [r4, #20]
 8013248:	b120      	cbz	r0, 8013254 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 801324a:	6803      	ldr	r3, [r0, #0]
 801324c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013252:	4718      	bx	r3
 8013254:	bd70      	pop	{r4, r5, r6, pc}
	...

08013258 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8013258:	b530      	push	{r4, r5, lr}
 801325a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801325c:	b089      	sub	sp, #36	@ 0x24
 801325e:	4604      	mov	r4, r0
 8013260:	4615      	mov	r5, r2
 8013262:	b92b      	cbnz	r3, 8013270 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8013264:	6803      	ldr	r3, [r0, #0]
 8013266:	4611      	mov	r1, r2
 8013268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801326a:	4798      	blx	r3
 801326c:	b009      	add	sp, #36	@ 0x24
 801326e:	bd30      	pop	{r4, r5, pc}
 8013270:	f7ff fd54 	bl	8012d1c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8013274:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8013278:	2300      	movs	r3, #0
 801327a:	a904      	add	r1, sp, #16
 801327c:	f88d 200c 	strb.w	r2, [sp, #12]
 8013280:	4620      	mov	r0, r4
 8013282:	4a0e      	ldr	r2, [pc, #56]	@ (80132bc <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8013284:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013288:	9204      	str	r2, [sp, #16]
 801328a:	aa01      	add	r2, sp, #4
 801328c:	f88d 3006 	strb.w	r3, [sp, #6]
 8013290:	9205      	str	r2, [sp, #20]
 8013292:	9307      	str	r3, [sp, #28]
 8013294:	4a0a      	ldr	r2, [pc, #40]	@ (80132c0 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8013296:	6823      	ldr	r3, [r4, #0]
 8013298:	9206      	str	r2, [sp, #24]
 801329a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801329c:	9502      	str	r5, [sp, #8]
 801329e:	4798      	blx	r3
 80132a0:	4620      	mov	r0, r4
 80132a2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80132a6:	4629      	mov	r1, r5
 80132a8:	f7ff ff8c 	bl	80131c4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 80132ac:	6960      	ldr	r0, [r4, #20]
 80132ae:	2800      	cmp	r0, #0
 80132b0:	d0dc      	beq.n	801326c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 80132b2:	6803      	ldr	r3, [r0, #0]
 80132b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132b6:	4798      	blx	r3
 80132b8:	e7d8      	b.n	801326c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 80132ba:	bf00      	nop
 80132bc:	08025194 	.word	0x08025194
 80132c0:	080130f7 	.word	0x080130f7

080132c4 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 80132c4:	b538      	push	{r3, r4, r5, lr}
 80132c6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80132ca:	4604      	mov	r4, r0
 80132cc:	460d      	mov	r5, r1
 80132ce:	2b01      	cmp	r3, #1
 80132d0:	d002      	beq.n	80132d8 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 80132d2:	2b02      	cmp	r3, #2
 80132d4:	d018      	beq.n	8013308 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 80132d6:	bd38      	pop	{r3, r4, r5, pc}
 80132d8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80132dc:	4293      	cmp	r3, r2
 80132de:	8943      	ldrh	r3, [r0, #10]
 80132e0:	bfc8      	it	gt
 80132e2:	8102      	strhgt	r2, [r0, #8]
 80132e4:	894a      	ldrh	r2, [r1, #10]
 80132e6:	1a9b      	subs	r3, r3, r2
 80132e8:	8143      	strh	r3, [r0, #10]
 80132ea:	4628      	mov	r0, r5
 80132ec:	680b      	ldr	r3, [r1, #0]
 80132ee:	2100      	movs	r1, #0
 80132f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132f2:	4798      	blx	r3
 80132f4:	682b      	ldr	r3, [r5, #0]
 80132f6:	2100      	movs	r1, #0
 80132f8:	4628      	mov	r0, r5
 80132fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132fc:	4798      	blx	r3
 80132fe:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8013300:	896a      	ldrh	r2, [r5, #10]
 8013302:	1a9b      	subs	r3, r3, r2
 8013304:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8013306:	bd38      	pop	{r3, r4, r5, pc}
 8013308:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801330c:	4293      	cmp	r3, r2
 801330e:	8903      	ldrh	r3, [r0, #8]
 8013310:	bfc8      	it	gt
 8013312:	8142      	strhgt	r2, [r0, #10]
 8013314:	890a      	ldrh	r2, [r1, #8]
 8013316:	1a9b      	subs	r3, r3, r2
 8013318:	8103      	strh	r3, [r0, #8]
 801331a:	4628      	mov	r0, r5
 801331c:	680b      	ldr	r3, [r1, #0]
 801331e:	2100      	movs	r1, #0
 8013320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013322:	4798      	blx	r3
 8013324:	682b      	ldr	r3, [r5, #0]
 8013326:	2100      	movs	r1, #0
 8013328:	4628      	mov	r0, r5
 801332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801332c:	4798      	blx	r3
 801332e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8013330:	892a      	ldrh	r2, [r5, #8]
 8013332:	e7e6      	b.n	8013302 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08013334 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8013334:	b530      	push	{r4, r5, lr}
 8013336:	b089      	sub	sp, #36	@ 0x24
 8013338:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 801333c:	2300      	movs	r3, #0
 801333e:	460d      	mov	r5, r1
 8013340:	f88d 200c 	strb.w	r2, [sp, #12]
 8013344:	4604      	mov	r4, r0
 8013346:	4a12      	ldr	r2, [pc, #72]	@ (8013390 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8013348:	f8ad 3004 	strh.w	r3, [sp, #4]
 801334c:	9204      	str	r2, [sp, #16]
 801334e:	aa01      	add	r2, sp, #4
 8013350:	f88d 3006 	strb.w	r3, [sp, #6]
 8013354:	9205      	str	r2, [sp, #20]
 8013356:	9307      	str	r3, [sp, #28]
 8013358:	4a0e      	ldr	r2, [pc, #56]	@ (8013394 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 801335a:	6803      	ldr	r3, [r0, #0]
 801335c:	9102      	str	r1, [sp, #8]
 801335e:	a904      	add	r1, sp, #16
 8013360:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013362:	9206      	str	r2, [sp, #24]
 8013364:	4798      	blx	r3
 8013366:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801336a:	b14b      	cbz	r3, 8013380 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 801336c:	4629      	mov	r1, r5
 801336e:	4620      	mov	r0, r4
 8013370:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013374:	f7ff ffa6 	bl	80132c4 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8013378:	4629      	mov	r1, r5
 801337a:	4620      	mov	r0, r4
 801337c:	f7ff fcb7 	bl	8012cee <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8013380:	6960      	ldr	r0, [r4, #20]
 8013382:	b110      	cbz	r0, 801338a <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8013384:	6803      	ldr	r3, [r0, #0]
 8013386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013388:	4798      	blx	r3
 801338a:	b009      	add	sp, #36	@ 0x24
 801338c:	bd30      	pop	{r4, r5, pc}
 801338e:	bf00      	nop
 8013390:	08025194 	.word	0x08025194
 8013394:	08012fc7 	.word	0x08012fc7

08013398 <_ZN8touchgfx10ClickEventD1Ev>:
 8013398:	4770      	bx	lr

0801339a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801339a:	2000      	movs	r0, #0
 801339c:	4770      	bx	lr

0801339e <_ZN8touchgfx9DragEventD1Ev>:
 801339e:	4770      	bx	lr

080133a0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80133a0:	2001      	movs	r0, #1
 80133a2:	4770      	bx	lr

080133a4 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 80133a4:	4770      	bx	lr

080133a6 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 80133a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80133a8:	6803      	ldr	r3, [r0, #0]
 80133aa:	4604      	mov	r4, r0
 80133ac:	460e      	mov	r6, r1
 80133ae:	4601      	mov	r1, r0
 80133b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80133b4:	4668      	mov	r0, sp
 80133b6:	4615      	mov	r5, r2
 80133b8:	4798      	blx	r3
 80133ba:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80133be:	b13b      	cbz	r3, 80133d0 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 80133c0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80133c4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80133c8:	4293      	cmp	r3, r2
 80133ca:	bfac      	ite	ge
 80133cc:	2300      	movge	r3, #0
 80133ce:	2301      	movlt	r3, #1
 80133d0:	7033      	strb	r3, [r6, #0]
 80133d2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80133d6:	b13b      	cbz	r3, 80133e8 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 80133d8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80133dc:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80133e0:	4293      	cmp	r3, r2
 80133e2:	bfac      	ite	ge
 80133e4:	2300      	movge	r3, #0
 80133e6:	2301      	movlt	r3, #1
 80133e8:	702b      	strb	r3, [r5, #0]
 80133ea:	b002      	add	sp, #8
 80133ec:	bd70      	pop	{r4, r5, r6, pc}

080133ee <_ZNK8touchgfx19ScrollableContainer7getTypeEv>:
 80133ee:	2014      	movs	r0, #20
 80133f0:	4770      	bx	lr

080133f2 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 80133f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f6:	460e      	mov	r6, r1
 80133f8:	4617      	mov	r7, r2
 80133fa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80133fc:	f100 0838 	add.w	r8, r0, #56	@ 0x38
 8013400:	f100 0568 	add.w	r5, r0, #104	@ 0x68
 8013404:	b15c      	cbz	r4, 801341e <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2c>
 8013406:	4544      	cmp	r4, r8
 8013408:	d007      	beq.n	801341a <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x28>
 801340a:	42ac      	cmp	r4, r5
 801340c:	d005      	beq.n	801341a <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x28>
 801340e:	6823      	ldr	r3, [r4, #0]
 8013410:	463a      	mov	r2, r7
 8013412:	4631      	mov	r1, r6
 8013414:	4620      	mov	r0, r4
 8013416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013418:	4798      	blx	r3
 801341a:	69a4      	ldr	r4, [r4, #24]
 801341c:	e7f2      	b.n	8013404 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x12>
 801341e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013422 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 8013422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013424:	4605      	mov	r5, r0
 8013426:	f100 0638 	add.w	r6, r0, #56	@ 0x38
 801342a:	4604      	mov	r4, r0
 801342c:	460f      	mov	r7, r1
 801342e:	f855 3b68 	ldr.w	r3, [r5], #104
 8013432:	4631      	mov	r1, r6
 8013434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013436:	4798      	blx	r3
 8013438:	6823      	ldr	r3, [r4, #0]
 801343a:	4629      	mov	r1, r5
 801343c:	4620      	mov	r0, r4
 801343e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013440:	4798      	blx	r3
 8013442:	4639      	mov	r1, r7
 8013444:	4620      	mov	r0, r4
 8013446:	f7ff fc83 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801344a:	4631      	mov	r1, r6
 801344c:	4620      	mov	r0, r4
 801344e:	f7ff fc7f 	bl	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013452:	4629      	mov	r1, r5
 8013454:	4620      	mov	r0, r4
 8013456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801345a:	f7ff bc79 	b.w	8012d50 <_ZN8touchgfx9Container3addERNS_8DrawableE>

0801345e <_ZN8touchgfx10ClickEventD0Ev>:
 801345e:	b510      	push	{r4, lr}
 8013460:	4604      	mov	r4, r0
 8013462:	210c      	movs	r1, #12
 8013464:	f00b fb5f 	bl	801eb26 <_ZdlPvj>
 8013468:	4620      	mov	r0, r4
 801346a:	bd10      	pop	{r4, pc}

0801346c <_ZN8touchgfx9DragEventD0Ev>:
 801346c:	b510      	push	{r4, lr}
 801346e:	4604      	mov	r4, r0
 8013470:	2110      	movs	r1, #16
 8013472:	f00b fb58 	bl	801eb26 <_ZdlPvj>
 8013476:	4620      	mov	r0, r4
 8013478:	bd10      	pop	{r4, pc}

0801347a <_ZN8touchgfx19ScrollableContainerD0Ev>:
 801347a:	b510      	push	{r4, lr}
 801347c:	4604      	mov	r4, r0
 801347e:	21c0      	movs	r1, #192	@ 0xc0
 8013480:	f00b fb51 	bl	801eb26 <_ZdlPvj>
 8013484:	4620      	mov	r0, r4
 8013486:	bd10      	pop	{r4, pc}

08013488 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 8013488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801348c:	b089      	sub	sp, #36	@ 0x24
 801348e:	2300      	movs	r3, #0
 8013490:	4604      	mov	r4, r0
 8013492:	f9b1 7006 	ldrsh.w	r7, [r1, #6]
 8013496:	aa08      	add	r2, sp, #32
 8013498:	f88d 3006 	strb.w	r3, [sp, #6]
 801349c:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 80134a0:	460e      	mov	r6, r1
 80134a2:	f802 3d19 	strb.w	r3, [r2, #-25]!
 80134a6:	6803      	ldr	r3, [r0, #0]
 80134a8:	f9b1 900a 	ldrsh.w	r9, [r1, #10]
 80134ac:	f9b1 800c 	ldrsh.w	r8, [r1, #12]
 80134b0:	f10d 0106 	add.w	r1, sp, #6
 80134b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80134b8:	4798      	blx	r3
 80134ba:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 80134be:	2900      	cmp	r1, #0
 80134c0:	d035      	beq.n	801352e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 80134c2:	42a1      	cmp	r1, r4
 80134c4:	d033      	beq.n	801352e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 80134c6:	a802      	add	r0, sp, #8
 80134c8:	f007 f809 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80134cc:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	@ 0xba
 80134d0:	88a3      	ldrh	r3, [r4, #4]
 80134d2:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	@ 0xbc
 80134d6:	4413      	add	r3, r2
 80134d8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80134dc:	88f1      	ldrh	r1, [r6, #6]
 80134de:	1a9b      	subs	r3, r3, r2
 80134e0:	88e2      	ldrh	r2, [r4, #6]
 80134e2:	f89d e006 	ldrb.w	lr, [sp, #6]
 80134e6:	4402      	add	r2, r0
 80134e8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80134ec:	b29b      	uxth	r3, r3
 80134ee:	1a12      	subs	r2, r2, r0
 80134f0:	8930      	ldrh	r0, [r6, #8]
 80134f2:	4419      	add	r1, r3
 80134f4:	b292      	uxth	r2, r2
 80134f6:	b209      	sxth	r1, r1
 80134f8:	4410      	add	r0, r2
 80134fa:	b200      	sxth	r0, r0
 80134fc:	f1be 0f00 	cmp.w	lr, #0
 8013500:	f040 8093 	bne.w	801362a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a2>
 8013504:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 8013508:	4463      	add	r3, ip
 801350a:	b21b      	sxth	r3, r3
 801350c:	f89d c007 	ldrb.w	ip, [sp, #7]
 8013510:	f1bc 0f00 	cmp.w	ip, #0
 8013514:	f040 80b5 	bne.w	8013682 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 8013518:	f8b6 c00c 	ldrh.w	ip, [r6, #12]
 801351c:	4462      	add	r2, ip
 801351e:	b212      	sxth	r2, r2
 8013520:	f1be 0f00 	cmp.w	lr, #0
 8013524:	f000 80cc 	beq.w	80136c0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x238>
 8013528:	4290      	cmp	r0, r2
 801352a:	f040 80b2 	bne.w	8013692 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x20a>
 801352e:	f894 30ab 	ldrb.w	r3, [r4, #171]	@ 0xab
 8013532:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8013536:	2b00      	cmp	r3, #0
 8013538:	f040 809d 	bne.w	8013676 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1ee>
 801353c:	8972      	ldrh	r2, [r6, #10]
 801353e:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	@ 0xba
 8013542:	f8b4 70a6 	ldrh.w	r7, [r4, #166]	@ 0xa6
 8013546:	f8b4 e0bc 	ldrh.w	lr, [r4, #188]	@ 0xbc
 801354a:	441f      	add	r7, r3
 801354c:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	@ 0xa8
 8013550:	4413      	add	r3, r2
 8013552:	89b2      	ldrh	r2, [r6, #12]
 8013554:	4475      	add	r5, lr
 8013556:	f89d 6006 	ldrb.w	r6, [sp, #6]
 801355a:	4496      	add	lr, r2
 801355c:	b29b      	uxth	r3, r3
 801355e:	b2bf      	uxth	r7, r7
 8013560:	fa1f fe8e 	uxth.w	lr, lr
 8013564:	b2ad      	uxth	r5, r5
 8013566:	b219      	sxth	r1, r3
 8013568:	fa0f f28e 	sxth.w	r2, lr
 801356c:	b166      	cbz	r6, 8013588 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x100>
 801356e:	1bdb      	subs	r3, r3, r7
 8013570:	b29b      	uxth	r3, r3
 8013572:	b21e      	sxth	r6, r3
 8013574:	2e00      	cmp	r6, #0
 8013576:	bfbc      	itt	lt
 8013578:	425b      	neglt	r3, r3
 801357a:	b21e      	sxthlt	r6, r3
 801357c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	@ 0xa4
 8013580:	42b3      	cmp	r3, r6
 8013582:	bfac      	ite	ge
 8013584:	2600      	movge	r6, #0
 8013586:	2601      	movlt	r6, #1
 8013588:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801358c:	b173      	cbz	r3, 80135ac <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x124>
 801358e:	ebae 0305 	sub.w	r3, lr, r5
 8013592:	b29b      	uxth	r3, r3
 8013594:	fa0f fe83 	sxth.w	lr, r3
 8013598:	f1be 0f00 	cmp.w	lr, #0
 801359c:	bfbc      	itt	lt
 801359e:	425b      	neglt	r3, r3
 80135a0:	fa0f fe83 	sxthlt.w	lr, r3
 80135a4:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	@ 0xa4
 80135a8:	4573      	cmp	r3, lr
 80135aa:	db01      	blt.n	80135b0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 80135ac:	2e00      	cmp	r6, #0
 80135ae:	d03e      	beq.n	801362e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 80135b0:	2601      	movs	r6, #1
 80135b2:	b23f      	sxth	r7, r7
 80135b4:	b22d      	sxth	r5, r5
 80135b6:	4690      	mov	r8, r2
 80135b8:	4689      	mov	r9, r1
 80135ba:	f884 60ab 	strb.w	r6, [r4, #171]	@ 0xab
 80135be:	b1a0      	cbz	r0, 80135ea <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x162>
 80135c0:	f894 30be 	ldrb.w	r3, [r4, #190]	@ 0xbe
 80135c4:	b98b      	cbnz	r3, 80135ea <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x162>
 80135c6:	4a40      	ldr	r2, [pc, #256]	@ (80136c8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>)
 80135c8:	a904      	add	r1, sp, #16
 80135ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80135ce:	9204      	str	r2, [sp, #16]
 80135d0:	2202      	movs	r2, #2
 80135d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80135d6:	f88d 2014 	strb.w	r2, [sp, #20]
 80135da:	f8ad 301a 	strh.w	r3, [sp, #26]
 80135de:	6803      	ldr	r3, [r0, #0]
 80135e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135e2:	4798      	blx	r3
 80135e4:	2301      	movs	r3, #1
 80135e6:	f884 30be 	strb.w	r3, [r4, #190]	@ 0xbe
 80135ea:	f894 10ac 	ldrb.w	r1, [r4, #172]	@ 0xac
 80135ee:	b149      	cbz	r1, 8013604 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x17c>
 80135f0:	eba9 0107 	sub.w	r1, r9, r7
 80135f4:	b209      	sxth	r1, r1
 80135f6:	b12e      	cbz	r6, 8013604 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x17c>
 80135f8:	2900      	cmp	r1, #0
 80135fa:	dc3e      	bgt.n	801367a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f2>
 80135fc:	bf14      	ite	ne
 80135fe:	f04f 31ff 	movne.w	r1, #4294967295
 8013602:	2100      	moveq	r1, #0
 8013604:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8013608:	b14a      	cbz	r2, 801361e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x196>
 801360a:	eba8 0205 	sub.w	r2, r8, r5
 801360e:	b212      	sxth	r2, r2
 8013610:	b12e      	cbz	r6, 801361e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x196>
 8013612:	2a00      	cmp	r2, #0
 8013614:	dc33      	bgt.n	801367e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 8013616:	bf14      	ite	ne
 8013618:	f04f 32ff 	movne.w	r2, #4294967295
 801361c:	2200      	moveq	r2, #0
 801361e:	6823      	ldr	r3, [r4, #0]
 8013620:	4620      	mov	r0, r4
 8013622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013626:	4798      	blx	r3
 8013628:	e022      	b.n	8013670 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e8>
 801362a:	460b      	mov	r3, r1
 801362c:	e76e      	b.n	801350c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x84>
 801362e:	b1f8      	cbz	r0, 8013670 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e8>
 8013630:	f894 30be 	ldrb.w	r3, [r4, #190]	@ 0xbe
 8013634:	b9e3      	cbnz	r3, 8013670 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e8>
 8013636:	ab08      	add	r3, sp, #32
 8013638:	4620      	mov	r0, r4
 801363a:	f843 6d18 	str.w	r6, [r3, #-24]!
 801363e:	f7ff faff 	bl	8012c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013642:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8013646:	9b02      	ldr	r3, [sp, #8]
 8013648:	4298      	cmp	r0, r3
 801364a:	d011      	beq.n	8013670 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e8>
 801364c:	4b1e      	ldr	r3, [pc, #120]	@ (80136c8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>)
 801364e:	a904      	add	r1, sp, #16
 8013650:	f8ad 6016 	strh.w	r6, [sp, #22]
 8013654:	9304      	str	r3, [sp, #16]
 8013656:	2302      	movs	r3, #2
 8013658:	f8ad 6018 	strh.w	r6, [sp, #24]
 801365c:	f88d 3014 	strb.w	r3, [sp, #20]
 8013660:	f8ad 601a 	strh.w	r6, [sp, #26]
 8013664:	6803      	ldr	r3, [r0, #0]
 8013666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013668:	4798      	blx	r3
 801366a:	2301      	movs	r3, #1
 801366c:	f884 30be 	strb.w	r3, [r4, #190]	@ 0xbe
 8013670:	b009      	add	sp, #36	@ 0x24
 8013672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013676:	2600      	movs	r6, #0
 8013678:	e7a1      	b.n	80135be <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x136>
 801367a:	2101      	movs	r1, #1
 801367c:	e7c2      	b.n	8013604 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x17c>
 801367e:	2201      	movs	r2, #1
 8013680:	e7cd      	b.n	801361e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x196>
 8013682:	f1be 0f00 	cmp.w	lr, #0
 8013686:	f47f af52 	bne.w	801352e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801368a:	428b      	cmp	r3, r1
 801368c:	f43f af4f 	beq.w	801352e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 8013690:	4602      	mov	r2, r0
 8013692:	f8df e038 	ldr.w	lr, [pc, #56]	@ 80136cc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x244>
 8013696:	f8ad 0018 	strh.w	r0, [sp, #24]
 801369a:	f8cd e010 	str.w	lr, [sp, #16]
 801369e:	f04f 0e00 	mov.w	lr, #0
 80136a2:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80136a6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80136aa:	a904      	add	r1, sp, #16
 80136ac:	f88d e014 	strb.w	lr, [sp, #20]
 80136b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80136b4:	f8ad 201c 	strh.w	r2, [sp, #28]
 80136b8:	6803      	ldr	r3, [r0, #0]
 80136ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136bc:	4798      	blx	r3
 80136be:	e736      	b.n	801352e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 80136c0:	428b      	cmp	r3, r1
 80136c2:	d1e6      	bne.n	8013692 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x20a>
 80136c4:	e730      	b.n	8013528 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa0>
 80136c6:	bf00      	nop
 80136c8:	08025300 	.word	0x08025300
 80136cc:	08025314 	.word	0x08025314

080136d0 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 80136d0:	b570      	push	{r4, r5, r6, lr}
 80136d2:	b088      	sub	sp, #32
 80136d4:	2300      	movs	r3, #0
 80136d6:	460d      	mov	r5, r1
 80136d8:	4604      	mov	r4, r0
 80136da:	aa08      	add	r2, sp, #32
 80136dc:	f88d 3002 	strb.w	r3, [sp, #2]
 80136e0:	f10d 0102 	add.w	r1, sp, #2
 80136e4:	f802 3d1d 	strb.w	r3, [r2, #-29]!
 80136e8:	6803      	ldr	r3, [r0, #0]
 80136ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80136ee:	4798      	blx	r3
 80136f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80136f4:	b10b      	cbz	r3, 80136fa <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 80136f6:	792b      	ldrb	r3, [r5, #4]
 80136f8:	b133      	cbz	r3, 8013708 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 80136fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d057      	beq.n	80137b2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xe2>
 8013702:	792b      	ldrb	r3, [r5, #4]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d154      	bne.n	80137b2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xe2>
 8013708:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801370c:	2b00      	cmp	r3, #0
 801370e:	da01      	bge.n	8013714 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x44>
 8013710:	425a      	negs	r2, r3
 8013712:	b213      	sxth	r3, r2
 8013714:	f9b4 20a4 	ldrsh.w	r2, [r4, #164]	@ 0xa4
 8013718:	429a      	cmp	r2, r3
 801371a:	dc4a      	bgt.n	80137b2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xe2>
 801371c:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801371e:	4621      	mov	r1, r4
 8013720:	429a      	cmp	r2, r3
 8013722:	bfa8      	it	ge
 8013724:	461a      	movge	r2, r3
 8013726:	2a05      	cmp	r2, #5
 8013728:	bfb8      	it	lt
 801372a:	2205      	movlt	r2, #5
 801372c:	b213      	sxth	r3, r2
 801372e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8013732:	3b04      	subs	r3, #4
 8013734:	f8a4 20b0 	strh.w	r2, [r4, #176]	@ 0xb0
 8013738:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801373c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8013740:	2a00      	cmp	r2, #0
 8013742:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801374a:	bfc8      	it	gt
 801374c:	2201      	movgt	r2, #1
 801374e:	fb13 f302 	smulbb	r3, r3, r2
 8013752:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
 8013756:	792b      	ldrb	r3, [r5, #4]
 8013758:	2b01      	cmp	r3, #1
 801375a:	6823      	ldr	r3, [r4, #0]
 801375c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013760:	d129      	bne.n	80137b6 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xe6>
 8013762:	a801      	add	r0, sp, #4
 8013764:	4798      	blx	r3
 8013766:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801376a:	2601      	movs	r6, #1
 801376c:	f8a4 30b2 	strh.w	r3, [r4, #178]	@ 0xb2
 8013770:	f884 60b8 	strb.w	r6, [r4, #184]	@ 0xb8
 8013774:	f006 fa1e 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8013778:	4621      	mov	r1, r4
 801377a:	f006 fa21 	bl	8019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801377e:	792b      	ldrb	r3, [r5, #4]
 8013780:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8013784:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
 8013788:	b198      	cbz	r0, 80137b2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xe2>
 801378a:	f894 30be 	ldrb.w	r3, [r4, #190]	@ 0xbe
 801378e:	b983      	cbnz	r3, 80137b2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xe2>
 8013790:	4a0b      	ldr	r2, [pc, #44]	@ (80137c0 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xf0>)
 8013792:	a905      	add	r1, sp, #20
 8013794:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013798:	9205      	str	r2, [sp, #20]
 801379a:	2202      	movs	r2, #2
 801379c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80137a0:	f88d 2018 	strb.w	r2, [sp, #24]
 80137a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80137a8:	6803      	ldr	r3, [r0, #0]
 80137aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137ac:	4798      	blx	r3
 80137ae:	f884 60be 	strb.w	r6, [r4, #190]	@ 0xbe
 80137b2:	b008      	add	sp, #32
 80137b4:	bd70      	pop	{r4, r5, r6, pc}
 80137b6:	a803      	add	r0, sp, #12
 80137b8:	4798      	blx	r3
 80137ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80137be:	e7d4      	b.n	801376a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x9a>
 80137c0:	08025300 	.word	0x08025300

080137c4 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 80137c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80137c6:	f890 30b8 	ldrb.w	r3, [r0, #184]	@ 0xb8
 80137ca:	4604      	mov	r4, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d048      	beq.n	8013862 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 80137d0:	f8b0 00b6 	ldrh.w	r0, [r0, #182]	@ 0xb6
 80137d4:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	@ 0xb0
 80137d8:	3001      	adds	r0, #1
 80137da:	b280      	uxth	r0, r0
 80137dc:	4298      	cmp	r0, r3
 80137de:	f8a4 00b6 	strh.w	r0, [r4, #182]	@ 0xb6
 80137e2:	dc42      	bgt.n	801386a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa6>
 80137e4:	f9b4 20b4 	ldrsh.w	r2, [r4, #180]	@ 0xb4
 80137e8:	f9b4 10b2 	ldrsh.w	r1, [r4, #178]	@ 0xb2
 80137ec:	f007 fcd6 	bl	801b19c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80137f0:	4605      	mov	r5, r0
 80137f2:	b282      	uxth	r2, r0
 80137f4:	f012 0301 	ands.w	r3, r2, #1
 80137f8:	d006      	beq.n	8013808 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 80137fa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80137fe:	2800      	cmp	r0, #0
 8013800:	bfd8      	it	le
 8013802:	460b      	movle	r3, r1
 8013804:	18d5      	adds	r5, r2, r3
 8013806:	b22d      	sxth	r5, r5
 8013808:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 801380c:	2b01      	cmp	r3, #1
 801380e:	d02a      	beq.n	8013866 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 8013810:	6823      	ldr	r3, [r4, #0]
 8013812:	4621      	mov	r1, r4
 8013814:	4668      	mov	r0, sp
 8013816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801381a:	4798      	blx	r3
 801381c:	f8bd 6000 	ldrh.w	r6, [sp]
 8013820:	1bae      	subs	r6, r5, r6
 8013822:	b236      	sxth	r6, r6
 8013824:	f894 2036 	ldrb.w	r2, [r4, #54]	@ 0x36
 8013828:	b14a      	cbz	r2, 801383e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 801382a:	6823      	ldr	r3, [r4, #0]
 801382c:	4621      	mov	r1, r4
 801382e:	a802      	add	r0, sp, #8
 8013830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013834:	4798      	blx	r3
 8013836:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801383a:	1aad      	subs	r5, r5, r2
 801383c:	b22a      	sxth	r2, r5
 801383e:	6823      	ldr	r3, [r4, #0]
 8013840:	4631      	mov	r1, r6
 8013842:	4620      	mov	r0, r4
 8013844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013848:	4798      	blx	r3
 801384a:	f884 00b8 	strb.w	r0, [r4, #184]	@ 0xb8
 801384e:	f894 50b8 	ldrb.w	r5, [r4, #184]	@ 0xb8
 8013852:	b935      	cbnz	r5, 8013862 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8013854:	f006 f9ae 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8013858:	4621      	mov	r1, r4
 801385a:	f006 f9e1 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801385e:	f8a4 50b6 	strh.w	r5, [r4, #182]	@ 0xb6
 8013862:	b004      	add	sp, #16
 8013864:	bd70      	pop	{r4, r5, r6, pc}
 8013866:	2600      	movs	r6, #0
 8013868:	e7dc      	b.n	8013824 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 801386a:	2300      	movs	r3, #0
 801386c:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
 8013870:	e7ed      	b.n	801384e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

08013872 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8013872:	b470      	push	{r4, r5, r6}
 8013874:	f890 6025 	ldrb.w	r6, [r0, #37]	@ 0x25
 8013878:	461d      	mov	r5, r3
 801387a:	b11e      	cbz	r6, 8013884 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 801387c:	f890 6024 	ldrb.w	r6, [r0, #36]	@ 0x24
 8013880:	b116      	cbz	r6, 8013888 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8013882:	6028      	str	r0, [r5, #0]
 8013884:	bc70      	pop	{r4, r5, r6}
 8013886:	4770      	bx	lr
 8013888:	bc70      	pop	{r4, r5, r6}
 801388a:	f7ff b9d9 	b.w	8012c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

0801388e <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801388e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013890:	4604      	mov	r4, r0
 8013892:	4608      	mov	r0, r1
 8013894:	460d      	mov	r5, r1
 8013896:	f7ff fad0 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 801389a:	2800      	cmp	r0, #0
 801389c:	d13c      	bne.n	8013918 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8a>
 801389e:	4620      	mov	r0, r4
 80138a0:	f7ff facb 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 80138a4:	f9b5 6000 	ldrsh.w	r6, [r5]
 80138a8:	b150      	cbz	r0, 80138c0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x32>
 80138aa:	8026      	strh	r6, [r4, #0]
 80138ac:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80138b0:	8063      	strh	r3, [r4, #2]
 80138b2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80138b6:	80a3      	strh	r3, [r4, #4]
 80138b8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80138bc:	80e3      	strh	r3, [r4, #6]
 80138be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138c0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80138c4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80138c8:	42b1      	cmp	r1, r6
 80138ca:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80138ce:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80138d2:	460f      	mov	r7, r1
 80138d4:	88ed      	ldrh	r5, [r5, #6]
 80138d6:	bfa8      	it	ge
 80138d8:	4637      	movge	r7, r6
 80138da:	4293      	cmp	r3, r2
 80138dc:	4618      	mov	r0, r3
 80138de:	4476      	add	r6, lr
 80138e0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80138e4:	bfa8      	it	ge
 80138e6:	4610      	movge	r0, r2
 80138e8:	442a      	add	r2, r5
 80138ea:	88e5      	ldrh	r5, [r4, #6]
 80138ec:	4471      	add	r1, lr
 80138ee:	b236      	sxth	r6, r6
 80138f0:	8027      	strh	r7, [r4, #0]
 80138f2:	442b      	add	r3, r5
 80138f4:	b209      	sxth	r1, r1
 80138f6:	b212      	sxth	r2, r2
 80138f8:	8060      	strh	r0, [r4, #2]
 80138fa:	b21b      	sxth	r3, r3
 80138fc:	428e      	cmp	r6, r1
 80138fe:	bfac      	ite	ge
 8013900:	ebc7 0106 	rsbge	r1, r7, r6
 8013904:	ebc7 0101 	rsblt	r1, r7, r1
 8013908:	429a      	cmp	r2, r3
 801390a:	bfac      	ite	ge
 801390c:	ebc0 0202 	rsbge	r2, r0, r2
 8013910:	ebc0 0203 	rsblt	r2, r0, r3
 8013914:	80a1      	strh	r1, [r4, #4]
 8013916:	80e2      	strh	r2, [r4, #6]
 8013918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801391a <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 801391a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801391c:	460d      	mov	r5, r1
 801391e:	2300      	movs	r3, #0
 8013920:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8013922:	4606      	mov	r6, r0
 8013924:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013928:	f105 0738 	add.w	r7, r5, #56	@ 0x38
 801392c:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 8013930:	3568      	adds	r5, #104	@ 0x68
 8013932:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013936:	4669      	mov	r1, sp
 8013938:	8003      	strh	r3, [r0, #0]
 801393a:	8043      	strh	r3, [r0, #2]
 801393c:	8083      	strh	r3, [r0, #4]
 801393e:	80c3      	strh	r3, [r0, #6]
 8013940:	f8ad 3000 	strh.w	r3, [sp]
 8013944:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013948:	f8ad 2006 	strh.w	r2, [sp, #6]
 801394c:	f7ff ff9f 	bl	801388e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013950:	b16c      	cbz	r4, 801396e <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x54>
 8013952:	42bc      	cmp	r4, r7
 8013954:	d004      	beq.n	8013960 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x46>
 8013956:	42ac      	cmp	r4, r5
 8013958:	d002      	beq.n	8013960 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x46>
 801395a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801395e:	b90b      	cbnz	r3, 8013964 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x4a>
 8013960:	69a4      	ldr	r4, [r4, #24]
 8013962:	e7f5      	b.n	8013950 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x36>
 8013964:	1d21      	adds	r1, r4, #4
 8013966:	4630      	mov	r0, r6
 8013968:	f7ff ff91 	bl	801388e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801396c:	e7f8      	b.n	8013960 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x46>
 801396e:	4630      	mov	r0, r6
 8013970:	b003      	add	sp, #12
 8013972:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013974 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8013974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013978:	4b40      	ldr	r3, [pc, #256]	@ (8013a7c <_ZN8touchgfx19ScrollableContainerC1Ev+0x108>)
 801397a:	2500      	movs	r5, #0
 801397c:	2601      	movs	r6, #1
 801397e:	22ff      	movs	r2, #255	@ 0xff
 8013980:	6003      	str	r3, [r0, #0]
 8013982:	2302      	movs	r3, #2
 8013984:	4604      	mov	r4, r0
 8013986:	4611      	mov	r1, r2
 8013988:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 801398c:	2378      	movs	r3, #120	@ 0x78
 801398e:	8085      	strh	r5, [r0, #4]
 8013990:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 8013994:	80c5      	strh	r5, [r0, #6]
 8013996:	8105      	strh	r5, [r0, #8]
 8013998:	8145      	strh	r5, [r0, #10]
 801399a:	8185      	strh	r5, [r0, #12]
 801399c:	81c5      	strh	r5, [r0, #14]
 801399e:	8205      	strh	r5, [r0, #16]
 80139a0:	8245      	strh	r5, [r0, #18]
 80139a2:	6145      	str	r5, [r0, #20]
 80139a4:	6185      	str	r5, [r0, #24]
 80139a6:	61c5      	str	r5, [r0, #28]
 80139a8:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 80139ac:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
 80139b0:	6285      	str	r5, [r0, #40]	@ 0x28
 80139b2:	f880 502c 	strb.w	r5, [r0, #44]	@ 0x2c
 80139b6:	4610      	mov	r0, r2
 80139b8:	f008 fe86 	bl	801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80139bc:	4f30      	ldr	r7, [pc, #192]	@ (8013a80 <_ZN8touchgfx19ScrollableContainerC1Ev+0x10c>)
 80139be:	f894 902e 	ldrb.w	r9, [r4, #46]	@ 0x2e
 80139c2:	4680      	mov	r8, r0
 80139c4:	6320      	str	r0, [r4, #48]	@ 0x30
 80139c6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80139ca:	f884 5036 	strb.w	r5, [r4, #54]	@ 0x36
 80139ce:	f7ef fe83 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 80139d2:	f884 905e 	strb.w	r9, [r4, #94]	@ 0x5e
 80139d6:	f8c4 8060 	str.w	r8, [r4, #96]	@ 0x60
 80139da:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80139de:	63a7      	str	r7, [r4, #56]	@ 0x38
 80139e0:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
 80139e4:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 80139e8:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 80139ec:	f894 902e 	ldrb.w	r9, [r4, #46]	@ 0x2e
 80139f0:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 80139f4:	f7ef fe70 	bl	80036d8 <_ZN8touchgfx6WidgetC1Ev>
 80139f8:	2305      	movs	r3, #5
 80139fa:	66a7      	str	r7, [r4, #104]	@ 0x68
 80139fc:	f884 908e 	strb.w	r9, [r4, #142]	@ 0x8e
 8013a00:	4620      	mov	r0, r4
 8013a02:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8013a06:	2311      	movs	r3, #17
 8013a08:	f8c4 8090 	str.w	r8, [r4, #144]	@ 0x90
 8013a0c:	f884 5094 	strb.w	r5, [r4, #148]	@ 0x94
 8013a10:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
 8013a14:	f8a4 5072 	strh.w	r5, [r4, #114]	@ 0x72
 8013a18:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
 8013a1c:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8013a20:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 8013a24:	f8a4 50a2 	strh.w	r5, [r4, #162]	@ 0xa2
 8013a28:	f8a4 50a6 	strh.w	r5, [r4, #166]	@ 0xa6
 8013a2c:	f8a4 50a8 	strh.w	r5, [r4, #168]	@ 0xa8
 8013a30:	f884 50aa 	strb.w	r5, [r4, #170]	@ 0xaa
 8013a34:	f884 50ab 	strb.w	r5, [r4, #171]	@ 0xab
 8013a38:	f884 60ac 	strb.w	r6, [r4, #172]	@ 0xac
 8013a3c:	f884 60ad 	strb.w	r6, [r4, #173]	@ 0xad
 8013a40:	f884 60ae 	strb.w	r6, [r4, #174]	@ 0xae
 8013a44:	f884 50af 	strb.w	r5, [r4, #175]	@ 0xaf
 8013a48:	f8a4 50b0 	strh.w	r5, [r4, #176]	@ 0xb0
 8013a4c:	f8a4 50b2 	strh.w	r5, [r4, #178]	@ 0xb2
 8013a50:	f8a4 50b4 	strh.w	r5, [r4, #180]	@ 0xb4
 8013a54:	f8a4 50b6 	strh.w	r5, [r4, #182]	@ 0xb6
 8013a58:	f884 50b8 	strb.w	r5, [r4, #184]	@ 0xb8
 8013a5c:	f8a4 50ba 	strh.w	r5, [r4, #186]	@ 0xba
 8013a60:	f8a4 50bc 	strh.w	r5, [r4, #188]	@ 0xbc
 8013a64:	f884 50be 	strb.w	r5, [r4, #190]	@ 0xbe
 8013a68:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8013a6c:	f884 508d 	strb.w	r5, [r4, #141]	@ 0x8d
 8013a70:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8013a72:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8013a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a7a:	bf00      	nop
 8013a7c:	08025328 	.word	0x08025328
 8013a80:	08025ea4 	.word	0x08025ea4

08013a84 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 8013a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a86:	2600      	movs	r6, #0
 8013a88:	f891 30ac 	ldrb.w	r3, [r1, #172]	@ 0xac
 8013a8c:	4605      	mov	r5, r0
 8013a8e:	460c      	mov	r4, r1
 8013a90:	8006      	strh	r6, [r0, #0]
 8013a92:	8046      	strh	r6, [r0, #2]
 8013a94:	8086      	strh	r6, [r0, #4]
 8013a96:	80c6      	strh	r6, [r0, #6]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d042      	beq.n	8013b22 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9e>
 8013a9c:	680b      	ldr	r3, [r1, #0]
 8013a9e:	4668      	mov	r0, sp
 8013aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013aa4:	4798      	blx	r3
 8013aa6:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8013aaa:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d03a      	beq.n	8013b28 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa4>
 8013ab2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013ab6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	dd05      	ble.n	8013aca <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 8013abe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013ac2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8013ac6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013aca:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013ace:	42bb      	cmp	r3, r7
 8013ad0:	da27      	bge.n	8013b22 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9e>
 8013ad2:	f9bd 1000 	ldrsh.w	r1, [sp]
 8013ad6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013ada:	424a      	negs	r2, r1
 8013adc:	4439      	add	r1, r7
 8013ade:	eba3 0e40 	sub.w	lr, r3, r0, lsl #1
 8013ae2:	b209      	sxth	r1, r1
 8013ae4:	435a      	muls	r2, r3
 8013ae6:	ebae 0606 	sub.w	r6, lr, r6
 8013aea:	1ac9      	subs	r1, r1, r3
 8013aec:	434b      	muls	r3, r1
 8013aee:	fb92 f2f7 	sdiv	r2, r2, r7
 8013af2:	fb93 f3f7 	sdiv	r3, r3, r7
 8013af6:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8013afa:	4413      	add	r3, r2
 8013afc:	0079      	lsls	r1, r7, #1
 8013afe:	1af3      	subs	r3, r6, r3
 8013b00:	428b      	cmp	r3, r1
 8013b02:	da05      	bge.n	8013b10 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8c>
 8013b04:	1acb      	subs	r3, r1, r3
 8013b06:	4353      	muls	r3, r2
 8013b08:	fb93 f3f6 	sdiv	r3, r3, r6
 8013b0c:	1ad2      	subs	r2, r2, r3
 8013b0e:	460b      	mov	r3, r1
 8013b10:	8961      	ldrh	r1, [r4, #10]
 8013b12:	b280      	uxth	r0, r0
 8013b14:	80ab      	strh	r3, [r5, #4]
 8013b16:	1bc9      	subs	r1, r1, r7
 8013b18:	80ef      	strh	r7, [r5, #6]
 8013b1a:	1a09      	subs	r1, r1, r0
 8013b1c:	4410      	add	r0, r2
 8013b1e:	8069      	strh	r1, [r5, #2]
 8013b20:	8028      	strh	r0, [r5, #0]
 8013b22:	4628      	mov	r0, r5
 8013b24:	b003      	add	sp, #12
 8013b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b28:	461e      	mov	r6, r3
 8013b2a:	e7ce      	b.n	8013aca <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

08013b2c <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 8013b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b2e:	2600      	movs	r6, #0
 8013b30:	f891 30ad 	ldrb.w	r3, [r1, #173]	@ 0xad
 8013b34:	4605      	mov	r5, r0
 8013b36:	460c      	mov	r4, r1
 8013b38:	8006      	strh	r6, [r0, #0]
 8013b3a:	8046      	strh	r6, [r0, #2]
 8013b3c:	8086      	strh	r6, [r0, #4]
 8013b3e:	80c6      	strh	r6, [r0, #6]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d042      	beq.n	8013bca <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9e>
 8013b44:	680b      	ldr	r3, [r1, #0]
 8013b46:	4668      	mov	r0, sp
 8013b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b4c:	4798      	blx	r3
 8013b4e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8013b52:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d03a      	beq.n	8013bd0 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa4>
 8013b5a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013b5e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	dd05      	ble.n	8013b72 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 8013b66:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013b6a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8013b6e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013b72:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013b76:	42bb      	cmp	r3, r7
 8013b78:	da27      	bge.n	8013bca <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9e>
 8013b7a:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8013b7e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013b82:	424a      	negs	r2, r1
 8013b84:	4439      	add	r1, r7
 8013b86:	eba3 0e40 	sub.w	lr, r3, r0, lsl #1
 8013b8a:	b209      	sxth	r1, r1
 8013b8c:	435a      	muls	r2, r3
 8013b8e:	ebae 0606 	sub.w	r6, lr, r6
 8013b92:	1ac9      	subs	r1, r1, r3
 8013b94:	434b      	muls	r3, r1
 8013b96:	fb92 f2f7 	sdiv	r2, r2, r7
 8013b9a:	fb93 f3f7 	sdiv	r3, r3, r7
 8013b9e:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8013ba2:	4413      	add	r3, r2
 8013ba4:	0079      	lsls	r1, r7, #1
 8013ba6:	1af3      	subs	r3, r6, r3
 8013ba8:	428b      	cmp	r3, r1
 8013baa:	da05      	bge.n	8013bb8 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8c>
 8013bac:	1acb      	subs	r3, r1, r3
 8013bae:	4353      	muls	r3, r2
 8013bb0:	fb93 f3f6 	sdiv	r3, r3, r6
 8013bb4:	1ad2      	subs	r2, r2, r3
 8013bb6:	460b      	mov	r3, r1
 8013bb8:	8921      	ldrh	r1, [r4, #8]
 8013bba:	b280      	uxth	r0, r0
 8013bbc:	80af      	strh	r7, [r5, #4]
 8013bbe:	1bc9      	subs	r1, r1, r7
 8013bc0:	80eb      	strh	r3, [r5, #6]
 8013bc2:	1a09      	subs	r1, r1, r0
 8013bc4:	4410      	add	r0, r2
 8013bc6:	8029      	strh	r1, [r5, #0]
 8013bc8:	8068      	strh	r0, [r5, #2]
 8013bca:	4628      	mov	r0, r5
 8013bcc:	b003      	add	sp, #12
 8013bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bd0:	461e      	mov	r6, r3
 8013bd2:	e7ce      	b.n	8013b72 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

08013bd4 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8013bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd8:	4617      	mov	r7, r2
 8013bda:	2200      	movs	r2, #0
 8013bdc:	4604      	mov	r4, r0
 8013bde:	460e      	mov	r6, r1
 8013be0:	8002      	strh	r2, [r0, #0]
 8013be2:	4698      	mov	r8, r3
 8013be4:	8042      	strh	r2, [r0, #2]
 8013be6:	8082      	strh	r2, [r0, #4]
 8013be8:	80c2      	strh	r2, [r0, #6]
 8013bea:	4638      	mov	r0, r7
 8013bec:	f7ff f925 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013bf0:	4605      	mov	r5, r0
 8013bf2:	b998      	cbnz	r0, 8013c1c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8013bf4:	4640      	mov	r0, r8
 8013bf6:	f7ff f920 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013bfa:	f896 202c 	ldrb.w	r2, [r6, #44]	@ 0x2c
 8013bfe:	f896 102d 	ldrb.w	r1, [r6, #45]	@ 0x2d
 8013c02:	b908      	cbnz	r0, 8013c08 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8013c04:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8013c08:	8933      	ldrh	r3, [r6, #8]
 8013c0a:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8013c0e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013c12:	8022      	strh	r2, [r4, #0]
 8013c14:	8067      	strh	r7, [r4, #2]
 8013c16:	1b58      	subs	r0, r3, r5
 8013c18:	80e1      	strh	r1, [r4, #6]
 8013c1a:	80a0      	strh	r0, [r4, #4]
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c22 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 8013c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c26:	4604      	mov	r4, r0
 8013c28:	2000      	movs	r0, #0
 8013c2a:	460f      	mov	r7, r1
 8013c2c:	4616      	mov	r6, r2
 8013c2e:	8020      	strh	r0, [r4, #0]
 8013c30:	4698      	mov	r8, r3
 8013c32:	8060      	strh	r0, [r4, #2]
 8013c34:	80a0      	strh	r0, [r4, #4]
 8013c36:	80e0      	strh	r0, [r4, #6]
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7ff f8fe 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013c3e:	4605      	mov	r5, r0
 8013c40:	b998      	cbnz	r0, 8013c6a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 8013c42:	4630      	mov	r0, r6
 8013c44:	f7ff f8f9 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013c48:	f897 602c 	ldrb.w	r6, [r7, #44]	@ 0x2c
 8013c4c:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8013c50:	b908      	cbnz	r0, 8013c56 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 8013c52:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8013c56:	897a      	ldrh	r2, [r7, #10]
 8013c58:	f8b8 3000 	ldrh.w	r3, [r8]
 8013c5c:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8013c60:	8066      	strh	r6, [r4, #2]
 8013c62:	8023      	strh	r3, [r4, #0]
 8013c64:	1b50      	subs	r0, r2, r5
 8013c66:	80a1      	strh	r1, [r4, #4]
 8013c68:	80e0      	strh	r0, [r4, #6]
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c70 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 8013c70:	b570      	push	{r4, r5, r6, lr}
 8013c72:	b08a      	sub	sp, #40	@ 0x28
 8013c74:	4604      	mov	r4, r0
 8013c76:	4601      	mov	r1, r0
 8013c78:	a802      	add	r0, sp, #8
 8013c7a:	f104 0638 	add.w	r6, r4, #56	@ 0x38
 8013c7e:	f7ff ff01 	bl	8013a84 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8013c82:	4621      	mov	r1, r4
 8013c84:	a804      	add	r0, sp, #16
 8013c86:	f7ff ff51 	bl	8013b2c <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 8013c8a:	ab04      	add	r3, sp, #16
 8013c8c:	aa02      	add	r2, sp, #8
 8013c8e:	4621      	mov	r1, r4
 8013c90:	a806      	add	r0, sp, #24
 8013c92:	f7ff ff9f 	bl	8013bd4 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 8013c96:	ab04      	add	r3, sp, #16
 8013c98:	aa02      	add	r2, sp, #8
 8013c9a:	4621      	mov	r1, r4
 8013c9c:	a808      	add	r0, sp, #32
 8013c9e:	f7ff ffc0 	bl	8013c22 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8013ca2:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8013ca6:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 8013caa:	429a      	cmp	r2, r3
 8013cac:	da02      	bge.n	8013cb4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8013cae:	4630      	mov	r0, r6
 8013cb0:	f006 fb6b 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8013cb4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013cb8:	f104 0568 	add.w	r5, r4, #104	@ 0x68
 8013cbc:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	da02      	bge.n	8013cca <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	f006 fb60 	bl	801a38a <_ZNK8touchgfx8Drawable10invalidateEv>
 8013cca:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 8013cce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013cd2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8013cd6:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8013cda:	9000      	str	r0, [sp, #0]
 8013cdc:	4630      	mov	r0, r6
 8013cde:	f7ed f867 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013ce2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8013ce6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8013cea:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8013cee:	9000      	str	r0, [sp, #0]
 8013cf0:	4628      	mov	r0, r5
 8013cf2:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8013cf6:	f7ed f85b 	bl	8000db0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013cfa:	8922      	ldrh	r2, [r4, #8]
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	a806      	add	r0, sp, #24
 8013d00:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013d04:	8962      	ldrh	r2, [r4, #10]
 8013d06:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013d0a:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 8013d0e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013d12:	f7ff f892 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d16:	b920      	cbnz	r0, 8013d22 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xb2>
 8013d18:	6823      	ldr	r3, [r4, #0]
 8013d1a:	a906      	add	r1, sp, #24
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	691b      	ldr	r3, [r3, #16]
 8013d20:	4798      	blx	r3
 8013d22:	a808      	add	r0, sp, #32
 8013d24:	f7ff f889 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d28:	b920      	cbnz	r0, 8013d34 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xc4>
 8013d2a:	6823      	ldr	r3, [r4, #0]
 8013d2c:	a908      	add	r1, sp, #32
 8013d2e:	4620      	mov	r0, r4
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	4798      	blx	r3
 8013d34:	b00a      	add	sp, #40	@ 0x28
 8013d36:	bd70      	pop	{r4, r5, r6, pc}

08013d38 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8013d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d3c:	790b      	ldrb	r3, [r1, #4]
 8013d3e:	b0a3      	sub	sp, #140	@ 0x8c
 8013d40:	4604      	mov	r4, r0
 8013d42:	460d      	mov	r5, r1
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f040 8124 	bne.w	8013f92 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x25a>
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	f880 20aa 	strb.w	r2, [r0, #170]	@ 0xaa
 8013d50:	f890 20b8 	ldrb.w	r2, [r0, #184]	@ 0xb8
 8013d54:	b142      	cbz	r2, 8013d68 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x30>
 8013d56:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8013d5a:	f8a0 30b6 	strh.w	r3, [r0, #182]	@ 0xb6
 8013d5e:	f005 ff29 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8013d62:	4621      	mov	r1, r4
 8013d64:	f005 ff5c 	bl	8019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8013d68:	4ba4      	ldr	r3, [pc, #656]	@ (8013ffc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c4>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	f893 a045 	ldrb.w	sl, [r3, #69]	@ 0x45
 8013d70:	2300      	movs	r3, #0
 8013d72:	f1ba 0f03 	cmp.w	sl, #3
 8013d76:	f8a4 30ba 	strh.w	r3, [r4, #186]	@ 0xba
 8013d7a:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 8013d7e:	f340 80fe 	ble.w	8013f7e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x246>
 8013d82:	f1ba 0f0c 	cmp.w	sl, #12
 8013d86:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8013d8a:	f04f 0303 	mov.w	r3, #3
 8013d8e:	f04f 0700 	mov.w	r7, #0
 8013d92:	bfd8      	it	le
 8013d94:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8013d98:	a90a      	add	r1, sp, #40	@ 0x28
 8013d9a:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8013d9e:	4620      	mov	r0, r4
 8013da0:	f8ad 702a 	strh.w	r7, [sp, #42]	@ 0x2a
 8013da4:	f04f 0901 	mov.w	r9, #1
 8013da8:	bfd8      	it	le
 8013daa:	fb92 f3f3 	sdivle	r3, r2, r3
 8013dae:	9301      	str	r3, [sp, #4]
 8013db0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013db4:	9306      	str	r3, [sp, #24]
 8013db6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013dba:	9307      	str	r3, [sp, #28]
 8013dbc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013dc0:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8013dc4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013dc8:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013dcc:	6823      	ldr	r3, [r4, #0]
 8013dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dd0:	4798      	blx	r3
 8013dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8013dd6:	f8cd a008 	str.w	sl, [sp, #8]
 8013dda:	9303      	str	r3, [sp, #12]
 8013ddc:	9b02      	ldr	r3, [sp, #8]
 8013dde:	a80e      	add	r0, sp, #56	@ 0x38
 8013de0:	9a01      	ldr	r2, [sp, #4]
 8013de2:	f109 3bff 	add.w	fp, r9, #4294967295
 8013de6:	4986      	ldr	r1, [pc, #536]	@ (8014000 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c8>)
 8013de8:	fb93 f8f2 	sdiv	r8, r3, r2
 8013dec:	2250      	movs	r2, #80	@ 0x50
 8013dee:	fa1f f888 	uxth.w	r8, r8
 8013df2:	f00c fa88 	bl	8020306 <memcpy>
 8013df6:	ab0e      	add	r3, sp, #56	@ 0x38
 8013df8:	eb03 06c9 	add.w	r6, r3, r9, lsl #3
 8013dfc:	3e04      	subs	r6, #4
 8013dfe:	2300      	movs	r3, #0
 8013e00:	88e9      	ldrh	r1, [r5, #6]
 8013e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e04:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013e08:	fb13 f308 	smulbb	r3, r3, r8
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	4419      	add	r1, r3
 8013e10:	9304      	str	r3, [sp, #16]
 8013e12:	b209      	sxth	r1, r1
 8013e14:	2900      	cmp	r1, #0
 8013e16:	db49      	blt.n	8013eac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x174>
 8013e18:	9b06      	ldr	r3, [sp, #24]
 8013e1a:	4299      	cmp	r1, r3
 8013e1c:	da46      	bge.n	8013eac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x174>
 8013e1e:	6833      	ldr	r3, [r6, #0]
 8013e20:	892a      	ldrh	r2, [r5, #8]
 8013e22:	fb13 f308 	smulbb	r3, r3, r8
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	441a      	add	r2, r3
 8013e2a:	9305      	str	r3, [sp, #20]
 8013e2c:	b212      	sxth	r2, r2
 8013e2e:	2a00      	cmp	r2, #0
 8013e30:	db3c      	blt.n	8013eac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x174>
 8013e32:	9b07      	ldr	r3, [sp, #28]
 8013e34:	429a      	cmp	r2, r3
 8013e36:	da39      	bge.n	8013eac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x174>
 8013e38:	ab09      	add	r3, sp, #36	@ 0x24
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	f7fe ff00 	bl	8012c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013e40:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013e42:	b399      	cbz	r1, 8013eac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x174>
 8013e44:	42b9      	cmp	r1, r7
 8013e46:	d031      	beq.n	8013eac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x174>
 8013e48:	428c      	cmp	r4, r1
 8013e4a:	d02f      	beq.n	8013eac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x174>
 8013e4c:	a80c      	add	r0, sp, #48	@ 0x30
 8013e4e:	f006 fb46 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e52:	2002      	movs	r0, #2
 8013e54:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8013e58:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013e5c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8013e60:	fb92 f2f0 	sdiv	r2, r2, r0
 8013e64:	440b      	add	r3, r1
 8013e66:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8013e6a:	440a      	add	r2, r1
 8013e6c:	1a99      	subs	r1, r3, r2
 8013e6e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8013e72:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8013e76:	441a      	add	r2, r3
 8013e78:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8013e7c:	fb93 f3f0 	sdiv	r3, r3, r0
 8013e80:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	@ 0x32
 8013e84:	4403      	add	r3, r0
 8013e86:	1ad3      	subs	r3, r2, r3
 8013e88:	9a03      	ldr	r2, [sp, #12]
 8013e8a:	435b      	muls	r3, r3
 8013e8c:	fb01 3301 	mla	r3, r1, r1, r3
 8013e90:	4293      	cmp	r3, r2
 8013e92:	d20b      	bcs.n	8013eac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x174>
 8013e94:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8013e98:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8013e9a:	f8a4 20ba 	strh.w	r2, [r4, #186]	@ 0xba
 8013e9e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013ea2:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
 8013ea6:	f8a4 20bc 	strh.w	r2, [r4, #188]	@ 0xbc
 8013eaa:	9303      	str	r3, [sp, #12]
 8013eac:	f10b 0b02 	add.w	fp, fp, #2
 8013eb0:	3610      	adds	r6, #16
 8013eb2:	f1bb 0f09 	cmp.w	fp, #9
 8013eb6:	dda2      	ble.n	8013dfe <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xc6>
 8013eb8:	9b02      	ldr	r3, [sp, #8]
 8013eba:	f109 0901 	add.w	r9, r9, #1
 8013ebe:	4453      	add	r3, sl
 8013ec0:	9302      	str	r3, [sp, #8]
 8013ec2:	9b01      	ldr	r3, [sp, #4]
 8013ec4:	454b      	cmp	r3, r9
 8013ec6:	da89      	bge.n	8013ddc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xa4>
 8013ec8:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013ecc:	42a3      	cmp	r3, r4
 8013ece:	bf04      	itt	eq
 8013ed0:	2300      	moveq	r3, #0
 8013ed2:	f8c4 3098 	streq.w	r3, [r4, #152]	@ 0x98
 8013ed6:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8013eda:	2900      	cmp	r1, #0
 8013edc:	d034      	beq.n	8013f48 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x210>
 8013ede:	2600      	movs	r6, #0
 8013ee0:	a80c      	add	r0, sp, #48	@ 0x30
 8013ee2:	f884 60be 	strb.w	r6, [r4, #190]	@ 0xbe
 8013ee6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013eea:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8013eee:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8013ef2:	f8a4 30a8 	strh.w	r3, [r4, #168]	@ 0xa8
 8013ef6:	f006 faf2 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013efa:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	@ 0xba
 8013efe:	88a2      	ldrh	r2, [r4, #4]
 8013f00:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	@ 0xbc
 8013f04:	441a      	add	r2, r3
 8013f06:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8013f0a:	7929      	ldrb	r1, [r5, #4]
 8013f0c:	1ad2      	subs	r2, r2, r3
 8013f0e:	88eb      	ldrh	r3, [r5, #6]
 8013f10:	f88d 103c 	strb.w	r1, [sp, #60]	@ 0x3c
 8013f14:	a90e      	add	r1, sp, #56	@ 0x38
 8013f16:	441a      	add	r2, r3
 8013f18:	88e3      	ldrh	r3, [r4, #6]
 8013f1a:	f8ad 6042 	strh.w	r6, [sp, #66]	@ 0x42
 8013f1e:	4403      	add	r3, r0
 8013f20:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 8013f24:	f8ad 203e 	strh.w	r2, [sp, #62]	@ 0x3e
 8013f28:	1a1b      	subs	r3, r3, r0
 8013f2a:	8928      	ldrh	r0, [r5, #8]
 8013f2c:	4403      	add	r3, r0
 8013f2e:	4835      	ldr	r0, [pc, #212]	@ (8014004 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2cc>)
 8013f30:	900e      	str	r0, [sp, #56]	@ 0x38
 8013f32:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8013f36:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013f3a:	6803      	ldr	r3, [r0, #0]
 8013f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f3e:	4798      	blx	r3
 8013f40:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013f44:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8013f48:	2300      	movs	r3, #0
 8013f4a:	f894 20aa 	ldrb.w	r2, [r4, #170]	@ 0xaa
 8013f4e:	f884 30ab 	strb.w	r3, [r4, #171]	@ 0xab
 8013f52:	b112      	cbz	r2, 8013f5a <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x222>
 8013f54:	f894 30ae 	ldrb.w	r3, [r4, #174]	@ 0xae
 8013f58:	b90b      	cbnz	r3, 8013f5e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x226>
 8013f5a:	f894 30af 	ldrb.w	r3, [r4, #175]	@ 0xaf
 8013f5e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8013f62:	b112      	cbz	r2, 8013f6a <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x232>
 8013f64:	f894 30ae 	ldrb.w	r3, [r4, #174]	@ 0xae
 8013f68:	b90b      	cbnz	r3, 8013f6e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x236>
 8013f6a:	f894 30af 	ldrb.w	r3, [r4, #175]	@ 0xaf
 8013f6e:	f884 308d 	strb.w	r3, [r4, #141]	@ 0x8d
 8013f72:	4620      	mov	r0, r4
 8013f74:	f7ff fe7c 	bl	8013c70 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8013f78:	b023      	add	sp, #140	@ 0x8c
 8013f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f7e:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8013f82:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8013f86:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f7fe fe58 	bl	8012c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013f90:	e79a      	b.n	8013ec8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x190>
 8013f92:	2b02      	cmp	r3, #2
 8013f94:	d0f0      	beq.n	8013f78 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x240>
 8013f96:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
 8013f9a:	b331      	cbz	r1, 8013fea <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2b2>
 8013f9c:	a80c      	add	r0, sp, #48	@ 0x30
 8013f9e:	f006 fa9e 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013fa2:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	@ 0xba
 8013fa6:	88a2      	ldrh	r2, [r4, #4]
 8013fa8:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	@ 0xbc
 8013fac:	441a      	add	r2, r3
 8013fae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8013fb2:	7929      	ldrb	r1, [r5, #4]
 8013fb4:	1ad2      	subs	r2, r2, r3
 8013fb6:	88eb      	ldrh	r3, [r5, #6]
 8013fb8:	f88d 103c 	strb.w	r1, [sp, #60]	@ 0x3c
 8013fbc:	a90e      	add	r1, sp, #56	@ 0x38
 8013fbe:	441a      	add	r2, r3
 8013fc0:	88e3      	ldrh	r3, [r4, #6]
 8013fc2:	4403      	add	r3, r0
 8013fc4:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 8013fc8:	f8ad 203e 	strh.w	r2, [sp, #62]	@ 0x3e
 8013fcc:	1a1b      	subs	r3, r3, r0
 8013fce:	8928      	ldrh	r0, [r5, #8]
 8013fd0:	4403      	add	r3, r0
 8013fd2:	480c      	ldr	r0, [pc, #48]	@ (8014004 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2cc>)
 8013fd4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013fd8:	2300      	movs	r3, #0
 8013fda:	900e      	str	r0, [sp, #56]	@ 0x38
 8013fdc:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8013fe0:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8013fe4:	6803      	ldr	r3, [r0, #0]
 8013fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fe8:	4798      	blx	r3
 8013fea:	2300      	movs	r3, #0
 8013fec:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8013ff0:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8013ff4:	f884 30aa 	strb.w	r3, [r4, #170]	@ 0xaa
 8013ff8:	e7a6      	b.n	8013f48 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x210>
 8013ffa:	bf00      	nop
 8013ffc:	20024e34 	.word	0x20024e34
 8014000:	080227f8 	.word	0x080227f8
 8014004:	08025300 	.word	0x08025300

08014008 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8014008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801400a:	4605      	mov	r5, r0
 801400c:	4616      	mov	r6, r2
 801400e:	460c      	mov	r4, r1
 8014010:	b919      	cbnz	r1, 801401a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014012:	b912      	cbnz	r2, 801401a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014014:	2000      	movs	r0, #0
 8014016:	b003      	add	sp, #12
 8014018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801401a:	682b      	ldr	r3, [r5, #0]
 801401c:	4629      	mov	r1, r5
 801401e:	4668      	mov	r0, sp
 8014020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014024:	4798      	blx	r3
 8014026:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801402a:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 801402e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8014032:	4288      	cmp	r0, r1
 8014034:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8014038:	da36      	bge.n	80140a8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa0>
 801403a:	2c00      	cmp	r4, #0
 801403c:	dd2a      	ble.n	8014094 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 801403e:	191a      	adds	r2, r3, r4
 8014040:	2a00      	cmp	r2, #0
 8014042:	dd01      	ble.n	8014048 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8014044:	425b      	negs	r3, r3
 8014046:	b21c      	sxth	r4, r3
 8014048:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801404c:	429f      	cmp	r7, r3
 801404e:	dd36      	ble.n	80140be <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xb6>
 8014050:	2e00      	cmp	r6, #0
 8014052:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8014056:	dd29      	ble.n	80140ac <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa4>
 8014058:	1993      	adds	r3, r2, r6
 801405a:	2b00      	cmp	r3, #0
 801405c:	dd04      	ble.n	8014068 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 801405e:	4252      	negs	r2, r2
 8014060:	b216      	sxth	r6, r2
 8014062:	b90c      	cbnz	r4, 8014068 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8014064:	2e00      	cmp	r6, #0
 8014066:	d0d5      	beq.n	8014014 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8014068:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	@ 0xa0
 801406c:	4632      	mov	r2, r6
 801406e:	4621      	mov	r1, r4
 8014070:	4628      	mov	r0, r5
 8014072:	4423      	add	r3, r4
 8014074:	f8a5 30a0 	strh.w	r3, [r5, #160]	@ 0xa0
 8014078:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	@ 0xa2
 801407c:	4433      	add	r3, r6
 801407e:	f8a5 30a2 	strh.w	r3, [r5, #162]	@ 0xa2
 8014082:	682b      	ldr	r3, [r5, #0]
 8014084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014088:	4798      	blx	r3
 801408a:	4628      	mov	r0, r5
 801408c:	f7ff fdf0 	bl	8013c70 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8014090:	2001      	movs	r0, #1
 8014092:	e7c0      	b.n	8014016 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 8014094:	d0d8      	beq.n	8014048 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8014096:	440b      	add	r3, r1
 8014098:	b29b      	uxth	r3, r3
 801409a:	fa04 f283 	sxtah	r2, r4, r3
 801409e:	4282      	cmp	r2, r0
 80140a0:	dad2      	bge.n	8014048 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80140a2:	1ac4      	subs	r4, r0, r3
 80140a4:	b224      	sxth	r4, r4
 80140a6:	e7cf      	b.n	8014048 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80140a8:	2400      	movs	r4, #0
 80140aa:	e7cd      	b.n	8014048 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80140ac:	d007      	beq.n	80140be <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xb6>
 80140ae:	443a      	add	r2, r7
 80140b0:	b292      	uxth	r2, r2
 80140b2:	fa06 f182 	sxtah	r1, r6, r2
 80140b6:	4299      	cmp	r1, r3
 80140b8:	dad6      	bge.n	8014068 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 80140ba:	1a9a      	subs	r2, r3, r2
 80140bc:	e7d0      	b.n	8014060 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 80140be:	2c00      	cmp	r4, #0
 80140c0:	d0a8      	beq.n	8014014 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 80140c2:	2600      	movs	r6, #0
 80140c4:	e7d0      	b.n	8014068 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

080140c6 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 80140c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80140ca:	6803      	ldr	r3, [r0, #0]
 80140cc:	4601      	mov	r1, r0
 80140ce:	4604      	mov	r4, r0
 80140d0:	4668      	mov	r0, sp
 80140d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80140d6:	4798      	blx	r3
 80140d8:	f9bd 8002 	ldrsh.w	r8, [sp, #2]
 80140dc:	f9bd 6000 	ldrsh.w	r6, [sp]
 80140e0:	f1b8 0f00 	cmp.w	r8, #0
 80140e4:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80140e8:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80140ec:	dd08      	ble.n	8014100 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3a>
 80140ee:	f1c8 0200 	rsb	r2, r8, #0
 80140f2:	6823      	ldr	r3, [r4, #0]
 80140f4:	2100      	movs	r1, #0
 80140f6:	4620      	mov	r0, r4
 80140f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80140fc:	b212      	sxth	r2, r2
 80140fe:	4798      	blx	r3
 8014100:	2e00      	cmp	r6, #0
 8014102:	dd07      	ble.n	8014114 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x4e>
 8014104:	4271      	negs	r1, r6
 8014106:	6823      	ldr	r3, [r4, #0]
 8014108:	2200      	movs	r2, #0
 801410a:	4620      	mov	r0, r4
 801410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014110:	b209      	sxth	r1, r1
 8014112:	4798      	blx	r3
 8014114:	eb05 0308 	add.w	r3, r5, r8
 8014118:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801411c:	b29b      	uxth	r3, r3
 801411e:	b219      	sxth	r1, r3
 8014120:	428a      	cmp	r2, r1
 8014122:	dd12      	ble.n	801414a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x84>
 8014124:	1a9a      	subs	r2, r3, r2
 8014126:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	@ 0xa2
 801412a:	2100      	movs	r1, #0
 801412c:	4620      	mov	r0, r4
 801412e:	b212      	sxth	r2, r2
 8014130:	4542      	cmp	r2, r8
 8014132:	bfb8      	it	lt
 8014134:	4642      	movlt	r2, r8
 8014136:	b292      	uxth	r2, r2
 8014138:	1a9b      	subs	r3, r3, r2
 801413a:	4252      	negs	r2, r2
 801413c:	f8a4 30a2 	strh.w	r3, [r4, #162]	@ 0xa2
 8014140:	b212      	sxth	r2, r2
 8014142:	6823      	ldr	r3, [r4, #0]
 8014144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014148:	4798      	blx	r3
 801414a:	4437      	add	r7, r6
 801414c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8014150:	b23f      	sxth	r7, r7
 8014152:	42b9      	cmp	r1, r7
 8014154:	dd11      	ble.n	801417a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0xb4>
 8014156:	1a7f      	subs	r7, r7, r1
 8014158:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	@ 0xa0
 801415c:	2200      	movs	r2, #0
 801415e:	4620      	mov	r0, r4
 8014160:	42be      	cmp	r6, r7
 8014162:	bfb8      	it	lt
 8014164:	463e      	movlt	r6, r7
 8014166:	b2b6      	uxth	r6, r6
 8014168:	1b9b      	subs	r3, r3, r6
 801416a:	4276      	negs	r6, r6
 801416c:	f8a4 30a0 	strh.w	r3, [r4, #160]	@ 0xa0
 8014170:	b231      	sxth	r1, r6
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014178:	4798      	blx	r3
 801417a:	4620      	mov	r0, r4
 801417c:	b002      	add	sp, #8
 801417e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014182:	f7ff bd75 	b.w	8013c70 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

08014186 <_ZN8touchgfx19ScrollableContainer5resetEv>:
 8014186:	b510      	push	{r4, lr}
 8014188:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	@ 0xa2
 801418c:	4604      	mov	r4, r0
 801418e:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	@ 0xa0
 8014192:	6803      	ldr	r3, [r0, #0]
 8014194:	4252      	negs	r2, r2
 8014196:	4249      	negs	r1, r1
 8014198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801419c:	b212      	sxth	r2, r2
 801419e:	b209      	sxth	r1, r1
 80141a0:	4798      	blx	r3
 80141a2:	2300      	movs	r3, #0
 80141a4:	4620      	mov	r0, r4
 80141a6:	f8a4 30a0 	strh.w	r3, [r4, #160]	@ 0xa0
 80141aa:	f8a4 30a2 	strh.w	r3, [r4, #162]	@ 0xa2
 80141ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141b2:	f7ff bd5d 	b.w	8013c70 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

080141b6 <_ZN8touchgfx19ScrollableContainer20setScrollbarsVisibleEb>:
 80141b6:	f880 10ae 	strb.w	r1, [r0, #174]	@ 0xae
 80141ba:	4770      	bx	lr

080141bc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80141bc:	2301      	movs	r3, #1
 80141be:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 80141c2:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
 80141c6:	4770      	bx	lr

080141c8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80141c8:	2301      	movs	r3, #1
 80141ca:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 80141ce:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
 80141d2:	4770      	bx	lr

080141d4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80141d4:	6843      	ldr	r3, [r0, #4]
 80141d6:	2201      	movs	r2, #1
 80141d8:	725a      	strb	r2, [r3, #9]
 80141da:	6840      	ldr	r0, [r0, #4]
 80141dc:	6803      	ldr	r3, [r0, #0]
 80141de:	691b      	ldr	r3, [r3, #16]
 80141e0:	4718      	bx	r3

080141e2 <_ZN8touchgfx3HAL8flushDMAEv>:
 80141e2:	6840      	ldr	r0, [r0, #4]
 80141e4:	6803      	ldr	r3, [r0, #0]
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	4718      	bx	r3

080141ea <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 80141ea:	4770      	bx	lr

080141ec <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 80141ec:	4608      	mov	r0, r1
 80141ee:	4770      	bx	lr

080141f0 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 80141f0:	4770      	bx	lr
	...

080141f4 <_ZN8touchgfx3HAL10beginFrameEv>:
 80141f4:	4b04      	ldr	r3, [pc, #16]	@ (8014208 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	b123      	cbz	r3, 8014204 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80141fa:	f890 005a 	ldrb.w	r0, [r0, #90]	@ 0x5a
 80141fe:	f080 0001 	eor.w	r0, r0, #1
 8014202:	4770      	bx	lr
 8014204:	2001      	movs	r0, #1
 8014206:	4770      	bx	lr
 8014208:	20024e32 	.word	0x20024e32

0801420c <_ZN8touchgfx3HAL8endFrameEv>:
 801420c:	b510      	push	{r4, lr}
 801420e:	4604      	mov	r4, r0
 8014210:	6840      	ldr	r0, [r0, #4]
 8014212:	6803      	ldr	r3, [r0, #0]
 8014214:	689b      	ldr	r3, [r3, #8]
 8014216:	4798      	blx	r3
 8014218:	f894 3059 	ldrb.w	r3, [r4, #89]	@ 0x59
 801421c:	b113      	cbz	r3, 8014224 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801421e:	2301      	movs	r3, #1
 8014220:	f884 305a 	strb.w	r3, [r4, #90]	@ 0x5a
 8014224:	bd10      	pop	{r4, pc}

08014226 <_ZN8touchgfx3HAL9taskEntryEv>:
 8014226:	b508      	push	{r3, lr}
 8014228:	6803      	ldr	r3, [r0, #0]
 801422a:	4604      	mov	r4, r0
 801422c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801422e:	4798      	blx	r3
 8014230:	6823      	ldr	r3, [r4, #0]
 8014232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014234:	4620      	mov	r0, r4
 8014236:	4798      	blx	r3
 8014238:	f7fd f9ee 	bl	8011618 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801423c:	6823      	ldr	r3, [r4, #0]
 801423e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014240:	e7f8      	b.n	8014234 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08014244 <_ZN8touchgfx3HAL4tickEv>:
 8014244:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014246:	6803      	ldr	r3, [r0, #0]
 8014248:	4604      	mov	r4, r0
 801424a:	4d5d      	ldr	r5, [pc, #372]	@ (80143c0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014250:	4798      	blx	r3
 8014252:	2800      	cmp	r0, #0
 8014254:	f000 8092 	beq.w	801437c <_ZN8touchgfx3HAL4tickEv+0x138>
 8014258:	2001      	movs	r0, #1
 801425a:	2600      	movs	r6, #0
 801425c:	f7fd fdbc 	bl	8011dd8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014260:	f894 3056 	ldrb.w	r3, [r4, #86]	@ 0x56
 8014264:	f884 6047 	strb.w	r6, [r4, #71]	@ 0x47
 8014268:	f884 3057 	strb.w	r3, [r4, #87]	@ 0x57
 801426c:	f894 3065 	ldrb.w	r3, [r4, #101]	@ 0x65
 8014270:	f884 6056 	strb.w	r6, [r4, #86]	@ 0x56
 8014274:	b133      	cbz	r3, 8014284 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014276:	6823      	ldr	r3, [r4, #0]
 8014278:	4620      	mov	r0, r4
 801427a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801427e:	4798      	blx	r3
 8014280:	f884 6065 	strb.w	r6, [r4, #101]	@ 0x65
 8014284:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014288:	2601      	movs	r6, #1
 801428a:	6862      	ldr	r2, [r4, #4]
 801428c:	f083 0301 	eor.w	r3, r3, #1
 8014290:	702e      	strb	r6, [r5, #0]
 8014292:	7253      	strb	r3, [r2, #9]
 8014294:	f005 fc8e 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8014298:	6803      	ldr	r3, [r0, #0]
 801429a:	4631      	mov	r1, r6
 801429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801429e:	4798      	blx	r3
 80142a0:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 80142a4:	b90b      	cbnz	r3, 80142aa <_ZN8touchgfx3HAL4tickEv+0x66>
 80142a6:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
 80142aa:	f005 fc83 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 80142ae:	6803      	ldr	r3, [r0, #0]
 80142b0:	695b      	ldr	r3, [r3, #20]
 80142b2:	4798      	blx	r3
 80142b4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80142b6:	6803      	ldr	r3, [r0, #0]
 80142b8:	691b      	ldr	r3, [r3, #16]
 80142ba:	4798      	blx	r3
 80142bc:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 80142c0:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
 80142c4:	3b01      	subs	r3, #1
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	f884 3057 	strb.w	r3, [r4, #87]	@ 0x57
 80142cc:	b10a      	cbz	r2, 80142d2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d1eb      	bne.n	80142aa <_ZN8touchgfx3HAL4tickEv+0x66>
 80142d2:	4a3c      	ldr	r2, [pc, #240]	@ (80143c4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80142d4:	f994 1054 	ldrsb.w	r1, [r4, #84]	@ 0x54
 80142d8:	7813      	ldrb	r3, [r2, #0]
 80142da:	3301      	adds	r3, #1
 80142dc:	b25b      	sxtb	r3, r3
 80142de:	4299      	cmp	r1, r3
 80142e0:	7013      	strb	r3, [r2, #0]
 80142e2:	dc10      	bgt.n	8014306 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80142e4:	2300      	movs	r3, #0
 80142e6:	68e0      	ldr	r0, [r4, #12]
 80142e8:	a902      	add	r1, sp, #8
 80142ea:	7013      	strb	r3, [r2, #0]
 80142ec:	aa03      	add	r2, sp, #12
 80142ee:	6803      	ldr	r3, [r0, #0]
 80142f0:	68db      	ldr	r3, [r3, #12]
 80142f2:	4798      	blx	r3
 80142f4:	6823      	ldr	r3, [r4, #0]
 80142f6:	2800      	cmp	r0, #0
 80142f8:	d04c      	beq.n	8014394 <_ZN8touchgfx3HAL4tickEv+0x150>
 80142fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80142fe:	4620      	mov	r0, r4
 8014300:	9a03      	ldr	r2, [sp, #12]
 8014302:	9902      	ldr	r1, [sp, #8]
 8014304:	4798      	blx	r3
 8014306:	2300      	movs	r3, #0
 8014308:	6960      	ldr	r0, [r4, #20]
 801430a:	f88d 3007 	strb.w	r3, [sp, #7]
 801430e:	b130      	cbz	r0, 801431e <_ZN8touchgfx3HAL4tickEv+0xda>
 8014310:	6803      	ldr	r3, [r0, #0]
 8014312:	f10d 0107 	add.w	r1, sp, #7
 8014316:	68db      	ldr	r3, [r3, #12]
 8014318:	4798      	blx	r3
 801431a:	2800      	cmp	r0, #0
 801431c:	d149      	bne.n	80143b2 <_ZN8touchgfx3HAL4tickEv+0x16e>
 801431e:	f104 0018 	add.w	r0, r4, #24
 8014322:	f00a fafd 	bl	801e920 <_ZN8touchgfx8Gestures4tickEv>
 8014326:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 801432a:	b30b      	cbz	r3, 8014370 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801432c:	6920      	ldr	r0, [r4, #16]
 801432e:	6803      	ldr	r3, [r0, #0]
 8014330:	691b      	ldr	r3, [r3, #16]
 8014332:	4798      	blx	r3
 8014334:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8014336:	4606      	mov	r6, r0
 8014338:	b903      	cbnz	r3, 801433c <_ZN8touchgfx3HAL4tickEv+0xf8>
 801433a:	6620      	str	r0, [r4, #96]	@ 0x60
 801433c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801433e:	4a22      	ldr	r2, [pc, #136]	@ (80143c8 <_ZN8touchgfx3HAL4tickEv+0x184>)
 8014340:	1af3      	subs	r3, r6, r3
 8014342:	4293      	cmp	r3, r2
 8014344:	d914      	bls.n	8014370 <_ZN8touchgfx3HAL4tickEv+0x12c>
 8014346:	6920      	ldr	r0, [r4, #16]
 8014348:	6803      	ldr	r3, [r0, #0]
 801434a:	699b      	ldr	r3, [r3, #24]
 801434c:	4798      	blx	r3
 801434e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8014350:	2264      	movs	r2, #100	@ 0x64
 8014352:	1af3      	subs	r3, r6, r3
 8014354:	fbb3 f3f2 	udiv	r3, r3, r2
 8014358:	fbb0 f0f3 	udiv	r0, r0, r3
 801435c:	2800      	cmp	r0, #0
 801435e:	dc1e      	bgt.n	801439e <_ZN8touchgfx3HAL4tickEv+0x15a>
 8014360:	f884 2055 	strb.w	r2, [r4, #85]	@ 0x55
 8014364:	6920      	ldr	r0, [r4, #16]
 8014366:	2100      	movs	r1, #0
 8014368:	6803      	ldr	r3, [r0, #0]
 801436a:	69db      	ldr	r3, [r3, #28]
 801436c:	4798      	blx	r3
 801436e:	6626      	str	r6, [r4, #96]	@ 0x60
 8014370:	f005 fc20 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 8014374:	6803      	ldr	r3, [r0, #0]
 8014376:	2100      	movs	r1, #0
 8014378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801437a:	4798      	blx	r3
 801437c:	6823      	ldr	r3, [r4, #0]
 801437e:	4620      	mov	r0, r4
 8014380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014384:	4798      	blx	r3
 8014386:	2001      	movs	r0, #1
 8014388:	f7fd fd30 	bl	8011dec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801438c:	2300      	movs	r3, #0
 801438e:	702b      	strb	r3, [r5, #0]
 8014390:	b004      	add	sp, #16
 8014392:	bd70      	pop	{r4, r5, r6, pc}
 8014394:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014398:	4620      	mov	r0, r4
 801439a:	4798      	blx	r3
 801439c:	e7b3      	b.n	8014306 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801439e:	2863      	cmp	r0, #99	@ 0x63
 80143a0:	bfcb      	itete	gt
 80143a2:	2300      	movgt	r3, #0
 80143a4:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 80143a8:	f884 3055 	strbgt.w	r3, [r4, #85]	@ 0x55
 80143ac:	f884 0055 	strble.w	r0, [r4, #85]	@ 0x55
 80143b0:	e7d8      	b.n	8014364 <_ZN8touchgfx3HAL4tickEv+0x120>
 80143b2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80143b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80143b8:	6803      	ldr	r3, [r0, #0]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	4798      	blx	r3
 80143be:	e7ae      	b.n	801431e <_ZN8touchgfx3HAL4tickEv+0xda>
 80143c0:	20024e38 	.word	0x20024e38
 80143c4:	20024e39 	.word	0x20024e39
 80143c8:	05f5e100 	.word	0x05f5e100

080143cc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80143cc:	f7fd b8da 	b.w	8011584 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080143d0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80143d0:	6481      	str	r1, [r0, #72]	@ 0x48
 80143d2:	3018      	adds	r0, #24
 80143d4:	f00a baa2 	b.w	801e91c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080143d8 <_ZN8touchgfx3HAL5touchEll>:
 80143d8:	b530      	push	{r4, r5, lr}
 80143da:	b085      	sub	sp, #20
 80143dc:	4604      	mov	r4, r0
 80143de:	a802      	add	r0, sp, #8
 80143e0:	9102      	str	r1, [sp, #8]
 80143e2:	9203      	str	r2, [sp, #12]
 80143e4:	f005 f9ce 	bl	8019784 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80143e8:	a903      	add	r1, sp, #12
 80143ea:	a802      	add	r0, sp, #8
 80143ec:	f005 fa18 	bl	8019820 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80143f0:	f894 105b 	ldrb.w	r1, [r4, #91]	@ 0x5b
 80143f4:	9d02      	ldr	r5, [sp, #8]
 80143f6:	f104 0018 	add.w	r0, r4, #24
 80143fa:	9b03      	ldr	r3, [sp, #12]
 80143fc:	b179      	cbz	r1, 801441e <_ZN8touchgfx3HAL5touchEll+0x46>
 80143fe:	b29b      	uxth	r3, r3
 8014400:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8014404:	f8b4 104c 	ldrh.w	r1, [r4, #76]	@ 0x4c
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	b2ab      	uxth	r3, r5
 801440c:	f00a fa96 	bl	801e93c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014410:	b118      	cbz	r0, 801441a <_ZN8touchgfx3HAL5touchEll+0x42>
 8014412:	9b02      	ldr	r3, [sp, #8]
 8014414:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8014416:	9b03      	ldr	r3, [sp, #12]
 8014418:	6523      	str	r3, [r4, #80]	@ 0x50
 801441a:	b005      	add	sp, #20
 801441c:	bd30      	pop	{r4, r5, pc}
 801441e:	b29b      	uxth	r3, r3
 8014420:	b2aa      	uxth	r2, r5
 8014422:	f00a facf 	bl	801e9c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014426:	2301      	movs	r3, #1
 8014428:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
 801442c:	e7f1      	b.n	8014412 <_ZN8touchgfx3HAL5touchEll+0x3a>

0801442e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801442e:	b530      	push	{r4, r5, lr}
 8014430:	2b00      	cmp	r3, #0
 8014432:	d04e      	beq.n	80144d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8014434:	ea81 0002 	eor.w	r0, r1, r2
 8014438:	07c0      	lsls	r0, r0, #31
 801443a:	d508      	bpl.n	801444e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801443c:	3a01      	subs	r2, #1
 801443e:	440b      	add	r3, r1
 8014440:	4299      	cmp	r1, r3
 8014442:	d046      	beq.n	80144d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8014444:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014448:	f801 0b01 	strb.w	r0, [r1], #1
 801444c:	e7f8      	b.n	8014440 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801444e:	07d5      	lsls	r5, r2, #31
 8014450:	bf42      	ittt	mi
 8014452:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014456:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801445a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801445e:	2b01      	cmp	r3, #1
 8014460:	d915      	bls.n	801448e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014462:	ea81 0002 	eor.w	r0, r1, r2
 8014466:	0784      	lsls	r4, r0, #30
 8014468:	d01f      	beq.n	80144aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801446a:	1e95      	subs	r5, r2, #2
 801446c:	460c      	mov	r4, r1
 801446e:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 8014472:	f824 0b02 	strh.w	r0, [r4], #2
 8014476:	1b18      	subs	r0, r3, r4
 8014478:	4408      	add	r0, r1
 801447a:	2801      	cmp	r0, #1
 801447c:	d8f7      	bhi.n	801446e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 801447e:	1e98      	subs	r0, r3, #2
 8014480:	f003 0301 	and.w	r3, r3, #1
 8014484:	f020 0001 	bic.w	r0, r0, #1
 8014488:	3002      	adds	r0, #2
 801448a:	4401      	add	r1, r0
 801448c:	4402      	add	r2, r0
 801448e:	3a01      	subs	r2, #1
 8014490:	440b      	add	r3, r1
 8014492:	4299      	cmp	r1, r3
 8014494:	d01d      	beq.n	80144d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8014496:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801449a:	f801 0b01 	strb.w	r0, [r1], #1
 801449e:	e7f8      	b.n	8014492 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 80144a0:	f855 4f04 	ldr.w	r4, [r5, #4]!
 80144a4:	f840 4b04 	str.w	r4, [r0], #4
 80144a8:	e008      	b.n	80144bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80144aa:	0790      	lsls	r0, r2, #30
 80144ac:	d004      	beq.n	80144b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 80144ae:	f832 0b02 	ldrh.w	r0, [r2], #2
 80144b2:	3b02      	subs	r3, #2
 80144b4:	f821 0b02 	strh.w	r0, [r1], #2
 80144b8:	1f15      	subs	r5, r2, #4
 80144ba:	4608      	mov	r0, r1
 80144bc:	1a1c      	subs	r4, r3, r0
 80144be:	440c      	add	r4, r1
 80144c0:	2c03      	cmp	r4, #3
 80144c2:	d8ed      	bhi.n	80144a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 80144c4:	f023 0003 	bic.w	r0, r3, #3
 80144c8:	f003 0303 	and.w	r3, r3, #3
 80144cc:	4402      	add	r2, r0
 80144ce:	4401      	add	r1, r0
 80144d0:	e7dd      	b.n	801448e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80144d2:	2001      	movs	r0, #1
 80144d4:	bd30      	pop	{r4, r5, pc}

080144d6 <_ZN8touchgfx3HAL7noTouchEv>:
 80144d6:	b510      	push	{r4, lr}
 80144d8:	f890 305b 	ldrb.w	r3, [r0, #91]	@ 0x5b
 80144dc:	4604      	mov	r4, r0
 80144de:	b153      	cbz	r3, 80144f6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80144e0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80144e4:	2101      	movs	r1, #1
 80144e6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80144ea:	3018      	adds	r0, #24
 80144ec:	f00a fa6a 	bl	801e9c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80144f0:	2300      	movs	r3, #0
 80144f2:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
 80144f6:	bd10      	pop	{r4, pc}

080144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80144f8:	4b07      	ldr	r3, [pc, #28]	@ (8014518 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80144fa:	b510      	push	{r4, lr}
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	4604      	mov	r4, r0
 8014500:	b12b      	cbz	r3, 801450e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 8014502:	6803      	ldr	r3, [r0, #0]
 8014504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014506:	4798      	blx	r3
 8014508:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801450a:	4283      	cmp	r3, r0
 801450c:	d001      	beq.n	8014512 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801450e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014510:	bd10      	pop	{r4, pc}
 8014512:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014514:	bd10      	pop	{r4, pc}
 8014516:	bf00      	nop
 8014518:	20024e32 	.word	0x20024e32

0801451c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801451c:	4b0a      	ldr	r3, [pc, #40]	@ (8014548 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 801451e:	b510      	push	{r4, lr}
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	4604      	mov	r4, r0
 8014524:	b12b      	cbz	r3, 8014532 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 8014526:	f7fd f825 	bl	8011574 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801452a:	4620      	mov	r0, r4
 801452c:	f7ff ffe4 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014530:	bd10      	pop	{r4, pc}
 8014532:	6840      	ldr	r0, [r0, #4]
 8014534:	f000 fb4c 	bl	8014bd0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014538:	2800      	cmp	r0, #0
 801453a:	d0f4      	beq.n	8014526 <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801453c:	6862      	ldr	r2, [r4, #4]
 801453e:	7a53      	ldrb	r3, [r2, #9]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d0fc      	beq.n	801453e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014544:	e7ef      	b.n	8014526 <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 8014546:	bf00      	nop
 8014548:	20024e32 	.word	0x20024e32

0801454c <_ZN8touchgfx3HAL10initializeEv>:
 801454c:	b510      	push	{r4, lr}
 801454e:	4604      	mov	r4, r0
 8014550:	f7fc fff8 	bl	8011544 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014554:	6860      	ldr	r0, [r4, #4]
 8014556:	6803      	ldr	r3, [r0, #0]
 8014558:	68db      	ldr	r3, [r3, #12]
 801455a:	4798      	blx	r3
 801455c:	68e0      	ldr	r0, [r4, #12]
 801455e:	6803      	ldr	r3, [r0, #0]
 8014560:	689b      	ldr	r3, [r3, #8]
 8014562:	4798      	blx	r3
 8014564:	6823      	ldr	r3, [r4, #0]
 8014566:	4620      	mov	r0, r4
 8014568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801456a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801456e:	4718      	bx	r3

08014570 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014572:	461d      	mov	r5, r3
 8014574:	4b0b      	ldr	r3, [pc, #44]	@ (80145a4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014576:	4617      	mov	r7, r2
 8014578:	460e      	mov	r6, r1
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	6898      	ldr	r0, [r3, #8]
 801457e:	6803      	ldr	r3, [r0, #0]
 8014580:	6a1b      	ldr	r3, [r3, #32]
 8014582:	4798      	blx	r3
 8014584:	4b08      	ldr	r3, [pc, #32]	@ (80145a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 8014586:	2810      	cmp	r0, #16
 8014588:	bf15      	itete	ne
 801458a:	881c      	ldrhne	r4, [r3, #0]
 801458c:	8818      	ldrheq	r0, [r3, #0]
 801458e:	fb07 6204 	mlane	r2, r7, r4, r6
 8014592:	fb07 6200 	mlaeq	r2, r7, r0, r6
 8014596:	bf16      	itet	ne
 8014598:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 801459c:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 80145a0:	18a8      	addne	r0, r5, r2
 80145a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145a4:	20024e34 	.word	0x20024e34
 80145a8:	20024e2e 	.word	0x20024e2e

080145ac <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80145ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145b0:	b088      	sub	sp, #32
 80145b2:	4698      	mov	r8, r3
 80145b4:	4617      	mov	r7, r2
 80145b6:	2200      	movs	r2, #0
 80145b8:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 80145bc:	4604      	mov	r4, r0
 80145be:	9206      	str	r2, [sp, #24]
 80145c0:	2bff      	cmp	r3, #255	@ 0xff
 80145c2:	f88d 301c 	strb.w	r3, [sp, #28]
 80145c6:	4b1d      	ldr	r3, [pc, #116]	@ (801463c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 80145c8:	bf0c      	ite	eq
 80145ca:	2201      	moveq	r2, #1
 80145cc:	2204      	movne	r2, #4
 80145ce:	881b      	ldrh	r3, [r3, #0]
 80145d0:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 80145d4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80145d8:	9201      	str	r2, [sp, #4]
 80145da:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80145de:	9102      	str	r1, [sp, #8]
 80145e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80145e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80145e8:	f8ad 6010 	strh.w	r6, [sp, #16]
 80145ec:	f8ad 5012 	strh.w	r5, [sp, #18]
 80145f0:	f7ff ff82 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80145f4:	4642      	mov	r2, r8
 80145f6:	4603      	mov	r3, r0
 80145f8:	4639      	mov	r1, r7
 80145fa:	4620      	mov	r0, r4
 80145fc:	f7ff ffb8 	bl	8014570 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014600:	9003      	str	r0, [sp, #12]
 8014602:	b106      	cbz	r6, 8014606 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 8014604:	b935      	cbnz	r5, 8014614 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 8014606:	4b0e      	ldr	r3, [pc, #56]	@ (8014640 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 8014608:	f240 1143 	movw	r1, #323	@ 0x143
 801460c:	4a0d      	ldr	r2, [pc, #52]	@ (8014644 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801460e:	480e      	ldr	r0, [pc, #56]	@ (8014648 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 8014610:	f00b fbb0 	bl	801fd74 <__assert_func>
 8014614:	6823      	ldr	r3, [r4, #0]
 8014616:	4620      	mov	r0, r4
 8014618:	9d01      	ldr	r5, [sp, #4]
 801461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801461c:	4798      	blx	r3
 801461e:	4228      	tst	r0, r5
 8014620:	d104      	bne.n	801462c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 8014622:	4b0a      	ldr	r3, [pc, #40]	@ (801464c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 8014624:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8014628:	4a06      	ldr	r2, [pc, #24]	@ (8014644 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801462a:	e7f0      	b.n	801460e <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 801462c:	6860      	ldr	r0, [r4, #4]
 801462e:	a901      	add	r1, sp, #4
 8014630:	6803      	ldr	r3, [r0, #0]
 8014632:	685b      	ldr	r3, [r3, #4]
 8014634:	4798      	blx	r3
 8014636:	b008      	add	sp, #32
 8014638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801463c:	20024e2e 	.word	0x20024e2e
 8014640:	08025426 	.word	0x08025426
 8014644:	0802562c 	.word	0x0802562c
 8014648:	0802545e 	.word	0x0802545e
 801464c:	08025484 	.word	0x08025484

08014650 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8014650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014654:	4698      	mov	r8, r3
 8014656:	b088      	sub	sp, #32
 8014658:	2300      	movs	r3, #0
 801465a:	4617      	mov	r7, r2
 801465c:	4604      	mov	r4, r0
 801465e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 8014662:	9306      	str	r3, [sp, #24]
 8014664:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014668:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 801466c:	9301      	str	r3, [sp, #4]
 801466e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014672:	9102      	str	r1, [sp, #8]
 8014674:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014678:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801467c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8014680:	f88d 301c 	strb.w	r3, [sp, #28]
 8014684:	f8ad 5012 	strh.w	r5, [sp, #18]
 8014688:	f7ff ff36 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801468c:	4642      	mov	r2, r8
 801468e:	4603      	mov	r3, r0
 8014690:	4639      	mov	r1, r7
 8014692:	4620      	mov	r0, r4
 8014694:	f7ff ff6c 	bl	8014570 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014698:	4b11      	ldr	r3, [pc, #68]	@ (80146e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 801469a:	9003      	str	r0, [sp, #12]
 801469c:	881b      	ldrh	r3, [r3, #0]
 801469e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80146a2:	b106      	cbz	r6, 80146a6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 80146a4:	b935      	cbnz	r5, 80146b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 80146a6:	4b0f      	ldr	r3, [pc, #60]	@ (80146e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 80146a8:	f240 1153 	movw	r1, #339	@ 0x153
 80146ac:	4a0e      	ldr	r2, [pc, #56]	@ (80146e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 80146ae:	480f      	ldr	r0, [pc, #60]	@ (80146ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 80146b0:	f00b fb60 	bl	801fd74 <__assert_func>
 80146b4:	6823      	ldr	r3, [r4, #0]
 80146b6:	4620      	mov	r0, r4
 80146b8:	9d01      	ldr	r5, [sp, #4]
 80146ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146bc:	4798      	blx	r3
 80146be:	4228      	tst	r0, r5
 80146c0:	d104      	bne.n	80146cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 80146c2:	4b0b      	ldr	r3, [pc, #44]	@ (80146f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 80146c4:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 80146c8:	4a07      	ldr	r2, [pc, #28]	@ (80146e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 80146ca:	e7f0      	b.n	80146ae <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 80146cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80146ce:	a901      	add	r1, sp, #4
 80146d0:	6860      	ldr	r0, [r4, #4]
 80146d2:	9306      	str	r3, [sp, #24]
 80146d4:	6803      	ldr	r3, [r0, #0]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	4798      	blx	r3
 80146da:	b008      	add	sp, #32
 80146dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146e0:	20024e2e 	.word	0x20024e2e
 80146e4:	08025426 	.word	0x08025426
 80146e8:	080254c9 	.word	0x080254c9
 80146ec:	0802545e 	.word	0x0802545e
 80146f0:	08025484 	.word	0x08025484

080146f4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80146f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146f8:	b088      	sub	sp, #32
 80146fa:	4698      	mov	r8, r3
 80146fc:	4617      	mov	r7, r2
 80146fe:	2200      	movs	r2, #0
 8014700:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8014704:	4604      	mov	r4, r0
 8014706:	9206      	str	r2, [sp, #24]
 8014708:	2bff      	cmp	r3, #255	@ 0xff
 801470a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 801470e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8014712:	bf0c      	ite	eq
 8014714:	2220      	moveq	r2, #32
 8014716:	2240      	movne	r2, #64	@ 0x40
 8014718:	9102      	str	r1, [sp, #8]
 801471a:	9201      	str	r2, [sp, #4]
 801471c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8014720:	f88d 301c 	strb.w	r3, [sp, #28]
 8014724:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014728:	f8ad 6010 	strh.w	r6, [sp, #16]
 801472c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8014730:	f7ff fee2 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014734:	4642      	mov	r2, r8
 8014736:	4603      	mov	r3, r0
 8014738:	4639      	mov	r1, r7
 801473a:	4620      	mov	r0, r4
 801473c:	f7ff ff18 	bl	8014570 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014740:	4b10      	ldr	r3, [pc, #64]	@ (8014784 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 8014742:	9003      	str	r0, [sp, #12]
 8014744:	881b      	ldrh	r3, [r3, #0]
 8014746:	f8ad 3016 	strh.w	r3, [sp, #22]
 801474a:	b106      	cbz	r6, 801474e <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 801474c:	b935      	cbnz	r5, 801475c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 801474e:	4b0e      	ldr	r3, [pc, #56]	@ (8014788 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 8014750:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 8014754:	4a0d      	ldr	r2, [pc, #52]	@ (801478c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 8014756:	480e      	ldr	r0, [pc, #56]	@ (8014790 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 8014758:	f00b fb0c 	bl	801fd74 <__assert_func>
 801475c:	6823      	ldr	r3, [r4, #0]
 801475e:	4620      	mov	r0, r4
 8014760:	9d01      	ldr	r5, [sp, #4]
 8014762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014764:	4798      	blx	r3
 8014766:	4228      	tst	r0, r5
 8014768:	d104      	bne.n	8014774 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 801476a:	4b0a      	ldr	r3, [pc, #40]	@ (8014794 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 801476c:	f240 1167 	movw	r1, #359	@ 0x167
 8014770:	4a06      	ldr	r2, [pc, #24]	@ (801478c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 8014772:	e7f0      	b.n	8014756 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 8014774:	6860      	ldr	r0, [r4, #4]
 8014776:	a901      	add	r1, sp, #4
 8014778:	6803      	ldr	r3, [r0, #0]
 801477a:	685b      	ldr	r3, [r3, #4]
 801477c:	4798      	blx	r3
 801477e:	b008      	add	sp, #32
 8014780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014784:	20024e2e 	.word	0x20024e2e
 8014788:	08025426 	.word	0x08025426
 801478c:	0802556d 	.word	0x0802556d
 8014790:	0802545e 	.word	0x0802545e
 8014794:	08025484 	.word	0x08025484

08014798 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8014798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801479c:	b089      	sub	sp, #36	@ 0x24
 801479e:	4699      	mov	r9, r3
 80147a0:	4604      	mov	r4, r0
 80147a2:	2500      	movs	r5, #0
 80147a4:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80147a8:	4690      	mov	r8, r2
 80147aa:	460f      	mov	r7, r1
 80147ac:	9506      	str	r5, [sp, #24]
 80147ae:	2eff      	cmp	r6, #255	@ 0xff
 80147b0:	9502      	str	r5, [sp, #8]
 80147b2:	bf0c      	ite	eq
 80147b4:	2302      	moveq	r3, #2
 80147b6:	2308      	movne	r3, #8
 80147b8:	9301      	str	r3, [sp, #4]
 80147ba:	f7ff fe9d 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80147be:	464a      	mov	r2, r9
 80147c0:	4603      	mov	r3, r0
 80147c2:	4641      	mov	r1, r8
 80147c4:	4620      	mov	r0, r4
 80147c6:	f7ff fed3 	bl	8014570 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80147ca:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80147ce:	f8ad 5014 	strh.w	r5, [sp, #20]
 80147d2:	f8ad 3010 	strh.w	r3, [sp, #16]
 80147d6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80147da:	9d01      	ldr	r5, [sp, #4]
 80147dc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80147e0:	4b0e      	ldr	r3, [pc, #56]	@ (801481c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 80147e2:	9003      	str	r0, [sp, #12]
 80147e4:	4620      	mov	r0, r4
 80147e6:	881b      	ldrh	r3, [r3, #0]
 80147e8:	9706      	str	r7, [sp, #24]
 80147ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80147ee:	6823      	ldr	r3, [r4, #0]
 80147f0:	f88d 601c 	strb.w	r6, [sp, #28]
 80147f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80147f6:	4798      	blx	r3
 80147f8:	4228      	tst	r0, r5
 80147fa:	d106      	bne.n	801480a <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 80147fc:	4b08      	ldr	r3, [pc, #32]	@ (8014820 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 80147fe:	f240 1179 	movw	r1, #377	@ 0x179
 8014802:	4a08      	ldr	r2, [pc, #32]	@ (8014824 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 8014804:	4808      	ldr	r0, [pc, #32]	@ (8014828 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 8014806:	f00b fab5 	bl	801fd74 <__assert_func>
 801480a:	6860      	ldr	r0, [r4, #4]
 801480c:	a901      	add	r1, sp, #4
 801480e:	6803      	ldr	r3, [r0, #0]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	4798      	blx	r3
 8014814:	b009      	add	sp, #36	@ 0x24
 8014816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801481a:	bf00      	nop
 801481c:	20024e2e 	.word	0x20024e2e
 8014820:	08025484 	.word	0x08025484
 8014824:	080256a3 	.word	0x080256a3
 8014828:	0802545e 	.word	0x0802545e

0801482c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801482c:	4b1d      	ldr	r3, [pc, #116]	@ (80148a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 801482e:	b570      	push	{r4, r5, r6, lr}
 8014830:	b08a      	sub	sp, #40	@ 0x28
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	4604      	mov	r4, r0
 8014836:	e88d 0006 	stmia.w	sp, {r1, r2}
 801483a:	b933      	cbnz	r3, 801484a <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 801483c:	4b1a      	ldr	r3, [pc, #104]	@ (80148a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 801483e:	f240 1185 	movw	r1, #389	@ 0x185
 8014842:	4a1a      	ldr	r2, [pc, #104]	@ (80148ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8014844:	481a      	ldr	r0, [pc, #104]	@ (80148b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 8014846:	f00b fa95 	bl	801fd74 <__assert_func>
 801484a:	2300      	movs	r3, #0
 801484c:	f8bd 5000 	ldrh.w	r5, [sp]
 8014850:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8014854:	9308      	str	r3, [sp, #32]
 8014856:	2301      	movs	r3, #1
 8014858:	9303      	str	r3, [sp, #12]
 801485a:	6803      	ldr	r3, [r0, #0]
 801485c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801485e:	4798      	blx	r3
 8014860:	4632      	mov	r2, r6
 8014862:	4603      	mov	r3, r0
 8014864:	4629      	mov	r1, r5
 8014866:	4620      	mov	r0, r4
 8014868:	f7ff fe82 	bl	8014570 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801486c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801486e:	9004      	str	r0, [sp, #16]
 8014870:	a903      	add	r1, sp, #12
 8014872:	9305      	str	r3, [sp, #20]
 8014874:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014878:	6860      	ldr	r0, [r4, #4]
 801487a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801487e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014882:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014886:	4b0b      	ldr	r3, [pc, #44]	@ (80148b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 8014888:	881b      	ldrh	r3, [r3, #0]
 801488a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801488e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014892:	23ff      	movs	r3, #255	@ 0xff
 8014894:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014898:	6803      	ldr	r3, [r0, #0]
 801489a:	685b      	ldr	r3, [r3, #4]
 801489c:	4798      	blx	r3
 801489e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80148a0:	b00a      	add	sp, #40	@ 0x28
 80148a2:	bd70      	pop	{r4, r5, r6, pc}
 80148a4:	20024e33 	.word	0x20024e33
 80148a8:	080253b8 	.word	0x080253b8
 80148ac:	080255e6 	.word	0x080255e6
 80148b0:	0802545e 	.word	0x0802545e
 80148b4:	20024e2e 	.word	0x20024e2e

080148b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80148b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148ba:	461d      	mov	r5, r3
 80148bc:	b08b      	sub	sp, #44	@ 0x2c
 80148be:	2300      	movs	r3, #0
 80148c0:	4604      	mov	r4, r0
 80148c2:	9308      	str	r3, [sp, #32]
 80148c4:	2301      	movs	r3, #1
 80148c6:	9303      	str	r3, [sp, #12]
 80148c8:	6803      	ldr	r3, [r0, #0]
 80148ca:	e88d 0006 	stmia.w	sp, {r1, r2}
 80148ce:	f8bd 6000 	ldrh.w	r6, [sp]
 80148d2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80148d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148d8:	4798      	blx	r3
 80148da:	463a      	mov	r2, r7
 80148dc:	4603      	mov	r3, r0
 80148de:	4631      	mov	r1, r6
 80148e0:	4620      	mov	r0, r4
 80148e2:	f7ff fe45 	bl	8014570 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80148e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80148ea:	9004      	str	r0, [sp, #16]
 80148ec:	a903      	add	r1, sp, #12
 80148ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80148f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80148f6:	6860      	ldr	r0, [r4, #4]
 80148f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80148fc:	4b08      	ldr	r3, [pc, #32]	@ (8014920 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 80148fe:	9505      	str	r5, [sp, #20]
 8014900:	881b      	ldrh	r3, [r3, #0]
 8014902:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014906:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014908:	f8ad 301e 	strh.w	r3, [sp, #30]
 801490c:	23ff      	movs	r3, #255	@ 0xff
 801490e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014912:	6803      	ldr	r3, [r0, #0]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	4798      	blx	r3
 8014918:	4628      	mov	r0, r5
 801491a:	b00b      	add	sp, #44	@ 0x2c
 801491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801491e:	bf00      	nop
 8014920:	20024e2e 	.word	0x20024e2e

08014924 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014924:	b570      	push	{r4, r5, r6, lr}
 8014926:	f890 305a 	ldrb.w	r3, [r0, #90]	@ 0x5a
 801492a:	4604      	mov	r4, r0
 801492c:	b19b      	cbz	r3, 8014956 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801492e:	2002      	movs	r0, #2
 8014930:	f7fd fa66 	bl	8011e00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014934:	2300      	movs	r3, #0
 8014936:	4620      	mov	r0, r4
 8014938:	f884 305a 	strb.w	r3, [r4, #90]	@ 0x5a
 801493c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014940:	6823      	ldr	r3, [r4, #0]
 8014942:	f8d3 5090 	ldr.w	r5, [r3, #144]	@ 0x90
 8014946:	f7ff fdd7 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801494a:	4601      	mov	r1, r0
 801494c:	4620      	mov	r0, r4
 801494e:	462b      	mov	r3, r5
 8014950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014954:	4718      	bx	r3
 8014956:	bd70      	pop	{r4, r5, r6, pc}

08014958 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8014958:	b570      	push	{r4, r5, r6, lr}
 801495a:	4605      	mov	r5, r0
 801495c:	460c      	mov	r4, r1
 801495e:	2003      	movs	r0, #3
 8014960:	b149      	cbz	r1, 8014976 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8014962:	f7fd fa39 	bl	8011dd8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014966:	6928      	ldr	r0, [r5, #16]
 8014968:	b168      	cbz	r0, 8014986 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801496a:	6803      	ldr	r3, [r0, #0]
 801496c:	2101      	movs	r1, #1
 801496e:	695b      	ldr	r3, [r3, #20]
 8014970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014974:	4718      	bx	r3
 8014976:	f7fd fa39 	bl	8011dec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801497a:	6928      	ldr	r0, [r5, #16]
 801497c:	b118      	cbz	r0, 8014986 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801497e:	6803      	ldr	r3, [r0, #0]
 8014980:	4621      	mov	r1, r4
 8014982:	695b      	ldr	r3, [r3, #20]
 8014984:	e7f4      	b.n	8014970 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8014986:	bd70      	pop	{r4, r5, r6, pc}

08014988 <_ZN8touchgfx3HAL12getCPUCyclesEv>:
 8014988:	6900      	ldr	r0, [r0, #16]
 801498a:	b110      	cbz	r0, 8014992 <_ZN8touchgfx3HAL12getCPUCyclesEv+0xa>
 801498c:	6803      	ldr	r3, [r0, #0]
 801498e:	691b      	ldr	r3, [r3, #16]
 8014990:	4718      	bx	r3
 8014992:	4770      	bx	lr

08014994 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014994:	68c2      	ldr	r2, [r0, #12]
 8014996:	6900      	ldr	r0, [r0, #16]
 8014998:	1a13      	subs	r3, r2, r0
 801499a:	4258      	negs	r0, r3
 801499c:	4158      	adcs	r0, r3
 801499e:	4770      	bx	lr

080149a0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80149a0:	68c2      	ldr	r2, [r0, #12]
 80149a2:	6903      	ldr	r3, [r0, #16]
 80149a4:	1a9b      	subs	r3, r3, r2
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	bfdc      	itt	le
 80149aa:	6882      	ldrle	r2, [r0, #8]
 80149ac:	189b      	addle	r3, r3, r2
 80149ae:	2b01      	cmp	r3, #1
 80149b0:	bfcc      	ite	gt
 80149b2:	2000      	movgt	r0, #0
 80149b4:	2001      	movle	r0, #1
 80149b6:	4770      	bx	lr

080149b8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80149b8:	6902      	ldr	r2, [r0, #16]
 80149ba:	6843      	ldr	r3, [r0, #4]
 80149bc:	201c      	movs	r0, #28
 80149be:	fb00 3002 	mla	r0, r0, r2, r3
 80149c2:	4770      	bx	lr

080149c4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80149c4:	6803      	ldr	r3, [r0, #0]
 80149c6:	691b      	ldr	r3, [r3, #16]
 80149c8:	4718      	bx	r3

080149ca <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80149ca:	4770      	bx	lr

080149cc <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80149cc:	4770      	bx	lr

080149ce <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80149ce:	4770      	bx	lr

080149d0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80149d0:	2301      	movs	r3, #1
 80149d2:	b570      	push	{r4, r5, r6, lr}
 80149d4:	7203      	strb	r3, [r0, #8]
 80149d6:	4604      	mov	r4, r0
 80149d8:	6840      	ldr	r0, [r0, #4]
 80149da:	6803      	ldr	r3, [r0, #0]
 80149dc:	699b      	ldr	r3, [r3, #24]
 80149de:	4798      	blx	r3
 80149e0:	6803      	ldr	r3, [r0, #0]
 80149e2:	4605      	mov	r5, r0
 80149e4:	2b08      	cmp	r3, #8
 80149e6:	d01e      	beq.n	8014a26 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80149e8:	d80b      	bhi.n	8014a02 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80149ea:	2b02      	cmp	r3, #2
 80149ec:	d027      	beq.n	8014a3e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80149ee:	2b04      	cmp	r3, #4
 80149f0:	d011      	beq.n	8014a16 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d028      	beq.n	8014a48 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80149f6:	4b17      	ldr	r3, [pc, #92]	@ (8014a54 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80149f8:	218d      	movs	r1, #141	@ 0x8d
 80149fa:	4a17      	ldr	r2, [pc, #92]	@ (8014a58 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80149fc:	4817      	ldr	r0, [pc, #92]	@ (8014a5c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80149fe:	f00b f9b9 	bl	801fd74 <__assert_func>
 8014a02:	2b40      	cmp	r3, #64	@ 0x40
 8014a04:	d020      	beq.n	8014a48 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014a06:	d801      	bhi.n	8014a0c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014a08:	2b20      	cmp	r3, #32
 8014a0a:	e7f3      	b.n	80149f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8014a0c:	2b80      	cmp	r3, #128	@ 0x80
 8014a0e:	d01b      	beq.n	8014a48 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014a10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014a14:	e7ee      	b.n	80149f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8014a16:	6823      	ldr	r3, [r4, #0]
 8014a18:	7e01      	ldrb	r1, [r0, #24]
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a1e:	4798      	blx	r3
 8014a20:	6823      	ldr	r3, [r4, #0]
 8014a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a24:	e006      	b.n	8014a34 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014a26:	6823      	ldr	r3, [r4, #0]
 8014a28:	7e01      	ldrb	r1, [r0, #24]
 8014a2a:	4620      	mov	r0, r4
 8014a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a2e:	4798      	blx	r3
 8014a30:	6823      	ldr	r3, [r4, #0]
 8014a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a34:	4629      	mov	r1, r5
 8014a36:	4620      	mov	r0, r4
 8014a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a3c:	4718      	bx	r3
 8014a3e:	6823      	ldr	r3, [r4, #0]
 8014a40:	4620      	mov	r0, r4
 8014a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a44:	4798      	blx	r3
 8014a46:	e7f3      	b.n	8014a30 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8014a48:	6823      	ldr	r3, [r4, #0]
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a4e:	4798      	blx	r3
 8014a50:	e7e6      	b.n	8014a20 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8014a52:	bf00      	nop
 8014a54:	0802570e 	.word	0x0802570e
 8014a58:	080257d0 	.word	0x080257d0
 8014a5c:	08025733 	.word	0x08025733

08014a60 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014a60:	b570      	push	{r4, r5, r6, lr}
 8014a62:	4604      	mov	r4, r0
 8014a64:	460e      	mov	r6, r1
 8014a66:	6860      	ldr	r0, [r4, #4]
 8014a68:	6803      	ldr	r3, [r0, #0]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	4798      	blx	r3
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	d1f9      	bne.n	8014a66 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014a72:	4d0b      	ldr	r5, [pc, #44]	@ (8014aa0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8014a74:	6828      	ldr	r0, [r5, #0]
 8014a76:	6803      	ldr	r3, [r0, #0]
 8014a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014a7a:	4798      	blx	r3
 8014a7c:	f7fc fd8c 	bl	8011598 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014a80:	6860      	ldr	r0, [r4, #4]
 8014a82:	4631      	mov	r1, r6
 8014a84:	6803      	ldr	r3, [r0, #0]
 8014a86:	689b      	ldr	r3, [r3, #8]
 8014a88:	4798      	blx	r3
 8014a8a:	6823      	ldr	r3, [r4, #0]
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a90:	4798      	blx	r3
 8014a92:	6828      	ldr	r0, [r5, #0]
 8014a94:	6803      	ldr	r3, [r0, #0]
 8014a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a9c:	4718      	bx	r3
 8014a9e:	bf00      	nop
 8014aa0:	20024e34 	.word	0x20024e34

08014aa4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014aa4:	b508      	push	{r3, lr}
 8014aa6:	f7fc fd65 	bl	8011574 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014aae:	f7fc bd69 	b.w	8011584 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014ab2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014ab2:	b510      	push	{r4, lr}
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	2114      	movs	r1, #20
 8014ab8:	f00a f835 	bl	801eb26 <_ZdlPvj>
 8014abc:	4620      	mov	r0, r4
 8014abe:	bd10      	pop	{r4, pc}

08014ac0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014ac0:	b570      	push	{r4, r5, r6, lr}
 8014ac2:	4604      	mov	r4, r0
 8014ac4:	6840      	ldr	r0, [r0, #4]
 8014ac6:	6803      	ldr	r3, [r0, #0]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4798      	blx	r3
 8014acc:	4605      	mov	r5, r0
 8014ace:	b908      	cbnz	r0, 8014ad4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 8014ad0:	7a23      	ldrb	r3, [r4, #8]
 8014ad2:	b973      	cbnz	r3, 8014af2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 8014ad4:	6860      	ldr	r0, [r4, #4]
 8014ad6:	6803      	ldr	r3, [r0, #0]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	4798      	blx	r3
 8014adc:	b928      	cbnz	r0, 8014aea <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 8014ade:	6823      	ldr	r3, [r4, #0]
 8014ae0:	4620      	mov	r0, r4
 8014ae2:	6a1b      	ldr	r3, [r3, #32]
 8014ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ae8:	4718      	bx	r3
 8014aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014aee:	f7fc bd5b 	b.w	80115a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 8014af2:	6860      	ldr	r0, [r4, #4]
 8014af4:	6803      	ldr	r3, [r0, #0]
 8014af6:	695b      	ldr	r3, [r3, #20]
 8014af8:	4798      	blx	r3
 8014afa:	7225      	strb	r5, [r4, #8]
 8014afc:	e7ea      	b.n	8014ad4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
	...

08014b00 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014b00:	b510      	push	{r4, lr}
 8014b02:	68c3      	ldr	r3, [r0, #12]
 8014b04:	6902      	ldr	r2, [r0, #16]
 8014b06:	1ad2      	subs	r2, r2, r3
 8014b08:	2a00      	cmp	r2, #0
 8014b0a:	bfdc      	itt	le
 8014b0c:	6884      	ldrle	r4, [r0, #8]
 8014b0e:	1912      	addle	r2, r2, r4
 8014b10:	2a01      	cmp	r2, #1
 8014b12:	dd17      	ble.n	8014b44 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 8014b14:	6842      	ldr	r2, [r0, #4]
 8014b16:	241c      	movs	r4, #28
 8014b18:	fb04 2303 	mla	r3, r4, r3, r2
 8014b1c:	f101 0218 	add.w	r2, r1, #24
 8014b20:	f851 4b04 	ldr.w	r4, [r1], #4
 8014b24:	4291      	cmp	r1, r2
 8014b26:	f843 4b04 	str.w	r4, [r3], #4
 8014b2a:	d1f9      	bne.n	8014b20 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014b2c:	780a      	ldrb	r2, [r1, #0]
 8014b2e:	701a      	strb	r2, [r3, #0]
 8014b30:	68c3      	ldr	r3, [r0, #12]
 8014b32:	6882      	ldr	r2, [r0, #8]
 8014b34:	f3bf 8f5b 	dmb	ish
 8014b38:	3301      	adds	r3, #1
 8014b3a:	4293      	cmp	r3, r2
 8014b3c:	bfa8      	it	ge
 8014b3e:	1a9b      	subge	r3, r3, r2
 8014b40:	60c3      	str	r3, [r0, #12]
 8014b42:	bd10      	pop	{r4, pc}
 8014b44:	4b02      	ldr	r3, [pc, #8]	@ (8014b50 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8014b46:	213b      	movs	r1, #59	@ 0x3b
 8014b48:	4a02      	ldr	r2, [pc, #8]	@ (8014b54 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8014b4a:	4803      	ldr	r0, [pc, #12]	@ (8014b58 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8014b4c:	f00b f912 	bl	801fd74 <__assert_func>
 8014b50:	08025759 	.word	0x08025759
 8014b54:	08025800 	.word	0x08025800
 8014b58:	08025733 	.word	0x08025733

08014b5c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014b5c:	b510      	push	{r4, lr}
 8014b5e:	6803      	ldr	r3, [r0, #0]
 8014b60:	4604      	mov	r4, r0
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	4798      	blx	r3
 8014b66:	b128      	cbz	r0, 8014b74 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8014b68:	4b07      	ldr	r3, [pc, #28]	@ (8014b88 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8014b6a:	2141      	movs	r1, #65	@ 0x41
 8014b6c:	4a07      	ldr	r2, [pc, #28]	@ (8014b8c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8014b6e:	4808      	ldr	r0, [pc, #32]	@ (8014b90 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8014b70:	f00b f900 	bl	801fd74 <__assert_func>
 8014b74:	6923      	ldr	r3, [r4, #16]
 8014b76:	68a2      	ldr	r2, [r4, #8]
 8014b78:	f3bf 8f5b 	dmb	ish
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	bfa8      	it	ge
 8014b82:	1a9b      	subge	r3, r3, r2
 8014b84:	6123      	str	r3, [r4, #16]
 8014b86:	bd10      	pop	{r4, pc}
 8014b88:	0802577c 	.word	0x0802577c
 8014b8c:	0802584e 	.word	0x0802584e
 8014b90:	08025733 	.word	0x08025733

08014b94 <_ZN8touchgfx13DMA_Interface5startEv>:
 8014b94:	b510      	push	{r4, lr}
 8014b96:	4604      	mov	r4, r0
 8014b98:	6840      	ldr	r0, [r0, #4]
 8014b9a:	6803      	ldr	r3, [r0, #0]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	4798      	blx	r3
 8014ba0:	b948      	cbnz	r0, 8014bb6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014ba2:	7a63      	ldrb	r3, [r4, #9]
 8014ba4:	b13b      	cbz	r3, 8014bb6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014ba6:	7a23      	ldrb	r3, [r4, #8]
 8014ba8:	b92b      	cbnz	r3, 8014bb6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014baa:	6823      	ldr	r3, [r4, #0]
 8014bac:	4620      	mov	r0, r4
 8014bae:	6a1b      	ldr	r3, [r3, #32]
 8014bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bb4:	4718      	bx	r3
 8014bb6:	bd10      	pop	{r4, pc}

08014bb8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014bb8:	b510      	push	{r4, lr}
 8014bba:	6082      	str	r2, [r0, #8]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	4c03      	ldr	r4, [pc, #12]	@ (8014bcc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014bc0:	6041      	str	r1, [r0, #4]
 8014bc2:	6004      	str	r4, [r0, #0]
 8014bc4:	60c2      	str	r2, [r0, #12]
 8014bc6:	6102      	str	r2, [r0, #16]
 8014bc8:	bd10      	pop	{r4, pc}
 8014bca:	bf00      	nop
 8014bcc:	080257b4 	.word	0x080257b4

08014bd0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014bd0:	6840      	ldr	r0, [r0, #4]
 8014bd2:	6803      	ldr	r3, [r0, #0]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	4718      	bx	r3

08014bd8 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh>:
 8014bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bdc:	4690      	mov	r8, r2
 8014bde:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014be2:	4699      	mov	r9, r3
 8014be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014be6:	4442      	add	r2, r8
 8014be8:	4606      	mov	r6, r0
 8014bea:	460c      	mov	r4, r1
 8014bec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014bee:	60c2      	str	r2, [r0, #12]
 8014bf0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014bf4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8014bf6:	441a      	add	r2, r3
 8014bf8:	6803      	ldr	r3, [r0, #0]
 8014bfa:	6102      	str	r2, [r0, #16]
 8014bfc:	68db      	ldr	r3, [r3, #12]
 8014bfe:	4798      	blx	r3
 8014c00:	2800      	cmp	r0, #0
 8014c02:	f000 81a9 	beq.w	8014f58 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x380>
 8014c06:	68f3      	ldr	r3, [r6, #12]
 8014c08:	f9b6 2026 	ldrsh.w	r2, [r6, #38]	@ 0x26
 8014c0c:	18f9      	adds	r1, r7, r3
 8014c0e:	4291      	cmp	r1, r2
 8014c10:	bfc8      	it	gt
 8014c12:	1ad7      	subgt	r7, r2, r3
 8014c14:	eb08 0309 	add.w	r3, r8, r9
 8014c18:	f896 8008 	ldrb.w	r8, [r6, #8]
 8014c1c:	f106 0920 	add.w	r9, r6, #32
 8014c20:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014c24:	f896 302a 	ldrb.w	r3, [r6, #42]	@ 0x2a
 8014c28:	4648      	mov	r0, r9
 8014c2a:	fb18 f803 	smulbb	r8, r8, r3
 8014c2e:	23ff      	movs	r3, #255	@ 0xff
 8014c30:	fbb8 f8f3 	udiv	r8, r8, r3
 8014c34:	f007 ffa0 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	f040 80fc 	bne.w	8014e36 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x25e>
 8014c3e:	69b2      	ldr	r2, [r6, #24]
 8014c40:	69f6      	ldr	r6, [r6, #28]
 8014c42:	2e00      	cmp	r6, #0
 8014c44:	f000 8082 	beq.w	8014d4c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x174>
 8014c48:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8014c4c:	d141      	bne.n	8014cd2 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0xfa>
 8014c4e:	eb06 0c07 	add.w	ip, r6, r7
 8014c52:	f105 3eff 	add.w	lr, r5, #4294967295
 8014c56:	f64f 6801 	movw	r8, #65025	@ 0xfe01
 8014c5a:	4fc0      	ldr	r7, [pc, #768]	@ (8014f5c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x384>)
 8014c5c:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8014c60:	f816 3b01 	ldrb.w	r3, [r6], #1
 8014c64:	fb11 f503 	smulbb	r5, r1, r3
 8014c68:	4545      	cmp	r5, r8
 8014c6a:	d109      	bne.n	8014c80 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0xa8>
 8014c6c:	8813      	ldrh	r3, [r2, #0]
 8014c6e:	8023      	strh	r3, [r4, #0]
 8014c70:	4566      	cmp	r6, ip
 8014c72:	f104 0402 	add.w	r4, r4, #2
 8014c76:	f102 0202 	add.w	r2, r2, #2
 8014c7a:	d1ef      	bne.n	8014c5c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x84>
 8014c7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c80:	2d00      	cmp	r5, #0
 8014c82:	d0f5      	beq.n	8014c70 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x98>
 8014c84:	8823      	ldrh	r3, [r4, #0]
 8014c86:	8811      	ldrh	r1, [r2, #0]
 8014c88:	ea03 0a07 	and.w	sl, r3, r7
 8014c8c:	f403 69fc 	and.w	r9, r3, #2016	@ 0x7e0
 8014c90:	ea01 0007 	and.w	r0, r1, r7
 8014c94:	eba0 000a 	sub.w	r0, r0, sl
 8014c98:	4368      	muls	r0, r5
 8014c9a:	eb0a 4020 	add.w	r0, sl, r0, asr #16
 8014c9e:	f401 6afc 	and.w	sl, r1, #2016	@ 0x7e0
 8014ca2:	f001 011f 	and.w	r1, r1, #31
 8014ca6:	ebaa 0a09 	sub.w	sl, sl, r9
 8014caa:	4038      	ands	r0, r7
 8014cac:	fb05 fa0a 	mul.w	sl, r5, sl
 8014cb0:	eb09 492a 	add.w	r9, r9, sl, asr #16
 8014cb4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8014cb8:	ea40 0009 	orr.w	r0, r0, r9
 8014cbc:	f003 091f 	and.w	r9, r3, #31
 8014cc0:	eba1 0109 	sub.w	r1, r1, r9
 8014cc4:	4369      	muls	r1, r5
 8014cc6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014cca:	f003 031f 	and.w	r3, r3, #31
 8014cce:	4303      	orrs	r3, r0
 8014cd0:	e7cd      	b.n	8014c6e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x96>
 8014cd2:	f8df c288 	ldr.w	ip, [pc, #648]	@ 8014f5c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x384>
 8014cd6:	5c2b      	ldrb	r3, [r5, r0]
 8014cd8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8014cdc:	fb13 f301 	smulbb	r3, r3, r1
 8014ce0:	fb08 f303 	mul.w	r3, r8, r3
 8014ce4:	121b      	asrs	r3, r3, #8
 8014ce6:	d02c      	beq.n	8014d42 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x16a>
 8014ce8:	f834 9010 	ldrh.w	r9, [r4, r0, lsl #1]
 8014cec:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8014cf0:	ea09 0b0c 	and.w	fp, r9, ip
 8014cf4:	f409 6afc 	and.w	sl, r9, #2016	@ 0x7e0
 8014cf8:	ea01 0e0c 	and.w	lr, r1, ip
 8014cfc:	ebae 0e0b 	sub.w	lr, lr, fp
 8014d00:	fb03 fe0e 	mul.w	lr, r3, lr
 8014d04:	eb0b 4e2e 	add.w	lr, fp, lr, asr #16
 8014d08:	ea0e 0b0c 	and.w	fp, lr, ip
 8014d0c:	f401 6efc 	and.w	lr, r1, #2016	@ 0x7e0
 8014d10:	f001 011f 	and.w	r1, r1, #31
 8014d14:	ebae 0e0a 	sub.w	lr, lr, sl
 8014d18:	fb03 fe0e 	mul.w	lr, r3, lr
 8014d1c:	eb0a 4a2e 	add.w	sl, sl, lr, asr #16
 8014d20:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8014d24:	ea4b 0e0a 	orr.w	lr, fp, sl
 8014d28:	f009 0a1f 	and.w	sl, r9, #31
 8014d2c:	eba1 010a 	sub.w	r1, r1, sl
 8014d30:	434b      	muls	r3, r1
 8014d32:	eb09 4323 	add.w	r3, r9, r3, asr #16
 8014d36:	f003 031f 	and.w	r3, r3, #31
 8014d3a:	ea4e 0303 	orr.w	r3, lr, r3
 8014d3e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 8014d42:	3001      	adds	r0, #1
 8014d44:	4287      	cmp	r7, r0
 8014d46:	d1c6      	bne.n	8014cd6 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0xfe>
 8014d48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d4c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8014d50:	442f      	add	r7, r5
 8014d52:	d138      	bne.n	8014dc6 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x1ee>
 8014d54:	4e81      	ldr	r6, [pc, #516]	@ (8014f5c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x384>)
 8014d56:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014d5a:	8810      	ldrh	r0, [r2, #0]
 8014d5c:	29ff      	cmp	r1, #255	@ 0xff
 8014d5e:	d108      	bne.n	8014d72 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x19a>
 8014d60:	8020      	strh	r0, [r4, #0]
 8014d62:	42bd      	cmp	r5, r7
 8014d64:	f104 0402 	add.w	r4, r4, #2
 8014d68:	f102 0202 	add.w	r2, r2, #2
 8014d6c:	d1f3      	bne.n	8014d56 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x17e>
 8014d6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d72:	f8b4 e000 	ldrh.w	lr, [r4]
 8014d76:	ea00 0c06 	and.w	ip, r0, r6
 8014d7a:	ea0e 0806 	and.w	r8, lr, r6
 8014d7e:	f40e 63fc 	and.w	r3, lr, #2016	@ 0x7e0
 8014d82:	ebac 0c08 	sub.w	ip, ip, r8
 8014d86:	fb01 fc0c 	mul.w	ip, r1, ip
 8014d8a:	eb08 2c2c 	add.w	ip, r8, ip, asr #8
 8014d8e:	f400 68fc 	and.w	r8, r0, #2016	@ 0x7e0
 8014d92:	f000 001f 	and.w	r0, r0, #31
 8014d96:	eba8 0803 	sub.w	r8, r8, r3
 8014d9a:	ea0c 0c06 	and.w	ip, ip, r6
 8014d9e:	fb01 f808 	mul.w	r8, r1, r8
 8014da2:	eb03 2328 	add.w	r3, r3, r8, asr #8
 8014da6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8014daa:	ea4c 0303 	orr.w	r3, ip, r3
 8014dae:	f00e 0c1f 	and.w	ip, lr, #31
 8014db2:	eba0 000c 	sub.w	r0, r0, ip
 8014db6:	4348      	muls	r0, r1
 8014db8:	eb0e 2120 	add.w	r1, lr, r0, asr #8
 8014dbc:	f001 011f 	and.w	r1, r1, #31
 8014dc0:	4319      	orrs	r1, r3
 8014dc2:	8021      	strh	r1, [r4, #0]
 8014dc4:	e7cd      	b.n	8014d62 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x18a>
 8014dc6:	f1a2 0e02 	sub.w	lr, r2, #2
 8014dca:	4a64      	ldr	r2, [pc, #400]	@ (8014f5c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x384>)
 8014dcc:	8821      	ldrh	r1, [r4, #0]
 8014dce:	f83e 0f02 	ldrh.w	r0, [lr, #2]!
 8014dd2:	ea01 0902 	and.w	r9, r1, r2
 8014dd6:	f815 cb01 	ldrb.w	ip, [r5], #1
 8014dda:	ea00 0302 	and.w	r3, r0, r2
 8014dde:	f401 66fc 	and.w	r6, r1, #2016	@ 0x7e0
 8014de2:	fb08 fc0c 	mul.w	ip, r8, ip
 8014de6:	42bd      	cmp	r5, r7
 8014de8:	eba3 0309 	sub.w	r3, r3, r9
 8014dec:	fb0c f303 	mul.w	r3, ip, r3
 8014df0:	eb09 4323 	add.w	r3, r9, r3, asr #16
 8014df4:	f400 69fc 	and.w	r9, r0, #2016	@ 0x7e0
 8014df8:	f000 001f 	and.w	r0, r0, #31
 8014dfc:	eba9 0906 	sub.w	r9, r9, r6
 8014e00:	ea03 0302 	and.w	r3, r3, r2
 8014e04:	fb0c f909 	mul.w	r9, ip, r9
 8014e08:	eb06 4629 	add.w	r6, r6, r9, asr #16
 8014e0c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8014e10:	ea43 0306 	orr.w	r3, r3, r6
 8014e14:	f001 061f 	and.w	r6, r1, #31
 8014e18:	eba0 0006 	sub.w	r0, r0, r6
 8014e1c:	fb0c f000 	mul.w	r0, ip, r0
 8014e20:	eb01 4120 	add.w	r1, r1, r0, asr #16
 8014e24:	f001 011f 	and.w	r1, r1, #31
 8014e28:	ea43 0301 	orr.w	r3, r3, r1
 8014e2c:	f824 3b02 	strh.w	r3, [r4], #2
 8014e30:	d1cc      	bne.n	8014dcc <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x1f4>
 8014e32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e36:	4648      	mov	r0, r9
 8014e38:	f007 fe9e 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014e3c:	2802      	cmp	r0, #2
 8014e3e:	f040 808b 	bne.w	8014f58 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x380>
 8014e42:	6972      	ldr	r2, [r6, #20]
 8014e44:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8014e48:	442f      	add	r7, r5
 8014e4a:	f1a2 0204 	sub.w	r2, r2, #4
 8014e4e:	d147      	bne.n	8014ee0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x308>
 8014e50:	f64f 6e01 	movw	lr, #65025	@ 0xfe01
 8014e54:	4e41      	ldr	r6, [pc, #260]	@ (8014f5c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x384>)
 8014e56:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8014e5a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014e5e:	0e18      	lsrs	r0, r3, #24
 8014e60:	4348      	muls	r0, r1
 8014e62:	4570      	cmp	r0, lr
 8014e64:	d10f      	bne.n	8014e86 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x2ae>
 8014e66:	0958      	lsrs	r0, r3, #5
 8014e68:	ea06 2113 	and.w	r1, r6, r3, lsr #8
 8014e6c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8014e70:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8014e74:	4301      	orrs	r1, r0
 8014e76:	430b      	orrs	r3, r1
 8014e78:	8023      	strh	r3, [r4, #0]
 8014e7a:	42bd      	cmp	r5, r7
 8014e7c:	f104 0402 	add.w	r4, r4, #2
 8014e80:	d1e9      	bne.n	8014e56 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x27e>
 8014e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e86:	2800      	cmp	r0, #0
 8014e88:	d0f7      	beq.n	8014e7a <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x2a2>
 8014e8a:	f8b4 c000 	ldrh.w	ip, [r4]
 8014e8e:	ea06 2113 	and.w	r1, r6, r3, lsr #8
 8014e92:	ea0c 0806 	and.w	r8, ip, r6
 8014e96:	b289      	uxth	r1, r1
 8014e98:	f40c 69fc 	and.w	r9, ip, #2016	@ 0x7e0
 8014e9c:	eba1 0108 	sub.w	r1, r1, r8
 8014ea0:	4341      	muls	r1, r0
 8014ea2:	eb08 4121 	add.w	r1, r8, r1, asr #16
 8014ea6:	ea4f 1853 	mov.w	r8, r3, lsr #5
 8014eaa:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8014eae:	4031      	ands	r1, r6
 8014eb0:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8014eb4:	eba8 0809 	sub.w	r8, r8, r9
 8014eb8:	fb00 f808 	mul.w	r8, r0, r8
 8014ebc:	eb09 4828 	add.w	r8, r9, r8, asr #16
 8014ec0:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8014ec4:	ea41 0108 	orr.w	r1, r1, r8
 8014ec8:	f00c 081f 	and.w	r8, ip, #31
 8014ecc:	eba3 0308 	sub.w	r3, r3, r8
 8014ed0:	4343      	muls	r3, r0
 8014ed2:	eb0c 4323 	add.w	r3, ip, r3, asr #16
 8014ed6:	f003 031f 	and.w	r3, r3, #31
 8014eda:	4319      	orrs	r1, r3
 8014edc:	8021      	strh	r1, [r4, #0]
 8014ede:	e7cc      	b.n	8014e7a <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x2a2>
 8014ee0:	f8df e078 	ldr.w	lr, [pc, #120]	@ 8014f5c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x384>
 8014ee4:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8014ee8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014eec:	0e33      	lsrs	r3, r6, #24
 8014eee:	434b      	muls	r3, r1
 8014ef0:	fb08 f303 	mul.w	r3, r8, r3
 8014ef4:	121b      	asrs	r3, r3, #8
 8014ef6:	d02b      	beq.n	8014f50 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x378>
 8014ef8:	8820      	ldrh	r0, [r4, #0]
 8014efa:	ea0e 2c16 	and.w	ip, lr, r6, lsr #8
 8014efe:	ea00 090e 	and.w	r9, r0, lr
 8014f02:	fa1f fc8c 	uxth.w	ip, ip
 8014f06:	f400 61fc 	and.w	r1, r0, #2016	@ 0x7e0
 8014f0a:	ebac 0c09 	sub.w	ip, ip, r9
 8014f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8014f12:	eb09 492c 	add.w	r9, r9, ip, asr #16
 8014f16:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8014f1a:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8014f1e:	ea09 090e 	and.w	r9, r9, lr
 8014f22:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8014f26:	ebac 0c01 	sub.w	ip, ip, r1
 8014f2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8014f2e:	eb01 412c 	add.w	r1, r1, ip, asr #16
 8014f32:	f000 0c1f 	and.w	ip, r0, #31
 8014f36:	eba6 060c 	sub.w	r6, r6, ip
 8014f3a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8014f3e:	4373      	muls	r3, r6
 8014f40:	ea49 0101 	orr.w	r1, r9, r1
 8014f44:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014f48:	f000 001f 	and.w	r0, r0, #31
 8014f4c:	4301      	orrs	r1, r0
 8014f4e:	8021      	strh	r1, [r4, #0]
 8014f50:	42bd      	cmp	r5, r7
 8014f52:	f104 0402 	add.w	r4, r4, #2
 8014f56:	d1c5      	bne.n	8014ee4 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x30c>
 8014f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f5c:	fffff800 	.word	0xfffff800

08014f60 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_>:
 8014f60:	b570      	push	{r4, r5, r6, lr}
 8014f62:	f9b0 4026 	ldrsh.w	r4, [r0, #38]	@ 0x26
 8014f66:	68c6      	ldr	r6, [r0, #12]
 8014f68:	9d04      	ldr	r5, [sp, #16]
 8014f6a:	42a6      	cmp	r6, r4
 8014f6c:	da38      	bge.n	8014fe0 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x80>
 8014f6e:	6944      	ldr	r4, [r0, #20]
 8014f70:	b1b4      	cbz	r4, 8014fa0 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x40>
 8014f72:	1d26      	adds	r6, r4, #4
 8014f74:	6146      	str	r6, [r0, #20]
 8014f76:	6824      	ldr	r4, [r4, #0]
 8014f78:	0e26      	lsrs	r6, r4, #24
 8014f7a:	702e      	strb	r6, [r5, #0]
 8014f7c:	0c26      	lsrs	r6, r4, #16
 8014f7e:	700e      	strb	r6, [r1, #0]
 8014f80:	0a21      	lsrs	r1, r4, #8
 8014f82:	7011      	strb	r1, [r2, #0]
 8014f84:	701c      	strb	r4, [r3, #0]
 8014f86:	f890 202a 	ldrb.w	r2, [r0, #42]	@ 0x2a
 8014f8a:	2aff      	cmp	r2, #255	@ 0xff
 8014f8c:	d006      	beq.n	8014f9c <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x3c>
 8014f8e:	782b      	ldrb	r3, [r5, #0]
 8014f90:	fb13 f302 	smulbb	r3, r3, r2
 8014f94:	22ff      	movs	r2, #255	@ 0xff
 8014f96:	fb93 f3f2 	sdiv	r3, r3, r2
 8014f9a:	702b      	strb	r3, [r5, #0]
 8014f9c:	2001      	movs	r0, #1
 8014f9e:	bd70      	pop	{r4, r5, r6, pc}
 8014fa0:	6984      	ldr	r4, [r0, #24]
 8014fa2:	2c00      	cmp	r4, #0
 8014fa4:	d0ef      	beq.n	8014f86 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x26>
 8014fa6:	1ca6      	adds	r6, r4, #2
 8014fa8:	6186      	str	r6, [r0, #24]
 8014faa:	8826      	ldrh	r6, [r4, #0]
 8014fac:	1234      	asrs	r4, r6, #8
 8014fae:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8014fb2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8014fb6:	700c      	strb	r4, [r1, #0]
 8014fb8:	10f1      	asrs	r1, r6, #3
 8014fba:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8014fbe:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8014fc2:	7011      	strb	r1, [r2, #0]
 8014fc4:	f3c6 0282 	ubfx	r2, r6, #2, #3
 8014fc8:	ea42 06c6 	orr.w	r6, r2, r6, lsl #3
 8014fcc:	701e      	strb	r6, [r3, #0]
 8014fce:	69c3      	ldr	r3, [r0, #28]
 8014fd0:	b123      	cbz	r3, 8014fdc <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x7c>
 8014fd2:	1c5a      	adds	r2, r3, #1
 8014fd4:	61c2      	str	r2, [r0, #28]
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	702b      	strb	r3, [r5, #0]
 8014fda:	e7d4      	b.n	8014f86 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x26>
 8014fdc:	23ff      	movs	r3, #255	@ 0xff
 8014fde:	e7fb      	b.n	8014fd8 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x78>
 8014fe0:	2000      	movs	r0, #0
 8014fe2:	bd70      	pop	{r4, r5, r6, pc}

08014fe4 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv>:
 8014fe4:	b538      	push	{r3, r4, r5, lr}
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	68c2      	ldr	r2, [r0, #12]
 8014fea:	4604      	mov	r4, r0
 8014fec:	6143      	str	r3, [r0, #20]
 8014fee:	6183      	str	r3, [r0, #24]
 8014ff0:	61c3      	str	r3, [r0, #28]
 8014ff2:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	db01      	blt.n	8014ffe <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x1a>
 8014ffa:	2000      	movs	r0, #0
 8014ffc:	bd38      	pop	{r3, r4, r5, pc}
 8014ffe:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 8015002:	6902      	ldr	r2, [r0, #16]
 8015004:	429a      	cmp	r2, r3
 8015006:	daf8      	bge.n	8014ffa <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x16>
 8015008:	f100 0520 	add.w	r5, r0, #32
 801500c:	4628      	mov	r0, r5
 801500e:	f007 fdb3 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015012:	2802      	cmp	r0, #2
 8015014:	4628      	mov	r0, r5
 8015016:	d10f      	bne.n	8015038 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x54>
 8015018:	f007 fd56 	bl	801cac8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801501c:	6160      	str	r0, [r4, #20]
 801501e:	2800      	cmp	r0, #0
 8015020:	d0eb      	beq.n	8014ffa <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x16>
 8015022:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
 8015026:	6921      	ldr	r1, [r4, #16]
 8015028:	68e2      	ldr	r2, [r4, #12]
 801502a:	fb01 2303 	mla	r3, r1, r3, r2
 801502e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8015032:	6160      	str	r0, [r4, #20]
 8015034:	2001      	movs	r0, #1
 8015036:	bd38      	pop	{r3, r4, r5, pc}
 8015038:	f007 fd46 	bl	801cac8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801503c:	61a0      	str	r0, [r4, #24]
 801503e:	2800      	cmp	r0, #0
 8015040:	d0db      	beq.n	8014ffa <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x16>
 8015042:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
 8015046:	6921      	ldr	r1, [r4, #16]
 8015048:	68e2      	ldr	r2, [r4, #12]
 801504a:	fb01 2303 	mla	r3, r1, r3, r2
 801504e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015052:	61a0      	str	r0, [r4, #24]
 8015054:	4628      	mov	r0, r5
 8015056:	f007 fd67 	bl	801cb28 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 801505a:	61e0      	str	r0, [r4, #28]
 801505c:	2800      	cmp	r0, #0
 801505e:	d0e9      	beq.n	8015034 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x50>
 8015060:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
 8015064:	6921      	ldr	r1, [r4, #16]
 8015066:	68e2      	ldr	r2, [r4, #12]
 8015068:	fb01 2303 	mla	r3, r1, r3, r2
 801506c:	4418      	add	r0, r3
 801506e:	61e0      	str	r0, [r4, #28]
 8015070:	e7e0      	b.n	8015034 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x50>
	...

08015074 <_ZN8touchgfx19PainterRGB565BitmapD1Ev>:
 8015074:	4b03      	ldr	r3, [pc, #12]	@ (8015084 <_ZN8touchgfx19PainterRGB565BitmapD1Ev+0x10>)
 8015076:	b510      	push	{r4, lr}
 8015078:	4604      	mov	r4, r0
 801507a:	6003      	str	r3, [r0, #0]
 801507c:	f001 fb02 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
 8015080:	4620      	mov	r0, r4
 8015082:	bd10      	pop	{r4, pc}
 8015084:	08025ad0 	.word	0x08025ad0

08015088 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>:
 8015088:	b510      	push	{r4, lr}
 801508a:	4604      	mov	r4, r0
 801508c:	f7ff fff2 	bl	8015074 <_ZN8touchgfx19PainterRGB565BitmapD1Ev>
 8015090:	212c      	movs	r1, #44	@ 0x2c
 8015092:	4620      	mov	r0, r4
 8015094:	f009 fd47 	bl	801eb26 <_ZdlPvj>
 8015098:	4620      	mov	r0, r4
 801509a:	bd10      	pop	{r4, pc}

0801509c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
 801509c:	b570      	push	{r4, r5, r6, lr}
 801509e:	880b      	ldrh	r3, [r1, #0]
 80150a0:	4605      	mov	r5, r0
 80150a2:	4604      	mov	r4, r0
 80150a4:	f825 3f20 	strh.w	r3, [r5, #32]!
 80150a8:	4628      	mov	r0, r5
 80150aa:	f007 fc0f 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80150ae:	4606      	mov	r6, r0
 80150b0:	4628      	mov	r0, r5
 80150b2:	f007 fc43 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80150b6:	2300      	movs	r3, #0
 80150b8:	8520      	strh	r0, [r4, #40]	@ 0x28
 80150ba:	f104 0022 	add.w	r0, r4, #34	@ 0x22
 80150be:	8463      	strh	r3, [r4, #34]	@ 0x22
 80150c0:	84a3      	strh	r3, [r4, #36]	@ 0x24
 80150c2:	84e6      	strh	r6, [r4, #38]	@ 0x26
 80150c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150c8:	f004 bc1e 	b.w	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>

080150cc <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh>:
 80150cc:	b570      	push	{r4, r5, r6, lr}
 80150ce:	4604      	mov	r4, r0
 80150d0:	460e      	mov	r6, r1
 80150d2:	4615      	mov	r5, r2
 80150d4:	f001 facc 	bl	8016670 <_ZN8touchgfx15AbstractPainterC1Ev>
 80150d8:	4b12      	ldr	r3, [pc, #72]	@ (8015124 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x58>)
 80150da:	6023      	str	r3, [r4, #0]
 80150dc:	4b12      	ldr	r3, [pc, #72]	@ (8015128 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x5c>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	6898      	ldr	r0, [r3, #8]
 80150e2:	6803      	ldr	r3, [r0, #0]
 80150e4:	6a1b      	ldr	r3, [r3, #32]
 80150e6:	4798      	blx	r3
 80150e8:	2810      	cmp	r0, #16
 80150ea:	d005      	beq.n	80150f8 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x2c>
 80150ec:	4b0f      	ldr	r3, [pc, #60]	@ (801512c <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x60>)
 80150ee:	212d      	movs	r1, #45	@ 0x2d
 80150f0:	4a0f      	ldr	r2, [pc, #60]	@ (8015130 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x64>)
 80150f2:	4810      	ldr	r0, [pc, #64]	@ (8015134 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x68>)
 80150f4:	f00a fe3e 	bl	801fd74 <__assert_func>
 80150f8:	4b0f      	ldr	r3, [pc, #60]	@ (8015138 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x6c>)
 80150fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80150fe:	4620      	mov	r0, r4
 8015100:	4631      	mov	r1, r6
 8015102:	6023      	str	r3, [r4, #0]
 8015104:	2300      	movs	r3, #0
 8015106:	8422      	strh	r2, [r4, #32]
 8015108:	6163      	str	r3, [r4, #20]
 801510a:	61a3      	str	r3, [r4, #24]
 801510c:	61e3      	str	r3, [r4, #28]
 801510e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8015110:	84a3      	strh	r3, [r4, #36]	@ 0x24
 8015112:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8015114:	8523      	strh	r3, [r4, #40]	@ 0x28
 8015116:	f7ff ffc1 	bl	801509c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
 801511a:	f884 502a 	strb.w	r5, [r4, #42]	@ 0x2a
 801511e:	4620      	mov	r0, r4
 8015120:	bd70      	pop	{r4, r5, r6, pc}
 8015122:	bf00      	nop
 8015124:	08025ad0 	.word	0x08025ad0
 8015128:	20024e34 	.word	0x20024e34
 801512c:	080247b8 	.word	0x080247b8
 8015130:	080258a0 	.word	0x080258a0
 8015134:	0802486e 	.word	0x0802486e
 8015138:	08025888 	.word	0x08025888

0801513c <_ZN8touchgfx21AbstractPainterRGB56510renderInitEv>:
 801513c:	2001      	movs	r0, #1
 801513e:	4770      	bx	lr

08015140 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh>:
 8015140:	4413      	add	r3, r2
 8015142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015146:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801514a:	7a07      	ldrb	r7, [r0, #8]
 801514c:	7f03      	ldrb	r3, [r0, #28]
 801514e:	9c08      	ldr	r4, [sp, #32]
 8015150:	fb17 f703 	smulbb	r7, r7, r3
 8015154:	23ff      	movs	r3, #255	@ 0xff
 8015156:	9d07      	ldr	r5, [sp, #28]
 8015158:	fbb7 f7f3 	udiv	r7, r7, r3
 801515c:	429f      	cmp	r7, r3
 801515e:	4425      	add	r5, r4
 8015160:	d134      	bne.n	80151cc <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x8c>
 8015162:	4f34      	ldr	r7, [pc, #208]	@ (8015234 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0xf4>)
 8015164:	f814 6b01 	ldrb.w	r6, [r4], #1
 8015168:	2eff      	cmp	r6, #255	@ 0xff
 801516a:	d107      	bne.n	801517c <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x3c>
 801516c:	8a83      	ldrh	r3, [r0, #20]
 801516e:	42ac      	cmp	r4, r5
 8015170:	800b      	strh	r3, [r1, #0]
 8015172:	f101 0102 	add.w	r1, r1, #2
 8015176:	d1f5      	bne.n	8015164 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x24>
 8015178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801517c:	880a      	ldrh	r2, [r1, #0]
 801517e:	f8b0 c016 	ldrh.w	ip, [r0, #22]
 8015182:	ea02 0307 	and.w	r3, r2, r7
 8015186:	f402 6efc 	and.w	lr, r2, #2016	@ 0x7e0
 801518a:	ebac 0c03 	sub.w	ip, ip, r3
 801518e:	fb06 fc0c 	mul.w	ip, r6, ip
 8015192:	eb03 232c 	add.w	r3, r3, ip, asr #8
 8015196:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 801519a:	ebac 0c0e 	sub.w	ip, ip, lr
 801519e:	403b      	ands	r3, r7
 80151a0:	fb06 fc0c 	mul.w	ip, r6, ip
 80151a4:	eb0e 2e2c 	add.w	lr, lr, ip, asr #8
 80151a8:	f002 0c1f 	and.w	ip, r2, #31
 80151ac:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80151b0:	ea43 030e 	orr.w	r3, r3, lr
 80151b4:	f8b0 e01a 	ldrh.w	lr, [r0, #26]
 80151b8:	ebae 0e0c 	sub.w	lr, lr, ip
 80151bc:	fb06 f60e 	mul.w	r6, r6, lr
 80151c0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80151c4:	f002 021f 	and.w	r2, r2, #31
 80151c8:	4313      	orrs	r3, r2
 80151ca:	e7d0      	b.n	801516e <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x2e>
 80151cc:	f8df e064 	ldr.w	lr, [pc, #100]	@ 8015234 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0xf4>
 80151d0:	880a      	ldrh	r2, [r1, #0]
 80151d2:	f814 6b01 	ldrb.w	r6, [r4], #1
 80151d6:	ea02 080e 	and.w	r8, r2, lr
 80151da:	f8b0 c016 	ldrh.w	ip, [r0, #22]
 80151de:	437e      	muls	r6, r7
 80151e0:	f402 63fc 	and.w	r3, r2, #2016	@ 0x7e0
 80151e4:	ebac 0c08 	sub.w	ip, ip, r8
 80151e8:	42ac      	cmp	r4, r5
 80151ea:	fb06 fc0c 	mul.w	ip, r6, ip
 80151ee:	eb08 4c2c 	add.w	ip, r8, ip, asr #16
 80151f2:	f8b0 8018 	ldrh.w	r8, [r0, #24]
 80151f6:	eba8 0803 	sub.w	r8, r8, r3
 80151fa:	ea0c 0c0e 	and.w	ip, ip, lr
 80151fe:	fb06 f808 	mul.w	r8, r6, r8
 8015202:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015206:	f002 081f 	and.w	r8, r2, #31
 801520a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801520e:	ea4c 0303 	orr.w	r3, ip, r3
 8015212:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8015216:	ebac 0c08 	sub.w	ip, ip, r8
 801521a:	fb06 f60c 	mul.w	r6, r6, ip
 801521e:	eb02 4226 	add.w	r2, r2, r6, asr #16
 8015222:	f002 021f 	and.w	r2, r2, #31
 8015226:	ea42 0203 	orr.w	r2, r2, r3
 801522a:	f821 2b02 	strh.w	r2, [r1], #2
 801522e:	d1cf      	bne.n	80151d0 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x90>
 8015230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015234:	fffff800 	.word	0xfffff800

08015238 <_ZN8touchgfx13PainterRGB56510renderNextERhS1_S1_S1_>:
 8015238:	b510      	push	{r4, lr}
 801523a:	8ac4      	ldrh	r4, [r0, #22]
 801523c:	1224      	asrs	r4, r4, #8
 801523e:	700c      	strb	r4, [r1, #0]
 8015240:	8b01      	ldrh	r1, [r0, #24]
 8015242:	10c9      	asrs	r1, r1, #3
 8015244:	7011      	strb	r1, [r2, #0]
 8015246:	7e82      	ldrb	r2, [r0, #26]
 8015248:	00d2      	lsls	r2, r2, #3
 801524a:	701a      	strb	r2, [r3, #0]
 801524c:	9b02      	ldr	r3, [sp, #8]
 801524e:	7f02      	ldrb	r2, [r0, #28]
 8015250:	2001      	movs	r0, #1
 8015252:	701a      	strb	r2, [r3, #0]
 8015254:	bd10      	pop	{r4, pc}
	...

08015258 <_ZN8touchgfx13PainterRGB565D1Ev>:
 8015258:	4b03      	ldr	r3, [pc, #12]	@ (8015268 <_ZN8touchgfx13PainterRGB565D1Ev+0x10>)
 801525a:	b510      	push	{r4, lr}
 801525c:	4604      	mov	r4, r0
 801525e:	6003      	str	r3, [r0, #0]
 8015260:	f001 fa10 	bl	8016684 <_ZN8touchgfx15AbstractPainterD1Ev>
 8015264:	4620      	mov	r0, r4
 8015266:	bd10      	pop	{r4, pc}
 8015268:	08025ad0 	.word	0x08025ad0

0801526c <_ZN8touchgfx13PainterRGB565D0Ev>:
 801526c:	b510      	push	{r4, lr}
 801526e:	4604      	mov	r4, r0
 8015270:	f7ff fff2 	bl	8015258 <_ZN8touchgfx13PainterRGB565D1Ev>
 8015274:	2120      	movs	r1, #32
 8015276:	4620      	mov	r0, r4
 8015278:	f009 fc55 	bl	801eb26 <_ZdlPvj>
 801527c:	4620      	mov	r0, r4
 801527e:	bd10      	pop	{r4, pc}

08015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>:
 8015280:	b289      	uxth	r1, r1
 8015282:	7702      	strb	r2, [r0, #28]
 8015284:	f401 4378 	and.w	r3, r1, #63488	@ 0xf800
 8015288:	8281      	strh	r1, [r0, #20]
 801528a:	82c3      	strh	r3, [r0, #22]
 801528c:	f401 63fc 	and.w	r3, r1, #2016	@ 0x7e0
 8015290:	f001 011f 	and.w	r1, r1, #31
 8015294:	8303      	strh	r3, [r0, #24]
 8015296:	8341      	strh	r1, [r0, #26]
 8015298:	4770      	bx	lr
	...

0801529c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh>:
 801529c:	b570      	push	{r4, r5, r6, lr}
 801529e:	4604      	mov	r4, r0
 80152a0:	460d      	mov	r5, r1
 80152a2:	4616      	mov	r6, r2
 80152a4:	f001 f9e4 	bl	8016670 <_ZN8touchgfx15AbstractPainterC1Ev>
 80152a8:	4b0c      	ldr	r3, [pc, #48]	@ (80152dc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh+0x40>)
 80152aa:	6023      	str	r3, [r4, #0]
 80152ac:	4b0c      	ldr	r3, [pc, #48]	@ (80152e0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh+0x44>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	6898      	ldr	r0, [r3, #8]
 80152b2:	6803      	ldr	r3, [r0, #0]
 80152b4:	6a1b      	ldr	r3, [r3, #32]
 80152b6:	4798      	blx	r3
 80152b8:	2810      	cmp	r0, #16
 80152ba:	d005      	beq.n	80152c8 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh+0x2c>
 80152bc:	4b09      	ldr	r3, [pc, #36]	@ (80152e4 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh+0x48>)
 80152be:	212d      	movs	r1, #45	@ 0x2d
 80152c0:	4a09      	ldr	r2, [pc, #36]	@ (80152e8 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh+0x4c>)
 80152c2:	480a      	ldr	r0, [pc, #40]	@ (80152ec <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh+0x50>)
 80152c4:	f00a fd56 	bl	801fd74 <__assert_func>
 80152c8:	4b09      	ldr	r3, [pc, #36]	@ (80152f0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh+0x54>)
 80152ca:	4620      	mov	r0, r4
 80152cc:	4632      	mov	r2, r6
 80152ce:	4629      	mov	r1, r5
 80152d0:	6023      	str	r3, [r4, #0]
 80152d2:	f7ff ffd5 	bl	8015280 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh>
 80152d6:	4620      	mov	r0, r4
 80152d8:	bd70      	pop	{r4, r5, r6, pc}
 80152da:	bf00      	nop
 80152dc:	08025ad0 	.word	0x08025ad0
 80152e0:	20024e34 	.word	0x20024e34
 80152e4:	080247b8 	.word	0x080247b8
 80152e8:	080258fc 	.word	0x080258fc
 80152ec:	0802486e 	.word	0x0802486e
 80152f0:	080258e4 	.word	0x080258e4

080152f4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 80152f4:	10c9      	asrs	r1, r1, #3
 80152f6:	2900      	cmp	r1, #0
 80152f8:	bfb8      	it	lt
 80152fa:	4249      	neglt	r1, r1
 80152fc:	2801      	cmp	r0, #1
 80152fe:	d108      	bne.n	8015312 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8015300:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8015304:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8015308:	4601      	mov	r1, r0
 801530a:	dd02      	ble.n	8015312 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 801530c:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8015310:	4770      	bx	lr
 8015312:	29ff      	cmp	r1, #255	@ 0xff
 8015314:	bfa8      	it	ge
 8015316:	21ff      	movge	r1, #255	@ 0xff
 8015318:	4608      	mov	r0, r1
 801531a:	4770      	bx	lr

0801531c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 801531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015320:	688c      	ldr	r4, [r1, #8]
 8015322:	b087      	sub	sp, #28
 8015324:	4607      	mov	r7, r0
 8015326:	2c00      	cmp	r4, #0
 8015328:	db2d      	blt.n	8015386 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x6a>
 801532a:	6803      	ldr	r3, [r0, #0]
 801532c:	68da      	ldr	r2, [r3, #12]
 801532e:	42a2      	cmp	r2, r4
 8015330:	dd29      	ble.n	8015386 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x6a>
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	691d      	ldr	r5, [r3, #16]
 8015336:	68ce      	ldr	r6, [r1, #12]
 8015338:	fb05 2504 	mla	r5, r5, r4, r2
 801533c:	f893 a004 	ldrb.w	sl, [r3, #4]
 8015340:	698a      	ldr	r2, [r1, #24]
 8015342:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8015346:	f8d1 801c 	ldr.w	r8, [r1, #28]
 801534a:	9205      	str	r2, [sp, #20]
 801534c:	f838 2f02 	ldrh.w	r2, [r8, #2]!
 8015350:	f839 3f02 	ldrh.w	r3, [r9, #2]!
 8015354:	6839      	ldr	r1, [r7, #0]
 8015356:	1898      	adds	r0, r3, r2
 8015358:	6889      	ldr	r1, [r1, #8]
 801535a:	4288      	cmp	r0, r1
 801535c:	db02      	blt.n	8015364 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x48>
 801535e:	1a8b      	subs	r3, r1, r2
 8015360:	2b00      	cmp	r3, #0
 8015362:	dd0e      	ble.n	8015382 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	9905      	ldr	r1, [sp, #20]
 8015368:	f8d0 c000 	ldr.w	ip, [r0]
 801536c:	eb01 0e02 	add.w	lr, r1, r2
 8015370:	9301      	str	r3, [sp, #4]
 8015372:	9400      	str	r4, [sp, #0]
 8015374:	4653      	mov	r3, sl
 8015376:	f8cd e008 	str.w	lr, [sp, #8]
 801537a:	4629      	mov	r1, r5
 801537c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8015380:	47d8      	blx	fp
 8015382:	3e01      	subs	r6, #1
 8015384:	d1e2      	bne.n	801534c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8015386:	b007      	add	sp, #28
 8015388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801538c <_ZN8touchgfx10Rasterizer6lineToEii>:
 801538c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8015390:	b90b      	cbnz	r3, 8015396 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8015392:	f003 b8c8 	b.w	8018526 <_ZN8touchgfx7Outline6lineToEii>
 8015396:	4770      	bx	lr

08015398 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8015398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801539c:	4604      	mov	r4, r0
 801539e:	2500      	movs	r5, #0
 80153a0:	4b7b      	ldr	r3, [pc, #492]	@ (8015590 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1f8>)
 80153a2:	f100 0618 	add.w	r6, r0, #24
 80153a6:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 80153aa:	b087      	sub	sp, #28
 80153ac:	6003      	str	r3, [r0, #0]
 80153ae:	4690      	mov	r8, r2
 80153b0:	6041      	str	r1, [r0, #4]
 80153b2:	6085      	str	r5, [r0, #8]
 80153b4:	60c5      	str	r5, [r0, #12]
 80153b6:	6105      	str	r5, [r0, #16]
 80153b8:	6145      	str	r5, [r0, #20]
 80153ba:	4630      	mov	r0, r6
 80153bc:	f003 fb7e 	bl	8018abc <_ZN8touchgfx15RenderingBufferC1Ev>
 80153c0:	4638      	mov	r0, r7
 80153c2:	f002 fa7d 	bl	80178c0 <_ZN8touchgfx7OutlineC1Ev>
 80153c6:	f104 0074 	add.w	r0, r4, #116	@ 0x74
 80153ca:	f003 fb2d 	bl	8018a28 <_ZN8touchgfx8ScanlineC1Ev>
 80153ce:	2301      	movs	r3, #1
 80153d0:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 80153d4:	f884 50a0 	strb.w	r5, [r4, #160]	@ 0xa0
 80153d8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
 80153dc:	f884 50a2 	strb.w	r5, [r4, #162]	@ 0xa2
 80153e0:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
 80153e4:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
 80153e8:	f884 50ac 	strb.w	r5, [r4, #172]	@ 0xac
 80153ec:	f884 50ad 	strb.w	r5, [r4, #173]	@ 0xad
 80153f0:	f8c4 50b0 	str.w	r5, [r4, #176]	@ 0xb0
 80153f4:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
 80153f8:	f003 fac6 	bl	8018988 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80153fc:	b928      	cbnz	r0, 801540a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x72>
 80153fe:	4b65      	ldr	r3, [pc, #404]	@ (8015594 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1fc>)
 8015400:	2117      	movs	r1, #23
 8015402:	4a65      	ldr	r2, [pc, #404]	@ (8015598 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x200>)
 8015404:	4865      	ldr	r0, [pc, #404]	@ (801559c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>)
 8015406:	f00a fcb5 	bl	801fd74 <__assert_func>
 801540a:	f9b8 9000 	ldrsh.w	r9, [r8]
 801540e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015412:	f8ad 5008 	strh.w	r5, [sp, #8]
 8015416:	444b      	add	r3, r9
 8015418:	f8ad 500a 	strh.w	r5, [sp, #10]
 801541c:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8015420:	b29b      	uxth	r3, r3
 8015422:	f9be 0008 	ldrsh.w	r0, [lr, #8]
 8015426:	b21d      	sxth	r5, r3
 8015428:	f9be c00a 	ldrsh.w	ip, [lr, #10]
 801542c:	2d00      	cmp	r5, #0
 801542e:	f340 80a8 	ble.w	8015582 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1ea>
 8015432:	4548      	cmp	r0, r9
 8015434:	f340 80a5 	ble.w	8015582 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1ea>
 8015438:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 801543c:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8015440:	440a      	add	r2, r1
 8015442:	b292      	uxth	r2, r2
 8015444:	fa0f f882 	sxth.w	r8, r2
 8015448:	f1b8 0f00 	cmp.w	r8, #0
 801544c:	f340 8099 	ble.w	8015582 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1ea>
 8015450:	458c      	cmp	ip, r1
 8015452:	f340 8096 	ble.w	8015582 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1ea>
 8015456:	42a8      	cmp	r0, r5
 8015458:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801545c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8015460:	da00      	bge.n	8015464 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xcc>
 8015462:	b283      	uxth	r3, r0
 8015464:	45c4      	cmp	ip, r8
 8015466:	eba3 0309 	sub.w	r3, r3, r9
 801546a:	f8ad 9008 	strh.w	r9, [sp, #8]
 801546e:	bfb8      	it	lt
 8015470:	fa1f f28c 	uxthlt.w	r2, ip
 8015474:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015478:	f8ad 100a 	strh.w	r1, [sp, #10]
 801547c:	1a52      	subs	r2, r2, r1
 801547e:	f8ad 200e 	strh.w	r2, [sp, #14]
 8015482:	f10d 0808 	add.w	r8, sp, #8
 8015486:	ad04      	add	r5, sp, #16
 8015488:	e898 0003 	ldmia.w	r8, {r0, r1}
 801548c:	e885 0003 	stmia.w	r5, {r0, r1}
 8015490:	f8de 3000 	ldr.w	r3, [lr]
 8015494:	4670      	mov	r0, lr
 8015496:	4629      	mov	r1, r5
 8015498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801549a:	4798      	blx	r3
 801549c:	6861      	ldr	r1, [r4, #4]
 801549e:	4640      	mov	r0, r8
 80154a0:	3104      	adds	r1, #4
 80154a2:	f004 fa19 	bl	80198d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80154a6:	4628      	mov	r0, r5
 80154a8:	f004 fa2e 	bl	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80154ac:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80154b0:	f003 f9f8 	bl	80188a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80154b4:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
 80154b8:	4638      	mov	r0, r7
 80154ba:	4d39      	ldr	r5, [pc, #228]	@ (80155a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>)
 80154bc:	f002 f9dc 	bl	8017878 <_ZN8touchgfx7Outline5resetEv>
 80154c0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80154c4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80154c8:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 80154cc:	015b      	lsls	r3, r3, #5
 80154ce:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 80154d2:	0152      	lsls	r2, r2, #5
 80154d4:	60e3      	str	r3, [r4, #12]
 80154d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80154da:	6828      	ldr	r0, [r5, #0]
 80154dc:	015b      	lsls	r3, r3, #5
 80154de:	60a2      	str	r2, [r4, #8]
 80154e0:	6123      	str	r3, [r4, #16]
 80154e2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80154e6:	015b      	lsls	r3, r3, #5
 80154e8:	6163      	str	r3, [r4, #20]
 80154ea:	6803      	ldr	r3, [r0, #0]
 80154ec:	6a1b      	ldr	r3, [r3, #32]
 80154ee:	4798      	blx	r3
 80154f0:	682b      	ldr	r3, [r5, #0]
 80154f2:	4607      	mov	r7, r0
 80154f4:	6898      	ldr	r0, [r3, #8]
 80154f6:	6803      	ldr	r3, [r0, #0]
 80154f8:	6a1b      	ldr	r3, [r3, #32]
 80154fa:	4798      	blx	r3
 80154fc:	1e43      	subs	r3, r0, #1
 80154fe:	b2da      	uxtb	r2, r3
 8015500:	2a1f      	cmp	r2, #31
 8015502:	d83a      	bhi.n	801557a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1e2>
 8015504:	2301      	movs	r3, #1
 8015506:	4927      	ldr	r1, [pc, #156]	@ (80155a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x20c>)
 8015508:	4093      	lsls	r3, r2
 801550a:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 801550e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8015512:	bb22      	cbnz	r2, 801555e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1c6>
 8015514:	f013 0f0b 	tst.w	r3, #11
 8015518:	d02f      	beq.n	801557a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1e2>
 801551a:	2208      	movs	r2, #8
 801551c:	880d      	ldrh	r5, [r1, #0]
 801551e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8015522:	fb92 f0f0 	sdiv	r0, r2, r0
 8015526:	1e43      	subs	r3, r0, #1
 8015528:	441d      	add	r5, r3
 801552a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801552e:	fb95 f5f0 	sdiv	r5, r5, r0
 8015532:	fb93 f2f0 	sdiv	r2, r3, r0
 8015536:	fb05 2101 	mla	r1, r5, r1, r2
 801553a:	fb00 3212 	mls	r2, r0, r2, r3
 801553e:	4439      	add	r1, r7
 8015540:	b2d2      	uxtb	r2, r2
 8015542:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8015546:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801554a:	66e0      	str	r0, [r4, #108]	@ 0x6c
 801554c:	e88d 0021 	stmia.w	sp, {r0, r5}
 8015550:	4630      	mov	r0, r6
 8015552:	f003 fabb 	bl	8018acc <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8015556:	4620      	mov	r0, r4
 8015558:	b007      	add	sp, #28
 801555a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801555e:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8015562:	880d      	ldrh	r5, [r1, #0]
 8015564:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8015568:	4345      	muls	r5, r0
 801556a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801556e:	436a      	muls	r2, r5
 8015570:	fb11 2000 	smlabb	r0, r1, r0, r2
 8015574:	2200      	movs	r2, #0
 8015576:	1839      	adds	r1, r7, r0
 8015578:	e7e3      	b.n	8015542 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x1aa>
 801557a:	4b0b      	ldr	r3, [pc, #44]	@ (80155a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x210>)
 801557c:	2149      	movs	r1, #73	@ 0x49
 801557e:	4a06      	ldr	r2, [pc, #24]	@ (8015598 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x200>)
 8015580:	e740      	b.n	8015404 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6c>
 8015582:	2300      	movs	r3, #0
 8015584:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015588:	f8ad 300e 	strh.w	r3, [sp, #14]
 801558c:	e779      	b.n	8015482 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xea>
 801558e:	bf00      	nop
 8015590:	080259d0 	.word	0x080259d0
 8015594:	08025935 	.word	0x08025935
 8015598:	080259d8 	.word	0x080259d8
 801559c:	08025991 	.word	0x08025991
 80155a0:	20024e34 	.word	0x20024e34
 80155a4:	20024e2e 	.word	0x20024e2e
 80155a8:	08024cbf 	.word	0x08024cbf

080155ac <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80155ac:	6812      	ldr	r2, [r2, #0]
 80155ae:	2a00      	cmp	r2, #0
 80155b0:	db0b      	blt.n	80155ca <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80155b2:	9800      	ldr	r0, [sp, #0]
 80155b4:	6800      	ldr	r0, [r0, #0]
 80155b6:	4290      	cmp	r0, r2
 80155b8:	bfd4      	ite	le
 80155ba:	2002      	movle	r0, #2
 80155bc:	2000      	movgt	r0, #0
 80155be:	680a      	ldr	r2, [r1, #0]
 80155c0:	2a00      	cmp	r2, #0
 80155c2:	da04      	bge.n	80155ce <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80155c4:	f040 0004 	orr.w	r0, r0, #4
 80155c8:	4770      	bx	lr
 80155ca:	2001      	movs	r0, #1
 80155cc:	e7f7      	b.n	80155be <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	4293      	cmp	r3, r2
 80155d2:	bfd8      	it	le
 80155d4:	f040 0008 	orrle.w	r0, r0, #8
 80155d8:	4770      	bx	lr
	...

080155dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80155dc:	4b07      	ldr	r3, [pc, #28]	@ (80155fc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80155de:	b510      	push	{r4, lr}
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	2b01      	cmp	r3, #1
 80155e4:	d108      	bne.n	80155f8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80155e6:	6843      	ldr	r3, [r0, #4]
 80155e8:	6814      	ldr	r4, [r2, #0]
 80155ea:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80155ee:	680b      	ldr	r3, [r1, #0]
 80155f0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80155f4:	6013      	str	r3, [r2, #0]
 80155f6:	600c      	str	r4, [r1, #0]
 80155f8:	bd10      	pop	{r4, pc}
 80155fa:	bf00      	nop
 80155fc:	20024e2c 	.word	0x20024e2c

08015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8015600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015602:	b085      	sub	sp, #20
 8015604:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8015608:	4604      	mov	r4, r0
 801560a:	9103      	str	r1, [sp, #12]
 801560c:	9202      	str	r2, [sp, #8]
 801560e:	b33b      	cbz	r3, 8015660 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8015610:	aa02      	add	r2, sp, #8
 8015612:	a903      	add	r1, sp, #12
 8015614:	f7ff ffe2 	bl	80155dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8015618:	68a3      	ldr	r3, [r4, #8]
 801561a:	9e03      	ldr	r6, [sp, #12]
 801561c:	aa02      	add	r2, sp, #8
 801561e:	9f02      	ldr	r7, [sp, #8]
 8015620:	a903      	add	r1, sp, #12
 8015622:	1af6      	subs	r6, r6, r3
 8015624:	68e3      	ldr	r3, [r4, #12]
 8015626:	4620      	mov	r0, r4
 8015628:	1aff      	subs	r7, r7, r3
 801562a:	f104 0314 	add.w	r3, r4, #20
 801562e:	9603      	str	r6, [sp, #12]
 8015630:	9300      	str	r3, [sp, #0]
 8015632:	f104 0310 	add.w	r3, r4, #16
 8015636:	9702      	str	r7, [sp, #8]
 8015638:	f7ff ffb8 	bl	80155ac <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 801563c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8015640:	4605      	mov	r5, r0
 8015642:	b97b      	cbnz	r3, 8015664 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8015644:	463a      	mov	r2, r7
 8015646:	4631      	mov	r1, r6
 8015648:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801564c:	f7ff fe9e 	bl	801538c <_ZN8touchgfx10Rasterizer6lineToEii>
 8015650:	9b03      	ldr	r3, [sp, #12]
 8015652:	f884 50ac 	strb.w	r5, [r4, #172]	@ 0xac
 8015656:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
 801565a:	9b02      	ldr	r3, [sp, #8]
 801565c:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8015660:	b005      	add	sp, #20
 8015662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015664:	b110      	cbz	r0, 801566c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8015666:	ea10 0203 	ands.w	r2, r0, r3
 801566a:	d122      	bne.n	80156b2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xb2>
 801566c:	f894 20a1 	ldrb.w	r2, [r4, #161]	@ 0xa1
 8015670:	f104 062c 	add.w	r6, r4, #44	@ 0x2c
 8015674:	b1aa      	cbz	r2, 80156a2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa2>
 8015676:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 801567a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 801567e:	b933      	cbnz	r3, 801568e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8e>
 8015680:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 8015684:	4630      	mov	r0, r6
 8015686:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 801568a:	f002 ff7c 	bl	8018586 <_ZN8touchgfx7Outline6moveToEii>
 801568e:	2300      	movs	r3, #0
 8015690:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
 8015694:	2301      	movs	r3, #1
 8015696:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 801569a:	9a02      	ldr	r2, [sp, #8]
 801569c:	4630      	mov	r0, r6
 801569e:	9903      	ldr	r1, [sp, #12]
 80156a0:	e7d4      	b.n	801564c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80156a2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 80156a6:	4630      	mov	r0, r6
 80156a8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80156ac:	f7ff fe6e 	bl	801538c <_ZN8touchgfx10Rasterizer6lineToEii>
 80156b0:	e7f3      	b.n	801569a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9a>
 80156b2:	4615      	mov	r5, r2
 80156b4:	e7cc      	b.n	8015650 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080156b6 <_ZN8touchgfx6Canvas5closeEv>:
 80156b6:	b538      	push	{r3, r4, r5, lr}
 80156b8:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80156bc:	4604      	mov	r4, r0
 80156be:	b9b3      	cbnz	r3, 80156ee <_ZN8touchgfx6Canvas5closeEv+0x38>
 80156c0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80156c4:	f890 20ad 	ldrb.w	r2, [r0, #173]	@ 0xad
 80156c8:	4213      	tst	r3, r2
 80156ca:	d110      	bne.n	80156ee <_ZN8touchgfx6Canvas5closeEv+0x38>
 80156cc:	f100 052c 	add.w	r5, r0, #44	@ 0x2c
 80156d0:	b133      	cbz	r3, 80156e0 <_ZN8touchgfx6Canvas5closeEv+0x2a>
 80156d2:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 80156d6:	f8d0 10a4 	ldr.w	r1, [r0, #164]	@ 0xa4
 80156da:	4628      	mov	r0, r5
 80156dc:	f7ff fe56 	bl	801538c <_ZN8touchgfx10Rasterizer6lineToEii>
 80156e0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80156e4:	4628      	mov	r0, r5
 80156e6:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80156ea:	f7ff fe4f 	bl	801538c <_ZN8touchgfx10Rasterizer6lineToEii>
 80156ee:	2300      	movs	r3, #0
 80156f0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
 80156f4:	bd38      	pop	{r3, r4, r5, pc}

080156f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80156f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156f8:	b085      	sub	sp, #20
 80156fa:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 80156fe:	4604      	mov	r4, r0
 8015700:	9103      	str	r1, [sp, #12]
 8015702:	9202      	str	r2, [sp, #8]
 8015704:	b363      	cbz	r3, 8015760 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8015706:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 801570a:	b90b      	cbnz	r3, 8015710 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 801570c:	f7ff ffd3 	bl	80156b6 <_ZN8touchgfx6Canvas5closeEv>
 8015710:	aa02      	add	r2, sp, #8
 8015712:	a903      	add	r1, sp, #12
 8015714:	4620      	mov	r0, r4
 8015716:	f7ff ff61 	bl	80155dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801571a:	68a3      	ldr	r3, [r4, #8]
 801571c:	9d03      	ldr	r5, [sp, #12]
 801571e:	aa02      	add	r2, sp, #8
 8015720:	9e02      	ldr	r6, [sp, #8]
 8015722:	a903      	add	r1, sp, #12
 8015724:	1aed      	subs	r5, r5, r3
 8015726:	68e3      	ldr	r3, [r4, #12]
 8015728:	4620      	mov	r0, r4
 801572a:	1af6      	subs	r6, r6, r3
 801572c:	f104 0314 	add.w	r3, r4, #20
 8015730:	9503      	str	r5, [sp, #12]
 8015732:	9300      	str	r3, [sp, #0]
 8015734:	f104 0310 	add.w	r3, r4, #16
 8015738:	9602      	str	r6, [sp, #8]
 801573a:	f7ff ff37 	bl	80155ac <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 801573e:	4607      	mov	r7, r0
 8015740:	b180      	cbz	r0, 8015764 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6e>
 8015742:	2301      	movs	r3, #1
 8015744:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
 8015748:	9a03      	ldr	r2, [sp, #12]
 801574a:	9b02      	ldr	r3, [sp, #8]
 801574c:	f8c4 20b0 	str.w	r2, [r4, #176]	@ 0xb0
 8015750:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8015754:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
 8015758:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 801575c:	f884 70ac 	strb.w	r7, [r4, #172]	@ 0xac
 8015760:	b005      	add	sp, #20
 8015762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015764:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8015768:	f884 00ad 	strb.w	r0, [r4, #173]	@ 0xad
 801576c:	b92b      	cbnz	r3, 801577a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x84>
 801576e:	4632      	mov	r2, r6
 8015770:	4629      	mov	r1, r5
 8015772:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8015776:	f002 ff06 	bl	8018586 <_ZN8touchgfx7Outline6moveToEii>
 801577a:	2300      	movs	r3, #0
 801577c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
 8015780:	2301      	movs	r3, #1
 8015782:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 8015786:	e7df      	b.n	8015748 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08015788 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8015788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801578c:	4604      	mov	r4, r0
 801578e:	b087      	sub	sp, #28
 8015790:	9104      	str	r1, [sp, #16]
 8015792:	f003 f841 	bl	8018818 <_ZN8touchgfx7Outline8getCellsEv>
 8015796:	68a7      	ldr	r7, [r4, #8]
 8015798:	4606      	mov	r6, r0
 801579a:	b91f      	cbnz	r7, 80157a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 801579c:	2001      	movs	r0, #1
 801579e:	b007      	add	sp, #28
 80157a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157a4:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 80157a8:	2d00      	cmp	r5, #0
 80157aa:	d139      	bne.n	8015820 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x98>
 80157ac:	f104 0948 	add.w	r9, r4, #72	@ 0x48
 80157b0:	f106 0808 	add.w	r8, r6, #8
 80157b4:	4648      	mov	r0, r9
 80157b6:	f003 f921 	bl	80189fc <_ZN8touchgfx8Scanline5resetEv>
 80157ba:	1e7b      	subs	r3, r7, #1
 80157bc:	9303      	str	r3, [sp, #12]
 80157be:	f9b6 7000 	ldrsh.w	r7, [r6]
 80157c2:	f9b6 a002 	ldrsh.w	sl, [r6, #2]
 80157c6:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 80157ca:	46bb      	mov	fp, r7
 80157cc:	eb07 4e0a 	add.w	lr, r7, sl, lsl #16
 80157d0:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80157d4:	4415      	add	r5, r2
 80157d6:	9b03      	ldr	r3, [sp, #12]
 80157d8:	3b01      	subs	r3, #1
 80157da:	9303      	str	r3, [sp, #12]
 80157dc:	3301      	adds	r3, #1
 80157de:	d066      	beq.n	80158ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x126>
 80157e0:	f108 0208 	add.w	r2, r8, #8
 80157e4:	f932 6c06 	ldrsh.w	r6, [r2, #-6]
 80157e8:	f932 0c08 	ldrsh.w	r0, [r2, #-8]
 80157ec:	eb00 4006 	add.w	r0, r0, r6, lsl #16
 80157f0:	4586      	cmp	lr, r0
 80157f2:	d117      	bne.n	8015824 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9c>
 80157f4:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
 80157f8:	4646      	mov	r6, r8
 80157fa:	4690      	mov	r8, r2
 80157fc:	4401      	add	r1, r0
 80157fe:	f932 0c04 	ldrsh.w	r0, [r2, #-4]
 8015802:	4405      	add	r5, r0
 8015804:	e7e7      	b.n	80157d6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x4e>
 8015806:	1c91      	adds	r1, r2, #2
 8015808:	f04f 0301 	mov.w	r3, #1
 801580c:	65e1      	str	r1, [r4, #92]	@ 0x5c
 801580e:	8053      	strh	r3, [r2, #2]
 8015810:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8015812:	1c91      	adds	r1, r2, #2
 8015814:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015816:	8057      	strh	r7, [r2, #2]
 8015818:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801581a:	3201      	adds	r2, #1
 801581c:	6562      	str	r2, [r4, #84]	@ 0x54
 801581e:	e022      	b.n	8015866 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xde>
 8015820:	2000      	movs	r0, #0
 8015822:	e7bc      	b.n	801579e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x16>
 8015824:	4646      	mov	r6, r8
 8015826:	4690      	mov	r8, r2
 8015828:	b329      	cbz	r1, 8015876 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xee>
 801582a:	ebc1 1185 	rsb	r1, r1, r5, lsl #6
 801582e:	f894 006c 	ldrb.w	r0, [r4, #108]	@ 0x6c
 8015832:	f7ff fd5f 	bl	80152f4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8015836:	4683      	mov	fp, r0
 8015838:	b1c0      	cbz	r0, 801586c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xe4>
 801583a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801583c:	b112      	cbz	r2, 8015844 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xbc>
 801583e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8015840:	4552      	cmp	r2, sl
 8015842:	d13f      	bne.n	80158c4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x13c>
 8015844:	2f00      	cmp	r7, #0
 8015846:	db11      	blt.n	801586c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xe4>
 8015848:	f003 f8ac 	bl	80189a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801584c:	4287      	cmp	r7, r0
 801584e:	d20d      	bcs.n	801586c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xe4>
 8015850:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8015852:	f802 b007 	strb.w	fp, [r2, r7]
 8015856:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8015858:	3201      	adds	r2, #1
 801585a:	42ba      	cmp	r2, r7
 801585c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 801585e:	d1d2      	bne.n	8015806 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x7e>
 8015860:	8811      	ldrh	r1, [r2, #0]
 8015862:	3101      	adds	r1, #1
 8015864:	8011      	strh	r1, [r2, #0]
 8015866:	64e7      	str	r7, [r4, #76]	@ 0x4c
 8015868:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
 801586c:	9b03      	ldr	r3, [sp, #12]
 801586e:	f107 0b01 	add.w	fp, r7, #1
 8015872:	3301      	adds	r3, #1
 8015874:	d01d      	beq.n	80158b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x12a>
 8015876:	f9b6 3000 	ldrsh.w	r3, [r6]
 801587a:	455b      	cmp	r3, fp
 801587c:	dd9f      	ble.n	80157be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x36>
 801587e:	01a9      	lsls	r1, r5, #6
 8015880:	f894 006c 	ldrb.w	r0, [r4, #108]	@ 0x6c
 8015884:	f7ff fd36 	bl	80152f4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8015888:	4602      	mov	r2, r0
 801588a:	2800      	cmp	r0, #0
 801588c:	d097      	beq.n	80157be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x36>
 801588e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015890:	b113      	cbz	r3, 8015898 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x110>
 8015892:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015894:	4553      	cmp	r3, sl
 8015896:	d124      	bne.n	80158e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x15a>
 8015898:	f9b6 3000 	ldrsh.w	r3, [r6]
 801589c:	4659      	mov	r1, fp
 801589e:	9200      	str	r2, [sp, #0]
 80158a0:	4648      	mov	r0, r9
 80158a2:	eba3 030b 	sub.w	r3, r3, fp
 80158a6:	4652      	mov	r2, sl
 80158a8:	f003 f8d0 	bl	8018a4c <_ZN8touchgfx8Scanline7addSpanEiijj>
 80158ac:	e787      	b.n	80157be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x36>
 80158ae:	2900      	cmp	r1, #0
 80158b0:	d1bb      	bne.n	801582a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80158b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	f43f af71 	beq.w	801579c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x14>
 80158ba:	4649      	mov	r1, r9
 80158bc:	9804      	ldr	r0, [sp, #16]
 80158be:	f7ff fd2d 	bl	801531c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80158c2:	e76b      	b.n	801579c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x14>
 80158c4:	4649      	mov	r1, r9
 80158c6:	9804      	ldr	r0, [sp, #16]
 80158c8:	f7ff fd28 	bl	801531c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80158cc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80158d0:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80158d2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80158d4:	6523      	str	r3, [r4, #80]	@ 0x50
 80158d6:	2300      	movs	r3, #0
 80158d8:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80158da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80158dc:	6563      	str	r3, [r4, #84]	@ 0x54
 80158de:	65a2      	str	r2, [r4, #88]	@ 0x58
 80158e0:	e7b0      	b.n	8015844 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xbc>
 80158e2:	9005      	str	r0, [sp, #20]
 80158e4:	4649      	mov	r1, r9
 80158e6:	9804      	ldr	r0, [sp, #16]
 80158e8:	f7ff fd18 	bl	801531c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80158ec:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80158f0:	9a05      	ldr	r2, [sp, #20]
 80158f2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80158f4:	6523      	str	r3, [r4, #80]	@ 0x50
 80158f6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80158f8:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80158fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80158fc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80158fe:	2300      	movs	r3, #0
 8015900:	6563      	str	r3, [r4, #84]	@ 0x54
 8015902:	e7c9      	b.n	8015898 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x110>

08015904 <_ZN8touchgfx6Canvas6renderEv>:
 8015904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015906:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 801590a:	4604      	mov	r4, r0
 801590c:	b913      	cbnz	r3, 8015914 <_ZN8touchgfx6Canvas6renderEv+0x10>
 801590e:	2001      	movs	r0, #1
 8015910:	b003      	add	sp, #12
 8015912:	bd30      	pop	{r4, r5, pc}
 8015914:	f890 3070 	ldrb.w	r3, [r0, #112]	@ 0x70
 8015918:	2b00      	cmp	r3, #0
 801591a:	d131      	bne.n	8015980 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 801591c:	f890 30a2 	ldrb.w	r3, [r0, #162]	@ 0xa2
 8015920:	2b00      	cmp	r3, #0
 8015922:	d0f4      	beq.n	801590e <_ZN8touchgfx6Canvas6renderEv+0xa>
 8015924:	6840      	ldr	r0, [r0, #4]
 8015926:	6803      	ldr	r3, [r0, #0]
 8015928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801592a:	4798      	blx	r3
 801592c:	2800      	cmp	r0, #0
 801592e:	d0ee      	beq.n	801590e <_ZN8touchgfx6Canvas6renderEv+0xa>
 8015930:	4620      	mov	r0, r4
 8015932:	f7ff fec0 	bl	80156b6 <_ZN8touchgfx6Canvas5closeEv>
 8015936:	6860      	ldr	r0, [r4, #4]
 8015938:	6803      	ldr	r3, [r0, #0]
 801593a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801593c:	4798      	blx	r3
 801593e:	f8b4 209e 	ldrh.w	r2, [r4, #158]	@ 0x9e
 8015942:	f8b4 109c 	ldrh.w	r1, [r4, #156]	@ 0x9c
 8015946:	f000 fe9e 	bl	8016686 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 801594a:	6860      	ldr	r0, [r4, #4]
 801594c:	6803      	ldr	r3, [r0, #0]
 801594e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015950:	4798      	blx	r3
 8015952:	4605      	mov	r5, r0
 8015954:	6860      	ldr	r0, [r4, #4]
 8015956:	6803      	ldr	r3, [r0, #0]
 8015958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801595a:	4798      	blx	r3
 801595c:	4601      	mov	r1, r0
 801595e:	4628      	mov	r0, r5
 8015960:	f000 fe94 	bl	801668c <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8015964:	6860      	ldr	r0, [r4, #4]
 8015966:	6803      	ldr	r3, [r0, #0]
 8015968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801596a:	4798      	blx	r3
 801596c:	f104 0318 	add.w	r3, r4, #24
 8015970:	9001      	str	r0, [sp, #4]
 8015972:	4669      	mov	r1, sp
 8015974:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8015978:	9300      	str	r3, [sp, #0]
 801597a:	f7ff ff05 	bl	8015788 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 801597e:	e7c7      	b.n	8015910 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8015980:	2000      	movs	r0, #0
 8015982:	e7c5      	b.n	8015910 <_ZN8touchgfx6Canvas6renderEv+0xc>

08015984 <_ZN8touchgfx6CanvasD1Ev>:
 8015984:	b538      	push	{r3, r4, r5, lr}
 8015986:	4605      	mov	r5, r0
 8015988:	4b08      	ldr	r3, [pc, #32]	@ (80159ac <_ZN8touchgfx6CanvasD1Ev+0x28>)
 801598a:	4604      	mov	r4, r0
 801598c:	f845 3b2c 	str.w	r3, [r5], #44
 8015990:	4b07      	ldr	r3, [pc, #28]	@ (80159b0 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8015992:	6818      	ldr	r0, [r3, #0]
 8015994:	6803      	ldr	r3, [r0, #0]
 8015996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015998:	4798      	blx	r3
 801599a:	4628      	mov	r0, r5
 801599c:	f001 ff64 	bl	8017868 <_ZN8touchgfx7OutlineD1Ev>
 80159a0:	f104 0018 	add.w	r0, r4, #24
 80159a4:	f003 f891 	bl	8018aca <_ZN8touchgfx15RenderingBufferD1Ev>
 80159a8:	4620      	mov	r0, r4
 80159aa:	bd38      	pop	{r3, r4, r5, pc}
 80159ac:	080259d0 	.word	0x080259d0
 80159b0:	20024e34 	.word	0x20024e34

080159b4 <_ZN8touchgfx6CanvasD0Ev>:
 80159b4:	b510      	push	{r4, lr}
 80159b6:	4604      	mov	r4, r0
 80159b8:	f7ff ffe4 	bl	8015984 <_ZN8touchgfx6CanvasD1Ev>
 80159bc:	21b8      	movs	r1, #184	@ 0xb8
 80159be:	4620      	mov	r0, r4
 80159c0:	f009 f8b1 	bl	801eb26 <_ZdlPvj>
 80159c4:	4620      	mov	r0, r4
 80159c6:	bd10      	pop	{r4, pc}

080159c8 <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 80159c8:	f101 0344 	add.w	r3, r1, #68	@ 0x44
 80159cc:	4602      	mov	r2, r0
 80159ce:	cb03      	ldmia	r3!, {r0, r1}
 80159d0:	6010      	str	r0, [r2, #0]
 80159d2:	4610      	mov	r0, r2
 80159d4:	6051      	str	r1, [r2, #4]
 80159d6:	4770      	bx	lr

080159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80159d8:	b507      	push	{r0, r1, r2, lr}
 80159da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80159de:	ab01      	add	r3, sp, #4
 80159e0:	6809      	ldr	r1, [r1, #0]
 80159e2:	6800      	ldr	r0, [r0, #0]
 80159e4:	f004 fdd7 	bl	801a596 <_ZN8touchgfx6muldivElllRl>
 80159e8:	b003      	add	sp, #12
 80159ea:	f85d fb04 	ldr.w	pc, [sp], #4

080159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 80159ee:	f44f 5234 	mov.w	r2, #11520	@ 0x2d00
 80159f2:	fb90 f3f2 	sdiv	r3, r0, r2
 80159f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80159f8:	fb03 0012 	mls	r0, r3, r2, r0
 80159fc:	4410      	add	r0, r2
 80159fe:	fb90 f4f2 	sdiv	r4, r0, r2
 8015a02:	fb02 0414 	mls	r4, r2, r4, r0
 8015a06:	f004 061f 	and.w	r6, r4, #31
 8015a0a:	1164      	asrs	r4, r4, #5
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	f7f2 fdc1 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
 8015a12:	4605      	mov	r5, r0
 8015a14:	b90e      	cbnz	r6, 8015a1a <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8015a16:	b002      	add	sp, #8
 8015a18:	bd70      	pop	{r4, r5, r6, pc}
 8015a1a:	1c60      	adds	r0, r4, #1
 8015a1c:	f7f2 fdba 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
 8015a20:	ab01      	add	r3, sp, #4
 8015a22:	2220      	movs	r2, #32
 8015a24:	4631      	mov	r1, r6
 8015a26:	1b40      	subs	r0, r0, r5
 8015a28:	f004 fdb5 	bl	801a596 <_ZN8touchgfx6muldivElllRl>
 8015a2c:	4428      	add	r0, r5
 8015a2e:	e7f2      	b.n	8015a16 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08015a30 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ES1_>:
 8015a30:	b507      	push	{r0, r1, r2, lr}
 8015a32:	2220      	movs	r2, #32
 8015a34:	ab01      	add	r3, sp, #4
 8015a36:	f004 fdae 	bl	801a596 <_ZN8touchgfx6muldivElllRl>
 8015a3a:	b003      	add	sp, #12
 8015a3c:	f85d fb04 	ldr.w	pc, [sp], #4

08015a40 <_ZN8touchgfx13AbstractShapeC1Ev>:
 8015a40:	b510      	push	{r4, lr}
 8015a42:	4604      	mov	r4, r0
 8015a44:	f000 fee4 	bl	8016810 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8015a48:	4b0a      	ldr	r3, [pc, #40]	@ (8015a74 <_ZN8touchgfx13AbstractShapeC1Ev+0x34>)
 8015a4a:	2220      	movs	r2, #32
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	6023      	str	r3, [r4, #0]
 8015a50:	2300      	movs	r3, #0
 8015a52:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8015a54:	6323      	str	r3, [r4, #48]	@ 0x30
 8015a56:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a58:	63a3      	str	r3, [r4, #56]	@ 0x38
 8015a5a:	6422      	str	r2, [r4, #64]	@ 0x40
 8015a5c:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8015a60:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8015a64:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8015a68:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8015a6c:	8123      	strh	r3, [r4, #8]
 8015a6e:	8163      	strh	r3, [r4, #10]
 8015a70:	bd10      	pop	{r4, pc}
 8015a72:	bf00      	nop
 8015a74:	08025a30 	.word	0x08025a30

08015a78 <_ZN8touchgfx13AbstractShapeD1Ev>:
 8015a78:	4b03      	ldr	r3, [pc, #12]	@ (8015a88 <_ZN8touchgfx13AbstractShapeD1Ev+0x10>)
 8015a7a:	b510      	push	{r4, lr}
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	6003      	str	r3, [r0, #0]
 8015a80:	f000 fee4 	bl	801684c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8015a84:	4620      	mov	r0, r4
 8015a86:	bd10      	pop	{r4, pc}
 8015a88:	08025a30 	.word	0x08025a30

08015a8c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 8015a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a90:	2500      	movs	r5, #0
 8015a92:	6803      	ldr	r3, [r0, #0]
 8015a94:	b087      	sub	sp, #28
 8015a96:	4604      	mov	r4, r0
 8015a98:	462f      	mov	r7, r5
 8015a9a:	46a8      	mov	r8, r5
 8015a9c:	462e      	mov	r6, r5
 8015a9e:	46a9      	mov	r9, r5
 8015aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015aa2:	4798      	blx	r3
 8015aa4:	9000      	str	r0, [sp, #0]
 8015aa6:	9b00      	ldr	r3, [sp, #0]
 8015aa8:	429d      	cmp	r5, r3
 8015aaa:	da70      	bge.n	8015b8e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x102>
 8015aac:	6823      	ldr	r3, [r4, #0]
 8015aae:	4629      	mov	r1, r5
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ab6:	4798      	blx	r3
 8015ab8:	6823      	ldr	r3, [r4, #0]
 8015aba:	4682      	mov	sl, r0
 8015abc:	4629      	mov	r1, r5
 8015abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	4798      	blx	r3
 8015ac6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8015ac8:	4683      	mov	fp, r0
 8015aca:	4650      	mov	r0, sl
 8015acc:	f7ff ffb0 	bl	8015a30 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ES1_>
 8015ad0:	9002      	str	r0, [sp, #8]
 8015ad2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015ad4:	f5c0 6034 	rsb	r0, r0, #2880	@ 0xb40
 8015ad8:	f7ff ff89 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015adc:	a903      	add	r1, sp, #12
 8015ade:	9003      	str	r0, [sp, #12]
 8015ae0:	a802      	add	r0, sp, #8
 8015ae2:	f7ff ff79 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015ae6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015ae8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8015aea:	4402      	add	r2, r0
 8015aec:	4658      	mov	r0, fp
 8015aee:	9201      	str	r2, [sp, #4]
 8015af0:	f7ff ff9e 	bl	8015a30 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ES1_>
 8015af4:	9004      	str	r0, [sp, #16]
 8015af6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015af8:	f7ff ff79 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015afc:	a905      	add	r1, sp, #20
 8015afe:	9005      	str	r0, [sp, #20]
 8015b00:	a804      	add	r0, sp, #16
 8015b02:	f7ff ff69 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015b06:	9a01      	ldr	r2, [sp, #4]
 8015b08:	1a12      	subs	r2, r2, r0
 8015b0a:	2d00      	cmp	r5, #0
 8015b0c:	d050      	beq.n	8015bb0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x124>
 8015b0e:	2320      	movs	r3, #32
 8015b10:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b14:	429e      	cmp	r6, r3
 8015b16:	db4b      	blt.n	8015bb0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x124>
 8015b18:	2320      	movs	r3, #32
 8015b1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b1e:	4599      	cmp	r9, r3
 8015b20:	dc4b      	bgt.n	8015bba <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x12e>
 8015b22:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8015b24:	4658      	mov	r0, fp
 8015b26:	9201      	str	r2, [sp, #4]
 8015b28:	f7ff ff82 	bl	8015a30 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ES1_>
 8015b2c:	9002      	str	r0, [sp, #8]
 8015b2e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015b30:	f5c0 6034 	rsb	r0, r0, #2880	@ 0xb40
 8015b34:	f7ff ff5b 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015b38:	a903      	add	r1, sp, #12
 8015b3a:	9003      	str	r0, [sp, #12]
 8015b3c:	a802      	add	r0, sp, #8
 8015b3e:	f7ff ff4b 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015b42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015b44:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8015b46:	eb00 0b03 	add.w	fp, r0, r3
 8015b4a:	4650      	mov	r0, sl
 8015b4c:	f7ff ff70 	bl	8015a30 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ES1_>
 8015b50:	9004      	str	r0, [sp, #16]
 8015b52:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015b54:	f7ff ff4b 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015b58:	a905      	add	r1, sp, #20
 8015b5a:	9005      	str	r0, [sp, #20]
 8015b5c:	a804      	add	r0, sp, #16
 8015b5e:	f7ff ff3b 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015b62:	9a01      	ldr	r2, [sp, #4]
 8015b64:	eb00 030b 	add.w	r3, r0, fp
 8015b68:	b365      	cbz	r5, 8015bc4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x138>
 8015b6a:	2120      	movs	r1, #32
 8015b6c:	fb93 f1f1 	sdiv	r1, r3, r1
 8015b70:	428f      	cmp	r7, r1
 8015b72:	db27      	blt.n	8015bc4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x138>
 8015b74:	2120      	movs	r1, #32
 8015b76:	fb93 f1f1 	sdiv	r1, r3, r1
 8015b7a:	4588      	cmp	r8, r1
 8015b7c:	dc27      	bgt.n	8015bce <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x142>
 8015b7e:	6821      	ldr	r1, [r4, #0]
 8015b80:	4620      	mov	r0, r4
 8015b82:	f8d1 a08c 	ldr.w	sl, [r1, #140]	@ 0x8c
 8015b86:	4629      	mov	r1, r5
 8015b88:	47d0      	blx	sl
 8015b8a:	3501      	adds	r5, #1
 8015b8c:	e78b      	b.n	8015aa6 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 8015b8e:	3601      	adds	r6, #1
 8015b90:	3701      	adds	r7, #1
 8015b92:	f8a4 9044 	strh.w	r9, [r4, #68]	@ 0x44
 8015b96:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 8015b9a:	eba6 0909 	sub.w	r9, r6, r9
 8015b9e:	eba7 0808 	sub.w	r8, r7, r8
 8015ba2:	f8a4 9048 	strh.w	r9, [r4, #72]	@ 0x48
 8015ba6:	f8a4 804a 	strh.w	r8, [r4, #74]	@ 0x4a
 8015baa:	b007      	add	sp, #28
 8015bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bb0:	2620      	movs	r6, #32
 8015bb2:	fb92 f6f6 	sdiv	r6, r2, r6
 8015bb6:	2d00      	cmp	r5, #0
 8015bb8:	d1ae      	bne.n	8015b18 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8c>
 8015bba:	f04f 0920 	mov.w	r9, #32
 8015bbe:	fb92 f9f9 	sdiv	r9, r2, r9
 8015bc2:	e7ae      	b.n	8015b22 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x96>
 8015bc4:	2720      	movs	r7, #32
 8015bc6:	fb93 f7f7 	sdiv	r7, r3, r7
 8015bca:	2d00      	cmp	r5, #0
 8015bcc:	d1d2      	bne.n	8015b74 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xe8>
 8015bce:	f04f 0820 	mov.w	r8, #32
 8015bd2:	fb93 f8f8 	sdiv	r8, r3, r8
 8015bd6:	e7d2      	b.n	8015b7e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf2>

08015bd8 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 8015bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bda:	b0af      	sub	sp, #188	@ 0xbc
 8015bdc:	4604      	mov	r4, r0
 8015bde:	460a      	mov	r2, r1
 8015be0:	4601      	mov	r1, r0
 8015be2:	4668      	mov	r0, sp
 8015be4:	f7ff fbd8 	bl	8015398 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8015be8:	6823      	ldr	r3, [r4, #0]
 8015bea:	4620      	mov	r0, r4
 8015bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015bee:	4798      	blx	r3
 8015bf0:	4606      	mov	r6, r0
 8015bf2:	b390      	cbz	r0, 8015c5a <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	2100      	movs	r1, #0
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015bfe:	4798      	blx	r3
 8015c00:	6823      	ldr	r3, [r4, #0]
 8015c02:	4605      	mov	r5, r0
 8015c04:	2100      	movs	r1, #0
 8015c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	4798      	blx	r3
 8015c0e:	4629      	mov	r1, r5
 8015c10:	2501      	movs	r5, #1
 8015c12:	4602      	mov	r2, r0
 8015c14:	4668      	mov	r0, sp
 8015c16:	f7ff fd6e 	bl	80156f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015c1a:	42b5      	cmp	r5, r6
 8015c1c:	da13      	bge.n	8015c46 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x6e>
 8015c1e:	6823      	ldr	r3, [r4, #0]
 8015c20:	4629      	mov	r1, r5
 8015c22:	4620      	mov	r0, r4
 8015c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015c28:	4798      	blx	r3
 8015c2a:	6823      	ldr	r3, [r4, #0]
 8015c2c:	4607      	mov	r7, r0
 8015c2e:	4629      	mov	r1, r5
 8015c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015c34:	4620      	mov	r0, r4
 8015c36:	4798      	blx	r3
 8015c38:	4639      	mov	r1, r7
 8015c3a:	4602      	mov	r2, r0
 8015c3c:	4668      	mov	r0, sp
 8015c3e:	f7ff fcdf 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015c42:	3501      	adds	r5, #1
 8015c44:	e7e9      	b.n	8015c1a <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x42>
 8015c46:	4668      	mov	r0, sp
 8015c48:	f7ff fe5c 	bl	8015904 <_ZN8touchgfx6Canvas6renderEv>
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	4668      	mov	r0, sp
 8015c50:	f7ff fe98 	bl	8015984 <_ZN8touchgfx6CanvasD1Ev>
 8015c54:	4620      	mov	r0, r4
 8015c56:	b02f      	add	sp, #188	@ 0xbc
 8015c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c5a:	2401      	movs	r4, #1
 8015c5c:	e7f7      	b.n	8015c4e <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x76>

08015c5e <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh>:
 8015c5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c62:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8015c66:	469a      	mov	sl, r3
 8015c68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c6a:	4604      	mov	r4, r0
 8015c6c:	4416      	add	r6, r2
 8015c6e:	460f      	mov	r7, r1
 8015c70:	4615      	mov	r5, r2
 8015c72:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 8015c76:	60c6      	str	r6, [r0, #12]
 8015c78:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 8015c7c:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 8015c80:	441e      	add	r6, r3
 8015c82:	6803      	ldr	r3, [r0, #0]
 8015c84:	6106      	str	r6, [r0, #16]
 8015c86:	68db      	ldr	r3, [r3, #12]
 8015c88:	4798      	blx	r3
 8015c8a:	2800      	cmp	r0, #0
 8015c8c:	d03c      	beq.n	8015d08 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0xaa>
 8015c8e:	4455      	add	r5, sl
 8015c90:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8015c94:	6823      	ldr	r3, [r4, #0]
 8015c96:	f10d 020f 	add.w	r2, sp, #15
 8015c9a:	a903      	add	r1, sp, #12
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	9200      	str	r2, [sp, #0]
 8015ca0:	f10d 020d 	add.w	r2, sp, #13
 8015ca4:	691d      	ldr	r5, [r3, #16]
 8015ca6:	f10d 030e 	add.w	r3, sp, #14
 8015caa:	47a8      	blx	r5
 8015cac:	b318      	cbz	r0, 8015cf6 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x98>
 8015cae:	7a22      	ldrb	r2, [r4, #8]
 8015cb0:	2aff      	cmp	r2, #255	@ 0xff
 8015cb2:	d008      	beq.n	8015cc6 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x68>
 8015cb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015cb8:	fb13 f302 	smulbb	r3, r3, r2
 8015cbc:	22ff      	movs	r2, #255	@ 0xff
 8015cbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8015cc2:	f88d 300f 	strb.w	r3, [sp, #15]
 8015cc6:	f819 6b01 	ldrb.w	r6, [r9], #1
 8015cca:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015cce:	f8d4 e000 	ldr.w	lr, [r4]
 8015cd2:	fb16 fc03 	smulbb	ip, r6, r3
 8015cd6:	f64f 6301 	movw	r3, #65025	@ 0xfe01
 8015cda:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8015cde:	459c      	cmp	ip, r3
 8015ce0:	f89d 600e 	ldrb.w	r6, [sp, #14]
 8015ce4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8015ce8:	d111      	bne.n	8015d0e <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0xb0>
 8015cea:	9600      	str	r6, [sp, #0]
 8015cec:	f8de 5014 	ldr.w	r5, [lr, #20]
 8015cf0:	4639      	mov	r1, r7
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	47a8      	blx	r5
 8015cf6:	68e3      	ldr	r3, [r4, #12]
 8015cf8:	f1b8 0801 	subs.w	r8, r8, #1
 8015cfc:	f107 0702 	add.w	r7, r7, #2
 8015d00:	f103 0301 	add.w	r3, r3, #1
 8015d04:	60e3      	str	r3, [r4, #12]
 8015d06:	d1c5      	bne.n	8015c94 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x36>
 8015d08:	b004      	add	sp, #16
 8015d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d0e:	8839      	ldrh	r1, [r7, #0]
 8015d10:	f3c1 0a82 	ubfx	sl, r1, #2, #3
 8015d14:	1208      	asrs	r0, r1, #8
 8015d16:	10cd      	asrs	r5, r1, #3
 8015d18:	ea4a 01c1 	orr.w	r1, sl, r1, lsl #3
 8015d1c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8015d20:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8015d24:	b2c9      	uxtb	r1, r1
 8015d26:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8015d2a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8015d2e:	1a76      	subs	r6, r6, r1
 8015d30:	0409      	lsls	r1, r1, #16
 8015d32:	1a12      	subs	r2, r2, r0
 8015d34:	1b5b      	subs	r3, r3, r5
 8015d36:	0400      	lsls	r0, r0, #16
 8015d38:	042d      	lsls	r5, r5, #16
 8015d3a:	fb0c 1606 	mla	r6, ip, r6, r1
 8015d3e:	fb0c 0202 	mla	r2, ip, r2, r0
 8015d42:	fb0c 5303 	mla	r3, ip, r3, r5
 8015d46:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015d4a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8015d4e:	9600      	str	r6, [sp, #0]
 8015d50:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8015d54:	f8de 5014 	ldr.w	r5, [lr, #20]
 8015d58:	e7ca      	b.n	8015cf0 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x92>
	...

08015d5c <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh>:
 8015d5c:	00db      	lsls	r3, r3, #3
 8015d5e:	f89d 0000 	ldrb.w	r0, [sp]
 8015d62:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015d66:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8015d6a:	4803      	ldr	r0, [pc, #12]	@ (8015d78 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh+0x1c>)
 8015d6c:	ea00 2202 	and.w	r2, r0, r2, lsl #8
 8015d70:	4313      	orrs	r3, r2
 8015d72:	800b      	strh	r3, [r1, #0]
 8015d74:	4770      	bx	lr
 8015d76:	bf00      	nop
 8015d78:	fffff800 	.word	0xfffff800

08015d7c <_ZN8touchgfx6CircleD1Ev>:
 8015d7c:	4b03      	ldr	r3, [pc, #12]	@ (8015d8c <_ZN8touchgfx6CircleD1Ev+0x10>)
 8015d7e:	b510      	push	{r4, lr}
 8015d80:	4604      	mov	r4, r0
 8015d82:	6003      	str	r3, [r0, #0]
 8015d84:	f000 fd62 	bl	801684c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8015d88:	4620      	mov	r0, r4
 8015d8a:	bd10      	pop	{r4, pc}
 8015d8c:	08025af0 	.word	0x08025af0

08015d90 <_ZN8touchgfx6CircleD0Ev>:
 8015d90:	b510      	push	{r4, lr}
 8015d92:	4604      	mov	r4, r0
 8015d94:	f7ff fff2 	bl	8015d7c <_ZN8touchgfx6CircleD1Ev>
 8015d98:	214c      	movs	r1, #76	@ 0x4c
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f008 fec3 	bl	801eb26 <_ZdlPvj>
 8015da0:	4620      	mov	r0, r4
 8015da2:	bd10      	pop	{r4, pc}

08015da4 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8015da4:	b508      	push	{r3, lr}
 8015da6:	f5c0 6034 	rsb	r0, r0, #2880	@ 0xb40
 8015daa:	f7ff fe20 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015dae:	bd08      	pop	{r3, pc}

08015db0 <_ZN8touchgfx6CircleC1Ev>:
 8015db0:	b510      	push	{r4, lr}
 8015db2:	4604      	mov	r4, r0
 8015db4:	f000 fd2c 	bl	8016810 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8015db8:	f44f 5234 	mov.w	r2, #11520	@ 0x2d00
 8015dbc:	4b09      	ldr	r3, [pc, #36]	@ (8015de4 <_ZN8touchgfx6CircleC1Ev+0x34>)
 8015dbe:	4620      	mov	r0, r4
 8015dc0:	6422      	str	r2, [r4, #64]	@ 0x40
 8015dc2:	2205      	movs	r2, #5
 8015dc4:	6023      	str	r3, [r4, #0]
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
 8015dcc:	22b4      	movs	r2, #180	@ 0xb4
 8015dce:	6323      	str	r3, [r4, #48]	@ 0x30
 8015dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8015dd2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8015dd4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015dd6:	6463      	str	r3, [r4, #68]	@ 0x44
 8015dd8:	f884 2049 	strb.w	r2, [r4, #73]	@ 0x49
 8015ddc:	8123      	strh	r3, [r4, #8]
 8015dde:	8163      	strh	r3, [r4, #10]
 8015de0:	bd10      	pop	{r4, pc}
 8015de2:	bf00      	nop
 8015de4:	08025af0 	.word	0x08025af0

08015de8 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
 8015de8:	29b4      	cmp	r1, #180	@ 0xb4
 8015dea:	bfa8      	it	ge
 8015dec:	21b4      	movge	r1, #180	@ 0xb4
 8015dee:	2901      	cmp	r1, #1
 8015df0:	bfb8      	it	lt
 8015df2:	2101      	movlt	r1, #1
 8015df4:	f880 1049 	strb.w	r1, [r0, #73]	@ 0x49
 8015df8:	4770      	bx	lr

08015dfa <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8015dfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015dfe:	4606      	mov	r6, r0
 8015e00:	6810      	ldr	r0, [r2, #0]
 8015e02:	4698      	mov	r8, r3
 8015e04:	4691      	mov	r9, r2
 8015e06:	460f      	mov	r7, r1
 8015e08:	f7ff fdf1 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015e0c:	a902      	add	r1, sp, #8
 8015e0e:	2402      	movs	r4, #2
 8015e10:	f841 0d08 	str.w	r0, [r1, #-8]!
 8015e14:	4640      	mov	r0, r8
 8015e16:	f7ff fddf 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015e1a:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 8015e1c:	fb90 f0f4 	sdiv	r0, r0, r4
 8015e20:	4405      	add	r5, r0
 8015e22:	f8d9 0000 	ldr.w	r0, [r9]
 8015e26:	f7ff ffbd 	bl	8015da4 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015e2a:	a902      	add	r1, sp, #8
 8015e2c:	f841 0d04 	str.w	r0, [r1, #-4]!
 8015e30:	4640      	mov	r0, r8
 8015e32:	f7ff fdd1 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015e36:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 8015e38:	4629      	mov	r1, r5
 8015e3a:	fb90 f0f4 	sdiv	r0, r0, r4
 8015e3e:	1a12      	subs	r2, r2, r0
 8015e40:	4638      	mov	r0, r7
 8015e42:	f7ff fc58 	bl	80156f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015e46:	b003      	add	sp, #12
 8015e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015e4c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8015e4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015e50:	9e08      	ldr	r6, [sp, #32]
 8015e52:	4698      	mov	r8, r3
 8015e54:	4615      	mov	r5, r2
 8015e56:	460f      	mov	r7, r1
 8015e58:	6830      	ldr	r0, [r6, #0]
 8015e5a:	2402      	movs	r4, #2
 8015e5c:	f7ff fdc7 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015e60:	a902      	add	r1, sp, #8
 8015e62:	f841 0d08 	str.w	r0, [r1, #-8]!
 8015e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e68:	f7ff fdb6 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015e6c:	682d      	ldr	r5, [r5, #0]
 8015e6e:	fb90 f0f4 	sdiv	r0, r0, r4
 8015e72:	4405      	add	r5, r0
 8015e74:	6830      	ldr	r0, [r6, #0]
 8015e76:	f7ff ff95 	bl	8015da4 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015e7a:	a902      	add	r1, sp, #8
 8015e7c:	f841 0d04 	str.w	r0, [r1, #-4]!
 8015e80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e82:	f7ff fda9 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015e86:	f8d8 2000 	ldr.w	r2, [r8]
 8015e8a:	4629      	mov	r1, r5
 8015e8c:	fb90 f0f4 	sdiv	r0, r0, r4
 8015e90:	1a12      	subs	r2, r2, r0
 8015e92:	4638      	mov	r0, r7
 8015e94:	f7ff fbb4 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015e98:	b002      	add	sp, #8
 8015e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e9e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8015e9e:	b513      	push	{r0, r1, r4, lr}
 8015ea0:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015ea4:	f100 0334 	add.w	r3, r0, #52	@ 0x34
 8015ea8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8015eac:	f7ff ffce 	bl	8015e4c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8015eb0:	b002      	add	sp, #8
 8015eb2:	bd10      	pop	{r4, pc}

08015eb4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8015eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eb6:	680e      	ldr	r6, [r1, #0]
 8015eb8:	681f      	ldr	r7, [r3, #0]
 8015eba:	9d05      	ldr	r5, [sp, #20]
 8015ebc:	42be      	cmp	r6, r7
 8015ebe:	9c06      	ldr	r4, [sp, #24]
 8015ec0:	9807      	ldr	r0, [sp, #28]
 8015ec2:	bfb8      	it	lt
 8015ec4:	601e      	strlt	r6, [r3, #0]
 8015ec6:	680b      	ldr	r3, [r1, #0]
 8015ec8:	6829      	ldr	r1, [r5, #0]
 8015eca:	428b      	cmp	r3, r1
 8015ecc:	bfc8      	it	gt
 8015ece:	602b      	strgt	r3, [r5, #0]
 8015ed0:	6813      	ldr	r3, [r2, #0]
 8015ed2:	6821      	ldr	r1, [r4, #0]
 8015ed4:	428b      	cmp	r3, r1
 8015ed6:	bfb8      	it	lt
 8015ed8:	6023      	strlt	r3, [r4, #0]
 8015eda:	6813      	ldr	r3, [r2, #0]
 8015edc:	6802      	ldr	r2, [r0, #0]
 8015ede:	4293      	cmp	r3, r2
 8015ee0:	bfc8      	it	gt
 8015ee2:	6003      	strgt	r3, [r0, #0]
 8015ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ee6 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8015ee6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015eea:	b089      	sub	sp, #36	@ 0x24
 8015eec:	4690      	mov	r8, r2
 8015eee:	4606      	mov	r6, r0
 8015ef0:	2402      	movs	r4, #2
 8015ef2:	ad08      	add	r5, sp, #32
 8015ef4:	6808      	ldr	r0, [r1, #0]
 8015ef6:	461f      	mov	r7, r3
 8015ef8:	4689      	mov	r9, r1
 8015efa:	f7ff fd78 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015efe:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015f02:	4640      	mov	r0, r8
 8015f04:	4629      	mov	r1, r5
 8015f06:	f7ff fd67 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015f0a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8015f0c:	fb90 f0f4 	sdiv	r0, r0, r4
 8015f10:	4418      	add	r0, r3
 8015f12:	9005      	str	r0, [sp, #20]
 8015f14:	f8d9 0000 	ldr.w	r0, [r9]
 8015f18:	f7ff ff44 	bl	8015da4 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015f1c:	4629      	mov	r1, r5
 8015f1e:	9007      	str	r0, [sp, #28]
 8015f20:	4640      	mov	r0, r8
 8015f22:	f7ff fd59 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015f26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015f28:	aa08      	add	r2, sp, #32
 8015f2a:	a905      	add	r1, sp, #20
 8015f2c:	fb90 f0f4 	sdiv	r0, r0, r4
 8015f30:	6b74      	ldr	r4, [r6, #52]	@ 0x34
 8015f32:	1a24      	subs	r4, r4, r0
 8015f34:	4630      	mov	r0, r6
 8015f36:	f842 4d08 	str.w	r4, [r2, #-8]!
 8015f3a:	9302      	str	r3, [sp, #8]
 8015f3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015f3e:	9301      	str	r3, [sp, #4]
 8015f40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015f42:	9300      	str	r3, [sp, #0]
 8015f44:	463b      	mov	r3, r7
 8015f46:	f7ff ffb5 	bl	8015eb4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8015f4a:	b009      	add	sp, #36	@ 0x24
 8015f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015f50 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8015f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f54:	b08d      	sub	sp, #52	@ 0x34
 8015f56:	4291      	cmp	r1, r2
 8015f58:	461e      	mov	r6, r3
 8015f5a:	4604      	mov	r4, r0
 8015f5c:	9107      	str	r1, [sp, #28]
 8015f5e:	af16      	add	r7, sp, #88	@ 0x58
 8015f60:	9206      	str	r2, [sp, #24]
 8015f62:	ad0c      	add	r5, sp, #48	@ 0x30
 8015f64:	bfc8      	it	gt
 8015f66:	9106      	strgt	r1, [sp, #24]
 8015f68:	a907      	add	r1, sp, #28
 8015f6a:	bfc8      	it	gt
 8015f6c:	9207      	strgt	r2, [sp, #28]
 8015f6e:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8015f72:	9a07      	ldr	r2, [sp, #28]
 8015f74:	9b06      	ldr	r3, [sp, #24]
 8015f76:	1a9b      	subs	r3, r3, r2
 8015f78:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8015f7a:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8015f7e:	bfa1      	itttt	ge
 8015f80:	2300      	movge	r3, #0
 8015f82:	9307      	strge	r3, [sp, #28]
 8015f84:	f44f 5334 	movge.w	r3, #11520	@ 0x2d00
 8015f88:	9306      	strge	r3, [sp, #24]
 8015f8a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8015f8c:	e897 0380 	ldmia.w	r7, {r7, r8, r9}
 8015f90:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015f94:	f845 3d04 	str.w	r3, [r5, #-4]!
 8015f98:	4633      	mov	r3, r6
 8015f9a:	462a      	mov	r2, r5
 8015f9c:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8015fa0:	f7ff ffa1 	bl	8015ee6 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8015fa4:	9b07      	ldr	r3, [sp, #28]
 8015fa6:	f44f 6034 	mov.w	r0, #2880	@ 0xb40
 8015faa:	f103 0120 	add.w	r1, r3, #32
 8015fae:	fb91 f3f0 	sdiv	r3, r1, r0
 8015fb2:	fb00 1313 	mls	r3, r0, r3, r1
 8015fb6:	1ac3      	subs	r3, r0, r3
 8015fb8:	fb93 f2f0 	sdiv	r2, r3, r0
 8015fbc:	fb00 3312 	mls	r3, r0, r2, r3
 8015fc0:	440b      	add	r3, r1
 8015fc2:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8015fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015fc8:	9906      	ldr	r1, [sp, #24]
 8015fca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015fcc:	4291      	cmp	r1, r2
 8015fce:	db10      	blt.n	8015ff2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa2>
 8015fd0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8015fd2:	4651      	mov	r1, sl
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015fda:	462a      	mov	r2, r5
 8015fdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015fde:	4633      	mov	r3, r6
 8015fe0:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8015fe4:	f7ff ff7f 	bl	8015ee6 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8015fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fea:	f503 6334 	add.w	r3, r3, #2880	@ 0xb40
 8015fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ff0:	e7e9      	b.n	8015fc6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x76>
 8015ff2:	f5a2 6234 	sub.w	r2, r2, #2880	@ 0xb40
 8015ff6:	4291      	cmp	r1, r2
 8015ff8:	dd0b      	ble.n	8016012 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc2>
 8015ffa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8015ffc:	a906      	add	r1, sp, #24
 8015ffe:	4620      	mov	r0, r4
 8016000:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016004:	462a      	mov	r2, r5
 8016006:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016008:	4633      	mov	r3, r6
 801600a:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 801600e:	f7ff ff6a 	bl	8015ee6 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016012:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016014:	2b00      	cmp	r3, #0
 8016016:	f040 8092 	bne.w	801613e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1ee>
 801601a:	9907      	ldr	r1, [sp, #28]
 801601c:	9a06      	ldr	r2, [sp, #24]
 801601e:	1a52      	subs	r2, r2, r1
 8016020:	f5b2 5f34 	cmp.w	r2, #11520	@ 0x2d00
 8016024:	da09      	bge.n	801603a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xea>
 8016026:	930a      	str	r3, [sp, #40]	@ 0x28
 8016028:	462a      	mov	r2, r5
 801602a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801602c:	a90a      	add	r1, sp, #40	@ 0x28
 801602e:	4633      	mov	r3, r6
 8016030:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8016034:	4620      	mov	r0, r4
 8016036:	f7ff ff56 	bl	8015ee6 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801603a:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
 801603e:	2bb3      	cmp	r3, #179	@ 0xb3
 8016040:	dc7a      	bgt.n	8016138 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1e8>
 8016042:	9807      	ldr	r0, [sp, #28]
 8016044:	9b06      	ldr	r3, [sp, #24]
 8016046:	1a1b      	subs	r3, r3, r0
 8016048:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 801604c:	da74      	bge.n	8016138 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1e8>
 801604e:	ad0c      	add	r5, sp, #48	@ 0x30
 8016050:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8016054:	f7ff fccb 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016058:	f04f 0a02 	mov.w	sl, #2
 801605c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016060:	4658      	mov	r0, fp
 8016062:	4629      	mov	r1, r5
 8016064:	f7ff fcb8 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016068:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801606a:	18c3      	adds	r3, r0, r3
 801606c:	9807      	ldr	r0, [sp, #28]
 801606e:	9305      	str	r3, [sp, #20]
 8016070:	f7ff fe98 	bl	8015da4 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016074:	4629      	mov	r1, r5
 8016076:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016078:	4658      	mov	r0, fp
 801607a:	f7ff fcad 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801607e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016080:	9a05      	ldr	r2, [sp, #20]
 8016082:	a90a      	add	r1, sp, #40	@ 0x28
 8016084:	1a1b      	subs	r3, r3, r0
 8016086:	4620      	mov	r0, r4
 8016088:	9304      	str	r3, [sp, #16]
 801608a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801608c:	fb93 f3fa 	sdiv	r3, r3, sl
 8016090:	1ad2      	subs	r2, r2, r3
 8016092:	920a      	str	r2, [sp, #40]	@ 0x28
 8016094:	9a04      	ldr	r2, [sp, #16]
 8016096:	1ad3      	subs	r3, r2, r3
 8016098:	462a      	mov	r2, r5
 801609a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801609c:	4633      	mov	r3, r6
 801609e:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 80160a2:	f7ff ff07 	bl	8015eb4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80160a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80160a8:	9a05      	ldr	r2, [sp, #20]
 80160aa:	a90a      	add	r1, sp, #40	@ 0x28
 80160ac:	4620      	mov	r0, r4
 80160ae:	fb93 f3fa 	sdiv	r3, r3, sl
 80160b2:	189a      	adds	r2, r3, r2
 80160b4:	920a      	str	r2, [sp, #40]	@ 0x28
 80160b6:	9a04      	ldr	r2, [sp, #16]
 80160b8:	4413      	add	r3, r2
 80160ba:	462a      	mov	r2, r5
 80160bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80160be:	4633      	mov	r3, r6
 80160c0:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 80160c4:	f7ff fef6 	bl	8015eb4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80160c8:	9806      	ldr	r0, [sp, #24]
 80160ca:	f7ff fc90 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80160ce:	4629      	mov	r1, r5
 80160d0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80160d2:	4658      	mov	r0, fp
 80160d4:	f7ff fc80 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80160d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160da:	18c3      	adds	r3, r0, r3
 80160dc:	9806      	ldr	r0, [sp, #24]
 80160de:	9304      	str	r3, [sp, #16]
 80160e0:	f7ff fe60 	bl	8015da4 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80160e4:	4629      	mov	r1, r5
 80160e6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80160e8:	4658      	mov	r0, fp
 80160ea:	f7ff fc75 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80160ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80160f0:	9a04      	ldr	r2, [sp, #16]
 80160f2:	a90a      	add	r1, sp, #40	@ 0x28
 80160f4:	eba3 0b00 	sub.w	fp, r3, r0
 80160f8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80160fa:	4620      	mov	r0, r4
 80160fc:	fb93 f3fa 	sdiv	r3, r3, sl
 8016100:	1ad2      	subs	r2, r2, r3
 8016102:	ebab 0303 	sub.w	r3, fp, r3
 8016106:	920a      	str	r2, [sp, #40]	@ 0x28
 8016108:	462a      	mov	r2, r5
 801610a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801610c:	4633      	mov	r3, r6
 801610e:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8016112:	f7ff fecf 	bl	8015eb4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016116:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016118:	462a      	mov	r2, r5
 801611a:	a90a      	add	r1, sp, #40	@ 0x28
 801611c:	4620      	mov	r0, r4
 801611e:	fb93 fafa 	sdiv	sl, r3, sl
 8016122:	9b04      	ldr	r3, [sp, #16]
 8016124:	4453      	add	r3, sl
 8016126:	930a      	str	r3, [sp, #40]	@ 0x28
 8016128:	eb0a 030b 	add.w	r3, sl, fp
 801612c:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8016130:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016132:	4633      	mov	r3, r6
 8016134:	f7ff febe 	bl	8015eb4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016138:	b00d      	add	sp, #52	@ 0x34
 801613a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801613e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8016140:	a907      	add	r1, sp, #28
 8016142:	4620      	mov	r0, r4
 8016144:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016148:	462a      	mov	r2, r5
 801614a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801614c:	4633      	mov	r3, r6
 801614e:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8016152:	f7ff fec8 	bl	8015ee6 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016156:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8016158:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801615a:	a906      	add	r1, sp, #24
 801615c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016160:	462a      	mov	r2, r5
 8016162:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016164:	4633      	mov	r3, r6
 8016166:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 801616a:	e763      	b.n	8016034 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xe4>

0801616c <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801616c:	b530      	push	{r4, r5, lr}
 801616e:	4604      	mov	r4, r0
 8016170:	4608      	mov	r0, r1
 8016172:	4611      	mov	r1, r2
 8016174:	461a      	mov	r2, r3
 8016176:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801617a:	b089      	sub	sp, #36	@ 0x24
 801617c:	2500      	movs	r5, #0
 801617e:	015b      	lsls	r3, r3, #5
 8016180:	9505      	str	r5, [sp, #20]
 8016182:	9304      	str	r3, [sp, #16]
 8016184:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016188:	9507      	str	r5, [sp, #28]
 801618a:	2520      	movs	r5, #32
 801618c:	015b      	lsls	r3, r3, #5
 801618e:	9306      	str	r3, [sp, #24]
 8016190:	ab07      	add	r3, sp, #28
 8016192:	9302      	str	r3, [sp, #8]
 8016194:	ab06      	add	r3, sp, #24
 8016196:	9301      	str	r3, [sp, #4]
 8016198:	ab05      	add	r3, sp, #20
 801619a:	9300      	str	r3, [sp, #0]
 801619c:	ab04      	add	r3, sp, #16
 801619e:	f7ff fed7 	bl	8015f50 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 80161a2:	9a04      	ldr	r2, [sp, #16]
 80161a4:	9805      	ldr	r0, [sp, #20]
 80161a6:	9b06      	ldr	r3, [sp, #24]
 80161a8:	9907      	ldr	r1, [sp, #28]
 80161aa:	fb92 f2f5 	sdiv	r2, r2, r5
 80161ae:	fb90 f0f5 	sdiv	r0, r0, r5
 80161b2:	fb93 f3f5 	sdiv	r3, r3, r5
 80161b6:	fb91 f1f5 	sdiv	r1, r1, r5
 80161ba:	b292      	uxth	r2, r2
 80161bc:	3002      	adds	r0, #2
 80161be:	b29b      	uxth	r3, r3
 80161c0:	3102      	adds	r1, #2
 80161c2:	1a80      	subs	r0, r0, r2
 80161c4:	3a01      	subs	r2, #1
 80161c6:	1ac9      	subs	r1, r1, r3
 80161c8:	3b01      	subs	r3, #1
 80161ca:	80a0      	strh	r0, [r4, #4]
 80161cc:	4620      	mov	r0, r4
 80161ce:	8022      	strh	r2, [r4, #0]
 80161d0:	8063      	strh	r3, [r4, #2]
 80161d2:	80e1      	strh	r1, [r4, #6]
 80161d4:	b009      	add	sp, #36	@ 0x24
 80161d6:	bd30      	pop	{r4, r5, pc}

080161d8 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 80161d8:	b510      	push	{r4, lr}
 80161da:	4604      	mov	r4, r0
 80161dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80161de:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80161e0:	f7ff ffc4 	bl	801616c <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80161e4:	4620      	mov	r0, r4
 80161e6:	bd10      	pop	{r4, pc}

080161e8 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E>:
 80161e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80161ea:	4605      	mov	r5, r0
 80161ec:	6c0e      	ldr	r6, [r1, #64]	@ 0x40
 80161ee:	6bc8      	ldr	r0, [r1, #60]	@ 0x3c
 80161f0:	2300      	movs	r3, #0
 80161f2:	6814      	ldr	r4, [r2, #0]
 80161f4:	42b0      	cmp	r0, r6
 80161f6:	9301      	str	r3, [sp, #4]
 80161f8:	da35      	bge.n	8016266 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x7e>
 80161fa:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 80161fe:	4284      	cmp	r4, r0
 8016200:	4622      	mov	r2, r4
 8016202:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016206:	da14      	bge.n	8016232 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x4a>
 8016208:	9400      	str	r4, [sp, #0]
 801620a:	b14b      	cbz	r3, 8016220 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x38>
 801620c:	fb90 f2f3 	sdiv	r2, r0, r3
 8016210:	fb03 0212 	mls	r2, r3, r2, r0
 8016214:	1a9a      	subs	r2, r3, r2
 8016216:	fb92 f4f3 	sdiv	r4, r2, r3
 801621a:	fb03 2314 	mls	r3, r3, r4, r2
 801621e:	4418      	add	r0, r3
 8016220:	42b0      	cmp	r0, r6
 8016222:	9001      	str	r0, [sp, #4]
 8016224:	bfac      	ite	ge
 8016226:	f101 0340 	addge.w	r3, r1, #64	@ 0x40
 801622a:	ab01      	addlt	r3, sp, #4
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	9301      	str	r3, [sp, #4]
 8016230:	e011      	b.n	8016256 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x6e>
 8016232:	42b4      	cmp	r4, r6
 8016234:	9000      	str	r0, [sp, #0]
 8016236:	da0d      	bge.n	8016254 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x6c>
 8016238:	b14b      	cbz	r3, 801624e <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x66>
 801623a:	fb94 f0f3 	sdiv	r0, r4, r3
 801623e:	fb03 4010 	mls	r0, r3, r0, r4
 8016242:	1a18      	subs	r0, r3, r0
 8016244:	fb90 f4f3 	sdiv	r4, r0, r3
 8016248:	fb03 0314 	mls	r3, r3, r4, r0
 801624c:	441a      	add	r2, r3
 801624e:	9201      	str	r2, [sp, #4]
 8016250:	42b2      	cmp	r2, r6
 8016252:	e7e7      	b.n	8016224 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x3c>
 8016254:	9401      	str	r4, [sp, #4]
 8016256:	4628      	mov	r0, r5
 8016258:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801625c:	f7ff ff86 	bl	801616c <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8016260:	4628      	mov	r0, r5
 8016262:	b002      	add	sp, #8
 8016264:	bd70      	pop	{r4, r5, r6, pc}
 8016266:	42a0      	cmp	r0, r4
 8016268:	da12      	bge.n	8016290 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0xa8>
 801626a:	2420      	movs	r4, #32
 801626c:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 8016270:	fb90 f0f4 	sdiv	r0, r0, r4
 8016274:	fb90 f0f3 	sdiv	r0, r0, r3
 8016278:	4358      	muls	r0, r3
 801627a:	0140      	lsls	r0, r0, #5
 801627c:	4286      	cmp	r6, r0
 801627e:	9000      	str	r0, [sp, #0]
 8016280:	bfac      	ite	ge
 8016282:	f101 0340 	addge.w	r3, r1, #64	@ 0x40
 8016286:	466b      	movlt	r3, sp
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	9300      	str	r3, [sp, #0]
 801628c:	6813      	ldr	r3, [r2, #0]
 801628e:	e7ce      	b.n	801622e <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x46>
 8016290:	42a6      	cmp	r6, r4
 8016292:	da12      	bge.n	80162ba <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0xd2>
 8016294:	2220      	movs	r2, #32
 8016296:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 801629a:	fb94 f4f2 	sdiv	r4, r4, r2
 801629e:	fb94 f4f3 	sdiv	r4, r4, r3
 80162a2:	435c      	muls	r4, r3
 80162a4:	0164      	lsls	r4, r4, #5
 80162a6:	42a6      	cmp	r6, r4
 80162a8:	9400      	str	r4, [sp, #0]
 80162aa:	bfac      	ite	ge
 80162ac:	f101 0340 	addge.w	r3, r1, #64	@ 0x40
 80162b0:	466b      	movlt	r3, sp
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	9300      	str	r3, [sp, #0]
 80162b6:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80162b8:	e7b9      	b.n	801622e <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x46>
 80162ba:	9400      	str	r4, [sp, #0]
 80162bc:	9001      	str	r0, [sp, #4]
 80162be:	e7ca      	b.n	8016256 <_ZN8touchgfx6Circle34getMinimalRectForUpdatedStartAngleERNS_7CWRUtil2Q5E+0x6e>

080162c0 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>:
 80162c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80162c2:	4606      	mov	r6, r0
 80162c4:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 80162c6:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 80162c8:	2300      	movs	r3, #0
 80162ca:	6814      	ldr	r4, [r2, #0]
 80162cc:	4285      	cmp	r5, r0
 80162ce:	9301      	str	r3, [sp, #4]
 80162d0:	da34      	bge.n	801633c <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x7c>
 80162d2:	4284      	cmp	r4, r0
 80162d4:	dd13      	ble.n	80162fe <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x3e>
 80162d6:	2420      	movs	r4, #32
 80162d8:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 80162dc:	fb90 f0f4 	sdiv	r0, r0, r4
 80162e0:	fb90 f0f3 	sdiv	r0, r0, r3
 80162e4:	4358      	muls	r0, r3
 80162e6:	0140      	lsls	r0, r0, #5
 80162e8:	4285      	cmp	r5, r0
 80162ea:	9000      	str	r0, [sp, #0]
 80162ec:	bfac      	ite	ge
 80162ee:	f101 033c 	addge.w	r3, r1, #60	@ 0x3c
 80162f2:	466b      	movlt	r3, sp
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	9300      	str	r3, [sp, #0]
 80162f8:	6813      	ldr	r3, [r2, #0]
 80162fa:	9301      	str	r3, [sp, #4]
 80162fc:	e016      	b.n	801632c <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x6c>
 80162fe:	42ac      	cmp	r4, r5
 8016300:	dd12      	ble.n	8016328 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x68>
 8016302:	2220      	movs	r2, #32
 8016304:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 8016308:	fb94 f4f2 	sdiv	r4, r4, r2
 801630c:	fb94 f4f3 	sdiv	r4, r4, r3
 8016310:	435c      	muls	r4, r3
 8016312:	0164      	lsls	r4, r4, #5
 8016314:	42a5      	cmp	r5, r4
 8016316:	9400      	str	r4, [sp, #0]
 8016318:	bfac      	ite	ge
 801631a:	f101 033c 	addge.w	r3, r1, #60	@ 0x3c
 801631e:	466b      	movlt	r3, sp
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	9300      	str	r3, [sp, #0]
 8016324:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016326:	e7e8      	b.n	80162fa <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x3a>
 8016328:	9400      	str	r4, [sp, #0]
 801632a:	9001      	str	r0, [sp, #4]
 801632c:	4630      	mov	r0, r6
 801632e:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8016332:	f7ff ff1b 	bl	801616c <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8016336:	4630      	mov	r0, r6
 8016338:	b002      	add	sp, #8
 801633a:	bd70      	pop	{r4, r5, r6, pc}
 801633c:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 8016340:	4284      	cmp	r4, r0
 8016342:	4622      	mov	r2, r4
 8016344:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016348:	da14      	bge.n	8016374 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xb4>
 801634a:	9400      	str	r4, [sp, #0]
 801634c:	b14b      	cbz	r3, 8016362 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xa2>
 801634e:	fb90 f2f3 	sdiv	r2, r0, r3
 8016352:	fb03 0212 	mls	r2, r3, r2, r0
 8016356:	1a9a      	subs	r2, r3, r2
 8016358:	fb92 f4f3 	sdiv	r4, r2, r3
 801635c:	fb03 2314 	mls	r3, r3, r4, r2
 8016360:	4418      	add	r0, r3
 8016362:	42a8      	cmp	r0, r5
 8016364:	9001      	str	r0, [sp, #4]
 8016366:	db02      	blt.n	801636e <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xae>
 8016368:	f101 033c 	add.w	r3, r1, #60	@ 0x3c
 801636c:	e000      	b.n	8016370 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xb0>
 801636e:	ab01      	add	r3, sp, #4
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	e7c2      	b.n	80162fa <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x3a>
 8016374:	42ac      	cmp	r4, r5
 8016376:	9000      	str	r0, [sp, #0]
 8016378:	da0d      	bge.n	8016396 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xd6>
 801637a:	b14b      	cbz	r3, 8016390 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xd0>
 801637c:	fb94 f0f3 	sdiv	r0, r4, r3
 8016380:	fb03 4010 	mls	r0, r3, r0, r4
 8016384:	1a18      	subs	r0, r3, r0
 8016386:	fb90 f4f3 	sdiv	r4, r0, r3
 801638a:	fb03 0314 	mls	r3, r3, r4, r0
 801638e:	441a      	add	r2, r3
 8016390:	9201      	str	r2, [sp, #4]
 8016392:	42aa      	cmp	r2, r5
 8016394:	e7e7      	b.n	8016366 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xa6>
 8016396:	9401      	str	r4, [sp, #4]
 8016398:	e7c8      	b.n	801632c <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x6c>

0801639a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 801639a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801639e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80163a0:	b0b8      	sub	sp, #224	@ 0xe0
 80163a2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80163a4:	4604      	mov	r4, r0
 80163a6:	9302      	str	r3, [sp, #8]
 80163a8:	460f      	mov	r7, r1
 80163aa:	4293      	cmp	r3, r2
 80163ac:	9203      	str	r2, [sp, #12]
 80163ae:	ae09      	add	r6, sp, #36	@ 0x24
 80163b0:	bfc4      	itt	gt
 80163b2:	9202      	strgt	r2, [sp, #8]
 80163b4:	9303      	strgt	r3, [sp, #12]
 80163b6:	9a02      	ldr	r2, [sp, #8]
 80163b8:	9b03      	ldr	r3, [sp, #12]
 80163ba:	1a9b      	subs	r3, r3, r2
 80163bc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80163be:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 80163c2:	bfa1      	itttt	ge
 80163c4:	2300      	movge	r3, #0
 80163c6:	9302      	strge	r3, [sp, #8]
 80163c8:	f44f 5334 	movge.w	r3, #11520	@ 0x2d00
 80163cc:	9303      	strge	r3, [sp, #12]
 80163ce:	2a00      	cmp	r2, #0
 80163d0:	d131      	bne.n	8016436 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 80163d2:	463a      	mov	r2, r7
 80163d4:	4621      	mov	r1, r4
 80163d6:	a80a      	add	r0, sp, #40	@ 0x28
 80163d8:	f7fe ffde 	bl	8015398 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80163dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80163de:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80163e0:	9204      	str	r2, [sp, #16]
 80163e2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80163e6:	9305      	str	r3, [sp, #20]
 80163e8:	dc6f      	bgt.n	80164ca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 80163ea:	9b02      	ldr	r3, [sp, #8]
 80163ec:	a90a      	add	r1, sp, #40	@ 0x28
 80163ee:	9a04      	ldr	r2, [sp, #16]
 80163f0:	4620      	mov	r0, r4
 80163f2:	9306      	str	r3, [sp, #24]
 80163f4:	9b05      	ldr	r3, [sp, #20]
 80163f6:	f894 5048 	ldrb.w	r5, [r4, #72]	@ 0x48
 80163fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80163fe:	aa06      	add	r2, sp, #24
 8016400:	016d      	lsls	r5, r5, #5
 8016402:	9309      	str	r3, [sp, #36]	@ 0x24
 8016404:	4633      	mov	r3, r6
 8016406:	f7ff fcf8 	bl	8015dfa <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801640a:	9f06      	ldr	r7, [sp, #24]
 801640c:	2d00      	cmp	r5, #0
 801640e:	d165      	bne.n	80164dc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8016410:	3720      	adds	r7, #32
 8016412:	4639      	mov	r1, r7
 8016414:	9a03      	ldr	r2, [sp, #12]
 8016416:	442f      	add	r7, r5
 8016418:	9b05      	ldr	r3, [sp, #20]
 801641a:	4291      	cmp	r1, r2
 801641c:	dc6b      	bgt.n	80164f6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 801641e:	9a04      	ldr	r2, [sp, #16]
 8016420:	4620      	mov	r0, r4
 8016422:	9106      	str	r1, [sp, #24]
 8016424:	a90a      	add	r1, sp, #40	@ 0x28
 8016426:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801642a:	aa06      	add	r2, sp, #24
 801642c:	9309      	str	r3, [sp, #36]	@ 0x24
 801642e:	4633      	mov	r3, r6
 8016430:	f7ff fd35 	bl	8015e9e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8016434:	e7ed      	b.n	8016412 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8016436:	f9b1 e000 	ldrsh.w	lr, [r1]
 801643a:	88bd      	ldrh	r5, [r7, #4]
 801643c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801643e:	4475      	add	r5, lr
 8016440:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8016444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016446:	b22d      	sxth	r5, r5
 8016448:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 801644c:	eba3 134e 	sub.w	r3, r3, lr, lsl #5
 8016450:	2d00      	cmp	r5, #0
 8016452:	bfb8      	it	lt
 8016454:	426d      	neglt	r5, r5
 8016456:	2b00      	cmp	r3, #0
 8016458:	bfb8      	it	lt
 801645a:	425b      	neglt	r3, r3
 801645c:	429d      	cmp	r5, r3
 801645e:	bfb8      	it	lt
 8016460:	461d      	movlt	r5, r3
 8016462:	88fb      	ldrh	r3, [r7, #6]
 8016464:	4403      	add	r3, r0
 8016466:	116d      	asrs	r5, r5, #5
 8016468:	b21b      	sxth	r3, r3
 801646a:	3501      	adds	r5, #1
 801646c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8016470:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8016474:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8016478:	2b00      	cmp	r3, #0
 801647a:	f100 0001 	add.w	r0, r0, #1
 801647e:	bfb8      	it	lt
 8016480:	425b      	neglt	r3, r3
 8016482:	2900      	cmp	r1, #0
 8016484:	ea4f 0060 	mov.w	r0, r0, asr #1
 8016488:	bfb8      	it	lt
 801648a:	4249      	neglt	r1, r1
 801648c:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8016490:	428b      	cmp	r3, r1
 8016492:	bfb8      	it	lt
 8016494:	460b      	movlt	r3, r1
 8016496:	115b      	asrs	r3, r3, #5
 8016498:	3301      	adds	r3, #1
 801649a:	435b      	muls	r3, r3
 801649c:	fb05 3505 	mla	r5, r5, r5, r3
 80164a0:	2302      	movs	r3, #2
 80164a2:	fb92 f2f3 	sdiv	r2, r2, r3
 80164a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80164a8:	1a9a      	subs	r2, r3, r2
 80164aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80164ac:	f7f2 f872 	bl	8008594 <_ZN8touchgfx7CWRUtil4sineEi>
 80164b0:	a90a      	add	r1, sp, #40	@ 0x28
 80164b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80164b4:	4630      	mov	r0, r6
 80164b6:	f7ff fa8f 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80164ba:	2320      	movs	r3, #32
 80164bc:	fb90 f0f3 	sdiv	r0, r0, r3
 80164c0:	4340      	muls	r0, r0
 80164c2:	4285      	cmp	r5, r0
 80164c4:	da85      	bge.n	80163d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 80164c6:	2401      	movs	r4, #1
 80164c8:	e036      	b.n	8016538 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 80164ca:	2102      	movs	r1, #2
 80164cc:	fb93 f3f1 	sdiv	r3, r3, r1
 80164d0:	4413      	add	r3, r2
 80164d2:	9305      	str	r3, [sp, #20]
 80164d4:	fb93 f3f1 	sdiv	r3, r3, r1
 80164d8:	9304      	str	r3, [sp, #16]
 80164da:	e786      	b.n	80163ea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 80164dc:	f107 0320 	add.w	r3, r7, #32
 80164e0:	fb93 f7f5 	sdiv	r7, r3, r5
 80164e4:	fb05 3717 	mls	r7, r5, r7, r3
 80164e8:	1bea      	subs	r2, r5, r7
 80164ea:	fb92 f7f5 	sdiv	r7, r2, r5
 80164ee:	fb05 2717 	mls	r7, r5, r7, r2
 80164f2:	441f      	add	r7, r3
 80164f4:	e78d      	b.n	8016412 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 80164f6:	9906      	ldr	r1, [sp, #24]
 80164f8:	428a      	cmp	r2, r1
 80164fa:	dd09      	ble.n	8016510 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 80164fc:	9a04      	ldr	r2, [sp, #16]
 80164fe:	a90a      	add	r1, sp, #40	@ 0x28
 8016500:	4620      	mov	r0, r4
 8016502:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016506:	aa03      	add	r2, sp, #12
 8016508:	9309      	str	r3, [sp, #36]	@ 0x24
 801650a:	4633      	mov	r3, r6
 801650c:	f7ff fcc7 	bl	8015e9e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8016510:	9a05      	ldr	r2, [sp, #20]
 8016512:	9803      	ldr	r0, [sp, #12]
 8016514:	9b02      	ldr	r3, [sp, #8]
 8016516:	b99a      	cbnz	r2, 8016540 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 8016518:	1ac0      	subs	r0, r0, r3
 801651a:	f5b0 5f34 	cmp.w	r0, #11520	@ 0x2d00
 801651e:	da04      	bge.n	801652a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8016520:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8016522:	a80a      	add	r0, sp, #40	@ 0x28
 8016524:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016526:	f7ff f86b 	bl	8015600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801652a:	a80a      	add	r0, sp, #40	@ 0x28
 801652c:	f7ff f9ea 	bl	8015904 <_ZN8touchgfx6Canvas6renderEv>
 8016530:	4604      	mov	r4, r0
 8016532:	a80a      	add	r0, sp, #40	@ 0x28
 8016534:	f7ff fa26 	bl	8015984 <_ZN8touchgfx6CanvasD1Ev>
 8016538:	4620      	mov	r0, r4
 801653a:	b038      	add	sp, #224	@ 0xe0
 801653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016540:	1ac3      	subs	r3, r0, r3
 8016542:	f894 7049 	ldrb.w	r7, [r4, #73]	@ 0x49
 8016546:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 801654a:	ea4f 1747 	mov.w	r7, r7, lsl #5
 801654e:	da2b      	bge.n	80165a8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 8016550:	f7ff fa4d 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016554:	4631      	mov	r1, r6
 8016556:	9009      	str	r0, [sp, #36]	@ 0x24
 8016558:	a804      	add	r0, sp, #16
 801655a:	f7ff fa3d 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801655e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016560:	f10d 0814 	add.w	r8, sp, #20
 8016564:	4418      	add	r0, r3
 8016566:	9007      	str	r0, [sp, #28]
 8016568:	9803      	ldr	r0, [sp, #12]
 801656a:	f7ff fc1b 	bl	8015da4 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801656e:	4631      	mov	r1, r6
 8016570:	9009      	str	r0, [sp, #36]	@ 0x24
 8016572:	a804      	add	r0, sp, #16
 8016574:	f7ff fa30 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016578:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801657a:	1a18      	subs	r0, r3, r0
 801657c:	9b03      	ldr	r3, [sp, #12]
 801657e:	443b      	add	r3, r7
 8016580:	9008      	str	r0, [sp, #32]
 8016582:	9309      	str	r3, [sp, #36]	@ 0x24
 8016584:	9b03      	ldr	r3, [sp, #12]
 8016586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016588:	f503 53b4 	add.w	r3, r3, #5760	@ 0x1680
 801658c:	4293      	cmp	r3, r2
 801658e:	dd0b      	ble.n	80165a8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 8016590:	ab08      	add	r3, sp, #32
 8016592:	aa07      	add	r2, sp, #28
 8016594:	a90a      	add	r1, sp, #40	@ 0x28
 8016596:	4620      	mov	r0, r4
 8016598:	e88d 0140 	stmia.w	sp, {r6, r8}
 801659c:	f7ff fc56 	bl	8015e4c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80165a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165a2:	443b      	add	r3, r7
 80165a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80165a6:	e7ed      	b.n	8016584 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 80165a8:	9b06      	ldr	r3, [sp, #24]
 80165aa:	9a03      	ldr	r2, [sp, #12]
 80165ac:	429a      	cmp	r2, r3
 80165ae:	dd0a      	ble.n	80165c6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 80165b0:	9a04      	ldr	r2, [sp, #16]
 80165b2:	a90a      	add	r1, sp, #40	@ 0x28
 80165b4:	9b05      	ldr	r3, [sp, #20]
 80165b6:	4620      	mov	r0, r4
 80165b8:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80165bc:	aa03      	add	r2, sp, #12
 80165be:	9309      	str	r3, [sp, #36]	@ 0x24
 80165c0:	4633      	mov	r3, r6
 80165c2:	f7ff fc6c 	bl	8015e9e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80165c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80165ca:	4642      	mov	r2, r8
 80165cc:	9b02      	ldr	r3, [sp, #8]
 80165ce:	eba8 0805 	sub.w	r8, r8, r5
 80165d2:	429a      	cmp	r2, r3
 80165d4:	db0c      	blt.n	80165f0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x256>
 80165d6:	9206      	str	r2, [sp, #24]
 80165d8:	a90a      	add	r1, sp, #40	@ 0x28
 80165da:	9a04      	ldr	r2, [sp, #16]
 80165dc:	4620      	mov	r0, r4
 80165de:	9b05      	ldr	r3, [sp, #20]
 80165e0:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80165e4:	aa06      	add	r2, sp, #24
 80165e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80165e8:	4633      	mov	r3, r6
 80165ea:	f7ff fc58 	bl	8015e9e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80165ee:	e7ec      	b.n	80165ca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 80165f0:	9a06      	ldr	r2, [sp, #24]
 80165f2:	4293      	cmp	r3, r2
 80165f4:	da0a      	bge.n	801660c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x272>
 80165f6:	9a04      	ldr	r2, [sp, #16]
 80165f8:	a90a      	add	r1, sp, #40	@ 0x28
 80165fa:	9b05      	ldr	r3, [sp, #20]
 80165fc:	4620      	mov	r0, r4
 80165fe:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016602:	aa02      	add	r2, sp, #8
 8016604:	9309      	str	r3, [sp, #36]	@ 0x24
 8016606:	4633      	mov	r3, r6
 8016608:	f7ff fc49 	bl	8015e9e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801660c:	9802      	ldr	r0, [sp, #8]
 801660e:	9b03      	ldr	r3, [sp, #12]
 8016610:	1a1b      	subs	r3, r3, r0
 8016612:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8016616:	da88      	bge.n	801652a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8016618:	f7ff f9e9 	bl	80159ee <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801661c:	4631      	mov	r1, r6
 801661e:	9009      	str	r0, [sp, #36]	@ 0x24
 8016620:	a804      	add	r0, sp, #16
 8016622:	f7ff f9d9 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016626:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016628:	ad05      	add	r5, sp, #20
 801662a:	4418      	add	r0, r3
 801662c:	9007      	str	r0, [sp, #28]
 801662e:	9802      	ldr	r0, [sp, #8]
 8016630:	f7ff fbb8 	bl	8015da4 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016634:	4631      	mov	r1, r6
 8016636:	9009      	str	r0, [sp, #36]	@ 0x24
 8016638:	a804      	add	r0, sp, #16
 801663a:	f7ff f9cd 	bl	80159d8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801663e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016640:	1a18      	subs	r0, r3, r0
 8016642:	9b02      	ldr	r3, [sp, #8]
 8016644:	f5a3 53b4 	sub.w	r3, r3, #5760	@ 0x1680
 8016648:	9008      	str	r0, [sp, #32]
 801664a:	443b      	add	r3, r7
 801664c:	9309      	str	r3, [sp, #36]	@ 0x24
 801664e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016650:	9a02      	ldr	r2, [sp, #8]
 8016652:	429a      	cmp	r2, r3
 8016654:	f77f af69 	ble.w	801652a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8016658:	ab08      	add	r3, sp, #32
 801665a:	9501      	str	r5, [sp, #4]
 801665c:	9600      	str	r6, [sp, #0]
 801665e:	aa07      	add	r2, sp, #28
 8016660:	a90a      	add	r1, sp, #40	@ 0x28
 8016662:	4620      	mov	r0, r4
 8016664:	f7ff fbf2 	bl	8015e4c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8016668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801666a:	443b      	add	r3, r7
 801666c:	9309      	str	r3, [sp, #36]	@ 0x24
 801666e:	e7ee      	b.n	801664e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b4>

08016670 <_ZN8touchgfx15AbstractPainterC1Ev>:
 8016670:	4a03      	ldr	r2, [pc, #12]	@ (8016680 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8016672:	6002      	str	r2, [r0, #0]
 8016674:	2200      	movs	r2, #0
 8016676:	8082      	strh	r2, [r0, #4]
 8016678:	80c2      	strh	r2, [r0, #6]
 801667a:	22ff      	movs	r2, #255	@ 0xff
 801667c:	7202      	strb	r2, [r0, #8]
 801667e:	4770      	bx	lr
 8016680:	08025b74 	.word	0x08025b74

08016684 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8016684:	4770      	bx	lr

08016686 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8016686:	8081      	strh	r1, [r0, #4]
 8016688:	80c2      	strh	r2, [r0, #6]
 801668a:	4770      	bx	lr

0801668c <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 801668c:	7201      	strb	r1, [r0, #8]
 801668e:	4770      	bx	lr

08016690 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016690:	6281      	str	r1, [r0, #40]	@ 0x28
 8016692:	4770      	bx	lr

08016694 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016694:	b513      	push	{r0, r1, r4, lr}
 8016696:	6803      	ldr	r3, [r0, #0]
 8016698:	4604      	mov	r4, r0
 801669a:	4601      	mov	r1, r0
 801669c:	4668      	mov	r0, sp
 801669e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166a0:	4798      	blx	r3
 80166a2:	6823      	ldr	r3, [r4, #0]
 80166a4:	4669      	mov	r1, sp
 80166a6:	4620      	mov	r0, r4
 80166a8:	691b      	ldr	r3, [r3, #16]
 80166aa:	4798      	blx	r3
 80166ac:	b002      	add	sp, #8
 80166ae:	bd10      	pop	{r4, pc}

080166b0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80166b0:	b510      	push	{r4, lr}
 80166b2:	2200      	movs	r2, #0
 80166b4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80166b8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80166bc:	8002      	strh	r2, [r0, #0]
 80166be:	8042      	strh	r2, [r0, #2]
 80166c0:	8084      	strh	r4, [r0, #4]
 80166c2:	80c1      	strh	r1, [r0, #6]
 80166c4:	bd10      	pop	{r4, pc}

080166c6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80166c6:	2200      	movs	r2, #0
 80166c8:	8002      	strh	r2, [r0, #0]
 80166ca:	8042      	strh	r2, [r0, #2]
 80166cc:	8082      	strh	r2, [r0, #4]
 80166ce:	80c2      	strh	r2, [r0, #6]
 80166d0:	4770      	bx	lr
	...

080166d4 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80166d4:	b508      	push	{r3, lr}
 80166d6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80166d8:	b928      	cbnz	r0, 80166e6 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80166da:	4b03      	ldr	r3, [pc, #12]	@ (80166e8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80166dc:	2128      	movs	r1, #40	@ 0x28
 80166de:	4a03      	ldr	r2, [pc, #12]	@ (80166ec <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80166e0:	4803      	ldr	r0, [pc, #12]	@ (80166f0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80166e2:	f009 fb47 	bl	801fd74 <__assert_func>
 80166e6:	bd08      	pop	{r3, pc}
 80166e8:	08025b80 	.word	0x08025b80
 80166ec:	08025c68 	.word	0x08025c68
 80166f0:	08025ba7 	.word	0x08025ba7

080166f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80166f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f8:	b089      	sub	sp, #36	@ 0x24
 80166fa:	4604      	mov	r4, r0
 80166fc:	6808      	ldr	r0, [r1, #0]
 80166fe:	f04f 0a00 	mov.w	sl, #0
 8016702:	6849      	ldr	r1, [r1, #4]
 8016704:	ab02      	add	r3, sp, #8
 8016706:	f04f 0b01 	mov.w	fp, #1
 801670a:	c303      	stmia	r3!, {r0, r1}
 801670c:	4b3f      	ldr	r3, [pc, #252]	@ (801680c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801670e:	4621      	mov	r1, r4
 8016710:	a804      	add	r0, sp, #16
 8016712:	781b      	ldrb	r3, [r3, #0]
 8016714:	2b01      	cmp	r3, #1
 8016716:	6823      	ldr	r3, [r4, #0]
 8016718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801671a:	bf01      	itttt	eq
 801671c:	f10d 090e 	addeq.w	r9, sp, #14
 8016720:	f10d 0606 	addeq.w	r6, sp, #6
 8016724:	ad03      	addeq	r5, sp, #12
 8016726:	f10d 0808 	addeq.w	r8, sp, #8
 801672a:	bf1f      	itttt	ne
 801672c:	f10d 0906 	addne.w	r9, sp, #6
 8016730:	ae03      	addne	r6, sp, #12
 8016732:	f10d 050e 	addne.w	r5, sp, #14
 8016736:	f10d 080a 	addne.w	r8, sp, #10
 801673a:	4798      	blx	r3
 801673c:	f9b5 2000 	ldrsh.w	r2, [r5]
 8016740:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8016744:	2a00      	cmp	r2, #0
 8016746:	d056      	beq.n	80167f6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8016748:	4293      	cmp	r3, r2
 801674a:	bfa8      	it	ge
 801674c:	4613      	movge	r3, r2
 801674e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016752:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8016756:	2f00      	cmp	r7, #0
 8016758:	dd3f      	ble.n	80167da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xe6>
 801675a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801675e:	f8bd e014 	ldrh.w	lr, [sp, #20]
 8016762:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8016766:	4486      	add	lr, r0
 8016768:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801676c:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016770:	fa0f fe8e 	sxth.w	lr, lr
 8016774:	f9b9 1000 	ldrsh.w	r1, [r9]
 8016778:	f8ad 2018 	strh.w	r2, [sp, #24]
 801677c:	4572      	cmp	r2, lr
 801677e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016782:	f8ad c01c 	strh.w	ip, [sp, #28]
 8016786:	f8ad 101e 	strh.w	r1, [sp, #30]
 801678a:	da15      	bge.n	80167b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc4>
 801678c:	4462      	add	r2, ip
 801678e:	b212      	sxth	r2, r2
 8016790:	4290      	cmp	r0, r2
 8016792:	da11      	bge.n	80167b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc4>
 8016794:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016798:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801679c:	4402      	add	r2, r0
 801679e:	b212      	sxth	r2, r2
 80167a0:	4293      	cmp	r3, r2
 80167a2:	da09      	bge.n	80167b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc4>
 80167a4:	440b      	add	r3, r1
 80167a6:	b21b      	sxth	r3, r3
 80167a8:	4298      	cmp	r0, r3
 80167aa:	da05      	bge.n	80167b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc4>
 80167ac:	6823      	ldr	r3, [r4, #0]
 80167ae:	a906      	add	r1, sp, #24
 80167b0:	4620      	mov	r0, r4
 80167b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167b4:	4798      	blx	r3
 80167b6:	b150      	cbz	r0, 80167ce <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 80167b8:	f1ba 0f00 	cmp.w	sl, #0
 80167bc:	d010      	beq.n	80167e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80167be:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 80167c2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80167c6:	429a      	cmp	r2, r3
 80167c8:	bf08      	it	eq
 80167ca:	85a7      	strheq	r7, [r4, #44]	@ 0x2c
 80167cc:	e008      	b.n	80167e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80167ce:	107f      	asrs	r7, r7, #1
 80167d0:	f04f 0a01 	mov.w	sl, #1
 80167d4:	f8ad 7006 	strh.w	r7, [sp, #6]
 80167d8:	e7bb      	b.n	8016752 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80167da:	d1ed      	bne.n	80167b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc4>
 80167dc:	f8ad b006 	strh.w	fp, [sp, #6]
 80167e0:	f8b8 2000 	ldrh.w	r2, [r8]
 80167e4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80167e8:	440a      	add	r2, r1
 80167ea:	f8a8 2000 	strh.w	r2, [r8]
 80167ee:	882b      	ldrh	r3, [r5, #0]
 80167f0:	1a5b      	subs	r3, r3, r1
 80167f2:	802b      	strh	r3, [r5, #0]
 80167f4:	e7a2      	b.n	801673c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80167f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80167fa:	4293      	cmp	r3, r2
 80167fc:	d102      	bne.n	8016804 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x110>
 80167fe:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8016802:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8016804:	b009      	add	sp, #36	@ 0x24
 8016806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801680a:	bf00      	nop
 801680c:	20024e2c 	.word	0x20024e2c

08016810 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016810:	2200      	movs	r2, #0
 8016812:	2101      	movs	r1, #1
 8016814:	8082      	strh	r2, [r0, #4]
 8016816:	80c2      	strh	r2, [r0, #6]
 8016818:	8102      	strh	r2, [r0, #8]
 801681a:	8142      	strh	r2, [r0, #10]
 801681c:	8182      	strh	r2, [r0, #12]
 801681e:	81c2      	strh	r2, [r0, #14]
 8016820:	8202      	strh	r2, [r0, #16]
 8016822:	8242      	strh	r2, [r0, #18]
 8016824:	6142      	str	r2, [r0, #20]
 8016826:	6182      	str	r2, [r0, #24]
 8016828:	61c2      	str	r2, [r0, #28]
 801682a:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801682e:	6282      	str	r2, [r0, #40]	@ 0x28
 8016830:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016834:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8016838:	8582      	strh	r2, [r0, #44]	@ 0x2c
 801683a:	22ff      	movs	r2, #255	@ 0xff
 801683c:	4902      	ldr	r1, [pc, #8]	@ (8016848 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801683e:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 8016842:	6001      	str	r1, [r0, #0]
 8016844:	4770      	bx	lr
 8016846:	bf00      	nop
 8016848:	08025bec 	.word	0x08025bec

0801684c <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801684c:	4770      	bx	lr

0801684e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801684e:	b570      	push	{r4, r5, r6, lr}
 8016850:	790b      	ldrb	r3, [r1, #4]
 8016852:	4604      	mov	r4, r0
 8016854:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8016858:	460e      	mov	r6, r1
 801685a:	2b00      	cmp	r3, #0
 801685c:	bf0c      	ite	eq
 801685e:	2301      	moveq	r3, #1
 8016860:	2300      	movne	r3, #0
 8016862:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8016866:	d110      	bne.n	801688a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8016868:	b185      	cbz	r5, 801688c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801686a:	7933      	ldrb	r3, [r6, #4]
 801686c:	2b01      	cmp	r3, #1
 801686e:	d113      	bne.n	8016898 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8016870:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016872:	b188      	cbz	r0, 8016898 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8016874:	6803      	ldr	r3, [r0, #0]
 8016876:	68db      	ldr	r3, [r3, #12]
 8016878:	4798      	blx	r3
 801687a:	b168      	cbz	r0, 8016898 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801687c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801687e:	4621      	mov	r1, r4
 8016880:	6803      	ldr	r3, [r0, #0]
 8016882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016886:	689b      	ldr	r3, [r3, #8]
 8016888:	4718      	bx	r3
 801688a:	b12d      	cbz	r5, 8016898 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801688c:	6823      	ldr	r3, [r4, #0]
 801688e:	4620      	mov	r0, r4
 8016890:	695b      	ldr	r3, [r3, #20]
 8016892:	4798      	blx	r3
 8016894:	2d00      	cmp	r5, #0
 8016896:	d1e8      	bne.n	801686a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8016898:	bd70      	pop	{r4, r5, r6, pc}

0801689a <_ZNK8touchgfx12ToggleButton7getTypeEv>:
 801689a:	2010      	movs	r0, #16
 801689c:	4770      	bx	lr

0801689e <_ZN8touchgfx12ToggleButtonD1Ev>:
 801689e:	4770      	bx	lr

080168a0 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 80168a0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80168a4:	b113      	cbz	r3, 80168ac <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0xc>
 80168a6:	790b      	ldrb	r3, [r1, #4]
 80168a8:	2b01      	cmp	r3, #1
 80168aa:	d001      	beq.n	80168b0 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x10>
 80168ac:	f7ff bfcf 	b.w	801684e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>
 80168b0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80168b2:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 80168b4:	8603      	strh	r3, [r0, #48]	@ 0x30
 80168b6:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 80168b8:	e7f8      	b.n	80168ac <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0xc>

080168ba <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 80168ba:	8813      	ldrh	r3, [r2, #0]
 80168bc:	8683      	strh	r3, [r0, #52]	@ 0x34
 80168be:	f000 bc3f 	b.w	8017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

080168c2 <_ZN8touchgfx12ToggleButtonD0Ev>:
 80168c2:	b510      	push	{r4, lr}
 80168c4:	4604      	mov	r4, r0
 80168c6:	2138      	movs	r1, #56	@ 0x38
 80168c8:	f008 f92d 	bl	801eb26 <_ZdlPvj>
 80168cc:	4620      	mov	r0, r4
 80168ce:	bd10      	pop	{r4, pc}

080168d0 <_ZN8touchgfx12ToggleButtonC1Ev>:
 80168d0:	2200      	movs	r2, #0
 80168d2:	2101      	movs	r1, #1
 80168d4:	8082      	strh	r2, [r0, #4]
 80168d6:	80c2      	strh	r2, [r0, #6]
 80168d8:	8102      	strh	r2, [r0, #8]
 80168da:	8142      	strh	r2, [r0, #10]
 80168dc:	8182      	strh	r2, [r0, #12]
 80168de:	81c2      	strh	r2, [r0, #14]
 80168e0:	8202      	strh	r2, [r0, #16]
 80168e2:	8242      	strh	r2, [r0, #18]
 80168e4:	6142      	str	r2, [r0, #20]
 80168e6:	6182      	str	r2, [r0, #24]
 80168e8:	61c2      	str	r2, [r0, #28]
 80168ea:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80168ee:	6282      	str	r2, [r0, #40]	@ 0x28
 80168f0:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 80168f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168f8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80168fc:	4903      	ldr	r1, [pc, #12]	@ (801690c <_ZN8touchgfx12ToggleButtonC1Ev+0x3c>)
 80168fe:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 8016900:	8602      	strh	r2, [r0, #48]	@ 0x30
 8016902:	f880 2032 	strb.w	r2, [r0, #50]	@ 0x32
 8016906:	6001      	str	r1, [r0, #0]
 8016908:	8682      	strh	r2, [r0, #52]	@ 0x34
 801690a:	4770      	bx	lr
 801690c:	08025cc0 	.word	0x08025cc0

08016910 <_ZN8touchgfx12ToggleButton10forceStateEb>:
 8016910:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8016912:	b129      	cbz	r1, 8016920 <_ZN8touchgfx12ToggleButton10forceStateEb+0x10>
 8016914:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 8016916:	4293      	cmp	r3, r2
 8016918:	d007      	beq.n	801692a <_ZN8touchgfx12ToggleButton10forceStateEb+0x1a>
 801691a:	8602      	strh	r2, [r0, #48]	@ 0x30
 801691c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 801691e:	4770      	bx	lr
 8016920:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8016922:	429a      	cmp	r2, r3
 8016924:	bf1c      	itt	ne
 8016926:	85c2      	strhne	r2, [r0, #46]	@ 0x2e
 8016928:	8603      	strhne	r3, [r0, #48]	@ 0x30
 801692a:	4770      	bx	lr

0801692c <_ZNK8touchgfx14SnapshotWidget7getTypeEv>:
 801692c:	200c      	movs	r0, #12
 801692e:	4770      	bx	lr

08016930 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 8016930:	4770      	bx	lr
	...

08016934 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8016934:	4b06      	ldr	r3, [pc, #24]	@ (8016950 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv+0x1c>)
 8016936:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801693a:	b510      	push	{r4, lr}
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	4604      	mov	r4, r0
 8016940:	6898      	ldr	r0, [r3, #8]
 8016942:	1d21      	adds	r1, r4, #4
 8016944:	6803      	ldr	r3, [r0, #0]
 8016946:	699b      	ldr	r3, [r3, #24]
 8016948:	4798      	blx	r3
 801694a:	62a0      	str	r0, [r4, #40]	@ 0x28
 801694c:	bd10      	pop	{r4, pc}
 801694e:	bf00      	nop
 8016950:	20024e34 	.word	0x20024e34

08016954 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8016954:	4b05      	ldr	r3, [pc, #20]	@ (801696c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt+0x18>)
 8016956:	460a      	mov	r2, r1
 8016958:	b510      	push	{r4, lr}
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	4604      	mov	r4, r0
 801695e:	6898      	ldr	r0, [r3, #8]
 8016960:	1d21      	adds	r1, r4, #4
 8016962:	6803      	ldr	r3, [r0, #0]
 8016964:	699b      	ldr	r3, [r3, #24]
 8016966:	4798      	blx	r3
 8016968:	62a0      	str	r0, [r4, #40]	@ 0x28
 801696a:	bd10      	pop	{r4, pc}
 801696c:	20024e34 	.word	0x20024e34

08016970 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8016970:	b510      	push	{r4, lr}
 8016972:	4604      	mov	r4, r0
 8016974:	2130      	movs	r1, #48	@ 0x30
 8016976:	f008 f8d6 	bl	801eb26 <_ZdlPvj>
 801697a:	4620      	mov	r0, r4
 801697c:	bd10      	pop	{r4, pc}
	...

08016980 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8016980:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016982:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8016984:	4604      	mov	r4, r0
 8016986:	460e      	mov	r6, r1
 8016988:	b1fb      	cbz	r3, 80169ca <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x4a>
 801698a:	2500      	movs	r5, #0
 801698c:	6803      	ldr	r3, [r0, #0]
 801698e:	a902      	add	r1, sp, #8
 8016990:	f8ad 5008 	strh.w	r5, [sp, #8]
 8016994:	f8ad 500a 	strh.w	r5, [sp, #10]
 8016998:	f8ad 500c 	strh.w	r5, [sp, #12]
 801699c:	f8ad 500e 	strh.w	r5, [sp, #14]
 80169a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169a2:	4798      	blx	r3
 80169a4:	8923      	ldrh	r3, [r4, #8]
 80169a6:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80169aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80169ae:	8963      	ldrh	r3, [r4, #10]
 80169b0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80169b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80169b6:	4b06      	ldr	r3, [pc, #24]	@ (80169d0 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x50>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	6898      	ldr	r0, [r3, #8]
 80169bc:	6803      	ldr	r3, [r0, #0]
 80169be:	9200      	str	r2, [sp, #0]
 80169c0:	aa02      	add	r2, sp, #8
 80169c2:	9501      	str	r5, [sp, #4]
 80169c4:	691d      	ldr	r5, [r3, #16]
 80169c6:	4633      	mov	r3, r6
 80169c8:	47a8      	blx	r5
 80169ca:	b004      	add	sp, #16
 80169cc:	bd70      	pop	{r4, r5, r6, pc}
 80169ce:	bf00      	nop
 80169d0:	20024e34 	.word	0x20024e34

080169d4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80169d4:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80169d8:	2bff      	cmp	r3, #255	@ 0xff
 80169da:	b510      	push	{r4, lr}
 80169dc:	d005      	beq.n	80169ea <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x16>
 80169de:	2300      	movs	r3, #0
 80169e0:	8003      	strh	r3, [r0, #0]
 80169e2:	8043      	strh	r3, [r0, #2]
 80169e4:	8083      	strh	r3, [r0, #4]
 80169e6:	80c3      	strh	r3, [r0, #6]
 80169e8:	bd10      	pop	{r4, pc}
 80169ea:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d0f6      	beq.n	80169de <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0xa>
 80169f0:	2300      	movs	r3, #0
 80169f2:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80169f6:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 80169fa:	8003      	strh	r3, [r0, #0]
 80169fc:	8043      	strh	r3, [r0, #2]
 80169fe:	8084      	strh	r4, [r0, #4]
 8016a00:	80c2      	strh	r2, [r0, #6]
 8016a02:	bd10      	pop	{r4, pc}

08016a04 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8016a04:	2200      	movs	r2, #0
 8016a06:	2101      	movs	r1, #1
 8016a08:	8082      	strh	r2, [r0, #4]
 8016a0a:	80c2      	strh	r2, [r0, #6]
 8016a0c:	8102      	strh	r2, [r0, #8]
 8016a0e:	8142      	strh	r2, [r0, #10]
 8016a10:	8182      	strh	r2, [r0, #12]
 8016a12:	81c2      	strh	r2, [r0, #14]
 8016a14:	8202      	strh	r2, [r0, #16]
 8016a16:	8242      	strh	r2, [r0, #18]
 8016a18:	6142      	str	r2, [r0, #20]
 8016a1a:	6182      	str	r2, [r0, #24]
 8016a1c:	61c2      	str	r2, [r0, #28]
 8016a1e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016a22:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8016a26:	6282      	str	r2, [r0, #40]	@ 0x28
 8016a28:	22ff      	movs	r2, #255	@ 0xff
 8016a2a:	4902      	ldr	r1, [pc, #8]	@ (8016a34 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x30>)
 8016a2c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8016a30:	6001      	str	r1, [r0, #0]
 8016a32:	4770      	bx	lr
 8016a34:	08025d34 	.word	0x08025d34

08016a38 <_ZN8touchgfx13ScalableImage8setAlphaEh>:
 8016a38:	f880 102a 	strb.w	r1, [r0, #42]	@ 0x2a
 8016a3c:	4770      	bx	lr

08016a3e <_ZNK8touchgfx13ScalableImage8getAlphaEv>:
 8016a3e:	f890 002a 	ldrb.w	r0, [r0, #42]	@ 0x2a
 8016a42:	4770      	bx	lr

08016a44 <_ZNK8touchgfx13ScalableImage7getTypeEv>:
 8016a44:	200b      	movs	r0, #11
 8016a46:	4770      	bx	lr

08016a48 <_ZN8touchgfx13ScalableImageD1Ev>:
 8016a48:	4770      	bx	lr

08016a4a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 8016a4a:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8016a4e:	4770      	bx	lr

08016a50 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8016a50:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8016a54:	4770      	bx	lr

08016a56 <_ZN8touchgfx13ScalableImageD0Ev>:
 8016a56:	b510      	push	{r4, lr}
 8016a58:	4604      	mov	r4, r0
 8016a5a:	212c      	movs	r1, #44	@ 0x2c
 8016a5c:	f008 f863 	bl	801eb26 <_ZdlPvj>
 8016a60:	4620      	mov	r0, r4
 8016a62:	bd10      	pop	{r4, pc}

08016a64 <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>:
 8016a64:	b570      	push	{r4, r5, r6, lr}
 8016a66:	4605      	mov	r5, r0
 8016a68:	880b      	ldrh	r3, [r1, #0]
 8016a6a:	4604      	mov	r4, r0
 8016a6c:	8503      	strh	r3, [r0, #40]	@ 0x28
 8016a6e:	f855 3b28 	ldr.w	r3, [r5], #40
 8016a72:	4628      	mov	r0, r5
 8016a74:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8016a76:	f005 ff29 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016a7a:	b201      	sxth	r1, r0
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	47b0      	blx	r6
 8016a80:	6823      	ldr	r3, [r4, #0]
 8016a82:	4628      	mov	r0, r5
 8016a84:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 8016a86:	f005 ff59 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016a8a:	b201      	sxth	r1, r0
 8016a8c:	4620      	mov	r0, r4
 8016a8e:	4633      	mov	r3, r6
 8016a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a94:	4718      	bx	r3

08016a96 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8016a96:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016a98:	f891 302a 	ldrb.w	r3, [r1, #42]	@ 0x2a
 8016a9c:	4604      	mov	r4, r0
 8016a9e:	2bff      	cmp	r3, #255	@ 0xff
 8016aa0:	d005      	beq.n	8016aae <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x18>
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	8023      	strh	r3, [r4, #0]
 8016aa6:	8063      	strh	r3, [r4, #2]
 8016aa8:	80a3      	strh	r3, [r4, #4]
 8016aaa:	80e3      	strh	r3, [r4, #6]
 8016aac:	e01b      	b.n	8016ae6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x50>
 8016aae:	f101 0528 	add.w	r5, r1, #40	@ 0x28
 8016ab2:	4668      	mov	r0, sp
 8016ab4:	4629      	mov	r1, r5
 8016ab6:	f005 ff79 	bl	801c9ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016aba:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8016abe:	4628      	mov	r0, r5
 8016ac0:	f005 ff04 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016ac4:	4286      	cmp	r6, r0
 8016ac6:	d1ec      	bne.n	8016aa2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 8016ac8:	4629      	mov	r1, r5
 8016aca:	a802      	add	r0, sp, #8
 8016acc:	f005 ff6e 	bl	801c9ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016ad0:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016ad4:	4628      	mov	r0, r5
 8016ad6:	f005 ff31 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016ada:	4286      	cmp	r6, r0
 8016adc:	d1e1      	bne.n	8016aa2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 8016ade:	4629      	mov	r1, r5
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	f005 ff63 	bl	801c9ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	b004      	add	sp, #16
 8016aea:	bd70      	pop	{r4, r5, r6, pc}

08016aec <_ZN8touchgfx13ScalableImageC1Ev>:
 8016aec:	2200      	movs	r2, #0
 8016aee:	490d      	ldr	r1, [pc, #52]	@ (8016b24 <_ZN8touchgfx13ScalableImageC1Ev+0x38>)
 8016af0:	8082      	strh	r2, [r0, #4]
 8016af2:	80c2      	strh	r2, [r0, #6]
 8016af4:	8102      	strh	r2, [r0, #8]
 8016af6:	8142      	strh	r2, [r0, #10]
 8016af8:	8182      	strh	r2, [r0, #12]
 8016afa:	81c2      	strh	r2, [r0, #14]
 8016afc:	8202      	strh	r2, [r0, #16]
 8016afe:	8242      	strh	r2, [r0, #18]
 8016b00:	6142      	str	r2, [r0, #20]
 8016b02:	6182      	str	r2, [r0, #24]
 8016b04:	61c2      	str	r2, [r0, #28]
 8016b06:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016b0a:	2201      	movs	r2, #1
 8016b0c:	6001      	str	r1, [r0, #0]
 8016b0e:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8016b12:	f880 2026 	strb.w	r2, [r0, #38]	@ 0x26
 8016b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b1a:	8502      	strh	r2, [r0, #40]	@ 0x28
 8016b1c:	f880 202a 	strb.w	r2, [r0, #42]	@ 0x2a
 8016b20:	4770      	bx	lr
 8016b22:	bf00      	nop
 8016b24:	08025da8 	.word	0x08025da8

08016b28 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8016b28:	f890 3026 	ldrb.w	r3, [r0, #38]	@ 0x26
 8016b2c:	3028      	adds	r0, #40	@ 0x28
 8016b2e:	b90b      	cbnz	r3, 8016b34 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xc>
 8016b30:	f003 bcee 	b.w	801a510 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8016b34:	f003 bcfc 	b.w	801a530 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>

08016b38 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8016b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	b0ad      	sub	sp, #180	@ 0xb4
 8016b40:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8016b44:	4698      	mov	r8, r3
 8016b46:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016b50:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8016b54:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 8016b58:	8888      	ldrh	r0, [r1, #4]
 8016b5a:	9207      	str	r2, [sp, #28]
 8016b5c:	aa36      	add	r2, sp, #216	@ 0xd8
 8016b5e:	4428      	add	r0, r5
 8016b60:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8016b62:	b280      	uxth	r0, r0
 8016b64:	fa0f fc80 	sxth.w	ip, r0
 8016b68:	f1bc 0f00 	cmp.w	ip, #0
 8016b6c:	e892 0604 	ldmia.w	r2, {r2, r9, sl}
 8016b70:	f340 80f0 	ble.w	8016d54 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>
 8016b74:	42af      	cmp	r7, r5
 8016b76:	f340 80ed 	ble.w	8016d54 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>
 8016b7a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016b7e:	88c9      	ldrh	r1, [r1, #6]
 8016b80:	4431      	add	r1, r6
 8016b82:	b289      	uxth	r1, r1
 8016b84:	fa0f fb81 	sxth.w	fp, r1
 8016b88:	f1bb 0f00 	cmp.w	fp, #0
 8016b8c:	f340 80e2 	ble.w	8016d54 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>
 8016b90:	45b6      	cmp	lr, r6
 8016b92:	f340 80df 	ble.w	8016d54 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>
 8016b96:	4567      	cmp	r7, ip
 8016b98:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8016b9c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8016ba0:	da00      	bge.n	8016ba4 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x6c>
 8016ba2:	b2b8      	uxth	r0, r7
 8016ba4:	45de      	cmp	lr, fp
 8016ba6:	eba0 0005 	sub.w	r0, r0, r5
 8016baa:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8016bae:	bfb8      	it	lt
 8016bb0:	fa1f f18e 	uxthlt.w	r1, lr
 8016bb4:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8016bb8:	f8ad 6042 	strh.w	r6, [sp, #66]	@ 0x42
 8016bbc:	1b89      	subs	r1, r1, r6
 8016bbe:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 8016bc2:	ae10      	add	r6, sp, #64	@ 0x40
 8016bc4:	ad12      	add	r5, sp, #72	@ 0x48
 8016bc6:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 8016bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bcc:	9208      	str	r2, [sp, #32]
 8016bce:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8016bd6:	6821      	ldr	r1, [r4, #0]
 8016bd8:	4620      	mov	r0, r4
 8016bda:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 8016bdc:	4629      	mov	r1, r5
 8016bde:	47b8      	blx	r7
 8016be0:	4621      	mov	r1, r4
 8016be2:	4658      	mov	r0, fp
 8016be4:	1d27      	adds	r7, r4, #4
 8016be6:	f003 fc7a 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016bea:	4658      	mov	r0, fp
 8016bec:	f002 fe8c 	bl	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016bf0:	4639      	mov	r1, r7
 8016bf2:	4630      	mov	r0, r6
 8016bf4:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 8016bf8:	f002 fe6e 	bl	80198d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016bfc:	4628      	mov	r0, r5
 8016bfe:	f002 fe83 	bl	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016c02:	4630      	mov	r0, r6
 8016c04:	f005 ff60 	bl	801cac8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016c08:	9006      	str	r0, [sp, #24]
 8016c0a:	2800      	cmp	r0, #0
 8016c0c:	f000 809f 	beq.w	8016d4e <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 8016c10:	f8d8 1000 	ldr.w	r1, [r8]
 8016c14:	a80a      	add	r0, sp, #40	@ 0x28
 8016c16:	9a08      	ldr	r2, [sp, #32]
 8016c18:	910a      	str	r1, [sp, #40]	@ 0x28
 8016c1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016c1e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016c20:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8016c24:	910c      	str	r1, [sp, #48]	@ 0x30
 8016c26:	6811      	ldr	r1, [r2, #0]
 8016c28:	910d      	str	r1, [sp, #52]	@ 0x34
 8016c2a:	6851      	ldr	r1, [r2, #4]
 8016c2c:	6892      	ldr	r2, [r2, #8]
 8016c2e:	910e      	str	r1, [sp, #56]	@ 0x38
 8016c30:	a90d      	add	r1, sp, #52	@ 0x34
 8016c32:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016c34:	463a      	mov	r2, r7
 8016c36:	f002 fe33 	bl	80198a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8016c3a:	463a      	mov	r2, r7
 8016c3c:	a90e      	add	r1, sp, #56	@ 0x38
 8016c3e:	a80b      	add	r0, sp, #44	@ 0x2c
 8016c40:	f002 fe2e 	bl	80198a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8016c44:	463a      	mov	r2, r7
 8016c46:	a90f      	add	r1, sp, #60	@ 0x3c
 8016c48:	a80c      	add	r0, sp, #48	@ 0x30
 8016c4a:	f002 fe29 	bl	80198a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8016c4e:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8016c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c54:	eeb0 7a67 	vmov.f32	s14, s15
 8016c58:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8016c5c:	edd3 5a00 	vldr	s11, [r3]
 8016c60:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8016c64:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8016c68:	689b      	ldr	r3, [r3, #8]
 8016c6a:	edd9 4a00 	vldr	s9, [r9]
 8016c6e:	ed9a 5a00 	vldr	s10, [sl]
 8016c72:	ee17 7a10 	vmov	r7, s14
 8016c76:	eeb0 7a67 	vmov.f32	s14, s15
 8016c7a:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8016c7e:	ed99 6a01 	vldr	s12, [r9, #4]
 8016c82:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8016c86:	edda 6a01 	vldr	s13, [sl, #4]
 8016c8a:	f8d9 c008 	ldr.w	ip, [r9, #8]
 8016c8e:	f8da e008 	ldr.w	lr, [sl, #8]
 8016c92:	ee17 0a10 	vmov	r0, s14
 8016c96:	eeb0 7a67 	vmov.f32	s14, s15
 8016c9a:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8016c9e:	932b      	str	r3, [sp, #172]	@ 0xac
 8016ca0:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8016ca4:	9b07      	ldr	r3, [sp, #28]
 8016ca6:	edcd 4a1f 	vstr	s9, [sp, #124]	@ 0x7c
 8016caa:	ed8d 5a20 	vstr	s10, [sp, #128]	@ 0x80
 8016cae:	ee17 1a10 	vmov	r1, s14
 8016cb2:	eeb0 7a67 	vmov.f32	s14, s15
 8016cb6:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8016cba:	9123      	str	r1, [sp, #140]	@ 0x8c
 8016cbc:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8016cc0:	edcd 5a21 	vstr	s11, [sp, #132]	@ 0x84
 8016cc4:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8016cc8:	ed8d 6a24 	vstr	s12, [sp, #144]	@ 0x90
 8016ccc:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8016cd0:	ee17 2a10 	vmov	r2, s14
 8016cd4:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8016cd8:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8016cdc:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8016ce0:	9227      	str	r2, [sp, #156]	@ 0x9c
 8016ce2:	f8cd c0a4 	str.w	ip, [sp, #164]	@ 0xa4
 8016ce6:	f8cd e0a8 	str.w	lr, [sp, #168]	@ 0xa8
 8016cea:	ed8d 7a1d 	vstr	s14, [sp, #116]	@ 0x74
 8016cee:	9022      	str	r0, [sp, #136]	@ 0x88
 8016cf0:	4630      	mov	r0, r6
 8016cf2:	971e      	str	r7, [sp, #120]	@ 0x78
 8016cf4:	f8cd 8098 	str.w	r8, [sp, #152]	@ 0x98
 8016cf8:	9316      	str	r3, [sp, #88]	@ 0x58
 8016cfa:	4b19      	ldr	r3, [pc, #100]	@ (8016d60 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x228>)
 8016cfc:	881b      	ldrh	r3, [r3, #0]
 8016cfe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8016d00:	9b06      	ldr	r3, [sp, #24]
 8016d02:	9318      	str	r3, [sp, #96]	@ 0x60
 8016d04:	f005 ff10 	bl	801cb28 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 8016d08:	9019      	str	r0, [sp, #100]	@ 0x64
 8016d0a:	4630      	mov	r0, r6
 8016d0c:	f005 fdde 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016d10:	901a      	str	r0, [sp, #104]	@ 0x68
 8016d12:	4630      	mov	r0, r6
 8016d14:	f005 fe12 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016d18:	901b      	str	r0, [sp, #108]	@ 0x6c
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	f005 fdd6 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016d20:	4b10      	ldr	r3, [pc, #64]	@ (8016d64 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x22c>)
 8016d22:	901c      	str	r0, [sp, #112]	@ 0x70
 8016d24:	4620      	mov	r0, r4
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	689e      	ldr	r6, [r3, #8]
 8016d2a:	f7ff fefd 	bl	8016b28 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8016d2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016d32:	9002      	str	r0, [sp, #8]
 8016d34:	9501      	str	r5, [sp, #4]
 8016d36:	aa1d      	add	r2, sp, #116	@ 0x74
 8016d38:	9304      	str	r3, [sp, #16]
 8016d3a:	a916      	add	r1, sp, #88	@ 0x58
 8016d3c:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8016d40:	4630      	mov	r0, r6
 8016d42:	f8cd b000 	str.w	fp, [sp]
 8016d46:	9303      	str	r3, [sp, #12]
 8016d48:	ab18      	add	r3, sp, #96	@ 0x60
 8016d4a:	f002 fb81 	bl	8019450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8016d4e:	b02d      	add	sp, #180	@ 0xb4
 8016d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d54:	2100      	movs	r1, #0
 8016d56:	f8ad 1044 	strh.w	r1, [sp, #68]	@ 0x44
 8016d5a:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 8016d5e:	e730      	b.n	8016bc2 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x8a>
 8016d60:	20024e2e 	.word	0x20024e2e
 8016d64:	20024e34 	.word	0x20024e34

08016d68 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8016d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d6c:	ed2d 8b0a 	vpush	{d8-d12}
 8016d70:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8016d74:	b095      	sub	sp, #84	@ 0x54
 8016d76:	4680      	mov	r8, r0
 8016d78:	4689      	mov	r9, r1
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	f000 808a 	beq.w	8016e94 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x12c>
 8016d80:	4c4b      	ldr	r4, [pc, #300]	@ (8016eb0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x148>)
 8016d82:	f108 0528 	add.w	r5, r8, #40	@ 0x28
 8016d86:	ed9f 8a4b 	vldr	s16, [pc, #300]	@ 8016eb4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x14c>
 8016d8a:	6820      	ldr	r0, [r4, #0]
 8016d8c:	46a3      	mov	fp, r4
 8016d8e:	6803      	ldr	r3, [r0, #0]
 8016d90:	6a1b      	ldr	r3, [r3, #32]
 8016d92:	4798      	blx	r3
 8016d94:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 8016d98:	4682      	mov	sl, r0
 8016d9a:	4628      	mov	r0, r5
 8016d9c:	ee09 3a90 	vmov	s19, r3
 8016da0:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
 8016da4:	ee09 3a10 	vmov	s18, r3
 8016da8:	4b43      	ldr	r3, [pc, #268]	@ (8016eb8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x150>)
 8016daa:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8016dae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016db0:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8016db4:	930c      	str	r3, [sp, #48]	@ 0x30
 8016db6:	930d      	str	r3, [sp, #52]	@ 0x34
 8016db8:	f005 fd88 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016dbc:	3801      	subs	r0, #1
 8016dbe:	ee79 9a88 	vadd.f32	s19, s19, s16
 8016dc2:	ee39 9a08 	vadd.f32	s18, s18, s16
 8016dc6:	ee07 0a90 	vmov	s15, r0
 8016dca:	4628      	mov	r0, r5
 8016dcc:	eeb8 aae7 	vcvt.f32.s32	s20, s15
 8016dd0:	f005 fdb4 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016dd4:	4b39      	ldr	r3, [pc, #228]	@ (8016ebc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x154>)
 8016dd6:	3801      	subs	r0, #1
 8016dd8:	781b      	ldrb	r3, [r3, #0]
 8016dda:	ee07 0a90 	vmov	s15, r0
 8016dde:	2b01      	cmp	r3, #1
 8016de0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8016de4:	d15b      	bne.n	8016e9e <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x136>
 8016de6:	eef0 aa4a 	vmov.f32	s21, s20
 8016dea:	eef0 ba68 	vmov.f32	s23, s17
 8016dee:	eeb0 ca68 	vmov.f32	s24, s17
 8016df2:	eeb0 ba4a 	vmov.f32	s22, s20
 8016df6:	eef0 8a48 	vmov.f32	s17, s16
 8016dfa:	eeb0 aa48 	vmov.f32	s20, s16
 8016dfe:	af11      	add	r7, sp, #68	@ 0x44
 8016e00:	ae0e      	add	r6, sp, #56	@ 0x38
 8016e02:	ad0b      	add	r5, sp, #44	@ 0x2c
 8016e04:	ac08      	add	r4, sp, #32
 8016e06:	ab05      	add	r3, sp, #20
 8016e08:	4652      	mov	r2, sl
 8016e0a:	4649      	mov	r1, r9
 8016e0c:	4640      	mov	r0, r8
 8016e0e:	9703      	str	r7, [sp, #12]
 8016e10:	9602      	str	r6, [sp, #8]
 8016e12:	9501      	str	r5, [sp, #4]
 8016e14:	9400      	str	r4, [sp, #0]
 8016e16:	ed8d 8a05 	vstr	s16, [sp, #20]
 8016e1a:	edcd 9a06 	vstr	s19, [sp, #24]
 8016e1e:	edcd 9a07 	vstr	s19, [sp, #28]
 8016e22:	ed8d 8a08 	vstr	s16, [sp, #32]
 8016e26:	ed8d 8a09 	vstr	s16, [sp, #36]	@ 0x24
 8016e2a:	ed8d 9a0a 	vstr	s18, [sp, #40]	@ 0x28
 8016e2e:	ed8d 8a0e 	vstr	s16, [sp, #56]	@ 0x38
 8016e32:	ed8d aa0f 	vstr	s20, [sp, #60]	@ 0x3c
 8016e36:	ed8d ca10 	vstr	s24, [sp, #64]	@ 0x40
 8016e3a:	ed8d ba11 	vstr	s22, [sp, #68]	@ 0x44
 8016e3e:	ed8d 8a12 	vstr	s16, [sp, #72]	@ 0x48
 8016e42:	edcd 8a13 	vstr	s17, [sp, #76]	@ 0x4c
 8016e46:	f7ff fe77 	bl	8016b38 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8016e4a:	ab05      	add	r3, sp, #20
 8016e4c:	4640      	mov	r0, r8
 8016e4e:	4652      	mov	r2, sl
 8016e50:	4649      	mov	r1, r9
 8016e52:	ed8d 8a05 	vstr	s16, [sp, #20]
 8016e56:	edcd 9a06 	vstr	s19, [sp, #24]
 8016e5a:	ed8d 8a07 	vstr	s16, [sp, #28]
 8016e5e:	ed8d 8a08 	vstr	s16, [sp, #32]
 8016e62:	ed8d 9a09 	vstr	s18, [sp, #36]	@ 0x24
 8016e66:	ed8d 9a0a 	vstr	s18, [sp, #40]	@ 0x28
 8016e6a:	ed8d 8a0e 	vstr	s16, [sp, #56]	@ 0x38
 8016e6e:	ed8d ca0f 	vstr	s24, [sp, #60]	@ 0x3c
 8016e72:	edcd ba10 	vstr	s23, [sp, #64]	@ 0x40
 8016e76:	ed8d ba11 	vstr	s22, [sp, #68]	@ 0x44
 8016e7a:	edcd 8a12 	vstr	s17, [sp, #72]	@ 0x48
 8016e7e:	edcd aa13 	vstr	s21, [sp, #76]	@ 0x4c
 8016e82:	e88d 00f0 	stmia.w	sp, {r4, r5, r6, r7}
 8016e86:	f7ff fe57 	bl	8016b38 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8016e8a:	f8db 0000 	ldr.w	r0, [fp]
 8016e8e:	6803      	ldr	r3, [r0, #0]
 8016e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e92:	4798      	blx	r3
 8016e94:	b015      	add	sp, #84	@ 0x54
 8016e96:	ecbd 8b0a 	vpop	{d8-d12}
 8016e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e9e:	eef0 aa68 	vmov.f32	s21, s17
 8016ea2:	eeb0 ca4a 	vmov.f32	s24, s20
 8016ea6:	eef0 ba48 	vmov.f32	s23, s16
 8016eaa:	eeb0 ba48 	vmov.f32	s22, s16
 8016eae:	e7a6      	b.n	8016dfe <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x96>
 8016eb0:	20024e34 	.word	0x20024e34
 8016eb4:	00000000 	.word	0x00000000
 8016eb8:	42c80000 	.word	0x42c80000
 8016ebc:	20024e2c 	.word	0x20024e2c

08016ec0 <_ZN8touchgfx8TextAreaD1Ev>:
 8016ec0:	4770      	bx	lr

08016ec2 <_ZN8touchgfx8TextAreaD0Ev>:
 8016ec2:	b510      	push	{r4, lr}
 8016ec4:	4604      	mov	r4, r0
 8016ec6:	2134      	movs	r1, #52	@ 0x34
 8016ec8:	f007 fe2d 	bl	801eb26 <_ZdlPvj>
 8016ecc:	4620      	mov	r0, r4
 8016ece:	bd10      	pop	{r4, pc}

08016ed0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
 8016ed0:	b510      	push	{r4, lr}
 8016ed2:	4604      	mov	r4, r0
 8016ed4:	f7eb fe9e 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016ed8:	4b04      	ldr	r3, [pc, #16]	@ (8016eec <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x1c>)
 8016eda:	8822      	ldrh	r2, [r4, #0]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016ee2:	7858      	ldrb	r0, [r3, #1]
 8016ee4:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8016ee8:	bd10      	pop	{r4, pc}
 8016eea:	bf00      	nop
 8016eec:	20024eb4 	.word	0x20024eb4

08016ef0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016ef0:	b570      	push	{r4, r5, r6, lr}
 8016ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016ef6:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	d014      	beq.n	8016f26 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>
 8016efc:	f100 0426 	add.w	r4, r0, #38	@ 0x26
 8016f00:	4620      	mov	r0, r4
 8016f02:	f7eb fea7 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8016f06:	4605      	mov	r5, r0
 8016f08:	4620      	mov	r0, r4
 8016f0a:	f7ff ffe1 	bl	8016ed0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016f0e:	4606      	mov	r6, r0
 8016f10:	4620      	mov	r0, r4
 8016f12:	f7eb fec7 	bl	8002ca4 <_ZNK8touchgfx9TypedText7getTextEv>
 8016f16:	682b      	ldr	r3, [r5, #0]
 8016f18:	4602      	mov	r2, r0
 8016f1a:	4631      	mov	r1, r6
 8016f1c:	4628      	mov	r0, r5
 8016f1e:	69db      	ldr	r3, [r3, #28]
 8016f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f24:	4718      	bx	r3
 8016f26:	2000      	movs	r0, #0
 8016f28:	bd70      	pop	{r4, r5, r6, pc}
	...

08016f2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f34:	8cc6      	ldrh	r6, [r0, #38]	@ 0x26
 8016f36:	b08b      	sub	sp, #44	@ 0x2c
 8016f38:	4604      	mov	r4, r0
 8016f3a:	429e      	cmp	r6, r3
 8016f3c:	460f      	mov	r7, r1
 8016f3e:	d045      	beq.n	8016fcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xa0>
 8016f40:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8016f44:	4628      	mov	r0, r5
 8016f46:	f7eb fe85 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8016f4a:	4680      	mov	r8, r0
 8016f4c:	2800      	cmp	r0, #0
 8016f4e:	d03d      	beq.n	8016fcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xa0>
 8016f50:	4628      	mov	r0, r5
 8016f52:	f894 902e 	ldrb.w	r9, [r4, #46]	@ 0x2e
 8016f56:	f7eb fe5d 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8016fd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xa8>)
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	f894 b030 	ldrb.w	fp, [r4, #48]	@ 0x30
 8016f68:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8016f6c:	785e      	ldrb	r6, [r3, #1]
 8016f6e:	f7ff ffaf 	bl	8016ed0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016f72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016f74:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8016f78:	f894 102f 	ldrb.w	r1, [r4, #47]	@ 0x2f
 8016f7c:	9307      	str	r3, [sp, #28]
 8016f7e:	4b16      	ldr	r3, [pc, #88]	@ (8016fd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>)
 8016f80:	f88d 6018 	strb.w	r6, [sp, #24]
 8016f84:	ae03      	add	r6, sp, #12
 8016f86:	f894 2031 	ldrb.w	r2, [r4, #49]	@ 0x31
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	f88d 1023 	strb.w	r1, [sp, #35]	@ 0x23
 8016f90:	4621      	mov	r1, r4
 8016f92:	f88d 0019 	strb.w	r0, [sp, #25]
 8016f96:	4630      	mov	r0, r6
 8016f98:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8016f9c:	f8cd 8014 	str.w	r8, [sp, #20]
 8016fa0:	f88d 9022 	strb.w	r9, [sp, #34]	@ 0x22
 8016fa4:	f8ad a020 	strh.w	sl, [sp, #32]
 8016fa8:	f88d b01a 	strb.w	fp, [sp, #26]
 8016fac:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8016fb0:	f003 fa95 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016fb4:	4628      	mov	r0, r5
 8016fb6:	f7eb fe75 	bl	8002ca4 <_ZNK8touchgfx9TypedText7getTextEv>
 8016fba:	ab05      	add	r3, sp, #20
 8016fbc:	9001      	str	r0, [sp, #4]
 8016fbe:	4640      	mov	r0, r8
 8016fc0:	9300      	str	r3, [sp, #0]
 8016fc2:	463b      	mov	r3, r7
 8016fc4:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016fc8:	f001 fe82 	bl	8018cd0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
 8016fcc:	b00b      	add	sp, #44	@ 0x2c
 8016fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fd2:	bf00      	nop
 8016fd4:	20024eb4 	.word	0x20024eb4
 8016fd8:	20024e34 	.word	0x20024e34

08016fdc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016fdc:	b570      	push	{r4, r5, r6, lr}
 8016fde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016fe2:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 8016fe4:	4604      	mov	r4, r0
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d021      	beq.n	801702e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8016fea:	6803      	ldr	r3, [r0, #0]
 8016fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fee:	4798      	blx	r3
 8016ff0:	6823      	ldr	r3, [r4, #0]
 8016ff2:	4605      	mov	r5, r0
 8016ff4:	4620      	mov	r0, r4
 8016ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ff8:	4798      	blx	r3
 8016ffa:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8016ffe:	4606      	mov	r6, r0
 8017000:	b22d      	sxth	r5, r5
 8017002:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017006:	6823      	ldr	r3, [r4, #0]
 8017008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801700a:	d109      	bne.n	8017020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801700c:	4629      	mov	r1, r5
 801700e:	4620      	mov	r0, r4
 8017010:	4798      	blx	r3
 8017012:	6823      	ldr	r3, [r4, #0]
 8017014:	4631      	mov	r1, r6
 8017016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017018:	4620      	mov	r0, r4
 801701a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801701e:	4718      	bx	r3
 8017020:	4601      	mov	r1, r0
 8017022:	4620      	mov	r0, r4
 8017024:	4798      	blx	r3
 8017026:	6823      	ldr	r3, [r4, #0]
 8017028:	4629      	mov	r1, r5
 801702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801702c:	e7f4      	b.n	8017018 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801702e:	bd70      	pop	{r4, r5, r6, pc}

08017030 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017030:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017034:	84c1      	strh	r1, [r0, #38]	@ 0x26
 8017036:	b922      	cbnz	r2, 8017042 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017038:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801703c:	b90b      	cbnz	r3, 8017042 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801703e:	f7ff bfcd 	b.w	8016fdc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017042:	4770      	bx	lr

08017044 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>:
 8017044:	b40e      	push	{r1, r2, r3}
 8017046:	b570      	push	{r4, r5, r6, lr}
 8017048:	b08b      	sub	sp, #44	@ 0x2c
 801704a:	4605      	mov	r5, r0
 801704c:	ab0f      	add	r3, sp, #60	@ 0x3c
 801704e:	f105 0626 	add.w	r6, r5, #38	@ 0x26
 8017052:	a804      	add	r0, sp, #16
 8017054:	f853 4b04 	ldr.w	r4, [r3], #4
 8017058:	9303      	str	r3, [sp, #12]
 801705a:	f004 fded 	bl	801bc38 <_ZN8touchgfx12TextProviderC1Ev>
 801705e:	9a03      	ldr	r2, [sp, #12]
 8017060:	4621      	mov	r1, r4
 8017062:	a804      	add	r0, sp, #16
 8017064:	f004 fdf1 	bl	801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 8017068:	4630      	mov	r0, r6
 801706a:	f7ff ff31 	bl	8016ed0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801706e:	4604      	mov	r4, r0
 8017070:	4630      	mov	r0, r6
 8017072:	f7eb fdef 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8017076:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801707a:	4622      	mov	r2, r4
 801707c:	f895 1031 	ldrb.w	r1, [r5, #49]	@ 0x31
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	4603      	mov	r3, r0
 8017084:	a804      	add	r0, sp, #16
 8017086:	f002 f848 	bl	801911a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801708a:	4604      	mov	r4, r0
 801708c:	4630      	mov	r0, r6
 801708e:	f7eb fde1 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8017092:	6803      	ldr	r3, [r0, #0]
 8017094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017096:	4798      	blx	r3
 8017098:	1e62      	subs	r2, r4, #1
 801709a:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 801709c:	fb14 f000 	smulbb	r0, r4, r0
 80170a0:	fb13 0002 	smlabb	r0, r3, r2, r0
 80170a4:	b200      	sxth	r0, r0
 80170a6:	b00b      	add	sp, #44	@ 0x2c
 80170a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170ac:	b003      	add	sp, #12
 80170ae:	4770      	bx	lr

080170b0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80170b0:	b510      	push	{r4, lr}
 80170b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80170b6:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 80170b8:	4604      	mov	r4, r0
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d008      	beq.n	80170d0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x20>
 80170be:	3026      	adds	r0, #38	@ 0x26
 80170c0:	f7eb fdf0 	bl	8002ca4 <_ZNK8touchgfx9TypedText7getTextEv>
 80170c4:	4601      	mov	r1, r0
 80170c6:	4620      	mov	r0, r4
 80170c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170cc:	f7ff bfba 	b.w	8017044 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>
 80170d0:	2000      	movs	r0, #0
 80170d2:	bd10      	pop	{r4, pc}

080170d4 <_ZN8touchgfx3BoxD1Ev>:
 80170d4:	4770      	bx	lr

080170d6 <_ZNK8touchgfx3Box7getTypeEv>:
 80170d6:	2004      	movs	r0, #4
 80170d8:	4770      	bx	lr

080170da <_ZNK8touchgfx3Box12getSolidRectEv>:
 80170da:	2300      	movs	r3, #0
 80170dc:	8003      	strh	r3, [r0, #0]
 80170de:	8043      	strh	r3, [r0, #2]
 80170e0:	8083      	strh	r3, [r0, #4]
 80170e2:	80c3      	strh	r3, [r0, #6]
 80170e4:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80170e8:	b91b      	cbnz	r3, 80170f2 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 80170ea:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80170ee:	2bff      	cmp	r3, #255	@ 0xff
 80170f0:	d103      	bne.n	80170fa <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 80170f2:	890b      	ldrh	r3, [r1, #8]
 80170f4:	8083      	strh	r3, [r0, #4]
 80170f6:	894b      	ldrh	r3, [r1, #10]
 80170f8:	80c3      	strh	r3, [r0, #6]
 80170fa:	4770      	bx	lr

080170fc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80170fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170fe:	4604      	mov	r4, r0
 8017100:	466b      	mov	r3, sp
 8017102:	6808      	ldr	r0, [r1, #0]
 8017104:	6849      	ldr	r1, [r1, #4]
 8017106:	c303      	stmia	r3!, {r0, r1}
 8017108:	6823      	ldr	r3, [r4, #0]
 801710a:	4669      	mov	r1, sp
 801710c:	4620      	mov	r0, r4
 801710e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017110:	4798      	blx	r3
 8017112:	4b06      	ldr	r3, [pc, #24]	@ (801712c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x30>)
 8017114:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017116:	4669      	mov	r1, sp
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	6898      	ldr	r0, [r3, #8]
 801711c:	6803      	ldr	r3, [r0, #0]
 801711e:	69dd      	ldr	r5, [r3, #28]
 8017120:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8017124:	47a8      	blx	r5
 8017126:	b003      	add	sp, #12
 8017128:	bd30      	pop	{r4, r5, pc}
 801712a:	bf00      	nop
 801712c:	20024e34 	.word	0x20024e34

08017130 <_ZN8touchgfx3BoxD0Ev>:
 8017130:	b510      	push	{r4, lr}
 8017132:	4604      	mov	r4, r0
 8017134:	2130      	movs	r1, #48	@ 0x30
 8017136:	f007 fcf6 	bl	801eb26 <_ZdlPvj>
 801713a:	4620      	mov	r0, r4
 801713c:	bd10      	pop	{r4, pc}

0801713e <_ZN8touchgfx6ButtonD1Ev>:
 801713e:	4770      	bx	lr

08017140 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8017140:	b538      	push	{r3, r4, r5, lr}
 8017142:	880b      	ldrh	r3, [r1, #0]
 8017144:	4605      	mov	r5, r0
 8017146:	4604      	mov	r4, r0
 8017148:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 801714a:	8813      	ldrh	r3, [r2, #0]
 801714c:	f825 3f30 	strh.w	r3, [r5, #48]!
 8017150:	4628      	mov	r0, r5
 8017152:	f005 fbbb 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017156:	8120      	strh	r0, [r4, #8]
 8017158:	4628      	mov	r0, r5
 801715a:	f005 fbef 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801715e:	8160      	strh	r0, [r4, #10]
 8017160:	bd38      	pop	{r3, r4, r5, pc}

08017162 <_ZN8touchgfx6ButtonD0Ev>:
 8017162:	b510      	push	{r4, lr}
 8017164:	4604      	mov	r4, r0
 8017166:	2134      	movs	r1, #52	@ 0x34
 8017168:	f007 fcdd 	bl	801eb26 <_ZdlPvj>
 801716c:	4620      	mov	r0, r4
 801716e:	bd10      	pop	{r4, pc}

08017170 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8017170:	b510      	push	{r4, lr}
 8017172:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8017176:	4604      	mov	r4, r0
 8017178:	2bff      	cmp	r3, #255	@ 0xff
 801717a:	d006      	beq.n	801718a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801717c:	2300      	movs	r3, #0
 801717e:	8003      	strh	r3, [r0, #0]
 8017180:	8043      	strh	r3, [r0, #2]
 8017182:	8083      	strh	r3, [r0, #4]
 8017184:	80c3      	strh	r3, [r0, #6]
 8017186:	4620      	mov	r0, r4
 8017188:	bd10      	pop	{r4, pc}
 801718a:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801718e:	b11b      	cbz	r3, 8017198 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8017190:	3130      	adds	r1, #48	@ 0x30
 8017192:	f005 fc0b 	bl	801c9ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017196:	e7f6      	b.n	8017186 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8017198:	312e      	adds	r1, #46	@ 0x2e
 801719a:	e7fa      	b.n	8017192 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801719c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801719c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171a0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80171a4:	b08b      	sub	sp, #44	@ 0x2c
 80171a6:	4606      	mov	r6, r0
 80171a8:	460f      	mov	r7, r1
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d03f      	beq.n	801722e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x92>
 80171ae:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80171b2:	881b      	ldrh	r3, [r3, #0]
 80171b4:	ad0a      	add	r5, sp, #40	@ 0x28
 80171b6:	f825 3d14 	strh.w	r3, [r5, #-20]!
 80171ba:	4628      	mov	r0, r5
 80171bc:	f005 fb86 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80171c0:	4680      	mov	r8, r0
 80171c2:	fa0f f980 	sxth.w	r9, r0
 80171c6:	4628      	mov	r0, r5
 80171c8:	f005 fbb8 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80171cc:	f9b7 1000 	ldrsh.w	r1, [r7]
 80171d0:	88bc      	ldrh	r4, [r7, #4]
 80171d2:	2300      	movs	r3, #0
 80171d4:	fa0f fe80 	sxth.w	lr, r0
 80171d8:	440c      	add	r4, r1
 80171da:	f8ad 3018 	strh.w	r3, [sp, #24]
 80171de:	f8ad 301a 	strh.w	r3, [sp, #26]
 80171e2:	b2a4      	uxth	r4, r4
 80171e4:	fa0f fc84 	sxth.w	ip, r4
 80171e8:	459c      	cmp	ip, r3
 80171ea:	dd52      	ble.n	8017292 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf6>
 80171ec:	4589      	cmp	r9, r1
 80171ee:	dd50      	ble.n	8017292 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf6>
 80171f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80171f4:	88fb      	ldrh	r3, [r7, #6]
 80171f6:	4413      	add	r3, r2
 80171f8:	b29b      	uxth	r3, r3
 80171fa:	b21f      	sxth	r7, r3
 80171fc:	2f00      	cmp	r7, #0
 80171fe:	dd48      	ble.n	8017292 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf6>
 8017200:	4596      	cmp	lr, r2
 8017202:	dd46      	ble.n	8017292 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf6>
 8017204:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8017208:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801720c:	45e1      	cmp	r9, ip
 801720e:	bfb8      	it	lt
 8017210:	4644      	movlt	r4, r8
 8017212:	45be      	cmp	lr, r7
 8017214:	bfb8      	it	lt
 8017216:	4603      	movlt	r3, r0
 8017218:	f8ad 1018 	strh.w	r1, [sp, #24]
 801721c:	1a64      	subs	r4, r4, r1
 801721e:	1a9b      	subs	r3, r3, r2
 8017220:	f8ad 201a 	strh.w	r2, [sp, #26]
 8017224:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017228:	f8ad 301e 	strh.w	r3, [sp, #30]
 801722c:	e036      	b.n	801729c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801722e:	f100 032e 	add.w	r3, r0, #46	@ 0x2e
 8017232:	e7be      	b.n	80171b2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x16>
 8017234:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017238:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801723c:	429a      	cmp	r2, r3
 801723e:	d025      	beq.n	801728c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 8017240:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017244:	b313      	cbz	r3, 801728c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 8017246:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801724a:	b1fb      	cbz	r3, 801728c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 801724c:	2300      	movs	r3, #0
 801724e:	a908      	add	r1, sp, #32
 8017250:	4630      	mov	r0, r6
 8017252:	2401      	movs	r4, #1
 8017254:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017258:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801725c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8017260:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8017264:	6833      	ldr	r3, [r6, #0]
 8017266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017268:	4798      	blx	r3
 801726a:	4b11      	ldr	r3, [pc, #68]	@ (80172b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 801726c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	6898      	ldr	r0, [r3, #8]
 8017274:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017278:	6801      	ldr	r1, [r0, #0]
 801727a:	9402      	str	r4, [sp, #8]
 801727c:	f896 4032 	ldrb.w	r4, [r6, #50]	@ 0x32
 8017280:	9401      	str	r4, [sp, #4]
 8017282:	ac06      	add	r4, sp, #24
 8017284:	9400      	str	r4, [sp, #0]
 8017286:	68cc      	ldr	r4, [r1, #12]
 8017288:	4629      	mov	r1, r5
 801728a:	47a0      	blx	r4
 801728c:	b00b      	add	sp, #44	@ 0x2c
 801728e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017292:	2300      	movs	r3, #0
 8017294:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017298:	f8ad 301e 	strh.w	r3, [sp, #30]
 801729c:	4b05      	ldr	r3, [pc, #20]	@ (80172b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d1c7      	bne.n	8017234 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x98>
 80172a4:	4b04      	ldr	r3, [pc, #16]	@ (80172b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x11c>)
 80172a6:	2195      	movs	r1, #149	@ 0x95
 80172a8:	4a04      	ldr	r2, [pc, #16]	@ (80172bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x120>)
 80172aa:	4805      	ldr	r0, [pc, #20]	@ (80172c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x124>)
 80172ac:	f008 fd62 	bl	801fd74 <__assert_func>
 80172b0:	20024e34 	.word	0x20024e34
 80172b4:	20024eec 	.word	0x20024eec
 80172b8:	08024948 	.word	0x08024948
 80172bc:	08025f7c 	.word	0x08025f7c
 80172c0:	080249e1 	.word	0x080249e1

080172c4 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>:
 80172c4:	b40e      	push	{r1, r2, r3}
 80172c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80172ca:	b570      	push	{r4, r5, r6, lr}
 80172cc:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 80172ce:	b08b      	sub	sp, #44	@ 0x2c
 80172d0:	4604      	mov	r4, r0
 80172d2:	429a      	cmp	r2, r3
 80172d4:	d035      	beq.n	8017342 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x7e>
 80172d6:	ab10      	add	r3, sp, #64	@ 0x40
 80172d8:	f104 0626 	add.w	r6, r4, #38	@ 0x26
 80172dc:	a804      	add	r0, sp, #16
 80172de:	9303      	str	r3, [sp, #12]
 80172e0:	f004 fcaa 	bl	801bc38 <_ZN8touchgfx12TextProviderC1Ev>
 80172e4:	9a03      	ldr	r2, [sp, #12]
 80172e6:	a804      	add	r0, sp, #16
 80172e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80172ea:	f004 fcae 	bl	801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 80172ee:	4630      	mov	r0, r6
 80172f0:	f7eb fc90 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 80172f4:	4630      	mov	r0, r6
 80172f6:	f7eb fcad 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 80172fa:	4b13      	ldr	r3, [pc, #76]	@ (8017348 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x84>)
 80172fc:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	f894 1031 	ldrb.w	r1, [r4, #49]	@ 0x31
 8017304:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017308:	785a      	ldrb	r2, [r3, #1]
 801730a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801730e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017312:	9300      	str	r3, [sp, #0]
 8017314:	4603      	mov	r3, r0
 8017316:	a804      	add	r0, sp, #16
 8017318:	f001 feff 	bl	801911a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801731c:	4605      	mov	r5, r0
 801731e:	4630      	mov	r0, r6
 8017320:	f7eb fc98 	bl	8002c54 <_ZNK8touchgfx9TypedText7getFontEv>
 8017324:	6803      	ldr	r3, [r0, #0]
 8017326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017328:	4798      	blx	r3
 801732a:	1e6a      	subs	r2, r5, #1
 801732c:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 801732e:	fb15 f000 	smulbb	r0, r5, r0
 8017332:	fb13 0002 	smlabb	r0, r3, r2, r0
 8017336:	b200      	sxth	r0, r0
 8017338:	b00b      	add	sp, #44	@ 0x2c
 801733a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801733e:	b003      	add	sp, #12
 8017340:	4770      	bx	lr
 8017342:	2000      	movs	r0, #0
 8017344:	e7f8      	b.n	8017338 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x74>
 8017346:	bf00      	nop
 8017348:	20024eb4 	.word	0x20024eb4

0801734c <_ZN8touchgfx5ImageD1Ev>:
 801734c:	4770      	bx	lr

0801734e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801734e:	b570      	push	{r4, r5, r6, lr}
 8017350:	4605      	mov	r5, r0
 8017352:	880b      	ldrh	r3, [r1, #0]
 8017354:	4604      	mov	r4, r0
 8017356:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8017358:	f855 3b26 	ldr.w	r3, [r5], #38
 801735c:	4628      	mov	r0, r5
 801735e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8017360:	f005 fab4 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017364:	b201      	sxth	r1, r0
 8017366:	4620      	mov	r0, r4
 8017368:	47b0      	blx	r6
 801736a:	6823      	ldr	r3, [r4, #0]
 801736c:	4628      	mov	r0, r5
 801736e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 8017370:	f005 fae4 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017374:	b201      	sxth	r1, r0
 8017376:	4620      	mov	r0, r4
 8017378:	47b0      	blx	r6
 801737a:	4628      	mov	r0, r5
 801737c:	f005 fb6e 	bl	801ca5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017380:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8017384:	bd70      	pop	{r4, r5, r6, pc}

08017386 <_ZN8touchgfx5ImageD0Ev>:
 8017386:	b510      	push	{r4, lr}
 8017388:	4604      	mov	r4, r0
 801738a:	212c      	movs	r1, #44	@ 0x2c
 801738c:	f007 fbcb 	bl	801eb26 <_ZdlPvj>
 8017390:	4620      	mov	r0, r4
 8017392:	bd10      	pop	{r4, pc}

08017394 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017394:	b510      	push	{r4, lr}
 8017396:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801739a:	4604      	mov	r4, r0
 801739c:	2bff      	cmp	r3, #255	@ 0xff
 801739e:	d006      	beq.n	80173ae <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80173a0:	2300      	movs	r3, #0
 80173a2:	8003      	strh	r3, [r0, #0]
 80173a4:	8043      	strh	r3, [r0, #2]
 80173a6:	8083      	strh	r3, [r0, #4]
 80173a8:	80c3      	strh	r3, [r0, #6]
 80173aa:	4620      	mov	r0, r4
 80173ac:	bd10      	pop	{r4, pc}
 80173ae:	3126      	adds	r1, #38	@ 0x26
 80173b0:	f005 fafc 	bl	801c9ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80173b4:	e7f9      	b.n	80173aa <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

080173b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80173b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173bc:	4605      	mov	r5, r0
 80173be:	b088      	sub	sp, #32
 80173c0:	2400      	movs	r4, #0
 80173c2:	460f      	mov	r7, r1
 80173c4:	f855 3b26 	ldr.w	r3, [r5], #38
 80173c8:	a904      	add	r1, sp, #16
 80173ca:	f8ad 4010 	strh.w	r4, [sp, #16]
 80173ce:	4606      	mov	r6, r0
 80173d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173d2:	f8ad 4012 	strh.w	r4, [sp, #18]
 80173d6:	f8ad 4014 	strh.w	r4, [sp, #20]
 80173da:	f8ad 4016 	strh.w	r4, [sp, #22]
 80173de:	4798      	blx	r3
 80173e0:	4628      	mov	r0, r5
 80173e2:	f005 fa73 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173e6:	4680      	mov	r8, r0
 80173e8:	4628      	mov	r0, r5
 80173ea:	f005 faa7 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80173ee:	f8ad 4018 	strh.w	r4, [sp, #24]
 80173f2:	f8ad 401a 	strh.w	r4, [sp, #26]
 80173f6:	ac06      	add	r4, sp, #24
 80173f8:	f8ad 001e 	strh.w	r0, [sp, #30]
 80173fc:	4639      	mov	r1, r7
 80173fe:	4620      	mov	r0, r4
 8017400:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017404:	f7fb fcd4 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 8017408:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801740c:	b19b      	cbz	r3, 8017436 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7e>
 801740e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017412:	b183      	cbz	r3, 8017436 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7e>
 8017414:	4b09      	ldr	r3, [pc, #36]	@ (801743c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x84>)
 8017416:	2701      	movs	r7, #1
 8017418:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	6898      	ldr	r0, [r3, #8]
 8017420:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017424:	6801      	ldr	r1, [r0, #0]
 8017426:	9702      	str	r7, [sp, #8]
 8017428:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 801742c:	e88d 0050 	stmia.w	sp, {r4, r6}
 8017430:	68cc      	ldr	r4, [r1, #12]
 8017432:	4629      	mov	r1, r5
 8017434:	47a0      	blx	r4
 8017436:	b008      	add	sp, #32
 8017438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801743c:	20024e34 	.word	0x20024e34

08017440 <_ZNK8touchgfx15ButtonWithLabel7getTypeEv>:
 8017440:	2007      	movs	r0, #7
 8017442:	4770      	bx	lr

08017444 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8017444:	4770      	bx	lr

08017446 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 8017446:	b510      	push	{r4, lr}
 8017448:	4604      	mov	r4, r0
 801744a:	f7ff fe91 	bl	8017170 <_ZNK8touchgfx6Button12getSolidRectEv>
 801744e:	4620      	mov	r0, r4
 8017450:	bd10      	pop	{r4, pc}

08017452 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8017452:	b510      	push	{r4, lr}
 8017454:	4604      	mov	r4, r0
 8017456:	2144      	movs	r1, #68	@ 0x44
 8017458:	f007 fb65 	bl	801eb26 <_ZdlPvj>
 801745c:	4620      	mov	r0, r4
 801745e:	bd10      	pop	{r4, pc}

08017460 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8017460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017464:	4604      	mov	r4, r0
 8017466:	b08f      	sub	sp, #60	@ 0x3c
 8017468:	4e56      	ldr	r6, [pc, #344]	@ (80175c4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 801746a:	4688      	mov	r8, r1
 801746c:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8017470:	f7ff fe94 	bl	801719c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8017474:	4628      	mov	r0, r5
 8017476:	f7eb fbcd 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 801747a:	6832      	ldr	r2, [r6, #0]
 801747c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801747e:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8017482:	4a51      	ldr	r2, [pc, #324]	@ (80175c8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8017484:	6812      	ldr	r2, [r2, #0]
 8017486:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
 801748a:	b11f      	cbz	r7, 8017494 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801748c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017490:	4293      	cmp	r3, r2
 8017492:	d179      	bne.n	8017588 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x128>
 8017494:	b00f      	add	sp, #60	@ 0x3c
 8017496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801749a:	1a52      	subs	r2, r2, r1
 801749c:	2002      	movs	r0, #2
 801749e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80174a2:	f8ad 101a 	strh.w	r1, [sp, #26]
 80174a6:	fb92 f2f0 	sdiv	r2, r2, r0
 80174aa:	f8ad 2016 	strh.w	r2, [sp, #22]
 80174ae:	f10d 0914 	add.w	r9, sp, #20
 80174b2:	f10d 0a1c 	add.w	sl, sp, #28
 80174b6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80174ba:	e88a 0003 	stmia.w	sl, {r0, r1}
 80174be:	4641      	mov	r1, r8
 80174c0:	4650      	mov	r0, sl
 80174c2:	f7fb fc75 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 80174c6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d0e2      	beq.n	8017494 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 80174ce:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d0de      	beq.n	8017494 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 80174d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80174da:	4649      	mov	r1, r9
 80174dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80174e0:	4620      	mov	r0, r4
 80174e2:	1a9b      	subs	r3, r3, r2
 80174e4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80174e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80174ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80174f0:	1a9b      	subs	r3, r3, r2
 80174f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80174f6:	6823      	ldr	r3, [r4, #0]
 80174f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174fa:	4798      	blx	r3
 80174fc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017500:	b913      	cbnz	r3, 8017508 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xa8>
 8017502:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8017506:	e001      	b.n	801750c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xac>
 8017508:	f104 0b3c 	add.w	fp, r4, #60	@ 0x3c
 801750c:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8017510:	4628      	mov	r0, r5
 8017512:	9303      	str	r3, [sp, #12]
 8017514:	f7eb fb7e 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017518:	f8b4 8034 	ldrh.w	r8, [r4, #52]	@ 0x34
 801751c:	4628      	mov	r0, r5
 801751e:	6832      	ldr	r2, [r6, #0]
 8017520:	f894 4040 	ldrb.w	r4, [r4, #64]	@ 0x40
 8017524:	eb02 0248 	add.w	r2, r2, r8, lsl #1
 8017528:	7856      	ldrb	r6, [r2, #1]
 801752a:	f3c6 0201 	ubfx	r2, r6, #0, #2
 801752e:	f3c6 0681 	ubfx	r6, r6, #2, #2
 8017532:	9202      	str	r2, [sp, #8]
 8017534:	f7eb fb6e 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017538:	9b03      	ldr	r3, [sp, #12]
 801753a:	4628      	mov	r0, r5
 801753c:	f8db 1000 	ldr.w	r1, [fp]
 8017540:	9a02      	ldr	r2, [sp, #8]
 8017542:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
 8017546:	2300      	movs	r3, #0
 8017548:	910b      	str	r1, [sp, #44]	@ 0x2c
 801754a:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 801754e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8017552:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8017556:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801755a:	9709      	str	r7, [sp, #36]	@ 0x24
 801755c:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8017560:	f88d 402a 	strb.w	r4, [sp, #42]	@ 0x2a
 8017564:	f7eb fb56 	bl	8002c14 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017568:	4b18      	ldr	r3, [pc, #96]	@ (80175cc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 801756a:	6818      	ldr	r0, [r3, #0]
 801756c:	4b18      	ldr	r3, [pc, #96]	@ (80175d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8017574:	9301      	str	r3, [sp, #4]
 8017576:	ab09      	add	r3, sp, #36	@ 0x24
 8017578:	9300      	str	r3, [sp, #0]
 801757a:	4653      	mov	r3, sl
 801757c:	6880      	ldr	r0, [r0, #8]
 801757e:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017582:	f001 fba5 	bl	8018cd0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
 8017586:	e785      	b.n	8017494 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 8017588:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 801758c:	2300      	movs	r3, #0
 801758e:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 8017592:	2801      	cmp	r0, #1
 8017594:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017598:	f8ad 3016 	strh.w	r3, [sp, #22]
 801759c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80175a0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80175a4:	d002      	beq.n	80175ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 80175a6:	2803      	cmp	r0, #3
 80175a8:	f47f af77 	bne.w	801749a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3a>
 80175ac:	1a5b      	subs	r3, r3, r1
 80175ae:	2002      	movs	r0, #2
 80175b0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80175b4:	f8ad 201a 	strh.w	r2, [sp, #26]
 80175b8:	fb93 f3f0 	sdiv	r3, r3, r0
 80175bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80175c0:	e775      	b.n	80174ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 80175c2:	bf00      	nop
 80175c4:	20024eb4 	.word	0x20024eb4
 80175c8:	20024ebc 	.word	0x20024ebc
 80175cc:	20024e34 	.word	0x20024e34
 80175d0:	20001864 	.word	0x20001864

080175d4 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80175d4:	2101      	movs	r1, #1
 80175d6:	2200      	movs	r2, #0
 80175d8:	b510      	push	{r4, lr}
 80175da:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80175de:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80175e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80175e6:	4c0e      	ldr	r4, [pc, #56]	@ (8017620 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x4c>)
 80175e8:	8082      	strh	r2, [r0, #4]
 80175ea:	80c2      	strh	r2, [r0, #6]
 80175ec:	8102      	strh	r2, [r0, #8]
 80175ee:	8142      	strh	r2, [r0, #10]
 80175f0:	8182      	strh	r2, [r0, #12]
 80175f2:	81c2      	strh	r2, [r0, #14]
 80175f4:	8202      	strh	r2, [r0, #16]
 80175f6:	8242      	strh	r2, [r0, #18]
 80175f8:	6142      	str	r2, [r0, #20]
 80175fa:	6182      	str	r2, [r0, #24]
 80175fc:	61c2      	str	r2, [r0, #28]
 80175fe:	6282      	str	r2, [r0, #40]	@ 0x28
 8017600:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8017604:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8017606:	8601      	strh	r1, [r0, #48]	@ 0x30
 8017608:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 801760c:	6004      	str	r4, [r0, #0]
 801760e:	8681      	strh	r1, [r0, #52]	@ 0x34
 8017610:	6382      	str	r2, [r0, #56]	@ 0x38
 8017612:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8017614:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
 8017618:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
 801761c:	bd10      	pop	{r4, pc}
 801761e:	bf00      	nop
 8017620:	08026028 	.word	0x08026028

08017624 <_ZN8touchgfx11RadioButtonD1Ev>:
 8017624:	4770      	bx	lr

08017626 <_ZNK8touchgfx11RadioButton7getTypeEv>:
 8017626:	2016      	movs	r0, #22
 8017628:	4770      	bx	lr

0801762a <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 801762a:	b538      	push	{r3, r4, r5, lr}
 801762c:	8809      	ldrh	r1, [r1, #0]
 801762e:	f100 052e 	add.w	r5, r0, #46	@ 0x2e
 8017632:	4604      	mov	r4, r0
 8017634:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8017636:	8812      	ldrh	r2, [r2, #0]
 8017638:	8602      	strh	r2, [r0, #48]	@ 0x30
 801763a:	881b      	ldrh	r3, [r3, #0]
 801763c:	8643      	strh	r3, [r0, #50]	@ 0x32
 801763e:	9b04      	ldr	r3, [sp, #16]
 8017640:	881b      	ldrh	r3, [r3, #0]
 8017642:	8683      	strh	r3, [r0, #52]	@ 0x34
 8017644:	4628      	mov	r0, r5
 8017646:	f005 f941 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801764a:	8120      	strh	r0, [r4, #8]
 801764c:	4628      	mov	r0, r5
 801764e:	f005 f975 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017652:	8160      	strh	r0, [r4, #10]
 8017654:	bd38      	pop	{r3, r4, r5, pc}

08017656 <_ZN8touchgfx11RadioButtonD0Ev>:
 8017656:	b510      	push	{r4, lr}
 8017658:	4604      	mov	r4, r0
 801765a:	2140      	movs	r1, #64	@ 0x40
 801765c:	f007 fa63 	bl	801eb26 <_ZdlPvj>
 8017660:	4620      	mov	r0, r4
 8017662:	bd10      	pop	{r4, pc}

08017664 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>:
 8017664:	f890 2037 	ldrb.w	r2, [r0, #55]	@ 0x37
 8017668:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801766c:	b12a      	cbz	r2, 801767a <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x16>
 801766e:	b113      	cbz	r3, 8017676 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x12>
 8017670:	3034      	adds	r0, #52	@ 0x34
 8017672:	8800      	ldrh	r0, [r0, #0]
 8017674:	4770      	bx	lr
 8017676:	3032      	adds	r0, #50	@ 0x32
 8017678:	e7fb      	b.n	8017672 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0xe>
 801767a:	b10b      	cbz	r3, 8017680 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x1c>
 801767c:	3030      	adds	r0, #48	@ 0x30
 801767e:	e7f8      	b.n	8017672 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0xe>
 8017680:	302e      	adds	r0, #46	@ 0x2e
 8017682:	e7f6      	b.n	8017672 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0xe>

08017684 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE>:
 8017684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017688:	b08b      	sub	sp, #44	@ 0x2c
 801768a:	460f      	mov	r7, r1
 801768c:	4606      	mov	r6, r0
 801768e:	f7ff ffe9 	bl	8017664 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 8017692:	ad0a      	add	r5, sp, #40	@ 0x28
 8017694:	f825 0d14 	strh.w	r0, [r5, #-20]!
 8017698:	4628      	mov	r0, r5
 801769a:	f005 f917 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801769e:	4680      	mov	r8, r0
 80176a0:	fa0f f980 	sxth.w	r9, r0
 80176a4:	4628      	mov	r0, r5
 80176a6:	f005 f949 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80176aa:	f9b7 1000 	ldrsh.w	r1, [r7]
 80176ae:	88bc      	ldrh	r4, [r7, #4]
 80176b0:	2300      	movs	r3, #0
 80176b2:	fa0f fe80 	sxth.w	lr, r0
 80176b6:	440c      	add	r4, r1
 80176b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80176bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80176c0:	b2a4      	uxth	r4, r4
 80176c2:	fa0f fc84 	sxth.w	ip, r4
 80176c6:	459c      	cmp	ip, r3
 80176c8:	dd37      	ble.n	801773a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xb6>
 80176ca:	4589      	cmp	r9, r1
 80176cc:	dd35      	ble.n	801773a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xb6>
 80176ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80176d2:	88fb      	ldrh	r3, [r7, #6]
 80176d4:	4413      	add	r3, r2
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	b21f      	sxth	r7, r3
 80176da:	2f00      	cmp	r7, #0
 80176dc:	dd2d      	ble.n	801773a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xb6>
 80176de:	4596      	cmp	lr, r2
 80176e0:	dd2b      	ble.n	801773a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xb6>
 80176e2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80176e6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80176ea:	45e1      	cmp	r9, ip
 80176ec:	bfb8      	it	lt
 80176ee:	4644      	movlt	r4, r8
 80176f0:	45be      	cmp	lr, r7
 80176f2:	bfb8      	it	lt
 80176f4:	4603      	movlt	r3, r0
 80176f6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80176fa:	1a64      	subs	r4, r4, r1
 80176fc:	1a9b      	subs	r3, r3, r2
 80176fe:	f8ad 201a 	strh.w	r2, [sp, #26]
 8017702:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017706:	f8ad 301e 	strh.w	r3, [sp, #30]
 801770a:	4b1f      	ldr	r3, [pc, #124]	@ (8017788 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x104>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	b92b      	cbnz	r3, 801771c <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x98>
 8017710:	4b1e      	ldr	r3, [pc, #120]	@ (801778c <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x108>)
 8017712:	2195      	movs	r1, #149	@ 0x95
 8017714:	4a1e      	ldr	r2, [pc, #120]	@ (8017790 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x10c>)
 8017716:	481f      	ldr	r0, [pc, #124]	@ (8017794 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x110>)
 8017718:	f008 fb2c 	bl	801fd74 <__assert_func>
 801771c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017720:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017724:	429a      	cmp	r2, r3
 8017726:	d005      	beq.n	8017734 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xb0>
 8017728:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801772c:	b113      	cbz	r3, 8017734 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xb0>
 801772e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017732:	b943      	cbnz	r3, 8017746 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xc2>
 8017734:	b00b      	add	sp, #44	@ 0x2c
 8017736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801773a:	2300      	movs	r3, #0
 801773c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017740:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017744:	e7e1      	b.n	801770a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x86>
 8017746:	2300      	movs	r3, #0
 8017748:	a908      	add	r1, sp, #32
 801774a:	4630      	mov	r0, r6
 801774c:	2401      	movs	r4, #1
 801774e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017752:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017756:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801775a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801775e:	6833      	ldr	r3, [r6, #0]
 8017760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017762:	4798      	blx	r3
 8017764:	4b0c      	ldr	r3, [pc, #48]	@ (8017798 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x114>)
 8017766:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	6898      	ldr	r0, [r3, #8]
 801776e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017772:	6801      	ldr	r1, [r0, #0]
 8017774:	9402      	str	r4, [sp, #8]
 8017776:	f896 4036 	ldrb.w	r4, [r6, #54]	@ 0x36
 801777a:	9401      	str	r4, [sp, #4]
 801777c:	ac06      	add	r4, sp, #24
 801777e:	9400      	str	r4, [sp, #0]
 8017780:	68cc      	ldr	r4, [r1, #12]
 8017782:	4629      	mov	r1, r5
 8017784:	47a0      	blx	r4
 8017786:	e7d5      	b.n	8017734 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xb0>
 8017788:	20024eec 	.word	0x20024eec
 801778c:	08024948 	.word	0x08024948
 8017790:	08026108 	.word	0x08026108
 8017794:	080249e1 	.word	0x080249e1
 8017798:	20024e34 	.word	0x20024e34

0801779c <_ZNK8touchgfx11RadioButton12getSolidRectEv>:
 801779c:	b513      	push	{r0, r1, r4, lr}
 801779e:	f891 3036 	ldrb.w	r3, [r1, #54]	@ 0x36
 80177a2:	4604      	mov	r4, r0
 80177a4:	2bff      	cmp	r3, #255	@ 0xff
 80177a6:	d007      	beq.n	80177b8 <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x1c>
 80177a8:	2300      	movs	r3, #0
 80177aa:	8003      	strh	r3, [r0, #0]
 80177ac:	8043      	strh	r3, [r0, #2]
 80177ae:	8083      	strh	r3, [r0, #4]
 80177b0:	80c3      	strh	r3, [r0, #6]
 80177b2:	4620      	mov	r0, r4
 80177b4:	b002      	add	sp, #8
 80177b6:	bd10      	pop	{r4, pc}
 80177b8:	4608      	mov	r0, r1
 80177ba:	f7ff ff53 	bl	8017664 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 80177be:	a902      	add	r1, sp, #8
 80177c0:	f821 0d04 	strh.w	r0, [r1, #-4]!
 80177c4:	4620      	mov	r0, r4
 80177c6:	f005 f8f1 	bl	801c9ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80177ca:	e7f2      	b.n	80177b2 <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x16>

080177cc <_ZN8touchgfx11RadioButton11setSelectedEb>:
 80177cc:	b510      	push	{r4, lr}
 80177ce:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 80177d2:	4604      	mov	r4, r0
 80177d4:	f880 1037 	strb.w	r1, [r0, #55]	@ 0x37
 80177d8:	b163      	cbz	r3, 80177f4 <_ZN8touchgfx11RadioButton11setSelectedEb+0x28>
 80177da:	b929      	cbnz	r1, 80177e8 <_ZN8touchgfx11RadioButton11setSelectedEb+0x1c>
 80177dc:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80177de:	b118      	cbz	r0, 80177e8 <_ZN8touchgfx11RadioButton11setSelectedEb+0x1c>
 80177e0:	6803      	ldr	r3, [r0, #0]
 80177e2:	68db      	ldr	r3, [r3, #12]
 80177e4:	4798      	blx	r3
 80177e6:	b988      	cbnz	r0, 801780c <_ZN8touchgfx11RadioButton11setSelectedEb+0x40>
 80177e8:	6823      	ldr	r3, [r4, #0]
 80177ea:	4620      	mov	r0, r4
 80177ec:	695b      	ldr	r3, [r3, #20]
 80177ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177f2:	4718      	bx	r3
 80177f4:	2900      	cmp	r1, #0
 80177f6:	d0f7      	beq.n	80177e8 <_ZN8touchgfx11RadioButton11setSelectedEb+0x1c>
 80177f8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80177fa:	2800      	cmp	r0, #0
 80177fc:	d0f4      	beq.n	80177e8 <_ZN8touchgfx11RadioButton11setSelectedEb+0x1c>
 80177fe:	6803      	ldr	r3, [r0, #0]
 8017800:	68db      	ldr	r3, [r3, #12]
 8017802:	4798      	blx	r3
 8017804:	2800      	cmp	r0, #0
 8017806:	d0ef      	beq.n	80177e8 <_ZN8touchgfx11RadioButton11setSelectedEb+0x1c>
 8017808:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801780a:	e000      	b.n	801780e <_ZN8touchgfx11RadioButton11setSelectedEb+0x42>
 801780c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801780e:	6803      	ldr	r3, [r0, #0]
 8017810:	4621      	mov	r1, r4
 8017812:	689b      	ldr	r3, [r3, #8]
 8017814:	4798      	blx	r3
 8017816:	e7e7      	b.n	80177e8 <_ZN8touchgfx11RadioButton11setSelectedEb+0x1c>

08017818 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE>:
 8017818:	b570      	push	{r4, r5, r6, lr}
 801781a:	790b      	ldrb	r3, [r1, #4]
 801781c:	4604      	mov	r4, r0
 801781e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8017822:	460e      	mov	r6, r1
 8017824:	2b00      	cmp	r3, #0
 8017826:	bf0c      	ite	eq
 8017828:	2301      	moveq	r3, #1
 801782a:	2300      	movne	r3, #0
 801782c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8017830:	d10f      	bne.n	8017852 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3a>
 8017832:	b17d      	cbz	r5, 8017854 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017834:	7931      	ldrb	r1, [r6, #4]
 8017836:	2901      	cmp	r1, #1
 8017838:	d112      	bne.n	8017860 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 801783a:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801783e:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8017842:	b172      	cbz	r2, 8017862 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8017844:	f083 0101 	eor.w	r1, r3, #1
 8017848:	4620      	mov	r0, r4
 801784a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801784e:	f7ff bfbd 	b.w	80177cc <_ZN8touchgfx11RadioButton11setSelectedEb>
 8017852:	b12d      	cbz	r5, 8017860 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8017854:	6823      	ldr	r3, [r4, #0]
 8017856:	4620      	mov	r0, r4
 8017858:	695b      	ldr	r3, [r3, #20]
 801785a:	4798      	blx	r3
 801785c:	2d00      	cmp	r5, #0
 801785e:	d1e9      	bne.n	8017834 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8017860:	bd70      	pop	{r4, r5, r6, pc}
 8017862:	2b00      	cmp	r3, #0
 8017864:	d1fc      	bne.n	8017860 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8017866:	e7ef      	b.n	8017848 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x30>

08017868 <_ZN8touchgfx7OutlineD1Ev>:
 8017868:	4770      	bx	lr

0801786a <_ZN8touchgfx7OutlineD0Ev>:
 801786a:	b510      	push	{r4, lr}
 801786c:	4604      	mov	r4, r0
 801786e:	2148      	movs	r1, #72	@ 0x48
 8017870:	f007 f959 	bl	801eb26 <_ZdlPvj>
 8017874:	4620      	mov	r0, r4
 8017876:	bd10      	pop	{r4, pc}

08017878 <_ZN8touchgfx7Outline5resetEv>:
 8017878:	b510      	push	{r4, lr}
 801787a:	4604      	mov	r4, r0
 801787c:	f001 f8aa 	bl	80189d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8017880:	60e0      	str	r0, [r4, #12]
 8017882:	f001 f8ad 	bl	80189e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8017886:	68e3      	ldr	r3, [r4, #12]
 8017888:	2200      	movs	r2, #0
 801788a:	08c0      	lsrs	r0, r0, #3
 801788c:	6123      	str	r3, [r4, #16]
 801788e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017892:	6060      	str	r0, [r4, #4]
 8017894:	82a3      	strh	r3, [r4, #20]
 8017896:	82e3      	strh	r3, [r4, #22]
 8017898:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801789a:	60a2      	str	r2, [r4, #8]
 801789c:	f023 0301 	bic.w	r3, r3, #1
 80178a0:	8322      	strh	r2, [r4, #24]
 80178a2:	8362      	strh	r2, [r4, #26]
 80178a4:	f043 0302 	orr.w	r3, r3, #2
 80178a8:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 80178ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80178ae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80178b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80178b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80178b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80178ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80178bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80178be:	bd10      	pop	{r4, pc}

080178c0 <_ZN8touchgfx7OutlineC1Ev>:
 80178c0:	4b0f      	ldr	r3, [pc, #60]	@ (8017900 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80178c2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80178c6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80178ca:	b510      	push	{r4, lr}
 80178cc:	6003      	str	r3, [r0, #0]
 80178ce:	2300      	movs	r3, #0
 80178d0:	4604      	mov	r4, r0
 80178d2:	62c2      	str	r2, [r0, #44]	@ 0x2c
 80178d4:	6043      	str	r3, [r0, #4]
 80178d6:	6083      	str	r3, [r0, #8]
 80178d8:	60c3      	str	r3, [r0, #12]
 80178da:	6103      	str	r3, [r0, #16]
 80178dc:	6143      	str	r3, [r0, #20]
 80178de:	6183      	str	r3, [r0, #24]
 80178e0:	61c3      	str	r3, [r0, #28]
 80178e2:	6203      	str	r3, [r0, #32]
 80178e4:	6243      	str	r3, [r0, #36]	@ 0x24
 80178e6:	6283      	str	r3, [r0, #40]	@ 0x28
 80178e8:	6302      	str	r2, [r0, #48]	@ 0x30
 80178ea:	6341      	str	r1, [r0, #52]	@ 0x34
 80178ec:	6381      	str	r1, [r0, #56]	@ 0x38
 80178ee:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80178f0:	6402      	str	r2, [r0, #64]	@ 0x40
 80178f2:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80178f6:	f7ff ffbf 	bl	8017878 <_ZN8touchgfx7Outline5resetEv>
 80178fa:	4620      	mov	r0, r4
 80178fc:	bd10      	pop	{r4, pc}
 80178fe:	bf00      	nop
 8017900:	08026144 	.word	0x08026144

08017904 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8017904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017908:	b093      	sub	sp, #76	@ 0x4c
 801790a:	4604      	mov	r4, r0
 801790c:	1155      	asrs	r5, r2, #5
 801790e:	f002 0c1f 	and.w	ip, r2, #31
 8017912:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8017914:	9305      	str	r3, [sp, #20]
 8017916:	1143      	asrs	r3, r0, #5
 8017918:	1146      	asrs	r6, r0, #5
 801791a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801791c:	f000 031f 	and.w	r3, r0, #31
 8017920:	9303      	str	r3, [sp, #12]
 8017922:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017924:	429d      	cmp	r5, r3
 8017926:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017928:	bfb8      	it	lt
 801792a:	6325      	strlt	r5, [r4, #48]	@ 0x30
 801792c:	429d      	cmp	r5, r3
 801792e:	bfa4      	itt	ge
 8017930:	1c6b      	addge	r3, r5, #1
 8017932:	63a3      	strge	r3, [r4, #56]	@ 0x38
 8017934:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017936:	429e      	cmp	r6, r3
 8017938:	bfb8      	it	lt
 801793a:	4633      	movlt	r3, r6
 801793c:	ea4f 1660 	mov.w	r6, r0, asr #5
 8017940:	bfb8      	it	lt
 8017942:	6323      	strlt	r3, [r4, #48]	@ 0x30
 8017944:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017946:	429e      	cmp	r6, r3
 8017948:	bfa2      	ittt	ge
 801794a:	4633      	movge	r3, r6
 801794c:	3301      	addge	r3, #1
 801794e:	63a3      	strge	r3, [r4, #56]	@ 0x38
 8017950:	9b05      	ldr	r3, [sp, #20]
 8017952:	eba3 0a01 	sub.w	sl, r3, r1
 8017956:	1143      	asrs	r3, r0, #5
 8017958:	429d      	cmp	r5, r3
 801795a:	f040 811e 	bne.w	8017b9a <_ZN8touchgfx7Outline10renderLineEiiii+0x296>
 801795e:	9b05      	ldr	r3, [sp, #20]
 8017960:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8017964:	9b03      	ldr	r3, [sp, #12]
 8017966:	459c      	cmp	ip, r3
 8017968:	d12d      	bne.n	80179c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 801796a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801796e:	eb0e 4105 	add.w	r1, lr, r5, lsl #16
 8017972:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8017976:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801797a:	4299      	cmp	r1, r3
 801797c:	d038      	beq.n	80179f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801797e:	8b63      	ldrh	r3, [r4, #26]
 8017980:	8b21      	ldrh	r1, [r4, #24]
 8017982:	430b      	orrs	r3, r1
 8017984:	b21b      	sxth	r3, r3
 8017986:	b15b      	cbz	r3, 80179a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 8017988:	2a00      	cmp	r2, #0
 801798a:	db09      	blt.n	80179a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 801798c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801798e:	4293      	cmp	r3, r2
 8017990:	dd06      	ble.n	80179a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 8017992:	68a2      	ldr	r2, [r4, #8]
 8017994:	6863      	ldr	r3, [r4, #4]
 8017996:	429a      	cmp	r2, r3
 8017998:	d308      	bcc.n	80179ac <_ZN8touchgfx7Outline10renderLineEiiii+0xa8>
 801799a:	2301      	movs	r3, #1
 801799c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80179a0:	f8a4 e014 	strh.w	lr, [r4, #20]
 80179a4:	82e5      	strh	r5, [r4, #22]
 80179a6:	2300      	movs	r3, #0
 80179a8:	8323      	strh	r3, [r4, #24]
 80179aa:	e0d3      	b.n	8017b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80179ac:	f104 0314 	add.w	r3, r4, #20
 80179b0:	6922      	ldr	r2, [r4, #16]
 80179b2:	cb03      	ldmia	r3!, {r0, r1}
 80179b4:	6010      	str	r0, [r2, #0]
 80179b6:	6051      	str	r1, [r2, #4]
 80179b8:	6923      	ldr	r3, [r4, #16]
 80179ba:	3308      	adds	r3, #8
 80179bc:	6123      	str	r3, [r4, #16]
 80179be:	68a3      	ldr	r3, [r4, #8]
 80179c0:	3301      	adds	r3, #1
 80179c2:	60a3      	str	r3, [r4, #8]
 80179c4:	e7ec      	b.n	80179a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 80179c6:	9b05      	ldr	r3, [sp, #20]
 80179c8:	114f      	asrs	r7, r1, #5
 80179ca:	f001 011f 	and.w	r1, r1, #31
 80179ce:	f003 031f 	and.w	r3, r3, #31
 80179d2:	4577      	cmp	r7, lr
 80179d4:	9304      	str	r3, [sp, #16]
 80179d6:	9b03      	ldr	r3, [sp, #12]
 80179d8:	eba3 020c 	sub.w	r2, r3, ip
 80179dc:	d10b      	bne.n	80179f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xf2>
 80179de:	8b23      	ldrh	r3, [r4, #24]
 80179e0:	4413      	add	r3, r2
 80179e2:	8323      	strh	r3, [r4, #24]
 80179e4:	9b04      	ldr	r3, [sp, #16]
 80179e6:	4419      	add	r1, r3
 80179e8:	8b63      	ldrh	r3, [r4, #26]
 80179ea:	fb02 3201 	mla	r2, r2, r1, r3
 80179ee:	8362      	strh	r2, [r4, #26]
 80179f0:	b013      	add	sp, #76	@ 0x4c
 80179f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179f6:	f1ba 0f00 	cmp.w	sl, #0
 80179fa:	8b20      	ldrh	r0, [r4, #24]
 80179fc:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8017a00:	bfaf      	iteee	ge
 8017a02:	f1c1 0320 	rsbge	r3, r1, #32
 8017a06:	434a      	mullt	r2, r1
 8017a08:	f1ca 0a00 	rsblt	sl, sl, #0
 8017a0c:	2300      	movlt	r3, #0
 8017a0e:	bfa3      	ittte	ge
 8017a10:	435a      	mulge	r2, r3
 8017a12:	2320      	movge	r3, #32
 8017a14:	f04f 0b01 	movge.w	fp, #1
 8017a18:	f04f 3bff 	movlt.w	fp, #4294967295
 8017a1c:	9302      	str	r3, [sp, #8]
 8017a1e:	9b02      	ldr	r3, [sp, #8]
 8017a20:	fb92 f6fa 	sdiv	r6, r2, sl
 8017a24:	fb0a 2216 	mls	r2, sl, r6, r2
 8017a28:	4419      	add	r1, r3
 8017a2a:	8b63      	ldrh	r3, [r4, #26]
 8017a2c:	2a00      	cmp	r2, #0
 8017a2e:	bfbc      	itt	lt
 8017a30:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8017a34:	4452      	addlt	r2, sl
 8017a36:	fb06 3101 	mla	r1, r6, r1, r3
 8017a3a:	4430      	add	r0, r6
 8017a3c:	b20b      	sxth	r3, r1
 8017a3e:	b200      	sxth	r0, r0
 8017a40:	9301      	str	r3, [sp, #4]
 8017a42:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017a46:	8320      	strh	r0, [r4, #24]
 8017a48:	8363      	strh	r3, [r4, #26]
 8017a4a:	eb07 030b 	add.w	r3, r7, fp
 8017a4e:	042f      	lsls	r7, r5, #16
 8017a50:	9300      	str	r3, [sp, #0]
 8017a52:	9900      	ldr	r1, [sp, #0]
 8017a54:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8017a58:	eb01 0907 	add.w	r9, r1, r7
 8017a5c:	9705      	str	r7, [sp, #20]
 8017a5e:	eb08 4803 	add.w	r8, r8, r3, lsl #16
 8017a62:	45c1      	cmp	r9, r8
 8017a64:	d015      	beq.n	8017a92 <_ZN8touchgfx7Outline10renderLineEiiii+0x18e>
 8017a66:	9901      	ldr	r1, [sp, #4]
 8017a68:	4301      	orrs	r1, r0
 8017a6a:	d00b      	beq.n	8017a84 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	db09      	blt.n	8017a84 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 8017a70:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8017a72:	4299      	cmp	r1, r3
 8017a74:	dd06      	ble.n	8017a84 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 8017a76:	68a1      	ldr	r1, [r4, #8]
 8017a78:	6863      	ldr	r3, [r4, #4]
 8017a7a:	4299      	cmp	r1, r3
 8017a7c:	d36c      	bcc.n	8017b58 <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 8017a7e:	2301      	movs	r3, #1
 8017a80:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017a84:	f8bd 3000 	ldrh.w	r3, [sp]
 8017a88:	82e5      	strh	r5, [r4, #22]
 8017a8a:	82a3      	strh	r3, [r4, #20]
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	8323      	strh	r3, [r4, #24]
 8017a90:	8363      	strh	r3, [r4, #26]
 8017a92:	9900      	ldr	r1, [sp, #0]
 8017a94:	eb0c 0306 	add.w	r3, ip, r6
 8017a98:	458e      	cmp	lr, r1
 8017a9a:	d04e      	beq.n	8017b3a <_ZN8touchgfx7Outline10renderLineEiiii+0x236>
 8017a9c:	9903      	ldr	r1, [sp, #12]
 8017a9e:	eba2 020a 	sub.w	r2, r2, sl
 8017aa2:	1ac9      	subs	r1, r1, r3
 8017aa4:	9201      	str	r2, [sp, #4]
 8017aa6:	440e      	add	r6, r1
 8017aa8:	0176      	lsls	r6, r6, #5
 8017aaa:	fb96 fcfa 	sdiv	ip, r6, sl
 8017aae:	fb0a 661c 	mls	r6, sl, ip, r6
 8017ab2:	2e00      	cmp	r6, #0
 8017ab4:	bfbc      	itt	lt
 8017ab6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8017aba:	4456      	addlt	r6, sl
 8017abc:	f10c 0101 	add.w	r1, ip, #1
 8017ac0:	9106      	str	r1, [sp, #24]
 8017ac2:	9a01      	ldr	r2, [sp, #4]
 8017ac4:	8b20      	ldrh	r0, [r4, #24]
 8017ac6:	1992      	adds	r2, r2, r6
 8017ac8:	8b61      	ldrh	r1, [r4, #26]
 8017aca:	9f05      	ldr	r7, [sp, #20]
 8017acc:	9201      	str	r2, [sp, #4]
 8017ace:	bf5b      	ittet	pl
 8017ad0:	eba2 020a 	subpl.w	r2, r2, sl
 8017ad4:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8017ad8:	46e0      	movmi	r8, ip
 8017ada:	9201      	strpl	r2, [sp, #4]
 8017adc:	9a00      	ldr	r2, [sp, #0]
 8017ade:	4440      	add	r0, r8
 8017ae0:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8017ae4:	4443      	add	r3, r8
 8017ae6:	445a      	add	r2, fp
 8017ae8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8017aec:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8017af0:	b200      	sxth	r0, r0
 8017af2:	4417      	add	r7, r2
 8017af4:	b209      	sxth	r1, r1
 8017af6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8017afa:	8320      	strh	r0, [r4, #24]
 8017afc:	8361      	strh	r1, [r4, #26]
 8017afe:	454f      	cmp	r7, r9
 8017b00:	9200      	str	r2, [sp, #0]
 8017b02:	d017      	beq.n	8017b34 <_ZN8touchgfx7Outline10renderLineEiiii+0x230>
 8017b04:	4301      	orrs	r1, r0
 8017b06:	d00d      	beq.n	8017b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8017b08:	f1b8 0f00 	cmp.w	r8, #0
 8017b0c:	db0a      	blt.n	8017b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8017b0e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8017b10:	4541      	cmp	r1, r8
 8017b12:	dd07      	ble.n	8017b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8017b14:	68a0      	ldr	r0, [r4, #8]
 8017b16:	6861      	ldr	r1, [r4, #4]
 8017b18:	4288      	cmp	r0, r1
 8017b1a:	d32d      	bcc.n	8017b78 <_ZN8touchgfx7Outline10renderLineEiiii+0x274>
 8017b1c:	f04f 0101 	mov.w	r1, #1
 8017b20:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
 8017b24:	f04f 0100 	mov.w	r1, #0
 8017b28:	f8bd 2000 	ldrh.w	r2, [sp]
 8017b2c:	82e5      	strh	r5, [r4, #22]
 8017b2e:	82a2      	strh	r2, [r4, #20]
 8017b30:	8321      	strh	r1, [r4, #24]
 8017b32:	8361      	strh	r1, [r4, #26]
 8017b34:	9a00      	ldr	r2, [sp, #0]
 8017b36:	4596      	cmp	lr, r2
 8017b38:	d1c3      	bne.n	8017ac2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1be>
 8017b3a:	9a03      	ldr	r2, [sp, #12]
 8017b3c:	9902      	ldr	r1, [sp, #8]
 8017b3e:	1ad3      	subs	r3, r2, r3
 8017b40:	8b22      	ldrh	r2, [r4, #24]
 8017b42:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8017b46:	441a      	add	r2, r3
 8017b48:	8322      	strh	r2, [r4, #24]
 8017b4a:	9a04      	ldr	r2, [sp, #16]
 8017b4c:	3220      	adds	r2, #32
 8017b4e:	1a52      	subs	r2, r2, r1
 8017b50:	fb03 e302 	mla	r3, r3, r2, lr
 8017b54:	8363      	strh	r3, [r4, #26]
 8017b56:	e74b      	b.n	80179f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 8017b58:	f104 0314 	add.w	r3, r4, #20
 8017b5c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8017b60:	cb03      	ldmia	r3!, {r0, r1}
 8017b62:	f8c8 0000 	str.w	r0, [r8]
 8017b66:	f8c8 1004 	str.w	r1, [r8, #4]
 8017b6a:	6923      	ldr	r3, [r4, #16]
 8017b6c:	3308      	adds	r3, #8
 8017b6e:	6123      	str	r3, [r4, #16]
 8017b70:	68a3      	ldr	r3, [r4, #8]
 8017b72:	3301      	adds	r3, #1
 8017b74:	60a3      	str	r3, [r4, #8]
 8017b76:	e785      	b.n	8017a84 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 8017b78:	f104 0814 	add.w	r8, r4, #20
 8017b7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017b80:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8017b84:	f8c9 0000 	str.w	r0, [r9]
 8017b88:	f8c9 1004 	str.w	r1, [r9, #4]
 8017b8c:	6921      	ldr	r1, [r4, #16]
 8017b8e:	3108      	adds	r1, #8
 8017b90:	6121      	str	r1, [r4, #16]
 8017b92:	68a1      	ldr	r1, [r4, #8]
 8017b94:	3101      	adds	r1, #1
 8017b96:	60a1      	str	r1, [r4, #8]
 8017b98:	e7c4      	b.n	8017b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8017b9a:	1a83      	subs	r3, r0, r2
 8017b9c:	9301      	str	r3, [sp, #4]
 8017b9e:	f1ba 0f00 	cmp.w	sl, #0
 8017ba2:	f040 8095 	bne.w	8017cd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3cc>
 8017ba6:	9a01      	ldr	r2, [sp, #4]
 8017ba8:	004b      	lsls	r3, r1, #1
 8017baa:	114e      	asrs	r6, r1, #5
 8017bac:	8b21      	ldrh	r1, [r4, #24]
 8017bae:	2a00      	cmp	r2, #0
 8017bb0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017bb4:	8b62      	ldrh	r2, [r4, #26]
 8017bb6:	bfa6      	itte	ge
 8017bb8:	f04f 0a20 	movge.w	sl, #32
 8017bbc:	f04f 0801 	movge.w	r8, #1
 8017bc0:	f04f 38ff 	movlt.w	r8, #4294967295
 8017bc4:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8017bc8:	ebaa 0c0c 	sub.w	ip, sl, ip
 8017bcc:	4461      	add	r1, ip
 8017bce:	fb0c 2c03 	mla	ip, ip, r3, r2
 8017bd2:	eb08 0205 	add.w	r2, r8, r5
 8017bd6:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
 8017bda:	b209      	sxth	r1, r1
 8017bdc:	eb06 4702 	add.w	r7, r6, r2, lsl #16
 8017be0:	eb05 4500 	add.w	r5, r5, r0, lsl #16
 8017be4:	8321      	strh	r1, [r4, #24]
 8017be6:	fa0f fc8c 	sxth.w	ip, ip
 8017bea:	42af      	cmp	r7, r5
 8017bec:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8017bf0:	d013      	beq.n	8017c1a <_ZN8touchgfx7Outline10renderLineEiiii+0x316>
 8017bf2:	ea51 010c 	orrs.w	r1, r1, ip
 8017bf6:	d00b      	beq.n	8017c10 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 8017bf8:	2800      	cmp	r0, #0
 8017bfa:	db09      	blt.n	8017c10 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 8017bfc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8017bfe:	4281      	cmp	r1, r0
 8017c00:	dd06      	ble.n	8017c10 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 8017c02:	68a0      	ldr	r0, [r4, #8]
 8017c04:	6861      	ldr	r1, [r4, #4]
 8017c06:	4288      	cmp	r0, r1
 8017c08:	d339      	bcc.n	8017c7e <_ZN8touchgfx7Outline10renderLineEiiii+0x37a>
 8017c0a:	2101      	movs	r1, #1
 8017c0c:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
 8017c10:	2100      	movs	r1, #0
 8017c12:	82a6      	strh	r6, [r4, #20]
 8017c14:	82e2      	strh	r2, [r4, #22]
 8017c16:	8321      	strh	r1, [r4, #24]
 8017c18:	8361      	strh	r1, [r4, #26]
 8017c1a:	ea4f 054a 	mov.w	r5, sl, lsl #1
 8017c1e:	f04f 0c00 	mov.w	ip, #0
 8017c22:	f04f 0b01 	mov.w	fp, #1
 8017c26:	3d20      	subs	r5, #32
 8017c28:	fb05 f703 	mul.w	r7, r5, r3
 8017c2c:	b22d      	sxth	r5, r5
 8017c2e:	b23f      	sxth	r7, r7
 8017c30:	ea45 0107 	orr.w	r1, r5, r7
 8017c34:	9100      	str	r1, [sp, #0]
 8017c36:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017c38:	428a      	cmp	r2, r1
 8017c3a:	d03e      	beq.n	8017cba <_ZN8touchgfx7Outline10renderLineEiiii+0x3b6>
 8017c3c:	4442      	add	r2, r8
 8017c3e:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8017c42:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8017c46:	eb06 4e02 	add.w	lr, r6, r2, lsl #16
 8017c4a:	8325      	strh	r5, [r4, #24]
 8017c4c:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8017c50:	8367      	strh	r7, [r4, #26]
 8017c52:	4586      	cmp	lr, r0
 8017c54:	d0ef      	beq.n	8017c36 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8017c56:	9800      	ldr	r0, [sp, #0]
 8017c58:	b150      	cbz	r0, 8017c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 8017c5a:	2900      	cmp	r1, #0
 8017c5c:	db08      	blt.n	8017c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 8017c5e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8017c60:	4288      	cmp	r0, r1
 8017c62:	dd05      	ble.n	8017c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 8017c64:	68a0      	ldr	r0, [r4, #8]
 8017c66:	6861      	ldr	r1, [r4, #4]
 8017c68:	4288      	cmp	r0, r1
 8017c6a:	d315      	bcc.n	8017c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 8017c6c:	f884 b044 	strb.w	fp, [r4, #68]	@ 0x44
 8017c70:	82a6      	strh	r6, [r4, #20]
 8017c72:	82e2      	strh	r2, [r4, #22]
 8017c74:	f8a4 c018 	strh.w	ip, [r4, #24]
 8017c78:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8017c7c:	e7db      	b.n	8017c36 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8017c7e:	f104 0514 	add.w	r5, r4, #20
 8017c82:	6927      	ldr	r7, [r4, #16]
 8017c84:	cd03      	ldmia	r5!, {r0, r1}
 8017c86:	6038      	str	r0, [r7, #0]
 8017c88:	6079      	str	r1, [r7, #4]
 8017c8a:	6921      	ldr	r1, [r4, #16]
 8017c8c:	3108      	adds	r1, #8
 8017c8e:	6121      	str	r1, [r4, #16]
 8017c90:	68a1      	ldr	r1, [r4, #8]
 8017c92:	3101      	adds	r1, #1
 8017c94:	60a1      	str	r1, [r4, #8]
 8017c96:	e7bb      	b.n	8017c10 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 8017c98:	f104 0e14 	add.w	lr, r4, #20
 8017c9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017ca0:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8017ca4:	f8c9 0000 	str.w	r0, [r9]
 8017ca8:	f8c9 1004 	str.w	r1, [r9, #4]
 8017cac:	6921      	ldr	r1, [r4, #16]
 8017cae:	3108      	adds	r1, #8
 8017cb0:	6121      	str	r1, [r4, #16]
 8017cb2:	68a1      	ldr	r1, [r4, #8]
 8017cb4:	3101      	adds	r1, #1
 8017cb6:	60a1      	str	r1, [r4, #8]
 8017cb8:	e7da      	b.n	8017c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 8017cba:	9a03      	ldr	r2, [sp, #12]
 8017cbc:	8b61      	ldrh	r1, [r4, #26]
 8017cbe:	f1a2 0e20 	sub.w	lr, r2, #32
 8017cc2:	8b22      	ldrh	r2, [r4, #24]
 8017cc4:	44d6      	add	lr, sl
 8017cc6:	4472      	add	r2, lr
 8017cc8:	fb0e 1303 	mla	r3, lr, r3, r1
 8017ccc:	8322      	strh	r2, [r4, #24]
 8017cce:	e741      	b.n	8017b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8017cd0:	9b01      	ldr	r3, [sp, #4]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	db40      	blt.n	8017d58 <_ZN8touchgfx7Outline10renderLineEiiii+0x454>
 8017cd6:	2201      	movs	r2, #1
 8017cd8:	f1cc 0320 	rsb	r3, ip, #32
 8017cdc:	920a      	str	r2, [sp, #40]	@ 0x28
 8017cde:	2220      	movs	r2, #32
 8017ce0:	fb0a f303 	mul.w	r3, sl, r3
 8017ce4:	9202      	str	r2, [sp, #8]
 8017ce6:	9a01      	ldr	r2, [sp, #4]
 8017ce8:	fb93 f6f2 	sdiv	r6, r3, r2
 8017cec:	fb02 3316 	mls	r3, r2, r6, r3
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	9308      	str	r3, [sp, #32]
 8017cf4:	bfbc      	itt	lt
 8017cf6:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8017cfa:	189b      	addlt	r3, r3, r2
 8017cfc:	eb06 0b01 	add.w	fp, r6, r1
 8017d00:	bfb8      	it	lt
 8017d02:	9308      	strlt	r3, [sp, #32]
 8017d04:	ea4f 136b 	mov.w	r3, fp, asr #5
 8017d08:	9304      	str	r3, [sp, #16]
 8017d0a:	9b02      	ldr	r3, [sp, #8]
 8017d0c:	4563      	cmp	r3, ip
 8017d0e:	d13a      	bne.n	8017d86 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8017d10:	9b04      	ldr	r3, [sp, #16]
 8017d12:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8017d16:	eb03 4105 	add.w	r1, r3, r5, lsl #16
 8017d1a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8017d1e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8017d22:	4299      	cmp	r1, r3
 8017d24:	d046      	beq.n	8017db4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 8017d26:	8b63      	ldrh	r3, [r4, #26]
 8017d28:	8b21      	ldrh	r1, [r4, #24]
 8017d2a:	430b      	orrs	r3, r1
 8017d2c:	b21b      	sxth	r3, r3
 8017d2e:	b15b      	cbz	r3, 8017d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 8017d30:	2a00      	cmp	r2, #0
 8017d32:	db09      	blt.n	8017d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 8017d34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017d36:	4293      	cmp	r3, r2
 8017d38:	dd06      	ble.n	8017d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 8017d3a:	68a2      	ldr	r2, [r4, #8]
 8017d3c:	6863      	ldr	r3, [r4, #4]
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	d314      	bcc.n	8017d6c <_ZN8touchgfx7Outline10renderLineEiiii+0x468>
 8017d42:	2301      	movs	r3, #1
 8017d44:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017d48:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017d4c:	82e5      	strh	r5, [r4, #22]
 8017d4e:	82a3      	strh	r3, [r4, #20]
 8017d50:	2300      	movs	r3, #0
 8017d52:	8323      	strh	r3, [r4, #24]
 8017d54:	8363      	strh	r3, [r4, #26]
 8017d56:	e02d      	b.n	8017db4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 8017d58:	9a01      	ldr	r2, [sp, #4]
 8017d5a:	fb0a f30c 	mul.w	r3, sl, ip
 8017d5e:	4252      	negs	r2, r2
 8017d60:	9201      	str	r2, [sp, #4]
 8017d62:	f04f 32ff 	mov.w	r2, #4294967295
 8017d66:	920a      	str	r2, [sp, #40]	@ 0x28
 8017d68:	2200      	movs	r2, #0
 8017d6a:	e7bb      	b.n	8017ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3e0>
 8017d6c:	f104 0314 	add.w	r3, r4, #20
 8017d70:	6922      	ldr	r2, [r4, #16]
 8017d72:	cb03      	ldmia	r3!, {r0, r1}
 8017d74:	6010      	str	r0, [r2, #0]
 8017d76:	6051      	str	r1, [r2, #4]
 8017d78:	6923      	ldr	r3, [r4, #16]
 8017d7a:	3308      	adds	r3, #8
 8017d7c:	6123      	str	r3, [r4, #16]
 8017d7e:	68a3      	ldr	r3, [r4, #8]
 8017d80:	3301      	adds	r3, #1
 8017d82:	60a3      	str	r3, [r4, #8]
 8017d84:	e7e0      	b.n	8017d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 8017d86:	f00b 021f 	and.w	r2, fp, #31
 8017d8a:	ea4f 1e61 	mov.w	lr, r1, asr #5
 8017d8e:	f001 031f 	and.w	r3, r1, #31
 8017d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8017d94:	9a04      	ldr	r2, [sp, #16]
 8017d96:	4596      	cmp	lr, r2
 8017d98:	9a02      	ldr	r2, [sp, #8]
 8017d9a:	eba2 020c 	sub.w	r2, r2, ip
 8017d9e:	f040 80f6 	bne.w	8017f8e <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8017da2:	8b21      	ldrh	r1, [r4, #24]
 8017da4:	4411      	add	r1, r2
 8017da6:	8321      	strh	r1, [r4, #24]
 8017da8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017daa:	440b      	add	r3, r1
 8017dac:	8b61      	ldrh	r1, [r4, #26]
 8017dae:	fb02 1203 	mla	r2, r2, r3, r1
 8017db2:	8362      	strh	r2, [r4, #26]
 8017db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017db6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8017dba:	442b      	add	r3, r5
 8017dbc:	9300      	str	r3, [sp, #0]
 8017dbe:	9a00      	ldr	r2, [sp, #0]
 8017dc0:	9b04      	ldr	r3, [sp, #16]
 8017dc2:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 8017dc6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8017dca:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8017dce:	4298      	cmp	r0, r3
 8017dd0:	d01a      	beq.n	8017e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x504>
 8017dd2:	8b63      	ldrh	r3, [r4, #26]
 8017dd4:	8b20      	ldrh	r0, [r4, #24]
 8017dd6:	4303      	orrs	r3, r0
 8017dd8:	b21b      	sxth	r3, r3
 8017dda:	b163      	cbz	r3, 8017df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 8017ddc:	2900      	cmp	r1, #0
 8017dde:	db0a      	blt.n	8017df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 8017de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017de2:	428b      	cmp	r3, r1
 8017de4:	dd07      	ble.n	8017df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 8017de6:	68a1      	ldr	r1, [r4, #8]
 8017de8:	6863      	ldr	r3, [r4, #4]
 8017dea:	4299      	cmp	r1, r3
 8017dec:	f0c0 819a 	bcc.w	8018124 <_ZN8touchgfx7Outline10renderLineEiiii+0x820>
 8017df0:	2301      	movs	r3, #1
 8017df2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017df6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017dfa:	82a3      	strh	r3, [r4, #20]
 8017dfc:	f8bd 3000 	ldrh.w	r3, [sp]
 8017e00:	82e3      	strh	r3, [r4, #22]
 8017e02:	2300      	movs	r3, #0
 8017e04:	8323      	strh	r3, [r4, #24]
 8017e06:	8363      	strh	r3, [r4, #26]
 8017e08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017e0a:	9a00      	ldr	r2, [sp, #0]
 8017e0c:	4293      	cmp	r3, r2
 8017e0e:	f000 8090 	beq.w	8017f32 <_ZN8touchgfx7Outline10renderLineEiiii+0x62e>
 8017e12:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8017e16:	9901      	ldr	r1, [sp, #4]
 8017e18:	9801      	ldr	r0, [sp, #4]
 8017e1a:	fb93 f1f1 	sdiv	r1, r3, r1
 8017e1e:	fb00 3311 	mls	r3, r0, r1, r3
 8017e22:	9106      	str	r1, [sp, #24]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	9307      	str	r3, [sp, #28]
 8017e28:	da04      	bge.n	8017e34 <_ZN8touchgfx7Outline10renderLineEiiii+0x530>
 8017e2a:	1e4b      	subs	r3, r1, #1
 8017e2c:	9306      	str	r3, [sp, #24]
 8017e2e:	9b07      	ldr	r3, [sp, #28]
 8017e30:	4403      	add	r3, r0
 8017e32:	9307      	str	r3, [sp, #28]
 8017e34:	9b08      	ldr	r3, [sp, #32]
 8017e36:	f04f 0e00 	mov.w	lr, #0
 8017e3a:	9901      	ldr	r1, [sp, #4]
 8017e3c:	1a5b      	subs	r3, r3, r1
 8017e3e:	4659      	mov	r1, fp
 8017e40:	9308      	str	r3, [sp, #32]
 8017e42:	9b02      	ldr	r3, [sp, #8]
 8017e44:	f1c3 0320 	rsb	r3, r3, #32
 8017e48:	930c      	str	r3, [sp, #48]	@ 0x30
 8017e4a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8017e4c:	9b02      	ldr	r3, [sp, #8]
 8017e4e:	1a1b      	subs	r3, r3, r0
 8017e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e52:	9807      	ldr	r0, [sp, #28]
 8017e54:	9b08      	ldr	r3, [sp, #32]
 8017e56:	181b      	adds	r3, r3, r0
 8017e58:	bf58      	it	pl
 8017e5a:	9801      	ldrpl	r0, [sp, #4]
 8017e5c:	9308      	str	r3, [sp, #32]
 8017e5e:	bf54      	ite	pl
 8017e60:	1a1b      	subpl	r3, r3, r0
 8017e62:	9d06      	ldrmi	r5, [sp, #24]
 8017e64:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8017e66:	bf5e      	ittt	pl
 8017e68:	9308      	strpl	r3, [sp, #32]
 8017e6a:	9b06      	ldrpl	r3, [sp, #24]
 8017e6c:	1c5d      	addpl	r5, r3, #1
 8017e6e:	44ab      	add	fp, r5
 8017e70:	ea4f 136b 	mov.w	r3, fp, asr #5
 8017e74:	9304      	str	r3, [sp, #16]
 8017e76:	9b02      	ldr	r3, [sp, #8]
 8017e78:	4283      	cmp	r3, r0
 8017e7a:	f040 816d 	bne.w	8018158 <_ZN8touchgfx7Outline10renderLineEiiii+0x854>
 8017e7e:	9b04      	ldr	r3, [sp, #16]
 8017e80:	9a00      	ldr	r2, [sp, #0]
 8017e82:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8017e86:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 8017e8a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8017e8e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8017e92:	4298      	cmp	r0, r3
 8017e94:	d01c      	beq.n	8017ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 8017e96:	8b63      	ldrh	r3, [r4, #26]
 8017e98:	8b20      	ldrh	r0, [r4, #24]
 8017e9a:	4303      	orrs	r3, r0
 8017e9c:	b21b      	sxth	r3, r3
 8017e9e:	b16b      	cbz	r3, 8017ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 8017ea0:	2900      	cmp	r1, #0
 8017ea2:	db0b      	blt.n	8017ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 8017ea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017ea6:	428b      	cmp	r3, r1
 8017ea8:	dd08      	ble.n	8017ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 8017eaa:	68a1      	ldr	r1, [r4, #8]
 8017eac:	6863      	ldr	r3, [r4, #4]
 8017eae:	4299      	cmp	r1, r3
 8017eb0:	f0c0 8145 	bcc.w	801813e <_ZN8touchgfx7Outline10renderLineEiiii+0x83a>
 8017eb4:	f04f 0301 	mov.w	r3, #1
 8017eb8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017ebc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017ec0:	f8a4 e018 	strh.w	lr, [r4, #24]
 8017ec4:	82a3      	strh	r3, [r4, #20]
 8017ec6:	f8bd 3000 	ldrh.w	r3, [sp]
 8017eca:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8017ece:	82e3      	strh	r3, [r4, #22]
 8017ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017ed2:	9a00      	ldr	r2, [sp, #0]
 8017ed4:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8017ed8:	441a      	add	r2, r3
 8017eda:	9b04      	ldr	r3, [sp, #16]
 8017edc:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 8017ee0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8017ee4:	9200      	str	r2, [sp, #0]
 8017ee6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8017eea:	4298      	cmp	r0, r3
 8017eec:	d01c      	beq.n	8017f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x624>
 8017eee:	8b63      	ldrh	r3, [r4, #26]
 8017ef0:	8b20      	ldrh	r0, [r4, #24]
 8017ef2:	4303      	orrs	r3, r0
 8017ef4:	b21b      	sxth	r3, r3
 8017ef6:	b16b      	cbz	r3, 8017f14 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 8017ef8:	2900      	cmp	r1, #0
 8017efa:	db0b      	blt.n	8017f14 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 8017efc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017efe:	428b      	cmp	r3, r1
 8017f00:	dd08      	ble.n	8017f14 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 8017f02:	68a1      	ldr	r1, [r4, #8]
 8017f04:	6863      	ldr	r3, [r4, #4]
 8017f06:	4299      	cmp	r1, r3
 8017f08:	f0c0 820d 	bcc.w	8018326 <_ZN8touchgfx7Outline10renderLineEiiii+0xa22>
 8017f0c:	f04f 0301 	mov.w	r3, #1
 8017f10:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017f14:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017f18:	f8a4 e018 	strh.w	lr, [r4, #24]
 8017f1c:	82a3      	strh	r3, [r4, #20]
 8017f1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8017f22:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8017f26:	82e3      	strh	r3, [r4, #22]
 8017f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017f2a:	4659      	mov	r1, fp
 8017f2c:	9a00      	ldr	r2, [sp, #0]
 8017f2e:	4293      	cmp	r3, r2
 8017f30:	d18f      	bne.n	8017e52 <_ZN8touchgfx7Outline10renderLineEiiii+0x54e>
 8017f32:	9b02      	ldr	r3, [sp, #8]
 8017f34:	f1c3 0e20 	rsb	lr, r3, #32
 8017f38:	9b05      	ldr	r3, [sp, #20]
 8017f3a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8017f3e:	9b03      	ldr	r3, [sp, #12]
 8017f40:	4573      	cmp	r3, lr
 8017f42:	f040 820a 	bne.w	801835a <_ZN8touchgfx7Outline10renderLineEiiii+0xa56>
 8017f46:	9b00      	ldr	r3, [sp, #0]
 8017f48:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8017f4c:	eb0c 4003 	add.w	r0, ip, r3, lsl #16
 8017f50:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8017f54:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8017f58:	4298      	cmp	r0, r3
 8017f5a:	f43f ad49 	beq.w	80179f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 8017f5e:	8b63      	ldrh	r3, [r4, #26]
 8017f60:	8b20      	ldrh	r0, [r4, #24]
 8017f62:	4303      	orrs	r3, r0
 8017f64:	b21b      	sxth	r3, r3
 8017f66:	b163      	cbz	r3, 8017f82 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 8017f68:	2900      	cmp	r1, #0
 8017f6a:	db0a      	blt.n	8017f82 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 8017f6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017f6e:	428b      	cmp	r3, r1
 8017f70:	dd07      	ble.n	8017f82 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 8017f72:	68a1      	ldr	r1, [r4, #8]
 8017f74:	6863      	ldr	r3, [r4, #4]
 8017f76:	4299      	cmp	r1, r3
 8017f78:	f0c0 81e2 	bcc.w	8018340 <_ZN8touchgfx7Outline10renderLineEiiii+0xa3c>
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017f82:	f8bd 3000 	ldrh.w	r3, [sp]
 8017f86:	f8a4 c014 	strh.w	ip, [r4, #20]
 8017f8a:	82e3      	strh	r3, [r4, #22]
 8017f8c:	e50b      	b.n	80179a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2>
 8017f8e:	2e00      	cmp	r6, #0
 8017f90:	f2c0 80a0 	blt.w	80180d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d0>
 8017f94:	f1c3 0120 	rsb	r1, r3, #32
 8017f98:	434a      	muls	r2, r1
 8017f9a:	2101      	movs	r1, #1
 8017f9c:	9107      	str	r1, [sp, #28]
 8017f9e:	2120      	movs	r1, #32
 8017fa0:	9106      	str	r1, [sp, #24]
 8017fa2:	9906      	ldr	r1, [sp, #24]
 8017fa4:	8b20      	ldrh	r0, [r4, #24]
 8017fa6:	440b      	add	r3, r1
 8017fa8:	8b61      	ldrh	r1, [r4, #26]
 8017faa:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8017fae:	fb92 f7f6 	sdiv	r7, r2, r6
 8017fb2:	fb06 2217 	mls	r2, r6, r7, r2
 8017fb6:	2a00      	cmp	r2, #0
 8017fb8:	bfbc      	itt	lt
 8017fba:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8017fbe:	1992      	addlt	r2, r2, r6
 8017fc0:	fb07 1303 	mla	r3, r7, r3, r1
 8017fc4:	9907      	ldr	r1, [sp, #28]
 8017fc6:	4438      	add	r0, r7
 8017fc8:	b21b      	sxth	r3, r3
 8017fca:	448e      	add	lr, r1
 8017fcc:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8017fd0:	b200      	sxth	r0, r0
 8017fd2:	9300      	str	r3, [sp, #0]
 8017fd4:	f8bd 3000 	ldrh.w	r3, [sp]
 8017fd8:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8017fdc:	8320      	strh	r0, [r4, #24]
 8017fde:	8363      	strh	r3, [r4, #26]
 8017fe0:	042b      	lsls	r3, r5, #16
 8017fe2:	eb0e 0903 	add.w	r9, lr, r3
 8017fe6:	930c      	str	r3, [sp, #48]	@ 0x30
 8017fe8:	45c1      	cmp	r9, r8
 8017fea:	d014      	beq.n	8018016 <_ZN8touchgfx7Outline10renderLineEiiii+0x712>
 8017fec:	9b00      	ldr	r3, [sp, #0]
 8017fee:	4303      	orrs	r3, r0
 8017ff0:	d00b      	beq.n	801800a <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 8017ff2:	2900      	cmp	r1, #0
 8017ff4:	db09      	blt.n	801800a <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 8017ff6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017ff8:	428b      	cmp	r3, r1
 8017ffa:	dd06      	ble.n	801800a <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 8017ffc:	68a1      	ldr	r1, [r4, #8]
 8017ffe:	6863      	ldr	r3, [r4, #4]
 8018000:	4299      	cmp	r1, r3
 8018002:	d36e      	bcc.n	80180e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7de>
 8018004:	2301      	movs	r3, #1
 8018006:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801800a:	2300      	movs	r3, #0
 801800c:	f8a4 e014 	strh.w	lr, [r4, #20]
 8018010:	82e5      	strh	r5, [r4, #22]
 8018012:	8323      	strh	r3, [r4, #24]
 8018014:	8363      	strh	r3, [r4, #26]
 8018016:	9904      	ldr	r1, [sp, #16]
 8018018:	eb0c 0307 	add.w	r3, ip, r7
 801801c:	4571      	cmp	r1, lr
 801801e:	d04b      	beq.n	80180b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b4>
 8018020:	9902      	ldr	r1, [sp, #8]
 8018022:	1b92      	subs	r2, r2, r6
 8018024:	1ac9      	subs	r1, r1, r3
 8018026:	9200      	str	r2, [sp, #0]
 8018028:	440f      	add	r7, r1
 801802a:	017f      	lsls	r7, r7, #5
 801802c:	fb97 fcf6 	sdiv	ip, r7, r6
 8018030:	fb06 771c 	mls	r7, r6, ip, r7
 8018034:	2f00      	cmp	r7, #0
 8018036:	bfbc      	itt	lt
 8018038:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801803c:	19bf      	addlt	r7, r7, r6
 801803e:	f10c 0101 	add.w	r1, ip, #1
 8018042:	910d      	str	r1, [sp, #52]	@ 0x34
 8018044:	9a00      	ldr	r2, [sp, #0]
 8018046:	8b20      	ldrh	r0, [r4, #24]
 8018048:	19d2      	adds	r2, r2, r7
 801804a:	8b61      	ldrh	r1, [r4, #26]
 801804c:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8018050:	9200      	str	r2, [sp, #0]
 8018052:	bf5b      	ittet	pl
 8018054:	1b92      	subpl	r2, r2, r6
 8018056:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	@ 0x34
 801805a:	46e0      	movmi	r8, ip
 801805c:	9200      	strpl	r2, [sp, #0]
 801805e:	9a07      	ldr	r2, [sp, #28]
 8018060:	4440      	add	r0, r8
 8018062:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8018066:	4443      	add	r3, r8
 8018068:	4496      	add	lr, r2
 801806a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801806e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018070:	b200      	sxth	r0, r0
 8018072:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8018076:	4472      	add	r2, lr
 8018078:	b209      	sxth	r1, r1
 801807a:	8320      	strh	r0, [r4, #24]
 801807c:	454a      	cmp	r2, r9
 801807e:	8361      	strh	r1, [r4, #26]
 8018080:	d017      	beq.n	80180b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ae>
 8018082:	ea50 0201 	orrs.w	r2, r0, r1
 8018086:	d00d      	beq.n	80180a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 8018088:	f1b8 0f00 	cmp.w	r8, #0
 801808c:	db0a      	blt.n	80180a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 801808e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8018090:	4541      	cmp	r1, r8
 8018092:	dd07      	ble.n	80180a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 8018094:	68a0      	ldr	r0, [r4, #8]
 8018096:	6861      	ldr	r1, [r4, #4]
 8018098:	4288      	cmp	r0, r1
 801809a:	d332      	bcc.n	8018102 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fe>
 801809c:	f04f 0201 	mov.w	r2, #1
 80180a0:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 80180a4:	f04f 0200 	mov.w	r2, #0
 80180a8:	f8a4 e014 	strh.w	lr, [r4, #20]
 80180ac:	82e5      	strh	r5, [r4, #22]
 80180ae:	8322      	strh	r2, [r4, #24]
 80180b0:	8362      	strh	r2, [r4, #26]
 80180b2:	9904      	ldr	r1, [sp, #16]
 80180b4:	4571      	cmp	r1, lr
 80180b6:	d1c5      	bne.n	8018044 <_ZN8touchgfx7Outline10renderLineEiiii+0x740>
 80180b8:	9a02      	ldr	r2, [sp, #8]
 80180ba:	eba2 0c03 	sub.w	ip, r2, r3
 80180be:	8b23      	ldrh	r3, [r4, #24]
 80180c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80180c2:	4463      	add	r3, ip
 80180c4:	3220      	adds	r2, #32
 80180c6:	8323      	strh	r3, [r4, #24]
 80180c8:	9b06      	ldr	r3, [sp, #24]
 80180ca:	1ad2      	subs	r2, r2, r3
 80180cc:	8b63      	ldrh	r3, [r4, #26]
 80180ce:	fb0c 3302 	mla	r3, ip, r2, r3
 80180d2:	e63f      	b.n	8017d54 <_ZN8touchgfx7Outline10renderLineEiiii+0x450>
 80180d4:	f04f 31ff 	mov.w	r1, #4294967295
 80180d8:	435a      	muls	r2, r3
 80180da:	4276      	negs	r6, r6
 80180dc:	9107      	str	r1, [sp, #28]
 80180de:	2100      	movs	r1, #0
 80180e0:	e75e      	b.n	8017fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x69c>
 80180e2:	f104 0314 	add.w	r3, r4, #20
 80180e6:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80180ea:	cb03      	ldmia	r3!, {r0, r1}
 80180ec:	f8c8 0000 	str.w	r0, [r8]
 80180f0:	f8c8 1004 	str.w	r1, [r8, #4]
 80180f4:	6923      	ldr	r3, [r4, #16]
 80180f6:	3308      	adds	r3, #8
 80180f8:	6123      	str	r3, [r4, #16]
 80180fa:	68a3      	ldr	r3, [r4, #8]
 80180fc:	3301      	adds	r3, #1
 80180fe:	60a3      	str	r3, [r4, #8]
 8018100:	e783      	b.n	801800a <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 8018102:	f104 0814 	add.w	r8, r4, #20
 8018106:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801810a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801810e:	f8c9 0000 	str.w	r0, [r9]
 8018112:	f8c9 1004 	str.w	r1, [r9, #4]
 8018116:	6921      	ldr	r1, [r4, #16]
 8018118:	3108      	adds	r1, #8
 801811a:	6121      	str	r1, [r4, #16]
 801811c:	68a1      	ldr	r1, [r4, #8]
 801811e:	3101      	adds	r1, #1
 8018120:	60a1      	str	r1, [r4, #8]
 8018122:	e7bf      	b.n	80180a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 8018124:	f104 0314 	add.w	r3, r4, #20
 8018128:	6925      	ldr	r5, [r4, #16]
 801812a:	cb03      	ldmia	r3!, {r0, r1}
 801812c:	6028      	str	r0, [r5, #0]
 801812e:	6069      	str	r1, [r5, #4]
 8018130:	6923      	ldr	r3, [r4, #16]
 8018132:	3308      	adds	r3, #8
 8018134:	6123      	str	r3, [r4, #16]
 8018136:	68a3      	ldr	r3, [r4, #8]
 8018138:	3301      	adds	r3, #1
 801813a:	60a3      	str	r3, [r4, #8]
 801813c:	e65b      	b.n	8017df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 801813e:	f104 0314 	add.w	r3, r4, #20
 8018142:	6925      	ldr	r5, [r4, #16]
 8018144:	cb03      	ldmia	r3!, {r0, r1}
 8018146:	6028      	str	r0, [r5, #0]
 8018148:	6069      	str	r1, [r5, #4]
 801814a:	6923      	ldr	r3, [r4, #16]
 801814c:	3308      	adds	r3, #8
 801814e:	6123      	str	r3, [r4, #16]
 8018150:	68a3      	ldr	r3, [r4, #8]
 8018152:	3301      	adds	r3, #1
 8018154:	60a3      	str	r3, [r4, #8]
 8018156:	e6b1      	b.n	8017ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 8018158:	f00b 031f 	and.w	r3, fp, #31
 801815c:	114f      	asrs	r7, r1, #5
 801815e:	f001 011f 	and.w	r1, r1, #31
 8018162:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018164:	9b04      	ldr	r3, [sp, #16]
 8018166:	429f      	cmp	r7, r3
 8018168:	d10a      	bne.n	8018180 <_ZN8touchgfx7Outline10renderLineEiiii+0x87c>
 801816a:	8b23      	ldrh	r3, [r4, #24]
 801816c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801816e:	4403      	add	r3, r0
 8018170:	8323      	strh	r3, [r4, #24]
 8018172:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018174:	4419      	add	r1, r3
 8018176:	8b63      	ldrh	r3, [r4, #26]
 8018178:	fb00 3101 	mla	r1, r0, r1, r3
 801817c:	8361      	strh	r1, [r4, #26]
 801817e:	e6a7      	b.n	8017ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 8018180:	2d00      	cmp	r5, #0
 8018182:	f2c0 80a6 	blt.w	80182d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ce>
 8018186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018188:	f1c1 0320 	rsb	r3, r1, #32
 801818c:	4343      	muls	r3, r0
 801818e:	2001      	movs	r0, #1
 8018190:	900e      	str	r0, [sp, #56]	@ 0x38
 8018192:	2020      	movs	r0, #32
 8018194:	900d      	str	r0, [sp, #52]	@ 0x34
 8018196:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018198:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 801819c:	4411      	add	r1, r2
 801819e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80181a0:	8b20      	ldrh	r0, [r4, #24]
 80181a2:	4417      	add	r7, r2
 80181a4:	9a00      	ldr	r2, [sp, #0]
 80181a6:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80181aa:	0412      	lsls	r2, r2, #16
 80181ac:	fb93 f6f5 	sdiv	r6, r3, r5
 80181b0:	fb05 3316 	mls	r3, r5, r6, r3
 80181b4:	eb07 0902 	add.w	r9, r7, r2
 80181b8:	9210      	str	r2, [sp, #64]	@ 0x40
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	bfbc      	itt	lt
 80181be:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80181c2:	195b      	addlt	r3, r3, r5
 80181c4:	fb06 c101 	mla	r1, r6, r1, ip
 80181c8:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 80181cc:	4430      	add	r0, r6
 80181ce:	eb08 480c 	add.w	r8, r8, ip, lsl #16
 80181d2:	b200      	sxth	r0, r0
 80181d4:	b209      	sxth	r1, r1
 80181d6:	45c1      	cmp	r9, r8
 80181d8:	8320      	strh	r0, [r4, #24]
 80181da:	8361      	strh	r1, [r4, #26]
 80181dc:	d018      	beq.n	8018210 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 80181de:	ea50 0201 	orrs.w	r2, r0, r1
 80181e2:	d00d      	beq.n	8018200 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 80181e4:	f1bc 0f00 	cmp.w	ip, #0
 80181e8:	db0a      	blt.n	8018200 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 80181ea:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80181ec:	4561      	cmp	r1, ip
 80181ee:	dd07      	ble.n	8018200 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 80181f0:	68a0      	ldr	r0, [r4, #8]
 80181f2:	6861      	ldr	r1, [r4, #4]
 80181f4:	4288      	cmp	r0, r1
 80181f6:	d374      	bcc.n	80182e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 80181f8:	f04f 0201 	mov.w	r2, #1
 80181fc:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8018200:	f8bd 2000 	ldrh.w	r2, [sp]
 8018204:	82a7      	strh	r7, [r4, #20]
 8018206:	82e2      	strh	r2, [r4, #22]
 8018208:	f8a4 e018 	strh.w	lr, [r4, #24]
 801820c:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8018210:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018212:	eb02 0c06 	add.w	ip, r2, r6
 8018216:	9a04      	ldr	r2, [sp, #16]
 8018218:	42ba      	cmp	r2, r7
 801821a:	d04a      	beq.n	80182b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 801821c:	9a02      	ldr	r2, [sp, #8]
 801821e:	1b5b      	subs	r3, r3, r5
 8018220:	eba2 010c 	sub.w	r1, r2, ip
 8018224:	440e      	add	r6, r1
 8018226:	0176      	lsls	r6, r6, #5
 8018228:	fb96 f8f5 	sdiv	r8, r6, r5
 801822c:	fb05 6618 	mls	r6, r5, r8, r6
 8018230:	2e00      	cmp	r6, #0
 8018232:	bfbc      	itt	lt
 8018234:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018238:	1976      	addlt	r6, r6, r5
 801823a:	f108 0201 	add.w	r2, r8, #1
 801823e:	9211      	str	r2, [sp, #68]	@ 0x44
 8018240:	199b      	adds	r3, r3, r6
 8018242:	8b20      	ldrh	r0, [r4, #24]
 8018244:	8b61      	ldrh	r1, [r4, #26]
 8018246:	bf54      	ite	pl
 8018248:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	@ 0x44
 801824c:	46c1      	movmi	r9, r8
 801824e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018250:	bf58      	it	pl
 8018252:	1b5b      	subpl	r3, r3, r5
 8018254:	4448      	add	r0, r9
 8018256:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 801825a:	4417      	add	r7, r2
 801825c:	44cc      	add	ip, r9
 801825e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018260:	b200      	sxth	r0, r0
 8018262:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8018266:	b209      	sxth	r1, r1
 8018268:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 801826c:	443a      	add	r2, r7
 801826e:	8320      	strh	r0, [r4, #24]
 8018270:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8018274:	8361      	strh	r1, [r4, #26]
 8018276:	4552      	cmp	r2, sl
 8018278:	d018      	beq.n	80182ac <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 801827a:	ea50 0201 	orrs.w	r2, r0, r1
 801827e:	d00d      	beq.n	801829c <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8018280:	f1b9 0f00 	cmp.w	r9, #0
 8018284:	db0a      	blt.n	801829c <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8018286:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8018288:	4549      	cmp	r1, r9
 801828a:	dd07      	ble.n	801829c <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 801828c:	68a0      	ldr	r0, [r4, #8]
 801828e:	6861      	ldr	r1, [r4, #4]
 8018290:	4288      	cmp	r0, r1
 8018292:	d337      	bcc.n	8018304 <_ZN8touchgfx7Outline10renderLineEiiii+0xa00>
 8018294:	f04f 0201 	mov.w	r2, #1
 8018298:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 801829c:	f8bd 2000 	ldrh.w	r2, [sp]
 80182a0:	82a7      	strh	r7, [r4, #20]
 80182a2:	82e2      	strh	r2, [r4, #22]
 80182a4:	f8a4 e018 	strh.w	lr, [r4, #24]
 80182a8:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80182ac:	9a04      	ldr	r2, [sp, #16]
 80182ae:	42ba      	cmp	r2, r7
 80182b0:	d1c6      	bne.n	8018240 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 80182b2:	9b02      	ldr	r3, [sp, #8]
 80182b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80182b6:	eba3 0c0c 	sub.w	ip, r3, ip
 80182ba:	8b23      	ldrh	r3, [r4, #24]
 80182bc:	3120      	adds	r1, #32
 80182be:	4463      	add	r3, ip
 80182c0:	8323      	strh	r3, [r4, #24]
 80182c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80182c4:	1ac9      	subs	r1, r1, r3
 80182c6:	8b63      	ldrh	r3, [r4, #26]
 80182c8:	fb0c 3c01 	mla	ip, ip, r1, r3
 80182cc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80182d0:	e5fe      	b.n	8017ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 80182d2:	f04f 30ff 	mov.w	r0, #4294967295
 80182d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182d8:	426d      	negs	r5, r5
 80182da:	900e      	str	r0, [sp, #56]	@ 0x38
 80182dc:	2000      	movs	r0, #0
 80182de:	434b      	muls	r3, r1
 80182e0:	e758      	b.n	8018194 <_ZN8touchgfx7Outline10renderLineEiiii+0x890>
 80182e2:	f104 0c14 	add.w	ip, r4, #20
 80182e6:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80182ea:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80182ee:	f8c8 0000 	str.w	r0, [r8]
 80182f2:	f8c8 1004 	str.w	r1, [r8, #4]
 80182f6:	6921      	ldr	r1, [r4, #16]
 80182f8:	3108      	adds	r1, #8
 80182fa:	6121      	str	r1, [r4, #16]
 80182fc:	68a1      	ldr	r1, [r4, #8]
 80182fe:	3101      	adds	r1, #1
 8018300:	60a1      	str	r1, [r4, #8]
 8018302:	e77d      	b.n	8018200 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 8018304:	f104 0914 	add.w	r9, r4, #20
 8018308:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801830c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8018310:	f8ca 0000 	str.w	r0, [sl]
 8018314:	f8ca 1004 	str.w	r1, [sl, #4]
 8018318:	6921      	ldr	r1, [r4, #16]
 801831a:	3108      	adds	r1, #8
 801831c:	6121      	str	r1, [r4, #16]
 801831e:	68a1      	ldr	r1, [r4, #8]
 8018320:	3101      	adds	r1, #1
 8018322:	60a1      	str	r1, [r4, #8]
 8018324:	e7ba      	b.n	801829c <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8018326:	f104 0314 	add.w	r3, r4, #20
 801832a:	6925      	ldr	r5, [r4, #16]
 801832c:	cb03      	ldmia	r3!, {r0, r1}
 801832e:	6028      	str	r0, [r5, #0]
 8018330:	6069      	str	r1, [r5, #4]
 8018332:	6923      	ldr	r3, [r4, #16]
 8018334:	3308      	adds	r3, #8
 8018336:	6123      	str	r3, [r4, #16]
 8018338:	68a3      	ldr	r3, [r4, #8]
 801833a:	3301      	adds	r3, #1
 801833c:	60a3      	str	r3, [r4, #8]
 801833e:	e5e9      	b.n	8017f14 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 8018340:	f104 0314 	add.w	r3, r4, #20
 8018344:	6925      	ldr	r5, [r4, #16]
 8018346:	cb03      	ldmia	r3!, {r0, r1}
 8018348:	6028      	str	r0, [r5, #0]
 801834a:	6069      	str	r1, [r5, #4]
 801834c:	6923      	ldr	r3, [r4, #16]
 801834e:	3308      	adds	r3, #8
 8018350:	6123      	str	r3, [r4, #16]
 8018352:	68a3      	ldr	r3, [r4, #8]
 8018354:	3301      	adds	r3, #1
 8018356:	60a3      	str	r3, [r4, #8]
 8018358:	e613      	b.n	8017f82 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 801835a:	9b05      	ldr	r3, [sp, #20]
 801835c:	ea4f 176b 	mov.w	r7, fp, asr #5
 8018360:	f00b 011f 	and.w	r1, fp, #31
 8018364:	f003 031f 	and.w	r3, r3, #31
 8018368:	4567      	cmp	r7, ip
 801836a:	9302      	str	r3, [sp, #8]
 801836c:	9b03      	ldr	r3, [sp, #12]
 801836e:	eba3 060e 	sub.w	r6, r3, lr
 8018372:	d10a      	bne.n	801838a <_ZN8touchgfx7Outline10renderLineEiiii+0xa86>
 8018374:	8b23      	ldrh	r3, [r4, #24]
 8018376:	4433      	add	r3, r6
 8018378:	8323      	strh	r3, [r4, #24]
 801837a:	9b02      	ldr	r3, [sp, #8]
 801837c:	4419      	add	r1, r3
 801837e:	8b63      	ldrh	r3, [r4, #26]
 8018380:	fb06 3601 	mla	r6, r6, r1, r3
 8018384:	8366      	strh	r6, [r4, #26]
 8018386:	f7ff bb33 	b.w	80179f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801838a:	9b05      	ldr	r3, [sp, #20]
 801838c:	ebb3 030b 	subs.w	r3, r3, fp
 8018390:	f100 809f 	bmi.w	80184d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xbce>
 8018394:	f1c1 0020 	rsb	r0, r1, #32
 8018398:	2201      	movs	r2, #1
 801839a:	f04f 0b20 	mov.w	fp, #32
 801839e:	4346      	muls	r6, r0
 80183a0:	9201      	str	r2, [sp, #4]
 80183a2:	9a01      	ldr	r2, [sp, #4]
 80183a4:	4459      	add	r1, fp
 80183a6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80183aa:	4417      	add	r7, r2
 80183ac:	9a00      	ldr	r2, [sp, #0]
 80183ae:	8b20      	ldrh	r0, [r4, #24]
 80183b0:	0412      	lsls	r2, r2, #16
 80183b2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80183b6:	fb96 f5f3 	sdiv	r5, r6, r3
 80183ba:	fb03 6615 	mls	r6, r3, r5, r6
 80183be:	eb07 0a02 	add.w	sl, r7, r2
 80183c2:	9204      	str	r2, [sp, #16]
 80183c4:	2e00      	cmp	r6, #0
 80183c6:	bfbc      	itt	lt
 80183c8:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80183cc:	18f6      	addlt	r6, r6, r3
 80183ce:	fb05 8101 	mla	r1, r5, r1, r8
 80183d2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80183d6:	4428      	add	r0, r5
 80183d8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80183dc:	b200      	sxth	r0, r0
 80183de:	b209      	sxth	r1, r1
 80183e0:	45ca      	cmp	sl, r9
 80183e2:	8320      	strh	r0, [r4, #24]
 80183e4:	8361      	strh	r1, [r4, #26]
 80183e6:	d016      	beq.n	8018416 <_ZN8touchgfx7Outline10renderLineEiiii+0xb12>
 80183e8:	ea50 0201 	orrs.w	r2, r0, r1
 80183ec:	d00c      	beq.n	8018408 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80183ee:	f1b8 0f00 	cmp.w	r8, #0
 80183f2:	db09      	blt.n	8018408 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80183f4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80183f6:	4541      	cmp	r1, r8
 80183f8:	dd06      	ble.n	8018408 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80183fa:	68a0      	ldr	r0, [r4, #8]
 80183fc:	6861      	ldr	r1, [r4, #4]
 80183fe:	4288      	cmp	r0, r1
 8018400:	d36f      	bcc.n	80184e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xbde>
 8018402:	2101      	movs	r1, #1
 8018404:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
 8018408:	2100      	movs	r1, #0
 801840a:	f8bd 2000 	ldrh.w	r2, [sp]
 801840e:	82a7      	strh	r7, [r4, #20]
 8018410:	82e2      	strh	r2, [r4, #22]
 8018412:	8321      	strh	r1, [r4, #24]
 8018414:	8361      	strh	r1, [r4, #26]
 8018416:	45bc      	cmp	ip, r7
 8018418:	44ae      	add	lr, r5
 801841a:	d049      	beq.n	80184b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbac>
 801841c:	9a03      	ldr	r2, [sp, #12]
 801841e:	1af6      	subs	r6, r6, r3
 8018420:	eba2 010e 	sub.w	r1, r2, lr
 8018424:	440d      	add	r5, r1
 8018426:	016d      	lsls	r5, r5, #5
 8018428:	fb95 f8f3 	sdiv	r8, r5, r3
 801842c:	fb03 5518 	mls	r5, r3, r8, r5
 8018430:	2d00      	cmp	r5, #0
 8018432:	bfbc      	itt	lt
 8018434:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018438:	18ed      	addlt	r5, r5, r3
 801843a:	f108 0201 	add.w	r2, r8, #1
 801843e:	9205      	str	r2, [sp, #20]
 8018440:	1976      	adds	r6, r6, r5
 8018442:	8b20      	ldrh	r0, [r4, #24]
 8018444:	8b61      	ldrh	r1, [r4, #26]
 8018446:	bf54      	ite	pl
 8018448:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 801844c:	46c1      	movmi	r9, r8
 801844e:	9a01      	ldr	r2, [sp, #4]
 8018450:	bf58      	it	pl
 8018452:	1af6      	subpl	r6, r6, r3
 8018454:	4448      	add	r0, r9
 8018456:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 801845a:	4417      	add	r7, r2
 801845c:	44ce      	add	lr, r9
 801845e:	9a04      	ldr	r2, [sp, #16]
 8018460:	b200      	sxth	r0, r0
 8018462:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8018466:	b209      	sxth	r1, r1
 8018468:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 801846c:	443a      	add	r2, r7
 801846e:	8320      	strh	r0, [r4, #24]
 8018470:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8018474:	8361      	strh	r1, [r4, #26]
 8018476:	4552      	cmp	r2, sl
 8018478:	d018      	beq.n	80184ac <_ZN8touchgfx7Outline10renderLineEiiii+0xba8>
 801847a:	ea50 0201 	orrs.w	r2, r0, r1
 801847e:	d00d      	beq.n	801849c <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 8018480:	f1b9 0f00 	cmp.w	r9, #0
 8018484:	db0a      	blt.n	801849c <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 8018486:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8018488:	4549      	cmp	r1, r9
 801848a:	dd07      	ble.n	801849c <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 801848c:	68a0      	ldr	r0, [r4, #8]
 801848e:	6861      	ldr	r1, [r4, #4]
 8018490:	4288      	cmp	r0, r1
 8018492:	d337      	bcc.n	8018504 <_ZN8touchgfx7Outline10renderLineEiiii+0xc00>
 8018494:	f04f 0201 	mov.w	r2, #1
 8018498:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 801849c:	f8bd 2000 	ldrh.w	r2, [sp]
 80184a0:	82a7      	strh	r7, [r4, #20]
 80184a2:	82e2      	strh	r2, [r4, #22]
 80184a4:	f04f 0200 	mov.w	r2, #0
 80184a8:	8322      	strh	r2, [r4, #24]
 80184aa:	8362      	strh	r2, [r4, #26]
 80184ac:	45bc      	cmp	ip, r7
 80184ae:	d1c7      	bne.n	8018440 <_ZN8touchgfx7Outline10renderLineEiiii+0xb3c>
 80184b0:	9b03      	ldr	r3, [sp, #12]
 80184b2:	8b62      	ldrh	r2, [r4, #26]
 80184b4:	eba3 0e0e 	sub.w	lr, r3, lr
 80184b8:	8b23      	ldrh	r3, [r4, #24]
 80184ba:	4473      	add	r3, lr
 80184bc:	8323      	strh	r3, [r4, #24]
 80184be:	9b02      	ldr	r3, [sp, #8]
 80184c0:	3320      	adds	r3, #32
 80184c2:	eba3 030b 	sub.w	r3, r3, fp
 80184c6:	fb0e 2e03 	mla	lr, lr, r3, r2
 80184ca:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80184ce:	f7ff ba8f 	b.w	80179f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 80184d2:	f04f 32ff 	mov.w	r2, #4294967295
 80184d6:	434e      	muls	r6, r1
 80184d8:	425b      	negs	r3, r3
 80184da:	f04f 0b00 	mov.w	fp, #0
 80184de:	9201      	str	r2, [sp, #4]
 80184e0:	e75f      	b.n	80183a2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa9e>
 80184e2:	f104 0814 	add.w	r8, r4, #20
 80184e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80184ea:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80184ee:	f8c9 0000 	str.w	r0, [r9]
 80184f2:	f8c9 1004 	str.w	r1, [r9, #4]
 80184f6:	6921      	ldr	r1, [r4, #16]
 80184f8:	3108      	adds	r1, #8
 80184fa:	6121      	str	r1, [r4, #16]
 80184fc:	68a1      	ldr	r1, [r4, #8]
 80184fe:	3101      	adds	r1, #1
 8018500:	60a1      	str	r1, [r4, #8]
 8018502:	e781      	b.n	8018408 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8018504:	f104 0914 	add.w	r9, r4, #20
 8018508:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801850c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8018510:	f8ca 0000 	str.w	r0, [sl]
 8018514:	f8ca 1004 	str.w	r1, [sl, #4]
 8018518:	6921      	ldr	r1, [r4, #16]
 801851a:	3108      	adds	r1, #8
 801851c:	6121      	str	r1, [r4, #16]
 801851e:	68a1      	ldr	r1, [r4, #8]
 8018520:	3101      	adds	r1, #1
 8018522:	60a1      	str	r1, [r4, #8]
 8018524:	e7ba      	b.n	801849c <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>

08018526 <_ZN8touchgfx7Outline6lineToEii>:
 8018526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018528:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801852a:	4604      	mov	r4, r0
 801852c:	460d      	mov	r5, r1
 801852e:	4616      	mov	r6, r2
 8018530:	079b      	lsls	r3, r3, #30
 8018532:	d526      	bpl.n	8018582 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8018534:	6a02      	ldr	r2, [r0, #32]
 8018536:	69c1      	ldr	r1, [r0, #28]
 8018538:	ea86 0302 	eor.w	r3, r6, r2
 801853c:	ea85 0001 	eor.w	r0, r5, r1
 8018540:	4303      	orrs	r3, r0
 8018542:	d01e      	beq.n	8018582 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8018544:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018546:	114b      	asrs	r3, r1, #5
 8018548:	9600      	str	r6, [sp, #0]
 801854a:	4283      	cmp	r3, r0
 801854c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801854e:	bfb8      	it	lt
 8018550:	62e3      	strlt	r3, [r4, #44]	@ 0x2c
 8018552:	3301      	adds	r3, #1
 8018554:	4283      	cmp	r3, r0
 8018556:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018558:	bfc8      	it	gt
 801855a:	6363      	strgt	r3, [r4, #52]	@ 0x34
 801855c:	116b      	asrs	r3, r5, #5
 801855e:	4283      	cmp	r3, r0
 8018560:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8018562:	bfb8      	it	lt
 8018564:	62e3      	strlt	r3, [r4, #44]	@ 0x2c
 8018566:	3301      	adds	r3, #1
 8018568:	4283      	cmp	r3, r0
 801856a:	4620      	mov	r0, r4
 801856c:	bfc8      	it	gt
 801856e:	6363      	strgt	r3, [r4, #52]	@ 0x34
 8018570:	462b      	mov	r3, r5
 8018572:	f7ff f9c7 	bl	8017904 <_ZN8touchgfx7Outline10renderLineEiiii>
 8018576:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018578:	61e5      	str	r5, [r4, #28]
 801857a:	f043 0301 	orr.w	r3, r3, #1
 801857e:	6226      	str	r6, [r4, #32]
 8018580:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018582:	b002      	add	sp, #8
 8018584:	bd70      	pop	{r4, r5, r6, pc}

08018586 <_ZN8touchgfx7Outline6moveToEii>:
 8018586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018588:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801858a:	4615      	mov	r5, r2
 801858c:	4604      	mov	r4, r0
 801858e:	460e      	mov	r6, r1
 8018590:	079a      	lsls	r2, r3, #30
 8018592:	d401      	bmi.n	8018598 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8018594:	f7ff f970 	bl	8017878 <_ZN8touchgfx7Outline5resetEv>
 8018598:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801859a:	07db      	lsls	r3, r3, #31
 801859c:	d504      	bpl.n	80185a8 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801859e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80185a0:	4620      	mov	r0, r4
 80185a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80185a4:	f7ff ffbf 	bl	8018526 <_ZN8touchgfx7Outline6lineToEii>
 80185a8:	1177      	asrs	r7, r6, #5
 80185aa:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80185ae:	116a      	asrs	r2, r5, #5
 80185b0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80185b4:	eb07 4002 	add.w	r0, r7, r2, lsl #16
 80185b8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80185bc:	4298      	cmp	r0, r3
 80185be:	d015      	beq.n	80185ec <_ZN8touchgfx7Outline6moveToEii+0x66>
 80185c0:	8b63      	ldrh	r3, [r4, #26]
 80185c2:	8b20      	ldrh	r0, [r4, #24]
 80185c4:	4303      	orrs	r3, r0
 80185c6:	b21b      	sxth	r3, r3
 80185c8:	b15b      	cbz	r3, 80185e2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80185ca:	2900      	cmp	r1, #0
 80185cc:	db09      	blt.n	80185e2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80185ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80185d0:	428b      	cmp	r3, r1
 80185d2:	dd06      	ble.n	80185e2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80185d4:	68a1      	ldr	r1, [r4, #8]
 80185d6:	6863      	ldr	r3, [r4, #4]
 80185d8:	4299      	cmp	r1, r3
 80185da:	d30c      	bcc.n	80185f6 <_ZN8touchgfx7Outline6moveToEii+0x70>
 80185dc:	2301      	movs	r3, #1
 80185de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80185e2:	2300      	movs	r3, #0
 80185e4:	82a7      	strh	r7, [r4, #20]
 80185e6:	82e2      	strh	r2, [r4, #22]
 80185e8:	8323      	strh	r3, [r4, #24]
 80185ea:	8363      	strh	r3, [r4, #26]
 80185ec:	61e6      	str	r6, [r4, #28]
 80185ee:	6266      	str	r6, [r4, #36]	@ 0x24
 80185f0:	6225      	str	r5, [r4, #32]
 80185f2:	62a5      	str	r5, [r4, #40]	@ 0x28
 80185f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185f6:	f104 0314 	add.w	r3, r4, #20
 80185fa:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80185fe:	cb03      	ldmia	r3!, {r0, r1}
 8018600:	f8ce 0000 	str.w	r0, [lr]
 8018604:	f8ce 1004 	str.w	r1, [lr, #4]
 8018608:	6923      	ldr	r3, [r4, #16]
 801860a:	3308      	adds	r3, #8
 801860c:	6123      	str	r3, [r4, #16]
 801860e:	68a3      	ldr	r3, [r4, #8]
 8018610:	3301      	adds	r3, #1
 8018612:	60a3      	str	r3, [r4, #8]
 8018614:	e7e5      	b.n	80185e2 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08018616 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8018616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801861a:	b0d1      	sub	sp, #324	@ 0x144
 801861c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018620:	466c      	mov	r4, sp
 8018622:	1a0d      	subs	r5, r1, r0
 8018624:	f100 0208 	add.w	r2, r0, #8
 8018628:	2d4f      	cmp	r5, #79	@ 0x4f
 801862a:	f340 80bd 	ble.w	80187a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x192>
 801862e:	112d      	asrs	r5, r5, #4
 8018630:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018634:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018638:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 801863c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8018640:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018644:	681e      	ldr	r6, [r3, #0]
 8018646:	6006      	str	r6, [r0, #0]
 8018648:	685e      	ldr	r6, [r3, #4]
 801864a:	6046      	str	r6, [r0, #4]
 801864c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8018650:	f8a3 e004 	strh.w	lr, [r3, #4]
 8018654:	f8a3 c002 	strh.w	ip, [r3, #2]
 8018658:	80df      	strh	r7, [r3, #6]
 801865a:	f1a1 0308 	sub.w	r3, r1, #8
 801865e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8018662:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8018666:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801866a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801866e:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 8018672:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8018676:	45ae      	cmp	lr, r5
 8018678:	dd0f      	ble.n	801869a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 801867a:	681d      	ldr	r5, [r3, #0]
 801867c:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8018680:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8018684:	6015      	str	r5, [r2, #0]
 8018686:	685d      	ldr	r5, [r3, #4]
 8018688:	6055      	str	r5, [r2, #4]
 801868a:	f821 7c08 	strh.w	r7, [r1, #-8]
 801868e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8018692:	f821 cc04 	strh.w	ip, [r1, #-4]
 8018696:	f821 ec02 	strh.w	lr, [r1, #-2]
 801869a:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 801869e:	f9b0 7000 	ldrsh.w	r7, [r0]
 80186a2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80186a6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80186aa:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80186ae:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 80186b2:	4575      	cmp	r5, lr
 80186b4:	dd0d      	ble.n	80186d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80186b6:	6815      	ldr	r5, [r2, #0]
 80186b8:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80186bc:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80186c0:	6005      	str	r5, [r0, #0]
 80186c2:	6855      	ldr	r5, [r2, #4]
 80186c4:	8107      	strh	r7, [r0, #8]
 80186c6:	6045      	str	r5, [r0, #4]
 80186c8:	8146      	strh	r6, [r0, #10]
 80186ca:	f8a0 c00c 	strh.w	ip, [r0, #12]
 80186ce:	f8a0 e00e 	strh.w	lr, [r0, #14]
 80186d2:	f9b0 7000 	ldrsh.w	r7, [r0]
 80186d6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80186da:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 80186de:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80186e2:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 80186e6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80186ea:	45ae      	cmp	lr, r5
 80186ec:	dd0f      	ble.n	801870e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80186ee:	681d      	ldr	r5, [r3, #0]
 80186f0:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80186f4:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80186f8:	6005      	str	r5, [r0, #0]
 80186fa:	685d      	ldr	r5, [r3, #4]
 80186fc:	6045      	str	r5, [r0, #4]
 80186fe:	f821 7c08 	strh.w	r7, [r1, #-8]
 8018702:	f821 6c06 	strh.w	r6, [r1, #-6]
 8018706:	f821 cc04 	strh.w	ip, [r1, #-4]
 801870a:	f821 ec02 	strh.w	lr, [r1, #-2]
 801870e:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8018712:	f102 0508 	add.w	r5, r2, #8
 8018716:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 801871a:	f9b0 c000 	ldrsh.w	ip, [r0]
 801871e:	462f      	mov	r7, r5
 8018720:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8018724:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8018728:	eb0c 4a0e 	add.w	sl, ip, lr, lsl #16
 801872c:	45b2      	cmp	sl, r6
 801872e:	dc18      	bgt.n	8018762 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8018730:	3b08      	subs	r3, #8
 8018732:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8018736:	f9b3 6000 	ldrsh.w	r6, [r3]
 801873a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 801873e:	45b2      	cmp	sl, r6
 8018740:	dbf6      	blt.n	8018730 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8018742:	42ab      	cmp	r3, r5
 8018744:	681e      	ldr	r6, [r3, #0]
 8018746:	d30e      	bcc.n	8018766 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8018748:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 801874c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8018750:	602e      	str	r6, [r5, #0]
 8018752:	685e      	ldr	r6, [r3, #4]
 8018754:	606e      	str	r6, [r5, #4]
 8018756:	f8a3 9000 	strh.w	r9, [r3]
 801875a:	f8a3 8002 	strh.w	r8, [r3, #2]
 801875e:	809f      	strh	r7, [r3, #4]
 8018760:	80da      	strh	r2, [r3, #6]
 8018762:	462a      	mov	r2, r5
 8018764:	e7d3      	b.n	801870e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8018766:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801876a:	6006      	str	r6, [r0, #0]
 801876c:	685e      	ldr	r6, [r3, #4]
 801876e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8018772:	6046      	str	r6, [r0, #4]
 8018774:	1a1e      	subs	r6, r3, r0
 8018776:	80da      	strh	r2, [r3, #6]
 8018778:	1b4a      	subs	r2, r1, r5
 801877a:	f8a3 c000 	strh.w	ip, [r3]
 801877e:	10d2      	asrs	r2, r2, #3
 8018780:	f8a3 e002 	strh.w	lr, [r3, #2]
 8018784:	f8a3 8004 	strh.w	r8, [r3, #4]
 8018788:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 801878c:	bfb5      	itete	lt
 801878e:	e884 0009 	stmialt.w	r4, {r0, r3}
 8018792:	4607      	movge	r7, r0
 8018794:	460b      	movlt	r3, r1
 8018796:	6061      	strge	r1, [r4, #4]
 8018798:	f104 0408 	add.w	r4, r4, #8
 801879c:	bfa8      	it	ge
 801879e:	f844 5c08 	strge.w	r5, [r4, #-8]
 80187a2:	4638      	mov	r0, r7
 80187a4:	4619      	mov	r1, r3
 80187a6:	e73c      	b.n	8018622 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80187a8:	4291      	cmp	r1, r2
 80187aa:	d925      	bls.n	80187f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e2>
 80187ac:	f1a2 0310 	sub.w	r3, r2, #16
 80187b0:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80187b4:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
 80187b8:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80187bc:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80187c0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80187c4:	eb0e 4607 	add.w	r6, lr, r7, lsl #16
 80187c8:	42b5      	cmp	r5, r6
 80187ca:	dd13      	ble.n	80187f4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1de>
 80187cc:	461d      	mov	r5, r3
 80187ce:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80187d2:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80187d6:	3b08      	subs	r3, #8
 80187d8:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80187dc:	619e      	str	r6, [r3, #24]
 80187de:	42a8      	cmp	r0, r5
 80187e0:	686e      	ldr	r6, [r5, #4]
 80187e2:	f8a3 e010 	strh.w	lr, [r3, #16]
 80187e6:	61de      	str	r6, [r3, #28]
 80187e8:	825f      	strh	r7, [r3, #18]
 80187ea:	f8a3 8014 	strh.w	r8, [r3, #20]
 80187ee:	f8a3 c016 	strh.w	ip, [r3, #22]
 80187f2:	d1dd      	bne.n	80187b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x19a>
 80187f4:	3208      	adds	r2, #8
 80187f6:	e7d7      	b.n	80187a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x192>
 80187f8:	466b      	mov	r3, sp
 80187fa:	429c      	cmp	r4, r3
 80187fc:	d903      	bls.n	8018806 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1f0>
 80187fe:	e914 0003 	ldmdb	r4, {r0, r1}
 8018802:	3c08      	subs	r4, #8
 8018804:	e70d      	b.n	8018622 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8018806:	b051      	add	sp, #324	@ 0x144
 8018808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801880c <_ZN8touchgfx7Outline9sortCellsEv>:
 801880c:	6881      	ldr	r1, [r0, #8]
 801880e:	b111      	cbz	r1, 8018816 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8018810:	68c0      	ldr	r0, [r0, #12]
 8018812:	f7ff bf00 	b.w	8018616 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8018816:	4770      	bx	lr

08018818 <_ZN8touchgfx7Outline8getCellsEv>:
 8018818:	b510      	push	{r4, lr}
 801881a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801881c:	4604      	mov	r4, r0
 801881e:	07da      	lsls	r2, r3, #31
 8018820:	d507      	bpl.n	8018832 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8018822:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8018824:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018826:	f7ff fe7e 	bl	8018526 <_ZN8touchgfx7Outline6lineToEii>
 801882a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801882c:	f023 0301 	bic.w	r3, r3, #1
 8018830:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018832:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018834:	079b      	lsls	r3, r3, #30
 8018836:	d51b      	bpl.n	8018870 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8018838:	8b63      	ldrh	r3, [r4, #26]
 801883a:	8b22      	ldrh	r2, [r4, #24]
 801883c:	4313      	orrs	r3, r2
 801883e:	b21b      	sxth	r3, r3
 8018840:	b16b      	cbz	r3, 801885e <_ZN8touchgfx7Outline8getCellsEv+0x46>
 8018842:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8018846:	2b00      	cmp	r3, #0
 8018848:	db09      	blt.n	801885e <_ZN8touchgfx7Outline8getCellsEv+0x46>
 801884a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801884c:	4293      	cmp	r3, r2
 801884e:	da06      	bge.n	801885e <_ZN8touchgfx7Outline8getCellsEv+0x46>
 8018850:	68a2      	ldr	r2, [r4, #8]
 8018852:	6863      	ldr	r3, [r4, #4]
 8018854:	429a      	cmp	r2, r3
 8018856:	d30d      	bcc.n	8018874 <_ZN8touchgfx7Outline8getCellsEv+0x5c>
 8018858:	2301      	movs	r3, #1
 801885a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801885e:	68a0      	ldr	r0, [r4, #8]
 8018860:	b138      	cbz	r0, 8018872 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8018862:	4620      	mov	r0, r4
 8018864:	f7ff ffd2 	bl	801880c <_ZN8touchgfx7Outline9sortCellsEv>
 8018868:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801886a:	f023 0302 	bic.w	r3, r3, #2
 801886e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018870:	68e0      	ldr	r0, [r4, #12]
 8018872:	bd10      	pop	{r4, pc}
 8018874:	f104 0314 	add.w	r3, r4, #20
 8018878:	6922      	ldr	r2, [r4, #16]
 801887a:	cb03      	ldmia	r3!, {r0, r1}
 801887c:	6010      	str	r0, [r2, #0]
 801887e:	6051      	str	r1, [r2, #4]
 8018880:	6923      	ldr	r3, [r4, #16]
 8018882:	3308      	adds	r3, #8
 8018884:	6123      	str	r3, [r4, #16]
 8018886:	68a3      	ldr	r3, [r4, #8]
 8018888:	3301      	adds	r3, #1
 801888a:	60a3      	str	r3, [r4, #8]
 801888c:	e7e7      	b.n	801885e <_ZN8touchgfx7Outline8getCellsEv+0x46>
	...

08018890 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8018890:	4b02      	ldr	r3, [pc, #8]	@ (801889c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8018892:	6018      	str	r0, [r3, #0]
 8018894:	4b02      	ldr	r3, [pc, #8]	@ (80188a0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8018896:	6019      	str	r1, [r3, #0]
 8018898:	4770      	bx	lr
 801889a:	bf00      	nop
 801889c:	20024e3c 	.word	0x20024e3c
 80188a0:	20024e50 	.word	0x20024e50

080188a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80188a4:	b570      	push	{r4, r5, r6, lr}
 80188a6:	4c2c      	ldr	r4, [pc, #176]	@ (8018958 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80188a8:	4d2c      	ldr	r5, [pc, #176]	@ (801895c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80188aa:	6822      	ldr	r2, [r4, #0]
 80188ac:	4b2c      	ldr	r3, [pc, #176]	@ (8018960 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80188ae:	4282      	cmp	r2, r0
 80188b0:	492c      	ldr	r1, [pc, #176]	@ (8018964 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80188b2:	d109      	bne.n	80188c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80188b4:	682e      	ldr	r6, [r5, #0]
 80188b6:	681a      	ldr	r2, [r3, #0]
 80188b8:	4296      	cmp	r6, r2
 80188ba:	d105      	bne.n	80188c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80188bc:	6808      	ldr	r0, [r1, #0]
 80188be:	280f      	cmp	r0, #15
 80188c0:	bf94      	ite	ls
 80188c2:	2000      	movls	r0, #0
 80188c4:	2001      	movhi	r0, #1
 80188c6:	bd70      	pop	{r4, r5, r6, pc}
 80188c8:	681a      	ldr	r2, [r3, #0]
 80188ca:	4b27      	ldr	r3, [pc, #156]	@ (8018968 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80188cc:	6020      	str	r0, [r4, #0]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	602a      	str	r2, [r5, #0]
 80188d2:	4298      	cmp	r0, r3
 80188d4:	d905      	bls.n	80188e2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3e>
 80188d6:	4b25      	ldr	r3, [pc, #148]	@ (801896c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80188d8:	2137      	movs	r1, #55	@ 0x37
 80188da:	4a25      	ldr	r2, [pc, #148]	@ (8018970 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80188dc:	4825      	ldr	r0, [pc, #148]	@ (8018974 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80188de:	f007 fa49 	bl	801fd74 <__assert_func>
 80188e2:	f010 0403 	ands.w	r4, r0, #3
 80188e6:	bf1f      	itttt	ne
 80188e8:	f1c4 0504 	rsbne	r5, r4, #4
 80188ec:	3b04      	subne	r3, #4
 80188ee:	1952      	addne	r2, r2, r5
 80188f0:	191b      	addne	r3, r3, r4
 80188f2:	4d21      	ldr	r5, [pc, #132]	@ (8018978 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 80188f4:	4402      	add	r2, r0
 80188f6:	1a1b      	subs	r3, r3, r0
 80188f8:	3001      	adds	r0, #1
 80188fa:	602a      	str	r2, [r5, #0]
 80188fc:	f020 0401 	bic.w	r4, r0, #1
 8018900:	42a3      	cmp	r3, r4
 8018902:	d203      	bcs.n	801890c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x68>
 8018904:	4b19      	ldr	r3, [pc, #100]	@ (801896c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8018906:	214a      	movs	r1, #74	@ 0x4a
 8018908:	4a19      	ldr	r2, [pc, #100]	@ (8018970 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801890a:	e7e7      	b.n	80188dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 801890c:	f010 0002 	ands.w	r0, r0, #2
 8018910:	bf1f      	itttt	ne
 8018912:	f1c0 0504 	rsbne	r5, r0, #4
 8018916:	1952      	addne	r2, r2, r5
 8018918:	1f05      	subne	r5, r0, #4
 801891a:	195b      	addne	r3, r3, r5
 801891c:	4422      	add	r2, r4
 801891e:	4d17      	ldr	r5, [pc, #92]	@ (801897c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8018920:	1b1b      	subs	r3, r3, r4
 8018922:	602a      	str	r2, [r5, #0]
 8018924:	429c      	cmp	r4, r3
 8018926:	d903      	bls.n	8018930 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8c>
 8018928:	4b10      	ldr	r3, [pc, #64]	@ (801896c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801892a:	215d      	movs	r1, #93	@ 0x5d
 801892c:	4a10      	ldr	r2, [pc, #64]	@ (8018970 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801892e:	e7d5      	b.n	80188dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 8018930:	b120      	cbz	r0, 801893c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x98>
 8018932:	f1c0 0504 	rsb	r5, r0, #4
 8018936:	3804      	subs	r0, #4
 8018938:	442a      	add	r2, r5
 801893a:	4403      	add	r3, r0
 801893c:	1b1b      	subs	r3, r3, r4
 801893e:	4422      	add	r2, r4
 8018940:	480f      	ldr	r0, [pc, #60]	@ (8018980 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8018942:	2b0f      	cmp	r3, #15
 8018944:	600b      	str	r3, [r1, #0]
 8018946:	6002      	str	r2, [r0, #0]
 8018948:	d803      	bhi.n	8018952 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xae>
 801894a:	4b0e      	ldr	r3, [pc, #56]	@ (8018984 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xe0>)
 801894c:	2170      	movs	r1, #112	@ 0x70
 801894e:	4a08      	ldr	r2, [pc, #32]	@ (8018970 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8018950:	e7c4      	b.n	80188dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 8018952:	2001      	movs	r0, #1
 8018954:	bd70      	pop	{r4, r5, r6, pc}
 8018956:	bf00      	nop
 8018958:	20024e44 	.word	0x20024e44
 801895c:	20024e4c 	.word	0x20024e4c
 8018960:	20024e3c 	.word	0x20024e3c
 8018964:	20024e54 	.word	0x20024e54
 8018968:	20024e50 	.word	0x20024e50
 801896c:	0802614c 	.word	0x0802614c
 8018970:	08026214 	.word	0x08026214
 8018974:	08026185 	.word	0x08026185
 8018978:	20024e58 	.word	0x20024e58
 801897c:	20024e48 	.word	0x20024e48
 8018980:	20024e40 	.word	0x20024e40
 8018984:	080261cf 	.word	0x080261cf

08018988 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8018988:	4b04      	ldr	r3, [pc, #16]	@ (801899c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801898a:	6818      	ldr	r0, [r3, #0]
 801898c:	b120      	cbz	r0, 8018998 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801898e:	4b04      	ldr	r3, [pc, #16]	@ (80189a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8018990:	6818      	ldr	r0, [r3, #0]
 8018992:	3000      	adds	r0, #0
 8018994:	bf18      	it	ne
 8018996:	2001      	movne	r0, #1
 8018998:	4770      	bx	lr
 801899a:	bf00      	nop
 801899c:	20024e3c 	.word	0x20024e3c
 80189a0:	20024e50 	.word	0x20024e50

080189a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80189a4:	4b01      	ldr	r3, [pc, #4]	@ (80189ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80189a6:	6818      	ldr	r0, [r3, #0]
 80189a8:	4770      	bx	lr
 80189aa:	bf00      	nop
 80189ac:	20024e44 	.word	0x20024e44

080189b0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80189b0:	4b01      	ldr	r3, [pc, #4]	@ (80189b8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80189b2:	6818      	ldr	r0, [r3, #0]
 80189b4:	4770      	bx	lr
 80189b6:	bf00      	nop
 80189b8:	20024e4c 	.word	0x20024e4c

080189bc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80189bc:	4b01      	ldr	r3, [pc, #4]	@ (80189c4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80189be:	6818      	ldr	r0, [r3, #0]
 80189c0:	4770      	bx	lr
 80189c2:	bf00      	nop
 80189c4:	20024e58 	.word	0x20024e58

080189c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80189c8:	4b01      	ldr	r3, [pc, #4]	@ (80189d0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80189ca:	6818      	ldr	r0, [r3, #0]
 80189cc:	4770      	bx	lr
 80189ce:	bf00      	nop
 80189d0:	20024e48 	.word	0x20024e48

080189d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80189d4:	4b01      	ldr	r3, [pc, #4]	@ (80189dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80189d6:	6818      	ldr	r0, [r3, #0]
 80189d8:	4770      	bx	lr
 80189da:	bf00      	nop
 80189dc:	20024e40 	.word	0x20024e40

080189e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80189e0:	4b01      	ldr	r3, [pc, #4]	@ (80189e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80189e2:	6818      	ldr	r0, [r3, #0]
 80189e4:	4770      	bx	lr
 80189e6:	bf00      	nop
 80189e8:	20024e54 	.word	0x20024e54

080189ec <_ZN8touchgfx8ScanlineD1Ev>:
 80189ec:	4770      	bx	lr

080189ee <_ZN8touchgfx8ScanlineD0Ev>:
 80189ee:	b510      	push	{r4, lr}
 80189f0:	4604      	mov	r4, r0
 80189f2:	2124      	movs	r1, #36	@ 0x24
 80189f4:	f006 f897 	bl	801eb26 <_ZdlPvj>
 80189f8:	4620      	mov	r0, r4
 80189fa:	bd10      	pop	{r4, pc}

080189fc <_ZN8touchgfx8Scanline5resetEv>:
 80189fc:	b510      	push	{r4, lr}
 80189fe:	4604      	mov	r4, r0
 8018a00:	f7ff ffd6 	bl	80189b0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8018a04:	61a0      	str	r0, [r4, #24]
 8018a06:	f7ff ffd9 	bl	80189bc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8018a0a:	61e0      	str	r0, [r4, #28]
 8018a0c:	f7ff ffdc 	bl	80189c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8018a10:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8018a14:	6220      	str	r0, [r4, #32]
 8018a16:	6063      	str	r3, [r4, #4]
 8018a18:	60a3      	str	r3, [r4, #8]
 8018a1a:	69e3      	ldr	r3, [r4, #28]
 8018a1c:	6160      	str	r0, [r4, #20]
 8018a1e:	6123      	str	r3, [r4, #16]
 8018a20:	2300      	movs	r3, #0
 8018a22:	60e3      	str	r3, [r4, #12]
 8018a24:	bd10      	pop	{r4, pc}
	...

08018a28 <_ZN8touchgfx8ScanlineC1Ev>:
 8018a28:	4b07      	ldr	r3, [pc, #28]	@ (8018a48 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8018a2a:	b510      	push	{r4, lr}
 8018a2c:	6003      	str	r3, [r0, #0]
 8018a2e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8018a32:	4604      	mov	r4, r0
 8018a34:	6043      	str	r3, [r0, #4]
 8018a36:	6083      	str	r3, [r0, #8]
 8018a38:	2300      	movs	r3, #0
 8018a3a:	60c3      	str	r3, [r0, #12]
 8018a3c:	6103      	str	r3, [r0, #16]
 8018a3e:	6143      	str	r3, [r0, #20]
 8018a40:	f7ff ffdc 	bl	80189fc <_ZN8touchgfx8Scanline5resetEv>
 8018a44:	4620      	mov	r0, r4
 8018a46:	bd10      	pop	{r4, pc}
 8018a48:	08026268 	.word	0x08026268

08018a4c <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8018a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a50:	1e0c      	subs	r4, r1, #0
 8018a52:	4605      	mov	r5, r0
 8018a54:	4617      	mov	r7, r2
 8018a56:	461e      	mov	r6, r3
 8018a58:	da03      	bge.n	8018a62 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8018a5a:	4426      	add	r6, r4
 8018a5c:	2e01      	cmp	r6, #1
 8018a5e:	d420      	bmi.n	8018aa2 <_ZN8touchgfx8Scanline7addSpanEiijj+0x56>
 8018a60:	2400      	movs	r4, #0
 8018a62:	f7ff ff9f 	bl	80189a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8018a66:	42a0      	cmp	r0, r4
 8018a68:	d91b      	bls.n	8018aa2 <_ZN8touchgfx8Scanline7addSpanEiijj+0x56>
 8018a6a:	eb06 0804 	add.w	r8, r6, r4
 8018a6e:	f7ff ff99 	bl	80189a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8018a72:	4580      	cmp	r8, r0
 8018a74:	d902      	bls.n	8018a7c <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8018a76:	f7ff ff95 	bl	80189a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8018a7a:	1b06      	subs	r6, r0, r4
 8018a7c:	69a8      	ldr	r0, [r5, #24]
 8018a7e:	4632      	mov	r2, r6
 8018a80:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8018a84:	4420      	add	r0, r4
 8018a86:	f001 fd3c 	bl	801a502 <_ZN8touchgfx6memsetEPvhm>
 8018a8a:	686b      	ldr	r3, [r5, #4]
 8018a8c:	3301      	adds	r3, #1
 8018a8e:	429c      	cmp	r4, r3
 8018a90:	696b      	ldr	r3, [r5, #20]
 8018a92:	d108      	bne.n	8018aa6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5a>
 8018a94:	881a      	ldrh	r2, [r3, #0]
 8018a96:	4432      	add	r2, r6
 8018a98:	801a      	strh	r2, [r3, #0]
 8018a9a:	3c01      	subs	r4, #1
 8018a9c:	60af      	str	r7, [r5, #8]
 8018a9e:	4434      	add	r4, r6
 8018aa0:	606c      	str	r4, [r5, #4]
 8018aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018aa6:	1c9a      	adds	r2, r3, #2
 8018aa8:	616a      	str	r2, [r5, #20]
 8018aaa:	805e      	strh	r6, [r3, #2]
 8018aac:	692b      	ldr	r3, [r5, #16]
 8018aae:	1c9a      	adds	r2, r3, #2
 8018ab0:	612a      	str	r2, [r5, #16]
 8018ab2:	805c      	strh	r4, [r3, #2]
 8018ab4:	68eb      	ldr	r3, [r5, #12]
 8018ab6:	3301      	adds	r3, #1
 8018ab8:	60eb      	str	r3, [r5, #12]
 8018aba:	e7ee      	b.n	8018a9a <_ZN8touchgfx8Scanline7addSpanEiijj+0x4e>

08018abc <_ZN8touchgfx15RenderingBufferC1Ev>:
 8018abc:	2200      	movs	r2, #0
 8018abe:	6002      	str	r2, [r0, #0]
 8018ac0:	7102      	strb	r2, [r0, #4]
 8018ac2:	6082      	str	r2, [r0, #8]
 8018ac4:	60c2      	str	r2, [r0, #12]
 8018ac6:	6102      	str	r2, [r0, #16]
 8018ac8:	4770      	bx	lr

08018aca <_ZN8touchgfx15RenderingBufferD1Ev>:
 8018aca:	4770      	bx	lr

08018acc <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8018acc:	6083      	str	r3, [r0, #8]
 8018ace:	9b00      	ldr	r3, [sp, #0]
 8018ad0:	6001      	str	r1, [r0, #0]
 8018ad2:	60c3      	str	r3, [r0, #12]
 8018ad4:	9b01      	ldr	r3, [sp, #4]
 8018ad6:	7102      	strb	r2, [r0, #4]
 8018ad8:	6103      	str	r3, [r0, #16]
 8018ada:	4770      	bx	lr

08018adc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8018adc:	b538      	push	{r3, r4, r5, lr}
 8018ade:	4604      	mov	r4, r0
 8018ae0:	2500      	movs	r5, #0
 8018ae2:	9804      	ldr	r0, [sp, #16]
 8018ae4:	7223      	strb	r3, [r4, #8]
 8018ae6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018aea:	8025      	strh	r5, [r4, #0]
 8018aec:	60e5      	str	r5, [r4, #12]
 8018aee:	82e5      	strh	r5, [r4, #22]
 8018af0:	8325      	strh	r5, [r4, #24]
 8018af2:	8365      	strh	r5, [r4, #26]
 8018af4:	83a5      	strh	r5, [r4, #28]
 8018af6:	83e5      	strh	r5, [r4, #30]
 8018af8:	8425      	strh	r5, [r4, #32]
 8018afa:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8018afe:	6061      	str	r1, [r4, #4]
 8018b00:	7263      	strb	r3, [r4, #9]
 8018b02:	6120      	str	r0, [r4, #16]
 8018b04:	82a2      	strh	r2, [r4, #20]
 8018b06:	6803      	ldr	r3, [r0, #0]
 8018b08:	695b      	ldr	r3, [r3, #20]
 8018b0a:	4798      	blx	r3
 8018b0c:	4605      	mov	r5, r0
 8018b0e:	b330      	cbz	r0, 8018b5e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 8018b10:	6920      	ldr	r0, [r4, #16]
 8018b12:	4629      	mov	r1, r5
 8018b14:	6803      	ldr	r3, [r0, #0]
 8018b16:	68db      	ldr	r3, [r3, #12]
 8018b18:	4798      	blx	r3
 8018b1a:	60e0      	str	r0, [r4, #12]
 8018b1c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018b20:	4602      	mov	r2, r0
 8018b22:	7a81      	ldrb	r1, [r0, #10]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	bfb4      	ite	lt
 8018b28:	f44f 7380 	movlt.w	r3, #256	@ 0x100
 8018b2c:	2300      	movge	r3, #0
 8018b2e:	430b      	orrs	r3, r1
 8018b30:	8423      	strh	r3, [r4, #32]
 8018b32:	7a63      	ldrb	r3, [r4, #9]
 8018b34:	2b04      	cmp	r3, #4
 8018b36:	d112      	bne.n	8018b5e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 8018b38:	6920      	ldr	r0, [r4, #16]
 8018b3a:	4629      	mov	r1, r5
 8018b3c:	6803      	ldr	r3, [r0, #0]
 8018b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018b40:	4798      	blx	r3
 8018b42:	68e2      	ldr	r2, [r4, #12]
 8018b44:	f992 300d 	ldrsb.w	r3, [r2, #13]
 8018b48:	7a91      	ldrb	r1, [r2, #10]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	bfb4      	ite	lt
 8018b4e:	f44f 7380 	movlt.w	r3, #256	@ 0x100
 8018b52:	2300      	movge	r3, #0
 8018b54:	430b      	orrs	r3, r1
 8018b56:	4418      	add	r0, r3
 8018b58:	8c23      	ldrh	r3, [r4, #32]
 8018b5a:	4418      	add	r0, r3
 8018b5c:	8420      	strh	r0, [r4, #32]
 8018b5e:	4620      	mov	r0, r4
 8018b60:	bd38      	pop	{r3, r4, r5, pc}

08018b62 <_ZN8touchgfx4Edge4stepEv>:
 8018b62:	b510      	push	{r4, lr}
 8018b64:	e890 0006 	ldmia.w	r0, {r1, r2}
 8018b68:	4603      	mov	r3, r0
 8018b6a:	4411      	add	r1, r2
 8018b6c:	6942      	ldr	r2, [r0, #20]
 8018b6e:	3201      	adds	r2, #1
 8018b70:	6001      	str	r1, [r0, #0]
 8018b72:	6142      	str	r2, [r0, #20]
 8018b74:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8018b78:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8018b7c:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8018b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b84:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8018b88:	691a      	ldr	r2, [r3, #16]
 8018b8a:	689c      	ldr	r4, [r3, #8]
 8018b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b90:	ed93 6a08 	vldr	s12, [r3, #32]
 8018b94:	edd3 6a07 	vldr	s13, [r3, #28]
 8018b98:	4422      	add	r2, r4
 8018b9a:	6980      	ldr	r0, [r0, #24]
 8018b9c:	68dc      	ldr	r4, [r3, #12]
 8018b9e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018ba2:	3801      	subs	r0, #1
 8018ba4:	ed83 7a0a 	vstr	s14, [r3, #40]	@ 0x28
 8018ba8:	42a2      	cmp	r2, r4
 8018baa:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8018bae:	6198      	str	r0, [r3, #24]
 8018bb0:	edc3 6a07 	vstr	s13, [r3, #28]
 8018bb4:	611a      	str	r2, [r3, #16]
 8018bb6:	db15      	blt.n	8018be4 <_ZN8touchgfx4Edge4stepEv+0x82>
 8018bb8:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8018bbc:	3101      	adds	r1, #1
 8018bbe:	1b12      	subs	r2, r2, r4
 8018bc0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018bc4:	6019      	str	r1, [r3, #0]
 8018bc6:	611a      	str	r2, [r3, #16]
 8018bc8:	edc3 6a07 	vstr	s13, [r3, #28]
 8018bcc:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8018bd0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018bd4:	ed83 7a0a 	vstr	s14, [r3, #40]	@ 0x28
 8018bd8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8018bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018be0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8018be4:	bd10      	pop	{r4, pc}

08018be6 <_ZN8touchgfx4Edge4stepEi>:
 8018be6:	b570      	push	{r4, r5, r6, lr}
 8018be8:	4605      	mov	r5, r0
 8018bea:	460e      	mov	r6, r1
 8018bec:	2400      	movs	r4, #0
 8018bee:	42b4      	cmp	r4, r6
 8018bf0:	da04      	bge.n	8018bfc <_ZN8touchgfx4Edge4stepEi+0x16>
 8018bf2:	4628      	mov	r0, r5
 8018bf4:	3401      	adds	r4, #1
 8018bf6:	f7ff ffb4 	bl	8018b62 <_ZN8touchgfx4Edge4stepEv>
 8018bfa:	e7f8      	b.n	8018bee <_ZN8touchgfx4Edge4stepEi+0x8>
 8018bfc:	69a8      	ldr	r0, [r5, #24]
 8018bfe:	bd70      	pop	{r4, r5, r6, pc}

08018c00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c04:	2600      	movs	r6, #0
 8018c06:	4682      	mov	sl, r0
 8018c08:	460f      	mov	r7, r1
 8018c0a:	4693      	mov	fp, r2
 8018c0c:	46b1      	mov	r9, r6
 8018c0e:	46b0      	mov	r8, r6
 8018c10:	9301      	str	r3, [sp, #4]
 8018c12:	455e      	cmp	r6, fp
 8018c14:	da26      	bge.n	8018c64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 8018c16:	9901      	ldr	r1, [sp, #4]
 8018c18:	4650      	mov	r0, sl
 8018c1a:	f002 ffc7 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018c1e:	4605      	mov	r5, r0
 8018c20:	b300      	cbz	r0, 8018c64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 8018c22:	280a      	cmp	r0, #10
 8018c24:	d01e      	beq.n	8018c64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 8018c26:	683b      	ldr	r3, [r7, #0]
 8018c28:	4601      	mov	r1, r0
 8018c2a:	4638      	mov	r0, r7
 8018c2c:	68db      	ldr	r3, [r3, #12]
 8018c2e:	4798      	blx	r3
 8018c30:	4602      	mov	r2, r0
 8018c32:	b1a0      	cbz	r0, 8018c5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5e>
 8018c34:	7a83      	ldrb	r3, [r0, #10]
 8018c36:	4649      	mov	r1, r9
 8018c38:	8885      	ldrh	r5, [r0, #4]
 8018c3a:	9300      	str	r3, [sp, #0]
 8018c3c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018c40:	4638      	mov	r0, r7
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	683b      	ldr	r3, [r7, #0]
 8018c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018c48:	bfb4      	ite	lt
 8018c4a:	f44f 7480 	movlt.w	r4, #256	@ 0x100
 8018c4e:	2400      	movge	r4, #0
 8018c50:	4798      	blx	r3
 8018c52:	9b00      	ldr	r3, [sp, #0]
 8018c54:	431c      	orrs	r4, r3
 8018c56:	4404      	add	r4, r0
 8018c58:	44a0      	add	r8, r4
 8018c5a:	fa1f f888 	uxth.w	r8, r8
 8018c5e:	3601      	adds	r6, #1
 8018c60:	46a9      	mov	r9, r5
 8018c62:	e7d6      	b.n	8018c12 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x12>
 8018c64:	4640      	mov	r0, r8
 8018c66:	b003      	add	sp, #12
 8018c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c6c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018c6c:	2a02      	cmp	r2, #2
 8018c6e:	b530      	push	{r4, r5, lr}
 8018c70:	d011      	beq.n	8018c96 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018c72:	2a03      	cmp	r2, #3
 8018c74:	d01c      	beq.n	8018cb0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018c76:	2a01      	cmp	r2, #1
 8018c78:	d128      	bne.n	8018ccc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 8018c7a:	888b      	ldrh	r3, [r1, #4]
 8018c7c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018c80:	8801      	ldrh	r1, [r0, #0]
 8018c82:	1a9b      	subs	r3, r3, r2
 8018c84:	8844      	ldrh	r4, [r0, #2]
 8018c86:	1a5b      	subs	r3, r3, r1
 8018c88:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018c8c:	8004      	strh	r4, [r0, #0]
 8018c8e:	8043      	strh	r3, [r0, #2]
 8018c90:	8081      	strh	r1, [r0, #4]
 8018c92:	80c2      	strh	r2, [r0, #6]
 8018c94:	bd30      	pop	{r4, r5, pc}
 8018c96:	88cb      	ldrh	r3, [r1, #6]
 8018c98:	88c2      	ldrh	r2, [r0, #6]
 8018c9a:	1a9b      	subs	r3, r3, r2
 8018c9c:	8842      	ldrh	r2, [r0, #2]
 8018c9e:	1a9b      	subs	r3, r3, r2
 8018ca0:	888a      	ldrh	r2, [r1, #4]
 8018ca2:	8881      	ldrh	r1, [r0, #4]
 8018ca4:	8043      	strh	r3, [r0, #2]
 8018ca6:	1a52      	subs	r2, r2, r1
 8018ca8:	8801      	ldrh	r1, [r0, #0]
 8018caa:	1a52      	subs	r2, r2, r1
 8018cac:	8002      	strh	r2, [r0, #0]
 8018cae:	bd30      	pop	{r4, r5, pc}
 8018cb0:	88cb      	ldrh	r3, [r1, #6]
 8018cb2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018cb6:	8841      	ldrh	r1, [r0, #2]
 8018cb8:	1a9b      	subs	r3, r3, r2
 8018cba:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018cbe:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018cc2:	1a5b      	subs	r3, r3, r1
 8018cc4:	8045      	strh	r5, [r0, #2]
 8018cc6:	8082      	strh	r2, [r0, #4]
 8018cc8:	8003      	strh	r3, [r0, #0]
 8018cca:	80c4      	strh	r4, [r0, #6]
 8018ccc:	bd30      	pop	{r4, r5, pc}
	...

08018cd0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>:
 8018cd0:	b570      	push	{r4, r5, r6, lr}
 8018cd2:	b086      	sub	sp, #24
 8018cd4:	ad02      	add	r5, sp, #8
 8018cd6:	e885 0006 	stmia.w	r5, {r1, r2}
 8018cda:	461a      	mov	r2, r3
 8018cdc:	ab0c      	add	r3, sp, #48	@ 0x30
 8018cde:	9305      	str	r3, [sp, #20]
 8018ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8018d0c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz+0x3c>)
 8018ce2:	685c      	ldr	r4, [r3, #4]
 8018ce4:	f014 0f01 	tst.w	r4, #1
 8018ce8:	ea4f 0464 	mov.w	r4, r4, asr #1
 8018cec:	bf1c      	itt	ne
 8018cee:	681b      	ldrne	r3, [r3, #0]
 8018cf0:	5901      	ldrne	r1, [r0, r4]
 8018cf2:	4420      	add	r0, r4
 8018cf4:	bf0c      	ite	eq
 8018cf6:	681e      	ldreq	r6, [r3, #0]
 8018cf8:	58ce      	ldrne	r6, [r1, r3]
 8018cfa:	4629      	mov	r1, r5
 8018cfc:	9b05      	ldr	r3, [sp, #20]
 8018cfe:	9301      	str	r3, [sp, #4]
 8018d00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018d02:	9300      	str	r3, [sp, #0]
 8018d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018d06:	47b0      	blx	r6
 8018d08:	b006      	add	sp, #24
 8018d0a:	bd70      	pop	{r4, r5, r6, pc}
 8018d0c:	20000000 	.word	0x20000000

08018d10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d14:	b097      	sub	sp, #92	@ 0x5c
 8018d16:	9112      	str	r1, [sp, #72]	@ 0x48
 8018d18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018d1a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8018d1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018d1e:	8809      	ldrh	r1, [r1, #0]
 8018d20:	889b      	ldrh	r3, [r3, #4]
 8018d22:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8018d24:	440b      	add	r3, r1
 8018d26:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018d28:	f89d 2098 	ldrb.w	r2, [sp, #152]	@ 0x98
 8018d2c:	b21b      	sxth	r3, r3
 8018d2e:	900e      	str	r0, [sp, #56]	@ 0x38
 8018d30:	f89d a08c 	ldrb.w	sl, [sp, #140]	@ 0x8c
 8018d34:	930d      	str	r3, [sp, #52]	@ 0x34
 8018d36:	683b      	ldr	r3, [r7, #0]
 8018d38:	7a59      	ldrb	r1, [r3, #9]
 8018d3a:	7a1b      	ldrb	r3, [r3, #8]
 8018d3c:	9111      	str	r1, [sp, #68]	@ 0x44
 8018d3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8018d40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8018d42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018d46:	2a00      	cmp	r2, #0
 8018d48:	d04b      	beq.n	8018de2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd2>
 8018d4a:	7c3b      	ldrb	r3, [r7, #16]
 8018d4c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8018d4e:	2b04      	cmp	r3, #4
 8018d50:	bf0c      	ite	eq
 8018d52:	2302      	moveq	r3, #2
 8018d54:	2301      	movne	r3, #1
 8018d56:	4413      	add	r3, r2
 8018d58:	2500      	movs	r5, #0
 8018d5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d5c:	46a9      	mov	r9, r5
 8018d5e:	462c      	mov	r4, r5
 8018d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018d62:	4599      	cmp	r9, r3
 8018d64:	da6a      	bge.n	8018e3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 8018d66:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8018d68:	4599      	cmp	r9, r3
 8018d6a:	db3c      	blt.n	8018de6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8018d6c:	6838      	ldr	r0, [r7, #0]
 8018d6e:	6803      	ldr	r3, [r0, #0]
 8018d70:	695b      	ldr	r3, [r3, #20]
 8018d72:	4798      	blx	r3
 8018d74:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018d78:	4680      	mov	r8, r0
 8018d7a:	4298      	cmp	r0, r3
 8018d7c:	d045      	beq.n	8018e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018d7e:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018d82:	4298      	cmp	r0, r3
 8018d84:	d041      	beq.n	8018e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018d86:	2800      	cmp	r0, #0
 8018d88:	d057      	beq.n	8018e3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8018d8a:	280a      	cmp	r0, #10
 8018d8c:	d055      	beq.n	8018e3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8018d8e:	6838      	ldr	r0, [r7, #0]
 8018d90:	aa15      	add	r2, sp, #84	@ 0x54
 8018d92:	4641      	mov	r1, r8
 8018d94:	6803      	ldr	r3, [r0, #0]
 8018d96:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8018d9a:	f10d 0353 	add.w	r3, sp, #83	@ 0x53
 8018d9e:	47d8      	blx	fp
 8018da0:	4683      	mov	fp, r0
 8018da2:	b328      	cbz	r0, 8018df0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xe0>
 8018da4:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8018da8:	f1ba 0f00 	cmp.w	sl, #0
 8018dac:	d031      	beq.n	8018e12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x102>
 8018dae:	f99b 200d 	ldrsb.w	r2, [fp, #13]
 8018db2:	f89b 300a 	ldrb.w	r3, [fp, #10]
 8018db6:	2a00      	cmp	r2, #0
 8018db8:	bfb4      	ite	lt
 8018dba:	f44f 7580 	movlt.w	r5, #256	@ 0x100
 8018dbe:	2500      	movge	r5, #0
 8018dc0:	f1ba 0f01 	cmp.w	sl, #1
 8018dc4:	ea45 0503 	orr.w	r5, r5, r3
 8018dc8:	d125      	bne.n	8018e16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x106>
 8018dca:	1b76      	subs	r6, r6, r5
 8018dcc:	2c00      	cmp	r4, #0
 8018dce:	d147      	bne.n	8018e60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8018dd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018dd2:	19ab      	adds	r3, r5, r6
 8018dd4:	4413      	add	r3, r2
 8018dd6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8018dd8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018ddc:	4293      	cmp	r3, r2
 8018dde:	da4a      	bge.n	8018e76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 8018de0:	e02b      	b.n	8018e3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8018de2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8018de4:	e7b8      	b.n	8018d58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8018de6:	4651      	mov	r1, sl
 8018de8:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8018dea:	f002 fedf 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018dee:	e7c1      	b.n	8018d74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x64>
 8018df0:	6838      	ldr	r0, [r7, #0]
 8018df2:	6803      	ldr	r3, [r0, #0]
 8018df4:	691b      	ldr	r3, [r3, #16]
 8018df6:	4798      	blx	r3
 8018df8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018dfc:	4298      	cmp	r0, r3
 8018dfe:	d004      	beq.n	8018e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018e00:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018e04:	4298      	cmp	r0, r3
 8018e06:	bf18      	it	ne
 8018e08:	2500      	movne	r5, #0
 8018e0a:	f109 0901 	add.w	r9, r9, #1
 8018e0e:	4644      	mov	r4, r8
 8018e10:	e7a6      	b.n	8018d60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8018e12:	442e      	add	r6, r5
 8018e14:	e7cb      	b.n	8018dae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x9e>
 8018e16:	2c00      	cmp	r4, #0
 8018e18:	f000 80a6 	beq.w	8018f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8018e1c:	f1ba 0f00 	cmp.w	sl, #0
 8018e20:	d11e      	bne.n	8018e60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8018e22:	6838      	ldr	r0, [r7, #0]
 8018e24:	465a      	mov	r2, fp
 8018e26:	4621      	mov	r1, r4
 8018e28:	6803      	ldr	r3, [r0, #0]
 8018e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e2c:	4798      	blx	r3
 8018e2e:	4406      	add	r6, r0
 8018e30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018e32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018e34:	1af3      	subs	r3, r6, r3
 8018e36:	4293      	cmp	r3, r2
 8018e38:	dd1d      	ble.n	8018e76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 8018e3a:	4644      	mov	r4, r8
 8018e3c:	2c00      	cmp	r4, #0
 8018e3e:	f000 8091 	beq.w	8018f64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8018e42:	2c0a      	cmp	r4, #10
 8018e44:	f000 8087 	beq.w	8018f56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x246>
 8018e48:	f109 0901 	add.w	r9, r9, #1
 8018e4c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8018e4e:	4599      	cmp	r9, r3
 8018e50:	f280 8082 	bge.w	8018f58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 8018e54:	4651      	mov	r1, sl
 8018e56:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8018e58:	f002 fea8 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e5c:	4604      	mov	r4, r0
 8018e5e:	e7ed      	b.n	8018e3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 8018e60:	6838      	ldr	r0, [r7, #0]
 8018e62:	465a      	mov	r2, fp
 8018e64:	4621      	mov	r1, r4
 8018e66:	6803      	ldr	r3, [r0, #0]
 8018e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e6a:	4798      	blx	r3
 8018e6c:	f1ba 0f01 	cmp.w	sl, #1
 8018e70:	eba6 0600 	sub.w	r6, r6, r0
 8018e74:	d0ac      	beq.n	8018dd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xc0>
 8018e76:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8018e7a:	f99b 2009 	ldrsb.w	r2, [fp, #9]
 8018e7e:	f013 0f08 	tst.w	r3, #8
 8018e82:	f89b 1006 	ldrb.w	r1, [fp, #6]
 8018e86:	4432      	add	r2, r6
 8018e88:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8018e8a:	bf14      	ite	ne
 8018e8c:	f44f 7380 	movne.w	r3, #256	@ 0x100
 8018e90:	2300      	moveq	r3, #0
 8018e92:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018e96:	430b      	orrs	r3, r1
 8018e98:	4413      	add	r3, r2
 8018e9a:	42a3      	cmp	r3, r4
 8018e9c:	dbb5      	blt.n	8018e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	dab2      	bge.n	8018e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018ea4:	6838      	ldr	r0, [r7, #0]
 8018ea6:	42b4      	cmp	r4, r6
 8018ea8:	6803      	ldr	r3, [r0, #0]
 8018eaa:	bfcc      	ite	gt
 8018eac:	1ba4      	subgt	r4, r4, r6
 8018eae:	2400      	movle	r4, #0
 8018eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018eb2:	bfc8      	it	gt
 8018eb4:	b2a4      	uxthgt	r4, r4
 8018eb6:	4798      	blx	r3
 8018eb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018eba:	4a2e      	ldr	r2, [pc, #184]	@ (8018f74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x264>)
 8018ebc:	4418      	add	r0, r3
 8018ebe:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8018ec2:	f89b e008 	ldrb.w	lr, [fp, #8]
 8018ec6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8018eca:	bf14      	ite	ne
 8018ecc:	4611      	movne	r1, r2
 8018ece:	2100      	moveq	r1, #0
 8018ed0:	f013 0f20 	tst.w	r3, #32
 8018ed4:	ea41 010e 	orr.w	r1, r1, lr
 8018ed8:	bf14      	ite	ne
 8018eda:	f44f 7280 	movne.w	r2, #256	@ 0x100
 8018ede:	2200      	moveq	r2, #0
 8018ee0:	430a      	orrs	r2, r1
 8018ee2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8018ee4:	1a80      	subs	r0, r0, r2
 8018ee6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018eea:	b280      	uxth	r0, r0
 8018eec:	b202      	sxth	r2, r0
 8018eee:	428a      	cmp	r2, r1
 8018ef0:	da2f      	bge.n	8018f52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x242>
 8018ef2:	f013 0f10 	tst.w	r3, #16
 8018ef6:	f89b e007 	ldrb.w	lr, [fp, #7]
 8018efa:	bf14      	ite	ne
 8018efc:	f44f 7380 	movne.w	r3, #256	@ 0x100
 8018f00:	2300      	moveq	r3, #0
 8018f02:	ea43 030e 	orr.w	r3, r3, lr
 8018f06:	441a      	add	r2, r3
 8018f08:	4291      	cmp	r1, r2
 8018f0a:	f73f af7e 	bgt.w	8018e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018f0e:	1a08      	subs	r0, r1, r0
 8018f10:	460a      	mov	r2, r1
 8018f12:	b280      	uxth	r0, r0
 8018f14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f16:	6819      	ldr	r1, [r3, #0]
 8018f18:	79bb      	ldrb	r3, [r7, #6]
 8018f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018f1c:	7bbb      	ldrb	r3, [r7, #14]
 8018f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f20:	f89d 3053 	ldrb.w	r3, [sp, #83]	@ 0x53
 8018f24:	9308      	str	r3, [sp, #32]
 8018f26:	68bb      	ldr	r3, [r7, #8]
 8018f28:	9402      	str	r4, [sp, #8]
 8018f2a:	4434      	add	r4, r6
 8018f2c:	9307      	str	r3, [sp, #28]
 8018f2e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018f30:	b224      	sxth	r4, r4
 8018f32:	9003      	str	r0, [sp, #12]
 8018f34:	9306      	str	r3, [sp, #24]
 8018f36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018f38:	f8cd b014 	str.w	fp, [sp, #20]
 8018f3c:	9304      	str	r3, [sp, #16]
 8018f3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f40:	9201      	str	r2, [sp, #4]
 8018f42:	9400      	str	r4, [sp, #0]
 8018f44:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8018f46:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018f48:	681a      	ldr	r2, [r3, #0]
 8018f4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018f4c:	685b      	ldr	r3, [r3, #4]
 8018f4e:	47a0      	blx	r4
 8018f50:	e75b      	b.n	8018e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018f52:	2000      	movs	r0, #0
 8018f54:	e7de      	b.n	8018f14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 8018f56:	240a      	movs	r4, #10
 8018f58:	fab4 f084 	clz	r0, r4
 8018f5c:	0940      	lsrs	r0, r0, #5
 8018f5e:	b017      	add	sp, #92	@ 0x5c
 8018f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f64:	2400      	movs	r4, #0
 8018f66:	e7f7      	b.n	8018f58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 8018f68:	f1ba 0f00 	cmp.w	sl, #0
 8018f6c:	f43f af60 	beq.w	8018e30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x120>
 8018f70:	e781      	b.n	8018e76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 8018f72:	bf00      	nop
 8018f74:	fffffe00 	.word	0xfffffe00

08018f78 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018f78:	b530      	push	{r4, r5, lr}
 8018f7a:	8ac4      	ldrh	r4, [r0, #22]
 8018f7c:	8b45      	ldrh	r5, [r0, #26]
 8018f7e:	8343      	strh	r3, [r0, #26]
 8018f80:	442c      	add	r4, r5
 8018f82:	1ae4      	subs	r4, r4, r3
 8018f84:	8b83      	ldrh	r3, [r0, #28]
 8018f86:	82c4      	strh	r4, [r0, #22]
 8018f88:	8b04      	ldrh	r4, [r0, #24]
 8018f8a:	4422      	add	r2, r4
 8018f8c:	440c      	add	r4, r1
 8018f8e:	1a59      	subs	r1, r3, r1
 8018f90:	83c2      	strh	r2, [r0, #30]
 8018f92:	8304      	strh	r4, [r0, #24]
 8018f94:	8381      	strh	r1, [r0, #28]
 8018f96:	bd30      	pop	{r4, r5, pc}

08018f98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f9c:	f890 b009 	ldrb.w	fp, [r0, #9]
 8018fa0:	b085      	sub	sp, #20
 8018fa2:	4604      	mov	r4, r0
 8018fa4:	460f      	mov	r7, r1
 8018fa6:	f1ab 0303 	sub.w	r3, fp, #3
 8018faa:	b331      	cbz	r1, 8018ffa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 8018fac:	2b01      	cmp	r3, #1
 8018fae:	d922      	bls.n	8018ff6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8018fb0:	f10b 32ff 	add.w	r2, fp, #4294967295
 8018fb4:	f1d2 0a00 	rsbs	sl, r2, #0
 8018fb8:	eb4a 0a02 	adc.w	sl, sl, r2
 8018fbc:	f1ab 0302 	sub.w	r3, fp, #2
 8018fc0:	2500      	movs	r5, #0
 8018fc2:	f1d3 0b00 	rsbs	fp, r3, #0
 8018fc6:	9501      	str	r5, [sp, #4]
 8018fc8:	eb4b 0b03 	adc.w	fp, fp, r3
 8018fcc:	2600      	movs	r6, #0
 8018fce:	82e6      	strh	r6, [r4, #22]
 8018fd0:	8326      	strh	r6, [r4, #24]
 8018fd2:	7a21      	ldrb	r1, [r4, #8]
 8018fd4:	6860      	ldr	r0, [r4, #4]
 8018fd6:	f8b4 9000 	ldrh.w	r9, [r4]
 8018fda:	f002 fde7 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018fde:	4601      	mov	r1, r0
 8018fe0:	8020      	strh	r0, [r4, #0]
 8018fe2:	b9c8      	cbnz	r0, 8019018 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x80>
 8018fe4:	8ba2      	ldrh	r2, [r4, #28]
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	4611      	mov	r1, r2
 8018fea:	4620      	mov	r0, r4
 8018fec:	b005      	add	sp, #20
 8018fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ff2:	f7ff bfc1 	b.w	8018f78 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018ff6:	468a      	mov	sl, r1
 8018ff8:	e7e0      	b.n	8018fbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 8018ffa:	2b01      	cmp	r3, #1
 8018ffc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019000:	468a      	mov	sl, r1
 8019002:	bf8c      	ite	hi
 8019004:	2300      	movhi	r3, #0
 8019006:	2301      	movls	r3, #1
 8019008:	f1bb 0f01 	cmp.w	fp, #1
 801900c:	468b      	mov	fp, r1
 801900e:	9301      	str	r3, [sp, #4]
 8019010:	bf8c      	ite	hi
 8019012:	2500      	movhi	r5, #0
 8019014:	2501      	movls	r5, #1
 8019016:	e7d9      	b.n	8018fcc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x34>
 8019018:	8b63      	ldrh	r3, [r4, #26]
 801901a:	280a      	cmp	r0, #10
 801901c:	f103 0301 	add.w	r3, r3, #1
 8019020:	8363      	strh	r3, [r4, #26]
 8019022:	d0df      	beq.n	8018fe4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8019024:	6920      	ldr	r0, [r4, #16]
 8019026:	6803      	ldr	r3, [r0, #0]
 8019028:	68db      	ldr	r3, [r3, #12]
 801902a:	4798      	blx	r3
 801902c:	4602      	mov	r2, r0
 801902e:	2800      	cmp	r0, #0
 8019030:	d0cf      	beq.n	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 8019032:	8883      	ldrh	r3, [r0, #4]
 8019034:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 8019038:	2b20      	cmp	r3, #32
 801903a:	8023      	strh	r3, [r4, #0]
 801903c:	d103      	bne.n	8019046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xae>
 801903e:	f1b9 0f20 	cmp.w	r9, #32
 8019042:	bf18      	it	ne
 8019044:	4646      	movne	r6, r8
 8019046:	7a93      	ldrb	r3, [r2, #10]
 8019048:	4649      	mov	r1, r9
 801904a:	6920      	ldr	r0, [r4, #16]
 801904c:	9302      	str	r3, [sp, #8]
 801904e:	f992 300d 	ldrsb.w	r3, [r2, #13]
 8019052:	2b00      	cmp	r3, #0
 8019054:	bfb4      	ite	lt
 8019056:	f44f 7380 	movlt.w	r3, #256	@ 0x100
 801905a:	2300      	movge	r3, #0
 801905c:	9303      	str	r3, [sp, #12]
 801905e:	6803      	ldr	r3, [r0, #0]
 8019060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019062:	4798      	blx	r3
 8019064:	9b03      	ldr	r3, [sp, #12]
 8019066:	9a02      	ldr	r2, [sp, #8]
 8019068:	8aa1      	ldrh	r1, [r4, #20]
 801906a:	431a      	orrs	r2, r3
 801906c:	8b23      	ldrh	r3, [r4, #24]
 801906e:	4402      	add	r2, r0
 8019070:	8ba0      	ldrh	r0, [r4, #28]
 8019072:	4402      	add	r2, r0
 8019074:	b292      	uxth	r2, r2
 8019076:	83a2      	strh	r2, [r4, #28]
 8019078:	4413      	add	r3, r2
 801907a:	b327      	cbz	r7, 80190c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12e>
 801907c:	f1ba 0f00 	cmp.w	sl, #0
 8019080:	d105      	bne.n	801908e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf6>
 8019082:	f1bb 0f00 	cmp.w	fp, #0
 8019086:	d00f      	beq.n	80190a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 8019088:	8820      	ldrh	r0, [r4, #0]
 801908a:	2820      	cmp	r0, #32
 801908c:	d10c      	bne.n	80190a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801908e:	8c20      	ldrh	r0, [r4, #32]
 8019090:	4418      	add	r0, r3
 8019092:	4281      	cmp	r1, r0
 8019094:	da02      	bge.n	801909c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x104>
 8019096:	8ae0      	ldrh	r0, [r4, #22]
 8019098:	2800      	cmp	r0, #0
 801909a:	d13a      	bne.n	8019112 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x17a>
 801909c:	2300      	movs	r3, #0
 801909e:	4611      	mov	r1, r2
 80190a0:	4620      	mov	r0, r4
 80190a2:	f7ff ff69 	bl	8018f78 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80190a6:	e794      	b.n	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 80190a8:	428b      	cmp	r3, r1
 80190aa:	dd92      	ble.n	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 80190ac:	8ae3      	ldrh	r3, [r4, #22]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d08f      	beq.n	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 80190b2:	2301      	movs	r3, #1
 80190b4:	8c22      	ldrh	r2, [r4, #32]
 80190b6:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 80190ba:	8be3      	ldrh	r3, [r4, #30]
 80190bc:	4413      	add	r3, r2
 80190be:	83e3      	strh	r3, [r4, #30]
 80190c0:	b005      	add	sp, #20
 80190c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190c6:	428b      	cmp	r3, r1
 80190c8:	dd17      	ble.n	80190fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 80190ca:	9b01      	ldr	r3, [sp, #4]
 80190cc:	b113      	cbz	r3, 80190d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13c>
 80190ce:	2301      	movs	r3, #1
 80190d0:	4642      	mov	r2, r8
 80190d2:	e789      	b.n	8018fe8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 80190d4:	2d00      	cmp	r5, #0
 80190d6:	f43f af7c 	beq.w	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 80190da:	8823      	ldrh	r3, [r4, #0]
 80190dc:	2b20      	cmp	r3, #32
 80190de:	f43f af78 	beq.w	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 80190e2:	f1b9 0f20 	cmp.w	r9, #32
 80190e6:	d103      	bne.n	80190f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x158>
 80190e8:	2301      	movs	r3, #1
 80190ea:	4632      	mov	r2, r6
 80190ec:	4641      	mov	r1, r8
 80190ee:	e77c      	b.n	8018fea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 80190f0:	8ae3      	ldrh	r3, [r4, #22]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	f43f af6d 	beq.w	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 80190f8:	e7e2      	b.n	80190c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x128>
 80190fa:	8823      	ldrh	r3, [r4, #0]
 80190fc:	2b20      	cmp	r3, #32
 80190fe:	f43f af68 	beq.w	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 8019102:	f1b9 0f20 	cmp.w	r9, #32
 8019106:	f47f af64 	bne.w	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801910a:	2301      	movs	r3, #1
 801910c:	4632      	mov	r2, r6
 801910e:	4641      	mov	r1, r8
 8019110:	e7c6      	b.n	80190a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x108>
 8019112:	428b      	cmp	r3, r1
 8019114:	f77f af5d 	ble.w	8018fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 8019118:	e7cb      	b.n	80190b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x11a>

0801911a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801911a:	b570      	push	{r4, r5, r6, lr}
 801911c:	4606      	mov	r6, r0
 801911e:	b08c      	sub	sp, #48	@ 0x30
 8019120:	4615      	mov	r5, r2
 8019122:	b191      	cbz	r1, 801914a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8019124:	2401      	movs	r4, #1
 8019126:	9101      	str	r1, [sp, #4]
 8019128:	9300      	str	r3, [sp, #0]
 801912a:	4601      	mov	r1, r0
 801912c:	4613      	mov	r3, r2
 801912e:	a803      	add	r0, sp, #12
 8019130:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8019134:	f7ff fcd2 	bl	8018adc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019138:	2100      	movs	r1, #0
 801913a:	a803      	add	r0, sp, #12
 801913c:	f7ff ff2c 	bl	8018f98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019140:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019144:	b173      	cbz	r3, 8019164 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8019146:	3401      	adds	r4, #1
 8019148:	e7f6      	b.n	8019138 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801914a:	2401      	movs	r4, #1
 801914c:	4611      	mov	r1, r2
 801914e:	f002 fd2d 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019152:	280a      	cmp	r0, #10
 8019154:	4629      	mov	r1, r5
 8019156:	4630      	mov	r0, r6
 8019158:	bf08      	it	eq
 801915a:	3401      	addeq	r4, #1
 801915c:	f002 fd26 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019160:	2800      	cmp	r0, #0
 8019162:	d1f6      	bne.n	8019152 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8019164:	b2a0      	uxth	r0, r4
 8019166:	b00c      	add	sp, #48	@ 0x30
 8019168:	bd70      	pop	{r4, r5, r6, pc}
	...

0801916c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019170:	b0ab      	sub	sp, #172	@ 0xac
 8019172:	4689      	mov	r9, r1
 8019174:	461c      	mov	r4, r3
 8019176:	f8dd a0d0 	ldr.w	sl, [sp, #208]	@ 0xd0
 801917a:	9009      	str	r0, [sp, #36]	@ 0x24
 801917c:	f1ba 0f00 	cmp.w	sl, #0
 8019180:	f000 80ac 	beq.w	80192dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	2b00      	cmp	r3, #0
 8019188:	f000 80a8 	beq.w	80192dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801918c:	7ba3      	ldrb	r3, [r4, #14]
 801918e:	2b00      	cmp	r3, #0
 8019190:	f000 80a4 	beq.w	80192dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 8019194:	6810      	ldr	r0, [r2, #0]
 8019196:	ab0b      	add	r3, sp, #44	@ 0x2c
 8019198:	6851      	ldr	r1, [r2, #4]
 801919a:	f10d 083c 	add.w	r8, sp, #60	@ 0x3c
 801919e:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 80191a2:	c303      	stmia	r3!, {r0, r1}
 80191a4:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 80191a8:	2300      	movs	r3, #0
 80191aa:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 80191ae:	a80b      	add	r0, sp, #44	@ 0x2c
 80191b0:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 80191b4:	a90d      	add	r1, sp, #52	@ 0x34
 80191b6:	79a2      	ldrb	r2, [r4, #6]
 80191b8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80191bc:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80191c0:	f7ff fd54 	bl	8018c6c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80191c4:	a90d      	add	r1, sp, #52	@ 0x34
 80191c6:	79a2      	ldrb	r2, [r4, #6]
 80191c8:	4608      	mov	r0, r1
 80191ca:	f7ff fd4f 	bl	8018c6c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80191ce:	4640      	mov	r0, r8
 80191d0:	f002 fd32 	bl	801bc38 <_ZN8touchgfx12TextProviderC1Ev>
 80191d4:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 80191d6:	4651      	mov	r1, sl
 80191d8:	4640      	mov	r0, r8
 80191da:	f002 fd36 	bl	801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 80191de:	a815      	add	r0, sp, #84	@ 0x54
 80191e0:	f002 fd2a 	bl	801bc38 <_ZN8touchgfx12TextProviderC1Ev>
 80191e4:	7927      	ldrb	r7, [r4, #4]
 80191e6:	b127      	cbz	r7, 80191f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x86>
 80191e8:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 80191ea:	4651      	mov	r1, sl
 80191ec:	a815      	add	r0, sp, #84	@ 0x54
 80191ee:	f002 fd2c 	bl	801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 80191f2:	6820      	ldr	r0, [r4, #0]
 80191f4:	89a5      	ldrh	r5, [r4, #12]
 80191f6:	6803      	ldr	r3, [r0, #0]
 80191f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80191fa:	4798      	blx	r3
 80191fc:	4405      	add	r5, r0
 80191fe:	a81b      	add	r0, sp, #108	@ 0x6c
 8019200:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8019204:	f002 fd18 	bl	801bc38 <_ZN8touchgfx12TextProviderC1Ev>
 8019208:	7c23      	ldrb	r3, [r4, #16]
 801920a:	fb96 f6f5 	sdiv	r6, r6, r5
 801920e:	b123      	cbz	r3, 801921a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xae>
 8019210:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8019212:	4651      	mov	r1, sl
 8019214:	a81b      	add	r0, sp, #108	@ 0x6c
 8019216:	f002 fd18 	bl	801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801921a:	7c21      	ldrb	r1, [r4, #16]
 801921c:	a821      	add	r0, sp, #132	@ 0x84
 801921e:	7963      	ldrb	r3, [r4, #5]
 8019220:	9101      	str	r1, [sp, #4]
 8019222:	6821      	ldr	r1, [r4, #0]
 8019224:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8019228:	9100      	str	r1, [sp, #0]
 801922a:	a91b      	add	r1, sp, #108	@ 0x6c
 801922c:	f7ff fc56 	bl	8018adc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019230:	7c23      	ldrb	r3, [r4, #16]
 8019232:	bb03      	cbnz	r3, 8019276 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x10a>
 8019234:	fa1f fa85 	uxth.w	sl, r5
 8019238:	2e00      	cmp	r6, #0
 801923a:	dd52      	ble.n	80192e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801923c:	7961      	ldrb	r1, [r4, #5]
 801923e:	4640      	mov	r0, r8
 8019240:	f002 fcb4 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019244:	4683      	mov	fp, r0
 8019246:	b11f      	cbz	r7, 8019250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe4>
 8019248:	7961      	ldrb	r1, [r4, #5]
 801924a:	a815      	add	r0, sp, #84	@ 0x54
 801924c:	f002 fcae 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019250:	f1bb 0f00 	cmp.w	fp, #0
 8019254:	d042      	beq.n	80192dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 8019256:	f1bb 0f0a 	cmp.w	fp, #10
 801925a:	d1ed      	bne.n	8019238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801925c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8019260:	3e01      	subs	r6, #1
 8019262:	4453      	add	r3, sl
 8019264:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019268:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801926c:	eba3 030a 	sub.w	r3, r3, sl
 8019270:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8019274:	e7e0      	b.n	8019238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 8019276:	006b      	lsls	r3, r5, #1
 8019278:	fa1f fa85 	uxth.w	sl, r5
 801927c:	9308      	str	r3, [sp, #32]
 801927e:	2e00      	cmp	r6, #0
 8019280:	dd2f      	ble.n	80192e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 8019282:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8019286:	a821      	add	r0, sp, #132	@ 0x84
 8019288:	9b08      	ldr	r3, [sp, #32]
 801928a:	428b      	cmp	r3, r1
 801928c:	bfd4      	ite	le
 801928e:	2100      	movle	r1, #0
 8019290:	2101      	movgt	r1, #1
 8019292:	f7ff fe81 	bl	8018f98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019296:	f8bd b09a 	ldrh.w	fp, [sp, #154]	@ 0x9a
 801929a:	f1bb 0f00 	cmp.w	fp, #0
 801929e:	d00d      	beq.n	80192bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x150>
 80192a0:	7961      	ldrb	r1, [r4, #5]
 80192a2:	4640      	mov	r0, r8
 80192a4:	f002 fc82 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80192a8:	b11f      	cbz	r7, 80192b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x146>
 80192aa:	7961      	ldrb	r1, [r4, #5]
 80192ac:	a815      	add	r0, sp, #84	@ 0x54
 80192ae:	f002 fc7d 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80192b2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80192b6:	fa1f fb83 	uxth.w	fp, r3
 80192ba:	e7ee      	b.n	801929a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80192bc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80192c0:	3e01      	subs	r6, #1
 80192c2:	4453      	add	r3, sl
 80192c4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80192c8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80192cc:	eba3 030a 	sub.w	r3, r3, sl
 80192d0:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80192d4:	f8bd 3084 	ldrh.w	r3, [sp, #132]	@ 0x84
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d1d0      	bne.n	801927e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x112>
 80192dc:	b02b      	add	sp, #172	@ 0xac
 80192de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192e2:	4b40      	ldr	r3, [pc, #256]	@ (80193e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 80192e4:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 80192e8:	f04f 0a02 	mov.w	sl, #2
 80192ec:	6818      	ldr	r0, [r3, #0]
 80192ee:	6803      	ldr	r3, [r0, #0]
 80192f0:	6a1b      	ldr	r3, [r3, #32]
 80192f2:	4798      	blx	r3
 80192f4:	4606      	mov	r6, r0
 80192f6:	7c23      	ldrb	r3, [r4, #16]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d067      	beq.n	80193cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80192fc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8019300:	a821      	add	r0, sp, #132	@ 0x84
 8019302:	458b      	cmp	fp, r1
 8019304:	bfd4      	ite	le
 8019306:	2100      	movle	r1, #0
 8019308:	2101      	movgt	r1, #1
 801930a:	f7ff fe45 	bl	8018f98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801930e:	2f00      	cmp	r7, #0
 8019310:	d055      	beq.n	80193be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8019312:	7c23      	ldrb	r3, [r4, #16]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d05b      	beq.n	80193d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 8019318:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 801931c:	7922      	ldrb	r2, [r4, #4]
 801931e:	2a01      	cmp	r2, #1
 8019320:	d145      	bne.n	80193ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8019322:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8019326:	1ac0      	subs	r0, r0, r3
 8019328:	fb90 f0fa 	sdiv	r0, r0, sl
 801932c:	b200      	sxth	r0, r0
 801932e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8019332:	4418      	add	r0, r3
 8019334:	7c23      	ldrb	r3, [r4, #16]
 8019336:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801933a:	2b00      	cmp	r3, #0
 801933c:	d043      	beq.n	80193c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801933e:	f8bd 209a 	ldrh.w	r2, [sp, #154]	@ 0x9a
 8019342:	9205      	str	r2, [sp, #20]
 8019344:	2200      	movs	r2, #0
 8019346:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 801934a:	9203      	str	r2, [sp, #12]
 801934c:	aa0b      	add	r2, sp, #44	@ 0x2c
 801934e:	9106      	str	r1, [sp, #24]
 8019350:	4631      	mov	r1, r6
 8019352:	9201      	str	r2, [sp, #4]
 8019354:	f10d 022a 	add.w	r2, sp, #42	@ 0x2a
 8019358:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801935c:	9200      	str	r2, [sp, #0]
 801935e:	464a      	mov	r2, r9
 8019360:	f8cd 8010 	str.w	r8, [sp, #16]
 8019364:	9402      	str	r4, [sp, #8]
 8019366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019368:	f7ff fcd2 	bl	8018d10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801936c:	b9c8      	cbnz	r0, 80193a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801936e:	b2aa      	uxth	r2, r5
 8019370:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8019374:	4611      	mov	r1, r2
 8019376:	4413      	add	r3, r2
 8019378:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801937c:	b21b      	sxth	r3, r3
 801937e:	1a52      	subs	r2, r2, r1
 8019380:	7c21      	ldrb	r1, [r4, #16]
 8019382:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019386:	b212      	sxth	r2, r2
 8019388:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801938c:	b109      	cbz	r1, 8019392 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x226>
 801938e:	4295      	cmp	r5, r2
 8019390:	dc07      	bgt.n	80193a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 8019392:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8019396:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801939a:	440a      	add	r2, r1
 801939c:	b212      	sxth	r2, r2
 801939e:	4293      	cmp	r3, r2
 80193a0:	dda9      	ble.n	80192f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 80193a2:	4b10      	ldr	r3, [pc, #64]	@ (80193e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 80193a4:	6818      	ldr	r0, [r3, #0]
 80193a6:	6803      	ldr	r3, [r0, #0]
 80193a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193aa:	4798      	blx	r3
 80193ac:	e796      	b.n	80192dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 80193ae:	2a02      	cmp	r2, #2
 80193b0:	d107      	bne.n	80193c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80193b2:	7be2      	ldrb	r2, [r4, #15]
 80193b4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 80193b8:	1a80      	subs	r0, r0, r2
 80193ba:	1ac0      	subs	r0, r0, r3
 80193bc:	e7b6      	b.n	801932c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>
 80193be:	7be0      	ldrb	r0, [r4, #15]
 80193c0:	e7b5      	b.n	801932e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 80193c2:	2000      	movs	r0, #0
 80193c4:	e7b3      	b.n	801932e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 80193c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80193ca:	e7ba      	b.n	8019342 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80193cc:	2f00      	cmp	r7, #0
 80193ce:	d0f6      	beq.n	80193be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80193d0:	2300      	movs	r3, #0
 80193d2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80193d6:	6821      	ldr	r1, [r4, #0]
 80193d8:	a815      	add	r0, sp, #84	@ 0x54
 80193da:	f7ff fc11 	bl	8018c00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80193de:	b203      	sxth	r3, r0
 80193e0:	e79c      	b.n	801931c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b0>
 80193e2:	bf00      	nop
 80193e4:	20024e34 	.word	0x20024e34

080193e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80193e8:	2b02      	cmp	r3, #2
 80193ea:	d00e      	beq.n	801940a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80193ec:	2b03      	cmp	r3, #3
 80193ee:	d012      	beq.n	8019416 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 80193f0:	2b01      	cmp	r3, #1
 80193f2:	d003      	beq.n	80193fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80193f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80193f8:	1850      	adds	r0, r2, r1
 80193fa:	4770      	bx	lr
 80193fc:	8803      	ldrh	r3, [r0, #0]
 80193fe:	8880      	ldrh	r0, [r0, #4]
 8019400:	4418      	add	r0, r3
 8019402:	b200      	sxth	r0, r0
 8019404:	1a80      	subs	r0, r0, r2
 8019406:	3801      	subs	r0, #1
 8019408:	4770      	bx	lr
 801940a:	8803      	ldrh	r3, [r0, #0]
 801940c:	8880      	ldrh	r0, [r0, #4]
 801940e:	4418      	add	r0, r3
 8019410:	b200      	sxth	r0, r0
 8019412:	1a40      	subs	r0, r0, r1
 8019414:	e7f7      	b.n	8019406 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019416:	f9b0 0000 	ldrsh.w	r0, [r0]
 801941a:	4410      	add	r0, r2
 801941c:	4770      	bx	lr

0801941e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801941e:	2b02      	cmp	r3, #2
 8019420:	d008      	beq.n	8019434 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8019422:	2b03      	cmp	r3, #3
 8019424:	d00d      	beq.n	8019442 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019426:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801942a:	2b01      	cmp	r3, #1
 801942c:	bf14      	ite	ne
 801942e:	1880      	addne	r0, r0, r2
 8019430:	1840      	addeq	r0, r0, r1
 8019432:	4770      	bx	lr
 8019434:	8843      	ldrh	r3, [r0, #2]
 8019436:	88c0      	ldrh	r0, [r0, #6]
 8019438:	4418      	add	r0, r3
 801943a:	b200      	sxth	r0, r0
 801943c:	1a80      	subs	r0, r0, r2
 801943e:	3801      	subs	r0, #1
 8019440:	4770      	bx	lr
 8019442:	8843      	ldrh	r3, [r0, #2]
 8019444:	88c0      	ldrh	r0, [r0, #6]
 8019446:	4418      	add	r0, r3
 8019448:	b200      	sxth	r0, r0
 801944a:	1a40      	subs	r0, r0, r1
 801944c:	e7f7      	b.n	801943e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08019450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019450:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019458:	b0d1      	sub	sp, #324	@ 0x144
 801945a:	ed92 7a02 	vldr	s14, [r2, #8]
 801945e:	4683      	mov	fp, r0
 8019460:	4614      	mov	r4, r2
 8019462:	930a      	str	r3, [sp, #40]	@ 0x28
 8019464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019468:	f8bd 3170 	ldrh.w	r3, [sp, #368]	@ 0x170
 801946c:	9109      	str	r1, [sp, #36]	@ 0x24
 801946e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019474:	f89d 3174 	ldrb.w	r3, [sp, #372]	@ 0x174
 8019478:	9f5b      	ldr	r7, [sp, #364]	@ 0x16c
 801947a:	930c      	str	r3, [sp, #48]	@ 0x30
 801947c:	f8bd 3178 	ldrh.w	r3, [sp, #376]	@ 0x178
 8019480:	930d      	str	r3, [sp, #52]	@ 0x34
 8019482:	f240 8140 	bls.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8019486:	ed92 7a07 	vldr	s14, [r2, #28]
 801948a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801948e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019492:	f240 8138 	bls.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8019496:	ed92 7a0c 	vldr	s14, [r2, #48]	@ 0x30
 801949a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a2:	f240 8130 	bls.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80194a6:	6812      	ldr	r2, [r2, #0]
 80194a8:	4b98      	ldr	r3, [pc, #608]	@ (801970c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2bc>)
 80194aa:	429a      	cmp	r2, r3
 80194ac:	f2c0 812b 	blt.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80194b0:	4997      	ldr	r1, [pc, #604]	@ (8019710 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c0>)
 80194b2:	6963      	ldr	r3, [r4, #20]
 80194b4:	428a      	cmp	r2, r1
 80194b6:	f300 8126 	bgt.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80194ba:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80194be:	4895      	ldr	r0, [pc, #596]	@ (8019714 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c4>)
 80194c0:	33ff      	adds	r3, #255	@ 0xff
 80194c2:	4283      	cmp	r3, r0
 80194c4:	f200 811f 	bhi.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80194c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80194ca:	4d93      	ldr	r5, [pc, #588]	@ (8019718 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c8>)
 80194cc:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80194d0:	33ff      	adds	r3, #255	@ 0xff
 80194d2:	42ab      	cmp	r3, r5
 80194d4:	f200 8117 	bhi.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80194d8:	6862      	ldr	r2, [r4, #4]
 80194da:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80194de:	33ff      	adds	r3, #255	@ 0xff
 80194e0:	4283      	cmp	r3, r0
 80194e2:	f200 8110 	bhi.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80194e6:	69a1      	ldr	r1, [r4, #24]
 80194e8:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80194ec:	33ff      	adds	r3, #255	@ 0xff
 80194ee:	4283      	cmp	r3, r0
 80194f0:	f200 8109 	bhi.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80194f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80194f6:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80194fa:	30ff      	adds	r0, #255	@ 0xff
 80194fc:	42a8      	cmp	r0, r5
 80194fe:	f200 8102 	bhi.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8019502:	428a      	cmp	r2, r1
 8019504:	da7a      	bge.n	80195fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ac>
 8019506:	429a      	cmp	r2, r3
 8019508:	f300 8084 	bgt.w	8019614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c4>
 801950c:	4299      	cmp	r1, r3
 801950e:	f2c0 8088 	blt.w	8019622 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1d2>
 8019512:	2501      	movs	r5, #1
 8019514:	2602      	movs	r6, #2
 8019516:	46a9      	mov	r9, r5
 8019518:	46b0      	mov	r8, r6
 801951a:	f04f 0a00 	mov.w	sl, #0
 801951e:	4621      	mov	r1, r4
 8019520:	a83f      	add	r0, sp, #252	@ 0xfc
 8019522:	f002 fbcf 	bl	801bcc4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019526:	4622      	mov	r2, r4
 8019528:	f8cd 9000 	str.w	r9, [sp]
 801952c:	4653      	mov	r3, sl
 801952e:	a93f      	add	r1, sp, #252	@ 0xfc
 8019530:	a80f      	add	r0, sp, #60	@ 0x3c
 8019532:	f002 fcf7 	bl	801bf24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019536:	f8cd 8000 	str.w	r8, [sp]
 801953a:	4622      	mov	r2, r4
 801953c:	4653      	mov	r3, sl
 801953e:	a93f      	add	r1, sp, #252	@ 0xfc
 8019540:	a81f      	add	r0, sp, #124	@ 0x7c
 8019542:	f002 fcef 	bl	801bf24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019546:	4643      	mov	r3, r8
 8019548:	4622      	mov	r2, r4
 801954a:	f8cd 9000 	str.w	r9, [sp]
 801954e:	a93f      	add	r1, sp, #252	@ 0xfc
 8019550:	a82f      	add	r0, sp, #188	@ 0xbc
 8019552:	f002 fce7 	bl	801bf24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019556:	42ae      	cmp	r6, r5
 8019558:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 801955a:	bfac      	ite	ge
 801955c:	ad1f      	addge	r5, sp, #124	@ 0x7c
 801955e:	ad0f      	addlt	r5, sp, #60	@ 0x3c
 8019560:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 8019564:	bfa8      	it	ge
 8019566:	2601      	movge	r6, #1
 8019568:	696b      	ldr	r3, [r5, #20]
 801956a:	bfa8      	it	ge
 801956c:	f10d 083c 	addge.w	r8, sp, #60	@ 0x3c
 8019570:	88fa      	ldrh	r2, [r7, #6]
 8019572:	bfb8      	it	lt
 8019574:	2600      	movlt	r6, #0
 8019576:	444b      	add	r3, r9
 8019578:	f9b7 9002 	ldrsh.w	r9, [r7, #2]
 801957c:	bfb8      	it	lt
 801957e:	f10d 087c 	addlt.w	r8, sp, #124	@ 0x7c
 8019582:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8019584:	444a      	add	r2, r9
 8019586:	b212      	sxth	r2, r2
 8019588:	4293      	cmp	r3, r2
 801958a:	da56      	bge.n	801963a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ea>
 801958c:	454b      	cmp	r3, r9
 801958e:	da08      	bge.n	80195a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 8019590:	2c00      	cmp	r4, #0
 8019592:	dd60      	ble.n	8019656 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x206>
 8019594:	eba9 0903 	sub.w	r9, r9, r3
 8019598:	454c      	cmp	r4, r9
 801959a:	db50      	blt.n	801963e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ee>
 801959c:	f1b9 0f00 	cmp.w	r9, #0
 80195a0:	dc4e      	bgt.n	8019640 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 80195a2:	2c00      	cmp	r4, #0
 80195a4:	dd57      	ble.n	8019656 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x206>
 80195a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80195a8:	4658      	mov	r0, fp
 80195aa:	f8db 3000 	ldr.w	r3, [fp]
 80195ae:	3c01      	subs	r4, #1
 80195b0:	9206      	str	r2, [sp, #24]
 80195b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80195b4:	9703      	str	r7, [sp, #12]
 80195b6:	9205      	str	r2, [sp, #20]
 80195b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80195ba:	f8cd 8000 	str.w	r8, [sp]
 80195be:	9204      	str	r2, [sp, #16]
 80195c0:	9a5a      	ldr	r2, [sp, #360]	@ 0x168
 80195c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80195c4:	9202      	str	r2, [sp, #8]
 80195c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80195c8:	9201      	str	r2, [sp, #4]
 80195ca:	aa3f      	add	r2, sp, #252	@ 0xfc
 80195cc:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
 80195d0:	462b      	mov	r3, r5
 80195d2:	47c8      	blx	r9
 80195d4:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 80195d6:	88f9      	ldrh	r1, [r7, #6]
 80195d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80195dc:	696b      	ldr	r3, [r5, #20]
 80195de:	441a      	add	r2, r3
 80195e0:	887b      	ldrh	r3, [r7, #2]
 80195e2:	440b      	add	r3, r1
 80195e4:	3201      	adds	r2, #1
 80195e6:	b21b      	sxth	r3, r3
 80195e8:	429a      	cmp	r2, r3
 80195ea:	f280 808c 	bge.w	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80195ee:	a81f      	add	r0, sp, #124	@ 0x7c
 80195f0:	f7ff fab7 	bl	8018b62 <_ZN8touchgfx4Edge4stepEv>
 80195f4:	a80f      	add	r0, sp, #60	@ 0x3c
 80195f6:	f7ff fab4 	bl	8018b62 <_ZN8touchgfx4Edge4stepEv>
 80195fa:	e7d2      	b.n	80195a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 80195fc:	4299      	cmp	r1, r3
 80195fe:	dc13      	bgt.n	8019628 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1d8>
 8019600:	429a      	cmp	r2, r3
 8019602:	db14      	blt.n	801962e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1de>
 8019604:	2602      	movs	r6, #2
 8019606:	2503      	movs	r5, #3
 8019608:	f04f 0900 	mov.w	r9, #0
 801960c:	46b0      	mov	r8, r6
 801960e:	f04f 0a01 	mov.w	sl, #1
 8019612:	e784      	b.n	801951e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xce>
 8019614:	2501      	movs	r5, #1
 8019616:	2600      	movs	r6, #0
 8019618:	46a9      	mov	r9, r5
 801961a:	46b0      	mov	r8, r6
 801961c:	f04f 0a02 	mov.w	sl, #2
 8019620:	e77d      	b.n	801951e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xce>
 8019622:	2502      	movs	r5, #2
 8019624:	2601      	movs	r6, #1
 8019626:	e776      	b.n	8019516 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc6>
 8019628:	2500      	movs	r5, #0
 801962a:	2601      	movs	r6, #1
 801962c:	e7f4      	b.n	8019618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c8>
 801962e:	2502      	movs	r5, #2
 8019630:	2603      	movs	r6, #3
 8019632:	f04f 0800 	mov.w	r8, #0
 8019636:	46a9      	mov	r9, r5
 8019638:	e7e9      	b.n	801960e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1be>
 801963a:	46a1      	mov	r9, r4
 801963c:	e7ae      	b.n	801959c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x14c>
 801963e:	46a1      	mov	r9, r4
 8019640:	4649      	mov	r1, r9
 8019642:	a81f      	add	r0, sp, #124	@ 0x7c
 8019644:	f7ff facf 	bl	8018be6 <_ZN8touchgfx4Edge4stepEi>
 8019648:	4649      	mov	r1, r9
 801964a:	a80f      	add	r0, sp, #60	@ 0x3c
 801964c:	eba4 0409 	sub.w	r4, r4, r9
 8019650:	f7ff fac9 	bl	8018be6 <_ZN8touchgfx4Edge4stepEi>
 8019654:	e7a5      	b.n	80195a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 8019656:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
 8019658:	2e00      	cmp	r6, #0
 801965a:	d143      	bne.n	80196e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x294>
 801965c:	ae2f      	add	r6, sp, #188	@ 0xbc
 801965e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8019660:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 8019662:	88fa      	ldrh	r2, [r7, #6]
 8019664:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 8019668:	696b      	ldr	r3, [r5, #20]
 801966a:	4443      	add	r3, r8
 801966c:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 8019670:	4442      	add	r2, r8
 8019672:	b212      	sxth	r2, r2
 8019674:	4293      	cmp	r3, r2
 8019676:	da38      	bge.n	80196ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x29a>
 8019678:	4543      	cmp	r3, r8
 801967a:	da08      	bge.n	801968e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 801967c:	2c00      	cmp	r4, #0
 801967e:	dd42      	ble.n	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8019680:	eba8 0803 	sub.w	r8, r8, r3
 8019684:	4544      	cmp	r4, r8
 8019686:	db32      	blt.n	80196ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x29e>
 8019688:	f1b8 0f00 	cmp.w	r8, #0
 801968c:	dc30      	bgt.n	80196f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2a0>
 801968e:	2c00      	cmp	r4, #0
 8019690:	dd39      	ble.n	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8019692:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019694:	4658      	mov	r0, fp
 8019696:	f8db 3000 	ldr.w	r3, [fp]
 801969a:	3c01      	subs	r4, #1
 801969c:	9206      	str	r2, [sp, #24]
 801969e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80196a0:	9703      	str	r7, [sp, #12]
 80196a2:	9205      	str	r2, [sp, #20]
 80196a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80196a6:	9600      	str	r6, [sp, #0]
 80196a8:	9204      	str	r2, [sp, #16]
 80196aa:	9a5a      	ldr	r2, [sp, #360]	@ 0x168
 80196ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80196ae:	9202      	str	r2, [sp, #8]
 80196b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80196b2:	9201      	str	r2, [sp, #4]
 80196b4:	aa3f      	add	r2, sp, #252	@ 0xfc
 80196b6:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80196ba:	462b      	mov	r3, r5
 80196bc:	47c0      	blx	r8
 80196be:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 80196c0:	88f9      	ldrh	r1, [r7, #6]
 80196c2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80196c6:	696b      	ldr	r3, [r5, #20]
 80196c8:	441a      	add	r2, r3
 80196ca:	887b      	ldrh	r3, [r7, #2]
 80196cc:	440b      	add	r3, r1
 80196ce:	3201      	adds	r2, #1
 80196d0:	b21b      	sxth	r3, r3
 80196d2:	429a      	cmp	r2, r3
 80196d4:	da17      	bge.n	8019706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80196d6:	a82f      	add	r0, sp, #188	@ 0xbc
 80196d8:	f7ff fa43 	bl	8018b62 <_ZN8touchgfx4Edge4stepEv>
 80196dc:	a80f      	add	r0, sp, #60	@ 0x3c
 80196de:	f7ff fa40 	bl	8018b62 <_ZN8touchgfx4Edge4stepEv>
 80196e2:	e7d4      	b.n	801968e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 80196e4:	ae0f      	add	r6, sp, #60	@ 0x3c
 80196e6:	ad2f      	add	r5, sp, #188	@ 0xbc
 80196e8:	e7ba      	b.n	8019660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80196ea:	46a0      	mov	r8, r4
 80196ec:	e7cc      	b.n	8019688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>
 80196ee:	46a0      	mov	r8, r4
 80196f0:	4641      	mov	r1, r8
 80196f2:	a82f      	add	r0, sp, #188	@ 0xbc
 80196f4:	f7ff fa77 	bl	8018be6 <_ZN8touchgfx4Edge4stepEi>
 80196f8:	4641      	mov	r1, r8
 80196fa:	a80f      	add	r0, sp, #60	@ 0x3c
 80196fc:	eba4 0408 	sub.w	r4, r4, r8
 8019700:	f7ff fa71 	bl	8018be6 <_ZN8touchgfx4Edge4stepEi>
 8019704:	e7c3      	b.n	801968e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 8019706:	b051      	add	sp, #324	@ 0x144
 8019708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801970c:	fffd8f01 	.word	0xfffd8f01
 8019710:	00027100 	.word	0x00027100
 8019714:	0004e1ff 	.word	0x0004e1ff
 8019718:	0004e1fe 	.word	0x0004e1fe

0801971c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801971c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801971e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8019722:	1e05      	subs	r5, r0, #0
 8019724:	f04f 0601 	mov.w	r6, #1
 8019728:	9c06      	ldr	r4, [sp, #24]
 801972a:	bfba      	itte	lt
 801972c:	f04f 37ff 	movlt.w	r7, #4294967295
 8019730:	426d      	neglt	r5, r5
 8019732:	2701      	movge	r7, #1
 8019734:	f1bc 0f00 	cmp.w	ip, #0
 8019738:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801973c:	bfbc      	itt	lt
 801973e:	f1cc 0c00 	rsblt	ip, ip, #0
 8019742:	427f      	neglt	r7, r7
 8019744:	2c00      	cmp	r4, #0
 8019746:	fa4c f001 	asr.w	r0, ip, r1
 801974a:	fa06 f101 	lsl.w	r1, r6, r1
 801974e:	bfbc      	itt	lt
 8019750:	4264      	neglt	r4, r4
 8019752:	427f      	neglt	r7, r7
 8019754:	3901      	subs	r1, #1
 8019756:	ea01 010c 	and.w	r1, r1, ip
 801975a:	434d      	muls	r5, r1
 801975c:	f8de 1000 	ldr.w	r1, [lr]
 8019760:	fb03 1300 	mla	r3, r3, r0, r1
 8019764:	fb95 f1f4 	sdiv	r1, r5, r4
 8019768:	fb04 5511 	mls	r5, r4, r1, r5
 801976c:	441d      	add	r5, r3
 801976e:	fb95 f3f4 	sdiv	r3, r5, r4
 8019772:	4419      	add	r1, r3
 8019774:	fb04 5413 	mls	r4, r4, r3, r5
 8019778:	fb02 1000 	mla	r0, r2, r0, r1
 801977c:	f8ce 4000 	str.w	r4, [lr]
 8019780:	4378      	muls	r0, r7
 8019782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019784 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019788:	4c24      	ldr	r4, [pc, #144]	@ (801981c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801978a:	b086      	sub	sp, #24
 801978c:	4605      	mov	r5, r0
 801978e:	6807      	ldr	r7, [r0, #0]
 8019790:	69a3      	ldr	r3, [r4, #24]
 8019792:	b92b      	cbnz	r3, 80197a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8019794:	6840      	ldr	r0, [r0, #4]
 8019796:	602f      	str	r7, [r5, #0]
 8019798:	6068      	str	r0, [r5, #4]
 801979a:	b006      	add	sp, #24
 801979c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197a0:	f04f 0802 	mov.w	r8, #2
 80197a4:	68a2      	ldr	r2, [r4, #8]
 80197a6:	ae06      	add	r6, sp, #24
 80197a8:	6820      	ldr	r0, [r4, #0]
 80197aa:	fb93 f1f8 	sdiv	r1, r3, r8
 80197ae:	440a      	add	r2, r1
 80197b0:	69e1      	ldr	r1, [r4, #28]
 80197b2:	f846 2d04 	str.w	r2, [r6, #-4]!
 80197b6:	9301      	str	r3, [sp, #4]
 80197b8:	9700      	str	r7, [sp, #0]
 80197ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80197bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80197be:	9602      	str	r6, [sp, #8]
 80197c0:	f7ff ffac 	bl	801971c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80197c4:	69a3      	ldr	r3, [r4, #24]
 80197c6:	4607      	mov	r7, r0
 80197c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80197ca:	9301      	str	r3, [sp, #4]
 80197cc:	686b      	ldr	r3, [r5, #4]
 80197ce:	6a21      	ldr	r1, [r4, #32]
 80197d0:	9300      	str	r3, [sp, #0]
 80197d2:	9602      	str	r6, [sp, #8]
 80197d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80197d6:	6860      	ldr	r0, [r4, #4]
 80197d8:	f7ff ffa0 	bl	801971c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80197dc:	69a2      	ldr	r2, [r4, #24]
 80197de:	6963      	ldr	r3, [r4, #20]
 80197e0:	4407      	add	r7, r0
 80197e2:	9201      	str	r2, [sp, #4]
 80197e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80197e6:	9602      	str	r6, [sp, #8]
 80197e8:	68e0      	ldr	r0, [r4, #12]
 80197ea:	fb92 f8f8 	sdiv	r8, r2, r8
 80197ee:	4443      	add	r3, r8
 80197f0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80197f2:	9305      	str	r3, [sp, #20]
 80197f4:	682b      	ldr	r3, [r5, #0]
 80197f6:	9300      	str	r3, [sp, #0]
 80197f8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80197fa:	f7ff ff8f 	bl	801971c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80197fe:	69a3      	ldr	r3, [r4, #24]
 8019800:	4680      	mov	r8, r0
 8019802:	9602      	str	r6, [sp, #8]
 8019804:	9301      	str	r3, [sp, #4]
 8019806:	686b      	ldr	r3, [r5, #4]
 8019808:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801980a:	9300      	str	r3, [sp, #0]
 801980c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801980e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8019810:	6920      	ldr	r0, [r4, #16]
 8019812:	f7ff ff83 	bl	801971c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019816:	4440      	add	r0, r8
 8019818:	e7bd      	b.n	8019796 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801981a:	bf00      	nop
 801981c:	20024e5c 	.word	0x20024e5c

08019820 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019820:	4b07      	ldr	r3, [pc, #28]	@ (8019840 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019822:	b510      	push	{r4, lr}
 8019824:	781b      	ldrb	r3, [r3, #0]
 8019826:	2b01      	cmp	r3, #1
 8019828:	d108      	bne.n	801983c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801982a:	4b06      	ldr	r3, [pc, #24]	@ (8019844 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801982c:	880c      	ldrh	r4, [r1, #0]
 801982e:	881b      	ldrh	r3, [r3, #0]
 8019830:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019834:	3b01      	subs	r3, #1
 8019836:	1b1b      	subs	r3, r3, r4
 8019838:	8003      	strh	r3, [r0, #0]
 801983a:	800a      	strh	r2, [r1, #0]
 801983c:	bd10      	pop	{r4, pc}
 801983e:	bf00      	nop
 8019840:	20024e2c 	.word	0x20024e2c
 8019844:	20024e30 	.word	0x20024e30

08019848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019848:	4b07      	ldr	r3, [pc, #28]	@ (8019868 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801984a:	b510      	push	{r4, lr}
 801984c:	781b      	ldrb	r3, [r3, #0]
 801984e:	2b01      	cmp	r3, #1
 8019850:	d108      	bne.n	8019864 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019852:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019856:	f9b0 4000 	ldrsh.w	r4, [r0]
 801985a:	8003      	strh	r3, [r0, #0]
 801985c:	8893      	ldrh	r3, [r2, #4]
 801985e:	3b01      	subs	r3, #1
 8019860:	1b1b      	subs	r3, r3, r4
 8019862:	800b      	strh	r3, [r1, #0]
 8019864:	bd10      	pop	{r4, pc}
 8019866:	bf00      	nop
 8019868:	20024e2c 	.word	0x20024e2c

0801986c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801986c:	4b0a      	ldr	r3, [pc, #40]	@ (8019898 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801986e:	b513      	push	{r0, r1, r4, lr}
 8019870:	f9b3 4000 	ldrsh.w	r4, [r3]
 8019874:	4b09      	ldr	r3, [pc, #36]	@ (801989c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 8019876:	f8ad 4004 	strh.w	r4, [sp, #4]
 801987a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801987e:	2300      	movs	r3, #0
 8019880:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019884:	466a      	mov	r2, sp
 8019886:	f8ad 3000 	strh.w	r3, [sp]
 801988a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801988e:	f7ff ffdb 	bl	8019848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019892:	b002      	add	sp, #8
 8019894:	bd10      	pop	{r4, pc}
 8019896:	bf00      	nop
 8019898:	20024e28 	.word	0x20024e28
 801989c:	20024e2a 	.word	0x20024e2a

080198a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 80198a0:	4b0b      	ldr	r3, [pc, #44]	@ (80198d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 80198a2:	781b      	ldrb	r3, [r3, #0]
 80198a4:	2b01      	cmp	r3, #1
 80198a6:	d111      	bne.n	80198cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 80198a8:	680b      	ldr	r3, [r1, #0]
 80198aa:	ed90 7a00 	vldr	s14, [r0]
 80198ae:	6003      	str	r3, [r0, #0]
 80198b0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80198b4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80198d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 80198b8:	ee07 3a90 	vmov	s15, r3
 80198bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80198c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80198c8:	edc1 7a00 	vstr	s15, [r1]
 80198cc:	4770      	bx	lr
 80198ce:	bf00      	nop
 80198d0:	20024e2c 	.word	0x20024e2c
 80198d4:	38d1b717 	.word	0x38d1b717

080198d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80198d8:	4b0a      	ldr	r3, [pc, #40]	@ (8019904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80198da:	460a      	mov	r2, r1
 80198dc:	b510      	push	{r4, lr}
 80198de:	781b      	ldrb	r3, [r3, #0]
 80198e0:	2b01      	cmp	r3, #1
 80198e2:	d10d      	bne.n	8019900 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80198e4:	8881      	ldrh	r1, [r0, #4]
 80198e6:	8803      	ldrh	r3, [r0, #0]
 80198e8:	440b      	add	r3, r1
 80198ea:	4601      	mov	r1, r0
 80198ec:	3b01      	subs	r3, #1
 80198ee:	f821 3b02 	strh.w	r3, [r1], #2
 80198f2:	f7ff ffa9 	bl	8019848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80198f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80198fa:	88c2      	ldrh	r2, [r0, #6]
 80198fc:	80c3      	strh	r3, [r0, #6]
 80198fe:	8082      	strh	r2, [r0, #4]
 8019900:	bd10      	pop	{r4, pc}
 8019902:	bf00      	nop
 8019904:	20024e2c 	.word	0x20024e2c

08019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019908:	4b0a      	ldr	r3, [pc, #40]	@ (8019934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801990a:	b507      	push	{r0, r1, r2, lr}
 801990c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019910:	4b09      	ldr	r3, [pc, #36]	@ (8019938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 8019912:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019916:	4669      	mov	r1, sp
 8019918:	f9b3 2000 	ldrsh.w	r2, [r3]
 801991c:	2300      	movs	r3, #0
 801991e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019922:	f8ad 3000 	strh.w	r3, [sp]
 8019926:	f8ad 3002 	strh.w	r3, [sp, #2]
 801992a:	f7ff ffd5 	bl	80198d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801992e:	b003      	add	sp, #12
 8019930:	f85d fb04 	ldr.w	pc, [sp], #4
 8019934:	20024e28 	.word	0x20024e28
 8019938:	20024e2a 	.word	0x20024e2a

0801993c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801993c:	4b03      	ldr	r3, [pc, #12]	@ (801994c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801993e:	6818      	ldr	r0, [r3, #0]
 8019940:	b110      	cbz	r0, 8019948 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019942:	6803      	ldr	r3, [r0, #0]
 8019944:	699b      	ldr	r3, [r3, #24]
 8019946:	4718      	bx	r3
 8019948:	4770      	bx	lr
 801994a:	bf00      	nop
 801994c:	20024ea8 	.word	0x20024ea8

08019950 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019950:	4770      	bx	lr
	...

08019954 <_ZN8touchgfx11Application4drawEv>:
 8019954:	4b0b      	ldr	r3, [pc, #44]	@ (8019984 <_ZN8touchgfx11Application4drawEv+0x30>)
 8019956:	b507      	push	{r0, r1, r2, lr}
 8019958:	f9b3 1000 	ldrsh.w	r1, [r3]
 801995c:	4b0a      	ldr	r3, [pc, #40]	@ (8019988 <_ZN8touchgfx11Application4drawEv+0x34>)
 801995e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019962:	4669      	mov	r1, sp
 8019964:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019968:	2300      	movs	r3, #0
 801996a:	f8ad 3000 	strh.w	r3, [sp]
 801996e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019972:	6803      	ldr	r3, [r0, #0]
 8019974:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801997a:	4798      	blx	r3
 801997c:	b003      	add	sp, #12
 801997e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019982:	bf00      	nop
 8019984:	20024e28 	.word	0x20024e28
 8019988:	20024e2a 	.word	0x20024e2a

0801998c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801998c:	4b03      	ldr	r3, [pc, #12]	@ (801999c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801998e:	6818      	ldr	r0, [r3, #0]
 8019990:	b110      	cbz	r0, 8019998 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019992:	6803      	ldr	r3, [r0, #0]
 8019994:	69db      	ldr	r3, [r3, #28]
 8019996:	4718      	bx	r3
 8019998:	4770      	bx	lr
 801999a:	bf00      	nop
 801999c:	20024ea8 	.word	0x20024ea8

080199a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80199a0:	4b03      	ldr	r3, [pc, #12]	@ (80199b0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80199a2:	6818      	ldr	r0, [r3, #0]
 80199a4:	b110      	cbz	r0, 80199ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80199a6:	6803      	ldr	r3, [r0, #0]
 80199a8:	6a1b      	ldr	r3, [r3, #32]
 80199aa:	4718      	bx	r3
 80199ac:	4770      	bx	lr
 80199ae:	bf00      	nop
 80199b0:	20024ea8 	.word	0x20024ea8

080199b4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80199b4:	4b03      	ldr	r3, [pc, #12]	@ (80199c4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80199b6:	6818      	ldr	r0, [r3, #0]
 80199b8:	b110      	cbz	r0, 80199c0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80199ba:	6803      	ldr	r3, [r0, #0]
 80199bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80199be:	4718      	bx	r3
 80199c0:	4770      	bx	lr
 80199c2:	bf00      	nop
 80199c4:	20024ea8 	.word	0x20024ea8

080199c8 <_ZN8touchgfx11Application15handleTickEventEv>:
 80199c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199cc:	4d3d      	ldr	r5, [pc, #244]	@ (8019ac4 <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 80199ce:	4604      	mov	r4, r0
 80199d0:	6828      	ldr	r0, [r5, #0]
 80199d2:	2800      	cmp	r0, #0
 80199d4:	d047      	beq.n	8019a66 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 80199d6:	7a03      	ldrb	r3, [r0, #8]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d144      	bne.n	8019a66 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 80199dc:	f884 312d 	strb.w	r3, [r4, #301]	@ 0x12d
 80199e0:	6803      	ldr	r3, [r0, #0]
 80199e2:	689b      	ldr	r3, [r3, #8]
 80199e4:	e03c      	b.n	8019a60 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 80199e6:	3b01      	subs	r3, #1
 80199e8:	f04f 0c00 	mov.w	ip, #0
 80199ec:	1c5a      	adds	r2, r3, #1
 80199ee:	d031      	beq.n	8019a54 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 80199f0:	18e2      	adds	r2, r4, r3
 80199f2:	f892 1088 	ldrb.w	r1, [r2, #136]	@ 0x88
 80199f6:	bb59      	cbnz	r1, 8019a50 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 80199f8:	b298      	uxth	r0, r3
 80199fa:	1d25      	adds	r5, r4, #4
 80199fc:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8019a00:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8019a04:	f8b4 2084 	ldrh.w	r2, [r4, #132]	@ 0x84
 8019a08:	428a      	cmp	r2, r1
 8019a0a:	dd14      	ble.n	8019a36 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 8019a0c:	682e      	ldr	r6, [r5, #0]
 8019a0e:	45b0      	cmp	r8, r6
 8019a10:	d106      	bne.n	8019a20 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 8019a12:	46ae      	mov	lr, r5
 8019a14:	460e      	mov	r6, r1
 8019a16:	2e1e      	cmp	r6, #30
 8019a18:	dd05      	ble.n	8019a26 <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 8019a1a:	3a01      	subs	r2, #1
 8019a1c:	f8a4 2084 	strh.w	r2, [r4, #132]	@ 0x84
 8019a20:	3101      	adds	r1, #1
 8019a22:	3504      	adds	r5, #4
 8019a24:	e7ee      	b.n	8019a04 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 8019a26:	3601      	adds	r6, #1
 8019a28:	f8de 7004 	ldr.w	r7, [lr, #4]
 8019a2c:	42b2      	cmp	r2, r6
 8019a2e:	f84e 7b04 	str.w	r7, [lr], #4
 8019a32:	dcf0      	bgt.n	8019a16 <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 8019a34:	e7f1      	b.n	8019a1a <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 8019a36:	4290      	cmp	r0, r2
 8019a38:	da07      	bge.n	8019a4a <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 8019a3a:	1821      	adds	r1, r4, r0
 8019a3c:	3001      	adds	r0, #1
 8019a3e:	f891 5089 	ldrb.w	r5, [r1, #137]	@ 0x89
 8019a42:	b280      	uxth	r0, r0
 8019a44:	f881 5088 	strb.w	r5, [r1, #136]	@ 0x88
 8019a48:	e7f5      	b.n	8019a36 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 8019a4a:	4422      	add	r2, r4
 8019a4c:	f882 c088 	strb.w	ip, [r2, #136]	@ 0x88
 8019a50:	3b01      	subs	r3, #1
 8019a52:	e7cb      	b.n	80199ec <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 8019a54:	4b1c      	ldr	r3, [pc, #112]	@ (8019ac8 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 8019a56:	6818      	ldr	r0, [r3, #0]
 8019a58:	2800      	cmp	r0, #0
 8019a5a:	d031      	beq.n	8019ac0 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 8019a5c:	6803      	ldr	r3, [r0, #0]
 8019a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a64:	4718      	bx	r3
 8019a66:	f894 312d 	ldrb.w	r3, [r4, #301]	@ 0x12d
 8019a6a:	b913      	cbnz	r3, 8019a72 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8019a6c:	b108      	cbz	r0, 8019a72 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8019a6e:	7a03      	ldrb	r3, [r0, #8]
 8019a70:	b9a3      	cbnz	r3, 8019a9c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8019a72:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 8019a76:	f104 0788 	add.w	r7, r4, #136	@ 0x88
 8019a7a:	2600      	movs	r6, #0
 8019a7c:	f5a5 7508 	sub.w	r5, r5, #544	@ 0x220
 8019a80:	f8b4 3084 	ldrh.w	r3, [r4, #132]	@ 0x84
 8019a84:	429e      	cmp	r6, r3
 8019a86:	daae      	bge.n	80199e6 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8019a88:	f817 3b01 	ldrb.w	r3, [r7], #1
 8019a8c:	b123      	cbz	r3, 8019a98 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8019a8e:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8019a92:	6803      	ldr	r3, [r0, #0]
 8019a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a96:	4798      	blx	r3
 8019a98:	3601      	adds	r6, #1
 8019a9a:	e7f1      	b.n	8019a80 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 8019a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8019ac8 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 8019a9e:	6818      	ldr	r0, [r3, #0]
 8019aa0:	b110      	cbz	r0, 8019aa8 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8019aa2:	6803      	ldr	r3, [r0, #0]
 8019aa4:	691b      	ldr	r3, [r3, #16]
 8019aa6:	4798      	blx	r3
 8019aa8:	6828      	ldr	r0, [r5, #0]
 8019aaa:	6803      	ldr	r3, [r0, #0]
 8019aac:	68db      	ldr	r3, [r3, #12]
 8019aae:	4798      	blx	r3
 8019ab0:	6823      	ldr	r3, [r4, #0]
 8019ab2:	4620      	mov	r0, r4
 8019ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ab6:	4798      	blx	r3
 8019ab8:	2301      	movs	r3, #1
 8019aba:	f884 312d 	strb.w	r3, [r4, #301]	@ 0x12d
 8019abe:	e7d8      	b.n	8019a72 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8019ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ac4:	20024eac 	.word	0x20024eac
 8019ac8:	20024ea8 	.word	0x20024ea8

08019acc <_ZN8touchgfx11ApplicationD1Ev>:
 8019acc:	4770      	bx	lr

08019ace <_ZN8touchgfx11ApplicationD0Ev>:
 8019ace:	b510      	push	{r4, lr}
 8019ad0:	4604      	mov	r4, r0
 8019ad2:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8019ad6:	f005 f826 	bl	801eb26 <_ZdlPvj>
 8019ada:	4620      	mov	r0, r4
 8019adc:	bd10      	pop	{r4, pc}
	...

08019ae0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019ae0:	b570      	push	{r4, r5, r6, lr}
 8019ae2:	4606      	mov	r6, r0
 8019ae4:	460c      	mov	r4, r1
 8019ae6:	b929      	cbnz	r1, 8019af4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8019ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8019b1c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8019aea:	2161      	movs	r1, #97	@ 0x61
 8019aec:	4a0c      	ldr	r2, [pc, #48]	@ (8019b20 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8019aee:	480d      	ldr	r0, [pc, #52]	@ (8019b24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8019af0:	f006 f940 	bl	801fd74 <__assert_func>
 8019af4:	2300      	movs	r3, #0
 8019af6:	4d0c      	ldr	r5, [pc, #48]	@ (8019b28 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8019af8:	f8a0 3084 	strh.w	r3, [r0, #132]	@ 0x84
 8019afc:	6828      	ldr	r0, [r5, #0]
 8019afe:	b110      	cbz	r0, 8019b06 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8019b00:	6803      	ldr	r3, [r0, #0]
 8019b02:	695b      	ldr	r3, [r3, #20]
 8019b04:	4798      	blx	r3
 8019b06:	602c      	str	r4, [r5, #0]
 8019b08:	4620      	mov	r0, r4
 8019b0a:	6823      	ldr	r3, [r4, #0]
 8019b0c:	68db      	ldr	r3, [r3, #12]
 8019b0e:	4798      	blx	r3
 8019b10:	6833      	ldr	r3, [r6, #0]
 8019b12:	4630      	mov	r0, r6
 8019b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b1a:	4718      	bx	r3
 8019b1c:	08026270 	.word	0x08026270
 8019b20:	08026360 	.word	0x08026360
 8019b24:	0802627a 	.word	0x0802627a
 8019b28:	20024ea8 	.word	0x20024ea8

08019b2c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019b2c:	b510      	push	{r4, lr}
 8019b2e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019b32:	888a      	ldrh	r2, [r1, #4]
 8019b34:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019b38:	4422      	add	r2, r4
 8019b3a:	b212      	sxth	r2, r2
 8019b3c:	4293      	cmp	r3, r2
 8019b3e:	da15      	bge.n	8019b6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019b40:	8882      	ldrh	r2, [r0, #4]
 8019b42:	4413      	add	r3, r2
 8019b44:	b21b      	sxth	r3, r3
 8019b46:	429c      	cmp	r4, r3
 8019b48:	da10      	bge.n	8019b6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019b4a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019b4e:	88c9      	ldrh	r1, [r1, #6]
 8019b50:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019b54:	4419      	add	r1, r3
 8019b56:	b209      	sxth	r1, r1
 8019b58:	428a      	cmp	r2, r1
 8019b5a:	da07      	bge.n	8019b6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019b5c:	88c0      	ldrh	r0, [r0, #6]
 8019b5e:	4410      	add	r0, r2
 8019b60:	b200      	sxth	r0, r0
 8019b62:	4283      	cmp	r3, r0
 8019b64:	bfac      	ite	ge
 8019b66:	2000      	movge	r0, #0
 8019b68:	2001      	movlt	r0, #1
 8019b6a:	bd10      	pop	{r4, pc}
 8019b6c:	2000      	movs	r0, #0
 8019b6e:	bd10      	pop	{r4, pc}

08019b70 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019b70:	b570      	push	{r4, r5, r6, lr}
 8019b72:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019b76:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019b7a:	42ac      	cmp	r4, r5
 8019b7c:	db18      	blt.n	8019bb0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019b7e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8019b82:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019b86:	429a      	cmp	r2, r3
 8019b88:	db12      	blt.n	8019bb0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019b8a:	8886      	ldrh	r6, [r0, #4]
 8019b8c:	4435      	add	r5, r6
 8019b8e:	888e      	ldrh	r6, [r1, #4]
 8019b90:	4434      	add	r4, r6
 8019b92:	b22d      	sxth	r5, r5
 8019b94:	b224      	sxth	r4, r4
 8019b96:	42a5      	cmp	r5, r4
 8019b98:	db0a      	blt.n	8019bb0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019b9a:	88c0      	ldrh	r0, [r0, #6]
 8019b9c:	4418      	add	r0, r3
 8019b9e:	88cb      	ldrh	r3, [r1, #6]
 8019ba0:	441a      	add	r2, r3
 8019ba2:	b200      	sxth	r0, r0
 8019ba4:	b212      	sxth	r2, r2
 8019ba6:	4290      	cmp	r0, r2
 8019ba8:	bfb4      	ite	lt
 8019baa:	2000      	movlt	r0, #0
 8019bac:	2001      	movge	r0, #1
 8019bae:	bd70      	pop	{r4, r5, r6, pc}
 8019bb0:	2000      	movs	r0, #0
 8019bb2:	bd70      	pop	{r4, r5, r6, pc}

08019bb4 <_ZN8touchgfx11Application11getInstanceEv>:
 8019bb4:	4b01      	ldr	r3, [pc, #4]	@ (8019bbc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019bb6:	6818      	ldr	r0, [r3, #0]
 8019bb8:	4770      	bx	lr
 8019bba:	bf00      	nop
 8019bbc:	20024eb0 	.word	0x20024eb0

08019bc0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8019bc0:	b538      	push	{r3, r4, r5, lr}
 8019bc2:	2400      	movs	r4, #0
 8019bc4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	@ 0x84
 8019bc8:	b2a2      	uxth	r2, r4
 8019bca:	429a      	cmp	r2, r3
 8019bcc:	da0e      	bge.n	8019bec <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8019bce:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8019bd2:	3401      	adds	r4, #1
 8019bd4:	686d      	ldr	r5, [r5, #4]
 8019bd6:	428d      	cmp	r5, r1
 8019bd8:	d1f6      	bne.n	8019bc8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x8>
 8019bda:	4410      	add	r0, r2
 8019bdc:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 8019be0:	2bff      	cmp	r3, #255	@ 0xff
 8019be2:	d016      	beq.n	8019c12 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x52>
 8019be4:	3301      	adds	r3, #1
 8019be6:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 8019bea:	bd38      	pop	{r3, r4, r5, pc}
 8019bec:	2b1f      	cmp	r3, #31
 8019bee:	dd06      	ble.n	8019bfe <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x3e>
 8019bf0:	4b08      	ldr	r3, [pc, #32]	@ (8019c14 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x54>)
 8019bf2:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8019bf6:	4a08      	ldr	r2, [pc, #32]	@ (8019c18 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 8019bf8:	4808      	ldr	r0, [pc, #32]	@ (8019c1c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 8019bfa:	f006 f8bb 	bl	801fd74 <__assert_func>
 8019bfe:	18c2      	adds	r2, r0, r3
 8019c00:	2401      	movs	r4, #1
 8019c02:	f882 4088 	strb.w	r4, [r2, #136]	@ 0x88
 8019c06:	191a      	adds	r2, r3, r4
 8019c08:	f8a0 2084 	strh.w	r2, [r0, #132]	@ 0x84
 8019c0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019c10:	6041      	str	r1, [r0, #4]
 8019c12:	bd38      	pop	{r3, r4, r5, pc}
 8019c14:	080262a4 	.word	0x080262a4
 8019c18:	080263a4 	.word	0x080263a4
 8019c1c:	0802627a 	.word	0x0802627a

08019c20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8019c20:	b530      	push	{r4, r5, lr}
 8019c22:	f8b0 5084 	ldrh.w	r5, [r0, #132]	@ 0x84
 8019c26:	2400      	movs	r4, #0
 8019c28:	b2a3      	uxth	r3, r4
 8019c2a:	42ab      	cmp	r3, r5
 8019c2c:	da0e      	bge.n	8019c4c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x2c>
 8019c2e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8019c32:	6852      	ldr	r2, [r2, #4]
 8019c34:	428a      	cmp	r2, r1
 8019c36:	d107      	bne.n	8019c48 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019c38:	4403      	add	r3, r0
 8019c3a:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8019c3e:	b11a      	cbz	r2, 8019c48 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019c40:	3a01      	subs	r2, #1
 8019c42:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 8019c46:	bd30      	pop	{r4, r5, pc}
 8019c48:	3401      	adds	r4, #1
 8019c4a:	e7ed      	b.n	8019c28 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x8>
 8019c4c:	bd30      	pop	{r4, r5, pc}

08019c4e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019c4e:	2300      	movs	r3, #0
 8019c50:	f100 0288 	add.w	r2, r0, #136	@ 0x88
 8019c54:	30a8      	adds	r0, #168	@ 0xa8
 8019c56:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019c5a:	f802 3b01 	strb.w	r3, [r2], #1
 8019c5e:	4282      	cmp	r2, r0
 8019c60:	d1fb      	bne.n	8019c5a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8019c62:	4770      	bx	lr

08019c64 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019c64:	4603      	mov	r3, r0
 8019c66:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8019c6a:	2200      	movs	r2, #0
 8019c6c:	801a      	strh	r2, [r3, #0]
 8019c6e:	3308      	adds	r3, #8
 8019c70:	f823 2c06 	strh.w	r2, [r3, #-6]
 8019c74:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019c78:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019c7c:	428b      	cmp	r3, r1
 8019c7e:	d1f5      	bne.n	8019c6c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019c80:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8019c84:	4770      	bx	lr
	...

08019c88 <_ZN8touchgfx11ApplicationC1Ev>:
 8019c88:	b570      	push	{r4, r5, r6, lr}
 8019c8a:	4b16      	ldr	r3, [pc, #88]	@ (8019ce4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8019c8c:	2500      	movs	r5, #0
 8019c8e:	4604      	mov	r4, r0
 8019c90:	30a8      	adds	r0, #168	@ 0xa8
 8019c92:	f840 3ca8 	str.w	r3, [r0, #-168]
 8019c96:	f820 5c24 	strh.w	r5, [r0, #-36]
 8019c9a:	f7ff ffe3 	bl	8019c64 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019c9e:	f104 00ea 	add.w	r0, r4, #234	@ 0xea
 8019ca2:	f7ff ffdf 	bl	8019c64 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019ca6:	f884 512c 	strb.w	r5, [r4, #300]	@ 0x12c
 8019caa:	f884 512d 	strb.w	r5, [r4, #301]	@ 0x12d
 8019cae:	490e      	ldr	r1, [pc, #56]	@ (8019ce8 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8019cb0:	480e      	ldr	r0, [pc, #56]	@ (8019cec <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8019cb2:	f004 fdfd 	bl	801e8b0 <CRC_Lock>
 8019cb6:	4e0e      	ldr	r6, [pc, #56]	@ (8019cf0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8019cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8019cf4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019cba:	b158      	cbz	r0, 8019cd4 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8019cbc:	801d      	strh	r5, [r3, #0]
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8019cf8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019cc2:	4620      	mov	r0, r4
 8019cc4:	6013      	str	r3, [r2, #0]
 8019cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8019cfc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019cc8:	6033      	str	r3, [r6, #0]
 8019cca:	6013      	str	r3, [r2, #0]
 8019ccc:	f7ff ffbf 	bl	8019c4e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8019cd0:	4620      	mov	r0, r4
 8019cd2:	bd70      	pop	{r4, r5, r6, pc}
 8019cd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019cd8:	2002      	movs	r0, #2
 8019cda:	801a      	strh	r2, [r3, #0]
 8019cdc:	6030      	str	r0, [r6, #0]
 8019cde:	f000 febd 	bl	801aa5c <_ZN8touchgfx6Screen4drawEv>
 8019ce2:	e7ec      	b.n	8019cbe <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8019ce4:	0802632c 	.word	0x0802632c
 8019ce8:	b5e8b5cd 	.word	0xb5e8b5cd
 8019cec:	f407a5c2 	.word	0xf407a5c2
 8019cf0:	20024ea8 	.word	0x20024ea8
 8019cf4:	2000005c 	.word	0x2000005c
 8019cf8:	20024eb0 	.word	0x20024eb0
 8019cfc:	20024eac 	.word	0x20024eac

08019d00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019d00:	2300      	movs	r3, #0
 8019d02:	8003      	strh	r3, [r0, #0]
 8019d04:	8043      	strh	r3, [r0, #2]
 8019d06:	8083      	strh	r3, [r0, #4]
 8019d08:	80c3      	strh	r3, [r0, #6]
 8019d0a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	@ 0x40
 8019d0e:	429a      	cmp	r2, r3
 8019d10:	b530      	push	{r4, r5, lr}
 8019d12:	da12      	bge.n	8019d3a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019d14:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8019d18:	3b01      	subs	r3, #1
 8019d1a:	6825      	ldr	r5, [r4, #0]
 8019d1c:	b29b      	uxth	r3, r3
 8019d1e:	6005      	str	r5, [r0, #0]
 8019d20:	429a      	cmp	r2, r3
 8019d22:	6865      	ldr	r5, [r4, #4]
 8019d24:	f8a1 3040 	strh.w	r3, [r1, #64]	@ 0x40
 8019d28:	6045      	str	r5, [r0, #4]
 8019d2a:	da06      	bge.n	8019d3a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019d2c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019d30:	681d      	ldr	r5, [r3, #0]
 8019d32:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8019d36:	685d      	ldr	r5, [r3, #4]
 8019d38:	6065      	str	r5, [r4, #4]
 8019d3a:	bd30      	pop	{r4, r5, pc}

08019d3c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8019d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d3e:	e88d 0006 	stmia.w	sp, {r1, r2}
 8019d42:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 8019d46:	4604      	mov	r4, r0
 8019d48:	466b      	mov	r3, sp
 8019d4a:	2a07      	cmp	r2, #7
 8019d4c:	dd06      	ble.n	8019d5c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8019d4e:	4b09      	ldr	r3, [pc, #36]	@ (8019d74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8019d50:	f240 11f9 	movw	r1, #505	@ 0x1f9
 8019d54:	4a08      	ldr	r2, [pc, #32]	@ (8019d78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8019d56:	4809      	ldr	r0, [pc, #36]	@ (8019d7c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8019d58:	f006 f80c 	bl	801fd74 <__assert_func>
 8019d5c:	1c51      	adds	r1, r2, #1
 8019d5e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8019d62:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8019d66:	cb03      	ldmia	r3!, {r0, r1}
 8019d68:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019d6c:	6069      	str	r1, [r5, #4]
 8019d6e:	b003      	add	sp, #12
 8019d70:	bd30      	pop	{r4, r5, pc}
 8019d72:	bf00      	nop
 8019d74:	080262cc 	.word	0x080262cc
 8019d78:	080263e9 	.word	0x080263e9
 8019d7c:	080262fb 	.word	0x080262fb

08019d80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d84:	b089      	sub	sp, #36	@ 0x24
 8019d86:	4606      	mov	r6, r0
 8019d88:	4668      	mov	r0, sp
 8019d8a:	466c      	mov	r4, sp
 8019d8c:	e88d 0006 	stmia.w	sp, {r1, r2}
 8019d90:	f7f9 f853 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019d94:	bbb0      	cbnz	r0, 8019e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019d96:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	@ 0xe8
 8019d9a:	b1fd      	cbz	r5, 8019ddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8019d9c:	3d01      	subs	r5, #1
 8019d9e:	af04      	add	r7, sp, #16
 8019da0:	f04f 090a 	mov.w	r9, #10
 8019da4:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8019da8:	ab02      	add	r3, sp, #8
 8019daa:	fa1f f885 	uxth.w	r8, r5
 8019dae:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019db2:	6851      	ldr	r1, [r2, #4]
 8019db4:	c303      	stmia	r3!, {r0, r1}
 8019db6:	4621      	mov	r1, r4
 8019db8:	a802      	add	r0, sp, #8
 8019dba:	f7ff fed9 	bl	8019b70 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019dbe:	bb08      	cbnz	r0, 8019e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019dc0:	a902      	add	r1, sp, #8
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	f7ff fed4 	bl	8019b70 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019dc8:	b1f8      	cbz	r0, 8019e0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8019dca:	4642      	mov	r2, r8
 8019dcc:	f106 01a8 	add.w	r1, r6, #168	@ 0xa8
 8019dd0:	a806      	add	r0, sp, #24
 8019dd2:	f7ff ff95 	bl	8019d00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019dd6:	f115 35ff 	adds.w	r5, r5, #4294967295
 8019dda:	d2e3      	bcs.n	8019da4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8019ddc:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	@ 0xe8
 8019de0:	f106 05a8 	add.w	r5, r6, #168	@ 0xa8
 8019de4:	2b08      	cmp	r3, #8
 8019de6:	d108      	bne.n	8019dfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019de8:	4629      	mov	r1, r5
 8019dea:	a806      	add	r0, sp, #24
 8019dec:	2207      	movs	r2, #7
 8019dee:	f7ff ff87 	bl	8019d00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019df2:	a906      	add	r1, sp, #24
 8019df4:	4620      	mov	r0, r4
 8019df6:	f7f9 fd4a 	bl	801388e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019dfa:	4628      	mov	r0, r5
 8019dfc:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019e00:	f7ff ff9c 	bl	8019d3c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019e04:	b009      	add	sp, #36	@ 0x24
 8019e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e0a:	4621      	mov	r1, r4
 8019e0c:	a802      	add	r0, sp, #8
 8019e0e:	f7ff fe8d 	bl	8019b2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019e12:	b150      	cbz	r0, 8019e2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8019e14:	f106 01a8 	add.w	r1, r6, #168	@ 0xa8
 8019e18:	a806      	add	r0, sp, #24
 8019e1a:	4642      	mov	r2, r8
 8019e1c:	f7ff ff70 	bl	8019d00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019e20:	a902      	add	r1, sp, #8
 8019e22:	4620      	mov	r0, r4
 8019e24:	f7f9 fd33 	bl	801388e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019e28:	e7d5      	b.n	8019dd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019e2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019e2e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019e32:	a902      	add	r1, sp, #8
 8019e34:	4638      	mov	r0, r7
 8019e36:	f7f9 fd2a 	bl	801388e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019e3a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019e3e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019e42:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019e46:	fb13 f302 	smulbb	r3, r3, r2
 8019e4a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019e4e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019e52:	fb11 f102 	smulbb	r1, r1, r2
 8019e56:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019e5a:	fb09 f303 	mul.w	r3, r9, r3
 8019e5e:	fb12 1100 	smlabb	r1, r2, r0, r1
 8019e62:	220b      	movs	r2, #11
 8019e64:	434a      	muls	r2, r1
 8019e66:	4293      	cmp	r3, r2
 8019e68:	dab5      	bge.n	8019dd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019e6a:	f106 01a8 	add.w	r1, r6, #168	@ 0xa8
 8019e6e:	a806      	add	r0, sp, #24
 8019e70:	4642      	mov	r2, r8
 8019e72:	f7ff ff45 	bl	8019d00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019e76:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019e7a:	e884 0003 	stmia.w	r4, {r0, r1}
 8019e7e:	e7aa      	b.n	8019dd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019e80 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019e80:	4b1b      	ldr	r3, [pc, #108]	@ (8019ef0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 8019e82:	b530      	push	{r4, r5, lr}
 8019e84:	460c      	mov	r4, r1
 8019e86:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8019ef4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 8019e8c:	b085      	sub	sp, #20
 8019e8e:	4605      	mov	r5, r0
 8019e90:	6820      	ldr	r0, [r4, #0]
 8019e92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019e96:	2300      	movs	r3, #0
 8019e98:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019e9c:	f8ad 3000 	strh.w	r3, [sp]
 8019ea0:	6861      	ldr	r1, [r4, #4]
 8019ea2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019ea6:	ab02      	add	r3, sp, #8
 8019ea8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019eac:	c303      	stmia	r3!, {r0, r1}
 8019eae:	4669      	mov	r1, sp
 8019eb0:	a802      	add	r0, sp, #8
 8019eb2:	f7f8 ff7d 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 8019eb6:	ab02      	add	r3, sp, #8
 8019eb8:	cb03      	ldmia	r3!, {r0, r1}
 8019eba:	4b0f      	ldr	r3, [pc, #60]	@ (8019ef8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019ebc:	6020      	str	r0, [r4, #0]
 8019ebe:	6818      	ldr	r0, [r3, #0]
 8019ec0:	6061      	str	r1, [r4, #4]
 8019ec2:	b138      	cbz	r0, 8019ed4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 8019ec4:	f895 312c 	ldrb.w	r3, [r5, #300]	@ 0x12c
 8019ec8:	b133      	cbz	r3, 8019ed8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 8019eca:	6821      	ldr	r1, [r4, #0]
 8019ecc:	4628      	mov	r0, r5
 8019ece:	6862      	ldr	r2, [r4, #4]
 8019ed0:	f7ff ff56 	bl	8019d80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019ed4:	b005      	add	sp, #20
 8019ed6:	bd30      	pop	{r4, r5, pc}
 8019ed8:	6803      	ldr	r3, [r0, #0]
 8019eda:	4621      	mov	r1, r4
 8019edc:	689b      	ldr	r3, [r3, #8]
 8019ede:	4798      	blx	r3
 8019ee0:	4b06      	ldr	r3, [pc, #24]	@ (8019efc <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019ee2:	4621      	mov	r1, r4
 8019ee4:	6818      	ldr	r0, [r3, #0]
 8019ee6:	6803      	ldr	r3, [r0, #0]
 8019ee8:	695b      	ldr	r3, [r3, #20]
 8019eea:	4798      	blx	r3
 8019eec:	e7f2      	b.n	8019ed4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 8019eee:	bf00      	nop
 8019ef0:	20024e28 	.word	0x20024e28
 8019ef4:	20024e2a 	.word	0x20024e2a
 8019ef8:	20024ea8 	.word	0x20024ea8
 8019efc:	20024e34 	.word	0x20024e34

08019f00 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f04:	4604      	mov	r4, r0
 8019f06:	b096      	sub	sp, #88	@ 0x58
 8019f08:	f880 112c 	strb.w	r1, [r0, #300]	@ 0x12c
 8019f0c:	b129      	cbz	r1, 8019f1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019f0e:	2300      	movs	r3, #0
 8019f10:	f8a0 30e8 	strh.w	r3, [r0, #232]	@ 0xe8
 8019f14:	b016      	add	sp, #88	@ 0x58
 8019f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f1a:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	@ 0xe8
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d0f8      	beq.n	8019f14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019f22:	4f6e      	ldr	r7, [pc, #440]	@ (801a0dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 8019f24:	a805      	add	r0, sp, #20
 8019f26:	f7ff fe9d 	bl	8019c64 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019f2a:	883d      	ldrh	r5, [r7, #0]
 8019f2c:	462e      	mov	r6, r5
 8019f2e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 8019f32:	429e      	cmp	r6, r3
 8019f34:	db10      	blt.n	8019f58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 8019f36:	462e      	mov	r6, r5
 8019f38:	f8b4 312a 	ldrh.w	r3, [r4, #298]	@ 0x12a
 8019f3c:	429e      	cmp	r6, r3
 8019f3e:	da17      	bge.n	8019f70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019f40:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019f44:	3601      	adds	r6, #1
 8019f46:	4620      	mov	r0, r4
 8019f48:	f8d3 10ea 	ldr.w	r1, [r3, #234]	@ 0xea
 8019f4c:	b2b6      	uxth	r6, r6
 8019f4e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	@ 0xee
 8019f52:	f7ff ff15 	bl	8019d80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019f56:	e7ef      	b.n	8019f38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 8019f58:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019f5c:	3601      	adds	r6, #1
 8019f5e:	a805      	add	r0, sp, #20
 8019f60:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 8019f64:	b2b6      	uxth	r6, r6
 8019f66:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8019f6a:	f7ff fee7 	bl	8019d3c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019f6e:	e7de      	b.n	8019f2e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 8019f70:	4e5b      	ldr	r6, [pc, #364]	@ (801a0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 8019f72:	6833      	ldr	r3, [r6, #0]
 8019f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019f78:	2b01      	cmp	r3, #1
 8019f7a:	f040 8094 	bne.w	801a0a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 8019f7e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019f82:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	@ 0xe8
 8019f86:	f04f 0900 	mov.w	r9, #0
 8019f8a:	33aa      	adds	r3, #170	@ 0xaa
 8019f8c:	42a8      	cmp	r0, r5
 8019f8e:	f103 0308 	add.w	r3, r3, #8
 8019f92:	dd0a      	ble.n	8019faa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 8019f94:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019f98:	3501      	adds	r5, #1
 8019f9a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8019f9e:	440a      	add	r2, r1
 8019fa0:	b212      	sxth	r2, r2
 8019fa2:	4591      	cmp	r9, r2
 8019fa4:	bfb8      	it	lt
 8019fa6:	4691      	movlt	r9, r2
 8019fa8:	e7f0      	b.n	8019f8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 8019faa:	4b4e      	ldr	r3, [pc, #312]	@ (801a0e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 8019fac:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 801a0ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 8019fb0:	881d      	ldrh	r5, [r3, #0]
 8019fb2:	2300      	movs	r3, #0
 8019fb4:	08ed      	lsrs	r5, r5, #3
 8019fb6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019fba:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019fbe:	2d01      	cmp	r5, #1
 8019fc0:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019fc4:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019fc8:	bfb8      	it	lt
 8019fca:	2501      	movlt	r5, #1
 8019fcc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019fd0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019fd4:	6830      	ldr	r0, [r6, #0]
 8019fd6:	4413      	add	r3, r2
 8019fd8:	b21b      	sxth	r3, r3
 8019fda:	4599      	cmp	r9, r3
 8019fdc:	6803      	ldr	r3, [r0, #0]
 8019fde:	dd45      	ble.n	801a06c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 8019fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019fe4:	4798      	blx	r3
 8019fe6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019fea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019fee:	4413      	add	r3, r2
 8019ff0:	b21b      	sxth	r3, r3
 8019ff2:	18ea      	adds	r2, r5, r3
 8019ff4:	4290      	cmp	r0, r2
 8019ff6:	da6d      	bge.n	801a0d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 8019ff8:	4581      	cmp	r9, r0
 8019ffa:	dd6b      	ble.n	801a0d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 8019ffc:	4298      	cmp	r0, r3
 8019ffe:	da01      	bge.n	801a004 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 801a000:	2b00      	cmp	r3, #0
 801a002:	dc69      	bgt.n	801a0d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 801a004:	6830      	ldr	r0, [r6, #0]
 801a006:	2101      	movs	r1, #1
 801a008:	6803      	ldr	r3, [r0, #0]
 801a00a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a00c:	4798      	blx	r3
 801a00e:	e7dd      	b.n	8019fcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801a010:	4548      	cmp	r0, r9
 801a012:	bfa8      	it	ge
 801a014:	4648      	movge	r0, r9
 801a016:	f9b8 2000 	ldrsh.w	r2, [r8]
 801a01a:	2100      	movs	r1, #0
 801a01c:	1ac0      	subs	r0, r0, r3
 801a01e:	f8b7 a000 	ldrh.w	sl, [r7]
 801a022:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a026:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a02a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801a02e:	f8ad 000a 	strh.w	r0, [sp, #10]
 801a032:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801a036:	459a      	cmp	sl, r3
 801a038:	dac8      	bge.n	8019fcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801a03a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a03e:	ab03      	add	r3, sp, #12
 801a040:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a044:	6851      	ldr	r1, [r2, #4]
 801a046:	c303      	stmia	r3!, {r0, r1}
 801a048:	a803      	add	r0, sp, #12
 801a04a:	a901      	add	r1, sp, #4
 801a04c:	f7f8 feb0 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 801a050:	a803      	add	r0, sp, #12
 801a052:	f7f8 fef2 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a056:	b920      	cbnz	r0, 801a062 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 801a058:	6823      	ldr	r3, [r4, #0]
 801a05a:	a903      	add	r1, sp, #12
 801a05c:	4620      	mov	r0, r4
 801a05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a060:	4798      	blx	r3
 801a062:	f10a 0a01 	add.w	sl, sl, #1
 801a066:	fa1f fa8a 	uxth.w	sl, sl
 801a06a:	e7e2      	b.n	801a032 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801a06c:	69db      	ldr	r3, [r3, #28]
 801a06e:	4798      	blx	r3
 801a070:	4b1d      	ldr	r3, [pc, #116]	@ (801a0e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 801a072:	781b      	ldrb	r3, [r3, #0]
 801a074:	2b00      	cmp	r3, #0
 801a076:	f43f af4d 	beq.w	8019f14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a07a:	2300      	movs	r3, #0
 801a07c:	883d      	ldrh	r5, [r7, #0]
 801a07e:	34ea      	adds	r4, #234	@ 0xea
 801a080:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801a084:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801a088:	429d      	cmp	r5, r3
 801a08a:	f6bf af43 	bge.w	8019f14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a08e:	ab16      	add	r3, sp, #88	@ 0x58
 801a090:	4620      	mov	r0, r4
 801a092:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a096:	3501      	adds	r5, #1
 801a098:	3b44      	subs	r3, #68	@ 0x44
 801a09a:	b2ad      	uxth	r5, r5
 801a09c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a0a0:	f7ff fe4c 	bl	8019d3c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a0a4:	e7ee      	b.n	801a084 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 801a0a6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801a0aa:	429d      	cmp	r5, r3
 801a0ac:	dae0      	bge.n	801a070 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801a0ae:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a0b2:	ab03      	add	r3, sp, #12
 801a0b4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a0b8:	6851      	ldr	r1, [r2, #4]
 801a0ba:	c303      	stmia	r3!, {r0, r1}
 801a0bc:	a803      	add	r0, sp, #12
 801a0be:	f7f8 febc 	bl	8012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a0c2:	b920      	cbnz	r0, 801a0ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801a0c4:	6823      	ldr	r3, [r4, #0]
 801a0c6:	a903      	add	r1, sp, #12
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0cc:	4798      	blx	r3
 801a0ce:	3501      	adds	r5, #1
 801a0d0:	b2ad      	uxth	r5, r5
 801a0d2:	e7e8      	b.n	801a0a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801a0d4:	4298      	cmp	r0, r3
 801a0d6:	da9b      	bge.n	801a010 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 801a0d8:	4648      	mov	r0, r9
 801a0da:	e79c      	b.n	801a016 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 801a0dc:	2000005c 	.word	0x2000005c
 801a0e0:	20024e34 	.word	0x20024e34
 801a0e4:	20024e2a 	.word	0x20024e2a
 801a0e8:	20024e32 	.word	0x20024e32
 801a0ec:	20024e28 	.word	0x20024e28

0801a0f0 <_ZNK8touchgfx4Font8getGlyphEt>:
 801a0f0:	b513      	push	{r0, r1, r4, lr}
 801a0f2:	2200      	movs	r2, #0
 801a0f4:	ab02      	add	r3, sp, #8
 801a0f6:	9201      	str	r2, [sp, #4]
 801a0f8:	f803 2d05 	strb.w	r2, [r3, #-5]!
 801a0fc:	6802      	ldr	r2, [r0, #0]
 801a0fe:	6894      	ldr	r4, [r2, #8]
 801a100:	aa01      	add	r2, sp, #4
 801a102:	47a0      	blx	r4
 801a104:	b002      	add	sp, #8
 801a106:	bd10      	pop	{r4, pc}

0801a108 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 801a108:	8940      	ldrh	r0, [r0, #10]
 801a10a:	4770      	bx	lr

0801a10c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 801a10c:	8980      	ldrh	r0, [r0, #12]
 801a10e:	4770      	bx	lr

0801a110 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801a110:	8880      	ldrh	r0, [r0, #4]
 801a112:	4770      	bx	lr

0801a114 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801a114:	7983      	ldrb	r3, [r0, #6]
 801a116:	8880      	ldrh	r0, [r0, #4]
 801a118:	4418      	add	r0, r3
 801a11a:	b280      	uxth	r0, r0
 801a11c:	4770      	bx	lr

0801a11e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 801a11e:	79c0      	ldrb	r0, [r0, #7]
 801a120:	4770      	bx	lr

0801a122 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a122:	b508      	push	{r3, lr}
 801a124:	6803      	ldr	r3, [r0, #0]
 801a126:	68db      	ldr	r3, [r3, #12]
 801a128:	4798      	blx	r3
 801a12a:	b140      	cbz	r0, 801a13e <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801a12c:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801a130:	7a83      	ldrb	r3, [r0, #10]
 801a132:	2a00      	cmp	r2, #0
 801a134:	bfb4      	ite	lt
 801a136:	f44f 7080 	movlt.w	r0, #256	@ 0x100
 801a13a:	2000      	movge	r0, #0
 801a13c:	4318      	orrs	r0, r3
 801a13e:	bd08      	pop	{r3, pc}

0801a140 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801a140:	b40e      	push	{r1, r2, r3}
 801a142:	b533      	push	{r0, r1, r4, r5, lr}
 801a144:	ab05      	add	r3, sp, #20
 801a146:	f853 2b04 	ldr.w	r2, [r3], #4
 801a14a:	9301      	str	r3, [sp, #4]
 801a14c:	4b0a      	ldr	r3, [pc, #40]	@ (801a178 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801a14e:	685c      	ldr	r4, [r3, #4]
 801a150:	f014 0f01 	tst.w	r4, #1
 801a154:	ea4f 0464 	mov.w	r4, r4, asr #1
 801a158:	bf1c      	itt	ne
 801a15a:	681b      	ldrne	r3, [r3, #0]
 801a15c:	5901      	ldrne	r1, [r0, r4]
 801a15e:	4420      	add	r0, r4
 801a160:	bf0c      	ite	eq
 801a162:	681d      	ldreq	r5, [r3, #0]
 801a164:	58cd      	ldrne	r5, [r1, r3]
 801a166:	2100      	movs	r1, #0
 801a168:	9b01      	ldr	r3, [sp, #4]
 801a16a:	47a8      	blx	r5
 801a16c:	b002      	add	sp, #8
 801a16e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a172:	b003      	add	sp, #12
 801a174:	4770      	bx	lr
 801a176:	bf00      	nop
 801a178:	20000008 	.word	0x20000008

0801a17c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801a17c:	b40c      	push	{r2, r3}
 801a17e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a180:	ab06      	add	r3, sp, #24
 801a182:	f853 2b04 	ldr.w	r2, [r3], #4
 801a186:	9301      	str	r3, [sp, #4]
 801a188:	4b09      	ldr	r3, [pc, #36]	@ (801a1b0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801a18a:	685c      	ldr	r4, [r3, #4]
 801a18c:	f014 0f01 	tst.w	r4, #1
 801a190:	ea4f 0464 	mov.w	r4, r4, asr #1
 801a194:	bf1c      	itt	ne
 801a196:	681b      	ldrne	r3, [r3, #0]
 801a198:	5905      	ldrne	r5, [r0, r4]
 801a19a:	4420      	add	r0, r4
 801a19c:	bf0c      	ite	eq
 801a19e:	681d      	ldreq	r5, [r3, #0]
 801a1a0:	58ed      	ldrne	r5, [r5, r3]
 801a1a2:	9b01      	ldr	r3, [sp, #4]
 801a1a4:	47a8      	blx	r5
 801a1a6:	b003      	add	sp, #12
 801a1a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1ac:	b002      	add	sp, #8
 801a1ae:	4770      	bx	lr
 801a1b0:	20000008 	.word	0x20000008

0801a1b4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a1b4:	b40e      	push	{r1, r2, r3}
 801a1b6:	b510      	push	{r4, lr}
 801a1b8:	b089      	sub	sp, #36	@ 0x24
 801a1ba:	ab0b      	add	r3, sp, #44	@ 0x2c
 801a1bc:	a802      	add	r0, sp, #8
 801a1be:	f853 4b04 	ldr.w	r4, [r3], #4
 801a1c2:	9301      	str	r3, [sp, #4]
 801a1c4:	f001 fd38 	bl	801bc38 <_ZN8touchgfx12TextProviderC1Ev>
 801a1c8:	4621      	mov	r1, r4
 801a1ca:	9a01      	ldr	r2, [sp, #4]
 801a1cc:	a802      	add	r0, sp, #8
 801a1ce:	2401      	movs	r4, #1
 801a1d0:	f001 fd3b 	bl	801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801a1d4:	a802      	add	r0, sp, #8
 801a1d6:	f001 fcdf 	bl	801bb98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a1da:	b138      	cbz	r0, 801a1ec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 801a1dc:	280a      	cmp	r0, #10
 801a1de:	a802      	add	r0, sp, #8
 801a1e0:	bf04      	itt	eq
 801a1e2:	3401      	addeq	r4, #1
 801a1e4:	b224      	sxtheq	r4, r4
 801a1e6:	f001 fcd7 	bl	801bb98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a1ea:	e7f6      	b.n	801a1da <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 801a1ec:	b2a0      	uxth	r0, r4
 801a1ee:	b009      	add	sp, #36	@ 0x24
 801a1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1f4:	b003      	add	sp, #12
 801a1f6:	4770      	bx	lr

0801a1f8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a1f8:	b40e      	push	{r1, r2, r3}
 801a1fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1fc:	b088      	sub	sp, #32
 801a1fe:	4604      	mov	r4, r0
 801a200:	2600      	movs	r6, #0
 801a202:	ab0d      	add	r3, sp, #52	@ 0x34
 801a204:	a802      	add	r0, sp, #8
 801a206:	f853 5b04 	ldr.w	r5, [r3], #4
 801a20a:	9301      	str	r3, [sp, #4]
 801a20c:	f001 fd14 	bl	801bc38 <_ZN8touchgfx12TextProviderC1Ev>
 801a210:	4629      	mov	r1, r5
 801a212:	9a01      	ldr	r2, [sp, #4]
 801a214:	a802      	add	r0, sp, #8
 801a216:	4d1f      	ldr	r5, [pc, #124]	@ (801a294 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 801a218:	f001 fd17 	bl	801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801a21c:	2100      	movs	r1, #0
 801a21e:	a802      	add	r0, sp, #8
 801a220:	f001 fcc4 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a224:	b378      	cbz	r0, 801a286 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801a226:	280a      	cmp	r0, #10
 801a228:	d028      	beq.n	801a27c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801a22a:	6823      	ldr	r3, [r4, #0]
 801a22c:	4601      	mov	r1, r0
 801a22e:	4620      	mov	r0, r4
 801a230:	68db      	ldr	r3, [r3, #12]
 801a232:	4798      	blx	r3
 801a234:	b310      	cbz	r0, 801a27c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801a236:	7b41      	ldrb	r1, [r0, #13]
 801a238:	f890 e008 	ldrb.w	lr, [r0, #8]
 801a23c:	f011 0f40 	tst.w	r1, #64	@ 0x40
 801a240:	88a3      	ldrh	r3, [r4, #4]
 801a242:	79c0      	ldrb	r0, [r0, #7]
 801a244:	bf14      	ite	ne
 801a246:	462f      	movne	r7, r5
 801a248:	2700      	moveq	r7, #0
 801a24a:	f011 0f20 	tst.w	r1, #32
 801a24e:	ea47 070e 	orr.w	r7, r7, lr
 801a252:	bf14      	ite	ne
 801a254:	f44f 7280 	movne.w	r2, #256	@ 0x100
 801a258:	2200      	moveq	r2, #0
 801a25a:	f011 0f10 	tst.w	r1, #16
 801a25e:	ea42 0207 	orr.w	r2, r2, r7
 801a262:	eba3 0302 	sub.w	r3, r3, r2
 801a266:	bf14      	ite	ne
 801a268:	f44f 7280 	movne.w	r2, #256	@ 0x100
 801a26c:	2200      	moveq	r2, #0
 801a26e:	4302      	orrs	r2, r0
 801a270:	fa12 f383 	uxtah	r3, r2, r3
 801a274:	b29b      	uxth	r3, r3
 801a276:	42b3      	cmp	r3, r6
 801a278:	bfc8      	it	gt
 801a27a:	b21e      	sxthgt	r6, r3
 801a27c:	2100      	movs	r1, #0
 801a27e:	a802      	add	r0, sp, #8
 801a280:	f001 fc94 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a284:	e7ce      	b.n	801a224 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 801a286:	b2b0      	uxth	r0, r6
 801a288:	b008      	add	sp, #32
 801a28a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a28e:	b003      	add	sp, #12
 801a290:	4770      	bx	lr
 801a292:	bf00      	nop
 801a294:	fffffe00 	.word	0xfffffe00

0801a298 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a298:	b40e      	push	{r1, r2, r3}
 801a29a:	b530      	push	{r4, r5, lr}
 801a29c:	b088      	sub	sp, #32
 801a29e:	4605      	mov	r5, r0
 801a2a0:	ab0b      	add	r3, sp, #44	@ 0x2c
 801a2a2:	a802      	add	r0, sp, #8
 801a2a4:	f853 4b04 	ldr.w	r4, [r3], #4
 801a2a8:	9301      	str	r3, [sp, #4]
 801a2aa:	f001 fcc5 	bl	801bc38 <_ZN8touchgfx12TextProviderC1Ev>
 801a2ae:	4621      	mov	r1, r4
 801a2b0:	9a01      	ldr	r2, [sp, #4]
 801a2b2:	a802      	add	r0, sp, #8
 801a2b4:	24ff      	movs	r4, #255	@ 0xff
 801a2b6:	f001 fcc8 	bl	801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801a2ba:	2100      	movs	r1, #0
 801a2bc:	a802      	add	r0, sp, #8
 801a2be:	f001 fc75 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a2c2:	b1a0      	cbz	r0, 801a2ee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 801a2c4:	280a      	cmp	r0, #10
 801a2c6:	d00d      	beq.n	801a2e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801a2c8:	682b      	ldr	r3, [r5, #0]
 801a2ca:	4601      	mov	r1, r0
 801a2cc:	4628      	mov	r0, r5
 801a2ce:	68db      	ldr	r3, [r3, #12]
 801a2d0:	4798      	blx	r3
 801a2d2:	b138      	cbz	r0, 801a2e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801a2d4:	792b      	ldrb	r3, [r5, #4]
 801a2d6:	7a02      	ldrb	r2, [r0, #8]
 801a2d8:	1a9b      	subs	r3, r3, r2
 801a2da:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801a2de:	429c      	cmp	r4, r3
 801a2e0:	bfa8      	it	ge
 801a2e2:	461c      	movge	r4, r3
 801a2e4:	2100      	movs	r1, #0
 801a2e6:	a802      	add	r0, sp, #8
 801a2e8:	f001 fc60 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a2ec:	e7e9      	b.n	801a2c2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 801a2ee:	4620      	mov	r0, r4
 801a2f0:	b008      	add	sp, #32
 801a2f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a2f6:	b003      	add	sp, #12
 801a2f8:	4770      	bx	lr

0801a2fa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a2fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2fe:	f04f 0a00 	mov.w	sl, #0
 801a302:	b087      	sub	sp, #28
 801a304:	4614      	mov	r4, r2
 801a306:	461d      	mov	r5, r3
 801a308:	4606      	mov	r6, r0
 801a30a:	4657      	mov	r7, sl
 801a30c:	4668      	mov	r0, sp
 801a30e:	46d1      	mov	r9, sl
 801a310:	4688      	mov	r8, r1
 801a312:	f001 fc91 	bl	801bc38 <_ZN8touchgfx12TextProviderC1Ev>
 801a316:	462a      	mov	r2, r5
 801a318:	4621      	mov	r1, r4
 801a31a:	4668      	mov	r0, sp
 801a31c:	f001 fc95 	bl	801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801a320:	4641      	mov	r1, r8
 801a322:	4668      	mov	r0, sp
 801a324:	f001 fc42 	bl	801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a328:	4605      	mov	r5, r0
 801a32a:	b108      	cbz	r0, 801a330 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 801a32c:	280a      	cmp	r0, #10
 801a32e:	d107      	bne.n	801a340 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801a330:	45b9      	cmp	r9, r7
 801a332:	dd00      	ble.n	801a336 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 801a334:	464f      	mov	r7, r9
 801a336:	f04f 0900 	mov.w	r9, #0
 801a33a:	e01e      	b.n	801a37a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 801a33c:	46aa      	mov	sl, r5
 801a33e:	e7ef      	b.n	801a320 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 801a340:	6833      	ldr	r3, [r6, #0]
 801a342:	4601      	mov	r1, r0
 801a344:	4630      	mov	r0, r6
 801a346:	68db      	ldr	r3, [r3, #12]
 801a348:	4798      	blx	r3
 801a34a:	4602      	mov	r2, r0
 801a34c:	2800      	cmp	r0, #0
 801a34e:	d0f5      	beq.n	801a33c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801a350:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a354:	4651      	mov	r1, sl
 801a356:	f890 b00a 	ldrb.w	fp, [r0, #10]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	6833      	ldr	r3, [r6, #0]
 801a35e:	8885      	ldrh	r5, [r0, #4]
 801a360:	4630      	mov	r0, r6
 801a362:	bfb4      	ite	lt
 801a364:	f44f 7480 	movlt.w	r4, #256	@ 0x100
 801a368:	2400      	movge	r4, #0
 801a36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a36c:	ea44 040b 	orr.w	r4, r4, fp
 801a370:	4798      	blx	r3
 801a372:	4404      	add	r4, r0
 801a374:	444c      	add	r4, r9
 801a376:	fa1f f984 	uxth.w	r9, r4
 801a37a:	2d00      	cmp	r5, #0
 801a37c:	d1de      	bne.n	801a33c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801a37e:	4638      	mov	r0, r7
 801a380:	b007      	add	sp, #28
 801a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a386 <_ZNK8touchgfx8Drawable7getTypeEv>:
 801a386:	2000      	movs	r0, #0
 801a388:	4770      	bx	lr

0801a38a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801a38a:	b513      	push	{r0, r1, r4, lr}
 801a38c:	1d01      	adds	r1, r0, #4
 801a38e:	4603      	mov	r3, r0
 801a390:	c903      	ldmia	r1, {r0, r1}
 801a392:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a396:	2100      	movs	r1, #0
 801a398:	4618      	mov	r0, r3
 801a39a:	f8ad 1000 	strh.w	r1, [sp]
 801a39e:	f8ad 1002 	strh.w	r1, [sp, #2]
 801a3a2:	6819      	ldr	r1, [r3, #0]
 801a3a4:	690c      	ldr	r4, [r1, #16]
 801a3a6:	4669      	mov	r1, sp
 801a3a8:	47a0      	blx	r4
 801a3aa:	b002      	add	sp, #8
 801a3ac:	bd10      	pop	{r4, pc}

0801a3ae <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a3ae:	b538      	push	{r3, r4, r5, lr}
 801a3b0:	680b      	ldr	r3, [r1, #0]
 801a3b2:	460c      	mov	r4, r1
 801a3b4:	4605      	mov	r5, r0
 801a3b6:	68db      	ldr	r3, [r3, #12]
 801a3b8:	4798      	blx	r3
 801a3ba:	6823      	ldr	r3, [r4, #0]
 801a3bc:	4620      	mov	r0, r4
 801a3be:	4629      	mov	r1, r5
 801a3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a3c2:	4798      	blx	r3
 801a3c4:	4628      	mov	r0, r5
 801a3c6:	bd38      	pop	{r3, r4, r5, pc}

0801a3c8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a3c8:	b410      	push	{r4}
 801a3ca:	880a      	ldrh	r2, [r1, #0]
 801a3cc:	8884      	ldrh	r4, [r0, #4]
 801a3ce:	4422      	add	r2, r4
 801a3d0:	800a      	strh	r2, [r1, #0]
 801a3d2:	884a      	ldrh	r2, [r1, #2]
 801a3d4:	88c4      	ldrh	r4, [r0, #6]
 801a3d6:	4422      	add	r2, r4
 801a3d8:	804a      	strh	r2, [r1, #2]
 801a3da:	6940      	ldr	r0, [r0, #20]
 801a3dc:	b120      	cbz	r0, 801a3e8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a3de:	6803      	ldr	r3, [r0, #0]
 801a3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a3e6:	4718      	bx	r3
 801a3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3ec:	4770      	bx	lr

0801a3ee <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a3ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3f0:	460b      	mov	r3, r1
 801a3f2:	b085      	sub	sp, #20
 801a3f4:	4604      	mov	r4, r0
 801a3f6:	b901      	cbnz	r1, 801a3fa <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a3f8:	b1f2      	cbz	r2, 801a438 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801a3fa:	1d27      	adds	r7, r4, #4
 801a3fc:	ad02      	add	r5, sp, #8
 801a3fe:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a402:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a406:	88e1      	ldrh	r1, [r4, #6]
 801a408:	4620      	mov	r0, r4
 801a40a:	440a      	add	r2, r1
 801a40c:	88a1      	ldrh	r1, [r4, #4]
 801a40e:	4419      	add	r1, r3
 801a410:	6823      	ldr	r3, [r4, #0]
 801a412:	b212      	sxth	r2, r2
 801a414:	b209      	sxth	r1, r1
 801a416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a418:	4798      	blx	r3
 801a41a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a41e:	e885 0003 	stmia.w	r5, {r0, r1}
 801a422:	6960      	ldr	r0, [r4, #20]
 801a424:	b150      	cbz	r0, 801a43c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801a426:	6803      	ldr	r3, [r0, #0]
 801a428:	4669      	mov	r1, sp
 801a42a:	691b      	ldr	r3, [r3, #16]
 801a42c:	4798      	blx	r3
 801a42e:	6960      	ldr	r0, [r4, #20]
 801a430:	6803      	ldr	r3, [r0, #0]
 801a432:	691b      	ldr	r3, [r3, #16]
 801a434:	4629      	mov	r1, r5
 801a436:	4798      	blx	r3
 801a438:	b005      	add	sp, #20
 801a43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a43c:	f7ff fbba 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 801a440:	6803      	ldr	r3, [r0, #0]
 801a442:	4669      	mov	r1, sp
 801a444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a446:	4798      	blx	r3
 801a448:	f7ff fbb4 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 801a44c:	6803      	ldr	r3, [r0, #0]
 801a44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a450:	e7f0      	b.n	801a434 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801a452 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a452:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a454:	8882      	ldrh	r2, [r0, #4]
 801a456:	4605      	mov	r5, r0
 801a458:	880b      	ldrh	r3, [r1, #0]
 801a45a:	460c      	mov	r4, r1
 801a45c:	4413      	add	r3, r2
 801a45e:	800b      	strh	r3, [r1, #0]
 801a460:	884b      	ldrh	r3, [r1, #2]
 801a462:	88c2      	ldrh	r2, [r0, #6]
 801a464:	4413      	add	r3, r2
 801a466:	4602      	mov	r2, r0
 801a468:	804b      	strh	r3, [r1, #2]
 801a46a:	466b      	mov	r3, sp
 801a46c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a470:	6851      	ldr	r1, [r2, #4]
 801a472:	c303      	stmia	r3!, {r0, r1}
 801a474:	4621      	mov	r1, r4
 801a476:	4668      	mov	r0, sp
 801a478:	f7f8 fc9a 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 801a47c:	466b      	mov	r3, sp
 801a47e:	cb03      	ldmia	r3!, {r0, r1}
 801a480:	6020      	str	r0, [r4, #0]
 801a482:	6061      	str	r1, [r4, #4]
 801a484:	6968      	ldr	r0, [r5, #20]
 801a486:	b128      	cbz	r0, 801a494 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801a488:	6803      	ldr	r3, [r0, #0]
 801a48a:	691b      	ldr	r3, [r3, #16]
 801a48c:	4621      	mov	r1, r4
 801a48e:	4798      	blx	r3
 801a490:	b003      	add	sp, #12
 801a492:	bd30      	pop	{r4, r5, pc}
 801a494:	f7ff fb8e 	bl	8019bb4 <_ZN8touchgfx11Application11getInstanceEv>
 801a498:	6803      	ldr	r3, [r0, #0]
 801a49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a49c:	e7f6      	b.n	801a48c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801a49e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a49e:	b570      	push	{r4, r5, r6, lr}
 801a4a0:	8882      	ldrh	r2, [r0, #4]
 801a4a2:	460c      	mov	r4, r1
 801a4a4:	880b      	ldrh	r3, [r1, #0]
 801a4a6:	4605      	mov	r5, r0
 801a4a8:	4413      	add	r3, r2
 801a4aa:	800b      	strh	r3, [r1, #0]
 801a4ac:	884b      	ldrh	r3, [r1, #2]
 801a4ae:	88c2      	ldrh	r2, [r0, #6]
 801a4b0:	4413      	add	r3, r2
 801a4b2:	804b      	strh	r3, [r1, #2]
 801a4b4:	1d01      	adds	r1, r0, #4
 801a4b6:	4620      	mov	r0, r4
 801a4b8:	f7f8 fc7a 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 801a4bc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a4c0:	b163      	cbz	r3, 801a4dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a4c2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a4c6:	b933      	cbnz	r3, 801a4d6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801a4c8:	bd70      	pop	{r4, r5, r6, pc}
 801a4ca:	6803      	ldr	r3, [r0, #0]
 801a4cc:	4621      	mov	r1, r4
 801a4ce:	6a1b      	ldr	r3, [r3, #32]
 801a4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4d4:	4718      	bx	r3
 801a4d6:	6968      	ldr	r0, [r5, #20]
 801a4d8:	2800      	cmp	r0, #0
 801a4da:	d1f6      	bne.n	801a4ca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801a4dc:	bd70      	pop	{r4, r5, r6, pc}

0801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801a4de:	b510      	push	{r4, lr}
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	4604      	mov	r4, r0
 801a4e4:	4608      	mov	r0, r1
 801a4e6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801a4ea:	8023      	strh	r3, [r4, #0]
 801a4ec:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a4f0:	8063      	strh	r3, [r4, #2]
 801a4f2:	6803      	ldr	r3, [r0, #0]
 801a4f4:	80a1      	strh	r1, [r4, #4]
 801a4f6:	4621      	mov	r1, r4
 801a4f8:	80e2      	strh	r2, [r4, #6]
 801a4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4fc:	4798      	blx	r3
 801a4fe:	4620      	mov	r0, r4
 801a500:	bd10      	pop	{r4, pc}

0801a502 <_ZN8touchgfx6memsetEPvhm>:
 801a502:	4402      	add	r2, r0
 801a504:	4290      	cmp	r0, r2
 801a506:	d002      	beq.n	801a50e <_ZN8touchgfx6memsetEPvhm+0xc>
 801a508:	f800 1b01 	strb.w	r1, [r0], #1
 801a50c:	e7fa      	b.n	801a504 <_ZN8touchgfx6memsetEPvhm+0x2>
 801a50e:	4770      	bx	lr

0801a510 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801a510:	b538      	push	{r3, r4, r5, lr}
 801a512:	4605      	mov	r5, r0
 801a514:	f002 fb30 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a518:	4604      	mov	r4, r0
 801a51a:	4628      	mov	r0, r5
 801a51c:	f002 fa9e 	bl	801ca5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a520:	2800      	cmp	r0, #0
 801a522:	bf14      	ite	ne
 801a524:	2002      	movne	r0, #2
 801a526:	2000      	moveq	r0, #0
 801a528:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801a52c:	b280      	uxth	r0, r0
 801a52e:	bd38      	pop	{r3, r4, r5, pc}

0801a530 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801a530:	b538      	push	{r3, r4, r5, lr}
 801a532:	4605      	mov	r5, r0
 801a534:	f002 fb20 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a538:	4604      	mov	r4, r0
 801a53a:	4628      	mov	r0, r5
 801a53c:	f002 fa8e 	bl	801ca5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a540:	2800      	cmp	r0, #0
 801a542:	bf14      	ite	ne
 801a544:	2002      	movne	r0, #2
 801a546:	2000      	moveq	r0, #0
 801a548:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801a54c:	f040 0001 	orr.w	r0, r0, #1
 801a550:	b280      	uxth	r0, r0
 801a552:	bd38      	pop	{r3, r4, r5, pc}

0801a554 <_ZN8touchgfx3clzEl>:
 801a554:	b1e8      	cbz	r0, 801a592 <_ZN8touchgfx3clzEl+0x3e>
 801a556:	2800      	cmp	r0, #0
 801a558:	bfb8      	it	lt
 801a55a:	4240      	neglt	r0, r0
 801a55c:	0c03      	lsrs	r3, r0, #16
 801a55e:	041b      	lsls	r3, r3, #16
 801a560:	b9ab      	cbnz	r3, 801a58e <_ZN8touchgfx3clzEl+0x3a>
 801a562:	0400      	lsls	r0, r0, #16
 801a564:	2310      	movs	r3, #16
 801a566:	f010 4f7f 	tst.w	r0, #4278190080	@ 0xff000000
 801a56a:	bf04      	itt	eq
 801a56c:	0200      	lsleq	r0, r0, #8
 801a56e:	3308      	addeq	r3, #8
 801a570:	f010 4f70 	tst.w	r0, #4026531840	@ 0xf0000000
 801a574:	bf04      	itt	eq
 801a576:	0100      	lsleq	r0, r0, #4
 801a578:	3304      	addeq	r3, #4
 801a57a:	f010 4f40 	tst.w	r0, #3221225472	@ 0xc0000000
 801a57e:	bf04      	itt	eq
 801a580:	0080      	lsleq	r0, r0, #2
 801a582:	3302      	addeq	r3, #2
 801a584:	2800      	cmp	r0, #0
 801a586:	bfa8      	it	ge
 801a588:	3301      	addge	r3, #1
 801a58a:	1e58      	subs	r0, r3, #1
 801a58c:	4770      	bx	lr
 801a58e:	2300      	movs	r3, #0
 801a590:	e7e9      	b.n	801a566 <_ZN8touchgfx3clzEl+0x12>
 801a592:	201f      	movs	r0, #31
 801a594:	4770      	bx	lr

0801a596 <_ZN8touchgfx6muldivElllRl>:
 801a596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a59a:	4604      	mov	r4, r0
 801a59c:	4698      	mov	r8, r3
 801a59e:	2601      	movs	r6, #1
 801a5a0:	f7ff ffd8 	bl	801a554 <_ZN8touchgfx3clzEl>
 801a5a4:	2c00      	cmp	r4, #0
 801a5a6:	fa04 f500 	lsl.w	r5, r4, r0
 801a5aa:	fa06 f600 	lsl.w	r6, r6, r0
 801a5ae:	bfba      	itte	lt
 801a5b0:	f04f 37ff 	movlt.w	r7, #4294967295
 801a5b4:	4264      	neglt	r4, r4
 801a5b6:	2701      	movge	r7, #1
 801a5b8:	2900      	cmp	r1, #0
 801a5ba:	f106 36ff 	add.w	r6, r6, #4294967295
 801a5be:	bfbc      	itt	lt
 801a5c0:	4249      	neglt	r1, r1
 801a5c2:	427f      	neglt	r7, r7
 801a5c4:	2a00      	cmp	r2, #0
 801a5c6:	fa41 fe00 	asr.w	lr, r1, r0
 801a5ca:	ea01 0106 	and.w	r1, r1, r6
 801a5ce:	bfb8      	it	lt
 801a5d0:	427f      	neglt	r7, r7
 801a5d2:	fb04 f401 	mul.w	r4, r4, r1
 801a5d6:	fb95 f3f2 	sdiv	r3, r5, r2
 801a5da:	fb02 5513 	mls	r5, r2, r3, r5
 801a5de:	bfb8      	it	lt
 801a5e0:	4252      	neglt	r2, r2
 801a5e2:	fb94 f0f2 	sdiv	r0, r4, r2
 801a5e6:	fb02 4410 	mls	r4, r2, r0, r4
 801a5ea:	fb0e 4405 	mla	r4, lr, r5, r4
 801a5ee:	fb94 f1f2 	sdiv	r1, r4, r2
 801a5f2:	4408      	add	r0, r1
 801a5f4:	fb02 4211 	mls	r2, r2, r1, r4
 801a5f8:	fb0e 0003 	mla	r0, lr, r3, r0
 801a5fc:	f8c8 2000 	str.w	r2, [r8]
 801a600:	4378      	muls	r0, r7
 801a602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a606 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801a606:	2002      	movs	r0, #2
 801a608:	4770      	bx	lr

0801a60a <_ZN8touchgfx6ScreenD1Ev>:
 801a60a:	4770      	bx	lr

0801a60c <_ZN8touchgfx12GestureEventD1Ev>:
 801a60c:	4770      	bx	lr

0801a60e <_ZN8touchgfx12GestureEventD0Ev>:
 801a60e:	b510      	push	{r4, lr}
 801a610:	4604      	mov	r4, r0
 801a612:	210c      	movs	r1, #12
 801a614:	f004 fa87 	bl	801eb26 <_ZdlPvj>
 801a618:	4620      	mov	r0, r4
 801a61a:	bd10      	pop	{r4, pc}

0801a61c <_ZN8touchgfx6ScreenD0Ev>:
 801a61c:	b510      	push	{r4, lr}
 801a61e:	4604      	mov	r4, r0
 801a620:	213c      	movs	r1, #60	@ 0x3c
 801a622:	f004 fa80 	bl	801eb26 <_ZdlPvj>
 801a626:	4620      	mov	r0, r4
 801a628:	bd10      	pop	{r4, pc}
	...

0801a62c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a62c:	b530      	push	{r4, r5, lr}
 801a62e:	460d      	mov	r5, r1
 801a630:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801a632:	b087      	sub	sp, #28
 801a634:	4604      	mov	r4, r0
 801a636:	b301      	cbz	r1, 801a67a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a638:	a801      	add	r0, sp, #4
 801a63a:	f7ff ff50 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a63e:	892a      	ldrh	r2, [r5, #8]
 801a640:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a644:	7928      	ldrb	r0, [r5, #4]
 801a646:	1ad2      	subs	r2, r2, r3
 801a648:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801a64a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a64e:	441a      	add	r2, r3
 801a650:	896b      	ldrh	r3, [r5, #10]
 801a652:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a656:	f88d 0010 	strb.w	r0, [sp, #16]
 801a65a:	1b5b      	subs	r3, r3, r5
 801a65c:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801a65e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a660:	442b      	add	r3, r5
 801a662:	4d07      	ldr	r5, [pc, #28]	@ (801a680 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a664:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a668:	a903      	add	r1, sp, #12
 801a66a:	9503      	str	r5, [sp, #12]
 801a66c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a670:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a674:	6803      	ldr	r3, [r0, #0]
 801a676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a678:	4798      	blx	r3
 801a67a:	b007      	add	sp, #28
 801a67c:	bd30      	pop	{r4, r5, pc}
 801a67e:	bf00      	nop
 801a680:	080264c4 	.word	0x080264c4

0801a684 <_ZNK8touchgfx4Rect9intersectEss>:
 801a684:	b510      	push	{r4, lr}
 801a686:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a68a:	428b      	cmp	r3, r1
 801a68c:	dc10      	bgt.n	801a6b0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a68e:	8884      	ldrh	r4, [r0, #4]
 801a690:	4423      	add	r3, r4
 801a692:	b21b      	sxth	r3, r3
 801a694:	4299      	cmp	r1, r3
 801a696:	da0b      	bge.n	801a6b0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a698:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a69c:	4293      	cmp	r3, r2
 801a69e:	dc07      	bgt.n	801a6b0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a6a0:	88c0      	ldrh	r0, [r0, #6]
 801a6a2:	4418      	add	r0, r3
 801a6a4:	b200      	sxth	r0, r0
 801a6a6:	4282      	cmp	r2, r0
 801a6a8:	bfac      	ite	ge
 801a6aa:	2000      	movge	r0, #0
 801a6ac:	2001      	movlt	r0, #1
 801a6ae:	bd10      	pop	{r4, pc}
 801a6b0:	2000      	movs	r0, #0
 801a6b2:	bd10      	pop	{r4, pc}

0801a6b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6b6:	460c      	mov	r4, r1
 801a6b8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801a6ba:	b089      	sub	sp, #36	@ 0x24
 801a6bc:	4605      	mov	r5, r0
 801a6be:	2900      	cmp	r1, #0
 801a6c0:	d053      	beq.n	801a76a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801a6c2:	4668      	mov	r0, sp
 801a6c4:	f7ff ff0b 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a6c8:	8eae      	ldrh	r6, [r5, #52]	@ 0x34
 801a6ca:	8eef      	ldrh	r7, [r5, #54]	@ 0x36
 801a6cc:	4668      	mov	r0, sp
 801a6ce:	8922      	ldrh	r2, [r4, #8]
 801a6d0:	88e1      	ldrh	r1, [r4, #6]
 801a6d2:	443a      	add	r2, r7
 801a6d4:	4431      	add	r1, r6
 801a6d6:	b212      	sxth	r2, r2
 801a6d8:	b209      	sxth	r1, r1
 801a6da:	f7ff ffd3 	bl	801a684 <_ZNK8touchgfx4Rect9intersectEss>
 801a6de:	b1c8      	cbz	r0, 801a714 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801a6e0:	89a2      	ldrh	r2, [r4, #12]
 801a6e2:	4668      	mov	r0, sp
 801a6e4:	8961      	ldrh	r1, [r4, #10]
 801a6e6:	443a      	add	r2, r7
 801a6e8:	4431      	add	r1, r6
 801a6ea:	b212      	sxth	r2, r2
 801a6ec:	b209      	sxth	r1, r1
 801a6ee:	f7ff ffc9 	bl	801a684 <_ZNK8touchgfx4Rect9intersectEss>
 801a6f2:	b978      	cbnz	r0, 801a714 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801a6f4:	4b1e      	ldr	r3, [pc, #120]	@ (801a770 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a6f6:	a904      	add	r1, sp, #16
 801a6f8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a6fc:	9304      	str	r3, [sp, #16]
 801a6fe:	2302      	movs	r3, #2
 801a700:	f8ad 0018 	strh.w	r0, [sp, #24]
 801a704:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a708:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801a70a:	f88d 3014 	strb.w	r3, [sp, #20]
 801a70e:	6803      	ldr	r3, [r0, #0]
 801a710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a712:	4798      	blx	r3
 801a714:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 801a716:	a802      	add	r0, sp, #8
 801a718:	f7ff fee1 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a71c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a720:	88e0      	ldrh	r0, [r4, #6]
 801a722:	8961      	ldrh	r1, [r4, #10]
 801a724:	f8b5 e034 	ldrh.w	lr, [r5, #52]	@ 0x34
 801a728:	1a80      	subs	r0, r0, r2
 801a72a:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801a72e:	1a89      	subs	r1, r1, r2
 801a730:	8923      	ldrh	r3, [r4, #8]
 801a732:	4470      	add	r0, lr
 801a734:	89a2      	ldrh	r2, [r4, #12]
 801a736:	4471      	add	r1, lr
 801a738:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801a73a:	eba3 030c 	sub.w	r3, r3, ip
 801a73e:	eba2 020c 	sub.w	r2, r2, ip
 801a742:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a746:	7927      	ldrb	r7, [r4, #4]
 801a748:	4433      	add	r3, r6
 801a74a:	4432      	add	r2, r6
 801a74c:	4c09      	ldr	r4, [pc, #36]	@ (801a774 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a74e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801a750:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a754:	a904      	add	r1, sp, #16
 801a756:	9404      	str	r4, [sp, #16]
 801a758:	f88d 7014 	strb.w	r7, [sp, #20]
 801a75c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a760:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a764:	6803      	ldr	r3, [r0, #0]
 801a766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a768:	4798      	blx	r3
 801a76a:	b009      	add	sp, #36	@ 0x24
 801a76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a76e:	bf00      	nop
 801a770:	08025300 	.word	0x08025300
 801a774:	08025314 	.word	0x08025314

0801a778 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a77c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 801a77e:	b0a1      	sub	sp, #132	@ 0x84
 801a780:	4604      	mov	r4, r0
 801a782:	460d      	mov	r5, r1
 801a784:	790b      	ldrb	r3, [r1, #4]
 801a786:	b16a      	cbz	r2, 801a7a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801a788:	b963      	cbnz	r3, 801a7a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801a78a:	b021      	add	sp, #132	@ 0x84
 801a78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a790:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801a794:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a798:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a79c:	1d20      	adds	r0, r4, #4
 801a79e:	f7f8 fa4f 	bl	8012c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a7a2:	e0a2      	b.n	801a8ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	f040 80a0 	bne.w	801a8ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801a7aa:	4a66      	ldr	r2, [pc, #408]	@ (801a944 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801a7ac:	6812      	ldr	r2, [r2, #0]
 801a7ae:	f892 b045 	ldrb.w	fp, [r2, #69]	@ 0x45
 801a7b2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801a7b4:	f1bb 0f03 	cmp.w	fp, #3
 801a7b8:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801a7ba:	dde9      	ble.n	801a790 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801a7bc:	f1bb 0f0c 	cmp.w	fp, #12
 801a7c0:	6323      	str	r3, [r4, #48]	@ 0x30
 801a7c2:	f04f 0303 	mov.w	r3, #3
 801a7c6:	f04f 0600 	mov.w	r6, #0
 801a7ca:	bfd8      	it	le
 801a7cc:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801a7d0:	495d      	ldr	r1, [pc, #372]	@ (801a948 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801a7d2:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 801a7d6:	f04f 0a01 	mov.w	sl, #1
 801a7da:	f8ad 602a 	strh.w	r6, [sp, #42]	@ 0x2a
 801a7de:	bfd8      	it	le
 801a7e0:	fb92 f3f3 	sdivle	r3, r2, r3
 801a7e4:	9300      	str	r3, [sp, #0]
 801a7e6:	4b59      	ldr	r3, [pc, #356]	@ (801a94c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801a7e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a7ec:	4b58      	ldr	r3, [pc, #352]	@ (801a950 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801a7ee:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801a7f2:	2248      	movs	r2, #72	@ 0x48
 801a7f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a7f8:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a7fc:	ab0e      	add	r3, sp, #56	@ 0x38
 801a7fe:	4618      	mov	r0, r3
 801a800:	f005 fd81 	bl	8020306 <memcpy>
 801a804:	f04f 32ff 	mov.w	r2, #4294967295
 801a808:	f8cd b008 	str.w	fp, [sp, #8]
 801a80c:	9206      	str	r2, [sp, #24]
 801a80e:	9007      	str	r0, [sp, #28]
 801a810:	9a00      	ldr	r2, [sp, #0]
 801a812:	9b02      	ldr	r3, [sp, #8]
 801a814:	fb93 f3f2 	sdiv	r3, r3, r2
 801a818:	f10a 32ff 	add.w	r2, sl, #4294967295
 801a81c:	b29b      	uxth	r3, r3
 801a81e:	9201      	str	r2, [sp, #4]
 801a820:	9a07      	ldr	r2, [sp, #28]
 801a822:	9303      	str	r3, [sp, #12]
 801a824:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801a828:	3f04      	subs	r7, #4
 801a82a:	2300      	movs	r3, #0
 801a82c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a830:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801a834:	a80a      	add	r0, sp, #40	@ 0x28
 801a836:	9309      	str	r3, [sp, #36]	@ 0x24
 801a838:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801a83c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801a840:	fb13 f302 	smulbb	r3, r3, r2
 801a844:	b29b      	uxth	r3, r3
 801a846:	9304      	str	r3, [sp, #16]
 801a848:	683b      	ldr	r3, [r7, #0]
 801a84a:	fb13 f302 	smulbb	r3, r3, r2
 801a84e:	b29b      	uxth	r3, r3
 801a850:	9305      	str	r3, [sp, #20]
 801a852:	9b04      	ldr	r3, [sp, #16]
 801a854:	4498      	add	r8, r3
 801a856:	9b05      	ldr	r3, [sp, #20]
 801a858:	4499      	add	r9, r3
 801a85a:	fa0f f888 	sxth.w	r8, r8
 801a85e:	fa0f f989 	sxth.w	r9, r9
 801a862:	4641      	mov	r1, r8
 801a864:	464a      	mov	r2, r9
 801a866:	f7ff ff0d 	bl	801a684 <_ZNK8touchgfx4Rect9intersectEss>
 801a86a:	b380      	cbz	r0, 801a8ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801a86c:	4641      	mov	r1, r8
 801a86e:	ab09      	add	r3, sp, #36	@ 0x24
 801a870:	464a      	mov	r2, r9
 801a872:	1d20      	adds	r0, r4, #4
 801a874:	f7f8 f9e4 	bl	8012c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a878:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a87a:	b341      	cbz	r1, 801a8ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801a87c:	42b1      	cmp	r1, r6
 801a87e:	d026      	beq.n	801a8ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801a880:	a80c      	add	r0, sp, #48	@ 0x30
 801a882:	f7ff fe2c 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a886:	2002      	movs	r0, #2
 801a888:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801a88c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801a890:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a894:	fb92 f2f0 	sdiv	r2, r2, r0
 801a898:	440a      	add	r2, r1
 801a89a:	1a99      	subs	r1, r3, r2
 801a89c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801a8a0:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a8a4:	fb93 f3f0 	sdiv	r3, r3, r0
 801a8a8:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	@ 0x32
 801a8ac:	4403      	add	r3, r0
 801a8ae:	1ad3      	subs	r3, r2, r3
 801a8b0:	9a06      	ldr	r2, [sp, #24]
 801a8b2:	435b      	muls	r3, r3
 801a8b4:	fb01 3301 	mla	r3, r1, r1, r3
 801a8b8:	4293      	cmp	r3, r2
 801a8ba:	d208      	bcs.n	801a8ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801a8bc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a8c0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801a8c2:	86a2      	strh	r2, [r4, #52]	@ 0x34
 801a8c4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a8c8:	6326      	str	r6, [r4, #48]	@ 0x30
 801a8ca:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801a8cc:	9306      	str	r3, [sp, #24]
 801a8ce:	9b01      	ldr	r3, [sp, #4]
 801a8d0:	3710      	adds	r7, #16
 801a8d2:	3302      	adds	r3, #2
 801a8d4:	2b08      	cmp	r3, #8
 801a8d6:	9301      	str	r3, [sp, #4]
 801a8d8:	dda7      	ble.n	801a82a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 801a8da:	9b02      	ldr	r3, [sp, #8]
 801a8dc:	f10a 0a01 	add.w	sl, sl, #1
 801a8e0:	445b      	add	r3, fp
 801a8e2:	9302      	str	r3, [sp, #8]
 801a8e4:	9b00      	ldr	r3, [sp, #0]
 801a8e6:	4553      	cmp	r3, sl
 801a8e8:	da92      	bge.n	801a810 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 801a8ea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a8ec:	2900      	cmp	r1, #0
 801a8ee:	f43f af4c 	beq.w	801a78a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801a8f2:	a80c      	add	r0, sp, #48	@ 0x30
 801a8f4:	2600      	movs	r6, #0
 801a8f6:	f7ff fdf2 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a8fa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801a8fe:	88ea      	ldrh	r2, [r5, #6]
 801a900:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 801a904:	1ad2      	subs	r2, r2, r3
 801a906:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801a908:	7929      	ldrb	r1, [r5, #4]
 801a90a:	441a      	add	r2, r3
 801a90c:	892b      	ldrh	r3, [r5, #8]
 801a90e:	f88d 103c 	strb.w	r1, [sp, #60]	@ 0x3c
 801a912:	a90e      	add	r1, sp, #56	@ 0x38
 801a914:	1a1b      	subs	r3, r3, r0
 801a916:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801a918:	f8ad 203e 	strh.w	r2, [sp, #62]	@ 0x3e
 801a91c:	4403      	add	r3, r0
 801a91e:	480d      	ldr	r0, [pc, #52]	@ (801a954 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 801a920:	f8ad 6042 	strh.w	r6, [sp, #66]	@ 0x42
 801a924:	900e      	str	r0, [sp, #56]	@ 0x38
 801a926:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a928:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801a92c:	6803      	ldr	r3, [r0, #0]
 801a92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a930:	4798      	blx	r3
 801a932:	792b      	ldrb	r3, [r5, #4]
 801a934:	2b00      	cmp	r3, #0
 801a936:	f43f af28 	beq.w	801a78a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801a93a:	6326      	str	r6, [r4, #48]	@ 0x30
 801a93c:	86a6      	strh	r6, [r4, #52]	@ 0x34
 801a93e:	86e6      	strh	r6, [r4, #54]	@ 0x36
 801a940:	e723      	b.n	801a78a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801a942:	bf00      	nop
 801a944:	20024e34 	.word	0x20024e34
 801a948:	08022848 	.word	0x08022848
 801a94c:	20024e28 	.word	0x20024e28
 801a950:	20024e2a 	.word	0x20024e2a
 801a954:	08025300 	.word	0x08025300

0801a958 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a95a:	4604      	mov	r4, r0
 801a95c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a960:	3201      	adds	r2, #1
 801a962:	d114      	bne.n	801a98e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801a964:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801a968:	2200      	movs	r2, #0
 801a96a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801a96e:	6803      	ldr	r3, [r0, #0]
 801a970:	f8ad 1006 	strh.w	r1, [sp, #6]
 801a974:	4669      	mov	r1, sp
 801a976:	f8ad 2000 	strh.w	r2, [sp]
 801a97a:	f8ad 2002 	strh.w	r2, [sp, #2]
 801a97e:	f8ad 5004 	strh.w	r5, [sp, #4]
 801a982:	6a1b      	ldr	r3, [r3, #32]
 801a984:	4798      	blx	r3
 801a986:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801a98a:	e884 0003 	stmia.w	r4, {r0, r1}
 801a98e:	4620      	mov	r0, r4
 801a990:	b003      	add	sp, #12
 801a992:	bd30      	pop	{r4, r5, pc}

0801a994 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a994:	b513      	push	{r0, r1, r4, lr}
 801a996:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a99a:	4604      	mov	r4, r0
 801a99c:	3301      	adds	r3, #1
 801a99e:	d109      	bne.n	801a9b4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a9a0:	4601      	mov	r1, r0
 801a9a2:	4668      	mov	r0, sp
 801a9a4:	f7ff fd9b 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a9a8:	f8bd 3000 	ldrh.w	r3, [sp]
 801a9ac:	8423      	strh	r3, [r4, #32]
 801a9ae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a9b2:	8463      	strh	r3, [r4, #34]	@ 0x22
 801a9b4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a9b8:	b002      	add	sp, #8
 801a9ba:	bd10      	pop	{r4, pc}

0801a9bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a9bc:	b513      	push	{r0, r1, r4, lr}
 801a9be:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801a9c2:	4604      	mov	r4, r0
 801a9c4:	3301      	adds	r3, #1
 801a9c6:	d109      	bne.n	801a9dc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a9c8:	4601      	mov	r1, r0
 801a9ca:	4668      	mov	r0, sp
 801a9cc:	f7ff fd87 	bl	801a4de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a9d0:	f8bd 3000 	ldrh.w	r3, [sp]
 801a9d4:	8423      	strh	r3, [r4, #32]
 801a9d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a9da:	8463      	strh	r3, [r4, #34]	@ 0x22
 801a9dc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801a9e0:	b002      	add	sp, #8
 801a9e2:	bd10      	pop	{r4, pc}

0801a9e4 <_ZN8touchgfx6ScreenC1Ev>:
 801a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9e6:	4605      	mov	r5, r0
 801a9e8:	4b18      	ldr	r3, [pc, #96]	@ (801aa4c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a9ea:	2200      	movs	r2, #0
 801a9ec:	4918      	ldr	r1, [pc, #96]	@ (801aa50 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a9ee:	f845 3b04 	str.w	r3, [r5], #4
 801a9f2:	2301      	movs	r3, #1
 801a9f4:	8102      	strh	r2, [r0, #8]
 801a9f6:	4604      	mov	r4, r0
 801a9f8:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
 801a9fc:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801aa00:	4b14      	ldr	r3, [pc, #80]	@ (801aa54 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801aa02:	8142      	strh	r2, [r0, #10]
 801aa04:	f9b3 7000 	ldrsh.w	r7, [r3]
 801aa08:	4b13      	ldr	r3, [pc, #76]	@ (801aa58 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801aa0a:	8182      	strh	r2, [r0, #12]
 801aa0c:	81c2      	strh	r2, [r0, #14]
 801aa0e:	8202      	strh	r2, [r0, #16]
 801aa10:	8242      	strh	r2, [r0, #18]
 801aa12:	8282      	strh	r2, [r0, #20]
 801aa14:	82c2      	strh	r2, [r0, #22]
 801aa16:	6182      	str	r2, [r0, #24]
 801aa18:	61c2      	str	r2, [r0, #28]
 801aa1a:	6202      	str	r2, [r0, #32]
 801aa1c:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
 801aa20:	62c2      	str	r2, [r0, #44]	@ 0x2c
 801aa22:	6302      	str	r2, [r0, #48]	@ 0x30
 801aa24:	8682      	strh	r2, [r0, #52]	@ 0x34
 801aa26:	86c2      	strh	r2, [r0, #54]	@ 0x36
 801aa28:	f9b3 6000 	ldrsh.w	r6, [r3]
 801aa2c:	6041      	str	r1, [r0, #4]
 801aa2e:	4611      	mov	r1, r2
 801aa30:	4628      	mov	r0, r5
 801aa32:	f7e6 f9d5 	bl	8000de0 <_ZN8touchgfx8Drawable5setXYEss>
 801aa36:	4639      	mov	r1, r7
 801aa38:	4628      	mov	r0, r5
 801aa3a:	f7e6 f9de 	bl	8000dfa <_ZN8touchgfx8Drawable8setWidthEs>
 801aa3e:	4628      	mov	r0, r5
 801aa40:	4631      	mov	r1, r6
 801aa42:	f7e6 f9dc 	bl	8000dfe <_ZN8touchgfx8Drawable9setHeightEs>
 801aa46:	4620      	mov	r0, r4
 801aa48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa4a:	bf00      	nop
 801aa4c:	080264d8 	.word	0x080264d8
 801aa50:	080250b0 	.word	0x080250b0
 801aa54:	20024e28 	.word	0x20024e28
 801aa58:	20024e2a 	.word	0x20024e2a

0801aa5c <_ZN8touchgfx6Screen4drawEv>:
 801aa5c:	4b0b      	ldr	r3, [pc, #44]	@ (801aa8c <_ZN8touchgfx6Screen4drawEv+0x30>)
 801aa5e:	b507      	push	{r0, r1, r2, lr}
 801aa60:	f9b3 1000 	ldrsh.w	r1, [r3]
 801aa64:	4b0a      	ldr	r3, [pc, #40]	@ (801aa90 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801aa66:	f8ad 1004 	strh.w	r1, [sp, #4]
 801aa6a:	4669      	mov	r1, sp
 801aa6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa70:	2300      	movs	r3, #0
 801aa72:	f8ad 3000 	strh.w	r3, [sp]
 801aa76:	f8ad 3002 	strh.w	r3, [sp, #2]
 801aa7a:	6803      	ldr	r3, [r0, #0]
 801aa7c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801aa80:	689b      	ldr	r3, [r3, #8]
 801aa82:	4798      	blx	r3
 801aa84:	b003      	add	sp, #12
 801aa86:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa8a:	bf00      	nop
 801aa8c:	20024e28 	.word	0x20024e28
 801aa90:	20024e2a 	.word	0x20024e2a

0801aa94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa98:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801aa9c:	b087      	sub	sp, #28
 801aa9e:	4681      	mov	r9, r0
 801aaa0:	460c      	mov	r4, r1
 801aaa2:	4615      	mov	r5, r2
 801aaa4:	b16b      	cbz	r3, 801aac2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801aaa6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801aaaa:	b153      	cbz	r3, 801aac2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801aaac:	4628      	mov	r0, r5
 801aaae:	f7ff ff53 	bl	801a958 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801aab2:	4621      	mov	r1, r4
 801aab4:	f7ff f83a 	bl	8019b2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801aab8:	69eb      	ldr	r3, [r5, #28]
 801aaba:	b928      	cbnz	r0, 801aac8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801aabc:	461d      	mov	r5, r3
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d1f4      	bne.n	801aaac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801aac2:	b007      	add	sp, #28
 801aac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aac8:	ae02      	add	r6, sp, #8
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d04a      	beq.n	801ab64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801aace:	682b      	ldr	r3, [r5, #0]
 801aad0:	4629      	mov	r1, r5
 801aad2:	4668      	mov	r0, sp
 801aad4:	68db      	ldr	r3, [r3, #12]
 801aad6:	4798      	blx	r3
 801aad8:	4628      	mov	r0, r5
 801aada:	f7ff ff5b 	bl	801a994 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801aade:	f8bd 7000 	ldrh.w	r7, [sp]
 801aae2:	4407      	add	r7, r0
 801aae4:	4628      	mov	r0, r5
 801aae6:	f7ff ff69 	bl	801a9bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801aaea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801aaee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801aaf2:	b23f      	sxth	r7, r7
 801aaf4:	4418      	add	r0, r3
 801aaf6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801aafa:	4621      	mov	r1, r4
 801aafc:	f8ad 200c 	strh.w	r2, [sp, #12]
 801ab00:	f8ad 000a 	strh.w	r0, [sp, #10]
 801ab04:	4630      	mov	r0, r6
 801ab06:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ab0a:	f8ad 7008 	strh.w	r7, [sp, #8]
 801ab0e:	f7f8 f94f 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 801ab12:	4628      	mov	r0, r5
 801ab14:	f7ff ff20 	bl	801a958 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ab18:	ab04      	add	r3, sp, #16
 801ab1a:	4602      	mov	r2, r0
 801ab1c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ab20:	e883 0003 	stmia.w	r3, {r0, r1}
 801ab24:	4611      	mov	r1, r2
 801ab26:	4618      	mov	r0, r3
 801ab28:	f7f8 f942 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 801ab2c:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801ab30:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ab34:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801ab38:	455a      	cmp	r2, fp
 801ab3a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801ab3e:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801ab42:	f040 8096 	bne.w	801ac72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801ab46:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ab4a:	4553      	cmp	r3, sl
 801ab4c:	f040 8091 	bne.w	801ac72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801ab50:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ab54:	4543      	cmp	r3, r8
 801ab56:	f040 808c 	bne.w	801ac72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801ab5a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ab5e:	42bb      	cmp	r3, r7
 801ab60:	f040 8087 	bne.w	801ac72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801ab64:	4628      	mov	r0, r5
 801ab66:	f7ff fef7 	bl	801a958 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ab6a:	6861      	ldr	r1, [r4, #4]
 801ab6c:	4602      	mov	r2, r0
 801ab6e:	4633      	mov	r3, r6
 801ab70:	6820      	ldr	r0, [r4, #0]
 801ab72:	c303      	stmia	r3!, {r0, r1}
 801ab74:	4611      	mov	r1, r2
 801ab76:	4630      	mov	r0, r6
 801ab78:	f7f8 f91a 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 801ab7c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d09e      	beq.n	801aac2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801ab84:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d09a      	beq.n	801aac2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	f7ff ff01 	bl	801a994 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ab92:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ab96:	1a18      	subs	r0, r3, r0
 801ab98:	f8ad 0008 	strh.w	r0, [sp, #8]
 801ab9c:	4628      	mov	r0, r5
 801ab9e:	f7ff ff0d 	bl	801a9bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801aba2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801aba6:	4631      	mov	r1, r6
 801aba8:	1a18      	subs	r0, r3, r0
 801abaa:	f8ad 000a 	strh.w	r0, [sp, #10]
 801abae:	4628      	mov	r0, r5
 801abb0:	682b      	ldr	r3, [r5, #0]
 801abb2:	689b      	ldr	r3, [r3, #8]
 801abb4:	4798      	blx	r3
 801abb6:	e784      	b.n	801aac2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801abb8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801abbc:	4553      	cmp	r3, sl
 801abbe:	da10      	bge.n	801abe2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801abc0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801abc4:	4648      	mov	r0, r9
 801abc6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801abca:	ebaa 0303 	sub.w	r3, sl, r3
 801abce:	f8ad 100c 	strh.w	r1, [sp, #12]
 801abd2:	4631      	mov	r1, r6
 801abd4:	f8ad 2008 	strh.w	r2, [sp, #8]
 801abd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801abdc:	69ea      	ldr	r2, [r5, #28]
 801abde:	f7ff ff59 	bl	801aa94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801abe2:	f9b4 3000 	ldrsh.w	r3, [r4]
 801abe6:	455b      	cmp	r3, fp
 801abe8:	da0e      	bge.n	801ac08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801abea:	f8ad 3008 	strh.w	r3, [sp, #8]
 801abee:	ebab 0303 	sub.w	r3, fp, r3
 801abf2:	f8ad a00a 	strh.w	sl, [sp, #10]
 801abf6:	4631      	mov	r1, r6
 801abf8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801abfc:	4648      	mov	r0, r9
 801abfe:	f8ad 700e 	strh.w	r7, [sp, #14]
 801ac02:	69ea      	ldr	r2, [r5, #28]
 801ac04:	f7ff ff46 	bl	801aa94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ac08:	8822      	ldrh	r2, [r4, #0]
 801ac0a:	44d8      	add	r8, fp
 801ac0c:	88a3      	ldrh	r3, [r4, #4]
 801ac0e:	fa1f f888 	uxth.w	r8, r8
 801ac12:	4413      	add	r3, r2
 801ac14:	fa0f f288 	sxth.w	r2, r8
 801ac18:	b29b      	uxth	r3, r3
 801ac1a:	b219      	sxth	r1, r3
 801ac1c:	4291      	cmp	r1, r2
 801ac1e:	dd0e      	ble.n	801ac3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ac20:	eba3 0308 	sub.w	r3, r3, r8
 801ac24:	f8ad 2008 	strh.w	r2, [sp, #8]
 801ac28:	f8ad a00a 	strh.w	sl, [sp, #10]
 801ac2c:	4631      	mov	r1, r6
 801ac2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ac32:	4648      	mov	r0, r9
 801ac34:	f8ad 700e 	strh.w	r7, [sp, #14]
 801ac38:	69ea      	ldr	r2, [r5, #28]
 801ac3a:	f7ff ff2b 	bl	801aa94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ac3e:	88e2      	ldrh	r2, [r4, #6]
 801ac40:	4457      	add	r7, sl
 801ac42:	8863      	ldrh	r3, [r4, #2]
 801ac44:	b2bf      	uxth	r7, r7
 801ac46:	4413      	add	r3, r2
 801ac48:	b23a      	sxth	r2, r7
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	b219      	sxth	r1, r3
 801ac4e:	428a      	cmp	r2, r1
 801ac50:	da88      	bge.n	801ab64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801ac52:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ac56:	1bdb      	subs	r3, r3, r7
 801ac58:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ac5c:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ac60:	4631      	mov	r1, r6
 801ac62:	f8ad 0008 	strh.w	r0, [sp, #8]
 801ac66:	f8ad 200a 	strh.w	r2, [sp, #10]
 801ac6a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ac6e:	69ea      	ldr	r2, [r5, #28]
 801ac70:	e006      	b.n	801ac80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801ac72:	f1b8 0f00 	cmp.w	r8, #0
 801ac76:	d001      	beq.n	801ac7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801ac78:	2f00      	cmp	r7, #0
 801ac7a:	d19d      	bne.n	801abb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801ac7c:	69ea      	ldr	r2, [r5, #28]
 801ac7e:	4621      	mov	r1, r4
 801ac80:	4648      	mov	r0, r9
 801ac82:	f7ff ff07 	bl	801aa94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ac86:	e76d      	b.n	801ab64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801ac88 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 801ac88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	aa02      	add	r2, sp, #8
 801ac8e:	4604      	mov	r4, r0
 801ac90:	3004      	adds	r0, #4
 801ac92:	f842 3d04 	str.w	r3, [r2, #-4]!
 801ac96:	460d      	mov	r5, r1
 801ac98:	f7f8 f962 	bl	8012f60 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ac9c:	9a01      	ldr	r2, [sp, #4]
 801ac9e:	b11a      	cbz	r2, 801aca8 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 801aca0:	4629      	mov	r1, r5
 801aca2:	4620      	mov	r0, r4
 801aca4:	f7ff fef6 	bl	801aa94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801aca8:	b003      	add	sp, #12
 801acaa:	bd30      	pop	{r4, r5, pc}

0801acac <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801acac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801acae:	4602      	mov	r2, r0
 801acb0:	4604      	mov	r4, r0
 801acb2:	460d      	mov	r5, r1
 801acb4:	466b      	mov	r3, sp
 801acb6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801acba:	6851      	ldr	r1, [r2, #4]
 801acbc:	c303      	stmia	r3!, {r0, r1}
 801acbe:	4629      	mov	r1, r5
 801acc0:	4668      	mov	r0, sp
 801acc2:	f7f8 f875 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 801acc6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801acca:	4669      	mov	r1, sp
 801accc:	b123      	cbz	r3, 801acd8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801acce:	4620      	mov	r0, r4
 801acd0:	f7ff ffda 	bl	801ac88 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 801acd4:	b003      	add	sp, #12
 801acd6:	bd30      	pop	{r4, r5, pc}
 801acd8:	1d20      	adds	r0, r4, #4
 801acda:	f7f8 f907 	bl	8012eec <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801acde:	e7f9      	b.n	801acd4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801ace0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ace0:	460b      	mov	r3, r1
 801ace2:	680a      	ldr	r2, [r1, #0]
 801ace4:	1d01      	adds	r1, r0, #4
 801ace6:	6952      	ldr	r2, [r2, #20]
 801ace8:	4618      	mov	r0, r3
 801acea:	4710      	bx	r2

0801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801acec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801acf0:	b082      	sub	sp, #8
 801acf2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801acf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acfa:	bfcc      	ite	gt
 801acfc:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801ad00:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801ad04:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801ad08:	edcd 7a01 	vstr	s15, [sp, #4]
 801ad0c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801ad10:	b002      	add	sp, #8
 801ad12:	4770      	bx	lr

0801ad14 <_ZN8touchgfx15EasingEquations10backEaseInEtsst>:
 801ad14:	b510      	push	{r4, lr}
 801ad16:	4298      	cmp	r0, r3
 801ad18:	eb01 0402 	add.w	r4, r1, r2
 801ad1c:	b224      	sxth	r4, r4
 801ad1e:	da21      	bge.n	801ad64 <_ZN8touchgfx15EasingEquations10backEaseInEtsst+0x50>
 801ad20:	b303      	cbz	r3, 801ad64 <_ZN8touchgfx15EasingEquations10backEaseInEtsst+0x50>
 801ad22:	ee07 0a90 	vmov	s15, r0
 801ad26:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801ad68 <_ZN8touchgfx15EasingEquations10backEaseInEtsst+0x54>
 801ad2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ad2e:	ee07 3a90 	vmov	s15, r3
 801ad32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ad3a:	ee07 2a90 	vmov	s15, r2
 801ad3e:	ee07 1a10 	vmov	s14, r1
 801ad42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad46:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801ad4a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 801ad6c <_ZN8touchgfx15EasingEquations10backEaseInEtsst+0x58>
 801ad4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ad52:	eea6 7a86 	vfma.f32	s14, s13, s12
 801ad56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ad5a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801ad5e:	f7ff ffc5 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801ad62:	4604      	mov	r4, r0
 801ad64:	4620      	mov	r0, r4
 801ad66:	bd10      	pop	{r4, pc}
 801ad68:	402ce6b0 	.word	0x402ce6b0
 801ad6c:	bfd9cd60 	.word	0xbfd9cd60

0801ad70 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801ad70:	b510      	push	{r4, lr}
 801ad72:	4298      	cmp	r0, r3
 801ad74:	eb01 0402 	add.w	r4, r1, r2
 801ad78:	b224      	sxth	r4, r4
 801ad7a:	da25      	bge.n	801adc8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 801ad7c:	b323      	cbz	r3, 801adc8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 801ad7e:	ee07 0a90 	vmov	s15, r0
 801ad82:	ee06 1a10 	vmov	s12, r1
 801ad86:	ed9f 5a11 	vldr	s10, [pc, #68]	@ 801adcc <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x5c>
 801ad8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ad8e:	ee07 3a90 	vmov	s15, r3
 801ad92:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801ad96:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 801add0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x60>
 801ad9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ad9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ada2:	ee06 2a90 	vmov	s13, r2
 801ada6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801adaa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801adae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801adb2:	eea7 6a85 	vfma.f32	s12, s15, s10
 801adb6:	ee67 5aa7 	vmul.f32	s11, s15, s15
 801adba:	eea5 7a86 	vfma.f32	s14, s11, s12
 801adbe:	eea6 0a87 	vfma.f32	s0, s13, s14
 801adc2:	f7ff ff93 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801adc6:	4604      	mov	r4, r0
 801adc8:	4620      	mov	r0, r4
 801adca:	bd10      	pop	{r4, pc}
 801adcc:	402ce6b0 	.word	0x402ce6b0
 801add0:	3fd9cd60 	.word	0x3fd9cd60

0801add4 <_ZN8touchgfx15EasingEquations13backEaseInOutEtsst>:
 801add4:	b510      	push	{r4, lr}
 801add6:	4298      	cmp	r0, r3
 801add8:	eb01 0402 	add.w	r4, r1, r2
 801addc:	b224      	sxth	r4, r4
 801adde:	da2e      	bge.n	801ae3e <_ZN8touchgfx15EasingEquations13backEaseInOutEtsst+0x6a>
 801ade0:	b36b      	cbz	r3, 801ae3e <_ZN8touchgfx15EasingEquations13backEaseInOutEtsst+0x6a>
 801ade2:	ee07 0a90 	vmov	s15, r0
 801ade6:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801adea:	ed9f 5a1e 	vldr	s10, [pc, #120]	@ 801ae64 <_ZN8touchgfx15EasingEquations13backEaseInOutEtsst+0x90>
 801adee:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801adf2:	ee07 3a90 	vmov	s15, r3
 801adf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801adfa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801adfe:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801ae02:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801ae06:	ee06 1a90 	vmov	s13, r1
 801ae0a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801ae0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ae12:	ee07 2a90 	vmov	s15, r2
 801ae16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae1e:	d510      	bpl.n	801ae42 <_ZN8touchgfx15EasingEquations13backEaseInOutEtsst+0x6e>
 801ae20:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 801ae68 <_ZN8touchgfx15EasingEquations13backEaseInOutEtsst+0x94>
 801ae24:	ee67 6a07 	vmul.f32	s13, s14, s14
 801ae28:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801ae2c:	eea7 6a05 	vfma.f32	s12, s14, s10
 801ae30:	ee26 7a86 	vmul.f32	s14, s13, s12
 801ae34:	eea7 0a87 	vfma.f32	s0, s15, s14
 801ae38:	f7ff ff58 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801ae3c:	4604      	mov	r4, r0
 801ae3e:	4620      	mov	r0, r4
 801ae40:	bd10      	pop	{r4, pc}
 801ae42:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801ae46:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 801ae6c <_ZN8touchgfx15EasingEquations13backEaseInOutEtsst+0x98>
 801ae4a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801ae4e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ae52:	eea7 6a05 	vfma.f32	s12, s14, s10
 801ae56:	ee67 5a07 	vmul.f32	s11, s14, s14
 801ae5a:	eee5 6a86 	vfma.f32	s13, s11, s12
 801ae5e:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801ae62:	e7e9      	b.n	801ae38 <_ZN8touchgfx15EasingEquations13backEaseInOutEtsst+0x64>
 801ae64:	406612ff 	.word	0x406612ff
 801ae68:	c02612ff 	.word	0xc02612ff
 801ae6c:	402612ff 	.word	0x402612ff

0801ae70 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst>:
 801ae70:	b510      	push	{r4, lr}
 801ae72:	4298      	cmp	r0, r3
 801ae74:	eb01 0402 	add.w	r4, r1, r2
 801ae78:	b224      	sxth	r4, r4
 801ae7a:	da24      	bge.n	801aec6 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0x56>
 801ae7c:	b31b      	cbz	r3, 801aec6 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0x56>
 801ae7e:	ee07 0a90 	vmov	s15, r0
 801ae82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ae86:	ee07 3a90 	vmov	s15, r3
 801ae8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ae8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ae92:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 801af24 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0xb4>
 801ae96:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ae9a:	ee07 2a10 	vmov	s14, r2
 801ae9e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801aea2:	ee07 1a10 	vmov	s14, r1
 801aea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeaa:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801aeae:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 801af28 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0xb8>
 801aeb2:	d50a      	bpl.n	801aeca <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0x5a>
 801aeb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 801aeb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801aebc:	eea6 0aa7 	vfma.f32	s0, s13, s15
 801aec0:	f7ff ff14 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801aec4:	4604      	mov	r4, r0
 801aec6:	4620      	mov	r0, r4
 801aec8:	bd10      	pop	{r4, pc}
 801aeca:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801af2c <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0xbc>
 801aece:	eef4 7ac6 	vcmpe.f32	s15, s12
 801aed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aed6:	d50c      	bpl.n	801aef2 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0x82>
 801aed8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801af30 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0xc0>
 801aedc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801aee0:	eeb6 6a08 	vmov.f32	s12, #104	@ 0x3f400000  0.750
 801aee4:	ee27 7a87 	vmul.f32	s14, s15, s14
 801aee8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801aeec:	eef0 7a46 	vmov.f32	s15, s12
 801aef0:	e7e4      	b.n	801aebc <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0x4c>
 801aef2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801af34 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0xc4>
 801aef6:	eef4 7ac6 	vcmpe.f32	s15, s12
 801aefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aefe:	bf4b      	itete	mi
 801af00:	ed9f 6a0d 	vldrmi	s12, [pc, #52]	@ 801af38 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0xc8>
 801af04:	ed9f 6a0d 	vldrpl	s12, [pc, #52]	@ 801af3c <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0xcc>
 801af08:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 801af0c:	ee77 7ac6 	vsubpl.f32	s15, s15, s12
 801af10:	bf53      	iteet	pl
 801af12:	ed9f 6a0b 	vldrpl	s12, [pc, #44]	@ 801af40 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0xd0>
 801af16:	eeb6 6a0e 	vmovmi.f32	s12, #110	@ 0x3f700000  0.9375000
 801af1a:	ee27 7a87 	vmulmi.f32	s14, s15, s14
 801af1e:	ee27 7a87 	vmulpl.f32	s14, s15, s14
 801af22:	e7e1      	b.n	801aee8 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst+0x78>
 801af24:	3eba2e8c 	.word	0x3eba2e8c
 801af28:	40f20000 	.word	0x40f20000
 801af2c:	3f3a2e8c 	.word	0x3f3a2e8c
 801af30:	3f0ba2e9 	.word	0x3f0ba2e9
 801af34:	3f68ba2f 	.word	0x3f68ba2f
 801af38:	3f51745d 	.word	0x3f51745d
 801af3c:	3f745d17 	.word	0x3f745d17
 801af40:	3f7c0000 	.word	0x3f7c0000

0801af44 <_ZN8touchgfx15EasingEquations12bounceEaseInEtsst>:
 801af44:	b570      	push	{r4, r5, r6, lr}
 801af46:	4411      	add	r1, r2
 801af48:	4606      	mov	r6, r0
 801af4a:	b28c      	uxth	r4, r1
 801af4c:	429e      	cmp	r6, r3
 801af4e:	b220      	sxth	r0, r4
 801af50:	da07      	bge.n	801af62 <_ZN8touchgfx15EasingEquations12bounceEaseInEtsst+0x1e>
 801af52:	b133      	cbz	r3, 801af62 <_ZN8touchgfx15EasingEquations12bounceEaseInEtsst+0x1e>
 801af54:	1b98      	subs	r0, r3, r6
 801af56:	2100      	movs	r1, #0
 801af58:	b280      	uxth	r0, r0
 801af5a:	f7ff ff89 	bl	801ae70 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst>
 801af5e:	1a20      	subs	r0, r4, r0
 801af60:	b200      	sxth	r0, r0
 801af62:	bd70      	pop	{r4, r5, r6, pc}

0801af64 <_ZN8touchgfx15EasingEquations15bounceEaseInOutEtsst>:
 801af64:	b570      	push	{r4, r5, r6, lr}
 801af66:	4604      	mov	r4, r0
 801af68:	1888      	adds	r0, r1, r2
 801af6a:	4615      	mov	r5, r2
 801af6c:	429c      	cmp	r4, r3
 801af6e:	b200      	sxth	r0, r0
 801af70:	ed2d 8b02 	vpush	{d8}
 801af74:	da24      	bge.n	801afc0 <_ZN8touchgfx15EasingEquations15bounceEaseInOutEtsst+0x5c>
 801af76:	b31b      	cbz	r3, 801afc0 <_ZN8touchgfx15EasingEquations15bounceEaseInOutEtsst+0x5c>
 801af78:	ee07 4a90 	vmov	s15, r4
 801af7c:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 801af80:	0060      	lsls	r0, r4, #1
 801af82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801af86:	ee07 3a90 	vmov	s15, r3
 801af8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af8e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801af92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801af96:	ee07 1a90 	vmov	s15, r1
 801af9a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801af9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afa2:	d510      	bpl.n	801afc6 <_ZN8touchgfx15EasingEquations15bounceEaseInOutEtsst+0x62>
 801afa4:	b280      	uxth	r0, r0
 801afa6:	2100      	movs	r1, #0
 801afa8:	f7ff ffcc 	bl	801af44 <_ZN8touchgfx15EasingEquations12bounceEaseInEtsst>
 801afac:	ee07 0a90 	vmov	s15, r0
 801afb0:	eeb0 0a48 	vmov.f32	s0, s16
 801afb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afb8:	eea7 0aa8 	vfma.f32	s0, s15, s17
 801afbc:	f7ff fe96 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801afc0:	ecbd 8b02 	vpop	{d8}
 801afc4:	bd70      	pop	{r4, r5, r6, pc}
 801afc6:	1ac0      	subs	r0, r0, r3
 801afc8:	2100      	movs	r1, #0
 801afca:	b280      	uxth	r0, r0
 801afcc:	f7ff ff50 	bl	801ae70 <_ZN8touchgfx15EasingEquations13bounceEaseOutEtsst>
 801afd0:	ee07 5a10 	vmov	s14, r5
 801afd4:	ee07 0a90 	vmov	s15, r0
 801afd8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801afdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afe0:	ee20 0a28 	vmul.f32	s0, s0, s17
 801afe4:	eea7 0aa8 	vfma.f32	s0, s15, s17
 801afe8:	ee30 0a08 	vadd.f32	s0, s0, s16
 801afec:	e7e6      	b.n	801afbc <_ZN8touchgfx15EasingEquations15bounceEaseInOutEtsst+0x58>

0801afee <_ZN8touchgfx15EasingEquations10circEaseInEtsst>:
 801afee:	b510      	push	{r4, lr}
 801aff0:	4298      	cmp	r0, r3
 801aff2:	4614      	mov	r4, r2
 801aff4:	440a      	add	r2, r1
 801aff6:	ed2d 8b02 	vpush	{d8}
 801affa:	b212      	sxth	r2, r2
 801affc:	b082      	sub	sp, #8
 801affe:	da26      	bge.n	801b04e <_ZN8touchgfx15EasingEquations10circEaseInEtsst+0x60>
 801b000:	b32b      	cbz	r3, 801b04e <_ZN8touchgfx15EasingEquations10circEaseInEtsst+0x60>
 801b002:	ee07 0a90 	vmov	s15, r0
 801b006:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801b00a:	9101      	str	r1, [sp, #4]
 801b00c:	4264      	negs	r4, r4
 801b00e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b012:	ee07 3a90 	vmov	s15, r3
 801b016:	eeb0 0a48 	vmov.f32	s0, s16
 801b01a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b01e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b022:	eea6 0ae6 	vfms.f32	s0, s13, s13
 801b026:	f003 fdfd 	bl	801ec24 <sqrtf>
 801b02a:	9901      	ldr	r1, [sp, #4]
 801b02c:	ee07 4a90 	vmov	s15, r4
 801b030:	ee30 0a48 	vsub.f32	s0, s0, s16
 801b034:	ee07 1a10 	vmov	s14, r1
 801b038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b03c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b040:	eea7 7a80 	vfma.f32	s14, s15, s0
 801b044:	eeb0 0a47 	vmov.f32	s0, s14
 801b048:	f7ff fe50 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b04c:	4602      	mov	r2, r0
 801b04e:	4610      	mov	r0, r2
 801b050:	b002      	add	sp, #8
 801b052:	ecbd 8b02 	vpop	{d8}
 801b056:	bd10      	pop	{r4, pc}

0801b058 <_ZN8touchgfx15EasingEquations11circEaseOutEtsst>:
 801b058:	b513      	push	{r0, r1, r4, lr}
 801b05a:	4298      	cmp	r0, r3
 801b05c:	eb01 0402 	add.w	r4, r1, r2
 801b060:	b224      	sxth	r4, r4
 801b062:	da25      	bge.n	801b0b0 <_ZN8touchgfx15EasingEquations11circEaseOutEtsst+0x58>
 801b064:	b323      	cbz	r3, 801b0b0 <_ZN8touchgfx15EasingEquations11circEaseOutEtsst+0x58>
 801b066:	ee07 0a90 	vmov	s15, r0
 801b06a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b072:	ee07 3a90 	vmov	s15, r3
 801b076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b07a:	e88d 0006 	stmia.w	sp, {r1, r2}
 801b07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b082:	ee77 7a40 	vsub.f32	s15, s14, s0
 801b086:	eea7 0ae7 	vfms.f32	s0, s15, s15
 801b08a:	f003 fdcb 	bl	801ec24 <sqrtf>
 801b08e:	9a01      	ldr	r2, [sp, #4]
 801b090:	9900      	ldr	r1, [sp, #0]
 801b092:	ee07 2a90 	vmov	s15, r2
 801b096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b09a:	ee07 1a90 	vmov	s15, r1
 801b09e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0a2:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b0a6:	eeb0 0a67 	vmov.f32	s0, s15
 801b0aa:	f7ff fe1f 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b0ae:	4604      	mov	r4, r0
 801b0b0:	4620      	mov	r0, r4
 801b0b2:	b002      	add	sp, #8
 801b0b4:	bd10      	pop	{r4, pc}

0801b0b6 <_ZN8touchgfx15EasingEquations13circEaseInOutEtsst>:
 801b0b6:	b510      	push	{r4, lr}
 801b0b8:	4298      	cmp	r0, r3
 801b0ba:	4614      	mov	r4, r2
 801b0bc:	440a      	add	r2, r1
 801b0be:	ed2d 8b04 	vpush	{d8-d9}
 801b0c2:	b212      	sxth	r2, r2
 801b0c4:	da2f      	bge.n	801b126 <_ZN8touchgfx15EasingEquations13circEaseInOutEtsst+0x70>
 801b0c6:	b373      	cbz	r3, 801b126 <_ZN8touchgfx15EasingEquations13circEaseInOutEtsst+0x70>
 801b0c8:	ee07 0a90 	vmov	s15, r0
 801b0cc:	eeb6 9a00 	vmov.f32	s18, #96	@ 0x3f000000  0.5
 801b0d0:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801b0d4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801b0d8:	ee07 3a90 	vmov	s15, r3
 801b0dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b0e0:	ee07 1a90 	vmov	s15, r1
 801b0e4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 801b0e8:	ee66 6a89 	vmul.f32	s13, s13, s18
 801b0ec:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b0f0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801b0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0f8:	d519      	bpl.n	801b12e <_ZN8touchgfx15EasingEquations13circEaseInOutEtsst+0x78>
 801b0fa:	eeb0 0a48 	vmov.f32	s0, s16
 801b0fe:	eea7 0a47 	vfms.f32	s0, s14, s14
 801b102:	f003 fd8f 	bl	801ec24 <sqrtf>
 801b106:	4263      	negs	r3, r4
 801b108:	ee30 0a48 	vsub.f32	s0, s0, s16
 801b10c:	ee07 3a90 	vmov	s15, r3
 801b110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b114:	ee67 7a89 	vmul.f32	s15, s15, s18
 801b118:	eee7 8a80 	vfma.f32	s17, s15, s0
 801b11c:	eeb0 0a68 	vmov.f32	s0, s17
 801b120:	f7ff fde4 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b124:	4602      	mov	r2, r0
 801b126:	4610      	mov	r0, r2
 801b128:	ecbd 8b04 	vpop	{d8-d9}
 801b12c:	bd10      	pop	{r4, pc}
 801b12e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801b132:	eeb0 0a48 	vmov.f32	s0, s16
 801b136:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b13a:	eea7 0a47 	vfms.f32	s0, s14, s14
 801b13e:	f003 fd71 	bl	801ec24 <sqrtf>
 801b142:	ee07 4a90 	vmov	s15, r4
 801b146:	ee30 0a08 	vadd.f32	s0, s0, s16
 801b14a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b14e:	ee67 7a89 	vmul.f32	s15, s15, s18
 801b152:	e7e1      	b.n	801b118 <_ZN8touchgfx15EasingEquations13circEaseInOutEtsst+0x62>

0801b154 <_ZN8touchgfx15EasingEquations11cubicEaseInEtsst>:
 801b154:	b510      	push	{r4, lr}
 801b156:	4298      	cmp	r0, r3
 801b158:	eb01 0402 	add.w	r4, r1, r2
 801b15c:	b224      	sxth	r4, r4
 801b15e:	da1b      	bge.n	801b198 <_ZN8touchgfx15EasingEquations11cubicEaseInEtsst+0x44>
 801b160:	b1d3      	cbz	r3, 801b198 <_ZN8touchgfx15EasingEquations11cubicEaseInEtsst+0x44>
 801b162:	ee07 0a90 	vmov	s15, r0
 801b166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b16a:	ee07 3a90 	vmov	s15, r3
 801b16e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b172:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b176:	ee07 1a90 	vmov	s15, r1
 801b17a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b17e:	ee07 2a90 	vmov	s15, r2
 801b182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b186:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b18a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b18e:	eea6 0aa7 	vfma.f32	s0, s13, s15
 801b192:	f7ff fdab 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b196:	4604      	mov	r4, r0
 801b198:	4620      	mov	r0, r4
 801b19a:	bd10      	pop	{r4, pc}

0801b19c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801b19c:	b510      	push	{r4, lr}
 801b19e:	4298      	cmp	r0, r3
 801b1a0:	eb01 0402 	add.w	r4, r1, r2
 801b1a4:	b224      	sxth	r4, r4
 801b1a6:	da1f      	bge.n	801b1e8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801b1a8:	b1f3      	cbz	r3, 801b1e8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801b1aa:	ee07 0a90 	vmov	s15, r0
 801b1ae:	ee06 1a10 	vmov	s12, r1
 801b1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b1b6:	ee07 3a90 	vmov	s15, r3
 801b1ba:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801b1be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b1c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b1c6:	ee06 2a90 	vmov	s13, r2
 801b1ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b1ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b1d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b1d6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801b1da:	eea7 7a86 	vfma.f32	s14, s15, s12
 801b1de:	eea6 0a87 	vfma.f32	s0, s13, s14
 801b1e2:	f7ff fd83 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b1e6:	4604      	mov	r4, r0
 801b1e8:	4620      	mov	r0, r4
 801b1ea:	bd10      	pop	{r4, pc}

0801b1ec <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst>:
 801b1ec:	b510      	push	{r4, lr}
 801b1ee:	4298      	cmp	r0, r3
 801b1f0:	eb01 0402 	add.w	r4, r1, r2
 801b1f4:	b224      	sxth	r4, r4
 801b1f6:	da28      	bge.n	801b24a <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0x5e>
 801b1f8:	b33b      	cbz	r3, 801b24a <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0x5e>
 801b1fa:	ee07 0a90 	vmov	s15, r0
 801b1fe:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801b202:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801b206:	ee07 3a90 	vmov	s15, r3
 801b20a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b20e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b212:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801b216:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b21a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b21e:	ee07 1a90 	vmov	s15, r1
 801b222:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b226:	ee07 2a90 	vmov	s15, r2
 801b22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b22e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b232:	d50c      	bpl.n	801b24e <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0x62>
 801b234:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b238:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b23c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b240:	eea7 0a27 	vfma.f32	s0, s14, s15
 801b244:	f7ff fd52 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b248:	4604      	mov	r4, r0
 801b24a:	4620      	mov	r0, r4
 801b24c:	bd10      	pop	{r4, pc}
 801b24e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801b252:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b256:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b25a:	ee27 6a07 	vmul.f32	s12, s14, s14
 801b25e:	eee7 6a06 	vfma.f32	s13, s14, s12
 801b262:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801b266:	e7ed      	b.n	801b244 <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0x58>

0801b268 <_ZN8touchgfx15EasingEquations13elasticEaseInEtsst>:
 801b268:	b538      	push	{r3, r4, r5, lr}
 801b26a:	4604      	mov	r4, r0
 801b26c:	440a      	add	r2, r1
 801b26e:	460d      	mov	r5, r1
 801b270:	429c      	cmp	r4, r3
 801b272:	b210      	sxth	r0, r2
 801b274:	ed2d 8b02 	vpush	{d8}
 801b278:	da27      	bge.n	801b2ca <_ZN8touchgfx15EasingEquations13elasticEaseInEtsst+0x62>
 801b27a:	b333      	cbz	r3, 801b2ca <_ZN8touchgfx15EasingEquations13elasticEaseInEtsst+0x62>
 801b27c:	b344      	cbz	r4, 801b2d0 <_ZN8touchgfx15EasingEquations13elasticEaseInEtsst+0x68>
 801b27e:	429c      	cmp	r4, r3
 801b280:	d023      	beq.n	801b2ca <_ZN8touchgfx15EasingEquations13elasticEaseInEtsst+0x62>
 801b282:	ee07 4a90 	vmov	s15, r4
 801b286:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801b28a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b28e:	ee07 3a90 	vmov	s15, r3
 801b292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b296:	ee87 8a27 	vdiv.f32	s16, s14, s15
 801b29a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801b2d4 <_ZN8touchgfx15EasingEquations13elasticEaseInEtsst+0x6c>
 801b29e:	ee38 0a28 	vadd.f32	s0, s16, s17
 801b2a2:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b2a6:	f003 fd1f 	bl	801ece8 <sinf>
 801b2aa:	eefa 7a04 	vmov.f32	s15, #164	@ 0xc1200000 -10.0
 801b2ae:	ee68 7a27 	vmul.f32	s15, s16, s15
 801b2b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b2b6:	eee0 8a27 	vfma.f32	s17, s0, s15
 801b2ba:	ee07 5a90 	vmov	s15, r5
 801b2be:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b2c2:	ee38 0a80 	vadd.f32	s0, s17, s0
 801b2c6:	f7ff fd11 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b2ca:	ecbd 8b02 	vpop	{d8}
 801b2ce:	bd38      	pop	{r3, r4, r5, pc}
 801b2d0:	4608      	mov	r0, r1
 801b2d2:	e7fa      	b.n	801b2ca <_ZN8touchgfx15EasingEquations13elasticEaseInEtsst+0x62>
 801b2d4:	c1a35ce2 	.word	0xc1a35ce2

0801b2d8 <_ZN8touchgfx15EasingEquations14elasticEaseOutEtsst>:
 801b2d8:	b530      	push	{r4, r5, lr}
 801b2da:	4605      	mov	r5, r0
 801b2dc:	1888      	adds	r0, r1, r2
 801b2de:	460c      	mov	r4, r1
 801b2e0:	429d      	cmp	r5, r3
 801b2e2:	b200      	sxth	r0, r0
 801b2e4:	ed2d 8b02 	vpush	{d8}
 801b2e8:	b083      	sub	sp, #12
 801b2ea:	9201      	str	r2, [sp, #4]
 801b2ec:	da2c      	bge.n	801b348 <_ZN8touchgfx15EasingEquations14elasticEaseOutEtsst+0x70>
 801b2ee:	b35b      	cbz	r3, 801b348 <_ZN8touchgfx15EasingEquations14elasticEaseOutEtsst+0x70>
 801b2f0:	b375      	cbz	r5, 801b350 <_ZN8touchgfx15EasingEquations14elasticEaseOutEtsst+0x78>
 801b2f2:	429d      	cmp	r5, r3
 801b2f4:	d028      	beq.n	801b348 <_ZN8touchgfx15EasingEquations14elasticEaseOutEtsst+0x70>
 801b2f6:	ee07 5a90 	vmov	s15, r5
 801b2fa:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 801b354 <_ZN8touchgfx15EasingEquations14elasticEaseOutEtsst+0x7c>
 801b2fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b302:	ee07 3a90 	vmov	s15, r3
 801b306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b30a:	ee87 8a27 	vdiv.f32	s16, s14, s15
 801b30e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b312:	f003 fce9 	bl	801ece8 <sinf>
 801b316:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b31a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 801b31e:	9a01      	ldr	r2, [sp, #4]
 801b320:	ee78 7a67 	vsub.f32	s15, s16, s15
 801b324:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b328:	ee07 4a10 	vmov	s14, r4
 801b32c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b330:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b334:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b338:	ee07 2a90 	vmov	s15, r2
 801b33c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b340:	ee37 0a00 	vadd.f32	s0, s14, s0
 801b344:	f7ff fcd2 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b348:	b003      	add	sp, #12
 801b34a:	ecbd 8b02 	vpop	{d8}
 801b34e:	bd30      	pop	{r4, r5, pc}
 801b350:	4608      	mov	r0, r1
 801b352:	e7f9      	b.n	801b348 <_ZN8touchgfx15EasingEquations14elasticEaseOutEtsst+0x70>
 801b354:	41a35ce2 	.word	0x41a35ce2

0801b358 <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst>:
 801b358:	b530      	push	{r4, r5, lr}
 801b35a:	4605      	mov	r5, r0
 801b35c:	188c      	adds	r4, r1, r2
 801b35e:	429d      	cmp	r5, r3
 801b360:	b220      	sxth	r0, r4
 801b362:	ed2d 8b06 	vpush	{d8-d10}
 801b366:	b083      	sub	sp, #12
 801b368:	da35      	bge.n	801b3d6 <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst+0x7e>
 801b36a:	b3a3      	cbz	r3, 801b3d6 <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst+0x7e>
 801b36c:	2d00      	cmp	r5, #0
 801b36e:	d055      	beq.n	801b41c <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst+0xc4>
 801b370:	429d      	cmp	r5, r3
 801b372:	d030      	beq.n	801b3d6 <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst+0x7e>
 801b374:	ee07 5a90 	vmov	s15, r5
 801b378:	eef6 aa00 	vmov.f32	s21, #96	@ 0x3f000000  0.5
 801b37c:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 801b380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b384:	ee07 3a90 	vmov	s15, r3
 801b388:	eeff 8a00 	vmov.f32	s17, #240	@ 0xbf800000 -1.0
 801b38c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b394:	ee07 1a10 	vmov	s14, r1
 801b398:	eeb8 9ac7 	vcvt.f32.s32	s18, s14
 801b39c:	eef4 7aea 	vcmpe.f32	s15, s21
 801b3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3a4:	d51b      	bpl.n	801b3de <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst+0x86>
 801b3a6:	ee37 8aa7 	vadd.f32	s16, s15, s15
 801b3aa:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 801b420 <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst+0xc8>
 801b3ae:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b3b2:	f003 fc99 	bl	801ece8 <sinf>
 801b3b6:	ee78 7a4a 	vsub.f32	s15, s16, s20
 801b3ba:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 801b3be:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b3c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b3c6:	eee0 8a27 	vfma.f32	s17, s0, s15
 801b3ca:	eeb0 0a49 	vmov.f32	s0, s18
 801b3ce:	eea8 0aaa 	vfma.f32	s0, s17, s21
 801b3d2:	f7ff fc8b 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b3d6:	b003      	add	sp, #12
 801b3d8:	ecbd 8b06 	vpop	{d8-d10}
 801b3dc:	bd30      	pop	{r4, r5, pc}
 801b3de:	eef0 9a00 	vmov.f32	s19, #0	@ 0x40000000  2.0
 801b3e2:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 801b424 <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst+0xcc>
 801b3e6:	9201      	str	r2, [sp, #4]
 801b3e8:	eee7 8aa9 	vfma.f32	s17, s15, s19
 801b3ec:	ee38 aa8a 	vadd.f32	s20, s17, s20
 801b3f0:	ee2a 0a00 	vmul.f32	s0, s20, s0
 801b3f4:	f003 fc78 	bl	801ece8 <sinf>
 801b3f8:	eefa 7a04 	vmov.f32	s15, #164	@ 0xc1200000 -10.0
 801b3fc:	9a01      	ldr	r2, [sp, #4]
 801b3fe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801b402:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b406:	eee0 9a27 	vfma.f32	s19, s0, s15
 801b40a:	ee07 2a90 	vmov	s15, r2
 801b40e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b412:	eea9 9aaa 	vfma.f32	s18, s19, s21
 801b416:	ee39 0a00 	vadd.f32	s0, s18, s0
 801b41a:	e7da      	b.n	801b3d2 <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst+0x7a>
 801b41c:	4608      	mov	r0, r1
 801b41e:	e7da      	b.n	801b3d6 <_ZN8touchgfx15EasingEquations16elasticEaseInOutEtsst+0x7e>
 801b420:	41a35ce2 	.word	0x41a35ce2
 801b424:	c1a35ce2 	.word	0xc1a35ce2

0801b428 <_ZN8touchgfx15EasingEquations10expoEaseInEtsst>:
 801b428:	b510      	push	{r4, lr}
 801b42a:	4604      	mov	r4, r0
 801b42c:	1888      	adds	r0, r1, r2
 801b42e:	429c      	cmp	r4, r3
 801b430:	b200      	sxth	r0, r0
 801b432:	ed2d 8b02 	vpush	{d8}
 801b436:	b082      	sub	sp, #8
 801b438:	da09      	bge.n	801b44e <_ZN8touchgfx15EasingEquations10expoEaseInEtsst+0x26>
 801b43a:	b143      	cbz	r3, 801b44e <_ZN8touchgfx15EasingEquations10expoEaseInEtsst+0x26>
 801b43c:	ee07 1a90 	vmov	s15, r1
 801b440:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801b444:	b93c      	cbnz	r4, 801b456 <_ZN8touchgfx15EasingEquations10expoEaseInEtsst+0x2e>
 801b446:	eeb0 0a48 	vmov.f32	s0, s16
 801b44a:	f7ff fc4f 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b44e:	b002      	add	sp, #8
 801b450:	ecbd 8b02 	vpop	{d8}
 801b454:	bd10      	pop	{r4, pc}
 801b456:	ee07 4a90 	vmov	s15, r4
 801b45a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801b45e:	9201      	str	r2, [sp, #4]
 801b460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b464:	ee07 3a90 	vmov	s15, r3
 801b468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b46c:	eec7 0a27 	vdiv.f32	s1, s14, s15
 801b470:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b474:	ee70 7ae7 	vsub.f32	s15, s1, s15
 801b478:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 801b47c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801b480:	f003 fb79 	bl	801eb76 <powf>
 801b484:	9a01      	ldr	r2, [sp, #4]
 801b486:	ee07 2a90 	vmov	s15, r2
 801b48a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b48e:	eea7 8a80 	vfma.f32	s16, s15, s0
 801b492:	e7d8      	b.n	801b446 <_ZN8touchgfx15EasingEquations10expoEaseInEtsst+0x1e>

0801b494 <_ZN8touchgfx15EasingEquations11expoEaseOutEtsst>:
 801b494:	b513      	push	{r0, r1, r4, lr}
 801b496:	4298      	cmp	r0, r3
 801b498:	eb01 0402 	add.w	r4, r1, r2
 801b49c:	e88d 0006 	stmia.w	sp, {r1, r2}
 801b4a0:	b224      	sxth	r4, r4
 801b4a2:	da27      	bge.n	801b4f4 <_ZN8touchgfx15EasingEquations11expoEaseOutEtsst+0x60>
 801b4a4:	b333      	cbz	r3, 801b4f4 <_ZN8touchgfx15EasingEquations11expoEaseOutEtsst+0x60>
 801b4a6:	ee07 0a90 	vmov	s15, r0
 801b4aa:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801b4ae:	eef8 0a67 	vcvt.f32.u32	s1, s15
 801b4b2:	eefa 7a04 	vmov.f32	s15, #164	@ 0xc1200000 -10.0
 801b4b6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801b4ba:	ee07 3a90 	vmov	s15, r3
 801b4be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b4c2:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 801b4c6:	f003 fb56 	bl	801eb76 <powf>
 801b4ca:	9a01      	ldr	r2, [sp, #4]
 801b4cc:	9900      	ldr	r1, [sp, #0]
 801b4ce:	ee07 2a90 	vmov	s15, r2
 801b4d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b4d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b4da:	ee07 1a90 	vmov	s15, r1
 801b4de:	ee36 0ac0 	vsub.f32	s0, s13, s0
 801b4e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b4e6:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b4ea:	eeb0 0a67 	vmov.f32	s0, s15
 801b4ee:	f7ff fbfd 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b4f2:	4604      	mov	r4, r0
 801b4f4:	4620      	mov	r0, r4
 801b4f6:	b002      	add	sp, #8
 801b4f8:	bd10      	pop	{r4, pc}

0801b4fa <_ZN8touchgfx15EasingEquations13expoEaseInOutEtsst>:
 801b4fa:	b538      	push	{r3, r4, r5, lr}
 801b4fc:	4605      	mov	r5, r0
 801b4fe:	188c      	adds	r4, r1, r2
 801b500:	429d      	cmp	r5, r3
 801b502:	b220      	sxth	r0, r4
 801b504:	ed2d 8b04 	vpush	{d8-d9}
 801b508:	da33      	bge.n	801b572 <_ZN8touchgfx15EasingEquations13expoEaseInOutEtsst+0x78>
 801b50a:	b393      	cbz	r3, 801b572 <_ZN8touchgfx15EasingEquations13expoEaseInOutEtsst+0x78>
 801b50c:	2d00      	cmp	r5, #0
 801b50e:	d042      	beq.n	801b596 <_ZN8touchgfx15EasingEquations13expoEaseInOutEtsst+0x9c>
 801b510:	429d      	cmp	r5, r3
 801b512:	d02e      	beq.n	801b572 <_ZN8touchgfx15EasingEquations13expoEaseInOutEtsst+0x78>
 801b514:	ee07 5a90 	vmov	s15, r5
 801b518:	eeb6 9a00 	vmov.f32	s18, #96	@ 0x3f000000  0.5
 801b51c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b520:	ee07 3a90 	vmov	s15, r3
 801b524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b528:	ee67 7a89 	vmul.f32	s15, s15, s18
 801b52c:	eec7 0a27 	vdiv.f32	s1, s14, s15
 801b530:	ee07 2a10 	vmov	s14, r2
 801b534:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b538:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 801b53c:	ee07 1a10 	vmov	s14, r1
 801b540:	eef8 8ac7 	vcvt.f32.s32	s17, s14
 801b544:	eef4 0ae7 	vcmpe.f32	s1, s15
 801b548:	ee70 7ae7 	vsub.f32	s15, s1, s15
 801b54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b550:	d512      	bpl.n	801b578 <_ZN8touchgfx15EasingEquations13expoEaseInOutEtsst+0x7e>
 801b552:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 801b556:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801b55a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801b55e:	f003 fb0a 	bl	801eb76 <powf>
 801b562:	ee28 8a09 	vmul.f32	s16, s16, s18
 801b566:	eee8 8a00 	vfma.f32	s17, s16, s0
 801b56a:	eeb0 0a68 	vmov.f32	s0, s17
 801b56e:	f7ff fbbd 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b572:	ecbd 8b04 	vpop	{d8-d9}
 801b576:	bd38      	pop	{r3, r4, r5, pc}
 801b578:	eefa 0a04 	vmov.f32	s1, #164	@ 0xc1200000 -10.0
 801b57c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801b580:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801b584:	f003 faf7 	bl	801eb76 <powf>
 801b588:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801b58c:	ee28 8a09 	vmul.f32	s16, s16, s18
 801b590:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b594:	e7e7      	b.n	801b566 <_ZN8touchgfx15EasingEquations13expoEaseInOutEtsst+0x6c>
 801b596:	4608      	mov	r0, r1
 801b598:	e7eb      	b.n	801b572 <_ZN8touchgfx15EasingEquations13expoEaseInOutEtsst+0x78>

0801b59a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801b59a:	b510      	push	{r4, lr}
 801b59c:	4298      	cmp	r0, r3
 801b59e:	eb01 0402 	add.w	r4, r1, r2
 801b5a2:	b224      	sxth	r4, r4
 801b5a4:	da19      	bge.n	801b5da <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x40>
 801b5a6:	b1c3      	cbz	r3, 801b5da <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x40>
 801b5a8:	ee07 2a90 	vmov	s15, r2
 801b5ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b5b0:	ee07 0a90 	vmov	s15, r0
 801b5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b5b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b5bc:	ee07 3a10 	vmov	s14, r3
 801b5c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b5c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801b5c8:	ee07 1a90 	vmov	s15, r1
 801b5cc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b5d0:	ee36 0a80 	vadd.f32	s0, s13, s0
 801b5d4:	f7ff fb8a 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b5d8:	4604      	mov	r4, r0
 801b5da:	4620      	mov	r0, r4
 801b5dc:	bd10      	pop	{r4, pc}

0801b5de <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 801b5de:	f7ff bfdc 	b.w	801b59a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

0801b5e2 <_ZN8touchgfx15EasingEquations13linearEaseOutEtsst>:
 801b5e2:	f7ff bfda 	b.w	801b59a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

0801b5e6 <_ZN8touchgfx15EasingEquations15linearEaseInOutEtsst>:
 801b5e6:	f7ff bfd8 	b.w	801b59a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

0801b5ea <_ZN8touchgfx15EasingEquations10quadEaseInEtsst>:
 801b5ea:	b510      	push	{r4, lr}
 801b5ec:	4298      	cmp	r0, r3
 801b5ee:	eb01 0402 	add.w	r4, r1, r2
 801b5f2:	b224      	sxth	r4, r4
 801b5f4:	da19      	bge.n	801b62a <_ZN8touchgfx15EasingEquations10quadEaseInEtsst+0x40>
 801b5f6:	b1c3      	cbz	r3, 801b62a <_ZN8touchgfx15EasingEquations10quadEaseInEtsst+0x40>
 801b5f8:	ee07 0a90 	vmov	s15, r0
 801b5fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b600:	ee07 3a90 	vmov	s15, r3
 801b604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b608:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b60c:	ee07 1a90 	vmov	s15, r1
 801b610:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b614:	ee07 2a90 	vmov	s15, r2
 801b618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b61c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b620:	eea6 0aa7 	vfma.f32	s0, s13, s15
 801b624:	f7ff fb62 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b628:	4604      	mov	r4, r0
 801b62a:	4620      	mov	r0, r4
 801b62c:	bd10      	pop	{r4, pc}

0801b62e <_ZN8touchgfx15EasingEquations11quadEaseOutEtsst>:
 801b62e:	b510      	push	{r4, lr}
 801b630:	4298      	cmp	r0, r3
 801b632:	eb01 0402 	add.w	r4, r1, r2
 801b636:	b224      	sxth	r4, r4
 801b638:	da1e      	bge.n	801b678 <_ZN8touchgfx15EasingEquations11quadEaseOutEtsst+0x4a>
 801b63a:	b1eb      	cbz	r3, 801b678 <_ZN8touchgfx15EasingEquations11quadEaseOutEtsst+0x4a>
 801b63c:	ee07 0a90 	vmov	s15, r0
 801b640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b644:	ee07 3a90 	vmov	s15, r3
 801b648:	4253      	negs	r3, r2
 801b64a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b652:	ee06 1a90 	vmov	s13, r1
 801b656:	ee07 3a90 	vmov	s15, r3
 801b65a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801b65e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b662:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801b666:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b66a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b66e:	eea7 0a87 	vfma.f32	s0, s15, s14
 801b672:	f7ff fb3b 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b676:	4604      	mov	r4, r0
 801b678:	4620      	mov	r0, r4
 801b67a:	bd10      	pop	{r4, pc}

0801b67c <_ZN8touchgfx15EasingEquations13quadEaseInOutEtsst>:
 801b67c:	b510      	push	{r4, lr}
 801b67e:	4298      	cmp	r0, r3
 801b680:	eb01 0402 	add.w	r4, r1, r2
 801b684:	b224      	sxth	r4, r4
 801b686:	da26      	bge.n	801b6d6 <_ZN8touchgfx15EasingEquations13quadEaseInOutEtsst+0x5a>
 801b688:	b32b      	cbz	r3, 801b6d6 <_ZN8touchgfx15EasingEquations13quadEaseInOutEtsst+0x5a>
 801b68a:	ee07 0a90 	vmov	s15, r0
 801b68e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801b692:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801b696:	ee07 3a90 	vmov	s15, r3
 801b69a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b69e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b6a2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801b6a6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b6aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6ae:	ee07 1a90 	vmov	s15, r1
 801b6b2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6ba:	d50e      	bpl.n	801b6da <_ZN8touchgfx15EasingEquations13quadEaseInOutEtsst+0x5e>
 801b6bc:	ee07 2a90 	vmov	s15, r2
 801b6c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b6c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b6c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b6cc:	eea7 0a27 	vfma.f32	s0, s14, s15
 801b6d0:	f7ff fb0c 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b6d4:	4604      	mov	r4, r0
 801b6d6:	4620      	mov	r0, r4
 801b6d8:	bd10      	pop	{r4, pc}
 801b6da:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801b6de:	4253      	negs	r3, r2
 801b6e0:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 801b6e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b6e8:	ee07 3a90 	vmov	s15, r3
 801b6ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b6f0:	eee7 6a07 	vfma.f32	s13, s14, s14
 801b6f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b6f8:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801b6fc:	e7e8      	b.n	801b6d0 <_ZN8touchgfx15EasingEquations13quadEaseInOutEtsst+0x54>

0801b6fe <_ZN8touchgfx15EasingEquations11quartEaseInEtsst>:
 801b6fe:	b510      	push	{r4, lr}
 801b700:	4298      	cmp	r0, r3
 801b702:	eb01 0402 	add.w	r4, r1, r2
 801b706:	b224      	sxth	r4, r4
 801b708:	da1d      	bge.n	801b746 <_ZN8touchgfx15EasingEquations11quartEaseInEtsst+0x48>
 801b70a:	b1e3      	cbz	r3, 801b746 <_ZN8touchgfx15EasingEquations11quartEaseInEtsst+0x48>
 801b70c:	ee07 0a90 	vmov	s15, r0
 801b710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b714:	ee07 3a90 	vmov	s15, r3
 801b718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b71c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b720:	ee07 1a90 	vmov	s15, r1
 801b724:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b728:	ee07 2a90 	vmov	s15, r2
 801b72c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b730:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b734:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b738:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b73c:	eea7 0a27 	vfma.f32	s0, s14, s15
 801b740:	f7ff fad4 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b744:	4604      	mov	r4, r0
 801b746:	4620      	mov	r0, r4
 801b748:	bd10      	pop	{r4, pc}

0801b74a <_ZN8touchgfx15EasingEquations12quartEaseOutEtsst>:
 801b74a:	b510      	push	{r4, lr}
 801b74c:	4298      	cmp	r0, r3
 801b74e:	eb01 0402 	add.w	r4, r1, r2
 801b752:	b224      	sxth	r4, r4
 801b754:	da24      	bge.n	801b7a0 <_ZN8touchgfx15EasingEquations12quartEaseOutEtsst+0x56>
 801b756:	b31b      	cbz	r3, 801b7a0 <_ZN8touchgfx15EasingEquations12quartEaseOutEtsst+0x56>
 801b758:	ee07 0a90 	vmov	s15, r0
 801b75c:	4252      	negs	r2, r2
 801b75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b762:	ee07 3a90 	vmov	s15, r3
 801b766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b76e:	ee06 1a90 	vmov	s13, r1
 801b772:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b776:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801b77a:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 801b77e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b782:	ee07 2a90 	vmov	s15, r2
 801b786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b78a:	ee27 6a07 	vmul.f32	s12, s14, s14
 801b78e:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b792:	eee7 6a06 	vfma.f32	s13, s14, s12
 801b796:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801b79a:	f7ff faa7 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b79e:	4604      	mov	r4, r0
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	bd10      	pop	{r4, pc}

0801b7a4 <_ZN8touchgfx15EasingEquations14quartEaseInOutEtsst>:
 801b7a4:	b510      	push	{r4, lr}
 801b7a6:	4298      	cmp	r0, r3
 801b7a8:	eb01 0402 	add.w	r4, r1, r2
 801b7ac:	b224      	sxth	r4, r4
 801b7ae:	da2a      	bge.n	801b806 <_ZN8touchgfx15EasingEquations14quartEaseInOutEtsst+0x62>
 801b7b0:	b34b      	cbz	r3, 801b806 <_ZN8touchgfx15EasingEquations14quartEaseInOutEtsst+0x62>
 801b7b2:	ee07 0a90 	vmov	s15, r0
 801b7b6:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801b7ba:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801b7be:	ee07 3a90 	vmov	s15, r3
 801b7c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b7c6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b7ca:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801b7ce:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b7d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b7d6:	ee07 1a90 	vmov	s15, r1
 801b7da:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7e2:	d512      	bpl.n	801b80a <_ZN8touchgfx15EasingEquations14quartEaseInOutEtsst+0x66>
 801b7e4:	ee07 2a90 	vmov	s15, r2
 801b7e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b7f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b7f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b7f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b7fc:	eea7 0a27 	vfma.f32	s0, s14, s15
 801b800:	f7ff fa74 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b804:	4604      	mov	r4, r0
 801b806:	4620      	mov	r0, r4
 801b808:	bd10      	pop	{r4, pc}
 801b80a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801b80e:	4253      	negs	r3, r2
 801b810:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 801b814:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b818:	ee07 3a90 	vmov	s15, r3
 801b81c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b820:	ee27 6a07 	vmul.f32	s12, s14, s14
 801b824:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b828:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b82c:	eee7 6a06 	vfma.f32	s13, s14, s12
 801b830:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801b834:	e7e4      	b.n	801b800 <_ZN8touchgfx15EasingEquations14quartEaseInOutEtsst+0x5c>

0801b836 <_ZN8touchgfx15EasingEquations11quintEaseInEtsst>:
 801b836:	b510      	push	{r4, lr}
 801b838:	4298      	cmp	r0, r3
 801b83a:	eb01 0402 	add.w	r4, r1, r2
 801b83e:	b224      	sxth	r4, r4
 801b840:	da1f      	bge.n	801b882 <_ZN8touchgfx15EasingEquations11quintEaseInEtsst+0x4c>
 801b842:	b1f3      	cbz	r3, 801b882 <_ZN8touchgfx15EasingEquations11quintEaseInEtsst+0x4c>
 801b844:	ee07 0a90 	vmov	s15, r0
 801b848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b84c:	ee07 3a90 	vmov	s15, r3
 801b850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b858:	ee07 1a90 	vmov	s15, r1
 801b85c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b860:	ee07 2a90 	vmov	s15, r2
 801b864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b868:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b86c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b870:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b874:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b878:	eea7 0a27 	vfma.f32	s0, s14, s15
 801b87c:	f7ff fa36 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b880:	4604      	mov	r4, r0
 801b882:	4620      	mov	r0, r4
 801b884:	bd10      	pop	{r4, pc}

0801b886 <_ZN8touchgfx15EasingEquations12quintEaseOutEtsst>:
 801b886:	b510      	push	{r4, lr}
 801b888:	4298      	cmp	r0, r3
 801b88a:	eb01 0402 	add.w	r4, r1, r2
 801b88e:	b224      	sxth	r4, r4
 801b890:	da23      	bge.n	801b8da <_ZN8touchgfx15EasingEquations12quintEaseOutEtsst+0x54>
 801b892:	b313      	cbz	r3, 801b8da <_ZN8touchgfx15EasingEquations12quintEaseOutEtsst+0x54>
 801b894:	ee07 0a90 	vmov	s15, r0
 801b898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b89c:	ee07 3a90 	vmov	s15, r3
 801b8a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b8a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b8a8:	ee07 2a10 	vmov	s14, r2
 801b8ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b8b0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 801b8b4:	ee07 1a10 	vmov	s14, r1
 801b8b8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801b8bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b8c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801b8c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b8c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b8cc:	eee7 6a87 	vfma.f32	s13, s15, s14
 801b8d0:	eea6 0a26 	vfma.f32	s0, s12, s13
 801b8d4:	f7ff fa0a 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b8d8:	4604      	mov	r4, r0
 801b8da:	4620      	mov	r0, r4
 801b8dc:	bd10      	pop	{r4, pc}

0801b8de <_ZN8touchgfx15EasingEquations14quintEaseInOutEtsst>:
 801b8de:	b510      	push	{r4, lr}
 801b8e0:	4298      	cmp	r0, r3
 801b8e2:	eb01 0402 	add.w	r4, r1, r2
 801b8e6:	b224      	sxth	r4, r4
 801b8e8:	da2c      	bge.n	801b944 <_ZN8touchgfx15EasingEquations14quintEaseInOutEtsst+0x66>
 801b8ea:	b35b      	cbz	r3, 801b944 <_ZN8touchgfx15EasingEquations14quintEaseInOutEtsst+0x66>
 801b8ec:	ee07 0a90 	vmov	s15, r0
 801b8f0:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801b8f4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801b8f8:	ee07 3a90 	vmov	s15, r3
 801b8fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b900:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b904:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801b908:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b90c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b910:	ee07 1a90 	vmov	s15, r1
 801b914:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b918:	ee07 2a90 	vmov	s15, r2
 801b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b924:	d510      	bpl.n	801b948 <_ZN8touchgfx15EasingEquations14quintEaseInOutEtsst+0x6a>
 801b926:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b92a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b92e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b932:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b936:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b93a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801b93e:	f7ff f9d5 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b942:	4604      	mov	r4, r0
 801b944:	4620      	mov	r0, r4
 801b946:	bd10      	pop	{r4, pc}
 801b948:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801b94c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b950:	ee37 7a46 	vsub.f32	s14, s14, s12
 801b954:	ee67 6a07 	vmul.f32	s13, s14, s14
 801b958:	ee66 6a87 	vmul.f32	s13, s13, s14
 801b95c:	ee66 6a87 	vmul.f32	s13, s13, s14
 801b960:	eea7 6a26 	vfma.f32	s12, s14, s13
 801b964:	eea7 0a86 	vfma.f32	s0, s15, s12
 801b968:	e7e9      	b.n	801b93e <_ZN8touchgfx15EasingEquations14quintEaseInOutEtsst+0x60>
	...

0801b96c <_ZN8touchgfx15EasingEquations10sineEaseInEtsst>:
 801b96c:	b513      	push	{r0, r1, r4, lr}
 801b96e:	4298      	cmp	r0, r3
 801b970:	4614      	mov	r4, r2
 801b972:	440a      	add	r2, r1
 801b974:	9101      	str	r1, [sp, #4]
 801b976:	b212      	sxth	r2, r2
 801b978:	da25      	bge.n	801b9c6 <_ZN8touchgfx15EasingEquations10sineEaseInEtsst+0x5a>
 801b97a:	b323      	cbz	r3, 801b9c6 <_ZN8touchgfx15EasingEquations10sineEaseInEtsst+0x5a>
 801b97c:	ee07 0a90 	vmov	s15, r0
 801b980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b984:	ee07 3a90 	vmov	s15, r3
 801b988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b98c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801b990:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801b9cc <_ZN8touchgfx15EasingEquations10sineEaseInEtsst+0x60>
 801b994:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b998:	f003 f962 	bl	801ec60 <cosf>
 801b99c:	4263      	negs	r3, r4
 801b99e:	ee07 4a90 	vmov	s15, r4
 801b9a2:	9901      	ldr	r1, [sp, #4]
 801b9a4:	ee07 3a10 	vmov	s14, r3
 801b9a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b9ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b9b0:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b9b4:	ee07 1a10 	vmov	s14, r1
 801b9b8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801b9bc:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b9c0:	f7ff f994 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801b9c4:	4602      	mov	r2, r0
 801b9c6:	4610      	mov	r0, r2
 801b9c8:	b002      	add	sp, #8
 801b9ca:	bd10      	pop	{r4, pc}
 801b9cc:	3fc90fdb 	.word	0x3fc90fdb

0801b9d0 <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst>:
 801b9d0:	b513      	push	{r0, r1, r4, lr}
 801b9d2:	4298      	cmp	r0, r3
 801b9d4:	eb01 0402 	add.w	r4, r1, r2
 801b9d8:	e88d 0006 	stmia.w	sp, {r1, r2}
 801b9dc:	b224      	sxth	r4, r4
 801b9de:	da21      	bge.n	801ba24 <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst+0x54>
 801b9e0:	b303      	cbz	r3, 801ba24 <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst+0x54>
 801b9e2:	ee07 0a90 	vmov	s15, r0
 801b9e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b9ea:	ee07 3a90 	vmov	s15, r3
 801b9ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b9f2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801b9f6:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801ba2c <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst+0x5c>
 801b9fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b9fe:	f003 f973 	bl	801ece8 <sinf>
 801ba02:	9a01      	ldr	r2, [sp, #4]
 801ba04:	9900      	ldr	r1, [sp, #0]
 801ba06:	ee07 2a90 	vmov	s15, r2
 801ba0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ba0e:	ee07 1a90 	vmov	s15, r1
 801ba12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba16:	eee7 7a00 	vfma.f32	s15, s14, s0
 801ba1a:	eeb0 0a67 	vmov.f32	s0, s15
 801ba1e:	f7ff f965 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801ba22:	4604      	mov	r4, r0
 801ba24:	4620      	mov	r0, r4
 801ba26:	b002      	add	sp, #8
 801ba28:	bd10      	pop	{r4, pc}
 801ba2a:	bf00      	nop
 801ba2c:	3fc90fdb 	.word	0x3fc90fdb

0801ba30 <_ZN8touchgfx15EasingEquations13sineEaseInOutEtsst>:
 801ba30:	b513      	push	{r0, r1, r4, lr}
 801ba32:	4298      	cmp	r0, r3
 801ba34:	4614      	mov	r4, r2
 801ba36:	440a      	add	r2, r1
 801ba38:	9101      	str	r1, [sp, #4]
 801ba3a:	b212      	sxth	r2, r2
 801ba3c:	da25      	bge.n	801ba8a <_ZN8touchgfx15EasingEquations13sineEaseInOutEtsst+0x5a>
 801ba3e:	b323      	cbz	r3, 801ba8a <_ZN8touchgfx15EasingEquations13sineEaseInOutEtsst+0x5a>
 801ba40:	ee07 0a90 	vmov	s15, r0
 801ba44:	ee07 3a10 	vmov	s14, r3
 801ba48:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801ba90 <_ZN8touchgfx15EasingEquations13sineEaseInOutEtsst+0x60>
 801ba4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ba50:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ba54:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801ba58:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801ba5c:	f003 f900 	bl	801ec60 <cosf>
 801ba60:	4263      	negs	r3, r4
 801ba62:	9901      	ldr	r1, [sp, #4]
 801ba64:	ee07 3a90 	vmov	s15, r3
 801ba68:	ee07 1a10 	vmov	s14, r1
 801ba6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ba70:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 801ba74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ba78:	ee30 0a66 	vsub.f32	s0, s0, s13
 801ba7c:	eea7 7a80 	vfma.f32	s14, s15, s0
 801ba80:	eeb0 0a47 	vmov.f32	s0, s14
 801ba84:	f7ff f932 	bl	801acec <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801ba88:	4602      	mov	r2, r0
 801ba8a:	4610      	mov	r0, r2
 801ba8c:	b002      	add	sp, #8
 801ba8e:	bd10      	pop	{r4, pc}
 801ba90:	40490fdb 	.word	0x40490fdb

0801ba94 <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 801ba94:	680b      	ldr	r3, [r1, #0]
 801ba96:	6980      	ldr	r0, [r0, #24]
 801ba98:	4418      	add	r0, r3
 801ba9a:	4770      	bx	lr

0801ba9c <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 801ba9c:	b530      	push	{r4, r5, lr}
 801ba9e:	b19a      	cbz	r2, 801bac8 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801baa0:	7b13      	ldrb	r3, [r2, #12]
 801baa2:	b18b      	cbz	r3, 801bac8 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801baa4:	7ad2      	ldrb	r2, [r2, #11]
 801baa6:	b294      	uxth	r4, r2
 801baa8:	4413      	add	r3, r2
 801baaa:	429c      	cmp	r4, r3
 801baac:	da0c      	bge.n	801bac8 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801baae:	69c2      	ldr	r2, [r0, #28]
 801bab0:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801bab4:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 801bab8:	428a      	cmp	r2, r1
 801baba:	d102      	bne.n	801bac2 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 801babc:	f995 0002 	ldrsb.w	r0, [r5, #2]
 801bac0:	bd30      	pop	{r4, r5, pc}
 801bac2:	3401      	adds	r4, #1
 801bac4:	b2a4      	uxth	r4, r4
 801bac6:	e7f0      	b.n	801baaa <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 801bac8:	2000      	movs	r0, #0
 801baca:	bd30      	pop	{r4, r5, pc}

0801bacc <_ZN8touchgfx17InternalFlashFontD1Ev>:
 801bacc:	4770      	bx	lr

0801bace <_ZN8touchgfx17InternalFlashFontD0Ev>:
 801bace:	b510      	push	{r4, lr}
 801bad0:	4604      	mov	r4, r0
 801bad2:	2120      	movs	r1, #32
 801bad4:	f003 f827 	bl	801eb26 <_ZdlPvj>
 801bad8:	4620      	mov	r0, r4
 801bada:	bd10      	pop	{r4, pc}

0801badc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 801badc:	b530      	push	{r4, r5, lr}
 801bade:	b087      	sub	sp, #28
 801bae0:	4604      	mov	r4, r0
 801bae2:	f8bd 5044 	ldrh.w	r5, [sp, #68]	@ 0x44
 801bae6:	9505      	str	r5, [sp, #20]
 801bae8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 801baec:	9504      	str	r5, [sp, #16]
 801baee:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801baf2:	9503      	str	r5, [sp, #12]
 801baf4:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 801baf8:	9502      	str	r5, [sp, #8]
 801bafa:	f89d 502c 	ldrb.w	r5, [sp, #44]	@ 0x2c
 801bafe:	9501      	str	r5, [sp, #4]
 801bb00:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 801bb04:	9500      	str	r5, [sp, #0]
 801bb06:	f002 ffb5 	bl	801ea74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 801bb0a:	4b04      	ldr	r3, [pc, #16]	@ (801bb1c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 801bb0c:	4620      	mov	r0, r4
 801bb0e:	6023      	str	r3, [r4, #0]
 801bb10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb12:	61a3      	str	r3, [r4, #24]
 801bb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bb16:	61e3      	str	r3, [r4, #28]
 801bb18:	b007      	add	sp, #28
 801bb1a:	bd30      	pop	{r4, r5, pc}
 801bb1c:	0802650c 	.word	0x0802650c

0801bb20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb22:	4604      	mov	r4, r0
 801bb24:	4d1b      	ldr	r5, [pc, #108]	@ (801bb94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801bb26:	2700      	movs	r7, #0
 801bb28:	2601      	movs	r6, #1
 801bb2a:	6863      	ldr	r3, [r4, #4]
 801bb2c:	b93b      	cbnz	r3, 801bb3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801bb2e:	6821      	ldr	r1, [r4, #0]
 801bb30:	2900      	cmp	r1, #0
 801bb32:	d02c      	beq.n	801bb8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801bb34:	6828      	ldr	r0, [r5, #0]
 801bb36:	6803      	ldr	r3, [r0, #0]
 801bb38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb3a:	4798      	blx	r3
 801bb3c:	6060      	str	r0, [r4, #4]
 801bb3e:	7c23      	ldrb	r3, [r4, #16]
 801bb40:	b16b      	cbz	r3, 801bb5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801bb42:	68e3      	ldr	r3, [r4, #12]
 801bb44:	b12b      	cbz	r3, 801bb52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801bb46:	881a      	ldrh	r2, [r3, #0]
 801bb48:	b11a      	cbz	r2, 801bb52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801bb4a:	1c9a      	adds	r2, r3, #2
 801bb4c:	60e2      	str	r2, [r4, #12]
 801bb4e:	8818      	ldrh	r0, [r3, #0]
 801bb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb52:	6828      	ldr	r0, [r5, #0]
 801bb54:	7427      	strb	r7, [r4, #16]
 801bb56:	6803      	ldr	r3, [r0, #0]
 801bb58:	6821      	ldr	r1, [r4, #0]
 801bb5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb5c:	4798      	blx	r3
 801bb5e:	6863      	ldr	r3, [r4, #4]
 801bb60:	881a      	ldrh	r2, [r3, #0]
 801bb62:	b1a2      	cbz	r2, 801bb8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801bb64:	2a02      	cmp	r2, #2
 801bb66:	f103 0202 	add.w	r2, r3, #2
 801bb6a:	6062      	str	r2, [r4, #4]
 801bb6c:	d1ef      	bne.n	801bb4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801bb6e:	6828      	ldr	r0, [r5, #0]
 801bb70:	6803      	ldr	r3, [r0, #0]
 801bb72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801bb74:	68a3      	ldr	r3, [r4, #8]
 801bb76:	1d19      	adds	r1, r3, #4
 801bb78:	60a1      	str	r1, [r4, #8]
 801bb7a:	6819      	ldr	r1, [r3, #0]
 801bb7c:	4790      	blx	r2
 801bb7e:	60e0      	str	r0, [r4, #12]
 801bb80:	2800      	cmp	r0, #0
 801bb82:	d0d2      	beq.n	801bb2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801bb84:	8803      	ldrh	r3, [r0, #0]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d0cf      	beq.n	801bb2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801bb8a:	7426      	strb	r6, [r4, #16]
 801bb8c:	e7cd      	b.n	801bb2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801bb8e:	2000      	movs	r0, #0
 801bb90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb92:	bf00      	nop
 801bb94:	20024e34 	.word	0x20024e34

0801bb98 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801bb98:	b538      	push	{r3, r4, r5, lr}
 801bb9a:	8a83      	ldrh	r3, [r0, #20]
 801bb9c:	4604      	mov	r4, r0
 801bb9e:	8a45      	ldrh	r5, [r0, #18]
 801bba0:	8243      	strh	r3, [r0, #18]
 801bba2:	f7ff ffbd 	bl	801bb20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801bba6:	82a0      	strh	r0, [r4, #20]
 801bba8:	4628      	mov	r0, r5
 801bbaa:	bd38      	pop	{r3, r4, r5, pc}

0801bbac <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801bbac:	b570      	push	{r4, r5, r6, lr}
 801bbae:	460e      	mov	r6, r1
 801bbb0:	4605      	mov	r5, r0
 801bbb2:	f7ff fff1 	bl	801bb98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bbb6:	4a0d      	ldr	r2, [pc, #52]	@ (801bbec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 801bbb8:	4601      	mov	r1, r0
 801bbba:	6814      	ldr	r4, [r2, #0]
 801bbbc:	4613      	mov	r3, r2
 801bbbe:	b914      	cbnz	r4, 801bbc6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 801bbc0:	6852      	ldr	r2, [r2, #4]
 801bbc2:	07d2      	lsls	r2, r2, #31
 801bbc4:	d510      	bpl.n	801bbe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 801bbc6:	6858      	ldr	r0, [r3, #4]
 801bbc8:	f105 0212 	add.w	r2, r5, #18
 801bbcc:	f010 0f01 	tst.w	r0, #1
 801bbd0:	ea4f 0060 	mov.w	r0, r0, asr #1
 801bbd4:	bf18      	it	ne
 801bbd6:	582b      	ldrne	r3, [r5, r0]
 801bbd8:	4428      	add	r0, r5
 801bbda:	bf18      	it	ne
 801bbdc:	591c      	ldrne	r4, [r3, r4]
 801bbde:	4633      	mov	r3, r6
 801bbe0:	46a4      	mov	ip, r4
 801bbe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bbe6:	4760      	bx	ip
 801bbe8:	bd70      	pop	{r4, r5, r6, pc}
 801bbea:	bf00      	nop
 801bbec:	20001868 	.word	0x20001868

0801bbf0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801bbf0:	2300      	movs	r3, #0
 801bbf2:	b510      	push	{r4, lr}
 801bbf4:	4604      	mov	r4, r0
 801bbf6:	6043      	str	r3, [r0, #4]
 801bbf8:	60c3      	str	r3, [r0, #12]
 801bbfa:	7403      	strb	r3, [r0, #16]
 801bbfc:	f7ff ff90 	bl	801bb20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801bc00:	8260      	strh	r0, [r4, #18]
 801bc02:	4620      	mov	r0, r4
 801bc04:	f7ff ff8c 	bl	801bb20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801bc08:	4a0a      	ldr	r2, [pc, #40]	@ (801bc34 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 801bc0a:	82a0      	strh	r0, [r4, #20]
 801bc0c:	6813      	ldr	r3, [r2, #0]
 801bc0e:	4611      	mov	r1, r2
 801bc10:	b913      	cbnz	r3, 801bc18 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 801bc12:	6852      	ldr	r2, [r2, #4]
 801bc14:	07d2      	lsls	r2, r2, #31
 801bc16:	d50c      	bpl.n	801bc32 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 801bc18:	6848      	ldr	r0, [r1, #4]
 801bc1a:	f010 0f01 	tst.w	r0, #1
 801bc1e:	ea4f 0060 	mov.w	r0, r0, asr #1
 801bc22:	bf18      	it	ne
 801bc24:	5822      	ldrne	r2, [r4, r0]
 801bc26:	4420      	add	r0, r4
 801bc28:	bf18      	it	ne
 801bc2a:	58d3      	ldrne	r3, [r2, r3]
 801bc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc30:	4718      	bx	r3
 801bc32:	bd10      	pop	{r4, pc}
 801bc34:	20001870 	.word	0x20001870

0801bc38 <_ZN8touchgfx12TextProviderC1Ev>:
 801bc38:	2300      	movs	r3, #0
 801bc3a:	b510      	push	{r4, lr}
 801bc3c:	4604      	mov	r4, r0
 801bc3e:	6003      	str	r3, [r0, #0]
 801bc40:	6043      	str	r3, [r0, #4]
 801bc42:	f7ff ffd5 	bl	801bbf0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bc46:	4620      	mov	r0, r4
 801bc48:	bd10      	pop	{r4, pc}

0801bc4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 801bc4a:	6082      	str	r2, [r0, #8]
 801bc4c:	6001      	str	r1, [r0, #0]
 801bc4e:	f7ff bfcf 	b.w	801bbf0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801bc52 <_ZN8touchgfx8ceil28_4El>:
 801bc52:	f110 030f 	adds.w	r3, r0, #15
 801bc56:	d401      	bmi.n	801bc5c <_ZN8touchgfx8ceil28_4El+0xa>
 801bc58:	1118      	asrs	r0, r3, #4
 801bc5a:	4770      	bx	lr
 801bc5c:	2210      	movs	r2, #16
 801bc5e:	f1c0 0001 	rsb	r0, r0, #1
 801bc62:	fb93 f3f2 	sdiv	r3, r3, r2
 801bc66:	f010 000f 	ands.w	r0, r0, #15
 801bc6a:	bf18      	it	ne
 801bc6c:	2001      	movne	r0, #1
 801bc6e:	1a18      	subs	r0, r3, r0
 801bc70:	4770      	bx	lr
	...

0801bc74 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801bc74:	2900      	cmp	r1, #0
 801bc76:	b510      	push	{r4, lr}
 801bc78:	dc06      	bgt.n	801bc88 <_ZN8touchgfx11floorDivModEllRlS0_+0x14>
 801bc7a:	4b0f      	ldr	r3, [pc, #60]	@ (801bcb8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801bc7c:	f240 1111 	movw	r1, #273	@ 0x111
 801bc80:	4a0e      	ldr	r2, [pc, #56]	@ (801bcbc <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801bc82:	480f      	ldr	r0, [pc, #60]	@ (801bcc0 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801bc84:	f004 f876 	bl	801fd74 <__assert_func>
 801bc88:	fb90 f4f1 	sdiv	r4, r0, r1
 801bc8c:	2800      	cmp	r0, #0
 801bc8e:	6014      	str	r4, [r2, #0]
 801bc90:	db03      	blt.n	801bc9a <_ZN8touchgfx11floorDivModEllRlS0_+0x26>
 801bc92:	fb01 0114 	mls	r1, r1, r4, r0
 801bc96:	6019      	str	r1, [r3, #0]
 801bc98:	bd10      	pop	{r4, pc}
 801bc9a:	4240      	negs	r0, r0
 801bc9c:	fb90 f4f1 	sdiv	r4, r0, r1
 801bca0:	fb01 0014 	mls	r0, r1, r4, r0
 801bca4:	6018      	str	r0, [r3, #0]
 801bca6:	2800      	cmp	r0, #0
 801bca8:	d0f6      	beq.n	801bc98 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801bcaa:	6810      	ldr	r0, [r2, #0]
 801bcac:	3801      	subs	r0, #1
 801bcae:	6010      	str	r0, [r2, #0]
 801bcb0:	6818      	ldr	r0, [r3, #0]
 801bcb2:	1a09      	subs	r1, r1, r0
 801bcb4:	e7ef      	b.n	801bc96 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801bcb6:	bf00      	nop
 801bcb8:	08026550 	.word	0x08026550
 801bcbc:	0802658f 	.word	0x0802658f
 801bcc0:	08026560 	.word	0x08026560

0801bcc4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801bcc4:	b570      	push	{r4, r5, r6, lr}
 801bcc6:	694a      	ldr	r2, [r1, #20]
 801bcc8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801bcca:	684b      	ldr	r3, [r1, #4]
 801bccc:	1b54      	subs	r4, r2, r5
 801bcce:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801bcd0:	f000 8106 	beq.w	801bee0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801bcd4:	1b9b      	subs	r3, r3, r6
 801bcd6:	d003      	beq.n	801bce0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801bcd8:	4363      	muls	r3, r4
 801bcda:	2210      	movs	r2, #16
 801bcdc:	fb93 f3f2 	sdiv	r3, r3, r2
 801bce0:	680c      	ldr	r4, [r1, #0]
 801bce2:	698a      	ldr	r2, [r1, #24]
 801bce4:	1b65      	subs	r5, r4, r5
 801bce6:	f000 80fd 	beq.w	801bee4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801bcea:	1b92      	subs	r2, r2, r6
 801bcec:	d003      	beq.n	801bcf6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801bcee:	436a      	muls	r2, r5
 801bcf0:	2410      	movs	r4, #16
 801bcf2:	fb92 f2f4 	sdiv	r2, r2, r4
 801bcf6:	1a9b      	subs	r3, r3, r2
 801bcf8:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801bf20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801bcfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801bd00:	460a      	mov	r2, r1
 801bd02:	ee07 3a90 	vmov	s15, r3
 801bd06:	f100 040c 	add.w	r4, r0, #12
 801bd0a:	4603      	mov	r3, r0
 801bd0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd10:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bd14:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801bd18:	eeb1 6a43 	vneg.f32	s12, s6
 801bd1c:	edd2 7a02 	vldr	s15, [r2, #8]
 801bd20:	3214      	adds	r2, #20
 801bd22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bd26:	ece3 6a01 	vstmia	r3!, {s13}
 801bd2a:	429c      	cmp	r4, r3
 801bd2c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801bd30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bd34:	edc3 7a02 	vstr	s15, [r3, #8]
 801bd38:	ed52 7a01 	vldr	s15, [r2, #-4]
 801bd3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bd40:	edc3 7a05 	vstr	s15, [r3, #20]
 801bd44:	d1ea      	bne.n	801bd1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801bd46:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801bd48:	698b      	ldr	r3, [r1, #24]
 801bd4a:	edd0 4a02 	vldr	s9, [r0, #8]
 801bd4e:	1a9b      	subs	r3, r3, r2
 801bd50:	edd0 3a00 	vldr	s7, [r0]
 801bd54:	edd0 6a01 	vldr	s13, [r0, #4]
 801bd58:	ee07 3a90 	vmov	s15, r3
 801bd5c:	684b      	ldr	r3, [r1, #4]
 801bd5e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801bd62:	ed90 5a05 	vldr	s10, [r0, #20]
 801bd66:	1a9b      	subs	r3, r3, r2
 801bd68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd6c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801bd70:	ed90 2a03 	vldr	s4, [r0, #12]
 801bd74:	ee07 3a10 	vmov	s14, r3
 801bd78:	edd0 2a04 	vldr	s5, [r0, #16]
 801bd7c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bd80:	ed90 1a07 	vldr	s2, [r0, #28]
 801bd84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bd88:	ee72 2ac5 	vsub.f32	s5, s5, s10
 801bd8c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801bd90:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bd94:	ee32 5a45 	vsub.f32	s10, s4, s10
 801bd98:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bd9c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801bda0:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801bda4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801bda6:	694a      	ldr	r2, [r1, #20]
 801bda8:	1b13      	subs	r3, r2, r4
 801bdaa:	ee07 3a10 	vmov	s14, r3
 801bdae:	680b      	ldr	r3, [r1, #0]
 801bdb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bdb4:	1b1b      	subs	r3, r3, r4
 801bdb6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bdba:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801bdbe:	ee07 3a10 	vmov	s14, r3
 801bdc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bdc6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bdca:	eee6 4a87 	vfma.f32	s9, s13, s14
 801bdce:	ee64 4a86 	vmul.f32	s9, s9, s12
 801bdd2:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801bdd6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801bdd8:	698b      	ldr	r3, [r1, #24]
 801bdda:	1a9b      	subs	r3, r3, r2
 801bddc:	ee06 3a90 	vmov	s13, r3
 801bde0:	684b      	ldr	r3, [r1, #4]
 801bde2:	1a9b      	subs	r3, r3, r2
 801bde4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bde8:	ee07 3a10 	vmov	s14, r3
 801bdec:	ee66 6a84 	vmul.f32	s13, s13, s8
 801bdf0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bdf4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801bdf8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bdfc:	eee2 6a87 	vfma.f32	s13, s5, s14
 801be00:	ee66 6a83 	vmul.f32	s13, s13, s6
 801be04:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801be08:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 801be0a:	680b      	ldr	r3, [r1, #0]
 801be0c:	1a9b      	subs	r3, r3, r2
 801be0e:	ee07 3a10 	vmov	s14, r3
 801be12:	694b      	ldr	r3, [r1, #20]
 801be14:	1a9b      	subs	r3, r3, r2
 801be16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be1a:	ee05 3a90 	vmov	s11, r3
 801be1e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be22:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801be26:	ee65 5a84 	vmul.f32	s11, s11, s8
 801be2a:	ee25 5a65 	vnmul.f32	s10, s10, s11
 801be2e:	edd0 5a08 	vldr	s11, [r0, #32]
 801be32:	ee31 1a65 	vsub.f32	s2, s2, s11
 801be36:	eea7 5a22 	vfma.f32	s10, s14, s5
 801be3a:	edd0 2a06 	vldr	s5, [r0, #24]
 801be3e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801be42:	ee25 5a06 	vmul.f32	s10, s10, s12
 801be46:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801be4a:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 801be4c:	684a      	ldr	r2, [r1, #4]
 801be4e:	1b13      	subs	r3, r2, r4
 801be50:	ee01 3a90 	vmov	s3, r3
 801be54:	698b      	ldr	r3, [r1, #24]
 801be56:	1b1b      	subs	r3, r3, r4
 801be58:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801be5c:	ee07 3a10 	vmov	s14, r3
 801be60:	ee61 1a84 	vmul.f32	s3, s3, s8
 801be64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be68:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be6c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801be70:	eea1 7a81 	vfma.f32	s14, s3, s2
 801be74:	ee27 7a03 	vmul.f32	s14, s14, s6
 801be78:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801be7c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 801be7e:	680b      	ldr	r3, [r1, #0]
 801be80:	1a9b      	subs	r3, r3, r2
 801be82:	ee03 3a10 	vmov	s6, r3
 801be86:	694b      	ldr	r3, [r1, #20]
 801be88:	1a9b      	subs	r3, r3, r2
 801be8a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801be8e:	ee01 3a90 	vmov	s3, r3
 801be92:	ee23 3a04 	vmul.f32	s6, s6, s8
 801be96:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801be9a:	ee21 4a84 	vmul.f32	s8, s3, s8
 801be9e:	ee65 5ac4 	vnmul.f32	s11, s11, s8
 801bea2:	eee3 5a01 	vfma.f32	s11, s6, s2
 801bea6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801beaa:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801beae:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801beb2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801beb6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801beba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bebe:	dd13      	ble.n	801bee8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801bec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801bec4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801bec8:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801beca:	eee3 7a87 	vfma.f32	s15, s7, s14
 801bece:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bed6:	dd15      	ble.n	801bf04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801bed8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801bedc:	6403      	str	r3, [r0, #64]	@ 0x40
 801bede:	bd70      	pop	{r4, r5, r6, pc}
 801bee0:	4623      	mov	r3, r4
 801bee2:	e6fd      	b.n	801bce0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801bee4:	462a      	mov	r2, r5
 801bee6:	e706      	b.n	801bcf6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801bee8:	d502      	bpl.n	801bef0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801beea:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801beee:	e7e9      	b.n	801bec4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801bef0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801bef4:	eea3 2a85 	vfma.f32	s4, s7, s10
 801bef8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801befc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf00:	dade      	bge.n	801bec0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801bf02:	e7f2      	b.n	801beea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801bf04:	d502      	bpl.n	801bf0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801bf06:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801bf0a:	e7e7      	b.n	801bedc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801bf0c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801bf10:	eee3 4a86 	vfma.f32	s9, s7, s12
 801bf14:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801bf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf1c:	dadc      	bge.n	801bed8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801bf1e:	e7f2      	b.n	801bf06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801bf20:	3d800000 	.word	0x3d800000

0801bf24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801bf24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf28:	f04f 0814 	mov.w	r8, #20
 801bf2c:	4604      	mov	r4, r0
 801bf2e:	4617      	mov	r7, r2
 801bf30:	460d      	mov	r5, r1
 801bf32:	fb08 f903 	mul.w	r9, r8, r3
 801bf36:	461e      	mov	r6, r3
 801bf38:	eb02 0a09 	add.w	sl, r2, r9
 801bf3c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801bf40:	f7ff fe87 	bl	801bc52 <_ZN8touchgfx8ceil28_4El>
 801bf44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf46:	6160      	str	r0, [r4, #20]
 801bf48:	fb08 f803 	mul.w	r8, r8, r3
 801bf4c:	9001      	str	r0, [sp, #4]
 801bf4e:	eb07 0b08 	add.w	fp, r7, r8
 801bf52:	f8db 0004 	ldr.w	r0, [fp, #4]
 801bf56:	f7ff fe7c 	bl	801bc52 <_ZN8touchgfx8ceil28_4El>
 801bf5a:	9a01      	ldr	r2, [sp, #4]
 801bf5c:	1a80      	subs	r0, r0, r2
 801bf5e:	61a0      	str	r0, [r4, #24]
 801bf60:	2800      	cmp	r0, #0
 801bf62:	f000 8088 	beq.w	801c076 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801bf66:	f857 0009 	ldr.w	r0, [r7, r9]
 801bf6a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 801bf6e:	f857 e008 	ldr.w	lr, [r7, r8]
 801bf72:	f8db 3004 	ldr.w	r3, [fp, #4]
 801bf76:	ebae 0e00 	sub.w	lr, lr, r0
 801bf7a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801bf7e:	ea4f 1b0e 	mov.w	fp, lr, lsl #4
 801bf82:	1a5b      	subs	r3, r3, r1
 801bf84:	fb0b f202 	mul.w	r2, fp, r2
 801bf88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801bf8c:	fb0e 2211 	mls	r2, lr, r1, r2
 801bf90:	4641      	mov	r1, r8
 801bf92:	fb00 2003 	mla	r0, r0, r3, r2
 801bf96:	f104 0310 	add.w	r3, r4, #16
 801bf9a:	4622      	mov	r2, r4
 801bf9c:	3801      	subs	r0, #1
 801bf9e:	4440      	add	r0, r8
 801bfa0:	f7ff fe68 	bl	801bc74 <_ZN8touchgfx11floorDivModEllRlS0_>
 801bfa4:	f104 0308 	add.w	r3, r4, #8
 801bfa8:	1d22      	adds	r2, r4, #4
 801bfaa:	4641      	mov	r1, r8
 801bfac:	4658      	mov	r0, fp
 801bfae:	f7ff fe61 	bl	801bc74 <_ZN8touchgfx11floorDivModEllRlS0_>
 801bfb2:	f8c4 800c 	str.w	r8, [r4, #12]
 801bfb6:	6962      	ldr	r2, [r4, #20]
 801bfb8:	f8da 3004 	ldr.w	r3, [sl, #4]
 801bfbc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801c080 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801bfc0:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801bfc4:	6822      	ldr	r2, [r4, #0]
 801bfc6:	ed95 6a0a 	vldr	s12, [r5, #40]	@ 0x28
 801bfca:	ee07 3a10 	vmov	s14, r3
 801bfce:	f857 3009 	ldr.w	r3, [r7, r9]
 801bfd2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801bfd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bfda:	ee07 3a90 	vmov	s15, r3
 801bfde:	ee27 7a26 	vmul.f32	s14, s14, s13
 801bfe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bfe6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bfea:	edd6 6a00 	vldr	s13, [r6]
 801bfee:	eee7 6a06 	vfma.f32	s13, s14, s12
 801bff2:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801bff6:	eee7 6a86 	vfma.f32	s13, s15, s12
 801bffa:	edc4 6a07 	vstr	s13, [r4, #28]
 801bffe:	edd4 6a01 	vldr	s13, [r4, #4]
 801c002:	edd5 5a09 	vldr	s11, [r5, #36]	@ 0x24
 801c006:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c00a:	ed95 6a0a 	vldr	s12, [r5, #40]	@ 0x28
 801c00e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c012:	ed84 6a08 	vstr	s12, [r4, #32]
 801c016:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801c018:	6263      	str	r3, [r4, #36]	@ 0x24
 801c01a:	edd5 5a0c 	vldr	s11, [r5, #48]	@ 0x30
 801c01e:	ed96 6a03 	vldr	s12, [r6, #12]
 801c022:	eea7 6a25 	vfma.f32	s12, s14, s11
 801c026:	edd5 5a0b 	vldr	s11, [r5, #44]	@ 0x2c
 801c02a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 801c02e:	ed84 6a0a 	vstr	s12, [r4, #40]	@ 0x28
 801c032:	edd5 5a0b 	vldr	s11, [r5, #44]	@ 0x2c
 801c036:	ed95 6a0c 	vldr	s12, [r5, #48]	@ 0x30
 801c03a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c03e:	ed84 6a0b 	vstr	s12, [r4, #44]	@ 0x2c
 801c042:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801c044:	6323      	str	r3, [r4, #48]	@ 0x30
 801c046:	edd5 5a0e 	vldr	s11, [r5, #56]	@ 0x38
 801c04a:	ed96 6a06 	vldr	s12, [r6, #24]
 801c04e:	eea7 6a25 	vfma.f32	s12, s14, s11
 801c052:	eeb0 7a46 	vmov.f32	s14, s12
 801c056:	ed95 6a0d 	vldr	s12, [r5, #52]	@ 0x34
 801c05a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801c05e:	ed84 7a0d 	vstr	s14, [r4, #52]	@ 0x34
 801c062:	ed95 7a0d 	vldr	s14, [r5, #52]	@ 0x34
 801c066:	edd5 7a0e 	vldr	s15, [r5, #56]	@ 0x38
 801c06a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c06e:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
 801c072:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801c074:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801c076:	4620      	mov	r0, r4
 801c078:	b003      	add	sp, #12
 801c07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c07e:	bf00      	nop
 801c080:	3d800000 	.word	0x3d800000

0801c084 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c084:	4602      	mov	r2, r0
 801c086:	b148      	cbz	r0, 801c09c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c088:	2300      	movs	r3, #0
 801c08a:	b298      	uxth	r0, r3
 801c08c:	3301      	adds	r3, #1
 801c08e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c092:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c096:	2900      	cmp	r1, #0
 801c098:	d1f7      	bne.n	801c08a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c09a:	4770      	bx	lr
 801c09c:	4770      	bx	lr

0801c09e <_ZN8touchgfx7Unicode6strlenEPKc>:
 801c09e:	b140      	cbz	r0, 801c0b2 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801c0a0:	4602      	mov	r2, r0
 801c0a2:	1a13      	subs	r3, r2, r0
 801c0a4:	f812 1b01 	ldrb.w	r1, [r2], #1
 801c0a8:	b29b      	uxth	r3, r3
 801c0aa:	2900      	cmp	r1, #0
 801c0ac:	d1f9      	bne.n	801c0a2 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	4770      	bx	lr
 801c0b2:	4603      	mov	r3, r0
 801c0b4:	e7fb      	b.n	801c0ae <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801c0b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c0b6:	b530      	push	{r4, r5, lr}
 801c0b8:	b169      	cbz	r1, 801c0d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x20>
 801c0ba:	b168      	cbz	r0, 801c0d8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801c0bc:	1e85      	subs	r5, r0, #2
 801c0be:	460b      	mov	r3, r1
 801c0c0:	1a58      	subs	r0, r3, r1
 801c0c2:	b280      	uxth	r0, r0
 801c0c4:	4290      	cmp	r0, r2
 801c0c6:	da07      	bge.n	801c0d8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801c0c8:	f813 4b01 	ldrb.w	r4, [r3], #1
 801c0cc:	f825 4f02 	strh.w	r4, [r5, #2]!
 801c0d0:	2c00      	cmp	r4, #0
 801c0d2:	d1f5      	bne.n	801c0c0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c0d4:	bd30      	pop	{r4, r5, pc}
 801c0d6:	4608      	mov	r0, r1
 801c0d8:	bd30      	pop	{r4, r5, pc}

0801c0da <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>:
 801c0da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0dc:	460f      	mov	r7, r1
 801c0de:	b08b      	sub	sp, #44	@ 0x2c
 801c0e0:	2100      	movs	r1, #0
 801c0e2:	ad01      	add	r5, sp, #4
 801c0e4:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801c0e8:	211f      	movs	r1, #31
 801c0ea:	fbb0 f6f3 	udiv	r6, r0, r3
 801c0ee:	fb03 0416 	mls	r4, r3, r6, r0
 801c0f2:	4630      	mov	r0, r6
 801c0f4:	2c09      	cmp	r4, #9
 801c0f6:	bfd4      	ite	le
 801c0f8:	3430      	addle	r4, #48	@ 0x30
 801c0fa:	3457      	addgt	r4, #87	@ 0x57
 801c0fc:	b2e4      	uxtb	r4, r4
 801c0fe:	554c      	strb	r4, [r1, r5]
 801c100:	1e4c      	subs	r4, r1, #1
 801c102:	b92e      	cbnz	r6, 801c110 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x36>
 801c104:	4429      	add	r1, r5
 801c106:	4638      	mov	r0, r7
 801c108:	f7ff ffd5 	bl	801c0b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c10c:	b00b      	add	sp, #44	@ 0x2c
 801c10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c110:	4621      	mov	r1, r4
 801c112:	e7ea      	b.n	801c0ea <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x10>

0801c114 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801c114:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c116:	4606      	mov	r6, r0
 801c118:	b08b      	sub	sp, #44	@ 0x2c
 801c11a:	4608      	mov	r0, r1
 801c11c:	b341      	cbz	r1, 801c170 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c11e:	1e99      	subs	r1, r3, #2
 801c120:	290e      	cmp	r1, #14
 801c122:	d825      	bhi.n	801c170 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c124:	2100      	movs	r1, #0
 801c126:	4634      	mov	r4, r6
 801c128:	251f      	movs	r5, #31
 801c12a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801c12e:	1e69      	subs	r1, r5, #1
 801c130:	f10d 0e04 	add.w	lr, sp, #4
 801c134:	fb94 f7f3 	sdiv	r7, r4, r3
 801c138:	fb03 4417 	mls	r4, r3, r7, r4
 801c13c:	448e      	add	lr, r1
 801c13e:	2c00      	cmp	r4, #0
 801c140:	bfb8      	it	lt
 801c142:	4264      	neglt	r4, r4
 801c144:	2c09      	cmp	r4, #9
 801c146:	bfd4      	ite	le
 801c148:	3430      	addle	r4, #48	@ 0x30
 801c14a:	3457      	addgt	r4, #87	@ 0x57
 801c14c:	b2e4      	uxtb	r4, r4
 801c14e:	f88e 4001 	strb.w	r4, [lr, #1]
 801c152:	463c      	mov	r4, r7
 801c154:	b977      	cbnz	r7, 801c174 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801c156:	2e00      	cmp	r6, #0
 801c158:	da05      	bge.n	801c166 <_ZN8touchgfx7Unicode4itoaElPtti+0x52>
 801c15a:	ab0a      	add	r3, sp, #40	@ 0x28
 801c15c:	4419      	add	r1, r3
 801c15e:	232d      	movs	r3, #45	@ 0x2d
 801c160:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c164:	1ea9      	subs	r1, r5, #2
 801c166:	3101      	adds	r1, #1
 801c168:	ab01      	add	r3, sp, #4
 801c16a:	4419      	add	r1, r3
 801c16c:	f7ff ffa3 	bl	801c0b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c170:	b00b      	add	sp, #44	@ 0x2c
 801c172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c174:	460d      	mov	r5, r1
 801c176:	e7da      	b.n	801c12e <_ZN8touchgfx7Unicode4itoaElPtti+0x1a>

0801c178 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801c178:	b510      	push	{r4, lr}
 801c17a:	b158      	cbz	r0, 801c194 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c17c:	1e82      	subs	r2, r0, #2
 801c17e:	210a      	movs	r1, #10
 801c180:	2000      	movs	r0, #0
 801c182:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c186:	3b30      	subs	r3, #48	@ 0x30
 801c188:	b29c      	uxth	r4, r3
 801c18a:	2c09      	cmp	r4, #9
 801c18c:	d802      	bhi.n	801c194 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c18e:	fb01 3000 	mla	r0, r1, r0, r3
 801c192:	e7f6      	b.n	801c182 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801c194:	bd10      	pop	{r4, pc}

0801c196 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801c196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c19a:	b085      	sub	sp, #20
 801c19c:	f8d0 8000 	ldr.w	r8, [r0]
 801c1a0:	468a      	mov	sl, r1
 801c1a2:	461c      	mov	r4, r3
 801c1a4:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 801c1a8:	4681      	mov	r9, r0
 801c1aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801c1ae:	4640      	mov	r0, r8
 801c1b0:	9203      	str	r2, [sp, #12]
 801c1b2:	9301      	str	r3, [sp, #4]
 801c1b4:	9102      	str	r1, [sp, #8]
 801c1b6:	f7ff ff65 	bl	801c084 <_ZN8touchgfx7Unicode6strlenEPKt>
 801c1ba:	9a03      	ldr	r2, [sp, #12]
 801c1bc:	f1ba 0f00 	cmp.w	sl, #0
 801c1c0:	bf0c      	ite	eq
 801c1c2:	4603      	moveq	r3, r0
 801c1c4:	1c43      	addne	r3, r0, #1
 801c1c6:	f89d b038 	ldrb.w	fp, [sp, #56]	@ 0x38
 801c1ca:	8812      	ldrh	r2, [r2, #0]
 801c1cc:	b29b      	uxth	r3, r3
 801c1ce:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801c1d0:	2a69      	cmp	r2, #105	@ 0x69
 801c1d2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c1d4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801c1d6:	9902      	ldr	r1, [sp, #8]
 801c1d8:	d004      	beq.n	801c1e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801c1da:	d852      	bhi.n	801c282 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801c1dc:	2a58      	cmp	r2, #88	@ 0x58
 801c1de:	d001      	beq.n	801c1e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801c1e0:	2a64      	cmp	r2, #100	@ 0x64
 801c1e2:	d159      	bne.n	801c298 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801c1e4:	b19c      	cbz	r4, 801c20e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801c1e6:	b956      	cbnz	r6, 801c1fe <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801c1e8:	2801      	cmp	r0, #1
 801c1ea:	d108      	bne.n	801c1fe <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801c1ec:	f8b8 2000 	ldrh.w	r2, [r8]
 801c1f0:	2a30      	cmp	r2, #48	@ 0x30
 801c1f2:	bf02      	ittt	eq
 801c1f4:	f108 0202 	addeq.w	r2, r8, #2
 801c1f8:	4630      	moveq	r0, r6
 801c1fa:	f8c9 2000 	streq.w	r2, [r9]
 801c1fe:	429e      	cmp	r6, r3
 801c200:	dd4c      	ble.n	801c29c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x106>
 801c202:	b2b6      	uxth	r6, r6
 801c204:	1af4      	subs	r4, r6, r3
 801c206:	4633      	mov	r3, r6
 801c208:	b2a4      	uxth	r4, r4
 801c20a:	f04f 0b00 	mov.w	fp, #0
 801c20e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801c212:	9a01      	ldr	r2, [sp, #4]
 801c214:	3e01      	subs	r6, #1
 801c216:	b162      	cbz	r2, 801c232 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801c218:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c21a:	4293      	cmp	r3, r2
 801c21c:	da09      	bge.n	801c232 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801c21e:	1ad2      	subs	r2, r2, r3
 801c220:	b292      	uxth	r2, r2
 801c222:	b939      	cbnz	r1, 801c234 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801c224:	f1bb 0f00 	cmp.w	fp, #0
 801c228:	d050      	beq.n	801c2cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801c22a:	2800      	cmp	r0, #0
 801c22c:	d04e      	beq.n	801c2cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801c22e:	4414      	add	r4, r2
 801c230:	b2a4      	uxth	r4, r4
 801c232:	2200      	movs	r2, #0
 801c234:	682b      	ldr	r3, [r5, #0]
 801c236:	42b3      	cmp	r3, r6
 801c238:	da07      	bge.n	801c24a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801c23a:	f1ba 0f00 	cmp.w	sl, #0
 801c23e:	d004      	beq.n	801c24a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801c240:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801c244:	682b      	ldr	r3, [r5, #0]
 801c246:	3301      	adds	r3, #1
 801c248:	602b      	str	r3, [r5, #0]
 801c24a:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 801c24e:	b124      	cbz	r4, 801c25a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801c250:	6829      	ldr	r1, [r5, #0]
 801c252:	3c01      	subs	r4, #1
 801c254:	428e      	cmp	r6, r1
 801c256:	b2a4      	uxth	r4, r4
 801c258:	dc22      	bgt.n	801c2a0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x10a>
 801c25a:	b140      	cbz	r0, 801c26e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801c25c:	f8d9 3000 	ldr.w	r3, [r9]
 801c260:	8819      	ldrh	r1, [r3, #0]
 801c262:	b121      	cbz	r1, 801c26e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801c264:	6829      	ldr	r1, [r5, #0]
 801c266:	3801      	subs	r0, #1
 801c268:	428e      	cmp	r6, r1
 801c26a:	b280      	uxth	r0, r0
 801c26c:	dc1e      	bgt.n	801c2ac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801c26e:	2020      	movs	r0, #32
 801c270:	b122      	cbz	r2, 801c27c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe6>
 801c272:	6829      	ldr	r1, [r5, #0]
 801c274:	3a01      	subs	r2, #1
 801c276:	428e      	cmp	r6, r1
 801c278:	b292      	uxth	r2, r2
 801c27a:	dc21      	bgt.n	801c2c0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x12a>
 801c27c:	b005      	add	sp, #20
 801c27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c282:	2a73      	cmp	r2, #115	@ 0x73
 801c284:	d003      	beq.n	801c28e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf8>
 801c286:	2a78      	cmp	r2, #120	@ 0x78
 801c288:	d0ac      	beq.n	801c1e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801c28a:	2a6f      	cmp	r2, #111	@ 0x6f
 801c28c:	e7a9      	b.n	801c1e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4c>
 801c28e:	2c00      	cmp	r4, #0
 801c290:	d0bd      	beq.n	801c20e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801c292:	4286      	cmp	r6, r0
 801c294:	da00      	bge.n	801c298 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801c296:	b2b0      	uxth	r0, r6
 801c298:	2400      	movs	r4, #0
 801c29a:	e7b8      	b.n	801c20e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801c29c:	2400      	movs	r4, #0
 801c29e:	e7b4      	b.n	801c20a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x74>
 801c2a0:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801c2a4:	682b      	ldr	r3, [r5, #0]
 801c2a6:	3301      	adds	r3, #1
 801c2a8:	602b      	str	r3, [r5, #0]
 801c2aa:	e7d0      	b.n	801c24e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb8>
 801c2ac:	1c9c      	adds	r4, r3, #2
 801c2ae:	f8c9 4000 	str.w	r4, [r9]
 801c2b2:	881b      	ldrh	r3, [r3, #0]
 801c2b4:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 801c2b8:	682b      	ldr	r3, [r5, #0]
 801c2ba:	3301      	adds	r3, #1
 801c2bc:	602b      	str	r3, [r5, #0]
 801c2be:	e7cc      	b.n	801c25a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801c2c0:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 801c2c4:	682b      	ldr	r3, [r5, #0]
 801c2c6:	3301      	adds	r3, #1
 801c2c8:	602b      	str	r3, [r5, #0]
 801c2ca:	e7d1      	b.n	801c270 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xda>
 801c2cc:	2a00      	cmp	r2, #0
 801c2ce:	d0b1      	beq.n	801c234 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801c2d0:	f04f 0e20 	mov.w	lr, #32
 801c2d4:	6829      	ldr	r1, [r5, #0]
 801c2d6:	3a01      	subs	r2, #1
 801c2d8:	42b1      	cmp	r1, r6
 801c2da:	b292      	uxth	r2, r2
 801c2dc:	daa9      	bge.n	801c232 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801c2de:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801c2e2:	682b      	ldr	r3, [r5, #0]
 801c2e4:	3301      	adds	r3, #1
 801c2e6:	602b      	str	r3, [r5, #0]
 801c2e8:	2a00      	cmp	r2, #0
 801c2ea:	d1f3      	bne.n	801c2d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x13e>
 801c2ec:	e7a2      	b.n	801c234 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>

0801c2ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801c2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2f2:	f8dd e018 	ldr.w	lr, [sp, #24]
 801c2f6:	4604      	mov	r4, r0
 801c2f8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c2fc:	2000      	movs	r0, #0
 801c2fe:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801c300:	f04f 0801 	mov.w	r8, #1
 801c304:	9f08      	ldr	r7, [sp, #32]
 801c306:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c308:	8008      	strh	r0, [r1, #0]
 801c30a:	7010      	strb	r0, [r2, #0]
 801c30c:	7018      	strb	r0, [r3, #0]
 801c30e:	f88e 0000 	strb.w	r0, [lr]
 801c312:	f88c 0000 	strb.w	r0, [ip]
 801c316:	7030      	strb	r0, [r6, #0]
 801c318:	6820      	ldr	r0, [r4, #0]
 801c31a:	8800      	ldrh	r0, [r0, #0]
 801c31c:	b190      	cbz	r0, 801c344 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801c31e:	282b      	cmp	r0, #43	@ 0x2b
 801c320:	d001      	beq.n	801c326 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x38>
 801c322:	2820      	cmp	r0, #32
 801c324:	d104      	bne.n	801c330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x42>
 801c326:	8008      	strh	r0, [r1, #0]
 801c328:	6820      	ldr	r0, [r4, #0]
 801c32a:	3002      	adds	r0, #2
 801c32c:	6020      	str	r0, [r4, #0]
 801c32e:	e7f3      	b.n	801c318 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x2a>
 801c330:	282d      	cmp	r0, #45	@ 0x2d
 801c332:	d102      	bne.n	801c33a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x4c>
 801c334:	f882 8000 	strb.w	r8, [r2]
 801c338:	e7f6      	b.n	801c328 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801c33a:	2823      	cmp	r0, #35	@ 0x23
 801c33c:	d102      	bne.n	801c344 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801c33e:	f883 8000 	strb.w	r8, [r3]
 801c342:	e7f1      	b.n	801c328 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801c344:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c348:	2b09      	cmp	r3, #9
 801c34a:	d901      	bls.n	801c350 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x62>
 801c34c:	282a      	cmp	r0, #42	@ 0x2a
 801c34e:	d114      	bne.n	801c37a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801c350:	2201      	movs	r2, #1
 801c352:	f88c 2000 	strb.w	r2, [ip]
 801c356:	6823      	ldr	r3, [r4, #0]
 801c358:	8819      	ldrh	r1, [r3, #0]
 801c35a:	2930      	cmp	r1, #48	@ 0x30
 801c35c:	bf02      	ittt	eq
 801c35e:	3302      	addeq	r3, #2
 801c360:	6023      	streq	r3, [r4, #0]
 801c362:	f88e 2000 	strbeq.w	r2, [lr]
 801c366:	6820      	ldr	r0, [r4, #0]
 801c368:	8803      	ldrh	r3, [r0, #0]
 801c36a:	2b2a      	cmp	r3, #42	@ 0x2a
 801c36c:	d11e      	bne.n	801c3ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xbe>
 801c36e:	f04f 33ff 	mov.w	r3, #4294967295
 801c372:	603b      	str	r3, [r7, #0]
 801c374:	6823      	ldr	r3, [r4, #0]
 801c376:	3302      	adds	r3, #2
 801c378:	6023      	str	r3, [r4, #0]
 801c37a:	6823      	ldr	r3, [r4, #0]
 801c37c:	881b      	ldrh	r3, [r3, #0]
 801c37e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c380:	d112      	bne.n	801c3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801c382:	2301      	movs	r3, #1
 801c384:	7033      	strb	r3, [r6, #0]
 801c386:	6823      	ldr	r3, [r4, #0]
 801c388:	1c98      	adds	r0, r3, #2
 801c38a:	6020      	str	r0, [r4, #0]
 801c38c:	885b      	ldrh	r3, [r3, #2]
 801c38e:	2b2a      	cmp	r3, #42	@ 0x2a
 801c390:	d118      	bne.n	801c3c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
 801c392:	f04f 33ff 	mov.w	r3, #4294967295
 801c396:	602b      	str	r3, [r5, #0]
 801c398:	6823      	ldr	r3, [r4, #0]
 801c39a:	3302      	adds	r3, #2
 801c39c:	6023      	str	r3, [r4, #0]
 801c39e:	682b      	ldr	r3, [r5, #0]
 801c3a0:	2b06      	cmp	r3, #6
 801c3a2:	bfa8      	it	ge
 801c3a4:	2306      	movge	r3, #6
 801c3a6:	602b      	str	r3, [r5, #0]
 801c3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3ac:	f7ff fee4 	bl	801c178 <_ZN8touchgfx7Unicode4atoiEPKt>
 801c3b0:	6038      	str	r0, [r7, #0]
 801c3b2:	6822      	ldr	r2, [r4, #0]
 801c3b4:	8813      	ldrh	r3, [r2, #0]
 801c3b6:	3b30      	subs	r3, #48	@ 0x30
 801c3b8:	b29b      	uxth	r3, r3
 801c3ba:	2b09      	cmp	r3, #9
 801c3bc:	d8dd      	bhi.n	801c37a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801c3be:	3202      	adds	r2, #2
 801c3c0:	6022      	str	r2, [r4, #0]
 801c3c2:	e7f6      	b.n	801c3b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc4>
 801c3c4:	f7ff fed8 	bl	801c178 <_ZN8touchgfx7Unicode4atoiEPKt>
 801c3c8:	6028      	str	r0, [r5, #0]
 801c3ca:	6822      	ldr	r2, [r4, #0]
 801c3cc:	8813      	ldrh	r3, [r2, #0]
 801c3ce:	3b30      	subs	r3, #48	@ 0x30
 801c3d0:	b29b      	uxth	r3, r3
 801c3d2:	2b09      	cmp	r3, #9
 801c3d4:	d8e3      	bhi.n	801c39e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb0>
 801c3d6:	3202      	adds	r2, #2
 801c3d8:	6022      	str	r2, [r4, #0]
 801c3da:	e7f6      	b.n	801c3ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xdc>

0801c3dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3e0:	b0a3      	sub	sp, #140	@ 0x8c
 801c3e2:	2500      	movs	r5, #0
 801c3e4:	4606      	mov	r6, r0
 801c3e6:	4689      	mov	r9, r1
 801c3e8:	af11      	add	r7, sp, #68	@ 0x44
 801c3ea:	9209      	str	r2, [sp, #36]	@ 0x24
 801c3ec:	4629      	mov	r1, r5
 801c3ee:	2242      	movs	r2, #66	@ 0x42
 801c3f0:	4638      	mov	r0, r7
 801c3f2:	461c      	mov	r4, r3
 801c3f4:	950d      	str	r5, [sp, #52]	@ 0x34
 801c3f6:	f7fe f884 	bl	801a502 <_ZN8touchgfx6memsetEPvhm>
 801c3fa:	b116      	cbz	r6, 801c402 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801c3fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c3fe:	b921      	cbnz	r1, 801c40a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2e>
 801c400:	8031      	strh	r1, [r6, #0]
 801c402:	4630      	mov	r0, r6
 801c404:	b023      	add	sp, #140	@ 0x8c
 801c406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c40a:	f8df a250 	ldr.w	sl, [pc, #592]	@ 801c65c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x280>
 801c40e:	f109 3bff 	add.w	fp, r9, #4294967295
 801c412:	f8da 0000 	ldr.w	r0, [sl]
 801c416:	6803      	ldr	r3, [r0, #0]
 801c418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c41a:	4798      	blx	r3
 801c41c:	9009      	str	r0, [sp, #36]	@ 0x24
 801c41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c420:	881a      	ldrh	r2, [r3, #0]
 801c422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c424:	2a00      	cmp	r2, #0
 801c426:	f000 80c2 	beq.w	801c5ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 801c42a:	459b      	cmp	fp, r3
 801c42c:	f340 80bf 	ble.w	801c5ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 801c430:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801c434:	f8b8 2000 	ldrh.w	r2, [r8]
 801c438:	2a00      	cmp	r2, #0
 801c43a:	d0f0      	beq.n	801c41e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801c43c:	2a25      	cmp	r2, #37	@ 0x25
 801c43e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c440:	f000 80b9 	beq.w	801c5b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 801c444:	459b      	cmp	fp, r3
 801c446:	f340 80b6 	ble.w	801c5b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 801c44a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c44e:	f108 0202 	add.w	r2, r8, #2
 801c452:	3301      	adds	r3, #1
 801c454:	9209      	str	r2, [sp, #36]	@ 0x24
 801c456:	930d      	str	r3, [sp, #52]	@ 0x34
 801c458:	e7ea      	b.n	801c430 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x54>
 801c45a:	3b63      	subs	r3, #99	@ 0x63
 801c45c:	2b01      	cmp	r3, #1
 801c45e:	f200 80f2 	bhi.w	801c646 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 801c462:	9710      	str	r7, [sp, #64]	@ 0x40
 801c464:	8813      	ldrh	r3, [r2, #0]
 801c466:	2b69      	cmp	r3, #105	@ 0x69
 801c468:	d068      	beq.n	801c53c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801c46a:	d81c      	bhi.n	801c4a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xca>
 801c46c:	2b63      	cmp	r3, #99	@ 0x63
 801c46e:	d031      	beq.n	801c4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf8>
 801c470:	2b64      	cmp	r3, #100	@ 0x64
 801c472:	d063      	beq.n	801c53c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801c474:	2b58      	cmp	r3, #88	@ 0x58
 801c476:	f000 8082 	beq.w	801c57e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a2>
 801c47a:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801c47e:	46a0      	mov	r8, r4
 801c480:	e02f      	b.n	801c4e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801c482:	2b73      	cmp	r3, #115	@ 0x73
 801c484:	d0ed      	beq.n	801c462 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801c486:	d803      	bhi.n	801c490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb4>
 801c488:	2b6f      	cmp	r3, #111	@ 0x6f
 801c48a:	f040 80dc 	bne.w	801c646 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 801c48e:	e7e8      	b.n	801c462 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801c490:	2b75      	cmp	r3, #117	@ 0x75
 801c492:	d0e6      	beq.n	801c462 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801c494:	2b78      	cmp	r3, #120	@ 0x78
 801c496:	e7f8      	b.n	801c48a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xae>
 801c498:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c49a:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4a0:	3302      	adds	r3, #2
 801c4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c4a4:	e7bb      	b.n	801c41e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801c4a6:	2b73      	cmp	r3, #115	@ 0x73
 801c4a8:	d037      	beq.n	801c51a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x13e>
 801c4aa:	d808      	bhi.n	801c4be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe2>
 801c4ac:	2b6f      	cmp	r3, #111	@ 0x6f
 801c4ae:	d1e4      	bne.n	801c47a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801c4b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c4b2:	f104 0804 	add.w	r8, r4, #4
 801c4b6:	2308      	movs	r3, #8
 801c4b8:	eba9 0202 	sub.w	r2, r9, r2
 801c4bc:	e059      	b.n	801c572 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801c4be:	2b75      	cmp	r3, #117	@ 0x75
 801c4c0:	d051      	beq.n	801c566 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x18a>
 801c4c2:	2b78      	cmp	r3, #120	@ 0x78
 801c4c4:	d1d9      	bne.n	801c47a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801c4c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c4c8:	f104 0804 	add.w	r8, r4, #4
 801c4cc:	2310      	movs	r3, #16
 801c4ce:	eba9 0202 	sub.w	r2, r9, r2
 801c4d2:	e04e      	b.n	801c572 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801c4d4:	7823      	ldrb	r3, [r4, #0]
 801c4d6:	f104 0804 	add.w	r8, r4, #4
 801c4da:	f8ad 5046 	strh.w	r5, [sp, #70]	@ 0x46
 801c4de:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801c4e2:	aa0d      	add	r2, sp, #52	@ 0x34
 801c4e4:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801c4e8:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801c4ec:	a810      	add	r0, sp, #64	@ 0x40
 801c4ee:	9205      	str	r2, [sp, #20]
 801c4f0:	4644      	mov	r4, r8
 801c4f2:	f89d 202d 	ldrb.w	r2, [sp, #45]	@ 0x2d
 801c4f6:	9607      	str	r6, [sp, #28]
 801c4f8:	9204      	str	r2, [sp, #16]
 801c4fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c4fc:	f8cd 9018 	str.w	r9, [sp, #24]
 801c500:	9203      	str	r2, [sp, #12]
 801c502:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 801c506:	9202      	str	r2, [sp, #8]
 801c508:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c50a:	9201      	str	r2, [sp, #4]
 801c50c:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801c510:	9200      	str	r2, [sp, #0]
 801c512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c514:	f7ff fe3f 	bl	801c196 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801c518:	e7c1      	b.n	801c49e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 801c51a:	f8da 0000 	ldr.w	r0, [sl]
 801c51e:	f104 0804 	add.w	r8, r4, #4
 801c522:	6821      	ldr	r1, [r4, #0]
 801c524:	6803      	ldr	r3, [r0, #0]
 801c526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c528:	4798      	blx	r3
 801c52a:	9010      	str	r0, [sp, #64]	@ 0x40
 801c52c:	f8da 0000 	ldr.w	r0, [sl]
 801c530:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c532:	6803      	ldr	r3, [r0, #0]
 801c534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c536:	4798      	blx	r3
 801c538:	9009      	str	r0, [sp, #36]	@ 0x24
 801c53a:	e7d2      	b.n	801c4e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801c53c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c53e:	230a      	movs	r3, #10
 801c540:	4639      	mov	r1, r7
 801c542:	6820      	ldr	r0, [r4, #0]
 801c544:	eba9 0202 	sub.w	r2, r9, r2
 801c548:	f104 0804 	add.w	r8, r4, #4
 801c54c:	b292      	uxth	r2, r2
 801c54e:	f7ff fde1 	bl	801c114 <_ZN8touchgfx7Unicode4itoaElPtti>
 801c552:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801c556:	2b2d      	cmp	r3, #45	@ 0x2d
 801c558:	d1c3      	bne.n	801c4e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801c55a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801c55e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c560:	3302      	adds	r3, #2
 801c562:	9310      	str	r3, [sp, #64]	@ 0x40
 801c564:	e7bd      	b.n	801c4e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801c566:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c568:	f104 0804 	add.w	r8, r4, #4
 801c56c:	230a      	movs	r3, #10
 801c56e:	eba9 0202 	sub.w	r2, r9, r2
 801c572:	b292      	uxth	r2, r2
 801c574:	4639      	mov	r1, r7
 801c576:	6820      	ldr	r0, [r4, #0]
 801c578:	f7ff fdaf 	bl	801c0da <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801c57c:	e7b1      	b.n	801c4e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801c57e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c580:	2310      	movs	r3, #16
 801c582:	4639      	mov	r1, r7
 801c584:	6820      	ldr	r0, [r4, #0]
 801c586:	eba9 0202 	sub.w	r2, r9, r2
 801c58a:	f104 0804 	add.w	r8, r4, #4
 801c58e:	b292      	uxth	r2, r2
 801c590:	f7ff fda3 	bl	801c0da <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801c594:	463a      	mov	r2, r7
 801c596:	8813      	ldrh	r3, [r2, #0]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d0a2      	beq.n	801c4e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801c59c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801c5a0:	3202      	adds	r2, #2
 801c5a2:	2919      	cmp	r1, #25
 801c5a4:	bf9c      	itt	ls
 801c5a6:	3b20      	subls	r3, #32
 801c5a8:	f822 3c02 	strhls.w	r3, [r2, #-2]
 801c5ac:	e7f3      	b.n	801c596 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1ba>
 801c5ae:	2200      	movs	r2, #0
 801c5b0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c5b4:	e725      	b.n	801c402 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801c5b6:	459b      	cmp	fp, r3
 801c5b8:	f77f af31 	ble.w	801c41e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801c5bc:	f108 0302 	add.w	r3, r8, #2
 801c5c0:	f10d 022d 	add.w	r2, sp, #45	@ 0x2d
 801c5c4:	f10d 0132 	add.w	r1, sp, #50	@ 0x32
 801c5c8:	a809      	add	r0, sp, #36	@ 0x24
 801c5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5cc:	ab0f      	add	r3, sp, #60	@ 0x3c
 801c5ce:	f8ad 5032 	strh.w	r5, [sp, #50]	@ 0x32
 801c5d2:	9304      	str	r3, [sp, #16]
 801c5d4:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801c5d8:	f88d 502d 	strb.w	r5, [sp, #45]	@ 0x2d
 801c5dc:	9303      	str	r3, [sp, #12]
 801c5de:	ab0e      	add	r3, sp, #56	@ 0x38
 801c5e0:	f88d 502e 	strb.w	r5, [sp, #46]	@ 0x2e
 801c5e4:	9302      	str	r3, [sp, #8]
 801c5e6:	ab0c      	add	r3, sp, #48	@ 0x30
 801c5e8:	f88d 502f 	strb.w	r5, [sp, #47]	@ 0x2f
 801c5ec:	9301      	str	r3, [sp, #4]
 801c5ee:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801c5f2:	f88d 5030 	strb.w	r5, [sp, #48]	@ 0x30
 801c5f6:	9300      	str	r3, [sp, #0]
 801c5f8:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801c5fc:	950e      	str	r5, [sp, #56]	@ 0x38
 801c5fe:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 801c602:	950f      	str	r5, [sp, #60]	@ 0x3c
 801c604:	f7ff fe73 	bl	801c2ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801c608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c60a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	bfbf      	itttt	lt
 801c610:	6823      	ldrlt	r3, [r4, #0]
 801c612:	3404      	addlt	r4, #4
 801c614:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c618:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801c61a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	bfbf      	itttt	lt
 801c620:	6823      	ldrlt	r3, [r4, #0]
 801c622:	3404      	addlt	r4, #4
 801c624:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c628:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801c62a:	8813      	ldrh	r3, [r2, #0]
 801c62c:	2b69      	cmp	r3, #105	@ 0x69
 801c62e:	f43f af18 	beq.w	801c462 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801c632:	f63f af26 	bhi.w	801c482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa6>
 801c636:	2b58      	cmp	r3, #88	@ 0x58
 801c638:	f43f af13 	beq.w	801c462 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801c63c:	f63f af0d 	bhi.w	801c45a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x7e>
 801c640:	2b25      	cmp	r3, #37	@ 0x25
 801c642:	f43f af29 	beq.w	801c498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xbc>
 801c646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c648:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801c64c:	f8b8 2000 	ldrh.w	r2, [r8]
 801c650:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c654:	3301      	adds	r3, #1
 801c656:	930d      	str	r3, [sp, #52]	@ 0x34
 801c658:	e721      	b.n	801c49e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 801c65a:	bf00      	nop
 801c65c:	20024e34 	.word	0x20024e34

0801c660 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801c660:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c662:	4605      	mov	r5, r0
 801c664:	b0a1      	sub	sp, #132	@ 0x84
 801c666:	4610      	mov	r0, r2
 801c668:	460e      	mov	r6, r1
 801c66a:	4614      	mov	r4, r2
 801c66c:	461f      	mov	r7, r3
 801c66e:	f7ff fd16 	bl	801c09e <_ZN8touchgfx7Unicode6strlenEPKc>
 801c672:	283f      	cmp	r0, #63	@ 0x3f
 801c674:	dd06      	ble.n	801c684 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801c676:	4b0a      	ldr	r3, [pc, #40]	@ (801c6a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801c678:	f240 11b9 	movw	r1, #441	@ 0x1b9
 801c67c:	4a09      	ldr	r2, [pc, #36]	@ (801c6a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801c67e:	480a      	ldr	r0, [pc, #40]	@ (801c6a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801c680:	f003 fb78 	bl	801fd74 <__assert_func>
 801c684:	4621      	mov	r1, r4
 801c686:	2240      	movs	r2, #64	@ 0x40
 801c688:	4668      	mov	r0, sp
 801c68a:	f7ff fd14 	bl	801c0b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c68e:	463b      	mov	r3, r7
 801c690:	466a      	mov	r2, sp
 801c692:	4631      	mov	r1, r6
 801c694:	4628      	mov	r0, r5
 801c696:	f7ff fea1 	bl	801c3dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801c69a:	b021      	add	sp, #132	@ 0x84
 801c69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c69e:	bf00      	nop
 801c6a0:	080265d0 	.word	0x080265d0
 801c6a4:	08026613 	.word	0x08026613
 801c6a8:	080265ed 	.word	0x080265ed

0801c6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801c6ac:	b40c      	push	{r2, r3}
 801c6ae:	b507      	push	{r0, r1, r2, lr}
 801c6b0:	ab04      	add	r3, sp, #16
 801c6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c6b6:	9301      	str	r3, [sp, #4]
 801c6b8:	f7ff ffd2 	bl	801c660 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801c6bc:	b003      	add	sp, #12
 801c6be:	f85d eb04 	ldr.w	lr, [sp], #4
 801c6c2:	b002      	add	sp, #8
 801c6c4:	4770      	bx	lr
	...

0801c6c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
 801c6c8:	4b26      	ldr	r3, [pc, #152]	@ (801c764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x9c>)
 801c6ca:	b570      	push	{r4, r5, r6, lr}
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	4605      	mov	r5, r0
 801c6d0:	460c      	mov	r4, r1
 801c6d2:	4616      	mov	r6, r2
 801c6d4:	b92b      	cbnz	r3, 801c6e2 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x1a>
 801c6d6:	4b24      	ldr	r3, [pc, #144]	@ (801c768 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa0>)
 801c6d8:	2116      	movs	r1, #22
 801c6da:	4a24      	ldr	r2, [pc, #144]	@ (801c76c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 801c6dc:	4824      	ldr	r0, [pc, #144]	@ (801c770 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa8>)
 801c6de:	f003 fb49 	bl	801fd74 <__assert_func>
 801c6e2:	6898      	ldr	r0, [r3, #8]
 801c6e4:	6803      	ldr	r3, [r0, #0]
 801c6e6:	6a1b      	ldr	r3, [r3, #32]
 801c6e8:	4798      	blx	r3
 801c6ea:	2810      	cmp	r0, #16
 801c6ec:	d109      	bne.n	801c702 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3a>
 801c6ee:	00e0      	lsls	r0, r4, #3
 801c6f0:	022c      	lsls	r4, r5, #8
 801c6f2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801c6f6:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801c6fa:	ea40 00d6 	orr.w	r0, r0, r6, lsr #3
 801c6fe:	4320      	orrs	r0, r4
 801c700:	bd70      	pop	{r4, r5, r6, pc}
 801c702:	2818      	cmp	r0, #24
 801c704:	d104      	bne.n	801c710 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>
 801c706:	ea46 2004 	orr.w	r0, r6, r4, lsl #8
 801c70a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 801c70e:	bd70      	pop	{r4, r5, r6, pc}
 801c710:	2804      	cmp	r0, #4
 801c712:	f04f 01b6 	mov.w	r1, #182	@ 0xb6
 801c716:	d109      	bne.n	801c72c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x64>
 801c718:	fb14 f401 	smulbb	r4, r4, r1
 801c71c:	2036      	movs	r0, #54	@ 0x36
 801c71e:	fb10 4405 	smlabb	r4, r0, r5, r4
 801c722:	2013      	movs	r0, #19
 801c724:	fb10 4006 	smlabb	r0, r0, r6, r4
 801c728:	1300      	asrs	r0, r0, #12
 801c72a:	bd70      	pop	{r4, r5, r6, pc}
 801c72c:	2802      	cmp	r0, #2
 801c72e:	d109      	bne.n	801c744 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x7c>
 801c730:	fb14 f401 	smulbb	r4, r4, r1
 801c734:	2036      	movs	r0, #54	@ 0x36
 801c736:	fb10 4405 	smlabb	r4, r0, r5, r4
 801c73a:	2013      	movs	r0, #19
 801c73c:	fb10 4006 	smlabb	r0, r0, r6, r4
 801c740:	1380      	asrs	r0, r0, #14
 801c742:	bd70      	pop	{r4, r5, r6, pc}
 801c744:	2801      	cmp	r0, #1
 801c746:	d109      	bne.n	801c75c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x94>
 801c748:	fb14 f401 	smulbb	r4, r4, r1
 801c74c:	2036      	movs	r0, #54	@ 0x36
 801c74e:	fb10 4405 	smlabb	r4, r0, r5, r4
 801c752:	2013      	movs	r0, #19
 801c754:	fb10 4006 	smlabb	r0, r0, r6, r4
 801c758:	13c0      	asrs	r0, r0, #15
 801c75a:	bd70      	pop	{r4, r5, r6, pc}
 801c75c:	4b05      	ldr	r3, [pc, #20]	@ (801c774 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xac>)
 801c75e:	212f      	movs	r1, #47	@ 0x2f
 801c760:	4a02      	ldr	r2, [pc, #8]	@ (801c76c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 801c762:	e7bb      	b.n	801c6dc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x14>
 801c764:	20024e34 	.word	0x20024e34
 801c768:	08026698 	.word	0x08026698
 801c76c:	0802671b 	.word	0x0802671b
 801c770:	080266db 	.word	0x080266db
 801c774:	080266ff 	.word	0x080266ff

0801c778 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c778:	4b01      	ldr	r3, [pc, #4]	@ (801c780 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c77a:	6018      	str	r0, [r3, #0]
 801c77c:	4770      	bx	lr
 801c77e:	bf00      	nop
 801c780:	20024ec4 	.word	0x20024ec4

0801c784 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c788:	4f24      	ldr	r7, [pc, #144]	@ (801c81c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801c78a:	683b      	ldr	r3, [r7, #0]
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d042      	beq.n	801c816 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801c790:	4923      	ldr	r1, [pc, #140]	@ (801c820 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801c792:	4d24      	ldr	r5, [pc, #144]	@ (801c824 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801c794:	8808      	ldrh	r0, [r1, #0]
 801c796:	882a      	ldrh	r2, [r5, #0]
 801c798:	4e23      	ldr	r6, [pc, #140]	@ (801c828 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801c79a:	4410      	add	r0, r2
 801c79c:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 801c7a0:	4c22      	ldr	r4, [pc, #136]	@ (801c82c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c7a2:	1c41      	adds	r1, r0, #1
 801c7a4:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801c7a8:	f021 0101 	bic.w	r1, r1, #1
 801c7ac:	eb03 0208 	add.w	r2, r3, r8
 801c7b0:	0409      	lsls	r1, r1, #16
 801c7b2:	6032      	str	r2, [r6, #0]
 801c7b4:	0c09      	lsrs	r1, r1, #16
 801c7b6:	0049      	lsls	r1, r1, #1
 801c7b8:	eb08 0c01 	add.w	ip, r8, r1
 801c7bc:	eb03 020c 	add.w	r2, r3, ip
 801c7c0:	44f4      	add	ip, lr
 801c7c2:	6022      	str	r2, [r4, #0]
 801c7c4:	4463      	add	r3, ip
 801c7c6:	4a1a      	ldr	r2, [pc, #104]	@ (801c830 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c7c8:	6013      	str	r3, [r2, #0]
 801c7ca:	2300      	movs	r3, #0
 801c7cc:	4a19      	ldr	r2, [pc, #100]	@ (801c834 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c7ce:	8013      	strh	r3, [r2, #0]
 801c7d0:	4a19      	ldr	r2, [pc, #100]	@ (801c838 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c7d2:	6812      	ldr	r2, [r2, #0]
 801c7d4:	eba2 0208 	sub.w	r2, r2, r8
 801c7d8:	1a52      	subs	r2, r2, r1
 801c7da:	4918      	ldr	r1, [pc, #96]	@ (801c83c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c7dc:	eba2 020e 	sub.w	r2, r2, lr
 801c7e0:	469e      	mov	lr, r3
 801c7e2:	600a      	str	r2, [r1, #0]
 801c7e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801c7e8:	4a15      	ldr	r2, [pc, #84]	@ (801c840 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801c7ea:	8013      	strh	r3, [r2, #0]
 801c7ec:	4283      	cmp	r3, r0
 801c7ee:	d007      	beq.n	801c800 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 801c7f0:	683a      	ldr	r2, [r7, #0]
 801c7f2:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 801c7f6:	6832      	ldr	r2, [r6, #0]
 801c7f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801c7fc:	3301      	adds	r3, #1
 801c7fe:	e7f5      	b.n	801c7ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 801c800:	2300      	movs	r3, #0
 801c802:	882d      	ldrh	r5, [r5, #0]
 801c804:	6820      	ldr	r0, [r4, #0]
 801c806:	4619      	mov	r1, r3
 801c808:	42ab      	cmp	r3, r5
 801c80a:	d204      	bcs.n	801c816 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801c80c:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 801c810:	3301      	adds	r3, #1
 801c812:	7391      	strb	r1, [r2, #14]
 801c814:	e7f8      	b.n	801c808 <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 801c816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c81a:	bf00      	nop
 801c81c:	20024ec8 	.word	0x20024ec8
 801c820:	20024ee4 	.word	0x20024ee4
 801c824:	20024ee8 	.word	0x20024ee8
 801c828:	20024edc 	.word	0x20024edc
 801c82c:	20024ecc 	.word	0x20024ecc
 801c830:	20024ed4 	.word	0x20024ed4
 801c834:	20024ee6 	.word	0x20024ee6
 801c838:	20024ed0 	.word	0x20024ed0
 801c83c:	20024ee0 	.word	0x20024ee0
 801c840:	20024ed8 	.word	0x20024ed8

0801c844 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c844:	4b0f      	ldr	r3, [pc, #60]	@ (801c884 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 801c846:	b510      	push	{r4, lr}
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	b9d3      	cbnz	r3, 801c882 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801c84c:	b1c9      	cbz	r1, 801c882 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801c84e:	4b0e      	ldr	r3, [pc, #56]	@ (801c888 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801c850:	2406      	movs	r4, #6
 801c852:	801a      	strh	r2, [r3, #0]
 801c854:	b292      	uxth	r2, r2
 801c856:	4b0d      	ldr	r3, [pc, #52]	@ (801c88c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801c858:	881b      	ldrh	r3, [r3, #0]
 801c85a:	4413      	add	r3, r2
 801c85c:	0112      	lsls	r2, r2, #4
 801c85e:	fb04 2203 	mla	r2, r4, r3, r2
 801c862:	4291      	cmp	r1, r2
 801c864:	d805      	bhi.n	801c872 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 801c866:	4b0a      	ldr	r3, [pc, #40]	@ (801c890 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801c868:	2138      	movs	r1, #56	@ 0x38
 801c86a:	4a0a      	ldr	r2, [pc, #40]	@ (801c894 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801c86c:	480a      	ldr	r0, [pc, #40]	@ (801c898 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801c86e:	f003 fa81 	bl	801fd74 <__assert_func>
 801c872:	4b0a      	ldr	r3, [pc, #40]	@ (801c89c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801c874:	6019      	str	r1, [r3, #0]
 801c876:	4b0a      	ldr	r3, [pc, #40]	@ (801c8a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801c878:	6018      	str	r0, [r3, #0]
 801c87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c87e:	f7ff bf81 	b.w	801c784 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c882:	bd10      	pop	{r4, pc}
 801c884:	20024ed4 	.word	0x20024ed4
 801c888:	20024ee8 	.word	0x20024ee8
 801c88c:	20024ee4 	.word	0x20024ee4
 801c890:	080267db 	.word	0x080267db
 801c894:	08026834 	.word	0x08026834
 801c898:	080267b6 	.word	0x080267b6
 801c89c:	20024ed0 	.word	0x20024ed0
 801c8a0:	20024ec8 	.word	0x20024ec8

0801c8a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c8a4:	b470      	push	{r4, r5, r6}
 801c8a6:	4c07      	ldr	r4, [pc, #28]	@ (801c8c4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c8a8:	4605      	mov	r5, r0
 801c8aa:	4610      	mov	r0, r2
 801c8ac:	9a03      	ldr	r2, [sp, #12]
 801c8ae:	6826      	ldr	r6, [r4, #0]
 801c8b0:	b936      	cbnz	r6, 801c8c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801c8b2:	6025      	str	r5, [r4, #0]
 801c8b4:	4c04      	ldr	r4, [pc, #16]	@ (801c8c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801c8b6:	8021      	strh	r1, [r4, #0]
 801c8b8:	4619      	mov	r1, r3
 801c8ba:	bc70      	pop	{r4, r5, r6}
 801c8bc:	f7ff bfc2 	b.w	801c844 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801c8c0:	bc70      	pop	{r4, r5, r6}
 801c8c2:	4770      	bx	lr
 801c8c4:	20024eec 	.word	0x20024eec
 801c8c8:	20024ee4 	.word	0x20024ee4

0801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c8cc:	b508      	push	{r3, lr}
 801c8ce:	4b13      	ldr	r3, [pc, #76]	@ (801c91c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801c8d0:	6819      	ldr	r1, [r3, #0]
 801c8d2:	b931      	cbnz	r1, 801c8e2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801c8d4:	4b12      	ldr	r3, [pc, #72]	@ (801c920 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801c8d6:	f44f 710d 	mov.w	r1, #564	@ 0x234
 801c8da:	4a12      	ldr	r2, [pc, #72]	@ (801c924 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801c8dc:	4812      	ldr	r0, [pc, #72]	@ (801c928 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801c8de:	f003 fa49 	bl	801fd74 <__assert_func>
 801c8e2:	4a12      	ldr	r2, [pc, #72]	@ (801c92c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c8e4:	8803      	ldrh	r3, [r0, #0]
 801c8e6:	8812      	ldrh	r2, [r2, #0]
 801c8e8:	4293      	cmp	r3, r2
 801c8ea:	da04      	bge.n	801c8f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801c8ec:	2214      	movs	r2, #20
 801c8ee:	fb02 1303 	mla	r3, r2, r3, r1
 801c8f2:	8918      	ldrh	r0, [r3, #8]
 801c8f4:	bd08      	pop	{r3, pc}
 801c8f6:	490e      	ldr	r1, [pc, #56]	@ (801c930 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c8f8:	8809      	ldrh	r1, [r1, #0]
 801c8fa:	4411      	add	r1, r2
 801c8fc:	428b      	cmp	r3, r1
 801c8fe:	da05      	bge.n	801c90c <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 801c900:	1a9b      	subs	r3, r3, r2
 801c902:	4a0c      	ldr	r2, [pc, #48]	@ (801c934 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801c904:	6812      	ldr	r2, [r2, #0]
 801c906:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801c90a:	e7f2      	b.n	801c8f2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801c90c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801c910:	4293      	cmp	r3, r2
 801c912:	bf06      	itte	eq
 801c914:	4b08      	ldreq	r3, [pc, #32]	@ (801c938 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801c916:	8818      	ldrheq	r0, [r3, #0]
 801c918:	2000      	movne	r0, #0
 801c91a:	bd08      	pop	{r3, pc}
 801c91c:	20024eec 	.word	0x20024eec
 801c920:	08024948 	.word	0x08024948
 801c924:	080268e1 	.word	0x080268e1
 801c928:	080267b6 	.word	0x080267b6
 801c92c:	20024ee4 	.word	0x20024ee4
 801c930:	20024ee8 	.word	0x20024ee8
 801c934:	20024ecc 	.word	0x20024ecc
 801c938:	20024e28 	.word	0x20024e28

0801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801c93c:	b508      	push	{r3, lr}
 801c93e:	4b13      	ldr	r3, [pc, #76]	@ (801c98c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801c940:	6819      	ldr	r1, [r3, #0]
 801c942:	b931      	cbnz	r1, 801c952 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801c944:	4b12      	ldr	r3, [pc, #72]	@ (801c990 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801c946:	f44f 7112 	mov.w	r1, #584	@ 0x248
 801c94a:	4a12      	ldr	r2, [pc, #72]	@ (801c994 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801c94c:	4812      	ldr	r0, [pc, #72]	@ (801c998 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801c94e:	f003 fa11 	bl	801fd74 <__assert_func>
 801c952:	4a12      	ldr	r2, [pc, #72]	@ (801c99c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c954:	8803      	ldrh	r3, [r0, #0]
 801c956:	8812      	ldrh	r2, [r2, #0]
 801c958:	4293      	cmp	r3, r2
 801c95a:	da04      	bge.n	801c966 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801c95c:	2214      	movs	r2, #20
 801c95e:	fb02 1303 	mla	r3, r2, r3, r1
 801c962:	8958      	ldrh	r0, [r3, #10]
 801c964:	bd08      	pop	{r3, pc}
 801c966:	490e      	ldr	r1, [pc, #56]	@ (801c9a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c968:	8809      	ldrh	r1, [r1, #0]
 801c96a:	4411      	add	r1, r2
 801c96c:	428b      	cmp	r3, r1
 801c96e:	da05      	bge.n	801c97c <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 801c970:	1a9b      	subs	r3, r3, r2
 801c972:	4a0c      	ldr	r2, [pc, #48]	@ (801c9a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801c974:	6812      	ldr	r2, [r2, #0]
 801c976:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801c97a:	e7f2      	b.n	801c962 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801c97c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801c980:	4293      	cmp	r3, r2
 801c982:	bf06      	itte	eq
 801c984:	4b08      	ldreq	r3, [pc, #32]	@ (801c9a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801c986:	8818      	ldrheq	r0, [r3, #0]
 801c988:	2000      	movne	r0, #0
 801c98a:	bd08      	pop	{r3, pc}
 801c98c:	20024eec 	.word	0x20024eec
 801c990:	08024948 	.word	0x08024948
 801c994:	0802690d 	.word	0x0802690d
 801c998:	080267b6 	.word	0x080267b6
 801c99c:	20024ee4 	.word	0x20024ee4
 801c9a0:	20024ee8 	.word	0x20024ee8
 801c9a4:	20024ecc 	.word	0x20024ecc
 801c9a8:	20024e2a 	.word	0x20024e2a

0801c9ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801c9ac:	4b22      	ldr	r3, [pc, #136]	@ (801ca38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801c9ae:	b510      	push	{r4, lr}
 801c9b0:	681c      	ldr	r4, [r3, #0]
 801c9b2:	b934      	cbnz	r4, 801c9c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801c9b4:	4b21      	ldr	r3, [pc, #132]	@ (801ca3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801c9b6:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 801c9ba:	4a21      	ldr	r2, [pc, #132]	@ (801ca40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801c9bc:	4821      	ldr	r0, [pc, #132]	@ (801ca44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801c9be:	f003 f9d9 	bl	801fd74 <__assert_func>
 801c9c2:	4a21      	ldr	r2, [pc, #132]	@ (801ca48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801c9c4:	880b      	ldrh	r3, [r1, #0]
 801c9c6:	8812      	ldrh	r2, [r2, #0]
 801c9c8:	4293      	cmp	r3, r2
 801c9ca:	da10      	bge.n	801c9ee <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 801c9cc:	2214      	movs	r2, #20
 801c9ce:	fb02 4303 	mla	r3, r2, r3, r4
 801c9d2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801c9d6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801c9da:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801c9de:	8a5b      	ldrh	r3, [r3, #18]
 801c9e0:	8004      	strh	r4, [r0, #0]
 801c9e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c9e6:	8041      	strh	r1, [r0, #2]
 801c9e8:	8082      	strh	r2, [r0, #4]
 801c9ea:	80c3      	strh	r3, [r0, #6]
 801c9ec:	bd10      	pop	{r4, pc}
 801c9ee:	4917      	ldr	r1, [pc, #92]	@ (801ca4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801c9f0:	8809      	ldrh	r1, [r1, #0]
 801c9f2:	4411      	add	r1, r2
 801c9f4:	428b      	cmp	r3, r1
 801c9f6:	da09      	bge.n	801ca0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801c9f8:	1a9b      	subs	r3, r3, r2
 801c9fa:	4a15      	ldr	r2, [pc, #84]	@ (801ca50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801c9fc:	6812      	ldr	r2, [r2, #0]
 801c9fe:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801ca02:	681a      	ldr	r2, [r3, #0]
 801ca04:	6002      	str	r2, [r0, #0]
 801ca06:	685a      	ldr	r2, [r3, #4]
 801ca08:	6042      	str	r2, [r0, #4]
 801ca0a:	bd10      	pop	{r4, pc}
 801ca0c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ca10:	4293      	cmp	r3, r2
 801ca12:	d10b      	bne.n	801ca2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801ca14:	4b0f      	ldr	r3, [pc, #60]	@ (801ca54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ca16:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ca1a:	4b0f      	ldr	r3, [pc, #60]	@ (801ca58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801ca1c:	8081      	strh	r1, [r0, #4]
 801ca1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ca22:	2300      	movs	r3, #0
 801ca24:	80c2      	strh	r2, [r0, #6]
 801ca26:	8003      	strh	r3, [r0, #0]
 801ca28:	8043      	strh	r3, [r0, #2]
 801ca2a:	bd10      	pop	{r4, pc}
 801ca2c:	2300      	movs	r3, #0
 801ca2e:	8003      	strh	r3, [r0, #0]
 801ca30:	8043      	strh	r3, [r0, #2]
 801ca32:	8083      	strh	r3, [r0, #4]
 801ca34:	e7d9      	b.n	801c9ea <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 801ca36:	bf00      	nop
 801ca38:	20024eec 	.word	0x20024eec
 801ca3c:	08024948 	.word	0x08024948
 801ca40:	0802687a 	.word	0x0802687a
 801ca44:	080267b6 	.word	0x080267b6
 801ca48:	20024ee4 	.word	0x20024ee4
 801ca4c:	20024ee8 	.word	0x20024ee8
 801ca50:	20024ecc 	.word	0x20024ecc
 801ca54:	20024e28 	.word	0x20024e28
 801ca58:	20024e2a 	.word	0x20024e2a

0801ca5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ca5c:	4b16      	ldr	r3, [pc, #88]	@ (801cab8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	b333      	cbz	r3, 801cab0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801ca62:	4a16      	ldr	r2, [pc, #88]	@ (801cabc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801ca64:	8800      	ldrh	r0, [r0, #0]
 801ca66:	8812      	ldrh	r2, [r2, #0]
 801ca68:	4290      	cmp	r0, r2
 801ca6a:	da0f      	bge.n	801ca8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 801ca6c:	2214      	movs	r2, #20
 801ca6e:	fb02 3300 	mla	r3, r2, r0, r3
 801ca72:	8a19      	ldrh	r1, [r3, #16]
 801ca74:	891a      	ldrh	r2, [r3, #8]
 801ca76:	4291      	cmp	r1, r2
 801ca78:	db1c      	blt.n	801cab4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ca7a:	8a58      	ldrh	r0, [r3, #18]
 801ca7c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ca80:	895b      	ldrh	r3, [r3, #10]
 801ca82:	4298      	cmp	r0, r3
 801ca84:	bfac      	ite	ge
 801ca86:	2000      	movge	r0, #0
 801ca88:	2001      	movlt	r0, #1
 801ca8a:	4770      	bx	lr
 801ca8c:	4b0c      	ldr	r3, [pc, #48]	@ (801cac0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ca8e:	881b      	ldrh	r3, [r3, #0]
 801ca90:	4413      	add	r3, r2
 801ca92:	4298      	cmp	r0, r3
 801ca94:	da0c      	bge.n	801cab0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801ca96:	4b0b      	ldr	r3, [pc, #44]	@ (801cac4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ca98:	1a80      	subs	r0, r0, r2
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801caa0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801caa4:	891a      	ldrh	r2, [r3, #8]
 801caa6:	4291      	cmp	r1, r2
 801caa8:	db04      	blt.n	801cab4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801caaa:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801caae:	e7e7      	b.n	801ca80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 801cab0:	2000      	movs	r0, #0
 801cab2:	4770      	bx	lr
 801cab4:	2001      	movs	r0, #1
 801cab6:	4770      	bx	lr
 801cab8:	20024eec 	.word	0x20024eec
 801cabc:	20024ee4 	.word	0x20024ee4
 801cac0:	20024ee8 	.word	0x20024ee8
 801cac4:	20024ecc 	.word	0x20024ecc

0801cac8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801cac8:	b508      	push	{r3, lr}
 801caca:	4b11      	ldr	r3, [pc, #68]	@ (801cb10 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 801cacc:	6819      	ldr	r1, [r3, #0]
 801cace:	b931      	cbnz	r1, 801cade <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801cad0:	4b10      	ldr	r3, [pc, #64]	@ (801cb14 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801cad2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801cad6:	4a10      	ldr	r2, [pc, #64]	@ (801cb18 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cad8:	4810      	ldr	r0, [pc, #64]	@ (801cb1c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801cada:	f003 f94b 	bl	801fd74 <__assert_func>
 801cade:	8803      	ldrh	r3, [r0, #0]
 801cae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cae4:	4293      	cmp	r3, r2
 801cae6:	d011      	beq.n	801cb0c <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 801cae8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801caec:	4293      	cmp	r3, r2
 801caee:	d103      	bne.n	801caf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801caf0:	4b0b      	ldr	r3, [pc, #44]	@ (801cb20 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801caf6:	bd08      	pop	{r3, pc}
 801caf8:	4a0a      	ldr	r2, [pc, #40]	@ (801cb24 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801cafa:	6812      	ldr	r2, [r2, #0]
 801cafc:	b112      	cbz	r2, 801cb04 <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 801cafe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cb02:	b920      	cbnz	r0, 801cb0e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801cb04:	2214      	movs	r2, #20
 801cb06:	4353      	muls	r3, r2
 801cb08:	58c8      	ldr	r0, [r1, r3]
 801cb0a:	bd08      	pop	{r3, pc}
 801cb0c:	2000      	movs	r0, #0
 801cb0e:	bd08      	pop	{r3, pc}
 801cb10:	20024eec 	.word	0x20024eec
 801cb14:	08024948 	.word	0x08024948
 801cb18:	080268b0 	.word	0x080268b0
 801cb1c:	080267b6 	.word	0x080267b6
 801cb20:	20024e34 	.word	0x20024e34
 801cb24:	20024ec8 	.word	0x20024ec8

0801cb28 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>:
 801cb28:	8802      	ldrh	r2, [r0, #0]
 801cb2a:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 801cb2e:	429a      	cmp	r2, r3
 801cb30:	dc19      	bgt.n	801cb66 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 801cb32:	4b0e      	ldr	r3, [pc, #56]	@ (801cb6c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x44>)
 801cb34:	881b      	ldrh	r3, [r3, #0]
 801cb36:	429a      	cmp	r2, r3
 801cb38:	da15      	bge.n	801cb66 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 801cb3a:	4b0d      	ldr	r3, [pc, #52]	@ (801cb70 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x48>)
 801cb3c:	6819      	ldr	r1, [r3, #0]
 801cb3e:	2314      	movs	r3, #20
 801cb40:	fb03 1302 	mla	r3, r3, r2, r1
 801cb44:	6858      	ldr	r0, [r3, #4]
 801cb46:	b178      	cbz	r0, 801cb68 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801cb48:	490a      	ldr	r1, [pc, #40]	@ (801cb74 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x4c>)
 801cb4a:	6809      	ldr	r1, [r1, #0]
 801cb4c:	b161      	cbz	r1, 801cb68 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801cb4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801cb52:	b14a      	cbz	r2, 801cb68 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801cb54:	8919      	ldrh	r1, [r3, #8]
 801cb56:	8958      	ldrh	r0, [r3, #10]
 801cb58:	4348      	muls	r0, r1
 801cb5a:	0040      	lsls	r0, r0, #1
 801cb5c:	3003      	adds	r0, #3
 801cb5e:	f020 0003 	bic.w	r0, r0, #3
 801cb62:	4410      	add	r0, r2
 801cb64:	4770      	bx	lr
 801cb66:	2000      	movs	r0, #0
 801cb68:	4770      	bx	lr
 801cb6a:	bf00      	nop
 801cb6c:	20024ee4 	.word	0x20024ee4
 801cb70:	20024eec 	.word	0x20024eec
 801cb74:	20024ec8 	.word	0x20024ec8

0801cb78 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cb78:	b508      	push	{r3, lr}
 801cb7a:	4b1c      	ldr	r3, [pc, #112]	@ (801cbec <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801cb7c:	6819      	ldr	r1, [r3, #0]
 801cb7e:	8803      	ldrh	r3, [r0, #0]
 801cb80:	b1a9      	cbz	r1, 801cbae <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801cb82:	4a1b      	ldr	r2, [pc, #108]	@ (801cbf0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801cb84:	8812      	ldrh	r2, [r2, #0]
 801cb86:	4293      	cmp	r3, r2
 801cb88:	da05      	bge.n	801cb96 <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 801cb8a:	2214      	movs	r2, #20
 801cb8c:	fb02 1303 	mla	r3, r2, r3, r1
 801cb90:	7cd8      	ldrb	r0, [r3, #19]
 801cb92:	0940      	lsrs	r0, r0, #5
 801cb94:	bd08      	pop	{r3, pc}
 801cb96:	4917      	ldr	r1, [pc, #92]	@ (801cbf4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 801cb98:	8809      	ldrh	r1, [r1, #0]
 801cb9a:	4411      	add	r1, r2
 801cb9c:	428b      	cmp	r3, r1
 801cb9e:	da06      	bge.n	801cbae <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801cba0:	1a9b      	subs	r3, r3, r2
 801cba2:	4a15      	ldr	r2, [pc, #84]	@ (801cbf8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801cba4:	6812      	ldr	r2, [r2, #0]
 801cba6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801cbaa:	7b18      	ldrb	r0, [r3, #12]
 801cbac:	bd08      	pop	{r3, pc}
 801cbae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cbb2:	4293      	cmp	r3, r2
 801cbb4:	d10c      	bne.n	801cbd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801cbb6:	4b11      	ldr	r3, [pc, #68]	@ (801cbfc <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	6898      	ldr	r0, [r3, #8]
 801cbbc:	6803      	ldr	r3, [r0, #0]
 801cbbe:	6a1b      	ldr	r3, [r3, #32]
 801cbc0:	4798      	blx	r3
 801cbc2:	2804      	cmp	r0, #4
 801cbc4:	d00e      	beq.n	801cbe4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 801cbc6:	d805      	bhi.n	801cbd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801cbc8:	2801      	cmp	r0, #1
 801cbca:	d00d      	beq.n	801cbe8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 801cbcc:	2802      	cmp	r0, #2
 801cbce:	d007      	beq.n	801cbe0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 801cbd0:	2000      	movs	r0, #0
 801cbd2:	bd08      	pop	{r3, pc}
 801cbd4:	2810      	cmp	r0, #16
 801cbd6:	d0fb      	beq.n	801cbd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801cbd8:	2818      	cmp	r0, #24
 801cbda:	d1f9      	bne.n	801cbd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801cbdc:	2001      	movs	r0, #1
 801cbde:	bd08      	pop	{r3, pc}
 801cbe0:	2005      	movs	r0, #5
 801cbe2:	bd08      	pop	{r3, pc}
 801cbe4:	2006      	movs	r0, #6
 801cbe6:	bd08      	pop	{r3, pc}
 801cbe8:	2003      	movs	r0, #3
 801cbea:	bd08      	pop	{r3, pc}
 801cbec:	20024eec 	.word	0x20024eec
 801cbf0:	20024ee4 	.word	0x20024ee4
 801cbf4:	20024ee8 	.word	0x20024ee8
 801cbf8:	20024ecc 	.word	0x20024ecc
 801cbfc:	20024e34 	.word	0x20024e34

0801cc00 <_ZN8touchgfx8LCD16bppD1Ev>:
 801cc00:	4770      	bx	lr

0801cc02 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801cc02:	2010      	movs	r0, #16
 801cc04:	4770      	bx	lr

0801cc06 <_ZN8touchgfx8LCD16bpp4initEv>:
 801cc06:	4770      	bx	lr

0801cc08 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 801cc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc0c:	b086      	sub	sp, #24
 801cc0e:	6808      	ldr	r0, [r1, #0]
 801cc10:	6849      	ldr	r1, [r1, #4]
 801cc12:	4617      	mov	r7, r2
 801cc14:	ab04      	add	r3, sp, #16
 801cc16:	ac04      	add	r4, sp, #16
 801cc18:	c303      	stmia	r3!, {r0, r1}
 801cc1a:	4620      	mov	r0, r4
 801cc1c:	f7fc fe74 	bl	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc20:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801cc24:	429f      	cmp	r7, r3
 801cc26:	d109      	bne.n	801cc3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 801cc28:	4b33      	ldr	r3, [pc, #204]	@ (801ccf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>)
 801cc2a:	781b      	ldrb	r3, [r3, #0]
 801cc2c:	b933      	cbnz	r3, 801cc3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 801cc2e:	4b33      	ldr	r3, [pc, #204]	@ (801ccfc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf4>)
 801cc30:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 801cc34:	4a32      	ldr	r2, [pc, #200]	@ (801cd00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 801cc36:	4833      	ldr	r0, [pc, #204]	@ (801cd04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 801cc38:	f003 f89c 	bl	801fd74 <__assert_func>
 801cc3c:	4e32      	ldr	r6, [pc, #200]	@ (801cd08 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 801cc3e:	6830      	ldr	r0, [r6, #0]
 801cc40:	46b0      	mov	r8, r6
 801cc42:	6803      	ldr	r3, [r0, #0]
 801cc44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cc46:	4798      	blx	r3
 801cc48:	f010 0a01 	ands.w	sl, r0, #1
 801cc4c:	d020      	beq.n	801cc90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x88>
 801cc4e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801cc52:	429f      	cmp	r7, r3
 801cc54:	d108      	bne.n	801cc68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x60>
 801cc56:	6830      	ldr	r0, [r6, #0]
 801cc58:	6803      	ldr	r3, [r0, #0]
 801cc5a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801cc5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cc60:	4798      	blx	r3
 801cc62:	b006      	add	sp, #24
 801cc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc68:	ad06      	add	r5, sp, #24
 801cc6a:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 801cc6e:	4628      	mov	r0, r5
 801cc70:	f7ff ff2a 	bl	801cac8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801cc74:	6836      	ldr	r6, [r6, #0]
 801cc76:	4680      	mov	r8, r0
 801cc78:	4628      	mov	r0, r5
 801cc7a:	6833      	ldr	r3, [r6, #0]
 801cc7c:	6d9f      	ldr	r7, [r3, #88]	@ 0x58
 801cc7e:	f7ff fe25 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cc82:	4643      	mov	r3, r8
 801cc84:	9000      	str	r0, [sp, #0]
 801cc86:	4630      	mov	r0, r6
 801cc88:	e894 0006 	ldmia.w	r4, {r1, r2}
 801cc8c:	47b8      	blx	r7
 801cc8e:	e7e8      	b.n	801cc62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 801cc90:	6830      	ldr	r0, [r6, #0]
 801cc92:	ad06      	add	r5, sp, #24
 801cc94:	4e1d      	ldr	r6, [pc, #116]	@ (801cd0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 801cc96:	6803      	ldr	r3, [r0, #0]
 801cc98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cc9a:	4798      	blx	r3
 801cc9c:	8834      	ldrh	r4, [r6, #0]
 801cc9e:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801cca2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801cca6:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 801ccaa:	4657      	mov	r7, sl
 801ccac:	fb02 3404 	mla	r4, r2, r4, r3
 801ccb0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ccb4:	4628      	mov	r0, r5
 801ccb6:	f7ff ff07 	bl	801cac8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ccba:	4681      	mov	r9, r0
 801ccbc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ccc0:	429f      	cmp	r7, r3
 801ccc2:	da14      	bge.n	801ccee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xe6>
 801ccc4:	f8d8 0000 	ldr.w	r0, [r8]
 801ccc8:	4649      	mov	r1, r9
 801ccca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ccce:	3701      	adds	r7, #1
 801ccd0:	6802      	ldr	r2, [r0, #0]
 801ccd2:	005b      	lsls	r3, r3, #1
 801ccd4:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801ccd8:	4622      	mov	r2, r4
 801ccda:	47d0      	blx	sl
 801ccdc:	8833      	ldrh	r3, [r6, #0]
 801ccde:	4628      	mov	r0, r5
 801cce0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cce4:	f7ff fdf2 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cce8:	eb09 0940 	add.w	r9, r9, r0, lsl #1
 801ccec:	e7e6      	b.n	801ccbc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb4>
 801ccee:	4628      	mov	r0, r5
 801ccf0:	f7ff feea 	bl	801cac8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ccf4:	e7b5      	b.n	801cc62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 801ccf6:	bf00      	nop
 801ccf8:	20024e33 	.word	0x20024e33
 801ccfc:	0802698f 	.word	0x0802698f
 801cd00:	08026aec 	.word	0x08026aec
 801cd04:	080269ca 	.word	0x080269ca
 801cd08:	20024e34 	.word	0x20024e34
 801cd0c:	20024e2e 	.word	0x20024e2e

0801cd10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd14:	b08d      	sub	sp, #52	@ 0x34
 801cd16:	4688      	mov	r8, r1
 801cd18:	4614      	mov	r4, r2
 801cd1a:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 801cd1e:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801cd22:	2f00      	cmp	r7, #0
 801cd24:	d047      	beq.n	801cdb6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801cd26:	6810      	ldr	r0, [r2, #0]
 801cd28:	ae08      	add	r6, sp, #32
 801cd2a:	6851      	ldr	r1, [r2, #4]
 801cd2c:	c603      	stmia	r6!, {r0, r1}
 801cd2e:	6818      	ldr	r0, [r3, #0]
 801cd30:	ae0a      	add	r6, sp, #40	@ 0x28
 801cd32:	6859      	ldr	r1, [r3, #4]
 801cd34:	c603      	stmia	r6!, {r0, r1}
 801cd36:	a808      	add	r0, sp, #32
 801cd38:	f7fc fde6 	bl	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd3c:	4621      	mov	r1, r4
 801cd3e:	a80a      	add	r0, sp, #40	@ 0x28
 801cd40:	f7fc fdca 	bl	80198d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cd44:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801cd48:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 801cd4c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 801cd50:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801cd54:	fb14 2103 	smlabb	r1, r4, r3, r2
 801cd58:	eb08 0441 	add.w	r4, r8, r1, lsl #1
 801cd5c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801cd60:	f8df 8218 	ldr.w	r8, [pc, #536]	@ 801cf7c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>
 801cd64:	440a      	add	r2, r1
 801cd66:	f8d8 0000 	ldr.w	r0, [r8]
 801cd6a:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801cd6e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801cd72:	4413      	add	r3, r2
 801cd74:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801cd78:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801cd7c:	9306      	str	r3, [sp, #24]
 801cd7e:	6803      	ldr	r3, [r0, #0]
 801cd80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cd82:	4798      	blx	r3
 801cd84:	2fff      	cmp	r7, #255	@ 0xff
 801cd86:	d019      	beq.n	801cdbc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801cd88:	f010 0f04 	tst.w	r0, #4
 801cd8c:	d01a      	beq.n	801cdc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801cd8e:	f8d8 0000 	ldr.w	r0, [r8]
 801cd92:	b2b6      	uxth	r6, r6
 801cd94:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801cd98:	6801      	ldr	r1, [r0, #0]
 801cd9a:	9504      	str	r5, [sp, #16]
 801cd9c:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801cda0:	9703      	str	r7, [sp, #12]
 801cda2:	9502      	str	r5, [sp, #8]
 801cda4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801cda8:	9600      	str	r6, [sp, #0]
 801cdaa:	9501      	str	r5, [sp, #4]
 801cdac:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801cdb0:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 801cdb2:	4621      	mov	r1, r4
 801cdb4:	47a8      	blx	r5
 801cdb6:	b00d      	add	sp, #52	@ 0x34
 801cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdbc:	b915      	cbnz	r5, 801cdc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801cdbe:	f010 0f01 	tst.w	r0, #1
 801cdc2:	e7e3      	b.n	801cd8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801cdc4:	f8d8 0000 	ldr.w	r0, [r8]
 801cdc8:	6803      	ldr	r3, [r0, #0]
 801cdca:	6a1b      	ldr	r3, [r3, #32]
 801cdcc:	4798      	blx	r3
 801cdce:	4b69      	ldr	r3, [pc, #420]	@ (801cf74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 801cdd0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801cdd4:	2fff      	cmp	r7, #255	@ 0xff
 801cdd6:	881d      	ldrh	r5, [r3, #0]
 801cdd8:	4699      	mov	r9, r3
 801cdda:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801cdde:	fb01 2505 	mla	r5, r1, r5, r2
 801cde2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801cde6:	f000 80a6 	beq.w	801cf36 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x226>
 801cdea:	ea44 0205 	orr.w	r2, r4, r5
 801cdee:	f5c7 7080 	rsb	r0, r7, #256	@ 0x100
 801cdf2:	f012 0f03 	tst.w	r2, #3
 801cdf6:	d154      	bne.n	801cea2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801cdf8:	07f2      	lsls	r2, r6, #31
 801cdfa:	d452      	bmi.n	801cea2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801cdfc:	f8bd e024 	ldrh.w	lr, [sp, #36]	@ 0x24
 801ce00:	f01e 0e01 	ands.w	lr, lr, #1
 801ce04:	d14d      	bne.n	801cea2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801ce06:	2202      	movs	r2, #2
 801ce08:	9307      	str	r3, [sp, #28]
 801ce0a:	fb96 f8f2 	sdiv	r8, r6, r2
 801ce0e:	4693      	mov	fp, r2
 801ce10:	f1c8 0800 	rsb	r8, r8, #0
 801ce14:	9b06      	ldr	r3, [sp, #24]
 801ce16:	459e      	cmp	lr, r3
 801ce18:	f280 80a5 	bge.w	801cf66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801ce1c:	f04f 0900 	mov.w	r9, #0
 801ce20:	45b1      	cmp	r9, r6
 801ce22:	da2e      	bge.n	801ce82 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x172>
 801ce24:	6829      	ldr	r1, [r5, #0]
 801ce26:	f109 0902 	add.w	r9, r9, #2
 801ce2a:	f854 2b04 	ldr.w	r2, [r4], #4
 801ce2e:	0a0b      	lsrs	r3, r1, #8
 801ce30:	f001 1a1f 	and.w	sl, r1, #2031647	@ 0x1f001f
 801ce34:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801ce38:	f003 13f8 	and.w	r3, r3, #16253176	@ 0xf800f8
 801ce3c:	fb00 fa0a 	mul.w	sl, r0, sl
 801ce40:	f00c 1cf8 	and.w	ip, ip, #16253176	@ 0xf800f8
 801ce44:	0949      	lsrs	r1, r1, #5
 801ce46:	4343      	muls	r3, r0
 801ce48:	f001 113f 	and.w	r1, r1, #4128831	@ 0x3f003f
 801ce4c:	fb07 3c0c 	mla	ip, r7, ip, r3
 801ce50:	f002 131f 	and.w	r3, r2, #2031647	@ 0x1f001f
 801ce54:	0952      	lsrs	r2, r2, #5
 801ce56:	4341      	muls	r1, r0
 801ce58:	fb07 a303 	mla	r3, r7, r3, sl
 801ce5c:	f00c 2cf8 	and.w	ip, ip, #4160813056	@ 0xf800f800
 801ce60:	f002 123f 	and.w	r2, r2, #4128831	@ 0x3f003f
 801ce64:	0a1b      	lsrs	r3, r3, #8
 801ce66:	fb07 1202 	mla	r2, r7, r2, r1
 801ce6a:	f003 131f 	and.w	r3, r3, #2031647	@ 0x1f001f
 801ce6e:	ea4c 0c03 	orr.w	ip, ip, r3
 801ce72:	4b41      	ldr	r3, [pc, #260]	@ (801cf78 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x268>)
 801ce74:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 801ce78:	ea4c 0202 	orr.w	r2, ip, r2
 801ce7c:	f845 2b04 	str.w	r2, [r5], #4
 801ce80:	e7ce      	b.n	801ce20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 801ce82:	9b07      	ldr	r3, [sp, #28]
 801ce84:	f10e 0e01 	add.w	lr, lr, #1
 801ce88:	881b      	ldrh	r3, [r3, #0]
 801ce8a:	eb08 0353 	add.w	r3, r8, r3, lsr #1
 801ce8e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801ce92:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 801ce96:	fb93 f3fb 	sdiv	r3, r3, fp
 801ce9a:	4443      	add	r3, r8
 801ce9c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801cea0:	e7b8      	b.n	801ce14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x104>
 801cea2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801cea6:	f04f 0800 	mov.w	r8, #0
 801ceaa:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 801cf80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x270>
 801ceae:	005b      	lsls	r3, r3, #1
 801ceb0:	9307      	str	r3, [sp, #28]
 801ceb2:	9b06      	ldr	r3, [sp, #24]
 801ceb4:	4598      	cmp	r8, r3
 801ceb6:	da56      	bge.n	801cf66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801ceb8:	46aa      	mov	sl, r5
 801ceba:	f04f 0c00 	mov.w	ip, #0
 801cebe:	45b4      	cmp	ip, r6
 801cec0:	da29      	bge.n	801cf16 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 801cec2:	f8ba 1000 	ldrh.w	r1, [sl]
 801cec6:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 801ceca:	f10c 0c01 	add.w	ip, ip, #1
 801cece:	ea01 0309 	and.w	r3, r1, r9
 801ced2:	f401 6bfc 	and.w	fp, r1, #2016	@ 0x7e0
 801ced6:	ea02 0e09 	and.w	lr, r2, r9
 801ceda:	f001 011f 	and.w	r1, r1, #31
 801cede:	4343      	muls	r3, r0
 801cee0:	fb00 fb0b 	mul.w	fp, r0, fp
 801cee4:	fb07 3e0e 	mla	lr, r7, lr, r3
 801cee8:	f402 63fc 	and.w	r3, r2, #2016	@ 0x7e0
 801ceec:	4341      	muls	r1, r0
 801ceee:	f002 021f 	and.w	r2, r2, #31
 801cef2:	fb07 b303 	mla	r3, r7, r3, fp
 801cef6:	ea09 2e2e 	and.w	lr, r9, lr, asr #8
 801cefa:	fb07 1202 	mla	r2, r7, r2, r1
 801cefe:	121b      	asrs	r3, r3, #8
 801cf00:	f3c2 2204 	ubfx	r2, r2, #8, #5
 801cf04:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801cf08:	ea4e 0e03 	orr.w	lr, lr, r3
 801cf0c:	ea4e 0e02 	orr.w	lr, lr, r2
 801cf10:	f82a eb02 	strh.w	lr, [sl], #2
 801cf14:	e7d3      	b.n	801cebe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 801cf16:	4b17      	ldr	r3, [pc, #92]	@ (801cf74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 801cf18:	f108 0801 	add.w	r8, r8, #1
 801cf1c:	9a07      	ldr	r2, [sp, #28]
 801cf1e:	881b      	ldrh	r3, [r3, #0]
 801cf20:	1b9b      	subs	r3, r3, r6
 801cf22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cf26:	441d      	add	r5, r3
 801cf28:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 801cf2c:	1b9b      	subs	r3, r3, r6
 801cf2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cf32:	441c      	add	r4, r3
 801cf34:	e7bd      	b.n	801ceb2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a2>
 801cf36:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801cf3a:	2700      	movs	r7, #0
 801cf3c:	9b06      	ldr	r3, [sp, #24]
 801cf3e:	429f      	cmp	r7, r3
 801cf40:	da11      	bge.n	801cf66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801cf42:	f8d8 0000 	ldr.w	r0, [r8]
 801cf46:	4622      	mov	r2, r4
 801cf48:	4629      	mov	r1, r5
 801cf4a:	3701      	adds	r7, #1
 801cf4c:	6803      	ldr	r3, [r0, #0]
 801cf4e:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 801cf50:	4653      	mov	r3, sl
 801cf52:	47b0      	blx	r6
 801cf54:	f8b9 3000 	ldrh.w	r3, [r9]
 801cf58:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801cf5c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 801cf60:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cf64:	e7ea      	b.n	801cf3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x22c>
 801cf66:	4b05      	ldr	r3, [pc, #20]	@ (801cf7c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>)
 801cf68:	6818      	ldr	r0, [r3, #0]
 801cf6a:	6803      	ldr	r3, [r0, #0]
 801cf6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf6e:	4798      	blx	r3
 801cf70:	e721      	b.n	801cdb6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801cf72:	bf00      	nop
 801cf74:	20024e2e 	.word	0x20024e2e
 801cf78:	07e007e0 	.word	0x07e007e0
 801cf7c:	20024e34 	.word	0x20024e34
 801cf80:	fffff800 	.word	0xfffff800

0801cf84 <_ZN8touchgfx8LCD16bppD0Ev>:
 801cf84:	b510      	push	{r4, lr}
 801cf86:	4604      	mov	r4, r0
 801cf88:	2104      	movs	r1, #4
 801cf8a:	f001 fdcc 	bl	801eb26 <_ZdlPvj>
 801cf8e:	4620      	mov	r0, r4
 801cf90:	bd10      	pop	{r4, pc}
	...

0801cf94 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf98:	4615      	mov	r5, r2
 801cf9a:	b08b      	sub	sp, #44	@ 0x2c
 801cf9c:	4699      	mov	r9, r3
 801cf9e:	b13b      	cbz	r3, 801cfb0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801cfa0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cfa4:	b123      	cbz	r3, 801cfb0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801cfa6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	f040 808c 	bne.w	801d0c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801cfb0:	b00b      	add	sp, #44	@ 0x2c
 801cfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfb6:	f010 0f08 	tst.w	r0, #8
 801cfba:	d011      	beq.n	801cfe0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4c>
 801cfbc:	6818      	ldr	r0, [r3, #0]
 801cfbe:	f8bd 4026 	ldrh.w	r4, [sp, #38]	@ 0x26
 801cfc2:	6801      	ldr	r1, [r0, #0]
 801cfc4:	9401      	str	r4, [sp, #4]
 801cfc6:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 801cfca:	f8cd 9008 	str.w	r9, [sp, #8]
 801cfce:	9400      	str	r4, [sp, #0]
 801cfd0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801cfd4:	6ccc      	ldr	r4, [r1, #76]	@ 0x4c
 801cfd6:	4629      	mov	r1, r5
 801cfd8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cfdc:	47a0      	blx	r4
 801cfde:	e7e7      	b.n	801cfb0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801cfe0:	6818      	ldr	r0, [r3, #0]
 801cfe2:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 801cfe6:	6803      	ldr	r3, [r0, #0]
 801cfe8:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	@ 0x26
 801cfec:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801cff0:	6a1b      	ldr	r3, [r3, #32]
 801cff2:	4798      	blx	r3
 801cff4:	4a3e      	ldr	r2, [pc, #248]	@ (801d0f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>)
 801cff6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801cffa:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801cffe:	8816      	ldrh	r6, [r2, #0]
 801d000:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801d004:	fb06 1303 	mla	r3, r6, r3, r1
 801d008:	4616      	mov	r6, r2
 801d00a:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 801d00e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d012:	d041      	beq.n	801d098 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x104>
 801d014:	f405 4e78 	and.w	lr, r5, #63488	@ 0xf800
 801d018:	f405 67fc 	and.w	r7, r5, #2016	@ 0x7e0
 801d01c:	f005 051f 	and.w	r5, r5, #31
 801d020:	f5c9 7680 	rsb	r6, r9, #256	@ 0x100
 801d024:	fb09 fe0e 	mul.w	lr, r9, lr
 801d028:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 801d0f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 801d02c:	fb09 f305 	mul.w	r3, r9, r5
 801d030:	2500      	movs	r5, #0
 801d032:	fb09 f707 	mul.w	r7, r9, r7
 801d036:	9306      	str	r3, [sp, #24]
 801d038:	004b      	lsls	r3, r1, #1
 801d03a:	9207      	str	r2, [sp, #28]
 801d03c:	9305      	str	r3, [sp, #20]
 801d03e:	4545      	cmp	r5, r8
 801d040:	da3c      	bge.n	801d0bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 801d042:	4681      	mov	r9, r0
 801d044:	f04f 0c00 	mov.w	ip, #0
 801d048:	45a4      	cmp	ip, r4
 801d04a:	da1c      	bge.n	801d086 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf2>
 801d04c:	f8b9 2000 	ldrh.w	r2, [r9]
 801d050:	f10c 0c01 	add.w	ip, ip, #1
 801d054:	f402 63fc 	and.w	r3, r2, #2016	@ 0x7e0
 801d058:	ea02 010b 	and.w	r1, r2, fp
 801d05c:	fb06 7303 	mla	r3, r6, r3, r7
 801d060:	fb06 e101 	mla	r1, r6, r1, lr
 801d064:	0a1b      	lsrs	r3, r3, #8
 801d066:	ea0b 2111 	and.w	r1, fp, r1, lsr #8
 801d06a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801d06e:	430b      	orrs	r3, r1
 801d070:	f002 011f 	and.w	r1, r2, #31
 801d074:	9a06      	ldr	r2, [sp, #24]
 801d076:	fb06 2101 	mla	r1, r6, r1, r2
 801d07a:	f3c1 2104 	ubfx	r1, r1, #8, #5
 801d07e:	430b      	orrs	r3, r1
 801d080:	f829 3b02 	strh.w	r3, [r9], #2
 801d084:	e7e0      	b.n	801d048 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb4>
 801d086:	9b07      	ldr	r3, [sp, #28]
 801d088:	3501      	adds	r5, #1
 801d08a:	9a05      	ldr	r2, [sp, #20]
 801d08c:	881b      	ldrh	r3, [r3, #0]
 801d08e:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 801d092:	4413      	add	r3, r2
 801d094:	4418      	add	r0, r3
 801d096:	e7d2      	b.n	801d03e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801d098:	0049      	lsls	r1, r1, #1
 801d09a:	2200      	movs	r2, #0
 801d09c:	4542      	cmp	r2, r8
 801d09e:	da0d      	bge.n	801d0bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	42a3      	cmp	r3, r4
 801d0a4:	da03      	bge.n	801d0ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x11a>
 801d0a6:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 801d0aa:	3301      	adds	r3, #1
 801d0ac:	e7f9      	b.n	801d0a2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x10e>
 801d0ae:	8833      	ldrh	r3, [r6, #0]
 801d0b0:	3201      	adds	r2, #1
 801d0b2:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 801d0b6:	440b      	add	r3, r1
 801d0b8:	4418      	add	r0, r3
 801d0ba:	e7ef      	b.n	801d09c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x108>
 801d0bc:	4b0d      	ldr	r3, [pc, #52]	@ (801d0f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 801d0be:	6818      	ldr	r0, [r3, #0]
 801d0c0:	6803      	ldr	r3, [r0, #0]
 801d0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d0c4:	4798      	blx	r3
 801d0c6:	e773      	b.n	801cfb0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801d0c8:	6808      	ldr	r0, [r1, #0]
 801d0ca:	ab08      	add	r3, sp, #32
 801d0cc:	6849      	ldr	r1, [r1, #4]
 801d0ce:	4c09      	ldr	r4, [pc, #36]	@ (801d0f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 801d0d0:	c303      	stmia	r3!, {r0, r1}
 801d0d2:	a808      	add	r0, sp, #32
 801d0d4:	f7fc fc18 	bl	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d0d8:	6820      	ldr	r0, [r4, #0]
 801d0da:	6803      	ldr	r3, [r0, #0]
 801d0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d0de:	4798      	blx	r3
 801d0e0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801d0e4:	4623      	mov	r3, r4
 801d0e6:	f47f af66 	bne.w	801cfb6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 801d0ea:	f010 0f02 	tst.w	r0, #2
 801d0ee:	e764      	b.n	801cfba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 801d0f0:	20024e2e 	.word	0x20024e2e
 801d0f4:	20024e34 	.word	0x20024e34
 801d0f8:	fffff800 	.word	0xfffff800

0801d0fc <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>:
 801d0fc:	ee07 0a90 	vmov	s15, r0
 801d100:	ee70 0ac0 	vsub.f32	s1, s1, s0
 801d104:	ee71 1ac1 	vsub.f32	s3, s3, s2
 801d108:	eddf 6a08 	vldr	s13, [pc, #32]	@ 801d12c <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh+0x30>
 801d10c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d110:	eea0 0a82 	vfma.f32	s0, s1, s4
 801d114:	eea1 1a82 	vfma.f32	s2, s3, s4
 801d118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d11c:	ee31 1a40 	vsub.f32	s2, s2, s0
 801d120:	eea2 0a81 	vfma.f32	s0, s5, s2
 801d124:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d128:	4770      	bx	lr
 801d12a:	bf00      	nop
 801d12c:	437f0000 	.word	0x437f0000

0801d130 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d134:	ed2d 8b0e 	vpush	{d8-d14}
 801d138:	b095      	sub	sp, #84	@ 0x54
 801d13a:	461e      	mov	r6, r3
 801d13c:	2700      	movs	r7, #0
 801d13e:	4690      	mov	r8, r2
 801d140:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	@ 0xc0
 801d144:	a812      	add	r0, sp, #72	@ 0x48
 801d146:	468a      	mov	sl, r1
 801d148:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 801d14a:	9311      	str	r3, [sp, #68]	@ 0x44
 801d14c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801d150:	f8dd 90bc 	ldr.w	r9, [sp, #188]	@ 0xbc
 801d154:	9301      	str	r3, [sp, #4]
 801d156:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801d158:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 801d15c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801d160:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801d164:	f8ad 704a 	strh.w	r7, [sp, #74]	@ 0x4a
 801d168:	f8ad 304e 	strh.w	r3, [sp, #78]	@ 0x4e
 801d16c:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
 801d170:	f7fc fbca 	bl	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d174:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d176:	6835      	ldr	r5, [r6, #0]
 801d178:	6818      	ldr	r0, [r3, #0]
 801d17a:	f9b4 3000 	ldrsh.w	r3, [r4]
 801d17e:	f9b9 e000 	ldrsh.w	lr, [r9]
 801d182:	1b40      	subs	r0, r0, r5
 801d184:	18e9      	adds	r1, r5, r3
 801d186:	ebae 0c01 	sub.w	ip, lr, r1
 801d18a:	4560      	cmp	r0, ip
 801d18c:	f340 86a2 	ble.w	801ded4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801d190:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 801d194:	44f1      	add	r9, lr
 801d196:	fa0f f989 	sxth.w	r9, r9
 801d19a:	4549      	cmp	r1, r9
 801d19c:	f300 869a 	bgt.w	801ded4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801d1a0:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 801d1a4:	eeb7 ca00 	vmov.f32	s24, #112	@ 0x3f800000  1.0
 801d1a8:	6972      	ldr	r2, [r6, #20]
 801d1aa:	ed96 6a07 	vldr	s12, [r6, #28]
 801d1ae:	4422      	add	r2, r4
 801d1b0:	f8da 4004 	ldr.w	r4, [sl, #4]
 801d1b4:	ed98 ba09 	vldr	s22, [r8, #36]	@ 0x24
 801d1b8:	fb04 5402 	mla	r4, r4, r2, r5
 801d1bc:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	@ 0xc8
 801d1c0:	edd8 ba0b 	vldr	s23, [r8, #44]	@ 0x2c
 801d1c4:	4282      	cmp	r2, r0
 801d1c6:	edd6 7a0a 	vldr	s15, [r6, #40]	@ 0x28
 801d1ca:	ed96 7a0d 	vldr	s14, [r6, #52]	@ 0x34
 801d1ce:	441c      	add	r4, r3
 801d1d0:	bfa8      	it	ge
 801d1d2:	4602      	movge	r2, r0
 801d1d4:	f8da b000 	ldr.w	fp, [sl]
 801d1d8:	458e      	cmp	lr, r1
 801d1da:	ee06 2a90 	vmov	s13, r2
 801d1de:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 801d1e2:	9208      	str	r2, [sp, #32]
 801d1e4:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 801d1e8:	edd8 6a0d 	vldr	s13, [r8, #52]	@ 0x34
 801d1ec:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801d1f0:	ee69 ba2b 	vmul.f32	s23, s18, s23
 801d1f4:	ee29 9a26 	vmul.f32	s18, s18, s13
 801d1f8:	eecc 6a06 	vdiv.f32	s13, s24, s12
 801d1fc:	ee37 aaab 	vadd.f32	s20, s15, s23
 801d200:	ee77 aa09 	vadd.f32	s21, s14, s18
 801d204:	ee76 9a0b 	vadd.f32	s19, s12, s22
 801d208:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d20c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d210:	dc01      	bgt.n	801d216 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe6>
 801d212:	970a      	str	r7, [sp, #40]	@ 0x28
 801d214:	e029      	b.n	801d26a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 801d216:	9a08      	ldr	r2, [sp, #32]
 801d218:	fb9c f1f2 	sdiv	r1, ip, r2
 801d21c:	ee06 1a90 	vmov	s13, r1
 801d220:	434a      	muls	r2, r1
 801d222:	2900      	cmp	r1, #0
 801d224:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d228:	ebac 0602 	sub.w	r6, ip, r2
 801d22c:	960a      	str	r6, [sp, #40]	@ 0x28
 801d22e:	eeeb 9a26 	vfma.f32	s19, s22, s13
 801d232:	eeab aaa6 	vfma.f32	s20, s23, s13
 801d236:	eee9 aa26 	vfma.f32	s21, s18, s13
 801d23a:	dd12      	ble.n	801d262 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x132>
 801d23c:	ee79 7acb 	vsub.f32	s15, s19, s22
 801d240:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 801d244:	eef5 7a40 	vcmp.f32	s15, #0.0
 801d248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d24c:	bf14      	ite	ne
 801d24e:	eecc 6a27 	vdivne.f32	s13, s24, s15
 801d252:	eef0 6a4c 	vmoveq.f32	s13, s24
 801d256:	ee7a 7a6b 	vsub.f32	s15, s20, s23
 801d25a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d25e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d262:	1a80      	subs	r0, r0, r2
 801d264:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801d268:	4415      	add	r5, r2
 801d26a:	18ea      	adds	r2, r5, r3
 801d26c:	4402      	add	r2, r0
 801d26e:	4591      	cmp	r9, r2
 801d270:	bfbc      	itt	lt
 801d272:	eba9 0003 	sublt.w	r0, r9, r3
 801d276:	1b40      	sublt	r0, r0, r5
 801d278:	2800      	cmp	r0, #0
 801d27a:	f340 862b 	ble.w	801ded4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801d27e:	9b08      	ldr	r3, [sp, #32]
 801d280:	9a08      	ldr	r2, [sp, #32]
 801d282:	fb90 f3f3 	sdiv	r3, r0, r3
 801d286:	9309      	str	r3, [sp, #36]	@ 0x24
 801d288:	fb02 0313 	mls	r3, r2, r3, r0
 801d28c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d28e:	b91b      	cbnz	r3, 801d298 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x168>
 801d290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d292:	920c      	str	r2, [sp, #48]	@ 0x30
 801d294:	3b01      	subs	r3, #1
 801d296:	9309      	str	r3, [sp, #36]	@ 0x24
 801d298:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801d29a:	eddf ca40 	vldr	s25, [pc, #256]	@ 801d39c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	9304      	str	r3, [sp, #16]
 801d2a2:	9b01      	ldr	r3, [sp, #4]
 801d2a4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801d2a8:	9305      	str	r3, [sp, #20]
 801d2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	dc03      	bgt.n	801d2b8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 801d2b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	f340 860e 	ble.w	801ded4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801d2b8:	ee8c 8a29 	vdiv.f32	s16, s24, s19
 801d2bc:	9b08      	ldr	r3, [sp, #32]
 801d2be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d2c0:	eef0 6a67 	vmov.f32	s13, s15
 801d2c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2c8:	ee16 ba90 	vmov	fp, s13
 801d2cc:	eef0 6a47 	vmov.f32	s13, s14
 801d2d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2d4:	ee6a 8a08 	vmul.f32	s17, s20, s16
 801d2d8:	ee2a 8a88 	vmul.f32	s16, s21, s16
 801d2dc:	ee16 5a90 	vmov	r5, s13
 801d2e0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801d2e4:	ee38 7a47 	vsub.f32	s14, s16, s14
 801d2e8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d2ec:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d2f0:	ee17 2a90 	vmov	r2, s15
 801d2f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2f8:	ee17 2a10 	vmov	r2, s14
 801d2fc:	9306      	str	r3, [sp, #24]
 801d2fe:	9b08      	ldr	r3, [sp, #32]
 801d300:	fb92 f3f3 	sdiv	r3, r2, r3
 801d304:	9a08      	ldr	r2, [sp, #32]
 801d306:	9307      	str	r3, [sp, #28]
 801d308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d30a:	2900      	cmp	r1, #0
 801d30c:	bfc8      	it	gt
 801d30e:	4613      	movgt	r3, r2
 801d310:	9302      	str	r3, [sp, #8]
 801d312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d314:	2b00      	cmp	r3, #0
 801d316:	dd0d      	ble.n	801d334 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x204>
 801d318:	9a06      	ldr	r2, [sp, #24]
 801d31a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d31e:	fb02 bb03 	mla	fp, r2, r3, fp
 801d322:	9a07      	ldr	r2, [sp, #28]
 801d324:	fb02 5503 	mla	r5, r2, r3, r5
 801d328:	9b02      	ldr	r3, [sp, #8]
 801d32a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d32c:	1a9b      	subs	r3, r3, r2
 801d32e:	9302      	str	r3, [sp, #8]
 801d330:	2300      	movs	r3, #0
 801d332:	930a      	str	r3, [sp, #40]	@ 0x28
 801d334:	ea5f 432b 	movs.w	r3, fp, asr #16
 801d338:	d42e      	bmi.n	801d398 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801d33a:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	@ 0x4c
 801d33e:	4283      	cmp	r3, r0
 801d340:	da2a      	bge.n	801d398 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801d342:	142b      	asrs	r3, r5, #16
 801d344:	d428      	bmi.n	801d398 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801d346:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	@ 0x4e
 801d34a:	428b      	cmp	r3, r1
 801d34c:	da24      	bge.n	801d398 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801d34e:	9b02      	ldr	r3, [sp, #8]
 801d350:	9a06      	ldr	r2, [sp, #24]
 801d352:	3b01      	subs	r3, #1
 801d354:	fb03 b202 	mla	r2, r3, r2, fp
 801d358:	1412      	asrs	r2, r2, #16
 801d35a:	d41d      	bmi.n	801d398 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801d35c:	4282      	cmp	r2, r0
 801d35e:	da1b      	bge.n	801d398 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801d360:	9a07      	ldr	r2, [sp, #28]
 801d362:	fb03 5302 	mla	r3, r3, r2, r5
 801d366:	141b      	asrs	r3, r3, #16
 801d368:	d416      	bmi.n	801d398 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801d36a:	428b      	cmp	r3, r1
 801d36c:	bfb4      	ite	lt
 801d36e:	2300      	movlt	r3, #0
 801d370:	2301      	movge	r3, #1
 801d372:	9303      	str	r3, [sp, #12]
 801d374:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d376:	2b0b      	cmp	r3, #11
 801d378:	f200 82d7 	bhi.w	801d92a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7fa>
 801d37c:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d380:	03430531 	.word	0x03430531
 801d384:	02ca02e8 	.word	0x02ca02e8
 801d388:	02d502d5 	.word	0x02d502d5
 801d38c:	02d502d5 	.word	0x02d502d5
 801d390:	01c5026b 	.word	0x01c5026b
 801d394:	00100160 	.word	0x00100160
 801d398:	2301      	movs	r3, #1
 801d39a:	e7ea      	b.n	801d372 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 801d39c:	3d800000 	.word	0x3d800000
 801d3a0:	f04f 0a00 	mov.w	sl, #0
 801d3a4:	9b02      	ldr	r3, [sp, #8]
 801d3a6:	4553      	cmp	r3, sl
 801d3a8:	f340 82bb 	ble.w	801d922 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d3ac:	9a03      	ldr	r2, [sp, #12]
 801d3ae:	ea4f 412b 	mov.w	r1, fp, asr #16
 801d3b2:	142b      	asrs	r3, r5, #16
 801d3b4:	b17a      	cbz	r2, 801d3d6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 801d3b6:	2900      	cmp	r1, #0
 801d3b8:	f2c0 813b 	blt.w	801d632 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801d3bc:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	@ 0x4c
 801d3c0:	4291      	cmp	r1, r2
 801d3c2:	f280 8136 	bge.w	801d632 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	f2c0 8133 	blt.w	801d632 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801d3cc:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	@ 0x4e
 801d3d0:	4293      	cmp	r3, r2
 801d3d2:	f280 812e 	bge.w	801d632 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801d3d6:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	@ 0x4c
 801d3da:	9804      	ldr	r0, [sp, #16]
 801d3dc:	fb03 1102 	mla	r1, r3, r2, r1
 801d3e0:	9b04      	ldr	r3, [sp, #16]
 801d3e2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d3e6:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 801d3ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d3ee:	f007 16ff 	and.w	r6, r7, #16711935	@ 0xff00ff
 801d3f2:	6859      	ldr	r1, [r3, #4]
 801d3f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d3f8:	f000 18ff 	and.w	r8, r0, #16711935	@ 0xff00ff
 801d3fc:	685a      	ldr	r2, [r3, #4]
 801d3fe:	0e3b      	lsrs	r3, r7, #24
 801d400:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d404:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801d408:	435e      	muls	r6, r3
 801d40a:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 801d40e:	435f      	muls	r7, r3
 801d410:	ee06 ea90 	vmov	s13, lr
 801d414:	0a36      	lsrs	r6, r6, #8
 801d416:	ee07 3a90 	vmov	s15, r3
 801d41a:	0a3f      	lsrs	r7, r7, #8
 801d41c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d420:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 801d424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d428:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d42c:	433e      	orrs	r6, r7
 801d42e:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 801d432:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801d436:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801d43a:	fb0e f707 	mul.w	r7, lr, r7
 801d43e:	fb0e f101 	mul.w	r1, lr, r1
 801d442:	0a3f      	lsrs	r7, r7, #8
 801d444:	960b      	str	r6, [sp, #44]	@ 0x2c
 801d446:	0a09      	lsrs	r1, r1, #8
 801d448:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d44c:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801d450:	430f      	orrs	r7, r1
 801d452:	0e01      	lsrs	r1, r0, #24
 801d454:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d458:	fb01 f808 	mul.w	r8, r1, r8
 801d45c:	ee07 1a10 	vmov	s14, r1
 801d460:	4348      	muls	r0, r1
 801d462:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d466:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d46a:	0a00      	lsrs	r0, r0, #8
 801d46c:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 801d470:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d474:	ea48 0800 	orr.w	r8, r8, r0
 801d478:	0e10      	lsrs	r0, r2, #24
 801d47a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d47e:	fb00 f909 	mul.w	r9, r0, r9
 801d482:	4342      	muls	r2, r0
 801d484:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d488:	0a12      	lsrs	r2, r2, #8
 801d48a:	f009 19ff 	and.w	r9, r9, #16711935	@ 0xff00ff
 801d48e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d492:	ea49 0902 	orr.w	r9, r9, r2
 801d496:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801d49a:	ee0d 2a10 	vmov	s26, r2
 801d49e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801d4a2:	ea4f 4319 	mov.w	r3, r9, lsr #16
 801d4a6:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801d4aa:	ee0d 2a90 	vmov	s27, r2
 801d4ae:	ee01 3a90 	vmov	s3, r3
 801d4b2:	ea4f 4318 	mov.w	r3, r8, lsr #16
 801d4b6:	eef8 daed 	vcvt.f32.s32	s27, s27
 801d4ba:	ee2d da2c 	vmul.f32	s26, s26, s25
 801d4be:	ee01 3a10 	vmov	s2, r3
 801d4c2:	0c3b      	lsrs	r3, r7, #16
 801d4c4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d4c8:	ee6d daac 	vmul.f32	s27, s27, s25
 801d4cc:	eeed 7a26 	vfma.f32	s15, s26, s13
 801d4d0:	ee06 0a90 	vmov	s13, r0
 801d4d4:	ee00 3a90 	vmov	s1, r3
 801d4d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d4da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d4de:	0c1b      	lsrs	r3, r3, #16
 801d4e0:	eef0 2a6d 	vmov.f32	s5, s27
 801d4e4:	eeb0 2a4d 	vmov.f32	s4, s26
 801d4e8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801d4ec:	ee00 3a10 	vmov	s0, r3
 801d4f0:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801d4f4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d4f8:	eead 7a26 	vfma.f32	s14, s26, s13
 801d4fc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d500:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d504:	eeed 7a87 	vfma.f32	s15, s27, s14
 801d508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d50c:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801d510:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 801d514:	4630      	mov	r0, r6
 801d516:	f7ff fdf1 	bl	801d0fc <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801d51a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 801d51e:	eeb0 ea40 	vmov.f32	s28, s0
 801d522:	4630      	mov	r0, r6
 801d524:	ee01 3a90 	vmov	s3, r3
 801d528:	f3c8 2307 	ubfx	r3, r8, #8, #8
 801d52c:	eef0 2a6d 	vmov.f32	s5, s27
 801d530:	ee01 3a10 	vmov	s2, r3
 801d534:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d538:	eeb0 2a4d 	vmov.f32	s4, s26
 801d53c:	ee00 3a90 	vmov	s1, r3
 801d540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d542:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d546:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d54a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801d54e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d552:	ee00 3a10 	vmov	s0, r3
 801d556:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d55a:	f7ff fdcf 	bl	801d0fc <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801d55e:	eef0 ea40 	vmov.f32	s29, s0
 801d562:	fa5f f389 	uxtb.w	r3, r9
 801d566:	4630      	mov	r0, r6
 801d568:	eef0 2a6d 	vmov.f32	s5, s27
 801d56c:	ee01 3a90 	vmov	s3, r3
 801d570:	fa5f f388 	uxtb.w	r3, r8
 801d574:	eeb0 2a4d 	vmov.f32	s4, s26
 801d578:	ee01 3a10 	vmov	s2, r3
 801d57c:	b2fb      	uxtb	r3, r7
 801d57e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d582:	ee00 3a90 	vmov	s1, r3
 801d586:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 801d58a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801d58e:	ee00 3a10 	vmov	s0, r3
 801d592:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d596:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d59a:	f7ff fdaf 	bl	801d0fc <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801d59e:	2e00      	cmp	r6, #0
 801d5a0:	d047      	beq.n	801d632 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801d5a2:	eefc 7aee 	vcvt.u32.f32	s15, s29
 801d5a6:	2eff      	cmp	r6, #255	@ 0xff
 801d5a8:	ee17 2a90 	vmov	r2, s15
 801d5ac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801d5b0:	f3c2 0285 	ubfx	r2, r2, #2, #6
 801d5b4:	ee17 3a90 	vmov	r3, s15
 801d5b8:	eefc 7ace 	vcvt.u32.f32	s15, s28
 801d5bc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801d5c0:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 801d5c4:	ee17 3a90 	vmov	r3, s15
 801d5c8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801d5cc:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
 801d5d0:	d102      	bne.n	801d5d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a8>
 801d5d2:	9a01      	ldr	r2, [sp, #4]
 801d5d4:	2aff      	cmp	r2, #255	@ 0xff
 801d5d6:	d02a      	beq.n	801d62e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4fe>
 801d5d8:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 801d5dc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801d5e0:	f400 67fc 	and.w	r7, r0, #2016	@ 0x7e0
 801d5e4:	fb12 fe06 	smulbb	lr, r2, r6
 801d5e8:	f420 62ff 	bic.w	r2, r0, #2040	@ 0x7f8
 801d5ec:	f423 66ff 	bic.w	r6, r3, #2040	@ 0x7f8
 801d5f0:	f000 001f 	and.w	r0, r0, #31
 801d5f4:	f5ce 3180 	rsb	r1, lr, #65536	@ 0x10000
 801d5f8:	f022 0207 	bic.w	r2, r2, #7
 801d5fc:	f026 0607 	bic.w	r6, r6, #7
 801d600:	434a      	muls	r2, r1
 801d602:	434f      	muls	r7, r1
 801d604:	fb0e 2606 	mla	r6, lr, r6, r2
 801d608:	4ad0      	ldr	r2, [pc, #832]	@ (801d94c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d60a:	4348      	muls	r0, r1
 801d60c:	ea02 4616 	and.w	r6, r2, r6, lsr #16
 801d610:	f403 62fc 	and.w	r2, r3, #2016	@ 0x7e0
 801d614:	f003 031f 	and.w	r3, r3, #31
 801d618:	fb0e 7202 	mla	r2, lr, r2, r7
 801d61c:	fb0e 0303 	mla	r3, lr, r3, r0
 801d620:	0c12      	lsrs	r2, r2, #16
 801d622:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801d626:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d62a:	4316      	orrs	r6, r2
 801d62c:	4333      	orrs	r3, r6
 801d62e:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
 801d632:	9b06      	ldr	r3, [sp, #24]
 801d634:	f10a 0a01 	add.w	sl, sl, #1
 801d638:	449b      	add	fp, r3
 801d63a:	9b07      	ldr	r3, [sp, #28]
 801d63c:	441d      	add	r5, r3
 801d63e:	e6b1      	b.n	801d3a4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x274>
 801d640:	2000      	movs	r0, #0
 801d642:	9b02      	ldr	r3, [sp, #8]
 801d644:	4283      	cmp	r3, r0
 801d646:	f340 816c 	ble.w	801d922 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d64a:	9b03      	ldr	r3, [sp, #12]
 801d64c:	ea4f 422b 	mov.w	r2, fp, asr #16
 801d650:	1429      	asrs	r1, r5, #16
 801d652:	b15b      	cbz	r3, 801d66c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x53c>
 801d654:	2a00      	cmp	r2, #0
 801d656:	db52      	blt.n	801d6fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801d658:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801d65c:	429a      	cmp	r2, r3
 801d65e:	da4e      	bge.n	801d6fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801d660:	2900      	cmp	r1, #0
 801d662:	db4c      	blt.n	801d6fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801d664:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	@ 0x4e
 801d668:	4299      	cmp	r1, r3
 801d66a:	da48      	bge.n	801d6fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801d66c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801d670:	fb01 2303 	mla	r3, r1, r3, r2
 801d674:	9a04      	ldr	r2, [sp, #16]
 801d676:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801d67a:	0e31      	lsrs	r1, r6, #24
 801d67c:	d03f      	beq.n	801d6fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801d67e:	0972      	lsrs	r2, r6, #5
 801d680:	4bb2      	ldr	r3, [pc, #712]	@ (801d94c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d682:	29ff      	cmp	r1, #255	@ 0xff
 801d684:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 801d688:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d68c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d690:	ea43 0302 	orr.w	r3, r3, r2
 801d694:	ea43 0306 	orr.w	r3, r3, r6
 801d698:	b29b      	uxth	r3, r3
 801d69a:	d102      	bne.n	801d6a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x572>
 801d69c:	9a01      	ldr	r2, [sp, #4]
 801d69e:	2aff      	cmp	r2, #255	@ 0xff
 801d6a0:	d02b      	beq.n	801d6fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ca>
 801d6a2:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 801d6a6:	f423 6eff 	bic.w	lr, r3, #2040	@ 0x7f8
 801d6aa:	9a01      	ldr	r2, [sp, #4]
 801d6ac:	f02e 0e07 	bic.w	lr, lr, #7
 801d6b0:	f407 6cfc 	and.w	ip, r7, #2016	@ 0x7e0
 801d6b4:	4351      	muls	r1, r2
 801d6b6:	f427 62ff 	bic.w	r2, r7, #2040	@ 0x7f8
 801d6ba:	f007 071f 	and.w	r7, r7, #31
 801d6be:	f5c1 3680 	rsb	r6, r1, #65536	@ 0x10000
 801d6c2:	f022 0207 	bic.w	r2, r2, #7
 801d6c6:	4372      	muls	r2, r6
 801d6c8:	fb06 fc0c 	mul.w	ip, r6, ip
 801d6cc:	fb01 2e0e 	mla	lr, r1, lr, r2
 801d6d0:	4a9e      	ldr	r2, [pc, #632]	@ (801d94c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d6d2:	4377      	muls	r7, r6
 801d6d4:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 801d6d8:	f403 62fc 	and.w	r2, r3, #2016	@ 0x7e0
 801d6dc:	f003 031f 	and.w	r3, r3, #31
 801d6e0:	fb01 c202 	mla	r2, r1, r2, ip
 801d6e4:	fb01 7303 	mla	r3, r1, r3, r7
 801d6e8:	0c12      	lsrs	r2, r2, #16
 801d6ea:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801d6ee:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d6f2:	ea4e 0e02 	orr.w	lr, lr, r2
 801d6f6:	ea4e 0303 	orr.w	r3, lr, r3
 801d6fa:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 801d6fe:	9b06      	ldr	r3, [sp, #24]
 801d700:	3001      	adds	r0, #1
 801d702:	449b      	add	fp, r3
 801d704:	9b07      	ldr	r3, [sp, #28]
 801d706:	441d      	add	r5, r3
 801d708:	e79b      	b.n	801d642 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x512>
 801d70a:	f04f 0e00 	mov.w	lr, #0
 801d70e:	9b02      	ldr	r3, [sp, #8]
 801d710:	4573      	cmp	r3, lr
 801d712:	f340 8106 	ble.w	801d922 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d716:	9903      	ldr	r1, [sp, #12]
 801d718:	ea4f 422b 	mov.w	r2, fp, asr #16
 801d71c:	142b      	asrs	r3, r5, #16
 801d71e:	b179      	cbz	r1, 801d740 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x610>
 801d720:	2a00      	cmp	r2, #0
 801d722:	f2c0 8091 	blt.w	801d848 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801d726:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 801d72a:	428a      	cmp	r2, r1
 801d72c:	f280 808c 	bge.w	801d848 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801d730:	2b00      	cmp	r3, #0
 801d732:	f2c0 8089 	blt.w	801d848 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801d736:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	@ 0x4e
 801d73a:	428b      	cmp	r3, r1
 801d73c:	f280 8084 	bge.w	801d848 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801d740:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 801d744:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 801d748:	9804      	ldr	r0, [sp, #16]
 801d74a:	fb03 2301 	mla	r3, r3, r1, r2
 801d74e:	9a04      	ldr	r2, [sp, #16]
 801d750:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d754:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 801d758:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801d75c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d760:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801d764:	f3c5 2107 	ubfx	r1, r5, #8, #8
 801d768:	6850      	ldr	r0, [r2, #4]
 801d76a:	fb01 f70a 	mul.w	r7, r1, sl
 801d76e:	0a3f      	lsrs	r7, r7, #8
 801d770:	ebaa 0607 	sub.w	r6, sl, r7
 801d774:	eba1 0907 	sub.w	r9, r1, r7
 801d778:	f5ca 7a80 	rsb	sl, sl, #256	@ 0x100
 801d77c:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801d780:	fb01 f10a 	mul.w	r1, r1, sl
 801d784:	f00c 1aff 	and.w	sl, ip, #16711935	@ 0xff00ff
 801d788:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d78c:	0a0a      	lsrs	r2, r1, #8
 801d78e:	f008 11ff 	and.w	r1, r8, #16711935	@ 0xff00ff
 801d792:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801d796:	4371      	muls	r1, r6
 801d798:	fb06 f808 	mul.w	r8, r6, r8
 801d79c:	fb02 110a 	mla	r1, r2, sl, r1
 801d7a0:	f000 1aff 	and.w	sl, r0, #16711935	@ 0xff00ff
 801d7a4:	fb02 8c0c 	mla	ip, r2, ip, r8
 801d7a8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d7ac:	fb07 110a 	mla	r1, r7, sl, r1
 801d7b0:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d7b4:	fb07 cc00 	mla	ip, r7, r0, ip
 801d7b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d7bc:	fb09 110a 	mla	r1, r9, sl, r1
 801d7c0:	fb09 cc03 	mla	ip, r9, r3, ip
 801d7c4:	4b61      	ldr	r3, [pc, #388]	@ (801d94c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d7c6:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 801d7ca:	f40c 0a7f 	and.w	sl, ip, #16711680	@ 0xff0000
 801d7ce:	ea41 0a0a 	orr.w	sl, r1, sl
 801d7d2:	ea4f 315a 	mov.w	r1, sl, lsr #13
 801d7d6:	ea03 431a 	and.w	r3, r3, sl, lsr #16
 801d7da:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d7de:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801d7e2:	4319      	orrs	r1, r3
 801d7e4:	9b01      	ldr	r3, [sp, #4]
 801d7e6:	2bff      	cmp	r3, #255	@ 0xff
 801d7e8:	ea41 010a 	orr.w	r1, r1, sl
 801d7ec:	d02a      	beq.n	801d844 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x714>
 801d7ee:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 801d7f2:	f421 63ff 	bic.w	r3, r1, #2040	@ 0x7f8
 801d7f6:	9e05      	ldr	r6, [sp, #20]
 801d7f8:	f422 60ff 	bic.w	r0, r2, #2040	@ 0x7f8
 801d7fc:	f023 0307 	bic.w	r3, r3, #7
 801d800:	9f05      	ldr	r7, [sp, #20]
 801d802:	f020 0007 	bic.w	r0, r0, #7
 801d806:	4370      	muls	r0, r6
 801d808:	9e01      	ldr	r6, [sp, #4]
 801d80a:	fb06 0303 	mla	r3, r6, r3, r0
 801d80e:	484f      	ldr	r0, [pc, #316]	@ (801d94c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d810:	f402 66fc 	and.w	r6, r2, #2016	@ 0x7e0
 801d814:	f002 021f 	and.w	r2, r2, #31
 801d818:	ea00 2313 	and.w	r3, r0, r3, lsr #8
 801d81c:	f401 60fc 	and.w	r0, r1, #2016	@ 0x7e0
 801d820:	437e      	muls	r6, r7
 801d822:	9f01      	ldr	r7, [sp, #4]
 801d824:	f001 011f 	and.w	r1, r1, #31
 801d828:	fb07 6000 	mla	r0, r7, r0, r6
 801d82c:	0a00      	lsrs	r0, r0, #8
 801d82e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d832:	4303      	orrs	r3, r0
 801d834:	9805      	ldr	r0, [sp, #20]
 801d836:	4342      	muls	r2, r0
 801d838:	b29b      	uxth	r3, r3
 801d83a:	fb07 2101 	mla	r1, r7, r1, r2
 801d83e:	f3c1 2104 	ubfx	r1, r1, #8, #5
 801d842:	4319      	orrs	r1, r3
 801d844:	f824 101e 	strh.w	r1, [r4, lr, lsl #1]
 801d848:	9b06      	ldr	r3, [sp, #24]
 801d84a:	f10e 0e01 	add.w	lr, lr, #1
 801d84e:	449b      	add	fp, r3
 801d850:	9b07      	ldr	r3, [sp, #28]
 801d852:	441d      	add	r5, r3
 801d854:	e75b      	b.n	801d70e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5de>
 801d856:	2600      	movs	r6, #0
 801d858:	9b02      	ldr	r3, [sp, #8]
 801d85a:	42b3      	cmp	r3, r6
 801d85c:	dd61      	ble.n	801d922 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d85e:	9b03      	ldr	r3, [sp, #12]
 801d860:	ea4f 422b 	mov.w	r2, fp, asr #16
 801d864:	1429      	asrs	r1, r5, #16
 801d866:	b15b      	cbz	r3, 801d880 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x750>
 801d868:	2a00      	cmp	r2, #0
 801d86a:	db4d      	blt.n	801d908 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801d86c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801d870:	429a      	cmp	r2, r3
 801d872:	da49      	bge.n	801d908 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801d874:	2900      	cmp	r1, #0
 801d876:	db47      	blt.n	801d908 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801d878:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	@ 0x4e
 801d87c:	4299      	cmp	r1, r3
 801d87e:	da43      	bge.n	801d908 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801d880:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801d884:	fb01 2303 	mla	r3, r1, r3, r2
 801d888:	9a04      	ldr	r2, [sp, #16]
 801d88a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801d88e:	4b2f      	ldr	r3, [pc, #188]	@ (801d94c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d890:	094a      	lsrs	r2, r1, #5
 801d892:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 801d896:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d89a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d89e:	4313      	orrs	r3, r2
 801d8a0:	9a01      	ldr	r2, [sp, #4]
 801d8a2:	430b      	orrs	r3, r1
 801d8a4:	2aff      	cmp	r2, #255	@ 0xff
 801d8a6:	b29b      	uxth	r3, r3
 801d8a8:	d02c      	beq.n	801d904 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d4>
 801d8aa:	f834 1016 	ldrh.w	r1, [r4, r6, lsl #1]
 801d8ae:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 801d8b2:	9f05      	ldr	r7, [sp, #20]
 801d8b4:	f421 60ff 	bic.w	r0, r1, #2040	@ 0x7f8
 801d8b8:	f022 0207 	bic.w	r2, r2, #7
 801d8bc:	f020 0007 	bic.w	r0, r0, #7
 801d8c0:	4378      	muls	r0, r7
 801d8c2:	9f01      	ldr	r7, [sp, #4]
 801d8c4:	fb07 0202 	mla	r2, r7, r2, r0
 801d8c8:	4820      	ldr	r0, [pc, #128]	@ (801d94c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d8ca:	f401 67fc 	and.w	r7, r1, #2016	@ 0x7e0
 801d8ce:	f001 011f 	and.w	r1, r1, #31
 801d8d2:	ea00 2e12 	and.w	lr, r0, r2, lsr #8
 801d8d6:	9a05      	ldr	r2, [sp, #20]
 801d8d8:	f403 60fc 	and.w	r0, r3, #2016	@ 0x7e0
 801d8dc:	f003 031f 	and.w	r3, r3, #31
 801d8e0:	4357      	muls	r7, r2
 801d8e2:	9a01      	ldr	r2, [sp, #4]
 801d8e4:	fb02 7000 	mla	r0, r2, r0, r7
 801d8e8:	0a00      	lsrs	r0, r0, #8
 801d8ea:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d8ee:	ea4e 0200 	orr.w	r2, lr, r0
 801d8f2:	9805      	ldr	r0, [sp, #20]
 801d8f4:	4341      	muls	r1, r0
 801d8f6:	9801      	ldr	r0, [sp, #4]
 801d8f8:	b292      	uxth	r2, r2
 801d8fa:	fb00 1303 	mla	r3, r0, r3, r1
 801d8fe:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801d902:	4313      	orrs	r3, r2
 801d904:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 801d908:	9b06      	ldr	r3, [sp, #24]
 801d90a:	3601      	adds	r6, #1
 801d90c:	449b      	add	fp, r3
 801d90e:	9b07      	ldr	r3, [sp, #28]
 801d910:	441d      	add	r5, r3
 801d912:	e7a1      	b.n	801d858 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x728>
 801d914:	2300      	movs	r3, #0
 801d916:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d918:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d91a:	9b02      	ldr	r3, [sp, #8]
 801d91c:	4293      	cmp	r3, r2
 801d91e:	f300 811b 	bgt.w	801db58 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa28>
 801d922:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d926:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d92c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d930:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d934:	2b00      	cmp	r3, #0
 801d936:	ee7a aa89 	vadd.f32	s21, s21, s18
 801d93a:	f340 82cb 	ble.w	801ded4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801d93e:	3b01      	subs	r3, #1
 801d940:	eeb0 7a48 	vmov.f32	s14, s16
 801d944:	eef0 7a68 	vmov.f32	s15, s17
 801d948:	9309      	str	r3, [sp, #36]	@ 0x24
 801d94a:	e4ae      	b.n	801d2aa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 801d94c:	fffff800 	.word	0xfffff800
 801d950:	2000      	movs	r0, #0
 801d952:	9b02      	ldr	r3, [sp, #8]
 801d954:	4283      	cmp	r3, r0
 801d956:	dde4      	ble.n	801d922 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d958:	9a03      	ldr	r2, [sp, #12]
 801d95a:	ea4f 432b 	mov.w	r3, fp, asr #16
 801d95e:	1429      	asrs	r1, r5, #16
 801d960:	b15a      	cbz	r2, 801d97a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x84a>
 801d962:	2b00      	cmp	r3, #0
 801d964:	db49      	blt.n	801d9fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d966:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	@ 0x4c
 801d96a:	4293      	cmp	r3, r2
 801d96c:	da45      	bge.n	801d9fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d96e:	2900      	cmp	r1, #0
 801d970:	db43      	blt.n	801d9fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d972:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	@ 0x4e
 801d976:	4291      	cmp	r1, r2
 801d978:	da3f      	bge.n	801d9fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d97a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	@ 0x4c
 801d97e:	fb01 3202 	mla	r2, r1, r2, r3
 801d982:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801d984:	685b      	ldr	r3, [r3, #4]
 801d986:	5c99      	ldrb	r1, [r3, r2]
 801d988:	b3b9      	cbz	r1, 801d9fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d98a:	9b04      	ldr	r3, [sp, #16]
 801d98c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801d990:	9a01      	ldr	r2, [sp, #4]
 801d992:	2aff      	cmp	r2, #255	@ 0xff
 801d994:	d101      	bne.n	801d99a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86a>
 801d996:	29ff      	cmp	r1, #255	@ 0xff
 801d998:	d02d      	beq.n	801d9f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c6>
 801d99a:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 801d99e:	f423 6eff 	bic.w	lr, r3, #2040	@ 0x7f8
 801d9a2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801d9a6:	f02e 0e07 	bic.w	lr, lr, #7
 801d9aa:	f407 6cfc 	and.w	ip, r7, #2016	@ 0x7e0
 801d9ae:	fb12 f101 	smulbb	r1, r2, r1
 801d9b2:	f427 62ff 	bic.w	r2, r7, #2040	@ 0x7f8
 801d9b6:	f007 071f 	and.w	r7, r7, #31
 801d9ba:	f5c1 3680 	rsb	r6, r1, #65536	@ 0x10000
 801d9be:	f022 0207 	bic.w	r2, r2, #7
 801d9c2:	4372      	muls	r2, r6
 801d9c4:	fb06 fc0c 	mul.w	ip, r6, ip
 801d9c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 801d9cc:	4a61      	ldr	r2, [pc, #388]	@ (801db54 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 801d9ce:	4377      	muls	r7, r6
 801d9d0:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 801d9d4:	f403 62fc 	and.w	r2, r3, #2016	@ 0x7e0
 801d9d8:	f003 031f 	and.w	r3, r3, #31
 801d9dc:	fb01 c202 	mla	r2, r1, r2, ip
 801d9e0:	fb01 7303 	mla	r3, r1, r3, r7
 801d9e4:	0c12      	lsrs	r2, r2, #16
 801d9e6:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801d9ea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d9ee:	ea4e 0e02 	orr.w	lr, lr, r2
 801d9f2:	ea4e 0303 	orr.w	r3, lr, r3
 801d9f6:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 801d9fa:	9b06      	ldr	r3, [sp, #24]
 801d9fc:	3001      	adds	r0, #1
 801d9fe:	449b      	add	fp, r3
 801da00:	9b07      	ldr	r3, [sp, #28]
 801da02:	441d      	add	r5, r3
 801da04:	e7a5      	b.n	801d952 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 801da06:	2300      	movs	r3, #0
 801da08:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801da0c:	9b02      	ldr	r3, [sp, #8]
 801da0e:	4293      	cmp	r3, r2
 801da10:	dd87      	ble.n	801d922 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801da12:	9b03      	ldr	r3, [sp, #12]
 801da14:	ea4f 422b 	mov.w	r2, fp, asr #16
 801da18:	1429      	asrs	r1, r5, #16
 801da1a:	b17b      	cbz	r3, 801da3c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x90c>
 801da1c:	2a00      	cmp	r2, #0
 801da1e:	f2c0 8092 	blt.w	801db46 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801da22:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801da26:	429a      	cmp	r2, r3
 801da28:	f280 808d 	bge.w	801db46 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801da2c:	2900      	cmp	r1, #0
 801da2e:	f2c0 808a 	blt.w	801db46 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801da32:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	@ 0x4e
 801da36:	4299      	cmp	r1, r3
 801da38:	f280 8085 	bge.w	801db46 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801da3c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801da40:	f3c5 3603 	ubfx	r6, r5, #12, #4
 801da44:	9804      	ldr	r0, [sp, #16]
 801da46:	fb01 2103 	mla	r1, r1, r3, r2
 801da4a:	9a04      	ldr	r2, [sp, #16]
 801da4c:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 801da50:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 801da54:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801da58:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801da5c:	8879      	ldrh	r1, [r7, #2]
 801da5e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801da62:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 801da66:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801da6a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 801da6e:	fb06 f302 	mul.w	r3, r6, r2
 801da72:	ea4e 0e09 	orr.w	lr, lr, r9
 801da76:	ea4f 4901 	mov.w	r9, r1, lsl #16
 801da7a:	10db      	asrs	r3, r3, #3
 801da7c:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 801da80:	f009 69fc 	and.w	r9, r9, #132120576	@ 0x7e00000
 801da84:	f1c6 0710 	rsb	r7, r6, #16
 801da88:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801da8c:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 801da90:	1abf      	subs	r7, r7, r2
 801da92:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801da96:	ea49 0101 	orr.w	r1, r9, r1
 801da9a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801da9e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801daa2:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 801daa6:	4351      	muls	r1, r2
 801daa8:	9a01      	ldr	r2, [sp, #4]
 801daaa:	ea4a 0808 	orr.w	r8, sl, r8
 801daae:	fb0e 1107 	mla	r1, lr, r7, r1
 801dab2:	2aff      	cmp	r2, #255	@ 0xff
 801dab4:	fb03 1108 	mla	r1, r3, r8, r1
 801dab8:	ea4f 480c 	mov.w	r8, ip, lsl #16
 801dabc:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801dac0:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
 801dac4:	f008 68fc 	and.w	r8, r8, #132120576	@ 0x7e00000
 801dac8:	ea48 0c0c 	orr.w	ip, r8, ip
 801dacc:	fb03 110c 	mla	r1, r3, ip, r1
 801dad0:	ea4f 5951 	mov.w	r9, r1, lsr #21
 801dad4:	ea4f 1351 	mov.w	r3, r1, lsr #5
 801dad8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801dadc:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801dae0:	ea49 0303 	orr.w	r3, r9, r3
 801dae4:	b29b      	uxth	r3, r3
 801dae6:	d02b      	beq.n	801db40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa10>
 801dae8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801daea:	f423 66ff 	bic.w	r6, r3, #2040	@ 0x7f8
 801daee:	9805      	ldr	r0, [sp, #20]
 801daf0:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 801daf4:	f026 0607 	bic.w	r6, r6, #7
 801daf8:	f421 62ff 	bic.w	r2, r1, #2040	@ 0x7f8
 801dafc:	f401 67fc 	and.w	r7, r1, #2016	@ 0x7e0
 801db00:	f001 011f 	and.w	r1, r1, #31
 801db04:	f022 0207 	bic.w	r2, r2, #7
 801db08:	4342      	muls	r2, r0
 801db0a:	9801      	ldr	r0, [sp, #4]
 801db0c:	fb00 2606 	mla	r6, r0, r6, r2
 801db10:	4a10      	ldr	r2, [pc, #64]	@ (801db54 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 801db12:	9805      	ldr	r0, [sp, #20]
 801db14:	ea02 2616 	and.w	r6, r2, r6, lsr #8
 801db18:	f403 62fc 	and.w	r2, r3, #2016	@ 0x7e0
 801db1c:	4347      	muls	r7, r0
 801db1e:	9801      	ldr	r0, [sp, #4]
 801db20:	f003 031f 	and.w	r3, r3, #31
 801db24:	fb00 7202 	mla	r2, r0, r2, r7
 801db28:	0a12      	lsrs	r2, r2, #8
 801db2a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801db2e:	4316      	orrs	r6, r2
 801db30:	9a05      	ldr	r2, [sp, #20]
 801db32:	4351      	muls	r1, r2
 801db34:	fb00 1303 	mla	r3, r0, r3, r1
 801db38:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801db3c:	4333      	orrs	r3, r6
 801db3e:	b29b      	uxth	r3, r3
 801db40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801db42:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801db46:	9b06      	ldr	r3, [sp, #24]
 801db48:	449b      	add	fp, r3
 801db4a:	9b07      	ldr	r3, [sp, #28]
 801db4c:	441d      	add	r5, r3
 801db4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801db50:	3301      	adds	r3, #1
 801db52:	e759      	b.n	801da08 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8d8>
 801db54:	fffff800 	.word	0xfffff800
 801db58:	9903      	ldr	r1, [sp, #12]
 801db5a:	ea4f 432b 	mov.w	r3, fp, asr #16
 801db5e:	142a      	asrs	r2, r5, #16
 801db60:	b179      	cbz	r1, 801db82 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 801db62:	2b00      	cmp	r3, #0
 801db64:	f2c0 8136 	blt.w	801ddd4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801db68:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 801db6c:	428b      	cmp	r3, r1
 801db6e:	f280 8131 	bge.w	801ddd4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801db72:	2a00      	cmp	r2, #0
 801db74:	f2c0 812e 	blt.w	801ddd4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801db78:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	@ 0x4e
 801db7c:	428a      	cmp	r2, r1
 801db7e:	f280 8129 	bge.w	801ddd4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801db82:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 801db86:	fb02 3301 	mla	r3, r2, r1, r3
 801db8a:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801db8c:	6850      	ldr	r0, [r2, #4]
 801db8e:	18c2      	adds	r2, r0, r3
 801db90:	5cc0      	ldrb	r0, [r0, r3]
 801db92:	900d      	str	r0, [sp, #52]	@ 0x34
 801db94:	7850      	ldrb	r0, [r2, #1]
 801db96:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 801db9a:	900e      	str	r0, [sp, #56]	@ 0x38
 801db9c:	5c50      	ldrb	r0, [r2, r1]
 801db9e:	440a      	add	r2, r1
 801dba0:	eddd 6a0e 	vldr	s13, [sp, #56]	@ 0x38
 801dba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dba8:	7852      	ldrb	r2, [r2, #1]
 801dbaa:	ee07 0a10 	vmov	s14, r0
 801dbae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801dbb2:	900f      	str	r0, [sp, #60]	@ 0x3c
 801dbb4:	9210      	str	r2, [sp, #64]	@ 0x40
 801dbb6:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801dbba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801dbbe:	ee0d 2a10 	vmov	s26, r2
 801dbc2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801dbc6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801dbca:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801dbce:	ee0d 2a90 	vmov	s27, r2
 801dbd2:	ee2d da2c 	vmul.f32	s26, s26, s25
 801dbd6:	eef8 daed 	vcvt.f32.s32	s27, s27
 801dbda:	eeed 7a26 	vfma.f32	s15, s26, s13
 801dbde:	eddd 6a10 	vldr	s13, [sp, #64]	@ 0x40
 801dbe2:	ee6d daac 	vmul.f32	s27, s27, s25
 801dbe6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801dbea:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801dbee:	eead 7a26 	vfma.f32	s14, s26, s13
 801dbf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 801dbf6:	eeed 7a87 	vfma.f32	s15, s27, s14
 801dbfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dbfe:	ee17 6a90 	vmov	r6, s15
 801dc02:	f016 06ff 	ands.w	r6, r6, #255	@ 0xff
 801dc06:	f000 80e5 	beq.w	801ddd4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801dc0a:	9a04      	ldr	r2, [sp, #16]
 801dc0c:	eef0 2a6d 	vmov.f32	s5, s27
 801dc10:	eeb0 2a4d 	vmov.f32	s4, s26
 801dc14:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 801dc18:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 801dc1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dc1e:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 801dc22:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dc26:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 801dc2a:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 801dc2e:	f00a 001f 	and.w	r0, sl, #31
 801dc32:	4358      	muls	r0, r3
 801dc34:	1203      	asrs	r3, r0, #8
 801dc36:	f009 001f 	and.w	r0, r9, #31
 801dc3a:	ee01 3a90 	vmov	s3, r3
 801dc3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dc40:	4358      	muls	r0, r3
 801dc42:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dc46:	1203      	asrs	r3, r0, #8
 801dc48:	f008 001f 	and.w	r0, r8, #31
 801dc4c:	ee01 3a10 	vmov	s2, r3
 801dc50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc52:	4358      	muls	r0, r3
 801dc54:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801dc58:	1203      	asrs	r3, r0, #8
 801dc5a:	f007 001f 	and.w	r0, r7, #31
 801dc5e:	ee00 3a90 	vmov	s1, r3
 801dc62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dc64:	4358      	muls	r0, r3
 801dc66:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801dc6a:	1203      	asrs	r3, r0, #8
 801dc6c:	4630      	mov	r0, r6
 801dc6e:	ee00 3a10 	vmov	s0, r3
 801dc72:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801dc76:	f7ff fa41 	bl	801d0fc <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801dc7a:	f3ca 1045 	ubfx	r0, sl, #5, #6
 801dc7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dc80:	eeb0 ea40 	vmov.f32	s28, s0
 801dc84:	eef0 2a6d 	vmov.f32	s5, s27
 801dc88:	4358      	muls	r0, r3
 801dc8a:	eeb0 2a4d 	vmov.f32	s4, s26
 801dc8e:	1203      	asrs	r3, r0, #8
 801dc90:	f3c9 1045 	ubfx	r0, r9, #5, #6
 801dc94:	ee01 3a90 	vmov	s3, r3
 801dc98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dc9a:	4358      	muls	r0, r3
 801dc9c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dca0:	1203      	asrs	r3, r0, #8
 801dca2:	f3c8 1045 	ubfx	r0, r8, #5, #6
 801dca6:	ee01 3a10 	vmov	s2, r3
 801dcaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dcac:	4358      	muls	r0, r3
 801dcae:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801dcb2:	1203      	asrs	r3, r0, #8
 801dcb4:	f3c7 1045 	ubfx	r0, r7, #5, #6
 801dcb8:	0aff      	lsrs	r7, r7, #11
 801dcba:	ee00 3a90 	vmov	s1, r3
 801dcbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dcc0:	4358      	muls	r0, r3
 801dcc2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801dcc6:	1203      	asrs	r3, r0, #8
 801dcc8:	4630      	mov	r0, r6
 801dcca:	ee00 3a10 	vmov	s0, r3
 801dcce:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801dcd2:	f7ff fa13 	bl	801d0fc <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801dcd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dcd8:	ea4f 21da 	mov.w	r1, sl, lsr #11
 801dcdc:	eef0 ea40 	vmov.f32	s29, s0
 801dce0:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 801dce4:	4630      	mov	r0, r6
 801dce6:	fb03 fa01 	mul.w	sl, r3, r1
 801dcea:	eef0 2a6d 	vmov.f32	s5, s27
 801dcee:	eeb0 2a4d 	vmov.f32	s4, s26
 801dcf2:	ea4f 232a 	mov.w	r3, sl, asr #8
 801dcf6:	ee01 3a90 	vmov	s3, r3
 801dcfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcfc:	fb03 f902 	mul.w	r9, r3, r2
 801dd00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dd02:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dd06:	ea4f 2329 	mov.w	r3, r9, asr #8
 801dd0a:	ee01 3a10 	vmov	s2, r3
 801dd0e:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 801dd12:	fb02 f803 	mul.w	r8, r2, r3
 801dd16:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801dd1a:	ea4f 2328 	mov.w	r3, r8, asr #8
 801dd1e:	ee00 3a90 	vmov	s1, r3
 801dd22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd24:	437b      	muls	r3, r7
 801dd26:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801dd2a:	121b      	asrs	r3, r3, #8
 801dd2c:	ee00 3a10 	vmov	s0, r3
 801dd30:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801dd34:	f7ff f9e2 	bl	801d0fc <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801dd38:	eefc 7aee 	vcvt.u32.f32	s15, s29
 801dd3c:	2eff      	cmp	r6, #255	@ 0xff
 801dd3e:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801dd42:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801dd46:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
 801dd4a:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801dd4e:	eefc 7ace 	vcvt.u32.f32	s15, s28
 801dd52:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 801dd56:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 801dd5a:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801dd5e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801dd62:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
 801dd66:	ea43 0302 	orr.w	r3, r3, r2
 801dd6a:	b29b      	uxth	r3, r3
 801dd6c:	d102      	bne.n	801dd74 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc44>
 801dd6e:	9a01      	ldr	r2, [sp, #4]
 801dd70:	2aff      	cmp	r2, #255	@ 0xff
 801dd72:	d02c      	beq.n	801ddce <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc9e>
 801dd74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dd76:	f423 67ff 	bic.w	r7, r3, #2040	@ 0x7f8
 801dd7a:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 801dd7e:	f027 0707 	bic.w	r7, r7, #7
 801dd82:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801dd86:	f400 6efc 	and.w	lr, r0, #2016	@ 0x7e0
 801dd8a:	fb12 f606 	smulbb	r6, r2, r6
 801dd8e:	f420 62ff 	bic.w	r2, r0, #2040	@ 0x7f8
 801dd92:	f000 001f 	and.w	r0, r0, #31
 801dd96:	f5c6 3180 	rsb	r1, r6, #65536	@ 0x10000
 801dd9a:	f022 0207 	bic.w	r2, r2, #7
 801dd9e:	434a      	muls	r2, r1
 801dda0:	fb01 fe0e 	mul.w	lr, r1, lr
 801dda4:	fb06 2707 	mla	r7, r6, r7, r2
 801dda8:	4a4d      	ldr	r2, [pc, #308]	@ (801dee0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 801ddaa:	4348      	muls	r0, r1
 801ddac:	ea02 4717 	and.w	r7, r2, r7, lsr #16
 801ddb0:	f403 62fc 	and.w	r2, r3, #2016	@ 0x7e0
 801ddb4:	f003 031f 	and.w	r3, r3, #31
 801ddb8:	fb06 e202 	mla	r2, r6, r2, lr
 801ddbc:	fb06 0303 	mla	r3, r6, r3, r0
 801ddc0:	0c12      	lsrs	r2, r2, #16
 801ddc2:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801ddc6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ddca:	4317      	orrs	r7, r2
 801ddcc:	433b      	orrs	r3, r7
 801ddce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ddd0:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801ddd4:	9b06      	ldr	r3, [sp, #24]
 801ddd6:	449b      	add	fp, r3
 801ddd8:	9b07      	ldr	r3, [sp, #28]
 801ddda:	441d      	add	r5, r3
 801dddc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ddde:	3301      	adds	r3, #1
 801dde0:	e599      	b.n	801d916 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e6>
 801dde2:	9b01      	ldr	r3, [sp, #4]
 801dde4:	2bff      	cmp	r3, #255	@ 0xff
 801dde6:	d105      	bne.n	801ddf4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc4>
 801dde8:	2300      	movs	r3, #0
 801ddea:	9a02      	ldr	r2, [sp, #8]
 801ddec:	429a      	cmp	r2, r3
 801ddee:	dc51      	bgt.n	801de94 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd64>
 801ddf0:	4613      	mov	r3, r2
 801ddf2:	e596      	b.n	801d922 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801ddf4:	2000      	movs	r0, #0
 801ddf6:	9b02      	ldr	r3, [sp, #8]
 801ddf8:	4283      	cmp	r3, r0
 801ddfa:	f77f ad92 	ble.w	801d922 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801ddfe:	9b03      	ldr	r3, [sp, #12]
 801de00:	ea4f 422b 	mov.w	r2, fp, asr #16
 801de04:	1429      	asrs	r1, r5, #16
 801de06:	b15b      	cbz	r3, 801de20 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcf0>
 801de08:	2a00      	cmp	r2, #0
 801de0a:	db3d      	blt.n	801de88 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801de0c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801de10:	429a      	cmp	r2, r3
 801de12:	da39      	bge.n	801de88 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801de14:	2900      	cmp	r1, #0
 801de16:	db37      	blt.n	801de88 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801de18:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	@ 0x4e
 801de1c:	4299      	cmp	r1, r3
 801de1e:	da33      	bge.n	801de88 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801de20:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801de24:	9f05      	ldr	r7, [sp, #20]
 801de26:	fb01 2303 	mla	r3, r1, r3, r2
 801de2a:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 801de2e:	9a04      	ldr	r2, [sp, #16]
 801de30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801de34:	f421 63ff 	bic.w	r3, r1, #2040	@ 0x7f8
 801de38:	f422 66ff 	bic.w	r6, r2, #2040	@ 0x7f8
 801de3c:	f023 0307 	bic.w	r3, r3, #7
 801de40:	f402 6efc 	and.w	lr, r2, #2016	@ 0x7e0
 801de44:	f002 021f 	and.w	r2, r2, #31
 801de48:	437b      	muls	r3, r7
 801de4a:	f026 0607 	bic.w	r6, r6, #7
 801de4e:	9f01      	ldr	r7, [sp, #4]
 801de50:	fb07 3606 	mla	r6, r7, r6, r3
 801de54:	4b22      	ldr	r3, [pc, #136]	@ (801dee0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 801de56:	f401 67fc 	and.w	r7, r1, #2016	@ 0x7e0
 801de5a:	f001 011f 	and.w	r1, r1, #31
 801de5e:	ea03 2616 	and.w	r6, r3, r6, lsr #8
 801de62:	9b05      	ldr	r3, [sp, #20]
 801de64:	435f      	muls	r7, r3
 801de66:	9b01      	ldr	r3, [sp, #4]
 801de68:	fb03 730e 	mla	r3, r3, lr, r7
 801de6c:	0a1b      	lsrs	r3, r3, #8
 801de6e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801de72:	431e      	orrs	r6, r3
 801de74:	9b05      	ldr	r3, [sp, #20]
 801de76:	4359      	muls	r1, r3
 801de78:	9b01      	ldr	r3, [sp, #4]
 801de7a:	fb03 1202 	mla	r2, r3, r2, r1
 801de7e:	f3c2 2204 	ubfx	r2, r2, #8, #5
 801de82:	4316      	orrs	r6, r2
 801de84:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
 801de88:	9b06      	ldr	r3, [sp, #24]
 801de8a:	3001      	adds	r0, #1
 801de8c:	449b      	add	fp, r3
 801de8e:	9b07      	ldr	r3, [sp, #28]
 801de90:	441d      	add	r5, r3
 801de92:	e7b0      	b.n	801ddf6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc6>
 801de94:	9a03      	ldr	r2, [sp, #12]
 801de96:	ea4f 412b 	mov.w	r1, fp, asr #16
 801de9a:	1428      	asrs	r0, r5, #16
 801de9c:	b15a      	cbz	r2, 801deb6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd86>
 801de9e:	2900      	cmp	r1, #0
 801dea0:	db12      	blt.n	801dec8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801dea2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	@ 0x4c
 801dea6:	4291      	cmp	r1, r2
 801dea8:	da0e      	bge.n	801dec8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801deaa:	2800      	cmp	r0, #0
 801deac:	db0c      	blt.n	801dec8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801deae:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	@ 0x4e
 801deb2:	4290      	cmp	r0, r2
 801deb4:	da08      	bge.n	801dec8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801deb6:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	@ 0x4c
 801deba:	fb00 1202 	mla	r2, r0, r2, r1
 801debe:	9904      	ldr	r1, [sp, #16]
 801dec0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 801dec4:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 801dec8:	9a06      	ldr	r2, [sp, #24]
 801deca:	3301      	adds	r3, #1
 801decc:	4493      	add	fp, r2
 801dece:	9a07      	ldr	r2, [sp, #28]
 801ded0:	4415      	add	r5, r2
 801ded2:	e78a      	b.n	801ddea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 801ded4:	b015      	add	sp, #84	@ 0x54
 801ded6:	ecbd 8b0e 	vpop	{d8-d14}
 801deda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dede:	bf00      	nop
 801dee0:	fffff800 	.word	0xfffff800

0801dee4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801dee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee8:	b08f      	sub	sp, #60	@ 0x3c
 801deea:	460c      	mov	r4, r1
 801deec:	4680      	mov	r8, r0
 801deee:	4699      	mov	r9, r3
 801def0:	6808      	ldr	r0, [r1, #0]
 801def2:	ab0a      	add	r3, sp, #40	@ 0x28
 801def4:	6849      	ldr	r1, [r1, #4]
 801def6:	c303      	stmia	r3!, {r0, r1}
 801def8:	6810      	ldr	r0, [r2, #0]
 801defa:	ab0c      	add	r3, sp, #48	@ 0x30
 801defc:	6851      	ldr	r1, [r2, #4]
 801defe:	c303      	stmia	r3!, {r0, r1}
 801df00:	a80a      	add	r0, sp, #40	@ 0x28
 801df02:	f7fb fd01 	bl	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df06:	4621      	mov	r1, r4
 801df08:	a80c      	add	r0, sp, #48	@ 0x30
 801df0a:	4c58      	ldr	r4, [pc, #352]	@ (801e06c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801df0c:	f7fb fce4 	bl	80198d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df10:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801df14:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801df18:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801df1c:	6820      	ldr	r0, [r4, #0]
 801df1e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801df22:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801df26:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801df2a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801df2e:	440a      	add	r2, r1
 801df30:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801df34:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801df38:	4413      	add	r3, r2
 801df3a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801df3e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801df42:	9305      	str	r3, [sp, #20]
 801df44:	6803      	ldr	r3, [r0, #0]
 801df46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801df48:	4798      	blx	r3
 801df4a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801df4e:	d118      	bne.n	801df82 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801df50:	f010 0f20 	tst.w	r0, #32
 801df54:	6820      	ldr	r0, [r4, #0]
 801df56:	d017      	beq.n	801df88 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801df58:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801df5c:	b2bf      	uxth	r7, r7
 801df5e:	6801      	ldr	r1, [r0, #0]
 801df60:	9402      	str	r4, [sp, #8]
 801df62:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801df66:	f8cd 900c 	str.w	r9, [sp, #12]
 801df6a:	9401      	str	r4, [sp, #4]
 801df6c:	9700      	str	r7, [sp, #0]
 801df6e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801df72:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 801df74:	4641      	mov	r1, r8
 801df76:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801df7a:	47a0      	blx	r4
 801df7c:	b00f      	add	sp, #60	@ 0x3c
 801df7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df82:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801df86:	e7e5      	b.n	801df54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 801df88:	6803      	ldr	r3, [r0, #0]
 801df8a:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 801e074 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>
 801df8e:	6a1b      	ldr	r3, [r3, #32]
 801df90:	4798      	blx	r3
 801df92:	4a37      	ldr	r2, [pc, #220]	@ (801e070 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801df94:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801df98:	f04f 0c00 	mov.w	ip, #0
 801df9c:	8813      	ldrh	r3, [r2, #0]
 801df9e:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801dfa2:	9209      	str	r2, [sp, #36]	@ 0x24
 801dfa4:	fb04 1303 	mla	r3, r4, r3, r1
 801dfa8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dfac:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 801dfb0:	0099      	lsls	r1, r3, #2
 801dfb2:	005b      	lsls	r3, r3, #1
 801dfb4:	9108      	str	r1, [sp, #32]
 801dfb6:	9307      	str	r3, [sp, #28]
 801dfb8:	9b05      	ldr	r3, [sp, #20]
 801dfba:	459c      	cmp	ip, r3
 801dfbc:	da4f      	bge.n	801e05e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17a>
 801dfbe:	4686      	mov	lr, r0
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	42bb      	cmp	r3, r7
 801dfc4:	da3a      	bge.n	801e03c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x158>
 801dfc6:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 801dfca:	0e2e      	lsrs	r6, r5, #24
 801dfcc:	d012      	beq.n	801dff4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801dfce:	ea0a 2415 	and.w	r4, sl, r5, lsr #8
 801dfd2:	f3c5 02c4 	ubfx	r2, r5, #3, #5
 801dfd6:	0969      	lsrs	r1, r5, #5
 801dfd8:	2eff      	cmp	r6, #255	@ 0xff
 801dfda:	b2a4      	uxth	r4, r4
 801dfdc:	9206      	str	r2, [sp, #24]
 801dfde:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801dfe2:	d10b      	bne.n	801dffc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 801dfe4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801dfe8:	d108      	bne.n	801dffc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 801dfea:	430c      	orrs	r4, r1
 801dfec:	4322      	orrs	r2, r4
 801dfee:	4614      	mov	r4, r2
 801dff0:	f8ae 4000 	strh.w	r4, [lr]
 801dff4:	f10e 0e02 	add.w	lr, lr, #2
 801dff8:	3301      	adds	r3, #1
 801dffa:	e7e2      	b.n	801dfc2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801dffc:	fb06 f609 	mul.w	r6, r6, r9
 801e000:	f8be 5000 	ldrh.w	r5, [lr]
 801e004:	f5c6 3b80 	rsb	fp, r6, #65536	@ 0x10000
 801e008:	ea05 020a 	and.w	r2, r5, sl
 801e00c:	4374      	muls	r4, r6
 801e00e:	4371      	muls	r1, r6
 801e010:	fb0b 4402 	mla	r4, fp, r2, r4
 801e014:	f405 62fc 	and.w	r2, r5, #2016	@ 0x7e0
 801e018:	f005 051f 	and.w	r5, r5, #31
 801e01c:	fb0b 1102 	mla	r1, fp, r2, r1
 801e020:	9a06      	ldr	r2, [sp, #24]
 801e022:	ea0a 4414 	and.w	r4, sl, r4, lsr #16
 801e026:	0c09      	lsrs	r1, r1, #16
 801e028:	4356      	muls	r6, r2
 801e02a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801e02e:	fb0b 6505 	mla	r5, fp, r5, r6
 801e032:	430c      	orrs	r4, r1
 801e034:	f3c5 4504 	ubfx	r5, r5, #16, #5
 801e038:	432c      	orrs	r4, r5
 801e03a:	e7d9      	b.n	801dff0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e03e:	f10c 0c01 	add.w	ip, ip, #1
 801e042:	9a07      	ldr	r2, [sp, #28]
 801e044:	881b      	ldrh	r3, [r3, #0]
 801e046:	1bdb      	subs	r3, r3, r7
 801e048:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e04c:	9a08      	ldr	r2, [sp, #32]
 801e04e:	4418      	add	r0, r3
 801e050:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801e054:	1bdb      	subs	r3, r3, r7
 801e056:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e05a:	4498      	add	r8, r3
 801e05c:	e7ac      	b.n	801dfb8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 801e05e:	4b03      	ldr	r3, [pc, #12]	@ (801e06c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801e060:	6818      	ldr	r0, [r3, #0]
 801e062:	6803      	ldr	r3, [r0, #0]
 801e064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e066:	4798      	blx	r3
 801e068:	e788      	b.n	801df7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801e06a:	bf00      	nop
 801e06c:	20024e34 	.word	0x20024e34
 801e070:	20024e2e 	.word	0x20024e2e
 801e074:	fffff800 	.word	0xfffff800

0801e078 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e07c:	9d06      	ldr	r5, [sp, #24]
 801e07e:	461c      	mov	r4, r3
 801e080:	460e      	mov	r6, r1
 801e082:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801e086:	f89d 7020 	ldrb.w	r7, [sp, #32]
 801e08a:	b142      	cbz	r2, 801e09e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801e08c:	2a02      	cmp	r2, #2
 801e08e:	d010      	beq.n	801e0b2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 801e090:	4b0b      	ldr	r3, [pc, #44]	@ (801e0c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x48>)
 801e092:	f240 11b9 	movw	r1, #441	@ 0x1b9
 801e096:	4a0b      	ldr	r2, [pc, #44]	@ (801e0c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4c>)
 801e098:	480b      	ldr	r0, [pc, #44]	@ (801e0c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 801e09a:	f001 fe6b 	bl	801fd74 <__assert_func>
 801e09e:	6802      	ldr	r2, [r0, #0]
 801e0a0:	9306      	str	r3, [sp, #24]
 801e0a2:	462b      	mov	r3, r5
 801e0a4:	9707      	str	r7, [sp, #28]
 801e0a6:	6916      	ldr	r6, [r2, #16]
 801e0a8:	4622      	mov	r2, r4
 801e0aa:	46b4      	mov	ip, r6
 801e0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0b0:	4760      	bx	ip
 801e0b2:	462a      	mov	r2, r5
 801e0b4:	4621      	mov	r1, r4
 801e0b6:	4630      	mov	r0, r6
 801e0b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0bc:	f7ff bf12 	b.w	801dee4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e0c0:	080269fc 	.word	0x080269fc
 801e0c4:	08026b5b 	.word	0x08026b5b
 801e0c8:	080269ca 	.word	0x080269ca

0801e0cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801e0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0d0:	b08b      	sub	sp, #44	@ 0x2c
 801e0d2:	460e      	mov	r6, r1
 801e0d4:	4604      	mov	r4, r0
 801e0d6:	6851      	ldr	r1, [r2, #4]
 801e0d8:	6810      	ldr	r0, [r2, #0]
 801e0da:	ad06      	add	r5, sp, #24
 801e0dc:	4617      	mov	r7, r2
 801e0de:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801e0e2:	c503      	stmia	r5!, {r0, r1}
 801e0e4:	6818      	ldr	r0, [r3, #0]
 801e0e6:	ad08      	add	r5, sp, #32
 801e0e8:	6859      	ldr	r1, [r3, #4]
 801e0ea:	c503      	stmia	r5!, {r0, r1}
 801e0ec:	a806      	add	r0, sp, #24
 801e0ee:	f7fb fc0b 	bl	8019908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0f2:	4639      	mov	r1, r7
 801e0f4:	a808      	add	r0, sp, #32
 801e0f6:	f7fb fbef 	bl	80198d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e0fa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e0fe:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801e102:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e106:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	@ 0x24
 801e10a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e10e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801e112:	1871      	adds	r1, r6, r1
 801e114:	9101      	str	r1, [sp, #4]
 801e116:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e11a:	440a      	add	r2, r1
 801e11c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e120:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e124:	4413      	add	r3, r2
 801e126:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801e12a:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 801e12e:	9302      	str	r3, [sp, #8]
 801e130:	4b64      	ldr	r3, [pc, #400]	@ (801e2c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 801e132:	6818      	ldr	r0, [r3, #0]
 801e134:	6803      	ldr	r3, [r0, #0]
 801e136:	6a1b      	ldr	r3, [r3, #32]
 801e138:	4798      	blx	r3
 801e13a:	4b63      	ldr	r3, [pc, #396]	@ (801e2c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1fc>)
 801e13c:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	@ 0x22
 801e140:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e144:	881a      	ldrh	r2, [r3, #0]
 801e146:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e14a:	fb06 1202 	mla	r2, r6, r2, r1
 801e14e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e152:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 801e156:	b212      	sxth	r2, r2
 801e158:	9204      	str	r2, [sp, #16]
 801e15a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e15e:	9203      	str	r2, [sp, #12]
 801e160:	d051      	beq.n	801e206 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x13a>
 801e162:	f04f 0800 	mov.w	r8, #0
 801e166:	f8df 9164 	ldr.w	r9, [pc, #356]	@ 801e2cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 801e16a:	9305      	str	r3, [sp, #20]
 801e16c:	9b02      	ldr	r3, [sp, #8]
 801e16e:	4598      	cmp	r8, r3
 801e170:	f280 809f 	bge.w	801e2b2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 801e174:	2100      	movs	r1, #0
 801e176:	42a9      	cmp	r1, r5
 801e178:	da30      	bge.n	801e1dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x110>
 801e17a:	9b01      	ldr	r3, [sp, #4]
 801e17c:	5c5e      	ldrb	r6, [r3, r1]
 801e17e:	b35e      	cbz	r6, 801e1d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x10c>
 801e180:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801e184:	fb1b f606 	smulbb	r6, fp, r6
 801e188:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
 801e18c:	f5c6 3780 	rsb	r7, r6, #65536	@ 0x10000
 801e190:	ea0e 0309 	and.w	r3, lr, r9
 801e194:	ea02 0c09 	and.w	ip, r2, r9
 801e198:	f40e 6afc 	and.w	sl, lr, #2016	@ 0x7e0
 801e19c:	437b      	muls	r3, r7
 801e19e:	f00e 0e1f 	and.w	lr, lr, #31
 801e1a2:	fb07 fa0a 	mul.w	sl, r7, sl
 801e1a6:	fb06 3c0c 	mla	ip, r6, ip, r3
 801e1aa:	f402 63fc 	and.w	r3, r2, #2016	@ 0x7e0
 801e1ae:	fb07 fe0e 	mul.w	lr, r7, lr
 801e1b2:	f002 021f 	and.w	r2, r2, #31
 801e1b6:	fb06 a303 	mla	r3, r6, r3, sl
 801e1ba:	ea09 4c1c 	and.w	ip, r9, ip, lsr #16
 801e1be:	fb06 ee02 	mla	lr, r6, r2, lr
 801e1c2:	0c1b      	lsrs	r3, r3, #16
 801e1c4:	f3ce 4e04 	ubfx	lr, lr, #16, #5
 801e1c8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e1cc:	ea4c 0c03 	orr.w	ip, ip, r3
 801e1d0:	ea4c 0c0e 	orr.w	ip, ip, lr
 801e1d4:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 801e1d8:	3101      	adds	r1, #1
 801e1da:	e7cc      	b.n	801e176 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xaa>
 801e1dc:	9b05      	ldr	r3, [sp, #20]
 801e1de:	f108 0801 	add.w	r8, r8, #1
 801e1e2:	9a03      	ldr	r2, [sp, #12]
 801e1e4:	881b      	ldrh	r3, [r3, #0]
 801e1e6:	1b5b      	subs	r3, r3, r5
 801e1e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e1ec:	4418      	add	r0, r3
 801e1ee:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e1f2:	1b5b      	subs	r3, r3, r5
 801e1f4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801e1f8:	4414      	add	r4, r2
 801e1fa:	9a04      	ldr	r2, [sp, #16]
 801e1fc:	4413      	add	r3, r2
 801e1fe:	9a01      	ldr	r2, [sp, #4]
 801e200:	441a      	add	r2, r3
 801e202:	9201      	str	r2, [sp, #4]
 801e204:	e7b2      	b.n	801e16c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa0>
 801e206:	f04f 0900 	mov.w	r9, #0
 801e20a:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e2cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 801e20e:	9305      	str	r3, [sp, #20]
 801e210:	9b02      	ldr	r3, [sp, #8]
 801e212:	4599      	cmp	r9, r3
 801e214:	da4d      	bge.n	801e2b2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 801e216:	4607      	mov	r7, r0
 801e218:	2600      	movs	r6, #0
 801e21a:	42ae      	cmp	r6, r5
 801e21c:	da34      	bge.n	801e288 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1bc>
 801e21e:	9b01      	ldr	r3, [sp, #4]
 801e220:	5d99      	ldrb	r1, [r3, r6]
 801e222:	b121      	cbz	r1, 801e22e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 801e224:	29ff      	cmp	r1, #255	@ 0xff
 801e226:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 801e22a:	d103      	bne.n	801e234 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 801e22c:	803a      	strh	r2, [r7, #0]
 801e22e:	3702      	adds	r7, #2
 801e230:	3601      	adds	r6, #1
 801e232:	e7f2      	b.n	801e21a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14e>
 801e234:	f8b7 c000 	ldrh.w	ip, [r7]
 801e238:	f5c1 7e80 	rsb	lr, r1, #256	@ 0x100
 801e23c:	ea02 080a 	and.w	r8, r2, sl
 801e240:	ea0c 030a 	and.w	r3, ip, sl
 801e244:	f40c 6bfc 	and.w	fp, ip, #2016	@ 0x7e0
 801e248:	f00c 0c1f 	and.w	ip, ip, #31
 801e24c:	fb0e f303 	mul.w	r3, lr, r3
 801e250:	fb0e fb0b 	mul.w	fp, lr, fp
 801e254:	fb01 3808 	mla	r8, r1, r8, r3
 801e258:	f402 63fc 	and.w	r3, r2, #2016	@ 0x7e0
 801e25c:	fb0e fc0c 	mul.w	ip, lr, ip
 801e260:	f002 021f 	and.w	r2, r2, #31
 801e264:	fb01 b303 	mla	r3, r1, r3, fp
 801e268:	ea0a 2818 	and.w	r8, sl, r8, lsr #8
 801e26c:	fb01 cc02 	mla	ip, r1, r2, ip
 801e270:	0a1b      	lsrs	r3, r3, #8
 801e272:	f3cc 2c04 	ubfx	ip, ip, #8, #5
 801e276:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e27a:	ea48 0803 	orr.w	r8, r8, r3
 801e27e:	ea48 080c 	orr.w	r8, r8, ip
 801e282:	f8a7 8000 	strh.w	r8, [r7]
 801e286:	e7d2      	b.n	801e22e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 801e288:	9b05      	ldr	r3, [sp, #20]
 801e28a:	f109 0901 	add.w	r9, r9, #1
 801e28e:	9a03      	ldr	r2, [sp, #12]
 801e290:	881b      	ldrh	r3, [r3, #0]
 801e292:	1b5b      	subs	r3, r3, r5
 801e294:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e298:	4418      	add	r0, r3
 801e29a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e29e:	1b5b      	subs	r3, r3, r5
 801e2a0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801e2a4:	4414      	add	r4, r2
 801e2a6:	9a04      	ldr	r2, [sp, #16]
 801e2a8:	4413      	add	r3, r2
 801e2aa:	9a01      	ldr	r2, [sp, #4]
 801e2ac:	441a      	add	r2, r3
 801e2ae:	9201      	str	r2, [sp, #4]
 801e2b0:	e7ae      	b.n	801e210 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801e2b2:	4b04      	ldr	r3, [pc, #16]	@ (801e2c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 801e2b4:	6818      	ldr	r0, [r3, #0]
 801e2b6:	6803      	ldr	r3, [r0, #0]
 801e2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e2ba:	4798      	blx	r3
 801e2bc:	b00b      	add	sp, #44	@ 0x2c
 801e2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2c2:	bf00      	nop
 801e2c4:	20024e34 	.word	0x20024e34
 801e2c8:	20024e2e 	.word	0x20024e2e
 801e2cc:	fffff800 	.word	0xfffff800

0801e2d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2d4:	b089      	sub	sp, #36	@ 0x24
 801e2d6:	4682      	mov	sl, r0
 801e2d8:	4689      	mov	r9, r1
 801e2da:	4690      	mov	r8, r2
 801e2dc:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 801e2e0:	461f      	mov	r7, r3
 801e2e2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e2e4:	b365      	cbz	r5, 801e340 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801e2e6:	4608      	mov	r0, r1
 801e2e8:	f7fe faf0 	bl	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e2ec:	4606      	mov	r6, r0
 801e2ee:	4648      	mov	r0, r9
 801e2f0:	f7fe fb24 	bl	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e2f4:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e2f8:	4648      	mov	r0, r9
 801e2fa:	f8ad 8008 	strh.w	r8, [sp, #8]
 801e2fe:	f8ad 700a 	strh.w	r7, [sp, #10]
 801e302:	f8ad 600c 	strh.w	r6, [sp, #12]
 801e306:	f7fe fc37 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e30a:	2801      	cmp	r0, #1
 801e30c:	d105      	bne.n	801e31a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 801e30e:	4b64      	ldr	r3, [pc, #400]	@ (801e4a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d0>)
 801e310:	2160      	movs	r1, #96	@ 0x60
 801e312:	4a64      	ldr	r2, [pc, #400]	@ (801e4a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d4>)
 801e314:	4864      	ldr	r0, [pc, #400]	@ (801e4a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d8>)
 801e316:	f001 fd2d 	bl	801fd74 <__assert_func>
 801e31a:	4648      	mov	r0, r9
 801e31c:	f7fe fbd4 	bl	801cac8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e320:	4606      	mov	r6, r0
 801e322:	4648      	mov	r0, r9
 801e324:	f7fe fc00 	bl	801cb28 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 801e328:	4680      	mov	r8, r0
 801e32a:	4648      	mov	r0, r9
 801e32c:	f7fe fc24 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e330:	2802      	cmp	r0, #2
 801e332:	d108      	bne.n	801e346 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e334:	462b      	mov	r3, r5
 801e336:	4622      	mov	r2, r4
 801e338:	a902      	add	r1, sp, #8
 801e33a:	4630      	mov	r0, r6
 801e33c:	f7ff fdd2 	bl	801dee4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e340:	b009      	add	sp, #36	@ 0x24
 801e342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e346:	4648      	mov	r0, r9
 801e348:	f7fe fb88 	bl	801ca5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e34c:	b950      	cbnz	r0, 801e364 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e34e:	f8da 3000 	ldr.w	r3, [sl]
 801e352:	aa02      	add	r2, sp, #8
 801e354:	9001      	str	r0, [sp, #4]
 801e356:	4631      	mov	r1, r6
 801e358:	9500      	str	r5, [sp, #0]
 801e35a:	4650      	mov	r0, sl
 801e35c:	691d      	ldr	r5, [r3, #16]
 801e35e:	4623      	mov	r3, r4
 801e360:	47a8      	blx	r5
 801e362:	e7ed      	b.n	801e340 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801e364:	af06      	add	r7, sp, #24
 801e366:	4649      	mov	r1, r9
 801e368:	f10d 0910 	add.w	r9, sp, #16
 801e36c:	4638      	mov	r0, r7
 801e36e:	f7fe fb1d 	bl	801c9ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e372:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e376:	e889 0003 	stmia.w	r9, {r0, r1}
 801e37a:	4621      	mov	r1, r4
 801e37c:	4648      	mov	r0, r9
 801e37e:	f7f4 fd17 	bl	8012db0 <_ZN8touchgfx4RectaNERKS0_>
 801e382:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e386:	b113      	cbz	r3, 801e38e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbe>
 801e388:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e38c:	b913      	cbnz	r3, 801e394 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801e38e:	9500      	str	r5, [sp, #0]
 801e390:	4623      	mov	r3, r4
 801e392:	e07f      	b.n	801e494 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>
 801e394:	f8da 3000 	ldr.w	r3, [sl]
 801e398:	2200      	movs	r2, #0
 801e39a:	9500      	str	r5, [sp, #0]
 801e39c:	4631      	mov	r1, r6
 801e39e:	9201      	str	r2, [sp, #4]
 801e3a0:	4650      	mov	r0, sl
 801e3a2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801e3a6:	aa02      	add	r2, sp, #8
 801e3a8:	464b      	mov	r3, r9
 801e3aa:	47d8      	blx	fp
 801e3ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e3b0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e3b4:	4293      	cmp	r3, r2
 801e3b6:	dd13      	ble.n	801e3e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 801e3b8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e3bc:	1a9b      	subs	r3, r3, r2
 801e3be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e3c2:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e3c6:	4630      	mov	r0, r6
 801e3c8:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e3cc:	aa02      	add	r2, sp, #8
 801e3ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e3d2:	4641      	mov	r1, r8
 801e3d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e3d8:	463b      	mov	r3, r7
 801e3da:	9500      	str	r5, [sp, #0]
 801e3dc:	f7ff fe76 	bl	801e0cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e3e0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e3e4:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e3e8:	4293      	cmp	r3, r2
 801e3ea:	dd13      	ble.n	801e414 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x144>
 801e3ec:	1a9b      	subs	r3, r3, r2
 801e3ee:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e3f2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e3f6:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e3fa:	aa02      	add	r2, sp, #8
 801e3fc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e400:	4630      	mov	r0, r6
 801e402:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e406:	463b      	mov	r3, r7
 801e408:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e40c:	4641      	mov	r1, r8
 801e40e:	9500      	str	r5, [sp, #0]
 801e410:	f7ff fe5c 	bl	801e0cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e414:	88a2      	ldrh	r2, [r4, #4]
 801e416:	8823      	ldrh	r3, [r4, #0]
 801e418:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e41c:	4413      	add	r3, r2
 801e41e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e422:	440a      	add	r2, r1
 801e424:	b29b      	uxth	r3, r3
 801e426:	b292      	uxth	r2, r2
 801e428:	b218      	sxth	r0, r3
 801e42a:	b211      	sxth	r1, r2
 801e42c:	4288      	cmp	r0, r1
 801e42e:	dd13      	ble.n	801e458 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 801e430:	1a9b      	subs	r3, r3, r2
 801e432:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e436:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 801e43a:	aa02      	add	r2, sp, #8
 801e43c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e440:	4641      	mov	r1, r8
 801e442:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e446:	463b      	mov	r3, r7
 801e448:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e44c:	4630      	mov	r0, r6
 801e44e:	9500      	str	r5, [sp, #0]
 801e450:	f8ad e01a 	strh.w	lr, [sp, #26]
 801e454:	f7ff fe3a 	bl	801e0cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e458:	88e2      	ldrh	r2, [r4, #6]
 801e45a:	8863      	ldrh	r3, [r4, #2]
 801e45c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e460:	4413      	add	r3, r2
 801e462:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e466:	440a      	add	r2, r1
 801e468:	b29b      	uxth	r3, r3
 801e46a:	b292      	uxth	r2, r2
 801e46c:	b218      	sxth	r0, r3
 801e46e:	b211      	sxth	r1, r2
 801e470:	4288      	cmp	r0, r1
 801e472:	f77f af65 	ble.w	801e340 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801e476:	1a9b      	subs	r3, r3, r2
 801e478:	f9b4 e000 	ldrsh.w	lr, [r4]
 801e47c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e480:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e484:	463b      	mov	r3, r7
 801e486:	f8ad e018 	strh.w	lr, [sp, #24]
 801e48a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e48e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e492:	9500      	str	r5, [sp, #0]
 801e494:	aa02      	add	r2, sp, #8
 801e496:	4641      	mov	r1, r8
 801e498:	4630      	mov	r0, r6
 801e49a:	f7ff fe17 	bl	801e0cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e49e:	e74f      	b.n	801e340 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801e4a0:	0802693a 	.word	0x0802693a
 801e4a4:	08026a68 	.word	0x08026a68
 801e4a8:	080269ca 	.word	0x080269ca

0801e4ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801e4ac:	b138      	cbz	r0, 801e4be <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e4ae:	2902      	cmp	r1, #2
 801e4b0:	d00b      	beq.n	801e4ca <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 801e4b2:	2903      	cmp	r1, #3
 801e4b4:	d00c      	beq.n	801e4d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e4b6:	2901      	cmp	r1, #1
 801e4b8:	d10d      	bne.n	801e4d6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801e4ba:	2001      	movs	r0, #1
 801e4bc:	4770      	bx	lr
 801e4be:	2902      	cmp	r1, #2
 801e4c0:	d006      	beq.n	801e4d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e4c2:	2903      	cmp	r1, #3
 801e4c4:	d007      	beq.n	801e4d6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801e4c6:	2901      	cmp	r1, #1
 801e4c8:	d1f7      	bne.n	801e4ba <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e4ca:	4b05      	ldr	r3, [pc, #20]	@ (801e4e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e4cc:	8818      	ldrh	r0, [r3, #0]
 801e4ce:	4770      	bx	lr
 801e4d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e4d4:	4770      	bx	lr
 801e4d6:	4b02      	ldr	r3, [pc, #8]	@ (801e4e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e4d8:	8818      	ldrh	r0, [r3, #0]
 801e4da:	4240      	negs	r0, r0
 801e4dc:	4770      	bx	lr
 801e4de:	bf00      	nop
 801e4e0:	20024e2e 	.word	0x20024e2e

0801e4e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801e4e4:	b140      	cbz	r0, 801e4f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801e4e6:	2902      	cmp	r1, #2
 801e4e8:	d00c      	beq.n	801e504 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x20>
 801e4ea:	2903      	cmp	r1, #3
 801e4ec:	d00d      	beq.n	801e50a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801e4ee:	2901      	cmp	r1, #1
 801e4f0:	d10f      	bne.n	801e512 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 801e4f2:	4b09      	ldr	r3, [pc, #36]	@ (801e518 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e4f4:	8818      	ldrh	r0, [r3, #0]
 801e4f6:	4770      	bx	lr
 801e4f8:	2902      	cmp	r1, #2
 801e4fa:	d006      	beq.n	801e50a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801e4fc:	2903      	cmp	r1, #3
 801e4fe:	d008      	beq.n	801e512 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 801e500:	2901      	cmp	r1, #1
 801e502:	d1f6      	bne.n	801e4f2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0xe>
 801e504:	f04f 30ff 	mov.w	r0, #4294967295
 801e508:	4770      	bx	lr
 801e50a:	4b03      	ldr	r3, [pc, #12]	@ (801e518 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e50c:	8818      	ldrh	r0, [r3, #0]
 801e50e:	4240      	negs	r0, r0
 801e510:	4770      	bx	lr
 801e512:	2001      	movs	r0, #1
 801e514:	4770      	bx	lr
 801e516:	bf00      	nop
 801e518:	20024e2e 	.word	0x20024e2e

0801e51c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 801e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e520:	b097      	sub	sp, #92	@ 0x5c
 801e522:	f8dd 9094 	ldr.w	r9, [sp, #148]	@ 0x94
 801e526:	910d      	str	r1, [sp, #52]	@ 0x34
 801e528:	a912      	add	r1, sp, #72	@ 0x48
 801e52a:	f899 000d 	ldrb.w	r0, [r9, #13]
 801e52e:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	@ 0x80
 801e532:	f010 0f08 	tst.w	r0, #8
 801e536:	f8bd 4088 	ldrh.w	r4, [sp, #136]	@ 0x88
 801e53a:	f89d 50a0 	ldrb.w	r5, [sp, #160]	@ 0xa0
 801e53e:	f89d a0a8 	ldrb.w	sl, [sp, #168]	@ 0xa8
 801e542:	e881 000c 	stmia.w	r1, {r2, r3}
 801e546:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801e54a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801e54e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e550:	bf0c      	ite	eq
 801e552:	2200      	moveq	r2, #0
 801e554:	f44f 7280 	movne.w	r2, #256	@ 0x100
 801e558:	f899 1006 	ldrb.w	r1, [r9, #6]
 801e55c:	f010 0f10 	tst.w	r0, #16
 801e560:	9307      	str	r3, [sp, #28]
 801e562:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c
 801e566:	bf0c      	ite	eq
 801e568:	2000      	moveq	r0, #0
 801e56a:	f44f 7080 	movne.w	r0, #256	@ 0x100
 801e56e:	430a      	orrs	r2, r1
 801e570:	9308      	str	r3, [sp, #32]
 801e572:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e574:	920a      	str	r2, [sp, #40]	@ 0x28
 801e576:	f000 813b 	beq.w	801e7f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801e57a:	f899 2007 	ldrb.w	r2, [r9, #7]
 801e57e:	4302      	orrs	r2, r0
 801e580:	9209      	str	r2, [sp, #36]	@ 0x24
 801e582:	f000 8135 	beq.w	801e7f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801e586:	f999 1009 	ldrsb.w	r1, [r9, #9]
 801e58a:	2c00      	cmp	r4, #0
 801e58c:	f000 80db 	beq.w	801e746 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 801e590:	1a61      	subs	r1, r4, r1
 801e592:	b28c      	uxth	r4, r1
 801e594:	0422      	lsls	r2, r4, #16
 801e596:	d504      	bpl.n	801e5a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801e598:	eba8 0404 	sub.w	r4, r8, r4
 801e59c:	fa0f f884 	sxth.w	r8, r4
 801e5a0:	2400      	movs	r4, #0
 801e5a2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e5a6:	88df      	ldrh	r7, [r3, #6]
 801e5a8:	4580      	cmp	r8, r0
 801e5aa:	b282      	uxth	r2, r0
 801e5ac:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 801e5b0:	bfb8      	it	lt
 801e5b2:	18a1      	addlt	r1, r4, r2
 801e5b4:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 801e5b8:	44be      	add	lr, r7
 801e5ba:	f8bd 7024 	ldrh.w	r7, [sp, #36]	@ 0x24
 801e5be:	bfbc      	itt	lt
 801e5c0:	eba1 0108 	sublt.w	r1, r1, r8
 801e5c4:	4680      	movlt	r8, r0
 801e5c6:	a812      	add	r0, sp, #72	@ 0x48
 801e5c8:	bfb8      	it	lt
 801e5ca:	b28c      	uxthlt	r4, r1
 801e5cc:	8899      	ldrh	r1, [r3, #4]
 801e5ce:	fa0f f38e 	sxth.w	r3, lr
 801e5d2:	440a      	add	r2, r1
 801e5d4:	4641      	mov	r1, r8
 801e5d6:	930e      	str	r3, [sp, #56]	@ 0x38
 801e5d8:	4bb1      	ldr	r3, [pc, #708]	@ (801e8a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801e5da:	b212      	sxth	r2, r2
 801e5dc:	f893 b000 	ldrb.w	fp, [r3]
 801e5e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 801e5e2:	f10b 3eff 	add.w	lr, fp, #4294967295
 801e5e6:	9a07      	ldr	r2, [sp, #28]
 801e5e8:	f1de 0300 	rsbs	r3, lr, #0
 801e5ec:	eb43 030e 	adc.w	r3, r3, lr
 801e5f0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e5f2:	4653      	mov	r3, sl
 801e5f4:	f7fa fef8 	bl	80193e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e5f8:	4641      	mov	r1, r8
 801e5fa:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801e5fe:	4653      	mov	r3, sl
 801e600:	9a07      	ldr	r2, [sp, #28]
 801e602:	a812      	add	r0, sp, #72	@ 0x48
 801e604:	f7fa ff0b 	bl	801941e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e608:	a916      	add	r1, sp, #88	@ 0x58
 801e60a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e60e:	a815      	add	r0, sp, #84	@ 0x54
 801e610:	f7fb f92c 	bl	801986c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e614:	f1ba 0f00 	cmp.w	sl, #0
 801e618:	f040 8099 	bne.w	801e74e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x232>
 801e61c:	f1bb 0f01 	cmp.w	fp, #1
 801e620:	f040 809d 	bne.w	801e75e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x242>
 801e624:	4a9f      	ldr	r2, [pc, #636]	@ (801e8a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801e626:	2d04      	cmp	r5, #4
 801e628:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801e62c:	8811      	ldrh	r1, [r2, #0]
 801e62e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801e632:	fb01 2303 	mla	r3, r1, r3, r2
 801e636:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e638:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 801e63c:	f04f 03ff 	mov.w	r3, #255	@ 0xff
 801e640:	fa43 f305 	asr.w	r3, r3, r5
 801e644:	b2db      	uxtb	r3, r3
 801e646:	930d      	str	r3, [sp, #52]	@ 0x34
 801e648:	ea6f 0303 	mvn.w	r3, r3
 801e64c:	b2db      	uxtb	r3, r3
 801e64e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e650:	f1c5 0308 	rsb	r3, r5, #8
 801e654:	b2db      	uxtb	r3, r3
 801e656:	9309      	str	r3, [sp, #36]	@ 0x24
 801e658:	d104      	bne.n	801e664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801e65a:	f899 300d 	ldrb.w	r3, [r9, #13]
 801e65e:	07da      	lsls	r2, r3, #31
 801e660:	f100 8118 	bmi.w	801e894 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801e664:	b91c      	cbnz	r4, 801e66e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x152>
 801e666:	9b08      	ldr	r3, [sp, #32]
 801e668:	2b00      	cmp	r3, #0
 801e66a:	f000 80c4 	beq.w	801e7f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 801e66e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e672:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e674:	fb16 4303 	smlabb	r3, r6, r3, r4
 801e678:	fb13 f305 	smulbb	r3, r3, r5
 801e67c:	b29b      	uxth	r3, r3
 801e67e:	f003 0207 	and.w	r2, r3, #7
 801e682:	1a8a      	subs	r2, r1, r2
 801e684:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801e686:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801e68a:	b2d2      	uxtb	r2, r2
 801e68c:	9326      	str	r3, [sp, #152]	@ 0x98
 801e68e:	9b08      	ldr	r3, [sp, #32]
 801e690:	1aff      	subs	r7, r7, r3
 801e692:	b2bf      	uxth	r7, r7
 801e694:	4651      	mov	r1, sl
 801e696:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e698:	f7ff ff08 	bl	801e4ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801e69c:	4651      	mov	r1, sl
 801e69e:	4681      	mov	r9, r0
 801e6a0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e6a2:	f7ff ff1f 	bl	801e4e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801e6a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6a8:	9907      	ldr	r1, [sp, #28]
 801e6aa:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 801e6ae:	eba3 0e01 	sub.w	lr, r3, r1
 801e6b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e6b4:	eba8 0104 	sub.w	r1, r8, r4
 801e6b8:	1a59      	subs	r1, r3, r1
 801e6ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e6bc:	4299      	cmp	r1, r3
 801e6be:	bfd4      	ite	le
 801e6c0:	ebc4 0101 	rsble	r1, r4, r1
 801e6c4:	ebc4 0103 	rsbgt	r1, r4, r3
 801e6c8:	4577      	cmp	r7, lr
 801e6ca:	fb09 0011 	mls	r0, r9, r1, r0
 801e6ce:	eba6 0301 	sub.w	r3, r6, r1
 801e6d2:	bfa8      	it	ge
 801e6d4:	4677      	movge	r7, lr
 801e6d6:	0040      	lsls	r0, r0, #1
 801e6d8:	436b      	muls	r3, r5
 801e6da:	9008      	str	r0, [sp, #32]
 801e6dc:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 801e6e0:	fb0a f000 	mul.w	r0, sl, r0
 801e6e4:	9007      	str	r0, [sp, #28]
 801e6e6:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e6e8:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801e6ec:	900e      	str	r0, [sp, #56]	@ 0x38
 801e6ee:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e6f0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e6f4:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e6f6:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e6f8:	f000 001f 	and.w	r0, r0, #31
 801e6fc:	9011      	str	r0, [sp, #68]	@ 0x44
 801e6fe:	2f00      	cmp	r7, #0
 801e700:	dd76      	ble.n	801e7f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801e702:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 801e706:	4689      	mov	r9, r1
 801e708:	46d8      	mov	r8, fp
 801e70a:	900c      	str	r0, [sp, #48]	@ 0x30
 801e70c:	f1b9 0f00 	cmp.w	r9, #0
 801e710:	f340 80a6 	ble.w	801e860 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801e714:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801e716:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e718:	7800      	ldrb	r0, [r0, #0]
 801e71a:	4090      	lsls	r0, r2
 801e71c:	4020      	ands	r0, r4
 801e71e:	d009      	beq.n	801e734 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x218>
 801e720:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e722:	4320      	orrs	r0, r4
 801e724:	28ff      	cmp	r0, #255	@ 0xff
 801e726:	d168      	bne.n	801e7fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801e728:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e72a:	2cff      	cmp	r4, #255	@ 0xff
 801e72c:	d165      	bne.n	801e7fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801e72e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e730:	f8a8 4000 	strh.w	r4, [r8]
 801e734:	2a00      	cmp	r2, #0
 801e736:	f000 808e 	beq.w	801e856 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801e73a:	1b52      	subs	r2, r2, r5
 801e73c:	b2d2      	uxtb	r2, r2
 801e73e:	44d0      	add	r8, sl
 801e740:	f109 39ff 	add.w	r9, r9, #4294967295
 801e744:	e7e2      	b.n	801e70c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 801e746:	4488      	add	r8, r1
 801e748:	fa0f f888 	sxth.w	r8, r8
 801e74c:	e729      	b.n	801e5a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801e74e:	f1ba 0f01 	cmp.w	sl, #1
 801e752:	f47f af67 	bne.w	801e624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e756:	f1bb 0f01 	cmp.w	fp, #1
 801e75a:	f47f af63 	bne.w	801e624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e75e:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 801e8ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e762:	f8db 0000 	ldr.w	r0, [fp]
 801e766:	6803      	ldr	r3, [r0, #0]
 801e768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e76a:	4798      	blx	r3
 801e76c:	f010 0380 	ands.w	r3, r0, #128	@ 0x80
 801e770:	465a      	mov	r2, fp
 801e772:	d006      	beq.n	801e782 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e774:	2d04      	cmp	r5, #4
 801e776:	bf0a      	itet	eq
 801e778:	f899 300d 	ldrbeq.w	r3, [r9, #13]
 801e77c:	2300      	movne	r3, #0
 801e77e:	f003 0301 	andeq.w	r3, r3, #1
 801e782:	05c0      	lsls	r0, r0, #23
 801e784:	f140 8081 	bpl.w	801e88a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 801e788:	2d08      	cmp	r5, #8
 801e78a:	d17e      	bne.n	801e88a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	bf0c      	ite	eq
 801e790:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 801e794:	2180      	movne	r1, #128	@ 0x80
 801e796:	2c00      	cmp	r4, #0
 801e798:	f47f af44 	bne.w	801e624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e79c:	9b08      	ldr	r3, [sp, #32]
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	f47f af40 	bne.w	801e624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e7a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7a6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e7a8:	4443      	add	r3, r8
 801e7aa:	4298      	cmp	r0, r3
 801e7ac:	f6ff af3a 	blt.w	801e624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e7b0:	9807      	ldr	r0, [sp, #28]
 801e7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7b4:	4403      	add	r3, r0
 801e7b6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e7b8:	4298      	cmp	r0, r3
 801e7ba:	f6ff af33 	blt.w	801e624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e7be:	2d08      	cmp	r5, #8
 801e7c0:	6810      	ldr	r0, [r2, #0]
 801e7c2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801e7c6:	bf18      	it	ne
 801e7c8:	3601      	addne	r6, #1
 801e7ca:	6804      	ldr	r4, [r0, #0]
 801e7cc:	9105      	str	r1, [sp, #20]
 801e7ce:	bf18      	it	ne
 801e7d0:	f026 0601 	bicne.w	r6, r6, #1
 801e7d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e7d6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801e7da:	bf18      	it	ne
 801e7dc:	b2b6      	uxthne	r6, r6
 801e7de:	9104      	str	r1, [sp, #16]
 801e7e0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 801e7e2:	9602      	str	r6, [sp, #8]
 801e7e4:	9103      	str	r1, [sp, #12]
 801e7e6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801e7e8:	e88d 00c0 	stmia.w	sp, {r6, r7}
 801e7ec:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 801e7ee:	47a0      	blx	r4
 801e7f0:	b017      	add	sp, #92	@ 0x5c
 801e7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e7f8:	e74c      	b.n	801e694 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x178>
 801e7fa:	f8b8 c000 	ldrh.w	ip, [r8]
 801e7fe:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801e802:	f42c 66ff 	bic.w	r6, ip, #2040	@ 0x7f8
 801e806:	fb10 f004 	smulbb	r0, r0, r4
 801e80a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e80c:	f026 0607 	bic.w	r6, r6, #7
 801e810:	f5c0 3e80 	rsb	lr, r0, #65536	@ 0x10000
 801e814:	fb0e f606 	mul.w	r6, lr, r6
 801e818:	fb00 6604 	mla	r6, r0, r4, r6
 801e81c:	4c22      	ldr	r4, [pc, #136]	@ (801e8a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801e81e:	ea04 4416 	and.w	r4, r4, r6, lsr #16
 801e822:	940a      	str	r4, [sp, #40]	@ 0x28
 801e824:	f40c 64fc 	and.w	r4, ip, #2016	@ 0x7e0
 801e828:	f00c 0c1f 	and.w	ip, ip, #31
 801e82c:	fb0e f404 	mul.w	r4, lr, r4
 801e830:	fb0e fc0c 	mul.w	ip, lr, ip
 801e834:	4626      	mov	r6, r4
 801e836:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e838:	fb00 6404 	mla	r4, r0, r4, r6
 801e83c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801e83e:	0c24      	lsrs	r4, r4, #16
 801e840:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801e844:	4334      	orrs	r4, r6
 801e846:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e848:	fb00 cc06 	mla	ip, r0, r6, ip
 801e84c:	f3cc 4c04 	ubfx	ip, ip, #16, #5
 801e850:	ea44 040c 	orr.w	r4, r4, ip
 801e854:	e76c      	b.n	801e730 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 801e856:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e858:	3201      	adds	r2, #1
 801e85a:	9226      	str	r2, [sp, #152]	@ 0x98
 801e85c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e85e:	e76e      	b.n	801e73e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x222>
 801e860:	b16b      	cbz	r3, 801e87e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x362>
 801e862:	4293      	cmp	r3, r2
 801e864:	dd08      	ble.n	801e878 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 801e866:	1b58      	subs	r0, r3, r5
 801e868:	2408      	movs	r4, #8
 801e86a:	1a80      	subs	r0, r0, r2
 801e86c:	fb90 f0f4 	sdiv	r0, r0, r4
 801e870:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 801e872:	3001      	adds	r0, #1
 801e874:	4404      	add	r4, r0
 801e876:	9426      	str	r4, [sp, #152]	@ 0x98
 801e878:	1ad2      	subs	r2, r2, r3
 801e87a:	f002 0207 	and.w	r2, r2, #7
 801e87e:	9807      	ldr	r0, [sp, #28]
 801e880:	3f01      	subs	r7, #1
 801e882:	9c08      	ldr	r4, [sp, #32]
 801e884:	4420      	add	r0, r4
 801e886:	4483      	add	fp, r0
 801e888:	e739      	b.n	801e6fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	f43f aeca 	beq.w	801e624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e890:	2180      	movs	r1, #128	@ 0x80
 801e892:	e780      	b.n	801e796 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 801e894:	07f3      	lsls	r3, r6, #31
 801e896:	f57f aee5 	bpl.w	801e664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801e89a:	3601      	adds	r6, #1
 801e89c:	b2b6      	uxth	r6, r6
 801e89e:	e6e1      	b.n	801e664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801e8a0:	20024e2c 	.word	0x20024e2c
 801e8a4:	20024e2e 	.word	0x20024e2e
 801e8a8:	fffff800 	.word	0xfffff800
 801e8ac:	20024e34 	.word	0x20024e34

0801e8b0 <CRC_Lock>:
 801e8b0:	4a13      	ldr	r2, [pc, #76]	@ (801e900 <CRC_Lock+0x50>)
 801e8b2:	6813      	ldr	r3, [r2, #0]
 801e8b4:	f023 0301 	bic.w	r3, r3, #1
 801e8b8:	6013      	str	r3, [r2, #0]
 801e8ba:	4b12      	ldr	r3, [pc, #72]	@ (801e904 <CRC_Lock+0x54>)
 801e8bc:	681b      	ldr	r3, [r3, #0]
 801e8be:	b9a3      	cbnz	r3, 801e8ea <CRC_Lock+0x3a>
 801e8c0:	4b11      	ldr	r3, [pc, #68]	@ (801e908 <CRC_Lock+0x58>)
 801e8c2:	681b      	ldr	r3, [r3, #0]
 801e8c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e8c8:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801e8cc:	d10d      	bne.n	801e8ea <CRC_Lock+0x3a>
 801e8ce:	4b0f      	ldr	r3, [pc, #60]	@ (801e90c <CRC_Lock+0x5c>)
 801e8d0:	2201      	movs	r2, #1
 801e8d2:	601a      	str	r2, [r3, #0]
 801e8d4:	681a      	ldr	r2, [r3, #0]
 801e8d6:	2a00      	cmp	r2, #0
 801e8d8:	d1fc      	bne.n	801e8d4 <CRC_Lock+0x24>
 801e8da:	4b0d      	ldr	r3, [pc, #52]	@ (801e910 <CRC_Lock+0x60>)
 801e8dc:	6018      	str	r0, [r3, #0]
 801e8de:	6818      	ldr	r0, [r3, #0]
 801e8e0:	4288      	cmp	r0, r1
 801e8e2:	bf14      	ite	ne
 801e8e4:	2000      	movne	r0, #0
 801e8e6:	2001      	moveq	r0, #1
 801e8e8:	4770      	bx	lr
 801e8ea:	4b0a      	ldr	r3, [pc, #40]	@ (801e914 <CRC_Lock+0x64>)
 801e8ec:	2201      	movs	r2, #1
 801e8ee:	601a      	str	r2, [r3, #0]
 801e8f0:	681a      	ldr	r2, [r3, #0]
 801e8f2:	2a00      	cmp	r2, #0
 801e8f4:	d1fc      	bne.n	801e8f0 <CRC_Lock+0x40>
 801e8f6:	4b08      	ldr	r3, [pc, #32]	@ (801e918 <CRC_Lock+0x68>)
 801e8f8:	6018      	str	r0, [r3, #0]
 801e8fa:	6818      	ldr	r0, [r3, #0]
 801e8fc:	4281      	cmp	r1, r0
 801e8fe:	e7f0      	b.n	801e8e2 <CRC_Lock+0x32>
 801e900:	e0002000 	.word	0xe0002000
 801e904:	e0042000 	.word	0xe0042000
 801e908:	5c001000 	.word	0x5c001000
 801e90c:	58024c08 	.word	0x58024c08
 801e910:	58024c00 	.word	0x58024c00
 801e914:	40023008 	.word	0x40023008
 801e918:	40023000 	.word	0x40023000

0801e91c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801e91c:	6101      	str	r1, [r0, #16]
 801e91e:	4770      	bx	lr

0801e920 <_ZN8touchgfx8Gestures4tickEv>:
 801e920:	7b83      	ldrb	r3, [r0, #14]
 801e922:	b14b      	cbz	r3, 801e938 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801e924:	8903      	ldrh	r3, [r0, #8]
 801e926:	3301      	adds	r3, #1
 801e928:	b29b      	uxth	r3, r3
 801e92a:	2b07      	cmp	r3, #7
 801e92c:	8103      	strh	r3, [r0, #8]
 801e92e:	bf81      	itttt	hi
 801e930:	2300      	movhi	r3, #0
 801e932:	8143      	strhhi	r3, [r0, #10]
 801e934:	8183      	strhhi	r3, [r0, #12]
 801e936:	7383      	strbhi	r3, [r0, #14]
 801e938:	4770      	bx	lr
	...

0801e93c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801e93c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801e940:	4604      	mov	r4, r0
 801e942:	4698      	mov	r8, r3
 801e944:	8880      	ldrh	r0, [r0, #4]
 801e946:	4617      	mov	r7, r2
 801e948:	4b1d      	ldr	r3, [pc, #116]	@ (801e9c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801e94a:	460e      	mov	r6, r1
 801e94c:	f8ad 0006 	strh.w	r0, [sp, #6]
 801e950:	eba8 0000 	sub.w	r0, r8, r0
 801e954:	9300      	str	r3, [sp, #0]
 801e956:	2300      	movs	r3, #0
 801e958:	b280      	uxth	r0, r0
 801e95a:	8aa2      	ldrh	r2, [r4, #20]
 801e95c:	f88d 3004 	strb.w	r3, [sp, #4]
 801e960:	b203      	sxth	r3, r0
 801e962:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 801e966:	88e1      	ldrh	r1, [r4, #6]
 801e968:	2b00      	cmp	r3, #0
 801e96a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e96e:	f8ad 1008 	strh.w	r1, [sp, #8]
 801e972:	bfb8      	it	lt
 801e974:	4240      	neglt	r0, r0
 801e976:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e97a:	bfb8      	it	lt
 801e97c:	b203      	sxthlt	r3, r0
 801e97e:	4293      	cmp	r3, r2
 801e980:	dc0c      	bgt.n	801e99c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801e982:	1a69      	subs	r1, r5, r1
 801e984:	b289      	uxth	r1, r1
 801e986:	b20b      	sxth	r3, r1
 801e988:	2b00      	cmp	r3, #0
 801e98a:	bfbc      	itt	lt
 801e98c:	4249      	neglt	r1, r1
 801e98e:	b20b      	sxthlt	r3, r1
 801e990:	429a      	cmp	r2, r3
 801e992:	db03      	blt.n	801e99c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801e994:	2000      	movs	r0, #0
 801e996:	b004      	add	sp, #16
 801e998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e99c:	6920      	ldr	r0, [r4, #16]
 801e99e:	4669      	mov	r1, sp
 801e9a0:	eba8 0606 	sub.w	r6, r8, r6
 801e9a4:	1bef      	subs	r7, r5, r7
 801e9a6:	6803      	ldr	r3, [r0, #0]
 801e9a8:	685b      	ldr	r3, [r3, #4]
 801e9aa:	4798      	blx	r3
 801e9ac:	2300      	movs	r3, #0
 801e9ae:	2001      	movs	r0, #1
 801e9b0:	8166      	strh	r6, [r4, #10]
 801e9b2:	8123      	strh	r3, [r4, #8]
 801e9b4:	81a7      	strh	r7, [r4, #12]
 801e9b6:	f8a4 8004 	strh.w	r8, [r4, #4]
 801e9ba:	80e5      	strh	r5, [r4, #6]
 801e9bc:	73a0      	strb	r0, [r4, #14]
 801e9be:	e7ea      	b.n	801e996 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 801e9c0:	08025314 	.word	0x08025314

0801e9c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801e9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e9c6:	461e      	mov	r6, r3
 801e9c8:	1e4b      	subs	r3, r1, #1
 801e9ca:	b085      	sub	sp, #20
 801e9cc:	4604      	mov	r4, r0
 801e9ce:	2b01      	cmp	r3, #1
 801e9d0:	460d      	mov	r5, r1
 801e9d2:	4617      	mov	r7, r2
 801e9d4:	d845      	bhi.n	801ea62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 801e9d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e9da:	1cd3      	adds	r3, r2, #3
 801e9dc:	b29b      	uxth	r3, r3
 801e9de:	2b06      	cmp	r3, #6
 801e9e0:	d913      	bls.n	801ea0a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 801e9e2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801e9e6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e9ea:	4820      	ldr	r0, [pc, #128]	@ (801ea6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801e9ec:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e9f0:	a901      	add	r1, sp, #4
 801e9f2:	9001      	str	r0, [sp, #4]
 801e9f4:	2000      	movs	r0, #0
 801e9f6:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e9fa:	f88d 0008 	strb.w	r0, [sp, #8]
 801e9fe:	6920      	ldr	r0, [r4, #16]
 801ea00:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ea04:	6803      	ldr	r3, [r0, #0]
 801ea06:	689b      	ldr	r3, [r3, #8]
 801ea08:	4798      	blx	r3
 801ea0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ea0e:	1cd3      	adds	r3, r2, #3
 801ea10:	b29b      	uxth	r3, r3
 801ea12:	2b06      	cmp	r3, #6
 801ea14:	d913      	bls.n	801ea3e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801ea16:	4815      	ldr	r0, [pc, #84]	@ (801ea6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801ea18:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ea1c:	9001      	str	r0, [sp, #4]
 801ea1e:	2001      	movs	r0, #1
 801ea20:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ea24:	f88d 0008 	strb.w	r0, [sp, #8]
 801ea28:	6920      	ldr	r0, [r4, #16]
 801ea2a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ea2e:	a901      	add	r1, sp, #4
 801ea30:	f8ad 200a 	strh.w	r2, [sp, #10]
 801ea34:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ea38:	6803      	ldr	r3, [r0, #0]
 801ea3a:	689b      	ldr	r3, [r3, #8]
 801ea3c:	4798      	blx	r3
 801ea3e:	4b0c      	ldr	r3, [pc, #48]	@ (801ea70 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 801ea40:	a901      	add	r1, sp, #4
 801ea42:	6920      	ldr	r0, [r4, #16]
 801ea44:	9301      	str	r3, [sp, #4]
 801ea46:	2300      	movs	r3, #0
 801ea48:	f88d 5008 	strb.w	r5, [sp, #8]
 801ea4c:	f8ad 700a 	strh.w	r7, [sp, #10]
 801ea50:	f8ad 600c 	strh.w	r6, [sp, #12]
 801ea54:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ea58:	6803      	ldr	r3, [r0, #0]
 801ea5a:	681b      	ldr	r3, [r3, #0]
 801ea5c:	4798      	blx	r3
 801ea5e:	b005      	add	sp, #20
 801ea60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea62:	2900      	cmp	r1, #0
 801ea64:	d1eb      	bne.n	801ea3e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801ea66:	80a2      	strh	r2, [r4, #4]
 801ea68:	80c6      	strh	r6, [r0, #6]
 801ea6a:	e7e8      	b.n	801ea3e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801ea6c:	080264c4 	.word	0x080264c4
 801ea70:	08025300 	.word	0x08025300

0801ea74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 801ea74:	b510      	push	{r4, lr}
 801ea76:	8083      	strh	r3, [r0, #4]
 801ea78:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801ea7c:	6101      	str	r1, [r0, #16]
 801ea7e:	7183      	strb	r3, [r0, #6]
 801ea80:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801ea84:	8282      	strh	r2, [r0, #20]
 801ea86:	71c3      	strb	r3, [r0, #7]
 801ea88:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801ea8c:	7203      	strb	r3, [r0, #8]
 801ea8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ea92:	7243      	strb	r3, [r0, #9]
 801ea94:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ea98:	8143      	strh	r3, [r0, #10]
 801ea9a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ea9e:	8183      	strh	r3, [r0, #12]
 801eaa0:	4b01      	ldr	r3, [pc, #4]	@ (801eaa8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 801eaa2:	6003      	str	r3, [r0, #0]
 801eaa4:	bd10      	pop	{r4, pc}
 801eaa6:	bf00      	nop
 801eaa8:	08026bfc 	.word	0x08026bfc

0801eaac <_ZNK8touchgfx9ConstFont4findEt>:
 801eaac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eaae:	8a84      	ldrh	r4, [r0, #20]
 801eab0:	2500      	movs	r5, #0
 801eab2:	260e      	movs	r6, #14
 801eab4:	3c01      	subs	r4, #1
 801eab6:	42a5      	cmp	r5, r4
 801eab8:	dc0c      	bgt.n	801ead4 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801eaba:	192a      	adds	r2, r5, r4
 801eabc:	6903      	ldr	r3, [r0, #16]
 801eabe:	1052      	asrs	r2, r2, #1
 801eac0:	fb06 3302 	mla	r3, r6, r2, r3
 801eac4:	889f      	ldrh	r7, [r3, #4]
 801eac6:	42b9      	cmp	r1, r7
 801eac8:	da01      	bge.n	801eace <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801eaca:	1e54      	subs	r4, r2, #1
 801eacc:	e7f3      	b.n	801eab6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801eace:	dd02      	ble.n	801ead6 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801ead0:	1c55      	adds	r5, r2, #1
 801ead2:	e7f0      	b.n	801eab6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801ead4:	2300      	movs	r3, #0
 801ead6:	4618      	mov	r0, r3
 801ead8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801eada <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801eada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eadc:	4605      	mov	r5, r0
 801eade:	4617      	mov	r7, r2
 801eae0:	461e      	mov	r6, r3
 801eae2:	f7ff ffe3 	bl	801eaac <_ZNK8touchgfx9ConstFont4findEt>
 801eae6:	b9e0      	cbnz	r0, 801eb22 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801eae8:	b911      	cbnz	r1, 801eaf0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801eaea:	2400      	movs	r4, #0
 801eaec:	4620      	mov	r0, r4
 801eaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eaf0:	290a      	cmp	r1, #10
 801eaf2:	d0fa      	beq.n	801eaea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801eaf4:	682b      	ldr	r3, [r5, #0]
 801eaf6:	4628      	mov	r0, r5
 801eaf8:	691b      	ldr	r3, [r3, #16]
 801eafa:	4798      	blx	r3
 801eafc:	4601      	mov	r1, r0
 801eafe:	4628      	mov	r0, r5
 801eb00:	f7ff ffd4 	bl	801eaac <_ZNK8touchgfx9ConstFont4findEt>
 801eb04:	4604      	mov	r4, r0
 801eb06:	2800      	cmp	r0, #0
 801eb08:	d0ef      	beq.n	801eaea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801eb0a:	682b      	ldr	r3, [r5, #0]
 801eb0c:	4621      	mov	r1, r4
 801eb0e:	4628      	mov	r0, r5
 801eb10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eb12:	4798      	blx	r3
 801eb14:	6038      	str	r0, [r7, #0]
 801eb16:	682b      	ldr	r3, [r5, #0]
 801eb18:	4628      	mov	r0, r5
 801eb1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eb1c:	4798      	blx	r3
 801eb1e:	7030      	strb	r0, [r6, #0]
 801eb20:	e7e4      	b.n	801eaec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801eb22:	4604      	mov	r4, r0
 801eb24:	e7f1      	b.n	801eb0a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801eb26 <_ZdlPvj>:
 801eb26:	f000 b812 	b.w	801eb4e <_ZdlPv>

0801eb2a <__cxa_guard_acquire>:
 801eb2a:	6802      	ldr	r2, [r0, #0]
 801eb2c:	07d2      	lsls	r2, r2, #31
 801eb2e:	4603      	mov	r3, r0
 801eb30:	d405      	bmi.n	801eb3e <__cxa_guard_acquire+0x14>
 801eb32:	7842      	ldrb	r2, [r0, #1]
 801eb34:	b102      	cbz	r2, 801eb38 <__cxa_guard_acquire+0xe>
 801eb36:	deff      	udf	#255	@ 0xff
 801eb38:	2001      	movs	r0, #1
 801eb3a:	7058      	strb	r0, [r3, #1]
 801eb3c:	4770      	bx	lr
 801eb3e:	2000      	movs	r0, #0
 801eb40:	4770      	bx	lr

0801eb42 <__cxa_guard_release>:
 801eb42:	2301      	movs	r3, #1
 801eb44:	6003      	str	r3, [r0, #0]
 801eb46:	4770      	bx	lr

0801eb48 <__cxa_pure_virtual>:
 801eb48:	b508      	push	{r3, lr}
 801eb4a:	f000 f80f 	bl	801eb6c <_ZSt9terminatev>

0801eb4e <_ZdlPv>:
 801eb4e:	f001 b93d 	b.w	801fdcc <free>

0801eb52 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801eb52:	b508      	push	{r3, lr}
 801eb54:	4780      	blx	r0
 801eb56:	f001 f905 	bl	801fd64 <abort>
	...

0801eb5c <_ZSt13get_terminatev>:
 801eb5c:	4b02      	ldr	r3, [pc, #8]	@ (801eb68 <_ZSt13get_terminatev+0xc>)
 801eb5e:	6818      	ldr	r0, [r3, #0]
 801eb60:	f3bf 8f5b 	dmb	ish
 801eb64:	4770      	bx	lr
 801eb66:	bf00      	nop
 801eb68:	20000060 	.word	0x20000060

0801eb6c <_ZSt9terminatev>:
 801eb6c:	b508      	push	{r3, lr}
 801eb6e:	f7ff fff5 	bl	801eb5c <_ZSt13get_terminatev>
 801eb72:	f7ff ffee 	bl	801eb52 <_ZN10__cxxabiv111__terminateEPFvvE>

0801eb76 <powf>:
 801eb76:	b508      	push	{r3, lr}
 801eb78:	ed2d 8b04 	vpush	{d8-d9}
 801eb7c:	eeb0 8a60 	vmov.f32	s16, s1
 801eb80:	eeb0 9a40 	vmov.f32	s18, s0
 801eb84:	f000 f9a4 	bl	801eed0 <__ieee754_powf>
 801eb88:	eeb4 8a48 	vcmp.f32	s16, s16
 801eb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb90:	eef0 8a40 	vmov.f32	s17, s0
 801eb94:	d63e      	bvs.n	801ec14 <powf+0x9e>
 801eb96:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801eb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb9e:	d112      	bne.n	801ebc6 <powf+0x50>
 801eba0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801eba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eba8:	d039      	beq.n	801ec1e <powf+0xa8>
 801ebaa:	eeb0 0a48 	vmov.f32	s0, s16
 801ebae:	f000 f8e1 	bl	801ed74 <finitef>
 801ebb2:	b378      	cbz	r0, 801ec14 <powf+0x9e>
 801ebb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ebb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebbc:	d52a      	bpl.n	801ec14 <powf+0x9e>
 801ebbe:	f001 fb75 	bl	80202ac <__errno>
 801ebc2:	2322      	movs	r3, #34	@ 0x22
 801ebc4:	e014      	b.n	801ebf0 <powf+0x7a>
 801ebc6:	f000 f8d5 	bl	801ed74 <finitef>
 801ebca:	b998      	cbnz	r0, 801ebf4 <powf+0x7e>
 801ebcc:	eeb0 0a49 	vmov.f32	s0, s18
 801ebd0:	f000 f8d0 	bl	801ed74 <finitef>
 801ebd4:	b170      	cbz	r0, 801ebf4 <powf+0x7e>
 801ebd6:	eeb0 0a48 	vmov.f32	s0, s16
 801ebda:	f000 f8cb 	bl	801ed74 <finitef>
 801ebde:	b148      	cbz	r0, 801ebf4 <powf+0x7e>
 801ebe0:	eef4 8a68 	vcmp.f32	s17, s17
 801ebe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebe8:	d7e9      	bvc.n	801ebbe <powf+0x48>
 801ebea:	f001 fb5f 	bl	80202ac <__errno>
 801ebee:	2321      	movs	r3, #33	@ 0x21
 801ebf0:	6003      	str	r3, [r0, #0]
 801ebf2:	e00f      	b.n	801ec14 <powf+0x9e>
 801ebf4:	eef5 8a40 	vcmp.f32	s17, #0.0
 801ebf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebfc:	d10a      	bne.n	801ec14 <powf+0x9e>
 801ebfe:	eeb0 0a49 	vmov.f32	s0, s18
 801ec02:	f000 f8b7 	bl	801ed74 <finitef>
 801ec06:	b128      	cbz	r0, 801ec14 <powf+0x9e>
 801ec08:	eeb0 0a48 	vmov.f32	s0, s16
 801ec0c:	f000 f8b2 	bl	801ed74 <finitef>
 801ec10:	2800      	cmp	r0, #0
 801ec12:	d1d4      	bne.n	801ebbe <powf+0x48>
 801ec14:	eeb0 0a68 	vmov.f32	s0, s17
 801ec18:	ecbd 8b04 	vpop	{d8-d9}
 801ec1c:	bd08      	pop	{r3, pc}
 801ec1e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801ec22:	e7f7      	b.n	801ec14 <powf+0x9e>

0801ec24 <sqrtf>:
 801ec24:	b508      	push	{r3, lr}
 801ec26:	ed2d 8b02 	vpush	{d8}
 801ec2a:	eeb0 8a40 	vmov.f32	s16, s0
 801ec2e:	f000 f8ab 	bl	801ed88 <__ieee754_sqrtf>
 801ec32:	eeb4 8a48 	vcmp.f32	s16, s16
 801ec36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec3a:	d60c      	bvs.n	801ec56 <sqrtf+0x32>
 801ec3c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801ec5c <sqrtf+0x38>
 801ec40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ec44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec48:	d505      	bpl.n	801ec56 <sqrtf+0x32>
 801ec4a:	f001 fb2f 	bl	80202ac <__errno>
 801ec4e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801ec52:	2321      	movs	r3, #33	@ 0x21
 801ec54:	6003      	str	r3, [r0, #0]
 801ec56:	ecbd 8b02 	vpop	{d8}
 801ec5a:	bd08      	pop	{r3, pc}
 801ec5c:	00000000 	.word	0x00000000

0801ec60 <cosf>:
 801ec60:	ee10 3a10 	vmov	r3, s0
 801ec64:	b507      	push	{r0, r1, r2, lr}
 801ec66:	4a1e      	ldr	r2, [pc, #120]	@ (801ece0 <cosf+0x80>)
 801ec68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ec6c:	4293      	cmp	r3, r2
 801ec6e:	d806      	bhi.n	801ec7e <cosf+0x1e>
 801ec70:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801ece4 <cosf+0x84>
 801ec74:	b003      	add	sp, #12
 801ec76:	f85d eb04 	ldr.w	lr, [sp], #4
 801ec7a:	f000 b889 	b.w	801ed90 <__kernel_cosf>
 801ec7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ec82:	d304      	bcc.n	801ec8e <cosf+0x2e>
 801ec84:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ec88:	b003      	add	sp, #12
 801ec8a:	f85d fb04 	ldr.w	pc, [sp], #4
 801ec8e:	4668      	mov	r0, sp
 801ec90:	f000 fbee 	bl	801f470 <__ieee754_rem_pio2f>
 801ec94:	f000 0003 	and.w	r0, r0, #3
 801ec98:	2801      	cmp	r0, #1
 801ec9a:	d009      	beq.n	801ecb0 <cosf+0x50>
 801ec9c:	2802      	cmp	r0, #2
 801ec9e:	d010      	beq.n	801ecc2 <cosf+0x62>
 801eca0:	b9b0      	cbnz	r0, 801ecd0 <cosf+0x70>
 801eca2:	eddd 0a01 	vldr	s1, [sp, #4]
 801eca6:	ed9d 0a00 	vldr	s0, [sp]
 801ecaa:	f000 f871 	bl	801ed90 <__kernel_cosf>
 801ecae:	e7eb      	b.n	801ec88 <cosf+0x28>
 801ecb0:	eddd 0a01 	vldr	s1, [sp, #4]
 801ecb4:	ed9d 0a00 	vldr	s0, [sp]
 801ecb8:	f000 f8c2 	bl	801ee40 <__kernel_sinf>
 801ecbc:	eeb1 0a40 	vneg.f32	s0, s0
 801ecc0:	e7e2      	b.n	801ec88 <cosf+0x28>
 801ecc2:	eddd 0a01 	vldr	s1, [sp, #4]
 801ecc6:	ed9d 0a00 	vldr	s0, [sp]
 801ecca:	f000 f861 	bl	801ed90 <__kernel_cosf>
 801ecce:	e7f5      	b.n	801ecbc <cosf+0x5c>
 801ecd0:	eddd 0a01 	vldr	s1, [sp, #4]
 801ecd4:	ed9d 0a00 	vldr	s0, [sp]
 801ecd8:	2001      	movs	r0, #1
 801ecda:	f000 f8b1 	bl	801ee40 <__kernel_sinf>
 801ecde:	e7d3      	b.n	801ec88 <cosf+0x28>
 801ece0:	3f490fd8 	.word	0x3f490fd8
 801ece4:	00000000 	.word	0x00000000

0801ece8 <sinf>:
 801ece8:	ee10 3a10 	vmov	r3, s0
 801ecec:	b507      	push	{r0, r1, r2, lr}
 801ecee:	4a1f      	ldr	r2, [pc, #124]	@ (801ed6c <sinf+0x84>)
 801ecf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ecf4:	4293      	cmp	r3, r2
 801ecf6:	d807      	bhi.n	801ed08 <sinf+0x20>
 801ecf8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801ed70 <sinf+0x88>
 801ecfc:	2000      	movs	r0, #0
 801ecfe:	b003      	add	sp, #12
 801ed00:	f85d eb04 	ldr.w	lr, [sp], #4
 801ed04:	f000 b89c 	b.w	801ee40 <__kernel_sinf>
 801ed08:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ed0c:	d304      	bcc.n	801ed18 <sinf+0x30>
 801ed0e:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ed12:	b003      	add	sp, #12
 801ed14:	f85d fb04 	ldr.w	pc, [sp], #4
 801ed18:	4668      	mov	r0, sp
 801ed1a:	f000 fba9 	bl	801f470 <__ieee754_rem_pio2f>
 801ed1e:	f000 0003 	and.w	r0, r0, #3
 801ed22:	2801      	cmp	r0, #1
 801ed24:	d00a      	beq.n	801ed3c <sinf+0x54>
 801ed26:	2802      	cmp	r0, #2
 801ed28:	d00f      	beq.n	801ed4a <sinf+0x62>
 801ed2a:	b9c0      	cbnz	r0, 801ed5e <sinf+0x76>
 801ed2c:	eddd 0a01 	vldr	s1, [sp, #4]
 801ed30:	ed9d 0a00 	vldr	s0, [sp]
 801ed34:	2001      	movs	r0, #1
 801ed36:	f000 f883 	bl	801ee40 <__kernel_sinf>
 801ed3a:	e7ea      	b.n	801ed12 <sinf+0x2a>
 801ed3c:	eddd 0a01 	vldr	s1, [sp, #4]
 801ed40:	ed9d 0a00 	vldr	s0, [sp]
 801ed44:	f000 f824 	bl	801ed90 <__kernel_cosf>
 801ed48:	e7e3      	b.n	801ed12 <sinf+0x2a>
 801ed4a:	eddd 0a01 	vldr	s1, [sp, #4]
 801ed4e:	ed9d 0a00 	vldr	s0, [sp]
 801ed52:	2001      	movs	r0, #1
 801ed54:	f000 f874 	bl	801ee40 <__kernel_sinf>
 801ed58:	eeb1 0a40 	vneg.f32	s0, s0
 801ed5c:	e7d9      	b.n	801ed12 <sinf+0x2a>
 801ed5e:	eddd 0a01 	vldr	s1, [sp, #4]
 801ed62:	ed9d 0a00 	vldr	s0, [sp]
 801ed66:	f000 f813 	bl	801ed90 <__kernel_cosf>
 801ed6a:	e7f5      	b.n	801ed58 <sinf+0x70>
 801ed6c:	3f490fd8 	.word	0x3f490fd8
 801ed70:	00000000 	.word	0x00000000

0801ed74 <finitef>:
 801ed74:	ee10 3a10 	vmov	r3, s0
 801ed78:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801ed7c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801ed80:	bfac      	ite	ge
 801ed82:	2000      	movge	r0, #0
 801ed84:	2001      	movlt	r0, #1
 801ed86:	4770      	bx	lr

0801ed88 <__ieee754_sqrtf>:
 801ed88:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801ed8c:	4770      	bx	lr
	...

0801ed90 <__kernel_cosf>:
 801ed90:	ee10 3a10 	vmov	r3, s0
 801ed94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ed98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801ed9c:	eef0 6a40 	vmov.f32	s13, s0
 801eda0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801eda4:	d204      	bcs.n	801edb0 <__kernel_cosf+0x20>
 801eda6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801edaa:	ee17 2a90 	vmov	r2, s15
 801edae:	b342      	cbz	r2, 801ee02 <__kernel_cosf+0x72>
 801edb0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801edb4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801ee20 <__kernel_cosf+0x90>
 801edb8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801ee24 <__kernel_cosf+0x94>
 801edbc:	4a1a      	ldr	r2, [pc, #104]	@ (801ee28 <__kernel_cosf+0x98>)
 801edbe:	eea7 6a27 	vfma.f32	s12, s14, s15
 801edc2:	4293      	cmp	r3, r2
 801edc4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ee2c <__kernel_cosf+0x9c>
 801edc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801edcc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801ee30 <__kernel_cosf+0xa0>
 801edd0:	eea7 6a87 	vfma.f32	s12, s15, s14
 801edd4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801ee34 <__kernel_cosf+0xa4>
 801edd8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801eddc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801ee38 <__kernel_cosf+0xa8>
 801ede0:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ede4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801ede8:	ee26 6a07 	vmul.f32	s12, s12, s14
 801edec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801edf0:	eee7 0a06 	vfma.f32	s1, s14, s12
 801edf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801edf8:	d804      	bhi.n	801ee04 <__kernel_cosf+0x74>
 801edfa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801edfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ee02:	4770      	bx	lr
 801ee04:	4a0d      	ldr	r2, [pc, #52]	@ (801ee3c <__kernel_cosf+0xac>)
 801ee06:	4293      	cmp	r3, r2
 801ee08:	bf9a      	itte	ls
 801ee0a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801ee0e:	ee07 3a10 	vmovls	s14, r3
 801ee12:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801ee16:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ee1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ee1e:	e7ec      	b.n	801edfa <__kernel_cosf+0x6a>
 801ee20:	ad47d74e 	.word	0xad47d74e
 801ee24:	310f74f6 	.word	0x310f74f6
 801ee28:	3e999999 	.word	0x3e999999
 801ee2c:	b493f27c 	.word	0xb493f27c
 801ee30:	37d00d01 	.word	0x37d00d01
 801ee34:	bab60b61 	.word	0xbab60b61
 801ee38:	3d2aaaab 	.word	0x3d2aaaab
 801ee3c:	3f480000 	.word	0x3f480000

0801ee40 <__kernel_sinf>:
 801ee40:	ee10 3a10 	vmov	r3, s0
 801ee44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ee48:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801ee4c:	d204      	bcs.n	801ee58 <__kernel_sinf+0x18>
 801ee4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801ee52:	ee17 3a90 	vmov	r3, s15
 801ee56:	b35b      	cbz	r3, 801eeb0 <__kernel_sinf+0x70>
 801ee58:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ee5c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801eeb4 <__kernel_sinf+0x74>
 801ee60:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801eeb8 <__kernel_sinf+0x78>
 801ee64:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ee68:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801eebc <__kernel_sinf+0x7c>
 801ee6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ee70:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801eec0 <__kernel_sinf+0x80>
 801ee74:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ee78:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801eec4 <__kernel_sinf+0x84>
 801ee7c:	ee60 6a07 	vmul.f32	s13, s0, s14
 801ee80:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ee84:	b930      	cbnz	r0, 801ee94 <__kernel_sinf+0x54>
 801ee86:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801eec8 <__kernel_sinf+0x88>
 801ee8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ee8e:	eea6 0a26 	vfma.f32	s0, s12, s13
 801ee92:	4770      	bx	lr
 801ee94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801ee98:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801ee9c:	eee0 7a86 	vfma.f32	s15, s1, s12
 801eea0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801eea4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801eecc <__kernel_sinf+0x8c>
 801eea8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801eeac:	ee30 0a60 	vsub.f32	s0, s0, s1
 801eeb0:	4770      	bx	lr
 801eeb2:	bf00      	nop
 801eeb4:	2f2ec9d3 	.word	0x2f2ec9d3
 801eeb8:	b2d72f34 	.word	0xb2d72f34
 801eebc:	3638ef1b 	.word	0x3638ef1b
 801eec0:	b9500d01 	.word	0xb9500d01
 801eec4:	3c088889 	.word	0x3c088889
 801eec8:	be2aaaab 	.word	0xbe2aaaab
 801eecc:	3e2aaaab 	.word	0x3e2aaaab

0801eed0 <__ieee754_powf>:
 801eed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eed4:	ee10 4a90 	vmov	r4, s1
 801eed8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801eedc:	ed2d 8b02 	vpush	{d8}
 801eee0:	ee10 6a10 	vmov	r6, s0
 801eee4:	eeb0 8a40 	vmov.f32	s16, s0
 801eee8:	eef0 8a60 	vmov.f32	s17, s1
 801eeec:	d10c      	bne.n	801ef08 <__ieee754_powf+0x38>
 801eeee:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801eef2:	0076      	lsls	r6, r6, #1
 801eef4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801eef8:	f240 829c 	bls.w	801f434 <__ieee754_powf+0x564>
 801eefc:	ee38 0a28 	vadd.f32	s0, s16, s17
 801ef00:	ecbd 8b02 	vpop	{d8}
 801ef04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef08:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801ef0c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801ef10:	d802      	bhi.n	801ef18 <__ieee754_powf+0x48>
 801ef12:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801ef16:	d908      	bls.n	801ef2a <__ieee754_powf+0x5a>
 801ef18:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801ef1c:	d1ee      	bne.n	801eefc <__ieee754_powf+0x2c>
 801ef1e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801ef22:	0064      	lsls	r4, r4, #1
 801ef24:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801ef28:	e7e6      	b.n	801eef8 <__ieee754_powf+0x28>
 801ef2a:	2e00      	cmp	r6, #0
 801ef2c:	da1e      	bge.n	801ef6c <__ieee754_powf+0x9c>
 801ef2e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801ef32:	d22b      	bcs.n	801ef8c <__ieee754_powf+0xbc>
 801ef34:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801ef38:	d332      	bcc.n	801efa0 <__ieee754_powf+0xd0>
 801ef3a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801ef3e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801ef42:	fa49 f503 	asr.w	r5, r9, r3
 801ef46:	fa05 f303 	lsl.w	r3, r5, r3
 801ef4a:	454b      	cmp	r3, r9
 801ef4c:	d126      	bne.n	801ef9c <__ieee754_powf+0xcc>
 801ef4e:	f005 0501 	and.w	r5, r5, #1
 801ef52:	f1c5 0502 	rsb	r5, r5, #2
 801ef56:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801ef5a:	d122      	bne.n	801efa2 <__ieee754_powf+0xd2>
 801ef5c:	2c00      	cmp	r4, #0
 801ef5e:	f280 826f 	bge.w	801f440 <__ieee754_powf+0x570>
 801ef62:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ef66:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801ef6a:	e7c9      	b.n	801ef00 <__ieee754_powf+0x30>
 801ef6c:	2500      	movs	r5, #0
 801ef6e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801ef72:	d1f0      	bne.n	801ef56 <__ieee754_powf+0x86>
 801ef74:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801ef78:	f000 825c 	beq.w	801f434 <__ieee754_powf+0x564>
 801ef7c:	d908      	bls.n	801ef90 <__ieee754_powf+0xc0>
 801ef7e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 801f2e0 <__ieee754_powf+0x410>
 801ef82:	2c00      	cmp	r4, #0
 801ef84:	bfa8      	it	ge
 801ef86:	eeb0 0a68 	vmovge.f32	s0, s17
 801ef8a:	e7b9      	b.n	801ef00 <__ieee754_powf+0x30>
 801ef8c:	2502      	movs	r5, #2
 801ef8e:	e7ee      	b.n	801ef6e <__ieee754_powf+0x9e>
 801ef90:	2c00      	cmp	r4, #0
 801ef92:	f280 8252 	bge.w	801f43a <__ieee754_powf+0x56a>
 801ef96:	eeb1 0a68 	vneg.f32	s0, s17
 801ef9a:	e7b1      	b.n	801ef00 <__ieee754_powf+0x30>
 801ef9c:	2500      	movs	r5, #0
 801ef9e:	e7da      	b.n	801ef56 <__ieee754_powf+0x86>
 801efa0:	2500      	movs	r5, #0
 801efa2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801efa6:	d102      	bne.n	801efae <__ieee754_powf+0xde>
 801efa8:	ee28 0a08 	vmul.f32	s0, s16, s16
 801efac:	e7a8      	b.n	801ef00 <__ieee754_powf+0x30>
 801efae:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801efb2:	d109      	bne.n	801efc8 <__ieee754_powf+0xf8>
 801efb4:	2e00      	cmp	r6, #0
 801efb6:	db07      	blt.n	801efc8 <__ieee754_powf+0xf8>
 801efb8:	eeb0 0a48 	vmov.f32	s0, s16
 801efbc:	ecbd 8b02 	vpop	{d8}
 801efc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801efc4:	f7ff bee0 	b.w	801ed88 <__ieee754_sqrtf>
 801efc8:	eeb0 0a48 	vmov.f32	s0, s16
 801efcc:	f000 fb80 	bl	801f6d0 <fabsf>
 801efd0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801efd4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801efd8:	4647      	mov	r7, r8
 801efda:	d002      	beq.n	801efe2 <__ieee754_powf+0x112>
 801efdc:	f1b8 0f00 	cmp.w	r8, #0
 801efe0:	d117      	bne.n	801f012 <__ieee754_powf+0x142>
 801efe2:	2c00      	cmp	r4, #0
 801efe4:	bfbc      	itt	lt
 801efe6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801efea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801efee:	2e00      	cmp	r6, #0
 801eff0:	da86      	bge.n	801ef00 <__ieee754_powf+0x30>
 801eff2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801eff6:	ea58 0805 	orrs.w	r8, r8, r5
 801effa:	d104      	bne.n	801f006 <__ieee754_powf+0x136>
 801effc:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f000:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801f004:	e77c      	b.n	801ef00 <__ieee754_powf+0x30>
 801f006:	2d01      	cmp	r5, #1
 801f008:	f47f af7a 	bne.w	801ef00 <__ieee754_powf+0x30>
 801f00c:	eeb1 0a40 	vneg.f32	s0, s0
 801f010:	e776      	b.n	801ef00 <__ieee754_powf+0x30>
 801f012:	0ff0      	lsrs	r0, r6, #31
 801f014:	3801      	subs	r0, #1
 801f016:	ea55 0300 	orrs.w	r3, r5, r0
 801f01a:	d104      	bne.n	801f026 <__ieee754_powf+0x156>
 801f01c:	ee38 8a48 	vsub.f32	s16, s16, s16
 801f020:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801f024:	e76c      	b.n	801ef00 <__ieee754_powf+0x30>
 801f026:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801f02a:	d973      	bls.n	801f114 <__ieee754_powf+0x244>
 801f02c:	4bad      	ldr	r3, [pc, #692]	@ (801f2e4 <__ieee754_powf+0x414>)
 801f02e:	4598      	cmp	r8, r3
 801f030:	d808      	bhi.n	801f044 <__ieee754_powf+0x174>
 801f032:	2c00      	cmp	r4, #0
 801f034:	da0b      	bge.n	801f04e <__ieee754_powf+0x17e>
 801f036:	2000      	movs	r0, #0
 801f038:	ecbd 8b02 	vpop	{d8}
 801f03c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f040:	f000 bbd4 	b.w	801f7ec <__math_oflowf>
 801f044:	4ba8      	ldr	r3, [pc, #672]	@ (801f2e8 <__ieee754_powf+0x418>)
 801f046:	4598      	cmp	r8, r3
 801f048:	d908      	bls.n	801f05c <__ieee754_powf+0x18c>
 801f04a:	2c00      	cmp	r4, #0
 801f04c:	dcf3      	bgt.n	801f036 <__ieee754_powf+0x166>
 801f04e:	2000      	movs	r0, #0
 801f050:	ecbd 8b02 	vpop	{d8}
 801f054:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f058:	f000 bbc2 	b.w	801f7e0 <__math_uflowf>
 801f05c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801f060:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f064:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 801f2ec <__ieee754_powf+0x41c>
 801f068:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801f06c:	eee0 6a67 	vfms.f32	s13, s0, s15
 801f070:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f074:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801f078:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f07c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f080:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801f2f0 <__ieee754_powf+0x420>
 801f084:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801f088:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 801f2f4 <__ieee754_powf+0x424>
 801f08c:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f090:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801f2f8 <__ieee754_powf+0x428>
 801f094:	eef0 6a67 	vmov.f32	s13, s15
 801f098:	eee0 6a07 	vfma.f32	s13, s0, s14
 801f09c:	ee16 3a90 	vmov	r3, s13
 801f0a0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801f0a4:	f023 030f 	bic.w	r3, r3, #15
 801f0a8:	ee06 3a90 	vmov	s13, r3
 801f0ac:	eee0 6a47 	vfms.f32	s13, s0, s14
 801f0b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f0b4:	3d01      	subs	r5, #1
 801f0b6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801f0ba:	4305      	orrs	r5, r0
 801f0bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f0c0:	f024 040f 	bic.w	r4, r4, #15
 801f0c4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801f0c8:	bf18      	it	ne
 801f0ca:	eeb0 8a47 	vmovne.f32	s16, s14
 801f0ce:	ee07 4a10 	vmov	s14, r4
 801f0d2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801f0d6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801f0da:	ee07 3a90 	vmov	s15, r3
 801f0de:	eee7 0a27 	vfma.f32	s1, s14, s15
 801f0e2:	ee07 4a10 	vmov	s14, r4
 801f0e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f0ea:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801f0ee:	ee17 1a10 	vmov	r1, s14
 801f0f2:	2900      	cmp	r1, #0
 801f0f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f0f8:	f340 80dd 	ble.w	801f2b6 <__ieee754_powf+0x3e6>
 801f0fc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801f100:	f240 80ca 	bls.w	801f298 <__ieee754_powf+0x3c8>
 801f104:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801f108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f10c:	bf4c      	ite	mi
 801f10e:	2001      	movmi	r0, #1
 801f110:	2000      	movpl	r0, #0
 801f112:	e791      	b.n	801f038 <__ieee754_powf+0x168>
 801f114:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801f118:	bf01      	itttt	eq
 801f11a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801f2fc <__ieee754_powf+0x42c>
 801f11e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801f122:	f06f 0317 	mvneq.w	r3, #23
 801f126:	ee17 7a90 	vmoveq	r7, s15
 801f12a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801f12e:	bf18      	it	ne
 801f130:	2300      	movne	r3, #0
 801f132:	3a7f      	subs	r2, #127	@ 0x7f
 801f134:	441a      	add	r2, r3
 801f136:	4b72      	ldr	r3, [pc, #456]	@ (801f300 <__ieee754_powf+0x430>)
 801f138:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801f13c:	429f      	cmp	r7, r3
 801f13e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801f142:	dd06      	ble.n	801f152 <__ieee754_powf+0x282>
 801f144:	4b6f      	ldr	r3, [pc, #444]	@ (801f304 <__ieee754_powf+0x434>)
 801f146:	429f      	cmp	r7, r3
 801f148:	f340 80a4 	ble.w	801f294 <__ieee754_powf+0x3c4>
 801f14c:	3201      	adds	r2, #1
 801f14e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801f152:	2600      	movs	r6, #0
 801f154:	4b6c      	ldr	r3, [pc, #432]	@ (801f308 <__ieee754_powf+0x438>)
 801f156:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801f15a:	ee07 1a10 	vmov	s14, r1
 801f15e:	edd3 5a00 	vldr	s11, [r3]
 801f162:	4b6a      	ldr	r3, [pc, #424]	@ (801f30c <__ieee754_powf+0x43c>)
 801f164:	ee75 7a87 	vadd.f32	s15, s11, s14
 801f168:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f16c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801f170:	1049      	asrs	r1, r1, #1
 801f172:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801f176:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801f17a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801f17e:	ee37 6a65 	vsub.f32	s12, s14, s11
 801f182:	ee07 1a90 	vmov	s15, r1
 801f186:	ee26 5a24 	vmul.f32	s10, s12, s9
 801f18a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801f18e:	ee15 7a10 	vmov	r7, s10
 801f192:	401f      	ands	r7, r3
 801f194:	ee06 7a90 	vmov	s13, r7
 801f198:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801f19c:	ee37 7a65 	vsub.f32	s14, s14, s11
 801f1a0:	ee65 7a05 	vmul.f32	s15, s10, s10
 801f1a4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801f1a8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801f310 <__ieee754_powf+0x440>
 801f1ac:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801f314 <__ieee754_powf+0x444>
 801f1b0:	eee7 5a87 	vfma.f32	s11, s15, s14
 801f1b4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801f318 <__ieee754_powf+0x448>
 801f1b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801f1bc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801f2ec <__ieee754_powf+0x41c>
 801f1c0:	eee7 5a27 	vfma.f32	s11, s14, s15
 801f1c4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801f31c <__ieee754_powf+0x44c>
 801f1c8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801f1cc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801f320 <__ieee754_powf+0x450>
 801f1d0:	ee26 6a24 	vmul.f32	s12, s12, s9
 801f1d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 801f1d8:	ee35 7a26 	vadd.f32	s14, s10, s13
 801f1dc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801f1e0:	ee27 7a06 	vmul.f32	s14, s14, s12
 801f1e4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801f1e8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801f1ec:	eef0 5a67 	vmov.f32	s11, s15
 801f1f0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801f1f4:	ee75 5a87 	vadd.f32	s11, s11, s14
 801f1f8:	ee15 1a90 	vmov	r1, s11
 801f1fc:	4019      	ands	r1, r3
 801f1fe:	ee05 1a90 	vmov	s11, r1
 801f202:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801f206:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801f20a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f20e:	ee67 7a85 	vmul.f32	s15, s15, s10
 801f212:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f216:	eeb0 6a67 	vmov.f32	s12, s15
 801f21a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f21e:	ee16 1a10 	vmov	r1, s12
 801f222:	4019      	ands	r1, r3
 801f224:	ee06 1a10 	vmov	s12, r1
 801f228:	eeb0 7a46 	vmov.f32	s14, s12
 801f22c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801f230:	493c      	ldr	r1, [pc, #240]	@ (801f324 <__ieee754_powf+0x454>)
 801f232:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801f236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f23a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801f328 <__ieee754_powf+0x458>
 801f23e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801f32c <__ieee754_powf+0x45c>
 801f242:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f246:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801f330 <__ieee754_powf+0x460>
 801f24a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f24e:	ed91 7a00 	vldr	s14, [r1]
 801f252:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f256:	ee07 2a10 	vmov	s14, r2
 801f25a:	eef0 6a67 	vmov.f32	s13, s15
 801f25e:	4a35      	ldr	r2, [pc, #212]	@ (801f334 <__ieee754_powf+0x464>)
 801f260:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f264:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801f268:	ed92 5a00 	vldr	s10, [r2]
 801f26c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f270:	ee76 6a85 	vadd.f32	s13, s13, s10
 801f274:	ee76 6a87 	vadd.f32	s13, s13, s14
 801f278:	ee16 2a90 	vmov	r2, s13
 801f27c:	4013      	ands	r3, r2
 801f27e:	ee06 3a90 	vmov	s13, r3
 801f282:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801f286:	ee37 7a45 	vsub.f32	s14, s14, s10
 801f28a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801f28e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f292:	e70f      	b.n	801f0b4 <__ieee754_powf+0x1e4>
 801f294:	2601      	movs	r6, #1
 801f296:	e75d      	b.n	801f154 <__ieee754_powf+0x284>
 801f298:	d152      	bne.n	801f340 <__ieee754_powf+0x470>
 801f29a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801f338 <__ieee754_powf+0x468>
 801f29e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f2a2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801f2a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 801f2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2ae:	f73f af29 	bgt.w	801f104 <__ieee754_powf+0x234>
 801f2b2:	2386      	movs	r3, #134	@ 0x86
 801f2b4:	e048      	b.n	801f348 <__ieee754_powf+0x478>
 801f2b6:	4a21      	ldr	r2, [pc, #132]	@ (801f33c <__ieee754_powf+0x46c>)
 801f2b8:	4293      	cmp	r3, r2
 801f2ba:	d907      	bls.n	801f2cc <__ieee754_powf+0x3fc>
 801f2bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801f2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2c4:	bf4c      	ite	mi
 801f2c6:	2001      	movmi	r0, #1
 801f2c8:	2000      	movpl	r0, #0
 801f2ca:	e6c1      	b.n	801f050 <__ieee754_powf+0x180>
 801f2cc:	d138      	bne.n	801f340 <__ieee754_powf+0x470>
 801f2ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f2d2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801f2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2da:	dbea      	blt.n	801f2b2 <__ieee754_powf+0x3e2>
 801f2dc:	e7ee      	b.n	801f2bc <__ieee754_powf+0x3ec>
 801f2de:	bf00      	nop
 801f2e0:	00000000 	.word	0x00000000
 801f2e4:	3f7ffff3 	.word	0x3f7ffff3
 801f2e8:	3f800007 	.word	0x3f800007
 801f2ec:	3eaaaaab 	.word	0x3eaaaaab
 801f2f0:	3fb8aa3b 	.word	0x3fb8aa3b
 801f2f4:	36eca570 	.word	0x36eca570
 801f2f8:	3fb8aa00 	.word	0x3fb8aa00
 801f2fc:	4b800000 	.word	0x4b800000
 801f300:	001cc471 	.word	0x001cc471
 801f304:	005db3d6 	.word	0x005db3d6
 801f308:	08026c50 	.word	0x08026c50
 801f30c:	fffff000 	.word	0xfffff000
 801f310:	3e6c3255 	.word	0x3e6c3255
 801f314:	3e53f142 	.word	0x3e53f142
 801f318:	3e8ba305 	.word	0x3e8ba305
 801f31c:	3edb6db7 	.word	0x3edb6db7
 801f320:	3f19999a 	.word	0x3f19999a
 801f324:	08026c40 	.word	0x08026c40
 801f328:	3f76384f 	.word	0x3f76384f
 801f32c:	3f763800 	.word	0x3f763800
 801f330:	369dc3a0 	.word	0x369dc3a0
 801f334:	08026c48 	.word	0x08026c48
 801f338:	3338aa3c 	.word	0x3338aa3c
 801f33c:	43160000 	.word	0x43160000
 801f340:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801f344:	d971      	bls.n	801f42a <__ieee754_powf+0x55a>
 801f346:	15db      	asrs	r3, r3, #23
 801f348:	3b7e      	subs	r3, #126	@ 0x7e
 801f34a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801f34e:	4118      	asrs	r0, r3
 801f350:	4408      	add	r0, r1
 801f352:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801f356:	4a3c      	ldr	r2, [pc, #240]	@ (801f448 <__ieee754_powf+0x578>)
 801f358:	3b7f      	subs	r3, #127	@ 0x7f
 801f35a:	411a      	asrs	r2, r3
 801f35c:	4002      	ands	r2, r0
 801f35e:	ee07 2a10 	vmov	s14, r2
 801f362:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801f366:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801f36a:	f1c3 0317 	rsb	r3, r3, #23
 801f36e:	4118      	asrs	r0, r3
 801f370:	2900      	cmp	r1, #0
 801f372:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f376:	bfb8      	it	lt
 801f378:	4240      	neglt	r0, r0
 801f37a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801f37e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801f44c <__ieee754_powf+0x57c>
 801f382:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 801f450 <__ieee754_powf+0x580>
 801f386:	ee17 3a10 	vmov	r3, s14
 801f38a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801f38e:	f023 030f 	bic.w	r3, r3, #15
 801f392:	ee07 3a10 	vmov	s14, r3
 801f396:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f39a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f39e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801f3a2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801f454 <__ieee754_powf+0x584>
 801f3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f3aa:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801f3ae:	eef0 6a67 	vmov.f32	s13, s15
 801f3b2:	eee7 6a06 	vfma.f32	s13, s14, s12
 801f3b6:	eef0 5a66 	vmov.f32	s11, s13
 801f3ba:	eee7 5a46 	vfms.f32	s11, s14, s12
 801f3be:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801f3c2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801f3c6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801f458 <__ieee754_powf+0x588>
 801f3ca:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801f45c <__ieee754_powf+0x58c>
 801f3ce:	eea7 6a25 	vfma.f32	s12, s14, s11
 801f3d2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 801f460 <__ieee754_powf+0x590>
 801f3d6:	eee6 5a07 	vfma.f32	s11, s12, s14
 801f3da:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801f464 <__ieee754_powf+0x594>
 801f3de:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f3e2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801f468 <__ieee754_powf+0x598>
 801f3e6:	eee6 5a07 	vfma.f32	s11, s12, s14
 801f3ea:	eeb0 6a66 	vmov.f32	s12, s13
 801f3ee:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801f3f2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801f3f6:	ee66 5a86 	vmul.f32	s11, s13, s12
 801f3fa:	ee36 6a47 	vsub.f32	s12, s12, s14
 801f3fe:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801f402:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801f406:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f40a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f40e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f412:	ee10 3a10 	vmov	r3, s0
 801f416:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801f41a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801f41e:	da06      	bge.n	801f42e <__ieee754_powf+0x55e>
 801f420:	f000 f95e 	bl	801f6e0 <scalbnf>
 801f424:	ee20 0a08 	vmul.f32	s0, s0, s16
 801f428:	e56a      	b.n	801ef00 <__ieee754_powf+0x30>
 801f42a:	2000      	movs	r0, #0
 801f42c:	e7a5      	b.n	801f37a <__ieee754_powf+0x4aa>
 801f42e:	ee00 3a10 	vmov	s0, r3
 801f432:	e7f7      	b.n	801f424 <__ieee754_powf+0x554>
 801f434:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f438:	e562      	b.n	801ef00 <__ieee754_powf+0x30>
 801f43a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801f46c <__ieee754_powf+0x59c>
 801f43e:	e55f      	b.n	801ef00 <__ieee754_powf+0x30>
 801f440:	eeb0 0a48 	vmov.f32	s0, s16
 801f444:	e55c      	b.n	801ef00 <__ieee754_powf+0x30>
 801f446:	bf00      	nop
 801f448:	ff800000 	.word	0xff800000
 801f44c:	3f317218 	.word	0x3f317218
 801f450:	3f317200 	.word	0x3f317200
 801f454:	35bfbe8c 	.word	0x35bfbe8c
 801f458:	b5ddea0e 	.word	0xb5ddea0e
 801f45c:	3331bb4c 	.word	0x3331bb4c
 801f460:	388ab355 	.word	0x388ab355
 801f464:	bb360b61 	.word	0xbb360b61
 801f468:	3e2aaaab 	.word	0x3e2aaaab
 801f46c:	00000000 	.word	0x00000000

0801f470 <__ieee754_rem_pio2f>:
 801f470:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f472:	ee10 6a10 	vmov	r6, s0
 801f476:	4b88      	ldr	r3, [pc, #544]	@ (801f698 <__ieee754_rem_pio2f+0x228>)
 801f478:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801f47c:	429d      	cmp	r5, r3
 801f47e:	b087      	sub	sp, #28
 801f480:	4604      	mov	r4, r0
 801f482:	d805      	bhi.n	801f490 <__ieee754_rem_pio2f+0x20>
 801f484:	2300      	movs	r3, #0
 801f486:	ed80 0a00 	vstr	s0, [r0]
 801f48a:	6043      	str	r3, [r0, #4]
 801f48c:	2000      	movs	r0, #0
 801f48e:	e022      	b.n	801f4d6 <__ieee754_rem_pio2f+0x66>
 801f490:	4b82      	ldr	r3, [pc, #520]	@ (801f69c <__ieee754_rem_pio2f+0x22c>)
 801f492:	429d      	cmp	r5, r3
 801f494:	d83a      	bhi.n	801f50c <__ieee754_rem_pio2f+0x9c>
 801f496:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801f49a:	2e00      	cmp	r6, #0
 801f49c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801f6a0 <__ieee754_rem_pio2f+0x230>
 801f4a0:	4a80      	ldr	r2, [pc, #512]	@ (801f6a4 <__ieee754_rem_pio2f+0x234>)
 801f4a2:	f023 030f 	bic.w	r3, r3, #15
 801f4a6:	dd18      	ble.n	801f4da <__ieee754_rem_pio2f+0x6a>
 801f4a8:	4293      	cmp	r3, r2
 801f4aa:	ee70 7a47 	vsub.f32	s15, s0, s14
 801f4ae:	bf09      	itett	eq
 801f4b0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801f6a8 <__ieee754_rem_pio2f+0x238>
 801f4b4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801f6ac <__ieee754_rem_pio2f+0x23c>
 801f4b8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801f6b0 <__ieee754_rem_pio2f+0x240>
 801f4bc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801f4c0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801f4c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f4c8:	ed80 7a00 	vstr	s14, [r0]
 801f4cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f4d0:	edc0 7a01 	vstr	s15, [r0, #4]
 801f4d4:	2001      	movs	r0, #1
 801f4d6:	b007      	add	sp, #28
 801f4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4da:	4293      	cmp	r3, r2
 801f4dc:	ee70 7a07 	vadd.f32	s15, s0, s14
 801f4e0:	bf09      	itett	eq
 801f4e2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801f6a8 <__ieee754_rem_pio2f+0x238>
 801f4e6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801f6ac <__ieee754_rem_pio2f+0x23c>
 801f4ea:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801f6b0 <__ieee754_rem_pio2f+0x240>
 801f4ee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801f4f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f4f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f4fa:	ed80 7a00 	vstr	s14, [r0]
 801f4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f502:	edc0 7a01 	vstr	s15, [r0, #4]
 801f506:	f04f 30ff 	mov.w	r0, #4294967295
 801f50a:	e7e4      	b.n	801f4d6 <__ieee754_rem_pio2f+0x66>
 801f50c:	4b69      	ldr	r3, [pc, #420]	@ (801f6b4 <__ieee754_rem_pio2f+0x244>)
 801f50e:	429d      	cmp	r5, r3
 801f510:	d873      	bhi.n	801f5fa <__ieee754_rem_pio2f+0x18a>
 801f512:	f000 f8dd 	bl	801f6d0 <fabsf>
 801f516:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801f6b8 <__ieee754_rem_pio2f+0x248>
 801f51a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f51e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f52a:	ee17 0a90 	vmov	r0, s15
 801f52e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801f6a0 <__ieee754_rem_pio2f+0x230>
 801f532:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f536:	281f      	cmp	r0, #31
 801f538:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801f6ac <__ieee754_rem_pio2f+0x23c>
 801f53c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f540:	eeb1 6a47 	vneg.f32	s12, s14
 801f544:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f548:	ee16 1a90 	vmov	r1, s13
 801f54c:	dc09      	bgt.n	801f562 <__ieee754_rem_pio2f+0xf2>
 801f54e:	4a5b      	ldr	r2, [pc, #364]	@ (801f6bc <__ieee754_rem_pio2f+0x24c>)
 801f550:	1e47      	subs	r7, r0, #1
 801f552:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801f556:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801f55a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801f55e:	4293      	cmp	r3, r2
 801f560:	d107      	bne.n	801f572 <__ieee754_rem_pio2f+0x102>
 801f562:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801f566:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801f56a:	2a08      	cmp	r2, #8
 801f56c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801f570:	dc14      	bgt.n	801f59c <__ieee754_rem_pio2f+0x12c>
 801f572:	6021      	str	r1, [r4, #0]
 801f574:	ed94 7a00 	vldr	s14, [r4]
 801f578:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f57c:	2e00      	cmp	r6, #0
 801f57e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f582:	ed84 0a01 	vstr	s0, [r4, #4]
 801f586:	daa6      	bge.n	801f4d6 <__ieee754_rem_pio2f+0x66>
 801f588:	eeb1 7a47 	vneg.f32	s14, s14
 801f58c:	eeb1 0a40 	vneg.f32	s0, s0
 801f590:	ed84 7a00 	vstr	s14, [r4]
 801f594:	ed84 0a01 	vstr	s0, [r4, #4]
 801f598:	4240      	negs	r0, r0
 801f59a:	e79c      	b.n	801f4d6 <__ieee754_rem_pio2f+0x66>
 801f59c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801f6a8 <__ieee754_rem_pio2f+0x238>
 801f5a0:	eef0 6a40 	vmov.f32	s13, s0
 801f5a4:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f5a8:	ee70 7a66 	vsub.f32	s15, s0, s13
 801f5ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f5b0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801f6b0 <__ieee754_rem_pio2f+0x240>
 801f5b4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801f5b8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801f5bc:	ee15 2a90 	vmov	r2, s11
 801f5c0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f5c4:	1a5b      	subs	r3, r3, r1
 801f5c6:	2b19      	cmp	r3, #25
 801f5c8:	dc04      	bgt.n	801f5d4 <__ieee754_rem_pio2f+0x164>
 801f5ca:	edc4 5a00 	vstr	s11, [r4]
 801f5ce:	eeb0 0a66 	vmov.f32	s0, s13
 801f5d2:	e7cf      	b.n	801f574 <__ieee754_rem_pio2f+0x104>
 801f5d4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801f6c0 <__ieee754_rem_pio2f+0x250>
 801f5d8:	eeb0 0a66 	vmov.f32	s0, s13
 801f5dc:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f5e0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f5e4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801f6c4 <__ieee754_rem_pio2f+0x254>
 801f5e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f5ec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f5f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f5f4:	ed84 7a00 	vstr	s14, [r4]
 801f5f8:	e7bc      	b.n	801f574 <__ieee754_rem_pio2f+0x104>
 801f5fa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801f5fe:	d306      	bcc.n	801f60e <__ieee754_rem_pio2f+0x19e>
 801f600:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f604:	edc0 7a01 	vstr	s15, [r0, #4]
 801f608:	edc0 7a00 	vstr	s15, [r0]
 801f60c:	e73e      	b.n	801f48c <__ieee754_rem_pio2f+0x1c>
 801f60e:	15ea      	asrs	r2, r5, #23
 801f610:	3a86      	subs	r2, #134	@ 0x86
 801f612:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f616:	ee07 3a90 	vmov	s15, r3
 801f61a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f61e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801f6c8 <__ieee754_rem_pio2f+0x258>
 801f622:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f62a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f62e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f632:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f63a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f63e:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f642:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f646:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f64e:	edcd 7a05 	vstr	s15, [sp, #20]
 801f652:	d11e      	bne.n	801f692 <__ieee754_rem_pio2f+0x222>
 801f654:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f65c:	bf0c      	ite	eq
 801f65e:	2301      	moveq	r3, #1
 801f660:	2302      	movne	r3, #2
 801f662:	491a      	ldr	r1, [pc, #104]	@ (801f6cc <__ieee754_rem_pio2f+0x25c>)
 801f664:	9101      	str	r1, [sp, #4]
 801f666:	2102      	movs	r1, #2
 801f668:	9100      	str	r1, [sp, #0]
 801f66a:	a803      	add	r0, sp, #12
 801f66c:	4621      	mov	r1, r4
 801f66e:	f000 f8c3 	bl	801f7f8 <__kernel_rem_pio2f>
 801f672:	2e00      	cmp	r6, #0
 801f674:	f6bf af2f 	bge.w	801f4d6 <__ieee754_rem_pio2f+0x66>
 801f678:	edd4 7a00 	vldr	s15, [r4]
 801f67c:	eef1 7a67 	vneg.f32	s15, s15
 801f680:	edc4 7a00 	vstr	s15, [r4]
 801f684:	edd4 7a01 	vldr	s15, [r4, #4]
 801f688:	eef1 7a67 	vneg.f32	s15, s15
 801f68c:	edc4 7a01 	vstr	s15, [r4, #4]
 801f690:	e782      	b.n	801f598 <__ieee754_rem_pio2f+0x128>
 801f692:	2303      	movs	r3, #3
 801f694:	e7e5      	b.n	801f662 <__ieee754_rem_pio2f+0x1f2>
 801f696:	bf00      	nop
 801f698:	3f490fd8 	.word	0x3f490fd8
 801f69c:	4016cbe3 	.word	0x4016cbe3
 801f6a0:	3fc90f80 	.word	0x3fc90f80
 801f6a4:	3fc90fd0 	.word	0x3fc90fd0
 801f6a8:	37354400 	.word	0x37354400
 801f6ac:	37354443 	.word	0x37354443
 801f6b0:	2e85a308 	.word	0x2e85a308
 801f6b4:	43490f80 	.word	0x43490f80
 801f6b8:	3f22f984 	.word	0x3f22f984
 801f6bc:	08026c58 	.word	0x08026c58
 801f6c0:	2e85a300 	.word	0x2e85a300
 801f6c4:	248d3132 	.word	0x248d3132
 801f6c8:	43800000 	.word	0x43800000
 801f6cc:	08026cd8 	.word	0x08026cd8

0801f6d0 <fabsf>:
 801f6d0:	ee10 3a10 	vmov	r3, s0
 801f6d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f6d8:	ee00 3a10 	vmov	s0, r3
 801f6dc:	4770      	bx	lr
	...

0801f6e0 <scalbnf>:
 801f6e0:	ee10 3a10 	vmov	r3, s0
 801f6e4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801f6e8:	d02b      	beq.n	801f742 <scalbnf+0x62>
 801f6ea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801f6ee:	d302      	bcc.n	801f6f6 <scalbnf+0x16>
 801f6f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f6f4:	4770      	bx	lr
 801f6f6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801f6fa:	d123      	bne.n	801f744 <scalbnf+0x64>
 801f6fc:	4b24      	ldr	r3, [pc, #144]	@ (801f790 <scalbnf+0xb0>)
 801f6fe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801f794 <scalbnf+0xb4>
 801f702:	4298      	cmp	r0, r3
 801f704:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f708:	db17      	blt.n	801f73a <scalbnf+0x5a>
 801f70a:	ee10 3a10 	vmov	r3, s0
 801f70e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f712:	3a19      	subs	r2, #25
 801f714:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801f718:	4288      	cmp	r0, r1
 801f71a:	dd15      	ble.n	801f748 <scalbnf+0x68>
 801f71c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801f798 <scalbnf+0xb8>
 801f720:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801f79c <scalbnf+0xbc>
 801f724:	ee10 3a10 	vmov	r3, s0
 801f728:	eeb0 7a67 	vmov.f32	s14, s15
 801f72c:	2b00      	cmp	r3, #0
 801f72e:	bfb8      	it	lt
 801f730:	eef0 7a66 	vmovlt.f32	s15, s13
 801f734:	ee27 0a87 	vmul.f32	s0, s15, s14
 801f738:	4770      	bx	lr
 801f73a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801f7a0 <scalbnf+0xc0>
 801f73e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f742:	4770      	bx	lr
 801f744:	0dd2      	lsrs	r2, r2, #23
 801f746:	e7e5      	b.n	801f714 <scalbnf+0x34>
 801f748:	4410      	add	r0, r2
 801f74a:	28fe      	cmp	r0, #254	@ 0xfe
 801f74c:	dce6      	bgt.n	801f71c <scalbnf+0x3c>
 801f74e:	2800      	cmp	r0, #0
 801f750:	dd06      	ble.n	801f760 <scalbnf+0x80>
 801f752:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f756:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801f75a:	ee00 3a10 	vmov	s0, r3
 801f75e:	4770      	bx	lr
 801f760:	f110 0f16 	cmn.w	r0, #22
 801f764:	da09      	bge.n	801f77a <scalbnf+0x9a>
 801f766:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801f7a0 <scalbnf+0xc0>
 801f76a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801f7a4 <scalbnf+0xc4>
 801f76e:	ee10 3a10 	vmov	r3, s0
 801f772:	eeb0 7a67 	vmov.f32	s14, s15
 801f776:	2b00      	cmp	r3, #0
 801f778:	e7d9      	b.n	801f72e <scalbnf+0x4e>
 801f77a:	3019      	adds	r0, #25
 801f77c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f780:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801f784:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801f7a8 <scalbnf+0xc8>
 801f788:	ee07 3a90 	vmov	s15, r3
 801f78c:	e7d7      	b.n	801f73e <scalbnf+0x5e>
 801f78e:	bf00      	nop
 801f790:	ffff3cb0 	.word	0xffff3cb0
 801f794:	4c000000 	.word	0x4c000000
 801f798:	7149f2ca 	.word	0x7149f2ca
 801f79c:	f149f2ca 	.word	0xf149f2ca
 801f7a0:	0da24260 	.word	0x0da24260
 801f7a4:	8da24260 	.word	0x8da24260
 801f7a8:	33000000 	.word	0x33000000

0801f7ac <with_errnof>:
 801f7ac:	b510      	push	{r4, lr}
 801f7ae:	ed2d 8b02 	vpush	{d8}
 801f7b2:	eeb0 8a40 	vmov.f32	s16, s0
 801f7b6:	4604      	mov	r4, r0
 801f7b8:	f000 fd78 	bl	80202ac <__errno>
 801f7bc:	eeb0 0a48 	vmov.f32	s0, s16
 801f7c0:	ecbd 8b02 	vpop	{d8}
 801f7c4:	6004      	str	r4, [r0, #0]
 801f7c6:	bd10      	pop	{r4, pc}

0801f7c8 <xflowf>:
 801f7c8:	b130      	cbz	r0, 801f7d8 <xflowf+0x10>
 801f7ca:	eef1 7a40 	vneg.f32	s15, s0
 801f7ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f7d2:	2022      	movs	r0, #34	@ 0x22
 801f7d4:	f7ff bfea 	b.w	801f7ac <with_errnof>
 801f7d8:	eef0 7a40 	vmov.f32	s15, s0
 801f7dc:	e7f7      	b.n	801f7ce <xflowf+0x6>
	...

0801f7e0 <__math_uflowf>:
 801f7e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f7e8 <__math_uflowf+0x8>
 801f7e4:	f7ff bff0 	b.w	801f7c8 <xflowf>
 801f7e8:	10000000 	.word	0x10000000

0801f7ec <__math_oflowf>:
 801f7ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f7f4 <__math_oflowf+0x8>
 801f7f0:	f7ff bfea 	b.w	801f7c8 <xflowf>
 801f7f4:	70000000 	.word	0x70000000

0801f7f8 <__kernel_rem_pio2f>:
 801f7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7fc:	ed2d 8b04 	vpush	{d8-d9}
 801f800:	b0d9      	sub	sp, #356	@ 0x164
 801f802:	4690      	mov	r8, r2
 801f804:	9001      	str	r0, [sp, #4]
 801f806:	4ab9      	ldr	r2, [pc, #740]	@ (801faec <__kernel_rem_pio2f+0x2f4>)
 801f808:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801f80a:	f118 0f04 	cmn.w	r8, #4
 801f80e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801f812:	460f      	mov	r7, r1
 801f814:	f103 3bff 	add.w	fp, r3, #4294967295
 801f818:	db27      	blt.n	801f86a <__kernel_rem_pio2f+0x72>
 801f81a:	f1b8 0203 	subs.w	r2, r8, #3
 801f81e:	bf48      	it	mi
 801f820:	f108 0204 	addmi.w	r2, r8, #4
 801f824:	10d2      	asrs	r2, r2, #3
 801f826:	1c55      	adds	r5, r2, #1
 801f828:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801f82a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801fafc <__kernel_rem_pio2f+0x304>
 801f82e:	00e8      	lsls	r0, r5, #3
 801f830:	eba2 060b 	sub.w	r6, r2, fp
 801f834:	9002      	str	r0, [sp, #8]
 801f836:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801f83a:	eb0a 0c0b 	add.w	ip, sl, fp
 801f83e:	ac1c      	add	r4, sp, #112	@ 0x70
 801f840:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801f844:	2000      	movs	r0, #0
 801f846:	4560      	cmp	r0, ip
 801f848:	dd11      	ble.n	801f86e <__kernel_rem_pio2f+0x76>
 801f84a:	a91c      	add	r1, sp, #112	@ 0x70
 801f84c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801f850:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801f854:	f04f 0c00 	mov.w	ip, #0
 801f858:	45d4      	cmp	ip, sl
 801f85a:	dc27      	bgt.n	801f8ac <__kernel_rem_pio2f+0xb4>
 801f85c:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f860:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801fafc <__kernel_rem_pio2f+0x304>
 801f864:	4606      	mov	r6, r0
 801f866:	2400      	movs	r4, #0
 801f868:	e016      	b.n	801f898 <__kernel_rem_pio2f+0xa0>
 801f86a:	2200      	movs	r2, #0
 801f86c:	e7db      	b.n	801f826 <__kernel_rem_pio2f+0x2e>
 801f86e:	42c6      	cmn	r6, r0
 801f870:	bf5d      	ittte	pl
 801f872:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801f876:	ee07 1a90 	vmovpl	s15, r1
 801f87a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f87e:	eef0 7a47 	vmovmi.f32	s15, s14
 801f882:	ece4 7a01 	vstmia	r4!, {s15}
 801f886:	3001      	adds	r0, #1
 801f888:	e7dd      	b.n	801f846 <__kernel_rem_pio2f+0x4e>
 801f88a:	ecfe 6a01 	vldmia	lr!, {s13}
 801f88e:	ed96 7a00 	vldr	s14, [r6]
 801f892:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f896:	3401      	adds	r4, #1
 801f898:	455c      	cmp	r4, fp
 801f89a:	f1a6 0604 	sub.w	r6, r6, #4
 801f89e:	ddf4      	ble.n	801f88a <__kernel_rem_pio2f+0x92>
 801f8a0:	ece9 7a01 	vstmia	r9!, {s15}
 801f8a4:	f10c 0c01 	add.w	ip, ip, #1
 801f8a8:	3004      	adds	r0, #4
 801f8aa:	e7d5      	b.n	801f858 <__kernel_rem_pio2f+0x60>
 801f8ac:	a908      	add	r1, sp, #32
 801f8ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f8b2:	9104      	str	r1, [sp, #16]
 801f8b4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801f8b6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801faf8 <__kernel_rem_pio2f+0x300>
 801f8ba:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801faf4 <__kernel_rem_pio2f+0x2fc>
 801f8be:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f8c2:	9203      	str	r2, [sp, #12]
 801f8c4:	4654      	mov	r4, sl
 801f8c6:	00a2      	lsls	r2, r4, #2
 801f8c8:	9205      	str	r2, [sp, #20]
 801f8ca:	aa58      	add	r2, sp, #352	@ 0x160
 801f8cc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801f8d0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801f8d4:	a944      	add	r1, sp, #272	@ 0x110
 801f8d6:	aa08      	add	r2, sp, #32
 801f8d8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801f8dc:	4694      	mov	ip, r2
 801f8de:	4626      	mov	r6, r4
 801f8e0:	2e00      	cmp	r6, #0
 801f8e2:	f1a0 0004 	sub.w	r0, r0, #4
 801f8e6:	dc4c      	bgt.n	801f982 <__kernel_rem_pio2f+0x18a>
 801f8e8:	4628      	mov	r0, r5
 801f8ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f8ee:	f7ff fef7 	bl	801f6e0 <scalbnf>
 801f8f2:	eeb0 8a40 	vmov.f32	s16, s0
 801f8f6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801f8fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f8fe:	f000 f9ed 	bl	801fcdc <floorf>
 801f902:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801f906:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f90a:	2d00      	cmp	r5, #0
 801f90c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f910:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f914:	ee17 9a90 	vmov	r9, s15
 801f918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f91c:	ee38 8a67 	vsub.f32	s16, s16, s15
 801f920:	dd41      	ble.n	801f9a6 <__kernel_rem_pio2f+0x1ae>
 801f922:	f104 3cff 	add.w	ip, r4, #4294967295
 801f926:	a908      	add	r1, sp, #32
 801f928:	f1c5 0e08 	rsb	lr, r5, #8
 801f92c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801f930:	fa46 f00e 	asr.w	r0, r6, lr
 801f934:	4481      	add	r9, r0
 801f936:	fa00 f00e 	lsl.w	r0, r0, lr
 801f93a:	1a36      	subs	r6, r6, r0
 801f93c:	f1c5 0007 	rsb	r0, r5, #7
 801f940:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801f944:	4106      	asrs	r6, r0
 801f946:	2e00      	cmp	r6, #0
 801f948:	dd3c      	ble.n	801f9c4 <__kernel_rem_pio2f+0x1cc>
 801f94a:	f04f 0e00 	mov.w	lr, #0
 801f94e:	f109 0901 	add.w	r9, r9, #1
 801f952:	4670      	mov	r0, lr
 801f954:	4574      	cmp	r4, lr
 801f956:	dc68      	bgt.n	801fa2a <__kernel_rem_pio2f+0x232>
 801f958:	2d00      	cmp	r5, #0
 801f95a:	dd03      	ble.n	801f964 <__kernel_rem_pio2f+0x16c>
 801f95c:	2d01      	cmp	r5, #1
 801f95e:	d074      	beq.n	801fa4a <__kernel_rem_pio2f+0x252>
 801f960:	2d02      	cmp	r5, #2
 801f962:	d07d      	beq.n	801fa60 <__kernel_rem_pio2f+0x268>
 801f964:	2e02      	cmp	r6, #2
 801f966:	d12d      	bne.n	801f9c4 <__kernel_rem_pio2f+0x1cc>
 801f968:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f96c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f970:	b340      	cbz	r0, 801f9c4 <__kernel_rem_pio2f+0x1cc>
 801f972:	4628      	mov	r0, r5
 801f974:	9306      	str	r3, [sp, #24]
 801f976:	f7ff feb3 	bl	801f6e0 <scalbnf>
 801f97a:	9b06      	ldr	r3, [sp, #24]
 801f97c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f980:	e020      	b.n	801f9c4 <__kernel_rem_pio2f+0x1cc>
 801f982:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f986:	3e01      	subs	r6, #1
 801f988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f98c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f990:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f994:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f998:	ecac 0a01 	vstmia	ip!, {s0}
 801f99c:	ed90 0a00 	vldr	s0, [r0]
 801f9a0:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f9a4:	e79c      	b.n	801f8e0 <__kernel_rem_pio2f+0xe8>
 801f9a6:	d105      	bne.n	801f9b4 <__kernel_rem_pio2f+0x1bc>
 801f9a8:	1e60      	subs	r0, r4, #1
 801f9aa:	a908      	add	r1, sp, #32
 801f9ac:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801f9b0:	11f6      	asrs	r6, r6, #7
 801f9b2:	e7c8      	b.n	801f946 <__kernel_rem_pio2f+0x14e>
 801f9b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f9b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9c0:	da31      	bge.n	801fa26 <__kernel_rem_pio2f+0x22e>
 801f9c2:	2600      	movs	r6, #0
 801f9c4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9cc:	f040 8098 	bne.w	801fb00 <__kernel_rem_pio2f+0x308>
 801f9d0:	1e60      	subs	r0, r4, #1
 801f9d2:	2200      	movs	r2, #0
 801f9d4:	4550      	cmp	r0, sl
 801f9d6:	da4b      	bge.n	801fa70 <__kernel_rem_pio2f+0x278>
 801f9d8:	2a00      	cmp	r2, #0
 801f9da:	d065      	beq.n	801faa8 <__kernel_rem_pio2f+0x2b0>
 801f9dc:	3c01      	subs	r4, #1
 801f9de:	ab08      	add	r3, sp, #32
 801f9e0:	3d08      	subs	r5, #8
 801f9e2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	d0f8      	beq.n	801f9dc <__kernel_rem_pio2f+0x1e4>
 801f9ea:	4628      	mov	r0, r5
 801f9ec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f9f0:	f7ff fe76 	bl	801f6e0 <scalbnf>
 801f9f4:	1c63      	adds	r3, r4, #1
 801f9f6:	aa44      	add	r2, sp, #272	@ 0x110
 801f9f8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801faf8 <__kernel_rem_pio2f+0x300>
 801f9fc:	0099      	lsls	r1, r3, #2
 801f9fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801fa02:	4623      	mov	r3, r4
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	f280 80a9 	bge.w	801fb5c <__kernel_rem_pio2f+0x364>
 801fa0a:	4623      	mov	r3, r4
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	f2c0 80c7 	blt.w	801fba0 <__kernel_rem_pio2f+0x3a8>
 801fa12:	aa44      	add	r2, sp, #272	@ 0x110
 801fa14:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801fa18:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801faf0 <__kernel_rem_pio2f+0x2f8>
 801fa1c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801fafc <__kernel_rem_pio2f+0x304>
 801fa20:	2000      	movs	r0, #0
 801fa22:	1ae2      	subs	r2, r4, r3
 801fa24:	e0b1      	b.n	801fb8a <__kernel_rem_pio2f+0x392>
 801fa26:	2602      	movs	r6, #2
 801fa28:	e78f      	b.n	801f94a <__kernel_rem_pio2f+0x152>
 801fa2a:	f852 1b04 	ldr.w	r1, [r2], #4
 801fa2e:	b948      	cbnz	r0, 801fa44 <__kernel_rem_pio2f+0x24c>
 801fa30:	b121      	cbz	r1, 801fa3c <__kernel_rem_pio2f+0x244>
 801fa32:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801fa36:	f842 1c04 	str.w	r1, [r2, #-4]
 801fa3a:	2101      	movs	r1, #1
 801fa3c:	f10e 0e01 	add.w	lr, lr, #1
 801fa40:	4608      	mov	r0, r1
 801fa42:	e787      	b.n	801f954 <__kernel_rem_pio2f+0x15c>
 801fa44:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801fa48:	e7f5      	b.n	801fa36 <__kernel_rem_pio2f+0x23e>
 801fa4a:	f104 3cff 	add.w	ip, r4, #4294967295
 801fa4e:	aa08      	add	r2, sp, #32
 801fa50:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801fa54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801fa58:	a908      	add	r1, sp, #32
 801fa5a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801fa5e:	e781      	b.n	801f964 <__kernel_rem_pio2f+0x16c>
 801fa60:	f104 3cff 	add.w	ip, r4, #4294967295
 801fa64:	aa08      	add	r2, sp, #32
 801fa66:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801fa6a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801fa6e:	e7f3      	b.n	801fa58 <__kernel_rem_pio2f+0x260>
 801fa70:	a908      	add	r1, sp, #32
 801fa72:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801fa76:	3801      	subs	r0, #1
 801fa78:	430a      	orrs	r2, r1
 801fa7a:	e7ab      	b.n	801f9d4 <__kernel_rem_pio2f+0x1dc>
 801fa7c:	3201      	adds	r2, #1
 801fa7e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801fa82:	2e00      	cmp	r6, #0
 801fa84:	d0fa      	beq.n	801fa7c <__kernel_rem_pio2f+0x284>
 801fa86:	9905      	ldr	r1, [sp, #20]
 801fa88:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801fa8c:	eb0d 0001 	add.w	r0, sp, r1
 801fa90:	18e6      	adds	r6, r4, r3
 801fa92:	a91c      	add	r1, sp, #112	@ 0x70
 801fa94:	f104 0c01 	add.w	ip, r4, #1
 801fa98:	384c      	subs	r0, #76	@ 0x4c
 801fa9a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801fa9e:	4422      	add	r2, r4
 801faa0:	4562      	cmp	r2, ip
 801faa2:	da04      	bge.n	801faae <__kernel_rem_pio2f+0x2b6>
 801faa4:	4614      	mov	r4, r2
 801faa6:	e70e      	b.n	801f8c6 <__kernel_rem_pio2f+0xce>
 801faa8:	9804      	ldr	r0, [sp, #16]
 801faaa:	2201      	movs	r2, #1
 801faac:	e7e7      	b.n	801fa7e <__kernel_rem_pio2f+0x286>
 801faae:	9903      	ldr	r1, [sp, #12]
 801fab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801fab4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801fab8:	9105      	str	r1, [sp, #20]
 801faba:	ee07 1a90 	vmov	s15, r1
 801fabe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fac2:	2400      	movs	r4, #0
 801fac4:	ece6 7a01 	vstmia	r6!, {s15}
 801fac8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801fafc <__kernel_rem_pio2f+0x304>
 801facc:	46b1      	mov	r9, r6
 801face:	455c      	cmp	r4, fp
 801fad0:	dd04      	ble.n	801fadc <__kernel_rem_pio2f+0x2e4>
 801fad2:	ece0 7a01 	vstmia	r0!, {s15}
 801fad6:	f10c 0c01 	add.w	ip, ip, #1
 801fada:	e7e1      	b.n	801faa0 <__kernel_rem_pio2f+0x2a8>
 801fadc:	ecfe 6a01 	vldmia	lr!, {s13}
 801fae0:	ed39 7a01 	vldmdb	r9!, {s14}
 801fae4:	3401      	adds	r4, #1
 801fae6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801faea:	e7f0      	b.n	801face <__kernel_rem_pio2f+0x2d6>
 801faec:	0802701c 	.word	0x0802701c
 801faf0:	08026ff0 	.word	0x08026ff0
 801faf4:	43800000 	.word	0x43800000
 801faf8:	3b800000 	.word	0x3b800000
 801fafc:	00000000 	.word	0x00000000
 801fb00:	9b02      	ldr	r3, [sp, #8]
 801fb02:	eeb0 0a48 	vmov.f32	s0, s16
 801fb06:	eba3 0008 	sub.w	r0, r3, r8
 801fb0a:	f7ff fde9 	bl	801f6e0 <scalbnf>
 801fb0e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801faf4 <__kernel_rem_pio2f+0x2fc>
 801fb12:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801fb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb1a:	db19      	blt.n	801fb50 <__kernel_rem_pio2f+0x358>
 801fb1c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801faf8 <__kernel_rem_pio2f+0x300>
 801fb20:	ee60 7a27 	vmul.f32	s15, s0, s15
 801fb24:	aa08      	add	r2, sp, #32
 801fb26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fb2a:	3508      	adds	r5, #8
 801fb2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fb30:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801fb34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fb38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fb3c:	ee10 3a10 	vmov	r3, s0
 801fb40:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801fb44:	ee17 3a90 	vmov	r3, s15
 801fb48:	3401      	adds	r4, #1
 801fb4a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801fb4e:	e74c      	b.n	801f9ea <__kernel_rem_pio2f+0x1f2>
 801fb50:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fb54:	aa08      	add	r2, sp, #32
 801fb56:	ee10 3a10 	vmov	r3, s0
 801fb5a:	e7f6      	b.n	801fb4a <__kernel_rem_pio2f+0x352>
 801fb5c:	a808      	add	r0, sp, #32
 801fb5e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801fb62:	9001      	str	r0, [sp, #4]
 801fb64:	ee07 0a90 	vmov	s15, r0
 801fb68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fb6c:	3b01      	subs	r3, #1
 801fb6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801fb72:	ee20 0a07 	vmul.f32	s0, s0, s14
 801fb76:	ed62 7a01 	vstmdb	r2!, {s15}
 801fb7a:	e743      	b.n	801fa04 <__kernel_rem_pio2f+0x20c>
 801fb7c:	ecfc 6a01 	vldmia	ip!, {s13}
 801fb80:	ecb5 7a01 	vldmia	r5!, {s14}
 801fb84:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fb88:	3001      	adds	r0, #1
 801fb8a:	4550      	cmp	r0, sl
 801fb8c:	dc01      	bgt.n	801fb92 <__kernel_rem_pio2f+0x39a>
 801fb8e:	4282      	cmp	r2, r0
 801fb90:	daf4      	bge.n	801fb7c <__kernel_rem_pio2f+0x384>
 801fb92:	a858      	add	r0, sp, #352	@ 0x160
 801fb94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801fb98:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801fb9c:	3b01      	subs	r3, #1
 801fb9e:	e735      	b.n	801fa0c <__kernel_rem_pio2f+0x214>
 801fba0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801fba2:	2b02      	cmp	r3, #2
 801fba4:	dc09      	bgt.n	801fbba <__kernel_rem_pio2f+0x3c2>
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	dc2b      	bgt.n	801fc02 <__kernel_rem_pio2f+0x40a>
 801fbaa:	d044      	beq.n	801fc36 <__kernel_rem_pio2f+0x43e>
 801fbac:	f009 0007 	and.w	r0, r9, #7
 801fbb0:	b059      	add	sp, #356	@ 0x164
 801fbb2:	ecbd 8b04 	vpop	{d8-d9}
 801fbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbba:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801fbbc:	2b03      	cmp	r3, #3
 801fbbe:	d1f5      	bne.n	801fbac <__kernel_rem_pio2f+0x3b4>
 801fbc0:	aa30      	add	r2, sp, #192	@ 0xc0
 801fbc2:	1f0b      	subs	r3, r1, #4
 801fbc4:	4413      	add	r3, r2
 801fbc6:	461a      	mov	r2, r3
 801fbc8:	4620      	mov	r0, r4
 801fbca:	2800      	cmp	r0, #0
 801fbcc:	f1a2 0204 	sub.w	r2, r2, #4
 801fbd0:	dc52      	bgt.n	801fc78 <__kernel_rem_pio2f+0x480>
 801fbd2:	4622      	mov	r2, r4
 801fbd4:	2a01      	cmp	r2, #1
 801fbd6:	f1a3 0304 	sub.w	r3, r3, #4
 801fbda:	dc5d      	bgt.n	801fc98 <__kernel_rem_pio2f+0x4a0>
 801fbdc:	ab30      	add	r3, sp, #192	@ 0xc0
 801fbde:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801fafc <__kernel_rem_pio2f+0x304>
 801fbe2:	440b      	add	r3, r1
 801fbe4:	2c01      	cmp	r4, #1
 801fbe6:	dc67      	bgt.n	801fcb8 <__kernel_rem_pio2f+0x4c0>
 801fbe8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801fbec:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801fbf0:	2e00      	cmp	r6, #0
 801fbf2:	d167      	bne.n	801fcc4 <__kernel_rem_pio2f+0x4cc>
 801fbf4:	edc7 6a00 	vstr	s13, [r7]
 801fbf8:	ed87 7a01 	vstr	s14, [r7, #4]
 801fbfc:	edc7 7a02 	vstr	s15, [r7, #8]
 801fc00:	e7d4      	b.n	801fbac <__kernel_rem_pio2f+0x3b4>
 801fc02:	ab30      	add	r3, sp, #192	@ 0xc0
 801fc04:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801fafc <__kernel_rem_pio2f+0x304>
 801fc08:	440b      	add	r3, r1
 801fc0a:	4622      	mov	r2, r4
 801fc0c:	2a00      	cmp	r2, #0
 801fc0e:	da24      	bge.n	801fc5a <__kernel_rem_pio2f+0x462>
 801fc10:	b34e      	cbz	r6, 801fc66 <__kernel_rem_pio2f+0x46e>
 801fc12:	eef1 7a47 	vneg.f32	s15, s14
 801fc16:	edc7 7a00 	vstr	s15, [r7]
 801fc1a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801fc1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fc22:	aa31      	add	r2, sp, #196	@ 0xc4
 801fc24:	2301      	movs	r3, #1
 801fc26:	429c      	cmp	r4, r3
 801fc28:	da20      	bge.n	801fc6c <__kernel_rem_pio2f+0x474>
 801fc2a:	b10e      	cbz	r6, 801fc30 <__kernel_rem_pio2f+0x438>
 801fc2c:	eef1 7a67 	vneg.f32	s15, s15
 801fc30:	edc7 7a01 	vstr	s15, [r7, #4]
 801fc34:	e7ba      	b.n	801fbac <__kernel_rem_pio2f+0x3b4>
 801fc36:	ab30      	add	r3, sp, #192	@ 0xc0
 801fc38:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801fafc <__kernel_rem_pio2f+0x304>
 801fc3c:	440b      	add	r3, r1
 801fc3e:	2c00      	cmp	r4, #0
 801fc40:	da05      	bge.n	801fc4e <__kernel_rem_pio2f+0x456>
 801fc42:	b10e      	cbz	r6, 801fc48 <__kernel_rem_pio2f+0x450>
 801fc44:	eef1 7a67 	vneg.f32	s15, s15
 801fc48:	edc7 7a00 	vstr	s15, [r7]
 801fc4c:	e7ae      	b.n	801fbac <__kernel_rem_pio2f+0x3b4>
 801fc4e:	ed33 7a01 	vldmdb	r3!, {s14}
 801fc52:	3c01      	subs	r4, #1
 801fc54:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fc58:	e7f1      	b.n	801fc3e <__kernel_rem_pio2f+0x446>
 801fc5a:	ed73 7a01 	vldmdb	r3!, {s15}
 801fc5e:	3a01      	subs	r2, #1
 801fc60:	ee37 7a27 	vadd.f32	s14, s14, s15
 801fc64:	e7d2      	b.n	801fc0c <__kernel_rem_pio2f+0x414>
 801fc66:	eef0 7a47 	vmov.f32	s15, s14
 801fc6a:	e7d4      	b.n	801fc16 <__kernel_rem_pio2f+0x41e>
 801fc6c:	ecb2 7a01 	vldmia	r2!, {s14}
 801fc70:	3301      	adds	r3, #1
 801fc72:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fc76:	e7d6      	b.n	801fc26 <__kernel_rem_pio2f+0x42e>
 801fc78:	edd2 7a00 	vldr	s15, [r2]
 801fc7c:	edd2 6a01 	vldr	s13, [r2, #4]
 801fc80:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801fc84:	3801      	subs	r0, #1
 801fc86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fc8a:	ed82 7a00 	vstr	s14, [r2]
 801fc8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801fc92:	edc2 7a01 	vstr	s15, [r2, #4]
 801fc96:	e798      	b.n	801fbca <__kernel_rem_pio2f+0x3d2>
 801fc98:	edd3 7a00 	vldr	s15, [r3]
 801fc9c:	edd3 6a01 	vldr	s13, [r3, #4]
 801fca0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801fca4:	3a01      	subs	r2, #1
 801fca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fcaa:	ed83 7a00 	vstr	s14, [r3]
 801fcae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801fcb2:	edc3 7a01 	vstr	s15, [r3, #4]
 801fcb6:	e78d      	b.n	801fbd4 <__kernel_rem_pio2f+0x3dc>
 801fcb8:	ed33 7a01 	vldmdb	r3!, {s14}
 801fcbc:	3c01      	subs	r4, #1
 801fcbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fcc2:	e78f      	b.n	801fbe4 <__kernel_rem_pio2f+0x3ec>
 801fcc4:	eef1 6a66 	vneg.f32	s13, s13
 801fcc8:	eeb1 7a47 	vneg.f32	s14, s14
 801fccc:	edc7 6a00 	vstr	s13, [r7]
 801fcd0:	ed87 7a01 	vstr	s14, [r7, #4]
 801fcd4:	eef1 7a67 	vneg.f32	s15, s15
 801fcd8:	e790      	b.n	801fbfc <__kernel_rem_pio2f+0x404>
 801fcda:	bf00      	nop

0801fcdc <floorf>:
 801fcdc:	ee10 3a10 	vmov	r3, s0
 801fce0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801fce4:	3a7f      	subs	r2, #127	@ 0x7f
 801fce6:	2a16      	cmp	r2, #22
 801fce8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801fcec:	dc2b      	bgt.n	801fd46 <floorf+0x6a>
 801fcee:	2a00      	cmp	r2, #0
 801fcf0:	da12      	bge.n	801fd18 <floorf+0x3c>
 801fcf2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801fd58 <floorf+0x7c>
 801fcf6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fcfa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd02:	dd06      	ble.n	801fd12 <floorf+0x36>
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	da24      	bge.n	801fd52 <floorf+0x76>
 801fd08:	2900      	cmp	r1, #0
 801fd0a:	4b14      	ldr	r3, [pc, #80]	@ (801fd5c <floorf+0x80>)
 801fd0c:	bf08      	it	eq
 801fd0e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801fd12:	ee00 3a10 	vmov	s0, r3
 801fd16:	4770      	bx	lr
 801fd18:	4911      	ldr	r1, [pc, #68]	@ (801fd60 <floorf+0x84>)
 801fd1a:	4111      	asrs	r1, r2
 801fd1c:	420b      	tst	r3, r1
 801fd1e:	d0fa      	beq.n	801fd16 <floorf+0x3a>
 801fd20:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801fd58 <floorf+0x7c>
 801fd24:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fd28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd30:	ddef      	ble.n	801fd12 <floorf+0x36>
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	bfbe      	ittt	lt
 801fd36:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801fd3a:	fa40 f202 	asrlt.w	r2, r0, r2
 801fd3e:	189b      	addlt	r3, r3, r2
 801fd40:	ea23 0301 	bic.w	r3, r3, r1
 801fd44:	e7e5      	b.n	801fd12 <floorf+0x36>
 801fd46:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801fd4a:	d3e4      	bcc.n	801fd16 <floorf+0x3a>
 801fd4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fd50:	4770      	bx	lr
 801fd52:	2300      	movs	r3, #0
 801fd54:	e7dd      	b.n	801fd12 <floorf+0x36>
 801fd56:	bf00      	nop
 801fd58:	7149f2ca 	.word	0x7149f2ca
 801fd5c:	bf800000 	.word	0xbf800000
 801fd60:	007fffff 	.word	0x007fffff

0801fd64 <abort>:
 801fd64:	b508      	push	{r3, lr}
 801fd66:	2006      	movs	r0, #6
 801fd68:	f000 fa2e 	bl	80201c8 <raise>
 801fd6c:	2001      	movs	r0, #1
 801fd6e:	f001 f861 	bl	8020e34 <_exit>
	...

0801fd74 <__assert_func>:
 801fd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fd76:	4614      	mov	r4, r2
 801fd78:	461a      	mov	r2, r3
 801fd7a:	4b09      	ldr	r3, [pc, #36]	@ (801fda0 <__assert_func+0x2c>)
 801fd7c:	681b      	ldr	r3, [r3, #0]
 801fd7e:	4605      	mov	r5, r0
 801fd80:	68d8      	ldr	r0, [r3, #12]
 801fd82:	b954      	cbnz	r4, 801fd9a <__assert_func+0x26>
 801fd84:	4b07      	ldr	r3, [pc, #28]	@ (801fda4 <__assert_func+0x30>)
 801fd86:	461c      	mov	r4, r3
 801fd88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fd8c:	9100      	str	r1, [sp, #0]
 801fd8e:	462b      	mov	r3, r5
 801fd90:	4905      	ldr	r1, [pc, #20]	@ (801fda8 <__assert_func+0x34>)
 801fd92:	f000 f975 	bl	8020080 <fiprintf>
 801fd96:	f7ff ffe5 	bl	801fd64 <abort>
 801fd9a:	4b04      	ldr	r3, [pc, #16]	@ (801fdac <__assert_func+0x38>)
 801fd9c:	e7f4      	b.n	801fd88 <__assert_func+0x14>
 801fd9e:	bf00      	nop
 801fda0:	20000070 	.word	0x20000070
 801fda4:	08027063 	.word	0x08027063
 801fda8:	08027035 	.word	0x08027035
 801fdac:	08027028 	.word	0x08027028

0801fdb0 <atexit>:
 801fdb0:	2300      	movs	r3, #0
 801fdb2:	4601      	mov	r1, r0
 801fdb4:	461a      	mov	r2, r3
 801fdb6:	4618      	mov	r0, r3
 801fdb8:	f000 bab4 	b.w	8020324 <__register_exitproc>

0801fdbc <malloc>:
 801fdbc:	4b02      	ldr	r3, [pc, #8]	@ (801fdc8 <malloc+0xc>)
 801fdbe:	4601      	mov	r1, r0
 801fdc0:	6818      	ldr	r0, [r3, #0]
 801fdc2:	f000 b82d 	b.w	801fe20 <_malloc_r>
 801fdc6:	bf00      	nop
 801fdc8:	20000070 	.word	0x20000070

0801fdcc <free>:
 801fdcc:	4b02      	ldr	r3, [pc, #8]	@ (801fdd8 <free+0xc>)
 801fdce:	4601      	mov	r1, r0
 801fdd0:	6818      	ldr	r0, [r3, #0]
 801fdd2:	f000 bb03 	b.w	80203dc <_free_r>
 801fdd6:	bf00      	nop
 801fdd8:	20000070 	.word	0x20000070

0801fddc <sbrk_aligned>:
 801fddc:	b570      	push	{r4, r5, r6, lr}
 801fdde:	4e0f      	ldr	r6, [pc, #60]	@ (801fe1c <sbrk_aligned+0x40>)
 801fde0:	460c      	mov	r4, r1
 801fde2:	6831      	ldr	r1, [r6, #0]
 801fde4:	4605      	mov	r5, r0
 801fde6:	b911      	cbnz	r1, 801fdee <sbrk_aligned+0x12>
 801fde8:	f000 fa3e 	bl	8020268 <_sbrk_r>
 801fdec:	6030      	str	r0, [r6, #0]
 801fdee:	4621      	mov	r1, r4
 801fdf0:	4628      	mov	r0, r5
 801fdf2:	f000 fa39 	bl	8020268 <_sbrk_r>
 801fdf6:	1c43      	adds	r3, r0, #1
 801fdf8:	d103      	bne.n	801fe02 <sbrk_aligned+0x26>
 801fdfa:	f04f 34ff 	mov.w	r4, #4294967295
 801fdfe:	4620      	mov	r0, r4
 801fe00:	bd70      	pop	{r4, r5, r6, pc}
 801fe02:	1cc4      	adds	r4, r0, #3
 801fe04:	f024 0403 	bic.w	r4, r4, #3
 801fe08:	42a0      	cmp	r0, r4
 801fe0a:	d0f8      	beq.n	801fdfe <sbrk_aligned+0x22>
 801fe0c:	1a21      	subs	r1, r4, r0
 801fe0e:	4628      	mov	r0, r5
 801fe10:	f000 fa2a 	bl	8020268 <_sbrk_r>
 801fe14:	3001      	adds	r0, #1
 801fe16:	d1f2      	bne.n	801fdfe <sbrk_aligned+0x22>
 801fe18:	e7ef      	b.n	801fdfa <sbrk_aligned+0x1e>
 801fe1a:	bf00      	nop
 801fe1c:	20024ef0 	.word	0x20024ef0

0801fe20 <_malloc_r>:
 801fe20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe24:	1ccd      	adds	r5, r1, #3
 801fe26:	f025 0503 	bic.w	r5, r5, #3
 801fe2a:	3508      	adds	r5, #8
 801fe2c:	2d0c      	cmp	r5, #12
 801fe2e:	bf38      	it	cc
 801fe30:	250c      	movcc	r5, #12
 801fe32:	2d00      	cmp	r5, #0
 801fe34:	4606      	mov	r6, r0
 801fe36:	db01      	blt.n	801fe3c <_malloc_r+0x1c>
 801fe38:	42a9      	cmp	r1, r5
 801fe3a:	d904      	bls.n	801fe46 <_malloc_r+0x26>
 801fe3c:	230c      	movs	r3, #12
 801fe3e:	6033      	str	r3, [r6, #0]
 801fe40:	2000      	movs	r0, #0
 801fe42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ff1c <_malloc_r+0xfc>
 801fe4a:	f000 f869 	bl	801ff20 <__malloc_lock>
 801fe4e:	f8d8 3000 	ldr.w	r3, [r8]
 801fe52:	461c      	mov	r4, r3
 801fe54:	bb44      	cbnz	r4, 801fea8 <_malloc_r+0x88>
 801fe56:	4629      	mov	r1, r5
 801fe58:	4630      	mov	r0, r6
 801fe5a:	f7ff ffbf 	bl	801fddc <sbrk_aligned>
 801fe5e:	1c43      	adds	r3, r0, #1
 801fe60:	4604      	mov	r4, r0
 801fe62:	d158      	bne.n	801ff16 <_malloc_r+0xf6>
 801fe64:	f8d8 4000 	ldr.w	r4, [r8]
 801fe68:	4627      	mov	r7, r4
 801fe6a:	2f00      	cmp	r7, #0
 801fe6c:	d143      	bne.n	801fef6 <_malloc_r+0xd6>
 801fe6e:	2c00      	cmp	r4, #0
 801fe70:	d04b      	beq.n	801ff0a <_malloc_r+0xea>
 801fe72:	6823      	ldr	r3, [r4, #0]
 801fe74:	4639      	mov	r1, r7
 801fe76:	4630      	mov	r0, r6
 801fe78:	eb04 0903 	add.w	r9, r4, r3
 801fe7c:	f000 f9f4 	bl	8020268 <_sbrk_r>
 801fe80:	4581      	cmp	r9, r0
 801fe82:	d142      	bne.n	801ff0a <_malloc_r+0xea>
 801fe84:	6821      	ldr	r1, [r4, #0]
 801fe86:	1a6d      	subs	r5, r5, r1
 801fe88:	4629      	mov	r1, r5
 801fe8a:	4630      	mov	r0, r6
 801fe8c:	f7ff ffa6 	bl	801fddc <sbrk_aligned>
 801fe90:	3001      	adds	r0, #1
 801fe92:	d03a      	beq.n	801ff0a <_malloc_r+0xea>
 801fe94:	6823      	ldr	r3, [r4, #0]
 801fe96:	442b      	add	r3, r5
 801fe98:	6023      	str	r3, [r4, #0]
 801fe9a:	f8d8 3000 	ldr.w	r3, [r8]
 801fe9e:	685a      	ldr	r2, [r3, #4]
 801fea0:	bb62      	cbnz	r2, 801fefc <_malloc_r+0xdc>
 801fea2:	f8c8 7000 	str.w	r7, [r8]
 801fea6:	e00f      	b.n	801fec8 <_malloc_r+0xa8>
 801fea8:	6822      	ldr	r2, [r4, #0]
 801feaa:	1b52      	subs	r2, r2, r5
 801feac:	d420      	bmi.n	801fef0 <_malloc_r+0xd0>
 801feae:	2a0b      	cmp	r2, #11
 801feb0:	d917      	bls.n	801fee2 <_malloc_r+0xc2>
 801feb2:	1961      	adds	r1, r4, r5
 801feb4:	42a3      	cmp	r3, r4
 801feb6:	6025      	str	r5, [r4, #0]
 801feb8:	bf18      	it	ne
 801feba:	6059      	strne	r1, [r3, #4]
 801febc:	6863      	ldr	r3, [r4, #4]
 801febe:	bf08      	it	eq
 801fec0:	f8c8 1000 	streq.w	r1, [r8]
 801fec4:	5162      	str	r2, [r4, r5]
 801fec6:	604b      	str	r3, [r1, #4]
 801fec8:	4630      	mov	r0, r6
 801feca:	f000 f82f 	bl	801ff2c <__malloc_unlock>
 801fece:	f104 000b 	add.w	r0, r4, #11
 801fed2:	1d23      	adds	r3, r4, #4
 801fed4:	f020 0007 	bic.w	r0, r0, #7
 801fed8:	1ac2      	subs	r2, r0, r3
 801feda:	bf1c      	itt	ne
 801fedc:	1a1b      	subne	r3, r3, r0
 801fede:	50a3      	strne	r3, [r4, r2]
 801fee0:	e7af      	b.n	801fe42 <_malloc_r+0x22>
 801fee2:	6862      	ldr	r2, [r4, #4]
 801fee4:	42a3      	cmp	r3, r4
 801fee6:	bf0c      	ite	eq
 801fee8:	f8c8 2000 	streq.w	r2, [r8]
 801feec:	605a      	strne	r2, [r3, #4]
 801feee:	e7eb      	b.n	801fec8 <_malloc_r+0xa8>
 801fef0:	4623      	mov	r3, r4
 801fef2:	6864      	ldr	r4, [r4, #4]
 801fef4:	e7ae      	b.n	801fe54 <_malloc_r+0x34>
 801fef6:	463c      	mov	r4, r7
 801fef8:	687f      	ldr	r7, [r7, #4]
 801fefa:	e7b6      	b.n	801fe6a <_malloc_r+0x4a>
 801fefc:	461a      	mov	r2, r3
 801fefe:	685b      	ldr	r3, [r3, #4]
 801ff00:	42a3      	cmp	r3, r4
 801ff02:	d1fb      	bne.n	801fefc <_malloc_r+0xdc>
 801ff04:	2300      	movs	r3, #0
 801ff06:	6053      	str	r3, [r2, #4]
 801ff08:	e7de      	b.n	801fec8 <_malloc_r+0xa8>
 801ff0a:	230c      	movs	r3, #12
 801ff0c:	6033      	str	r3, [r6, #0]
 801ff0e:	4630      	mov	r0, r6
 801ff10:	f000 f80c 	bl	801ff2c <__malloc_unlock>
 801ff14:	e794      	b.n	801fe40 <_malloc_r+0x20>
 801ff16:	6005      	str	r5, [r0, #0]
 801ff18:	e7d6      	b.n	801fec8 <_malloc_r+0xa8>
 801ff1a:	bf00      	nop
 801ff1c:	20024ef4 	.word	0x20024ef4

0801ff20 <__malloc_lock>:
 801ff20:	4801      	ldr	r0, [pc, #4]	@ (801ff28 <__malloc_lock+0x8>)
 801ff22:	f000 b9ee 	b.w	8020302 <__retarget_lock_acquire_recursive>
 801ff26:	bf00      	nop
 801ff28:	20025038 	.word	0x20025038

0801ff2c <__malloc_unlock>:
 801ff2c:	4801      	ldr	r0, [pc, #4]	@ (801ff34 <__malloc_unlock+0x8>)
 801ff2e:	f000 b9e9 	b.w	8020304 <__retarget_lock_release_recursive>
 801ff32:	bf00      	nop
 801ff34:	20025038 	.word	0x20025038

0801ff38 <std>:
 801ff38:	2300      	movs	r3, #0
 801ff3a:	b510      	push	{r4, lr}
 801ff3c:	4604      	mov	r4, r0
 801ff3e:	e9c0 3300 	strd	r3, r3, [r0]
 801ff42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ff46:	6083      	str	r3, [r0, #8]
 801ff48:	8181      	strh	r1, [r0, #12]
 801ff4a:	6643      	str	r3, [r0, #100]	@ 0x64
 801ff4c:	81c2      	strh	r2, [r0, #14]
 801ff4e:	6183      	str	r3, [r0, #24]
 801ff50:	4619      	mov	r1, r3
 801ff52:	2208      	movs	r2, #8
 801ff54:	305c      	adds	r0, #92	@ 0x5c
 801ff56:	f000 f906 	bl	8020166 <memset>
 801ff5a:	4b0d      	ldr	r3, [pc, #52]	@ (801ff90 <std+0x58>)
 801ff5c:	6263      	str	r3, [r4, #36]	@ 0x24
 801ff5e:	4b0d      	ldr	r3, [pc, #52]	@ (801ff94 <std+0x5c>)
 801ff60:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ff62:	4b0d      	ldr	r3, [pc, #52]	@ (801ff98 <std+0x60>)
 801ff64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ff66:	4b0d      	ldr	r3, [pc, #52]	@ (801ff9c <std+0x64>)
 801ff68:	6323      	str	r3, [r4, #48]	@ 0x30
 801ff6a:	4b0d      	ldr	r3, [pc, #52]	@ (801ffa0 <std+0x68>)
 801ff6c:	6224      	str	r4, [r4, #32]
 801ff6e:	429c      	cmp	r4, r3
 801ff70:	d006      	beq.n	801ff80 <std+0x48>
 801ff72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ff76:	4294      	cmp	r4, r2
 801ff78:	d002      	beq.n	801ff80 <std+0x48>
 801ff7a:	33d0      	adds	r3, #208	@ 0xd0
 801ff7c:	429c      	cmp	r4, r3
 801ff7e:	d105      	bne.n	801ff8c <std+0x54>
 801ff80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ff84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff88:	f000 b9ba 	b.w	8020300 <__retarget_lock_init_recursive>
 801ff8c:	bd10      	pop	{r4, pc}
 801ff8e:	bf00      	nop
 801ff90:	080200e1 	.word	0x080200e1
 801ff94:	08020103 	.word	0x08020103
 801ff98:	0802013b 	.word	0x0802013b
 801ff9c:	0802015f 	.word	0x0802015f
 801ffa0:	20024ef8 	.word	0x20024ef8

0801ffa4 <stdio_exit_handler>:
 801ffa4:	4a02      	ldr	r2, [pc, #8]	@ (801ffb0 <stdio_exit_handler+0xc>)
 801ffa6:	4903      	ldr	r1, [pc, #12]	@ (801ffb4 <stdio_exit_handler+0x10>)
 801ffa8:	4803      	ldr	r0, [pc, #12]	@ (801ffb8 <stdio_exit_handler+0x14>)
 801ffaa:	f000 b87b 	b.w	80200a4 <_fwalk_sglue>
 801ffae:	bf00      	nop
 801ffb0:	20000064 	.word	0x20000064
 801ffb4:	08020b19 	.word	0x08020b19
 801ffb8:	20000074 	.word	0x20000074

0801ffbc <cleanup_stdio>:
 801ffbc:	6841      	ldr	r1, [r0, #4]
 801ffbe:	4b0c      	ldr	r3, [pc, #48]	@ (801fff0 <cleanup_stdio+0x34>)
 801ffc0:	4299      	cmp	r1, r3
 801ffc2:	b510      	push	{r4, lr}
 801ffc4:	4604      	mov	r4, r0
 801ffc6:	d001      	beq.n	801ffcc <cleanup_stdio+0x10>
 801ffc8:	f000 fda6 	bl	8020b18 <_fflush_r>
 801ffcc:	68a1      	ldr	r1, [r4, #8]
 801ffce:	4b09      	ldr	r3, [pc, #36]	@ (801fff4 <cleanup_stdio+0x38>)
 801ffd0:	4299      	cmp	r1, r3
 801ffd2:	d002      	beq.n	801ffda <cleanup_stdio+0x1e>
 801ffd4:	4620      	mov	r0, r4
 801ffd6:	f000 fd9f 	bl	8020b18 <_fflush_r>
 801ffda:	68e1      	ldr	r1, [r4, #12]
 801ffdc:	4b06      	ldr	r3, [pc, #24]	@ (801fff8 <cleanup_stdio+0x3c>)
 801ffde:	4299      	cmp	r1, r3
 801ffe0:	d004      	beq.n	801ffec <cleanup_stdio+0x30>
 801ffe2:	4620      	mov	r0, r4
 801ffe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffe8:	f000 bd96 	b.w	8020b18 <_fflush_r>
 801ffec:	bd10      	pop	{r4, pc}
 801ffee:	bf00      	nop
 801fff0:	20024ef8 	.word	0x20024ef8
 801fff4:	20024f60 	.word	0x20024f60
 801fff8:	20024fc8 	.word	0x20024fc8

0801fffc <global_stdio_init.part.0>:
 801fffc:	b510      	push	{r4, lr}
 801fffe:	4b0b      	ldr	r3, [pc, #44]	@ (802002c <global_stdio_init.part.0+0x30>)
 8020000:	4c0b      	ldr	r4, [pc, #44]	@ (8020030 <global_stdio_init.part.0+0x34>)
 8020002:	4a0c      	ldr	r2, [pc, #48]	@ (8020034 <global_stdio_init.part.0+0x38>)
 8020004:	601a      	str	r2, [r3, #0]
 8020006:	4620      	mov	r0, r4
 8020008:	2200      	movs	r2, #0
 802000a:	2104      	movs	r1, #4
 802000c:	f7ff ff94 	bl	801ff38 <std>
 8020010:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020014:	2201      	movs	r2, #1
 8020016:	2109      	movs	r1, #9
 8020018:	f7ff ff8e 	bl	801ff38 <std>
 802001c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020020:	2202      	movs	r2, #2
 8020022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020026:	2112      	movs	r1, #18
 8020028:	f7ff bf86 	b.w	801ff38 <std>
 802002c:	20025030 	.word	0x20025030
 8020030:	20024ef8 	.word	0x20024ef8
 8020034:	0801ffa5 	.word	0x0801ffa5

08020038 <__sfp_lock_acquire>:
 8020038:	4801      	ldr	r0, [pc, #4]	@ (8020040 <__sfp_lock_acquire+0x8>)
 802003a:	f000 b962 	b.w	8020302 <__retarget_lock_acquire_recursive>
 802003e:	bf00      	nop
 8020040:	2002503a 	.word	0x2002503a

08020044 <__sfp_lock_release>:
 8020044:	4801      	ldr	r0, [pc, #4]	@ (802004c <__sfp_lock_release+0x8>)
 8020046:	f000 b95d 	b.w	8020304 <__retarget_lock_release_recursive>
 802004a:	bf00      	nop
 802004c:	2002503a 	.word	0x2002503a

08020050 <__sinit>:
 8020050:	b510      	push	{r4, lr}
 8020052:	4604      	mov	r4, r0
 8020054:	f7ff fff0 	bl	8020038 <__sfp_lock_acquire>
 8020058:	6a23      	ldr	r3, [r4, #32]
 802005a:	b11b      	cbz	r3, 8020064 <__sinit+0x14>
 802005c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020060:	f7ff bff0 	b.w	8020044 <__sfp_lock_release>
 8020064:	4b04      	ldr	r3, [pc, #16]	@ (8020078 <__sinit+0x28>)
 8020066:	6223      	str	r3, [r4, #32]
 8020068:	4b04      	ldr	r3, [pc, #16]	@ (802007c <__sinit+0x2c>)
 802006a:	681b      	ldr	r3, [r3, #0]
 802006c:	2b00      	cmp	r3, #0
 802006e:	d1f5      	bne.n	802005c <__sinit+0xc>
 8020070:	f7ff ffc4 	bl	801fffc <global_stdio_init.part.0>
 8020074:	e7f2      	b.n	802005c <__sinit+0xc>
 8020076:	bf00      	nop
 8020078:	0801ffbd 	.word	0x0801ffbd
 802007c:	20025030 	.word	0x20025030

08020080 <fiprintf>:
 8020080:	b40e      	push	{r1, r2, r3}
 8020082:	b503      	push	{r0, r1, lr}
 8020084:	4601      	mov	r1, r0
 8020086:	ab03      	add	r3, sp, #12
 8020088:	4805      	ldr	r0, [pc, #20]	@ (80200a0 <fiprintf+0x20>)
 802008a:	f853 2b04 	ldr.w	r2, [r3], #4
 802008e:	6800      	ldr	r0, [r0, #0]
 8020090:	9301      	str	r3, [sp, #4]
 8020092:	f000 fa17 	bl	80204c4 <_vfiprintf_r>
 8020096:	b002      	add	sp, #8
 8020098:	f85d eb04 	ldr.w	lr, [sp], #4
 802009c:	b003      	add	sp, #12
 802009e:	4770      	bx	lr
 80200a0:	20000070 	.word	0x20000070

080200a4 <_fwalk_sglue>:
 80200a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80200a8:	4607      	mov	r7, r0
 80200aa:	4688      	mov	r8, r1
 80200ac:	4614      	mov	r4, r2
 80200ae:	2600      	movs	r6, #0
 80200b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80200b4:	f1b9 0901 	subs.w	r9, r9, #1
 80200b8:	d505      	bpl.n	80200c6 <_fwalk_sglue+0x22>
 80200ba:	6824      	ldr	r4, [r4, #0]
 80200bc:	2c00      	cmp	r4, #0
 80200be:	d1f7      	bne.n	80200b0 <_fwalk_sglue+0xc>
 80200c0:	4630      	mov	r0, r6
 80200c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80200c6:	89ab      	ldrh	r3, [r5, #12]
 80200c8:	2b01      	cmp	r3, #1
 80200ca:	d907      	bls.n	80200dc <_fwalk_sglue+0x38>
 80200cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80200d0:	3301      	adds	r3, #1
 80200d2:	d003      	beq.n	80200dc <_fwalk_sglue+0x38>
 80200d4:	4629      	mov	r1, r5
 80200d6:	4638      	mov	r0, r7
 80200d8:	47c0      	blx	r8
 80200da:	4306      	orrs	r6, r0
 80200dc:	3568      	adds	r5, #104	@ 0x68
 80200de:	e7e9      	b.n	80200b4 <_fwalk_sglue+0x10>

080200e0 <__sread>:
 80200e0:	b510      	push	{r4, lr}
 80200e2:	460c      	mov	r4, r1
 80200e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80200e8:	f000 f898 	bl	802021c <_read_r>
 80200ec:	2800      	cmp	r0, #0
 80200ee:	bfab      	itete	ge
 80200f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80200f2:	89a3      	ldrhlt	r3, [r4, #12]
 80200f4:	181b      	addge	r3, r3, r0
 80200f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80200fa:	bfac      	ite	ge
 80200fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80200fe:	81a3      	strhlt	r3, [r4, #12]
 8020100:	bd10      	pop	{r4, pc}

08020102 <__swrite>:
 8020102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020106:	461f      	mov	r7, r3
 8020108:	898b      	ldrh	r3, [r1, #12]
 802010a:	05db      	lsls	r3, r3, #23
 802010c:	4605      	mov	r5, r0
 802010e:	460c      	mov	r4, r1
 8020110:	4616      	mov	r6, r2
 8020112:	d505      	bpl.n	8020120 <__swrite+0x1e>
 8020114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020118:	2302      	movs	r3, #2
 802011a:	2200      	movs	r2, #0
 802011c:	f000 f86c 	bl	80201f8 <_lseek_r>
 8020120:	89a3      	ldrh	r3, [r4, #12]
 8020122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802012a:	81a3      	strh	r3, [r4, #12]
 802012c:	4632      	mov	r2, r6
 802012e:	463b      	mov	r3, r7
 8020130:	4628      	mov	r0, r5
 8020132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020136:	f000 b8a7 	b.w	8020288 <_write_r>

0802013a <__sseek>:
 802013a:	b510      	push	{r4, lr}
 802013c:	460c      	mov	r4, r1
 802013e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020142:	f000 f859 	bl	80201f8 <_lseek_r>
 8020146:	1c43      	adds	r3, r0, #1
 8020148:	89a3      	ldrh	r3, [r4, #12]
 802014a:	bf15      	itete	ne
 802014c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802014e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020156:	81a3      	strheq	r3, [r4, #12]
 8020158:	bf18      	it	ne
 802015a:	81a3      	strhne	r3, [r4, #12]
 802015c:	bd10      	pop	{r4, pc}

0802015e <__sclose>:
 802015e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020162:	f000 b839 	b.w	80201d8 <_close_r>

08020166 <memset>:
 8020166:	4402      	add	r2, r0
 8020168:	4603      	mov	r3, r0
 802016a:	4293      	cmp	r3, r2
 802016c:	d100      	bne.n	8020170 <memset+0xa>
 802016e:	4770      	bx	lr
 8020170:	f803 1b01 	strb.w	r1, [r3], #1
 8020174:	e7f9      	b.n	802016a <memset+0x4>

08020176 <_raise_r>:
 8020176:	291f      	cmp	r1, #31
 8020178:	b538      	push	{r3, r4, r5, lr}
 802017a:	4605      	mov	r5, r0
 802017c:	460c      	mov	r4, r1
 802017e:	d904      	bls.n	802018a <_raise_r+0x14>
 8020180:	2316      	movs	r3, #22
 8020182:	6003      	str	r3, [r0, #0]
 8020184:	f04f 30ff 	mov.w	r0, #4294967295
 8020188:	bd38      	pop	{r3, r4, r5, pc}
 802018a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802018c:	b112      	cbz	r2, 8020194 <_raise_r+0x1e>
 802018e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020192:	b94b      	cbnz	r3, 80201a8 <_raise_r+0x32>
 8020194:	4628      	mov	r0, r5
 8020196:	f000 f865 	bl	8020264 <_getpid_r>
 802019a:	4622      	mov	r2, r4
 802019c:	4601      	mov	r1, r0
 802019e:	4628      	mov	r0, r5
 80201a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80201a4:	f000 b84c 	b.w	8020240 <_kill_r>
 80201a8:	2b01      	cmp	r3, #1
 80201aa:	d00a      	beq.n	80201c2 <_raise_r+0x4c>
 80201ac:	1c59      	adds	r1, r3, #1
 80201ae:	d103      	bne.n	80201b8 <_raise_r+0x42>
 80201b0:	2316      	movs	r3, #22
 80201b2:	6003      	str	r3, [r0, #0]
 80201b4:	2001      	movs	r0, #1
 80201b6:	e7e7      	b.n	8020188 <_raise_r+0x12>
 80201b8:	2100      	movs	r1, #0
 80201ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80201be:	4620      	mov	r0, r4
 80201c0:	4798      	blx	r3
 80201c2:	2000      	movs	r0, #0
 80201c4:	e7e0      	b.n	8020188 <_raise_r+0x12>
	...

080201c8 <raise>:
 80201c8:	4b02      	ldr	r3, [pc, #8]	@ (80201d4 <raise+0xc>)
 80201ca:	4601      	mov	r1, r0
 80201cc:	6818      	ldr	r0, [r3, #0]
 80201ce:	f7ff bfd2 	b.w	8020176 <_raise_r>
 80201d2:	bf00      	nop
 80201d4:	20000070 	.word	0x20000070

080201d8 <_close_r>:
 80201d8:	b538      	push	{r3, r4, r5, lr}
 80201da:	4d06      	ldr	r5, [pc, #24]	@ (80201f4 <_close_r+0x1c>)
 80201dc:	2300      	movs	r3, #0
 80201de:	4604      	mov	r4, r0
 80201e0:	4608      	mov	r0, r1
 80201e2:	602b      	str	r3, [r5, #0]
 80201e4:	f000 fdd8 	bl	8020d98 <_close>
 80201e8:	1c43      	adds	r3, r0, #1
 80201ea:	d102      	bne.n	80201f2 <_close_r+0x1a>
 80201ec:	682b      	ldr	r3, [r5, #0]
 80201ee:	b103      	cbz	r3, 80201f2 <_close_r+0x1a>
 80201f0:	6023      	str	r3, [r4, #0]
 80201f2:	bd38      	pop	{r3, r4, r5, pc}
 80201f4:	20025034 	.word	0x20025034

080201f8 <_lseek_r>:
 80201f8:	b538      	push	{r3, r4, r5, lr}
 80201fa:	4d07      	ldr	r5, [pc, #28]	@ (8020218 <_lseek_r+0x20>)
 80201fc:	4604      	mov	r4, r0
 80201fe:	4608      	mov	r0, r1
 8020200:	4611      	mov	r1, r2
 8020202:	2200      	movs	r2, #0
 8020204:	602a      	str	r2, [r5, #0]
 8020206:	461a      	mov	r2, r3
 8020208:	f000 fdee 	bl	8020de8 <_lseek>
 802020c:	1c43      	adds	r3, r0, #1
 802020e:	d102      	bne.n	8020216 <_lseek_r+0x1e>
 8020210:	682b      	ldr	r3, [r5, #0]
 8020212:	b103      	cbz	r3, 8020216 <_lseek_r+0x1e>
 8020214:	6023      	str	r3, [r4, #0]
 8020216:	bd38      	pop	{r3, r4, r5, pc}
 8020218:	20025034 	.word	0x20025034

0802021c <_read_r>:
 802021c:	b538      	push	{r3, r4, r5, lr}
 802021e:	4d07      	ldr	r5, [pc, #28]	@ (802023c <_read_r+0x20>)
 8020220:	4604      	mov	r4, r0
 8020222:	4608      	mov	r0, r1
 8020224:	4611      	mov	r1, r2
 8020226:	2200      	movs	r2, #0
 8020228:	602a      	str	r2, [r5, #0]
 802022a:	461a      	mov	r2, r3
 802022c:	f000 fde4 	bl	8020df8 <_read>
 8020230:	1c43      	adds	r3, r0, #1
 8020232:	d102      	bne.n	802023a <_read_r+0x1e>
 8020234:	682b      	ldr	r3, [r5, #0]
 8020236:	b103      	cbz	r3, 802023a <_read_r+0x1e>
 8020238:	6023      	str	r3, [r4, #0]
 802023a:	bd38      	pop	{r3, r4, r5, pc}
 802023c:	20025034 	.word	0x20025034

08020240 <_kill_r>:
 8020240:	b538      	push	{r3, r4, r5, lr}
 8020242:	4d07      	ldr	r5, [pc, #28]	@ (8020260 <_kill_r+0x20>)
 8020244:	2300      	movs	r3, #0
 8020246:	4604      	mov	r4, r0
 8020248:	4608      	mov	r0, r1
 802024a:	4611      	mov	r1, r2
 802024c:	602b      	str	r3, [r5, #0]
 802024e:	f000 fdc3 	bl	8020dd8 <_kill>
 8020252:	1c43      	adds	r3, r0, #1
 8020254:	d102      	bne.n	802025c <_kill_r+0x1c>
 8020256:	682b      	ldr	r3, [r5, #0]
 8020258:	b103      	cbz	r3, 802025c <_kill_r+0x1c>
 802025a:	6023      	str	r3, [r4, #0]
 802025c:	bd38      	pop	{r3, r4, r5, pc}
 802025e:	bf00      	nop
 8020260:	20025034 	.word	0x20025034

08020264 <_getpid_r>:
 8020264:	f000 bda8 	b.w	8020db8 <_getpid>

08020268 <_sbrk_r>:
 8020268:	b538      	push	{r3, r4, r5, lr}
 802026a:	4d06      	ldr	r5, [pc, #24]	@ (8020284 <_sbrk_r+0x1c>)
 802026c:	2300      	movs	r3, #0
 802026e:	4604      	mov	r4, r0
 8020270:	4608      	mov	r0, r1
 8020272:	602b      	str	r3, [r5, #0]
 8020274:	f000 fdc8 	bl	8020e08 <_sbrk>
 8020278:	1c43      	adds	r3, r0, #1
 802027a:	d102      	bne.n	8020282 <_sbrk_r+0x1a>
 802027c:	682b      	ldr	r3, [r5, #0]
 802027e:	b103      	cbz	r3, 8020282 <_sbrk_r+0x1a>
 8020280:	6023      	str	r3, [r4, #0]
 8020282:	bd38      	pop	{r3, r4, r5, pc}
 8020284:	20025034 	.word	0x20025034

08020288 <_write_r>:
 8020288:	b538      	push	{r3, r4, r5, lr}
 802028a:	4d07      	ldr	r5, [pc, #28]	@ (80202a8 <_write_r+0x20>)
 802028c:	4604      	mov	r4, r0
 802028e:	4608      	mov	r0, r1
 8020290:	4611      	mov	r1, r2
 8020292:	2200      	movs	r2, #0
 8020294:	602a      	str	r2, [r5, #0]
 8020296:	461a      	mov	r2, r3
 8020298:	f000 fdc4 	bl	8020e24 <_write>
 802029c:	1c43      	adds	r3, r0, #1
 802029e:	d102      	bne.n	80202a6 <_write_r+0x1e>
 80202a0:	682b      	ldr	r3, [r5, #0]
 80202a2:	b103      	cbz	r3, 80202a6 <_write_r+0x1e>
 80202a4:	6023      	str	r3, [r4, #0]
 80202a6:	bd38      	pop	{r3, r4, r5, pc}
 80202a8:	20025034 	.word	0x20025034

080202ac <__errno>:
 80202ac:	4b01      	ldr	r3, [pc, #4]	@ (80202b4 <__errno+0x8>)
 80202ae:	6818      	ldr	r0, [r3, #0]
 80202b0:	4770      	bx	lr
 80202b2:	bf00      	nop
 80202b4:	20000070 	.word	0x20000070

080202b8 <__libc_init_array>:
 80202b8:	b570      	push	{r4, r5, r6, lr}
 80202ba:	4d0d      	ldr	r5, [pc, #52]	@ (80202f0 <__libc_init_array+0x38>)
 80202bc:	4c0d      	ldr	r4, [pc, #52]	@ (80202f4 <__libc_init_array+0x3c>)
 80202be:	1b64      	subs	r4, r4, r5
 80202c0:	10a4      	asrs	r4, r4, #2
 80202c2:	2600      	movs	r6, #0
 80202c4:	42a6      	cmp	r6, r4
 80202c6:	d109      	bne.n	80202dc <__libc_init_array+0x24>
 80202c8:	4d0b      	ldr	r5, [pc, #44]	@ (80202f8 <__libc_init_array+0x40>)
 80202ca:	4c0c      	ldr	r4, [pc, #48]	@ (80202fc <__libc_init_array+0x44>)
 80202cc:	f000 fdb4 	bl	8020e38 <_init>
 80202d0:	1b64      	subs	r4, r4, r5
 80202d2:	10a4      	asrs	r4, r4, #2
 80202d4:	2600      	movs	r6, #0
 80202d6:	42a6      	cmp	r6, r4
 80202d8:	d105      	bne.n	80202e6 <__libc_init_array+0x2e>
 80202da:	bd70      	pop	{r4, r5, r6, pc}
 80202dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80202e0:	4798      	blx	r3
 80202e2:	3601      	adds	r6, #1
 80202e4:	e7ee      	b.n	80202c4 <__libc_init_array+0xc>
 80202e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80202ea:	4798      	blx	r3
 80202ec:	3601      	adds	r6, #1
 80202ee:	e7f2      	b.n	80202d6 <__libc_init_array+0x1e>
 80202f0:	08034074 	.word	0x08034074
 80202f4:	08034074 	.word	0x08034074
 80202f8:	08034074 	.word	0x08034074
 80202fc:	08034084 	.word	0x08034084

08020300 <__retarget_lock_init_recursive>:
 8020300:	4770      	bx	lr

08020302 <__retarget_lock_acquire_recursive>:
 8020302:	4770      	bx	lr

08020304 <__retarget_lock_release_recursive>:
 8020304:	4770      	bx	lr

08020306 <memcpy>:
 8020306:	440a      	add	r2, r1
 8020308:	4291      	cmp	r1, r2
 802030a:	f100 33ff 	add.w	r3, r0, #4294967295
 802030e:	d100      	bne.n	8020312 <memcpy+0xc>
 8020310:	4770      	bx	lr
 8020312:	b510      	push	{r4, lr}
 8020314:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020318:	f803 4f01 	strb.w	r4, [r3, #1]!
 802031c:	4291      	cmp	r1, r2
 802031e:	d1f9      	bne.n	8020314 <memcpy+0xe>
 8020320:	bd10      	pop	{r4, pc}
	...

08020324 <__register_exitproc>:
 8020324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020328:	4d27      	ldr	r5, [pc, #156]	@ (80203c8 <__register_exitproc+0xa4>)
 802032a:	4607      	mov	r7, r0
 802032c:	6828      	ldr	r0, [r5, #0]
 802032e:	4691      	mov	r9, r2
 8020330:	460e      	mov	r6, r1
 8020332:	4698      	mov	r8, r3
 8020334:	f7ff ffe5 	bl	8020302 <__retarget_lock_acquire_recursive>
 8020338:	4a24      	ldr	r2, [pc, #144]	@ (80203cc <__register_exitproc+0xa8>)
 802033a:	6814      	ldr	r4, [r2, #0]
 802033c:	b93c      	cbnz	r4, 802034e <__register_exitproc+0x2a>
 802033e:	4b24      	ldr	r3, [pc, #144]	@ (80203d0 <__register_exitproc+0xac>)
 8020340:	6013      	str	r3, [r2, #0]
 8020342:	4a24      	ldr	r2, [pc, #144]	@ (80203d4 <__register_exitproc+0xb0>)
 8020344:	b112      	cbz	r2, 802034c <__register_exitproc+0x28>
 8020346:	6812      	ldr	r2, [r2, #0]
 8020348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802034c:	4c20      	ldr	r4, [pc, #128]	@ (80203d0 <__register_exitproc+0xac>)
 802034e:	6863      	ldr	r3, [r4, #4]
 8020350:	2b1f      	cmp	r3, #31
 8020352:	dd06      	ble.n	8020362 <__register_exitproc+0x3e>
 8020354:	6828      	ldr	r0, [r5, #0]
 8020356:	f7ff ffd5 	bl	8020304 <__retarget_lock_release_recursive>
 802035a:	f04f 30ff 	mov.w	r0, #4294967295
 802035e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020362:	b32f      	cbz	r7, 80203b0 <__register_exitproc+0x8c>
 8020364:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8020368:	b968      	cbnz	r0, 8020386 <__register_exitproc+0x62>
 802036a:	4b1b      	ldr	r3, [pc, #108]	@ (80203d8 <__register_exitproc+0xb4>)
 802036c:	2b00      	cmp	r3, #0
 802036e:	d0f1      	beq.n	8020354 <__register_exitproc+0x30>
 8020370:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8020374:	f7ff fd22 	bl	801fdbc <malloc>
 8020378:	2800      	cmp	r0, #0
 802037a:	d0eb      	beq.n	8020354 <__register_exitproc+0x30>
 802037c:	2300      	movs	r3, #0
 802037e:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8020382:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8020386:	6863      	ldr	r3, [r4, #4]
 8020388:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802038c:	2201      	movs	r2, #1
 802038e:	409a      	lsls	r2, r3
 8020390:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020394:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8020398:	4313      	orrs	r3, r2
 802039a:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802039e:	2f02      	cmp	r7, #2
 80203a0:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80203a4:	bf02      	ittt	eq
 80203a6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80203aa:	4313      	orreq	r3, r2
 80203ac:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80203b0:	6863      	ldr	r3, [r4, #4]
 80203b2:	6828      	ldr	r0, [r5, #0]
 80203b4:	1c5a      	adds	r2, r3, #1
 80203b6:	3302      	adds	r3, #2
 80203b8:	6062      	str	r2, [r4, #4]
 80203ba:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80203be:	f7ff ffa1 	bl	8020304 <__retarget_lock_release_recursive>
 80203c2:	2000      	movs	r0, #0
 80203c4:	e7cb      	b.n	802035e <__register_exitproc+0x3a>
 80203c6:	bf00      	nop
 80203c8:	200000c0 	.word	0x200000c0
 80203cc:	200250c8 	.word	0x200250c8
 80203d0:	2002503c 	.word	0x2002503c
 80203d4:	00000000 	.word	0x00000000
 80203d8:	0801fdbd 	.word	0x0801fdbd

080203dc <_free_r>:
 80203dc:	b538      	push	{r3, r4, r5, lr}
 80203de:	4605      	mov	r5, r0
 80203e0:	2900      	cmp	r1, #0
 80203e2:	d041      	beq.n	8020468 <_free_r+0x8c>
 80203e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80203e8:	1f0c      	subs	r4, r1, #4
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	bfb8      	it	lt
 80203ee:	18e4      	addlt	r4, r4, r3
 80203f0:	f7ff fd96 	bl	801ff20 <__malloc_lock>
 80203f4:	4a1d      	ldr	r2, [pc, #116]	@ (802046c <_free_r+0x90>)
 80203f6:	6813      	ldr	r3, [r2, #0]
 80203f8:	b933      	cbnz	r3, 8020408 <_free_r+0x2c>
 80203fa:	6063      	str	r3, [r4, #4]
 80203fc:	6014      	str	r4, [r2, #0]
 80203fe:	4628      	mov	r0, r5
 8020400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020404:	f7ff bd92 	b.w	801ff2c <__malloc_unlock>
 8020408:	42a3      	cmp	r3, r4
 802040a:	d908      	bls.n	802041e <_free_r+0x42>
 802040c:	6820      	ldr	r0, [r4, #0]
 802040e:	1821      	adds	r1, r4, r0
 8020410:	428b      	cmp	r3, r1
 8020412:	bf01      	itttt	eq
 8020414:	6819      	ldreq	r1, [r3, #0]
 8020416:	685b      	ldreq	r3, [r3, #4]
 8020418:	1809      	addeq	r1, r1, r0
 802041a:	6021      	streq	r1, [r4, #0]
 802041c:	e7ed      	b.n	80203fa <_free_r+0x1e>
 802041e:	461a      	mov	r2, r3
 8020420:	685b      	ldr	r3, [r3, #4]
 8020422:	b10b      	cbz	r3, 8020428 <_free_r+0x4c>
 8020424:	42a3      	cmp	r3, r4
 8020426:	d9fa      	bls.n	802041e <_free_r+0x42>
 8020428:	6811      	ldr	r1, [r2, #0]
 802042a:	1850      	adds	r0, r2, r1
 802042c:	42a0      	cmp	r0, r4
 802042e:	d10b      	bne.n	8020448 <_free_r+0x6c>
 8020430:	6820      	ldr	r0, [r4, #0]
 8020432:	4401      	add	r1, r0
 8020434:	1850      	adds	r0, r2, r1
 8020436:	4283      	cmp	r3, r0
 8020438:	6011      	str	r1, [r2, #0]
 802043a:	d1e0      	bne.n	80203fe <_free_r+0x22>
 802043c:	6818      	ldr	r0, [r3, #0]
 802043e:	685b      	ldr	r3, [r3, #4]
 8020440:	6053      	str	r3, [r2, #4]
 8020442:	4408      	add	r0, r1
 8020444:	6010      	str	r0, [r2, #0]
 8020446:	e7da      	b.n	80203fe <_free_r+0x22>
 8020448:	d902      	bls.n	8020450 <_free_r+0x74>
 802044a:	230c      	movs	r3, #12
 802044c:	602b      	str	r3, [r5, #0]
 802044e:	e7d6      	b.n	80203fe <_free_r+0x22>
 8020450:	6820      	ldr	r0, [r4, #0]
 8020452:	1821      	adds	r1, r4, r0
 8020454:	428b      	cmp	r3, r1
 8020456:	bf04      	itt	eq
 8020458:	6819      	ldreq	r1, [r3, #0]
 802045a:	685b      	ldreq	r3, [r3, #4]
 802045c:	6063      	str	r3, [r4, #4]
 802045e:	bf04      	itt	eq
 8020460:	1809      	addeq	r1, r1, r0
 8020462:	6021      	streq	r1, [r4, #0]
 8020464:	6054      	str	r4, [r2, #4]
 8020466:	e7ca      	b.n	80203fe <_free_r+0x22>
 8020468:	bd38      	pop	{r3, r4, r5, pc}
 802046a:	bf00      	nop
 802046c:	20024ef4 	.word	0x20024ef4

08020470 <__sfputc_r>:
 8020470:	6893      	ldr	r3, [r2, #8]
 8020472:	3b01      	subs	r3, #1
 8020474:	2b00      	cmp	r3, #0
 8020476:	b410      	push	{r4}
 8020478:	6093      	str	r3, [r2, #8]
 802047a:	da08      	bge.n	802048e <__sfputc_r+0x1e>
 802047c:	6994      	ldr	r4, [r2, #24]
 802047e:	42a3      	cmp	r3, r4
 8020480:	db01      	blt.n	8020486 <__sfputc_r+0x16>
 8020482:	290a      	cmp	r1, #10
 8020484:	d103      	bne.n	802048e <__sfputc_r+0x1e>
 8020486:	f85d 4b04 	ldr.w	r4, [sp], #4
 802048a:	f000 bb6d 	b.w	8020b68 <__swbuf_r>
 802048e:	6813      	ldr	r3, [r2, #0]
 8020490:	1c58      	adds	r0, r3, #1
 8020492:	6010      	str	r0, [r2, #0]
 8020494:	7019      	strb	r1, [r3, #0]
 8020496:	4608      	mov	r0, r1
 8020498:	f85d 4b04 	ldr.w	r4, [sp], #4
 802049c:	4770      	bx	lr

0802049e <__sfputs_r>:
 802049e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204a0:	4606      	mov	r6, r0
 80204a2:	460f      	mov	r7, r1
 80204a4:	4614      	mov	r4, r2
 80204a6:	18d5      	adds	r5, r2, r3
 80204a8:	42ac      	cmp	r4, r5
 80204aa:	d101      	bne.n	80204b0 <__sfputs_r+0x12>
 80204ac:	2000      	movs	r0, #0
 80204ae:	e007      	b.n	80204c0 <__sfputs_r+0x22>
 80204b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80204b4:	463a      	mov	r2, r7
 80204b6:	4630      	mov	r0, r6
 80204b8:	f7ff ffda 	bl	8020470 <__sfputc_r>
 80204bc:	1c43      	adds	r3, r0, #1
 80204be:	d1f3      	bne.n	80204a8 <__sfputs_r+0xa>
 80204c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080204c4 <_vfiprintf_r>:
 80204c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204c8:	460d      	mov	r5, r1
 80204ca:	b09d      	sub	sp, #116	@ 0x74
 80204cc:	4614      	mov	r4, r2
 80204ce:	4698      	mov	r8, r3
 80204d0:	4606      	mov	r6, r0
 80204d2:	b118      	cbz	r0, 80204dc <_vfiprintf_r+0x18>
 80204d4:	6a03      	ldr	r3, [r0, #32]
 80204d6:	b90b      	cbnz	r3, 80204dc <_vfiprintf_r+0x18>
 80204d8:	f7ff fdba 	bl	8020050 <__sinit>
 80204dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80204de:	07d9      	lsls	r1, r3, #31
 80204e0:	d405      	bmi.n	80204ee <_vfiprintf_r+0x2a>
 80204e2:	89ab      	ldrh	r3, [r5, #12]
 80204e4:	059a      	lsls	r2, r3, #22
 80204e6:	d402      	bmi.n	80204ee <_vfiprintf_r+0x2a>
 80204e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80204ea:	f7ff ff0a 	bl	8020302 <__retarget_lock_acquire_recursive>
 80204ee:	89ab      	ldrh	r3, [r5, #12]
 80204f0:	071b      	lsls	r3, r3, #28
 80204f2:	d501      	bpl.n	80204f8 <_vfiprintf_r+0x34>
 80204f4:	692b      	ldr	r3, [r5, #16]
 80204f6:	b99b      	cbnz	r3, 8020520 <_vfiprintf_r+0x5c>
 80204f8:	4629      	mov	r1, r5
 80204fa:	4630      	mov	r0, r6
 80204fc:	f000 fb72 	bl	8020be4 <__swsetup_r>
 8020500:	b170      	cbz	r0, 8020520 <_vfiprintf_r+0x5c>
 8020502:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020504:	07dc      	lsls	r4, r3, #31
 8020506:	d504      	bpl.n	8020512 <_vfiprintf_r+0x4e>
 8020508:	f04f 30ff 	mov.w	r0, #4294967295
 802050c:	b01d      	add	sp, #116	@ 0x74
 802050e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020512:	89ab      	ldrh	r3, [r5, #12]
 8020514:	0598      	lsls	r0, r3, #22
 8020516:	d4f7      	bmi.n	8020508 <_vfiprintf_r+0x44>
 8020518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802051a:	f7ff fef3 	bl	8020304 <__retarget_lock_release_recursive>
 802051e:	e7f3      	b.n	8020508 <_vfiprintf_r+0x44>
 8020520:	2300      	movs	r3, #0
 8020522:	9309      	str	r3, [sp, #36]	@ 0x24
 8020524:	2320      	movs	r3, #32
 8020526:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802052a:	f8cd 800c 	str.w	r8, [sp, #12]
 802052e:	2330      	movs	r3, #48	@ 0x30
 8020530:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80206e0 <_vfiprintf_r+0x21c>
 8020534:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020538:	f04f 0901 	mov.w	r9, #1
 802053c:	4623      	mov	r3, r4
 802053e:	469a      	mov	sl, r3
 8020540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020544:	b10a      	cbz	r2, 802054a <_vfiprintf_r+0x86>
 8020546:	2a25      	cmp	r2, #37	@ 0x25
 8020548:	d1f9      	bne.n	802053e <_vfiprintf_r+0x7a>
 802054a:	ebba 0b04 	subs.w	fp, sl, r4
 802054e:	d00b      	beq.n	8020568 <_vfiprintf_r+0xa4>
 8020550:	465b      	mov	r3, fp
 8020552:	4622      	mov	r2, r4
 8020554:	4629      	mov	r1, r5
 8020556:	4630      	mov	r0, r6
 8020558:	f7ff ffa1 	bl	802049e <__sfputs_r>
 802055c:	3001      	adds	r0, #1
 802055e:	f000 80a7 	beq.w	80206b0 <_vfiprintf_r+0x1ec>
 8020562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020564:	445a      	add	r2, fp
 8020566:	9209      	str	r2, [sp, #36]	@ 0x24
 8020568:	f89a 3000 	ldrb.w	r3, [sl]
 802056c:	2b00      	cmp	r3, #0
 802056e:	f000 809f 	beq.w	80206b0 <_vfiprintf_r+0x1ec>
 8020572:	2300      	movs	r3, #0
 8020574:	f04f 32ff 	mov.w	r2, #4294967295
 8020578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802057c:	f10a 0a01 	add.w	sl, sl, #1
 8020580:	9304      	str	r3, [sp, #16]
 8020582:	9307      	str	r3, [sp, #28]
 8020584:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020588:	931a      	str	r3, [sp, #104]	@ 0x68
 802058a:	4654      	mov	r4, sl
 802058c:	2205      	movs	r2, #5
 802058e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020592:	4853      	ldr	r0, [pc, #332]	@ (80206e0 <_vfiprintf_r+0x21c>)
 8020594:	f7df fe3c 	bl	8000210 <memchr>
 8020598:	9a04      	ldr	r2, [sp, #16]
 802059a:	b9d8      	cbnz	r0, 80205d4 <_vfiprintf_r+0x110>
 802059c:	06d1      	lsls	r1, r2, #27
 802059e:	bf44      	itt	mi
 80205a0:	2320      	movmi	r3, #32
 80205a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80205a6:	0713      	lsls	r3, r2, #28
 80205a8:	bf44      	itt	mi
 80205aa:	232b      	movmi	r3, #43	@ 0x2b
 80205ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80205b0:	f89a 3000 	ldrb.w	r3, [sl]
 80205b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80205b6:	d015      	beq.n	80205e4 <_vfiprintf_r+0x120>
 80205b8:	9a07      	ldr	r2, [sp, #28]
 80205ba:	4654      	mov	r4, sl
 80205bc:	2000      	movs	r0, #0
 80205be:	f04f 0c0a 	mov.w	ip, #10
 80205c2:	4621      	mov	r1, r4
 80205c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80205c8:	3b30      	subs	r3, #48	@ 0x30
 80205ca:	2b09      	cmp	r3, #9
 80205cc:	d94b      	bls.n	8020666 <_vfiprintf_r+0x1a2>
 80205ce:	b1b0      	cbz	r0, 80205fe <_vfiprintf_r+0x13a>
 80205d0:	9207      	str	r2, [sp, #28]
 80205d2:	e014      	b.n	80205fe <_vfiprintf_r+0x13a>
 80205d4:	eba0 0308 	sub.w	r3, r0, r8
 80205d8:	fa09 f303 	lsl.w	r3, r9, r3
 80205dc:	4313      	orrs	r3, r2
 80205de:	9304      	str	r3, [sp, #16]
 80205e0:	46a2      	mov	sl, r4
 80205e2:	e7d2      	b.n	802058a <_vfiprintf_r+0xc6>
 80205e4:	9b03      	ldr	r3, [sp, #12]
 80205e6:	1d19      	adds	r1, r3, #4
 80205e8:	681b      	ldr	r3, [r3, #0]
 80205ea:	9103      	str	r1, [sp, #12]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	bfbb      	ittet	lt
 80205f0:	425b      	neglt	r3, r3
 80205f2:	f042 0202 	orrlt.w	r2, r2, #2
 80205f6:	9307      	strge	r3, [sp, #28]
 80205f8:	9307      	strlt	r3, [sp, #28]
 80205fa:	bfb8      	it	lt
 80205fc:	9204      	strlt	r2, [sp, #16]
 80205fe:	7823      	ldrb	r3, [r4, #0]
 8020600:	2b2e      	cmp	r3, #46	@ 0x2e
 8020602:	d10a      	bne.n	802061a <_vfiprintf_r+0x156>
 8020604:	7863      	ldrb	r3, [r4, #1]
 8020606:	2b2a      	cmp	r3, #42	@ 0x2a
 8020608:	d132      	bne.n	8020670 <_vfiprintf_r+0x1ac>
 802060a:	9b03      	ldr	r3, [sp, #12]
 802060c:	1d1a      	adds	r2, r3, #4
 802060e:	681b      	ldr	r3, [r3, #0]
 8020610:	9203      	str	r2, [sp, #12]
 8020612:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020616:	3402      	adds	r4, #2
 8020618:	9305      	str	r3, [sp, #20]
 802061a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80206f0 <_vfiprintf_r+0x22c>
 802061e:	7821      	ldrb	r1, [r4, #0]
 8020620:	2203      	movs	r2, #3
 8020622:	4650      	mov	r0, sl
 8020624:	f7df fdf4 	bl	8000210 <memchr>
 8020628:	b138      	cbz	r0, 802063a <_vfiprintf_r+0x176>
 802062a:	9b04      	ldr	r3, [sp, #16]
 802062c:	eba0 000a 	sub.w	r0, r0, sl
 8020630:	2240      	movs	r2, #64	@ 0x40
 8020632:	4082      	lsls	r2, r0
 8020634:	4313      	orrs	r3, r2
 8020636:	3401      	adds	r4, #1
 8020638:	9304      	str	r3, [sp, #16]
 802063a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802063e:	4829      	ldr	r0, [pc, #164]	@ (80206e4 <_vfiprintf_r+0x220>)
 8020640:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020644:	2206      	movs	r2, #6
 8020646:	f7df fde3 	bl	8000210 <memchr>
 802064a:	2800      	cmp	r0, #0
 802064c:	d03f      	beq.n	80206ce <_vfiprintf_r+0x20a>
 802064e:	4b26      	ldr	r3, [pc, #152]	@ (80206e8 <_vfiprintf_r+0x224>)
 8020650:	bb1b      	cbnz	r3, 802069a <_vfiprintf_r+0x1d6>
 8020652:	9b03      	ldr	r3, [sp, #12]
 8020654:	3307      	adds	r3, #7
 8020656:	f023 0307 	bic.w	r3, r3, #7
 802065a:	3308      	adds	r3, #8
 802065c:	9303      	str	r3, [sp, #12]
 802065e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020660:	443b      	add	r3, r7
 8020662:	9309      	str	r3, [sp, #36]	@ 0x24
 8020664:	e76a      	b.n	802053c <_vfiprintf_r+0x78>
 8020666:	fb0c 3202 	mla	r2, ip, r2, r3
 802066a:	460c      	mov	r4, r1
 802066c:	2001      	movs	r0, #1
 802066e:	e7a8      	b.n	80205c2 <_vfiprintf_r+0xfe>
 8020670:	2300      	movs	r3, #0
 8020672:	3401      	adds	r4, #1
 8020674:	9305      	str	r3, [sp, #20]
 8020676:	4619      	mov	r1, r3
 8020678:	f04f 0c0a 	mov.w	ip, #10
 802067c:	4620      	mov	r0, r4
 802067e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020682:	3a30      	subs	r2, #48	@ 0x30
 8020684:	2a09      	cmp	r2, #9
 8020686:	d903      	bls.n	8020690 <_vfiprintf_r+0x1cc>
 8020688:	2b00      	cmp	r3, #0
 802068a:	d0c6      	beq.n	802061a <_vfiprintf_r+0x156>
 802068c:	9105      	str	r1, [sp, #20]
 802068e:	e7c4      	b.n	802061a <_vfiprintf_r+0x156>
 8020690:	fb0c 2101 	mla	r1, ip, r1, r2
 8020694:	4604      	mov	r4, r0
 8020696:	2301      	movs	r3, #1
 8020698:	e7f0      	b.n	802067c <_vfiprintf_r+0x1b8>
 802069a:	ab03      	add	r3, sp, #12
 802069c:	9300      	str	r3, [sp, #0]
 802069e:	462a      	mov	r2, r5
 80206a0:	4b12      	ldr	r3, [pc, #72]	@ (80206ec <_vfiprintf_r+0x228>)
 80206a2:	a904      	add	r1, sp, #16
 80206a4:	4630      	mov	r0, r6
 80206a6:	f3af 8000 	nop.w
 80206aa:	4607      	mov	r7, r0
 80206ac:	1c78      	adds	r0, r7, #1
 80206ae:	d1d6      	bne.n	802065e <_vfiprintf_r+0x19a>
 80206b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80206b2:	07d9      	lsls	r1, r3, #31
 80206b4:	d405      	bmi.n	80206c2 <_vfiprintf_r+0x1fe>
 80206b6:	89ab      	ldrh	r3, [r5, #12]
 80206b8:	059a      	lsls	r2, r3, #22
 80206ba:	d402      	bmi.n	80206c2 <_vfiprintf_r+0x1fe>
 80206bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80206be:	f7ff fe21 	bl	8020304 <__retarget_lock_release_recursive>
 80206c2:	89ab      	ldrh	r3, [r5, #12]
 80206c4:	065b      	lsls	r3, r3, #25
 80206c6:	f53f af1f 	bmi.w	8020508 <_vfiprintf_r+0x44>
 80206ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80206cc:	e71e      	b.n	802050c <_vfiprintf_r+0x48>
 80206ce:	ab03      	add	r3, sp, #12
 80206d0:	9300      	str	r3, [sp, #0]
 80206d2:	462a      	mov	r2, r5
 80206d4:	4b05      	ldr	r3, [pc, #20]	@ (80206ec <_vfiprintf_r+0x228>)
 80206d6:	a904      	add	r1, sp, #16
 80206d8:	4630      	mov	r0, r6
 80206da:	f000 f879 	bl	80207d0 <_printf_i>
 80206de:	e7e4      	b.n	80206aa <_vfiprintf_r+0x1e6>
 80206e0:	08027064 	.word	0x08027064
 80206e4:	0802706e 	.word	0x0802706e
 80206e8:	00000000 	.word	0x00000000
 80206ec:	0802049f 	.word	0x0802049f
 80206f0:	0802706a 	.word	0x0802706a

080206f4 <_printf_common>:
 80206f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206f8:	4616      	mov	r6, r2
 80206fa:	4698      	mov	r8, r3
 80206fc:	688a      	ldr	r2, [r1, #8]
 80206fe:	690b      	ldr	r3, [r1, #16]
 8020700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020704:	4293      	cmp	r3, r2
 8020706:	bfb8      	it	lt
 8020708:	4613      	movlt	r3, r2
 802070a:	6033      	str	r3, [r6, #0]
 802070c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020710:	4607      	mov	r7, r0
 8020712:	460c      	mov	r4, r1
 8020714:	b10a      	cbz	r2, 802071a <_printf_common+0x26>
 8020716:	3301      	adds	r3, #1
 8020718:	6033      	str	r3, [r6, #0]
 802071a:	6823      	ldr	r3, [r4, #0]
 802071c:	0699      	lsls	r1, r3, #26
 802071e:	bf42      	ittt	mi
 8020720:	6833      	ldrmi	r3, [r6, #0]
 8020722:	3302      	addmi	r3, #2
 8020724:	6033      	strmi	r3, [r6, #0]
 8020726:	6825      	ldr	r5, [r4, #0]
 8020728:	f015 0506 	ands.w	r5, r5, #6
 802072c:	d106      	bne.n	802073c <_printf_common+0x48>
 802072e:	f104 0a19 	add.w	sl, r4, #25
 8020732:	68e3      	ldr	r3, [r4, #12]
 8020734:	6832      	ldr	r2, [r6, #0]
 8020736:	1a9b      	subs	r3, r3, r2
 8020738:	42ab      	cmp	r3, r5
 802073a:	dc26      	bgt.n	802078a <_printf_common+0x96>
 802073c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020740:	6822      	ldr	r2, [r4, #0]
 8020742:	3b00      	subs	r3, #0
 8020744:	bf18      	it	ne
 8020746:	2301      	movne	r3, #1
 8020748:	0692      	lsls	r2, r2, #26
 802074a:	d42b      	bmi.n	80207a4 <_printf_common+0xb0>
 802074c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020750:	4641      	mov	r1, r8
 8020752:	4638      	mov	r0, r7
 8020754:	47c8      	blx	r9
 8020756:	3001      	adds	r0, #1
 8020758:	d01e      	beq.n	8020798 <_printf_common+0xa4>
 802075a:	6823      	ldr	r3, [r4, #0]
 802075c:	6922      	ldr	r2, [r4, #16]
 802075e:	f003 0306 	and.w	r3, r3, #6
 8020762:	2b04      	cmp	r3, #4
 8020764:	bf02      	ittt	eq
 8020766:	68e5      	ldreq	r5, [r4, #12]
 8020768:	6833      	ldreq	r3, [r6, #0]
 802076a:	1aed      	subeq	r5, r5, r3
 802076c:	68a3      	ldr	r3, [r4, #8]
 802076e:	bf0c      	ite	eq
 8020770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020774:	2500      	movne	r5, #0
 8020776:	4293      	cmp	r3, r2
 8020778:	bfc4      	itt	gt
 802077a:	1a9b      	subgt	r3, r3, r2
 802077c:	18ed      	addgt	r5, r5, r3
 802077e:	2600      	movs	r6, #0
 8020780:	341a      	adds	r4, #26
 8020782:	42b5      	cmp	r5, r6
 8020784:	d11a      	bne.n	80207bc <_printf_common+0xc8>
 8020786:	2000      	movs	r0, #0
 8020788:	e008      	b.n	802079c <_printf_common+0xa8>
 802078a:	2301      	movs	r3, #1
 802078c:	4652      	mov	r2, sl
 802078e:	4641      	mov	r1, r8
 8020790:	4638      	mov	r0, r7
 8020792:	47c8      	blx	r9
 8020794:	3001      	adds	r0, #1
 8020796:	d103      	bne.n	80207a0 <_printf_common+0xac>
 8020798:	f04f 30ff 	mov.w	r0, #4294967295
 802079c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80207a0:	3501      	adds	r5, #1
 80207a2:	e7c6      	b.n	8020732 <_printf_common+0x3e>
 80207a4:	18e1      	adds	r1, r4, r3
 80207a6:	1c5a      	adds	r2, r3, #1
 80207a8:	2030      	movs	r0, #48	@ 0x30
 80207aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80207ae:	4422      	add	r2, r4
 80207b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80207b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80207b8:	3302      	adds	r3, #2
 80207ba:	e7c7      	b.n	802074c <_printf_common+0x58>
 80207bc:	2301      	movs	r3, #1
 80207be:	4622      	mov	r2, r4
 80207c0:	4641      	mov	r1, r8
 80207c2:	4638      	mov	r0, r7
 80207c4:	47c8      	blx	r9
 80207c6:	3001      	adds	r0, #1
 80207c8:	d0e6      	beq.n	8020798 <_printf_common+0xa4>
 80207ca:	3601      	adds	r6, #1
 80207cc:	e7d9      	b.n	8020782 <_printf_common+0x8e>
	...

080207d0 <_printf_i>:
 80207d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80207d4:	7e0f      	ldrb	r7, [r1, #24]
 80207d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80207d8:	2f78      	cmp	r7, #120	@ 0x78
 80207da:	4691      	mov	r9, r2
 80207dc:	4680      	mov	r8, r0
 80207de:	460c      	mov	r4, r1
 80207e0:	469a      	mov	sl, r3
 80207e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80207e6:	d807      	bhi.n	80207f8 <_printf_i+0x28>
 80207e8:	2f62      	cmp	r7, #98	@ 0x62
 80207ea:	d80a      	bhi.n	8020802 <_printf_i+0x32>
 80207ec:	2f00      	cmp	r7, #0
 80207ee:	f000 80d2 	beq.w	8020996 <_printf_i+0x1c6>
 80207f2:	2f58      	cmp	r7, #88	@ 0x58
 80207f4:	f000 80b9 	beq.w	802096a <_printf_i+0x19a>
 80207f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80207fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020800:	e03a      	b.n	8020878 <_printf_i+0xa8>
 8020802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020806:	2b15      	cmp	r3, #21
 8020808:	d8f6      	bhi.n	80207f8 <_printf_i+0x28>
 802080a:	a101      	add	r1, pc, #4	@ (adr r1, 8020810 <_printf_i+0x40>)
 802080c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020810:	08020869 	.word	0x08020869
 8020814:	0802087d 	.word	0x0802087d
 8020818:	080207f9 	.word	0x080207f9
 802081c:	080207f9 	.word	0x080207f9
 8020820:	080207f9 	.word	0x080207f9
 8020824:	080207f9 	.word	0x080207f9
 8020828:	0802087d 	.word	0x0802087d
 802082c:	080207f9 	.word	0x080207f9
 8020830:	080207f9 	.word	0x080207f9
 8020834:	080207f9 	.word	0x080207f9
 8020838:	080207f9 	.word	0x080207f9
 802083c:	0802097d 	.word	0x0802097d
 8020840:	080208a7 	.word	0x080208a7
 8020844:	08020937 	.word	0x08020937
 8020848:	080207f9 	.word	0x080207f9
 802084c:	080207f9 	.word	0x080207f9
 8020850:	0802099f 	.word	0x0802099f
 8020854:	080207f9 	.word	0x080207f9
 8020858:	080208a7 	.word	0x080208a7
 802085c:	080207f9 	.word	0x080207f9
 8020860:	080207f9 	.word	0x080207f9
 8020864:	0802093f 	.word	0x0802093f
 8020868:	6833      	ldr	r3, [r6, #0]
 802086a:	1d1a      	adds	r2, r3, #4
 802086c:	681b      	ldr	r3, [r3, #0]
 802086e:	6032      	str	r2, [r6, #0]
 8020870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020878:	2301      	movs	r3, #1
 802087a:	e09d      	b.n	80209b8 <_printf_i+0x1e8>
 802087c:	6833      	ldr	r3, [r6, #0]
 802087e:	6820      	ldr	r0, [r4, #0]
 8020880:	1d19      	adds	r1, r3, #4
 8020882:	6031      	str	r1, [r6, #0]
 8020884:	0606      	lsls	r6, r0, #24
 8020886:	d501      	bpl.n	802088c <_printf_i+0xbc>
 8020888:	681d      	ldr	r5, [r3, #0]
 802088a:	e003      	b.n	8020894 <_printf_i+0xc4>
 802088c:	0645      	lsls	r5, r0, #25
 802088e:	d5fb      	bpl.n	8020888 <_printf_i+0xb8>
 8020890:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020894:	2d00      	cmp	r5, #0
 8020896:	da03      	bge.n	80208a0 <_printf_i+0xd0>
 8020898:	232d      	movs	r3, #45	@ 0x2d
 802089a:	426d      	negs	r5, r5
 802089c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80208a0:	4859      	ldr	r0, [pc, #356]	@ (8020a08 <_printf_i+0x238>)
 80208a2:	230a      	movs	r3, #10
 80208a4:	e011      	b.n	80208ca <_printf_i+0xfa>
 80208a6:	6821      	ldr	r1, [r4, #0]
 80208a8:	6833      	ldr	r3, [r6, #0]
 80208aa:	0608      	lsls	r0, r1, #24
 80208ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80208b0:	d402      	bmi.n	80208b8 <_printf_i+0xe8>
 80208b2:	0649      	lsls	r1, r1, #25
 80208b4:	bf48      	it	mi
 80208b6:	b2ad      	uxthmi	r5, r5
 80208b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80208ba:	4853      	ldr	r0, [pc, #332]	@ (8020a08 <_printf_i+0x238>)
 80208bc:	6033      	str	r3, [r6, #0]
 80208be:	bf14      	ite	ne
 80208c0:	230a      	movne	r3, #10
 80208c2:	2308      	moveq	r3, #8
 80208c4:	2100      	movs	r1, #0
 80208c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80208ca:	6866      	ldr	r6, [r4, #4]
 80208cc:	60a6      	str	r6, [r4, #8]
 80208ce:	2e00      	cmp	r6, #0
 80208d0:	bfa2      	ittt	ge
 80208d2:	6821      	ldrge	r1, [r4, #0]
 80208d4:	f021 0104 	bicge.w	r1, r1, #4
 80208d8:	6021      	strge	r1, [r4, #0]
 80208da:	b90d      	cbnz	r5, 80208e0 <_printf_i+0x110>
 80208dc:	2e00      	cmp	r6, #0
 80208de:	d04b      	beq.n	8020978 <_printf_i+0x1a8>
 80208e0:	4616      	mov	r6, r2
 80208e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80208e6:	fb03 5711 	mls	r7, r3, r1, r5
 80208ea:	5dc7      	ldrb	r7, [r0, r7]
 80208ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80208f0:	462f      	mov	r7, r5
 80208f2:	42bb      	cmp	r3, r7
 80208f4:	460d      	mov	r5, r1
 80208f6:	d9f4      	bls.n	80208e2 <_printf_i+0x112>
 80208f8:	2b08      	cmp	r3, #8
 80208fa:	d10b      	bne.n	8020914 <_printf_i+0x144>
 80208fc:	6823      	ldr	r3, [r4, #0]
 80208fe:	07df      	lsls	r7, r3, #31
 8020900:	d508      	bpl.n	8020914 <_printf_i+0x144>
 8020902:	6923      	ldr	r3, [r4, #16]
 8020904:	6861      	ldr	r1, [r4, #4]
 8020906:	4299      	cmp	r1, r3
 8020908:	bfde      	ittt	le
 802090a:	2330      	movle	r3, #48	@ 0x30
 802090c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020910:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020914:	1b92      	subs	r2, r2, r6
 8020916:	6122      	str	r2, [r4, #16]
 8020918:	f8cd a000 	str.w	sl, [sp]
 802091c:	464b      	mov	r3, r9
 802091e:	aa03      	add	r2, sp, #12
 8020920:	4621      	mov	r1, r4
 8020922:	4640      	mov	r0, r8
 8020924:	f7ff fee6 	bl	80206f4 <_printf_common>
 8020928:	3001      	adds	r0, #1
 802092a:	d14a      	bne.n	80209c2 <_printf_i+0x1f2>
 802092c:	f04f 30ff 	mov.w	r0, #4294967295
 8020930:	b004      	add	sp, #16
 8020932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020936:	6823      	ldr	r3, [r4, #0]
 8020938:	f043 0320 	orr.w	r3, r3, #32
 802093c:	6023      	str	r3, [r4, #0]
 802093e:	4833      	ldr	r0, [pc, #204]	@ (8020a0c <_printf_i+0x23c>)
 8020940:	2778      	movs	r7, #120	@ 0x78
 8020942:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020946:	6823      	ldr	r3, [r4, #0]
 8020948:	6831      	ldr	r1, [r6, #0]
 802094a:	061f      	lsls	r7, r3, #24
 802094c:	f851 5b04 	ldr.w	r5, [r1], #4
 8020950:	d402      	bmi.n	8020958 <_printf_i+0x188>
 8020952:	065f      	lsls	r7, r3, #25
 8020954:	bf48      	it	mi
 8020956:	b2ad      	uxthmi	r5, r5
 8020958:	6031      	str	r1, [r6, #0]
 802095a:	07d9      	lsls	r1, r3, #31
 802095c:	bf44      	itt	mi
 802095e:	f043 0320 	orrmi.w	r3, r3, #32
 8020962:	6023      	strmi	r3, [r4, #0]
 8020964:	b11d      	cbz	r5, 802096e <_printf_i+0x19e>
 8020966:	2310      	movs	r3, #16
 8020968:	e7ac      	b.n	80208c4 <_printf_i+0xf4>
 802096a:	4827      	ldr	r0, [pc, #156]	@ (8020a08 <_printf_i+0x238>)
 802096c:	e7e9      	b.n	8020942 <_printf_i+0x172>
 802096e:	6823      	ldr	r3, [r4, #0]
 8020970:	f023 0320 	bic.w	r3, r3, #32
 8020974:	6023      	str	r3, [r4, #0]
 8020976:	e7f6      	b.n	8020966 <_printf_i+0x196>
 8020978:	4616      	mov	r6, r2
 802097a:	e7bd      	b.n	80208f8 <_printf_i+0x128>
 802097c:	6833      	ldr	r3, [r6, #0]
 802097e:	6825      	ldr	r5, [r4, #0]
 8020980:	6961      	ldr	r1, [r4, #20]
 8020982:	1d18      	adds	r0, r3, #4
 8020984:	6030      	str	r0, [r6, #0]
 8020986:	062e      	lsls	r6, r5, #24
 8020988:	681b      	ldr	r3, [r3, #0]
 802098a:	d501      	bpl.n	8020990 <_printf_i+0x1c0>
 802098c:	6019      	str	r1, [r3, #0]
 802098e:	e002      	b.n	8020996 <_printf_i+0x1c6>
 8020990:	0668      	lsls	r0, r5, #25
 8020992:	d5fb      	bpl.n	802098c <_printf_i+0x1bc>
 8020994:	8019      	strh	r1, [r3, #0]
 8020996:	2300      	movs	r3, #0
 8020998:	6123      	str	r3, [r4, #16]
 802099a:	4616      	mov	r6, r2
 802099c:	e7bc      	b.n	8020918 <_printf_i+0x148>
 802099e:	6833      	ldr	r3, [r6, #0]
 80209a0:	1d1a      	adds	r2, r3, #4
 80209a2:	6032      	str	r2, [r6, #0]
 80209a4:	681e      	ldr	r6, [r3, #0]
 80209a6:	6862      	ldr	r2, [r4, #4]
 80209a8:	2100      	movs	r1, #0
 80209aa:	4630      	mov	r0, r6
 80209ac:	f7df fc30 	bl	8000210 <memchr>
 80209b0:	b108      	cbz	r0, 80209b6 <_printf_i+0x1e6>
 80209b2:	1b80      	subs	r0, r0, r6
 80209b4:	6060      	str	r0, [r4, #4]
 80209b6:	6863      	ldr	r3, [r4, #4]
 80209b8:	6123      	str	r3, [r4, #16]
 80209ba:	2300      	movs	r3, #0
 80209bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80209c0:	e7aa      	b.n	8020918 <_printf_i+0x148>
 80209c2:	6923      	ldr	r3, [r4, #16]
 80209c4:	4632      	mov	r2, r6
 80209c6:	4649      	mov	r1, r9
 80209c8:	4640      	mov	r0, r8
 80209ca:	47d0      	blx	sl
 80209cc:	3001      	adds	r0, #1
 80209ce:	d0ad      	beq.n	802092c <_printf_i+0x15c>
 80209d0:	6823      	ldr	r3, [r4, #0]
 80209d2:	079b      	lsls	r3, r3, #30
 80209d4:	d413      	bmi.n	80209fe <_printf_i+0x22e>
 80209d6:	68e0      	ldr	r0, [r4, #12]
 80209d8:	9b03      	ldr	r3, [sp, #12]
 80209da:	4298      	cmp	r0, r3
 80209dc:	bfb8      	it	lt
 80209de:	4618      	movlt	r0, r3
 80209e0:	e7a6      	b.n	8020930 <_printf_i+0x160>
 80209e2:	2301      	movs	r3, #1
 80209e4:	4632      	mov	r2, r6
 80209e6:	4649      	mov	r1, r9
 80209e8:	4640      	mov	r0, r8
 80209ea:	47d0      	blx	sl
 80209ec:	3001      	adds	r0, #1
 80209ee:	d09d      	beq.n	802092c <_printf_i+0x15c>
 80209f0:	3501      	adds	r5, #1
 80209f2:	68e3      	ldr	r3, [r4, #12]
 80209f4:	9903      	ldr	r1, [sp, #12]
 80209f6:	1a5b      	subs	r3, r3, r1
 80209f8:	42ab      	cmp	r3, r5
 80209fa:	dcf2      	bgt.n	80209e2 <_printf_i+0x212>
 80209fc:	e7eb      	b.n	80209d6 <_printf_i+0x206>
 80209fe:	2500      	movs	r5, #0
 8020a00:	f104 0619 	add.w	r6, r4, #25
 8020a04:	e7f5      	b.n	80209f2 <_printf_i+0x222>
 8020a06:	bf00      	nop
 8020a08:	08027075 	.word	0x08027075
 8020a0c:	08027086 	.word	0x08027086

08020a10 <__sflush_r>:
 8020a10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a18:	0716      	lsls	r6, r2, #28
 8020a1a:	4605      	mov	r5, r0
 8020a1c:	460c      	mov	r4, r1
 8020a1e:	d454      	bmi.n	8020aca <__sflush_r+0xba>
 8020a20:	684b      	ldr	r3, [r1, #4]
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	dc02      	bgt.n	8020a2c <__sflush_r+0x1c>
 8020a26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	dd48      	ble.n	8020abe <__sflush_r+0xae>
 8020a2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020a2e:	2e00      	cmp	r6, #0
 8020a30:	d045      	beq.n	8020abe <__sflush_r+0xae>
 8020a32:	2300      	movs	r3, #0
 8020a34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020a38:	682f      	ldr	r7, [r5, #0]
 8020a3a:	6a21      	ldr	r1, [r4, #32]
 8020a3c:	602b      	str	r3, [r5, #0]
 8020a3e:	d030      	beq.n	8020aa2 <__sflush_r+0x92>
 8020a40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020a42:	89a3      	ldrh	r3, [r4, #12]
 8020a44:	0759      	lsls	r1, r3, #29
 8020a46:	d505      	bpl.n	8020a54 <__sflush_r+0x44>
 8020a48:	6863      	ldr	r3, [r4, #4]
 8020a4a:	1ad2      	subs	r2, r2, r3
 8020a4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020a4e:	b10b      	cbz	r3, 8020a54 <__sflush_r+0x44>
 8020a50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020a52:	1ad2      	subs	r2, r2, r3
 8020a54:	2300      	movs	r3, #0
 8020a56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020a58:	6a21      	ldr	r1, [r4, #32]
 8020a5a:	4628      	mov	r0, r5
 8020a5c:	47b0      	blx	r6
 8020a5e:	1c43      	adds	r3, r0, #1
 8020a60:	89a3      	ldrh	r3, [r4, #12]
 8020a62:	d106      	bne.n	8020a72 <__sflush_r+0x62>
 8020a64:	6829      	ldr	r1, [r5, #0]
 8020a66:	291d      	cmp	r1, #29
 8020a68:	d82b      	bhi.n	8020ac2 <__sflush_r+0xb2>
 8020a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8020b14 <__sflush_r+0x104>)
 8020a6c:	410a      	asrs	r2, r1
 8020a6e:	07d6      	lsls	r6, r2, #31
 8020a70:	d427      	bmi.n	8020ac2 <__sflush_r+0xb2>
 8020a72:	2200      	movs	r2, #0
 8020a74:	6062      	str	r2, [r4, #4]
 8020a76:	04d9      	lsls	r1, r3, #19
 8020a78:	6922      	ldr	r2, [r4, #16]
 8020a7a:	6022      	str	r2, [r4, #0]
 8020a7c:	d504      	bpl.n	8020a88 <__sflush_r+0x78>
 8020a7e:	1c42      	adds	r2, r0, #1
 8020a80:	d101      	bne.n	8020a86 <__sflush_r+0x76>
 8020a82:	682b      	ldr	r3, [r5, #0]
 8020a84:	b903      	cbnz	r3, 8020a88 <__sflush_r+0x78>
 8020a86:	6560      	str	r0, [r4, #84]	@ 0x54
 8020a88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020a8a:	602f      	str	r7, [r5, #0]
 8020a8c:	b1b9      	cbz	r1, 8020abe <__sflush_r+0xae>
 8020a8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020a92:	4299      	cmp	r1, r3
 8020a94:	d002      	beq.n	8020a9c <__sflush_r+0x8c>
 8020a96:	4628      	mov	r0, r5
 8020a98:	f7ff fca0 	bl	80203dc <_free_r>
 8020a9c:	2300      	movs	r3, #0
 8020a9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8020aa0:	e00d      	b.n	8020abe <__sflush_r+0xae>
 8020aa2:	2301      	movs	r3, #1
 8020aa4:	4628      	mov	r0, r5
 8020aa6:	47b0      	blx	r6
 8020aa8:	4602      	mov	r2, r0
 8020aaa:	1c50      	adds	r0, r2, #1
 8020aac:	d1c9      	bne.n	8020a42 <__sflush_r+0x32>
 8020aae:	682b      	ldr	r3, [r5, #0]
 8020ab0:	2b00      	cmp	r3, #0
 8020ab2:	d0c6      	beq.n	8020a42 <__sflush_r+0x32>
 8020ab4:	2b1d      	cmp	r3, #29
 8020ab6:	d001      	beq.n	8020abc <__sflush_r+0xac>
 8020ab8:	2b16      	cmp	r3, #22
 8020aba:	d11e      	bne.n	8020afa <__sflush_r+0xea>
 8020abc:	602f      	str	r7, [r5, #0]
 8020abe:	2000      	movs	r0, #0
 8020ac0:	e022      	b.n	8020b08 <__sflush_r+0xf8>
 8020ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020ac6:	b21b      	sxth	r3, r3
 8020ac8:	e01b      	b.n	8020b02 <__sflush_r+0xf2>
 8020aca:	690f      	ldr	r7, [r1, #16]
 8020acc:	2f00      	cmp	r7, #0
 8020ace:	d0f6      	beq.n	8020abe <__sflush_r+0xae>
 8020ad0:	0793      	lsls	r3, r2, #30
 8020ad2:	680e      	ldr	r6, [r1, #0]
 8020ad4:	bf08      	it	eq
 8020ad6:	694b      	ldreq	r3, [r1, #20]
 8020ad8:	600f      	str	r7, [r1, #0]
 8020ada:	bf18      	it	ne
 8020adc:	2300      	movne	r3, #0
 8020ade:	eba6 0807 	sub.w	r8, r6, r7
 8020ae2:	608b      	str	r3, [r1, #8]
 8020ae4:	f1b8 0f00 	cmp.w	r8, #0
 8020ae8:	dde9      	ble.n	8020abe <__sflush_r+0xae>
 8020aea:	6a21      	ldr	r1, [r4, #32]
 8020aec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020aee:	4643      	mov	r3, r8
 8020af0:	463a      	mov	r2, r7
 8020af2:	4628      	mov	r0, r5
 8020af4:	47b0      	blx	r6
 8020af6:	2800      	cmp	r0, #0
 8020af8:	dc08      	bgt.n	8020b0c <__sflush_r+0xfc>
 8020afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020b02:	81a3      	strh	r3, [r4, #12]
 8020b04:	f04f 30ff 	mov.w	r0, #4294967295
 8020b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b0c:	4407      	add	r7, r0
 8020b0e:	eba8 0800 	sub.w	r8, r8, r0
 8020b12:	e7e7      	b.n	8020ae4 <__sflush_r+0xd4>
 8020b14:	dfbffffe 	.word	0xdfbffffe

08020b18 <_fflush_r>:
 8020b18:	b538      	push	{r3, r4, r5, lr}
 8020b1a:	690b      	ldr	r3, [r1, #16]
 8020b1c:	4605      	mov	r5, r0
 8020b1e:	460c      	mov	r4, r1
 8020b20:	b913      	cbnz	r3, 8020b28 <_fflush_r+0x10>
 8020b22:	2500      	movs	r5, #0
 8020b24:	4628      	mov	r0, r5
 8020b26:	bd38      	pop	{r3, r4, r5, pc}
 8020b28:	b118      	cbz	r0, 8020b32 <_fflush_r+0x1a>
 8020b2a:	6a03      	ldr	r3, [r0, #32]
 8020b2c:	b90b      	cbnz	r3, 8020b32 <_fflush_r+0x1a>
 8020b2e:	f7ff fa8f 	bl	8020050 <__sinit>
 8020b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b36:	2b00      	cmp	r3, #0
 8020b38:	d0f3      	beq.n	8020b22 <_fflush_r+0xa>
 8020b3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020b3c:	07d0      	lsls	r0, r2, #31
 8020b3e:	d404      	bmi.n	8020b4a <_fflush_r+0x32>
 8020b40:	0599      	lsls	r1, r3, #22
 8020b42:	d402      	bmi.n	8020b4a <_fflush_r+0x32>
 8020b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020b46:	f7ff fbdc 	bl	8020302 <__retarget_lock_acquire_recursive>
 8020b4a:	4628      	mov	r0, r5
 8020b4c:	4621      	mov	r1, r4
 8020b4e:	f7ff ff5f 	bl	8020a10 <__sflush_r>
 8020b52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020b54:	07da      	lsls	r2, r3, #31
 8020b56:	4605      	mov	r5, r0
 8020b58:	d4e4      	bmi.n	8020b24 <_fflush_r+0xc>
 8020b5a:	89a3      	ldrh	r3, [r4, #12]
 8020b5c:	059b      	lsls	r3, r3, #22
 8020b5e:	d4e1      	bmi.n	8020b24 <_fflush_r+0xc>
 8020b60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020b62:	f7ff fbcf 	bl	8020304 <__retarget_lock_release_recursive>
 8020b66:	e7dd      	b.n	8020b24 <_fflush_r+0xc>

08020b68 <__swbuf_r>:
 8020b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b6a:	460e      	mov	r6, r1
 8020b6c:	4614      	mov	r4, r2
 8020b6e:	4605      	mov	r5, r0
 8020b70:	b118      	cbz	r0, 8020b7a <__swbuf_r+0x12>
 8020b72:	6a03      	ldr	r3, [r0, #32]
 8020b74:	b90b      	cbnz	r3, 8020b7a <__swbuf_r+0x12>
 8020b76:	f7ff fa6b 	bl	8020050 <__sinit>
 8020b7a:	69a3      	ldr	r3, [r4, #24]
 8020b7c:	60a3      	str	r3, [r4, #8]
 8020b7e:	89a3      	ldrh	r3, [r4, #12]
 8020b80:	071a      	lsls	r2, r3, #28
 8020b82:	d501      	bpl.n	8020b88 <__swbuf_r+0x20>
 8020b84:	6923      	ldr	r3, [r4, #16]
 8020b86:	b943      	cbnz	r3, 8020b9a <__swbuf_r+0x32>
 8020b88:	4621      	mov	r1, r4
 8020b8a:	4628      	mov	r0, r5
 8020b8c:	f000 f82a 	bl	8020be4 <__swsetup_r>
 8020b90:	b118      	cbz	r0, 8020b9a <__swbuf_r+0x32>
 8020b92:	f04f 37ff 	mov.w	r7, #4294967295
 8020b96:	4638      	mov	r0, r7
 8020b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b9a:	6823      	ldr	r3, [r4, #0]
 8020b9c:	6922      	ldr	r2, [r4, #16]
 8020b9e:	1a98      	subs	r0, r3, r2
 8020ba0:	6963      	ldr	r3, [r4, #20]
 8020ba2:	b2f6      	uxtb	r6, r6
 8020ba4:	4283      	cmp	r3, r0
 8020ba6:	4637      	mov	r7, r6
 8020ba8:	dc05      	bgt.n	8020bb6 <__swbuf_r+0x4e>
 8020baa:	4621      	mov	r1, r4
 8020bac:	4628      	mov	r0, r5
 8020bae:	f7ff ffb3 	bl	8020b18 <_fflush_r>
 8020bb2:	2800      	cmp	r0, #0
 8020bb4:	d1ed      	bne.n	8020b92 <__swbuf_r+0x2a>
 8020bb6:	68a3      	ldr	r3, [r4, #8]
 8020bb8:	3b01      	subs	r3, #1
 8020bba:	60a3      	str	r3, [r4, #8]
 8020bbc:	6823      	ldr	r3, [r4, #0]
 8020bbe:	1c5a      	adds	r2, r3, #1
 8020bc0:	6022      	str	r2, [r4, #0]
 8020bc2:	701e      	strb	r6, [r3, #0]
 8020bc4:	6962      	ldr	r2, [r4, #20]
 8020bc6:	1c43      	adds	r3, r0, #1
 8020bc8:	429a      	cmp	r2, r3
 8020bca:	d004      	beq.n	8020bd6 <__swbuf_r+0x6e>
 8020bcc:	89a3      	ldrh	r3, [r4, #12]
 8020bce:	07db      	lsls	r3, r3, #31
 8020bd0:	d5e1      	bpl.n	8020b96 <__swbuf_r+0x2e>
 8020bd2:	2e0a      	cmp	r6, #10
 8020bd4:	d1df      	bne.n	8020b96 <__swbuf_r+0x2e>
 8020bd6:	4621      	mov	r1, r4
 8020bd8:	4628      	mov	r0, r5
 8020bda:	f7ff ff9d 	bl	8020b18 <_fflush_r>
 8020bde:	2800      	cmp	r0, #0
 8020be0:	d0d9      	beq.n	8020b96 <__swbuf_r+0x2e>
 8020be2:	e7d6      	b.n	8020b92 <__swbuf_r+0x2a>

08020be4 <__swsetup_r>:
 8020be4:	b538      	push	{r3, r4, r5, lr}
 8020be6:	4b29      	ldr	r3, [pc, #164]	@ (8020c8c <__swsetup_r+0xa8>)
 8020be8:	4605      	mov	r5, r0
 8020bea:	6818      	ldr	r0, [r3, #0]
 8020bec:	460c      	mov	r4, r1
 8020bee:	b118      	cbz	r0, 8020bf8 <__swsetup_r+0x14>
 8020bf0:	6a03      	ldr	r3, [r0, #32]
 8020bf2:	b90b      	cbnz	r3, 8020bf8 <__swsetup_r+0x14>
 8020bf4:	f7ff fa2c 	bl	8020050 <__sinit>
 8020bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020bfc:	0719      	lsls	r1, r3, #28
 8020bfe:	d422      	bmi.n	8020c46 <__swsetup_r+0x62>
 8020c00:	06da      	lsls	r2, r3, #27
 8020c02:	d407      	bmi.n	8020c14 <__swsetup_r+0x30>
 8020c04:	2209      	movs	r2, #9
 8020c06:	602a      	str	r2, [r5, #0]
 8020c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020c0c:	81a3      	strh	r3, [r4, #12]
 8020c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8020c12:	e033      	b.n	8020c7c <__swsetup_r+0x98>
 8020c14:	0758      	lsls	r0, r3, #29
 8020c16:	d512      	bpl.n	8020c3e <__swsetup_r+0x5a>
 8020c18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020c1a:	b141      	cbz	r1, 8020c2e <__swsetup_r+0x4a>
 8020c1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020c20:	4299      	cmp	r1, r3
 8020c22:	d002      	beq.n	8020c2a <__swsetup_r+0x46>
 8020c24:	4628      	mov	r0, r5
 8020c26:	f7ff fbd9 	bl	80203dc <_free_r>
 8020c2a:	2300      	movs	r3, #0
 8020c2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8020c2e:	89a3      	ldrh	r3, [r4, #12]
 8020c30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020c34:	81a3      	strh	r3, [r4, #12]
 8020c36:	2300      	movs	r3, #0
 8020c38:	6063      	str	r3, [r4, #4]
 8020c3a:	6923      	ldr	r3, [r4, #16]
 8020c3c:	6023      	str	r3, [r4, #0]
 8020c3e:	89a3      	ldrh	r3, [r4, #12]
 8020c40:	f043 0308 	orr.w	r3, r3, #8
 8020c44:	81a3      	strh	r3, [r4, #12]
 8020c46:	6923      	ldr	r3, [r4, #16]
 8020c48:	b94b      	cbnz	r3, 8020c5e <__swsetup_r+0x7a>
 8020c4a:	89a3      	ldrh	r3, [r4, #12]
 8020c4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020c54:	d003      	beq.n	8020c5e <__swsetup_r+0x7a>
 8020c56:	4621      	mov	r1, r4
 8020c58:	4628      	mov	r0, r5
 8020c5a:	f000 f83f 	bl	8020cdc <__smakebuf_r>
 8020c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c62:	f013 0201 	ands.w	r2, r3, #1
 8020c66:	d00a      	beq.n	8020c7e <__swsetup_r+0x9a>
 8020c68:	2200      	movs	r2, #0
 8020c6a:	60a2      	str	r2, [r4, #8]
 8020c6c:	6962      	ldr	r2, [r4, #20]
 8020c6e:	4252      	negs	r2, r2
 8020c70:	61a2      	str	r2, [r4, #24]
 8020c72:	6922      	ldr	r2, [r4, #16]
 8020c74:	b942      	cbnz	r2, 8020c88 <__swsetup_r+0xa4>
 8020c76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020c7a:	d1c5      	bne.n	8020c08 <__swsetup_r+0x24>
 8020c7c:	bd38      	pop	{r3, r4, r5, pc}
 8020c7e:	0799      	lsls	r1, r3, #30
 8020c80:	bf58      	it	pl
 8020c82:	6962      	ldrpl	r2, [r4, #20]
 8020c84:	60a2      	str	r2, [r4, #8]
 8020c86:	e7f4      	b.n	8020c72 <__swsetup_r+0x8e>
 8020c88:	2000      	movs	r0, #0
 8020c8a:	e7f7      	b.n	8020c7c <__swsetup_r+0x98>
 8020c8c:	20000070 	.word	0x20000070

08020c90 <__swhatbuf_r>:
 8020c90:	b570      	push	{r4, r5, r6, lr}
 8020c92:	460c      	mov	r4, r1
 8020c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c98:	2900      	cmp	r1, #0
 8020c9a:	b096      	sub	sp, #88	@ 0x58
 8020c9c:	4615      	mov	r5, r2
 8020c9e:	461e      	mov	r6, r3
 8020ca0:	da0d      	bge.n	8020cbe <__swhatbuf_r+0x2e>
 8020ca2:	89a3      	ldrh	r3, [r4, #12]
 8020ca4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020ca8:	f04f 0100 	mov.w	r1, #0
 8020cac:	bf14      	ite	ne
 8020cae:	2340      	movne	r3, #64	@ 0x40
 8020cb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020cb4:	2000      	movs	r0, #0
 8020cb6:	6031      	str	r1, [r6, #0]
 8020cb8:	602b      	str	r3, [r5, #0]
 8020cba:	b016      	add	sp, #88	@ 0x58
 8020cbc:	bd70      	pop	{r4, r5, r6, pc}
 8020cbe:	466a      	mov	r2, sp
 8020cc0:	f000 f848 	bl	8020d54 <_fstat_r>
 8020cc4:	2800      	cmp	r0, #0
 8020cc6:	dbec      	blt.n	8020ca2 <__swhatbuf_r+0x12>
 8020cc8:	9901      	ldr	r1, [sp, #4]
 8020cca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020cce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020cd2:	4259      	negs	r1, r3
 8020cd4:	4159      	adcs	r1, r3
 8020cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020cda:	e7eb      	b.n	8020cb4 <__swhatbuf_r+0x24>

08020cdc <__smakebuf_r>:
 8020cdc:	898b      	ldrh	r3, [r1, #12]
 8020cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020ce0:	079d      	lsls	r5, r3, #30
 8020ce2:	4606      	mov	r6, r0
 8020ce4:	460c      	mov	r4, r1
 8020ce6:	d507      	bpl.n	8020cf8 <__smakebuf_r+0x1c>
 8020ce8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020cec:	6023      	str	r3, [r4, #0]
 8020cee:	6123      	str	r3, [r4, #16]
 8020cf0:	2301      	movs	r3, #1
 8020cf2:	6163      	str	r3, [r4, #20]
 8020cf4:	b003      	add	sp, #12
 8020cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020cf8:	ab01      	add	r3, sp, #4
 8020cfa:	466a      	mov	r2, sp
 8020cfc:	f7ff ffc8 	bl	8020c90 <__swhatbuf_r>
 8020d00:	9f00      	ldr	r7, [sp, #0]
 8020d02:	4605      	mov	r5, r0
 8020d04:	4639      	mov	r1, r7
 8020d06:	4630      	mov	r0, r6
 8020d08:	f7ff f88a 	bl	801fe20 <_malloc_r>
 8020d0c:	b948      	cbnz	r0, 8020d22 <__smakebuf_r+0x46>
 8020d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d12:	059a      	lsls	r2, r3, #22
 8020d14:	d4ee      	bmi.n	8020cf4 <__smakebuf_r+0x18>
 8020d16:	f023 0303 	bic.w	r3, r3, #3
 8020d1a:	f043 0302 	orr.w	r3, r3, #2
 8020d1e:	81a3      	strh	r3, [r4, #12]
 8020d20:	e7e2      	b.n	8020ce8 <__smakebuf_r+0xc>
 8020d22:	89a3      	ldrh	r3, [r4, #12]
 8020d24:	6020      	str	r0, [r4, #0]
 8020d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020d2a:	81a3      	strh	r3, [r4, #12]
 8020d2c:	9b01      	ldr	r3, [sp, #4]
 8020d2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020d32:	b15b      	cbz	r3, 8020d4c <__smakebuf_r+0x70>
 8020d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d38:	4630      	mov	r0, r6
 8020d3a:	f000 f81d 	bl	8020d78 <_isatty_r>
 8020d3e:	b128      	cbz	r0, 8020d4c <__smakebuf_r+0x70>
 8020d40:	89a3      	ldrh	r3, [r4, #12]
 8020d42:	f023 0303 	bic.w	r3, r3, #3
 8020d46:	f043 0301 	orr.w	r3, r3, #1
 8020d4a:	81a3      	strh	r3, [r4, #12]
 8020d4c:	89a3      	ldrh	r3, [r4, #12]
 8020d4e:	431d      	orrs	r5, r3
 8020d50:	81a5      	strh	r5, [r4, #12]
 8020d52:	e7cf      	b.n	8020cf4 <__smakebuf_r+0x18>

08020d54 <_fstat_r>:
 8020d54:	b538      	push	{r3, r4, r5, lr}
 8020d56:	4d07      	ldr	r5, [pc, #28]	@ (8020d74 <_fstat_r+0x20>)
 8020d58:	2300      	movs	r3, #0
 8020d5a:	4604      	mov	r4, r0
 8020d5c:	4608      	mov	r0, r1
 8020d5e:	4611      	mov	r1, r2
 8020d60:	602b      	str	r3, [r5, #0]
 8020d62:	f000 f821 	bl	8020da8 <_fstat>
 8020d66:	1c43      	adds	r3, r0, #1
 8020d68:	d102      	bne.n	8020d70 <_fstat_r+0x1c>
 8020d6a:	682b      	ldr	r3, [r5, #0]
 8020d6c:	b103      	cbz	r3, 8020d70 <_fstat_r+0x1c>
 8020d6e:	6023      	str	r3, [r4, #0]
 8020d70:	bd38      	pop	{r3, r4, r5, pc}
 8020d72:	bf00      	nop
 8020d74:	20025034 	.word	0x20025034

08020d78 <_isatty_r>:
 8020d78:	b538      	push	{r3, r4, r5, lr}
 8020d7a:	4d06      	ldr	r5, [pc, #24]	@ (8020d94 <_isatty_r+0x1c>)
 8020d7c:	2300      	movs	r3, #0
 8020d7e:	4604      	mov	r4, r0
 8020d80:	4608      	mov	r0, r1
 8020d82:	602b      	str	r3, [r5, #0]
 8020d84:	f000 f820 	bl	8020dc8 <_isatty>
 8020d88:	1c43      	adds	r3, r0, #1
 8020d8a:	d102      	bne.n	8020d92 <_isatty_r+0x1a>
 8020d8c:	682b      	ldr	r3, [r5, #0]
 8020d8e:	b103      	cbz	r3, 8020d92 <_isatty_r+0x1a>
 8020d90:	6023      	str	r3, [r4, #0]
 8020d92:	bd38      	pop	{r3, r4, r5, pc}
 8020d94:	20025034 	.word	0x20025034

08020d98 <_close>:
 8020d98:	4b02      	ldr	r3, [pc, #8]	@ (8020da4 <_close+0xc>)
 8020d9a:	2258      	movs	r2, #88	@ 0x58
 8020d9c:	601a      	str	r2, [r3, #0]
 8020d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8020da2:	4770      	bx	lr
 8020da4:	20025034 	.word	0x20025034

08020da8 <_fstat>:
 8020da8:	4b02      	ldr	r3, [pc, #8]	@ (8020db4 <_fstat+0xc>)
 8020daa:	2258      	movs	r2, #88	@ 0x58
 8020dac:	601a      	str	r2, [r3, #0]
 8020dae:	f04f 30ff 	mov.w	r0, #4294967295
 8020db2:	4770      	bx	lr
 8020db4:	20025034 	.word	0x20025034

08020db8 <_getpid>:
 8020db8:	4b02      	ldr	r3, [pc, #8]	@ (8020dc4 <_getpid+0xc>)
 8020dba:	2258      	movs	r2, #88	@ 0x58
 8020dbc:	601a      	str	r2, [r3, #0]
 8020dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8020dc2:	4770      	bx	lr
 8020dc4:	20025034 	.word	0x20025034

08020dc8 <_isatty>:
 8020dc8:	4b02      	ldr	r3, [pc, #8]	@ (8020dd4 <_isatty+0xc>)
 8020dca:	2258      	movs	r2, #88	@ 0x58
 8020dcc:	601a      	str	r2, [r3, #0]
 8020dce:	2000      	movs	r0, #0
 8020dd0:	4770      	bx	lr
 8020dd2:	bf00      	nop
 8020dd4:	20025034 	.word	0x20025034

08020dd8 <_kill>:
 8020dd8:	4b02      	ldr	r3, [pc, #8]	@ (8020de4 <_kill+0xc>)
 8020dda:	2258      	movs	r2, #88	@ 0x58
 8020ddc:	601a      	str	r2, [r3, #0]
 8020dde:	f04f 30ff 	mov.w	r0, #4294967295
 8020de2:	4770      	bx	lr
 8020de4:	20025034 	.word	0x20025034

08020de8 <_lseek>:
 8020de8:	4b02      	ldr	r3, [pc, #8]	@ (8020df4 <_lseek+0xc>)
 8020dea:	2258      	movs	r2, #88	@ 0x58
 8020dec:	601a      	str	r2, [r3, #0]
 8020dee:	f04f 30ff 	mov.w	r0, #4294967295
 8020df2:	4770      	bx	lr
 8020df4:	20025034 	.word	0x20025034

08020df8 <_read>:
 8020df8:	4b02      	ldr	r3, [pc, #8]	@ (8020e04 <_read+0xc>)
 8020dfa:	2258      	movs	r2, #88	@ 0x58
 8020dfc:	601a      	str	r2, [r3, #0]
 8020dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8020e02:	4770      	bx	lr
 8020e04:	20025034 	.word	0x20025034

08020e08 <_sbrk>:
 8020e08:	4a04      	ldr	r2, [pc, #16]	@ (8020e1c <_sbrk+0x14>)
 8020e0a:	6811      	ldr	r1, [r2, #0]
 8020e0c:	4603      	mov	r3, r0
 8020e0e:	b909      	cbnz	r1, 8020e14 <_sbrk+0xc>
 8020e10:	4903      	ldr	r1, [pc, #12]	@ (8020e20 <_sbrk+0x18>)
 8020e12:	6011      	str	r1, [r2, #0]
 8020e14:	6810      	ldr	r0, [r2, #0]
 8020e16:	4403      	add	r3, r0
 8020e18:	6013      	str	r3, [r2, #0]
 8020e1a:	4770      	bx	lr
 8020e1c:	200250cc 	.word	0x200250cc
 8020e20:	200250d0 	.word	0x200250d0

08020e24 <_write>:
 8020e24:	4b02      	ldr	r3, [pc, #8]	@ (8020e30 <_write+0xc>)
 8020e26:	2258      	movs	r2, #88	@ 0x58
 8020e28:	601a      	str	r2, [r3, #0]
 8020e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8020e2e:	4770      	bx	lr
 8020e30:	20025034 	.word	0x20025034

08020e34 <_exit>:
 8020e34:	e7fe      	b.n	8020e34 <_exit>
	...

08020e38 <_init>:
 8020e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e3a:	bf00      	nop
 8020e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e3e:	bc08      	pop	{r3}
 8020e40:	469e      	mov	lr, r3
 8020e42:	4770      	bx	lr

08020e44 <_fini>:
 8020e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e46:	bf00      	nop
 8020e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e4a:	bc08      	pop	{r3}
 8020e4c:	469e      	mov	lr, r3
 8020e4e:	4770      	bx	lr
