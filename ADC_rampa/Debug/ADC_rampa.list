
ADC_rampa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ecc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004088  08004088  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004090  08004090  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  080040a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080040a4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8ac  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdf  00000000  00000000  0002c92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  0002e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000968  00000000  00000000  0002f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001598a  00000000  00000000  0002fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d576  00000000  00000000  000453fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a7f4  00000000  00000000  00052970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000336c  00000000  00000000  000dd164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e04d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800404c 	.word	0x0800404c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800404c 	.word	0x0800404c

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b970 	b.w	8000b3c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9e08      	ldr	r6, [sp, #32]
 800087a:	460d      	mov	r5, r1
 800087c:	4604      	mov	r4, r0
 800087e:	460f      	mov	r7, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4694      	mov	ip, r2
 8000888:	d965      	bls.n	8000956 <__udivmoddi4+0xe2>
 800088a:	fab2 f382 	clz	r3, r2
 800088e:	b143      	cbz	r3, 80008a2 <__udivmoddi4+0x2e>
 8000890:	fa02 fc03 	lsl.w	ip, r2, r3
 8000894:	f1c3 0220 	rsb	r2, r3, #32
 8000898:	409f      	lsls	r7, r3
 800089a:	fa20 f202 	lsr.w	r2, r0, r2
 800089e:	4317      	orrs	r7, r2
 80008a0:	409c      	lsls	r4, r3
 80008a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008a6:	fa1f f58c 	uxth.w	r5, ip
 80008aa:	fbb7 f1fe 	udiv	r1, r7, lr
 80008ae:	0c22      	lsrs	r2, r4, #16
 80008b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008b8:	fb01 f005 	mul.w	r0, r1, r5
 80008bc:	4290      	cmp	r0, r2
 80008be:	d90a      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c0:	eb1c 0202 	adds.w	r2, ip, r2
 80008c4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008c8:	f080 811c 	bcs.w	8000b04 <__udivmoddi4+0x290>
 80008cc:	4290      	cmp	r0, r2
 80008ce:	f240 8119 	bls.w	8000b04 <__udivmoddi4+0x290>
 80008d2:	3902      	subs	r1, #2
 80008d4:	4462      	add	r2, ip
 80008d6:	1a12      	subs	r2, r2, r0
 80008d8:	b2a4      	uxth	r4, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008e6:	fb00 f505 	mul.w	r5, r0, r5
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	d90a      	bls.n	8000904 <__udivmoddi4+0x90>
 80008ee:	eb1c 0404 	adds.w	r4, ip, r4
 80008f2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008f6:	f080 8107 	bcs.w	8000b08 <__udivmoddi4+0x294>
 80008fa:	42a5      	cmp	r5, r4
 80008fc:	f240 8104 	bls.w	8000b08 <__udivmoddi4+0x294>
 8000900:	4464      	add	r4, ip
 8000902:	3802      	subs	r0, #2
 8000904:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000908:	1b64      	subs	r4, r4, r5
 800090a:	2100      	movs	r1, #0
 800090c:	b11e      	cbz	r6, 8000916 <__udivmoddi4+0xa2>
 800090e:	40dc      	lsrs	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	e9c6 4300 	strd	r4, r3, [r6]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0xbc>
 800091e:	2e00      	cmp	r6, #0
 8000920:	f000 80ed 	beq.w	8000afe <__udivmoddi4+0x28a>
 8000924:	2100      	movs	r1, #0
 8000926:	e9c6 0500 	strd	r0, r5, [r6]
 800092a:	4608      	mov	r0, r1
 800092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000930:	fab3 f183 	clz	r1, r3
 8000934:	2900      	cmp	r1, #0
 8000936:	d149      	bne.n	80009cc <__udivmoddi4+0x158>
 8000938:	42ab      	cmp	r3, r5
 800093a:	d302      	bcc.n	8000942 <__udivmoddi4+0xce>
 800093c:	4282      	cmp	r2, r0
 800093e:	f200 80f8 	bhi.w	8000b32 <__udivmoddi4+0x2be>
 8000942:	1a84      	subs	r4, r0, r2
 8000944:	eb65 0203 	sbc.w	r2, r5, r3
 8000948:	2001      	movs	r0, #1
 800094a:	4617      	mov	r7, r2
 800094c:	2e00      	cmp	r6, #0
 800094e:	d0e2      	beq.n	8000916 <__udivmoddi4+0xa2>
 8000950:	e9c6 4700 	strd	r4, r7, [r6]
 8000954:	e7df      	b.n	8000916 <__udivmoddi4+0xa2>
 8000956:	b902      	cbnz	r2, 800095a <__udivmoddi4+0xe6>
 8000958:	deff      	udf	#255	; 0xff
 800095a:	fab2 f382 	clz	r3, r2
 800095e:	2b00      	cmp	r3, #0
 8000960:	f040 8090 	bne.w	8000a84 <__udivmoddi4+0x210>
 8000964:	1a8a      	subs	r2, r1, r2
 8000966:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800096a:	fa1f fe8c 	uxth.w	lr, ip
 800096e:	2101      	movs	r1, #1
 8000970:	fbb2 f5f7 	udiv	r5, r2, r7
 8000974:	fb07 2015 	mls	r0, r7, r5, r2
 8000978:	0c22      	lsrs	r2, r4, #16
 800097a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800097e:	fb0e f005 	mul.w	r0, lr, r5
 8000982:	4290      	cmp	r0, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x124>
 8000986:	eb1c 0202 	adds.w	r2, ip, r2
 800098a:	f105 38ff 	add.w	r8, r5, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x122>
 8000990:	4290      	cmp	r0, r2
 8000992:	f200 80cb 	bhi.w	8000b2c <__udivmoddi4+0x2b8>
 8000996:	4645      	mov	r5, r8
 8000998:	1a12      	subs	r2, r2, r0
 800099a:	b2a4      	uxth	r4, r4
 800099c:	fbb2 f0f7 	udiv	r0, r2, r7
 80009a0:	fb07 2210 	mls	r2, r7, r0, r2
 80009a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009a8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x14e>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b8:	d202      	bcs.n	80009c0 <__udivmoddi4+0x14c>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	f200 80bb 	bhi.w	8000b36 <__udivmoddi4+0x2c2>
 80009c0:	4610      	mov	r0, r2
 80009c2:	eba4 040e 	sub.w	r4, r4, lr
 80009c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ca:	e79f      	b.n	800090c <__udivmoddi4+0x98>
 80009cc:	f1c1 0720 	rsb	r7, r1, #32
 80009d0:	408b      	lsls	r3, r1
 80009d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009da:	fa05 f401 	lsl.w	r4, r5, r1
 80009de:	fa20 f307 	lsr.w	r3, r0, r7
 80009e2:	40fd      	lsrs	r5, r7
 80009e4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e8:	4323      	orrs	r3, r4
 80009ea:	fbb5 f8f9 	udiv	r8, r5, r9
 80009ee:	fa1f fe8c 	uxth.w	lr, ip
 80009f2:	fb09 5518 	mls	r5, r9, r8, r5
 80009f6:	0c1c      	lsrs	r4, r3, #16
 80009f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009fc:	fb08 f50e 	mul.w	r5, r8, lr
 8000a00:	42a5      	cmp	r5, r4
 8000a02:	fa02 f201 	lsl.w	r2, r2, r1
 8000a06:	fa00 f001 	lsl.w	r0, r0, r1
 8000a0a:	d90b      	bls.n	8000a24 <__udivmoddi4+0x1b0>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a14:	f080 8088 	bcs.w	8000b28 <__udivmoddi4+0x2b4>
 8000a18:	42a5      	cmp	r5, r4
 8000a1a:	f240 8085 	bls.w	8000b28 <__udivmoddi4+0x2b4>
 8000a1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a22:	4464      	add	r4, ip
 8000a24:	1b64      	subs	r4, r4, r5
 8000a26:	b29d      	uxth	r5, r3
 8000a28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x1da>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a44:	d26c      	bcs.n	8000b20 <__udivmoddi4+0x2ac>
 8000a46:	45a6      	cmp	lr, r4
 8000a48:	d96a      	bls.n	8000b20 <__udivmoddi4+0x2ac>
 8000a4a:	3b02      	subs	r3, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a52:	fba3 9502 	umull	r9, r5, r3, r2
 8000a56:	eba4 040e 	sub.w	r4, r4, lr
 8000a5a:	42ac      	cmp	r4, r5
 8000a5c:	46c8      	mov	r8, r9
 8000a5e:	46ae      	mov	lr, r5
 8000a60:	d356      	bcc.n	8000b10 <__udivmoddi4+0x29c>
 8000a62:	d053      	beq.n	8000b0c <__udivmoddi4+0x298>
 8000a64:	b156      	cbz	r6, 8000a7c <__udivmoddi4+0x208>
 8000a66:	ebb0 0208 	subs.w	r2, r0, r8
 8000a6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a72:	40ca      	lsrs	r2, r1
 8000a74:	40cc      	lsrs	r4, r1
 8000a76:	4317      	orrs	r7, r2
 8000a78:	e9c6 7400 	strd	r7, r4, [r6]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a84:	f1c3 0120 	rsb	r1, r3, #32
 8000a88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a90:	fa25 f101 	lsr.w	r1, r5, r1
 8000a94:	409d      	lsls	r5, r3
 8000a96:	432a      	orrs	r2, r5
 8000a98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9c:	fa1f fe8c 	uxth.w	lr, ip
 8000aa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000aa8:	0c11      	lsrs	r1, r2, #16
 8000aaa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aae:	fb00 f50e 	mul.w	r5, r0, lr
 8000ab2:	428d      	cmp	r5, r1
 8000ab4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x258>
 8000aba:	eb1c 0101 	adds.w	r1, ip, r1
 8000abe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ac2:	d22f      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac4:	428d      	cmp	r5, r1
 8000ac6:	d92d      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	4461      	add	r1, ip
 8000acc:	1b49      	subs	r1, r1, r5
 8000ace:	b292      	uxth	r2, r2
 8000ad0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ad4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ad8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000adc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ae0:	4291      	cmp	r1, r2
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x282>
 8000ae4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aec:	d216      	bcs.n	8000b1c <__udivmoddi4+0x2a8>
 8000aee:	4291      	cmp	r1, r2
 8000af0:	d914      	bls.n	8000b1c <__udivmoddi4+0x2a8>
 8000af2:	3d02      	subs	r5, #2
 8000af4:	4462      	add	r2, ip
 8000af6:	1a52      	subs	r2, r2, r1
 8000af8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000afc:	e738      	b.n	8000970 <__udivmoddi4+0xfc>
 8000afe:	4631      	mov	r1, r6
 8000b00:	4630      	mov	r0, r6
 8000b02:	e708      	b.n	8000916 <__udivmoddi4+0xa2>
 8000b04:	4639      	mov	r1, r7
 8000b06:	e6e6      	b.n	80008d6 <__udivmoddi4+0x62>
 8000b08:	4610      	mov	r0, r2
 8000b0a:	e6fb      	b.n	8000904 <__udivmoddi4+0x90>
 8000b0c:	4548      	cmp	r0, r9
 8000b0e:	d2a9      	bcs.n	8000a64 <__udivmoddi4+0x1f0>
 8000b10:	ebb9 0802 	subs.w	r8, r9, r2
 8000b14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	e7a3      	b.n	8000a64 <__udivmoddi4+0x1f0>
 8000b1c:	4645      	mov	r5, r8
 8000b1e:	e7ea      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b20:	462b      	mov	r3, r5
 8000b22:	e794      	b.n	8000a4e <__udivmoddi4+0x1da>
 8000b24:	4640      	mov	r0, r8
 8000b26:	e7d1      	b.n	8000acc <__udivmoddi4+0x258>
 8000b28:	46d0      	mov	r8, sl
 8000b2a:	e77b      	b.n	8000a24 <__udivmoddi4+0x1b0>
 8000b2c:	3d02      	subs	r5, #2
 8000b2e:	4462      	add	r2, ip
 8000b30:	e732      	b.n	8000998 <__udivmoddi4+0x124>
 8000b32:	4608      	mov	r0, r1
 8000b34:	e70a      	b.n	800094c <__udivmoddi4+0xd8>
 8000b36:	4464      	add	r4, ip
 8000b38:	3802      	subs	r0, #2
 8000b3a:	e742      	b.n	80009c2 <__udivmoddi4+0x14e>

08000b3c <__aeabi_idiv0>:
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <show_num>:
	0x6F  // 9
};

extern void delay_us();

void show_num(uint16_t num){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]

	uint8_t digitos[N_dig] = {0};
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	813b      	strh	r3, [r7, #8]

	//Separamos los digitos
	//digitos[4] = num / 1000;
	//digitos[2] = (num % 1000) / 100;
	digitos[1] = (num % 100) / 10;
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	4a6d      	ldr	r2, [pc, #436]	; (8000d08 <show_num+0x1c8>)
 8000b52:	fba2 1203 	umull	r1, r2, r2, r3
 8000b56:	0952      	lsrs	r2, r2, #5
 8000b58:	2164      	movs	r1, #100	; 0x64
 8000b5a:	fb01 f202 	mul.w	r2, r1, r2
 8000b5e:	1a9b      	subs	r3, r3, r2
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4a6a      	ldr	r2, [pc, #424]	; (8000d0c <show_num+0x1cc>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	08db      	lsrs	r3, r3, #3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	727b      	strb	r3, [r7, #9]
	digitos[0] = num % 10;
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	4b66      	ldr	r3, [pc, #408]	; (8000d0c <show_num+0x1cc>)
 8000b74:	fba3 1302 	umull	r1, r3, r3, r2
 8000b78:	08d9      	lsrs	r1, r3, #3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	440b      	add	r3, r1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	723b      	strb	r3, [r7, #8]

	//Ejecutamos la multiplexacoion
	int dig;
	uint8_t mux = 0b0001;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	72fb      	strb	r3, [r7, #11]
	for (dig = 0; dig < N_dig; ++dig){
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	e0a1      	b.n	8000cd8 <show_num+0x198>

		//ESCOGEMOS EL DIGITO A MOSTRAR
		HAL_GPIO_WritePin(dig_0_port, dig_0_pin, mux&0x01);
 8000b94:	7afb      	ldrb	r3, [r7, #11]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	485b      	ldr	r0, [pc, #364]	; (8000d10 <show_num+0x1d0>)
 8000ba2:	f001 f9a3 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dig_1_port, dig_1_pin, mux&0x02);
 8000ba6:	7afb      	ldrb	r3, [r7, #11]
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	4857      	ldr	r0, [pc, #348]	; (8000d10 <show_num+0x1d0>)
 8000bb4:	f001 f99a 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dig_2_port, dig_2_pin, mux&0x04);
 8000bb8:	7afb      	ldrb	r3, [r7, #11]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4852      	ldr	r0, [pc, #328]	; (8000d10 <show_num+0x1d0>)
 8000bc6:	f001 f991 	bl	8001eec <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(dig_0_port, dig_0_pin, mux&0x08);
		mux <<= 1;
 8000bca:	7afb      	ldrb	r3, [r7, #11]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	72fb      	strb	r3, [r7, #11]

		//MOSTRAMOS EL DIGITO A MOSTRAR
		HAL_GPIO_WritePin(SEG_A_port, SEG_A_pin, (nums_bin[digitos[dig]] & 0x40) >> 6); // A
 8000bd0:	f107 0208 	add.w	r2, r7, #8
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b4d      	ldr	r3, [pc, #308]	; (8000d14 <show_num+0x1d4>)
 8000bde:	5c9b      	ldrb	r3, [r3, r2]
 8000be0:	119b      	asrs	r3, r3, #6
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf0:	4849      	ldr	r0, [pc, #292]	; (8000d18 <show_num+0x1d8>)
 8000bf2:	f001 f97b 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_port, SEG_B_pin, (nums_bin[digitos[dig]] & 0x20) >> 5); // B
 8000bf6:	f107 0208 	add.w	r2, r7, #8
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b44      	ldr	r3, [pc, #272]	; (8000d14 <show_num+0x1d4>)
 8000c04:	5c9b      	ldrb	r3, [r3, r2]
 8000c06:	115b      	asrs	r3, r3, #5
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	2104      	movs	r1, #4
 8000c14:	4840      	ldr	r0, [pc, #256]	; (8000d18 <show_num+0x1d8>)
 8000c16:	f001 f969 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_port, SEG_C_pin, (nums_bin[digitos[dig]] & 0x10) >> 4); // C
 8000c1a:	f107 0208 	add.w	r2, r7, #8
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <show_num+0x1d4>)
 8000c28:	5c9b      	ldrb	r3, [r3, r2]
 8000c2a:	111b      	asrs	r3, r3, #4
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	2102      	movs	r1, #2
 8000c38:	4837      	ldr	r0, [pc, #220]	; (8000d18 <show_num+0x1d8>)
 8000c3a:	f001 f957 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_port, SEG_D_pin, (nums_bin[digitos[dig]] & 0x08) >> 3); // D
 8000c3e:	f107 0208 	add.w	r2, r7, #8
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4413      	add	r3, r2
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <show_num+0x1d4>)
 8000c4c:	5c9b      	ldrb	r3, [r3, r2]
 8000c4e:	10db      	asrs	r3, r3, #3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	482e      	ldr	r0, [pc, #184]	; (8000d18 <show_num+0x1d8>)
 8000c5e:	f001 f945 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_port, SEG_E_pin, (nums_bin[digitos[dig]] & 0x04) >> 2); // E
 8000c62:	f107 0208 	add.w	r2, r7, #8
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <show_num+0x1d4>)
 8000c70:	5c9b      	ldrb	r3, [r3, r2]
 8000c72:	109b      	asrs	r3, r3, #2
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	4823      	ldr	r0, [pc, #140]	; (8000d10 <show_num+0x1d0>)
 8000c82:	f001 f933 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_port, SEG_F_pin, (nums_bin[digitos[dig]] & 0x02) >> 1); // F
 8000c86:	f107 0208 	add.w	r2, r7, #8
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <show_num+0x1d4>)
 8000c94:	5c9b      	ldrb	r3, [r3, r2]
 8000c96:	105b      	asrs	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2140      	movs	r1, #64	; 0x40
 8000ca4:	481a      	ldr	r0, [pc, #104]	; (8000d10 <show_num+0x1d0>)
 8000ca6:	f001 f921 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_port, SEG_G_pin, (nums_bin[digitos[dig]] & 0x01) >> 0); // G
 8000caa:	f107 0208 	add.w	r2, r7, #8
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <show_num+0x1d4>)
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <show_num+0x1d0>)
 8000cc6:	f001 f911 	bl	8001eec <HAL_GPIO_WritePin>

		//HAL_Delay(1);
		delay_us(5000);
 8000cca:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cce:	f000 fbef 	bl	80014b0 <delay_us>
	for (dig = 0; dig < N_dig; ++dig){
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	f77f af5a 	ble.w	8000b94 <show_num+0x54>
	}

	//APAGAMOS TODOS LOS DIGITOS
	HAL_GPIO_WritePin(dig_0_port, dig_0_pin, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <show_num+0x1d0>)
 8000ce6:	f001 f901 	bl	8001eec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_1_port, dig_1_pin, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2110      	movs	r1, #16
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <show_num+0x1d0>)
 8000cf0:	f001 f8fc 	bl	8001eec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_2_port, dig_2_pin, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <show_num+0x1d0>)
 8000cfa:	f001 f8f7 	bl	8001eec <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(dig_0_port, dig_0_pin, mux&0x08);
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	51eb851f 	.word	0x51eb851f
 8000d0c:	cccccccd 	.word	0xcccccccd
 8000d10:	40020000 	.word	0x40020000
 8000d14:	08004064 	.word	0x08004064
 8000d18:	40020400 	.word	0x40020400

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d22:	f000 fdc3 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d26:	f000 f86d 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2a:	f000 fa8b 	bl	8001244 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d2e:	f000 f8d1 	bl	8000ed4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000d32:	f000 fa09 	bl	8001148 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8000d36:	f000 fa5b 	bl	80011f0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000d3a:	f000 f96b 	bl	8001014 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d3e:	f000 f9b5 	bl	80010ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Contador del encoder
  uint8_t count = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	71fb      	strb	r3, [r7, #7]

  //incializamos el pwm
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d46:	2100      	movs	r1, #0
 8000d48:	4827      	ldr	r0, [pc, #156]	; (8000de8 <main+0xcc>)
 8000d4a:	f001 fe5d 	bl	8002a08 <HAL_TIM_PWM_Start>
  //incializamos el encoder
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000d4e:	213c      	movs	r1, #60	; 0x3c
 8000d50:	4826      	ldr	r0, [pc, #152]	; (8000dec <main+0xd0>)
 8000d52:	f001 ffaf 	bl	8002cb4 <HAL_TIM_Encoder_Start>
  //Inicializamos el timer para el delay de us
  HAL_TIM_Base_Start(&htim2);
 8000d56:	4826      	ldr	r0, [pc, #152]	; (8000df0 <main+0xd4>)
 8000d58:	f001 fda2 	bl	80028a0 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	show_num(adc_sar);
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <main+0xd8>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff feec 	bl	8000b40 <show_num>

	count = TIM4->CNT/4;
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <main+0xdc>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	71fb      	strb	r3, [r7, #7]

	//Estados del adc
	switch (count) {
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d02f      	beq.n	8000dd6 <main+0xba>
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	dc31      	bgt.n	8000dde <main+0xc2>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <main+0x68>
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d011      	beq.n	8000da6 <main+0x8a>

			adc_sar = 99;

			break;
		default:
			break;
 8000d82:	e02c      	b.n	8000dde <main+0xc2>
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	481c      	ldr	r0, [pc, #112]	; (8000dfc <main+0xe0>)
 8000d8c:	f001 f8ae 	bl	8001eec <HAL_GPIO_WritePin>
			adc_sar = represent(convert());
 8000d90:	f000 fb08 	bl	80013a4 <convert>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fb3a 	bl	8001410 <represent>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <main+0xd8>)
 8000da2:	701a      	strb	r2, [r3, #0]
			break;
 8000da4:	e01e      	b.n	8000de4 <main+0xc8>
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <main+0xe0>)
 8000dae:	f001 f89d 	bl	8001eec <HAL_GPIO_WritePin>
			if (flag) {
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <main+0xe4>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d013      	beq.n	8000de2 <main+0xc6>
				adc_sar = represent(convert());
 8000dba:	f000 faf3 	bl	80013a4 <convert>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fb25 	bl	8001410 <represent>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <main+0xd8>)
 8000dcc:	701a      	strb	r2, [r3, #0]
				flag = false;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <main+0xe4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
			break;
 8000dd4:	e005      	b.n	8000de2 <main+0xc6>
			adc_sar = 99;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <main+0xd8>)
 8000dd8:	2263      	movs	r2, #99	; 0x63
 8000dda:	701a      	strb	r2, [r3, #0]
			break;
 8000ddc:	e002      	b.n	8000de4 <main+0xc8>
			break;
 8000dde:	bf00      	nop
 8000de0:	e7bc      	b.n	8000d5c <main+0x40>
			break;
 8000de2:	bf00      	nop
	show_num(adc_sar);
 8000de4:	e7ba      	b.n	8000d5c <main+0x40>
 8000de6:	bf00      	nop
 8000de8:	20000028 	.word	0x20000028
 8000dec:	20000100 	.word	0x20000100
 8000df0:	20000070 	.word	0x20000070
 8000df4:	20000191 	.word	0x20000191
 8000df8:	40000800 	.word	0x40000800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	20000190 	.word	0x20000190

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	; 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	2230      	movs	r2, #48	; 0x30
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 f8ee 	bl	8003ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <SystemClock_Config+0xc8>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a26      	ldr	r2, [pc, #152]	; (8000ecc <SystemClock_Config+0xc8>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <SystemClock_Config+0xc8>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <SystemClock_Config+0xcc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <SystemClock_Config+0xcc>)
 8000e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <SystemClock_Config+0xcc>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000e74:	230c      	movs	r3, #12
 8000e76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e78:	2360      	movs	r3, #96	; 0x60
 8000e7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e80:	2304      	movs	r3, #4
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 f861 	bl	8001f50 <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e94:	f000 fb36 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fac3 	bl	8002440 <HAL_RCC_ClockConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ec0:	f000 fb20 	bl	8001504 <Error_Handler>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3750      	adds	r7, #80	; 0x50
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b096      	sub	sp, #88	; 0x58
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2220      	movs	r2, #32
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 f871 	bl	8003ff4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f12:	4b3e      	ldr	r3, [pc, #248]	; (800100c <MX_TIM1_Init+0x138>)
 8000f14:	4a3e      	ldr	r2, [pc, #248]	; (8001010 <MX_TIM1_Init+0x13c>)
 8000f16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000f18:	4b3c      	ldr	r3, [pc, #240]	; (800100c <MX_TIM1_Init+0x138>)
 8000f1a:	2263      	movs	r2, #99	; 0x63
 8000f1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <MX_TIM1_Init+0x138>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8000f24:	4b39      	ldr	r3, [pc, #228]	; (800100c <MX_TIM1_Init+0x138>)
 8000f26:	22fe      	movs	r2, #254	; 0xfe
 8000f28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <MX_TIM1_Init+0x138>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <MX_TIM1_Init+0x138>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <MX_TIM1_Init+0x138>)
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f3c:	4833      	ldr	r0, [pc, #204]	; (800100c <MX_TIM1_Init+0x138>)
 8000f3e:	f001 fc5f 	bl	8002800 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f48:	f000 fadc 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f56:	4619      	mov	r1, r3
 8000f58:	482c      	ldr	r0, [pc, #176]	; (800100c <MX_TIM1_Init+0x138>)
 8000f5a:	f002 f8eb 	bl	8003134 <HAL_TIM_ConfigClockSource>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f64:	f000 face 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f68:	4828      	ldr	r0, [pc, #160]	; (800100c <MX_TIM1_Init+0x138>)
 8000f6a:	f001 fcf3 	bl	8002954 <HAL_TIM_PWM_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f74:	f000 fac6 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f84:	4619      	mov	r1, r3
 8000f86:	4821      	ldr	r0, [pc, #132]	; (800100c <MX_TIM1_Init+0x138>)
 8000f88:	f002 fc9c 	bl	80038c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000f92:	f000 fab7 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	; 0x60
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_TIM1_Init+0x138>)
 8000fbc:	f001 fff8 	bl	8002fb0 <HAL_TIM_PWM_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000fc6:	f000 fa9d 	bl	8001504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM1_Init+0x138>)
 8000fee:	f002 fcd7 	bl	80039a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ff8:	f000 fa84 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM1_Init+0x138>)
 8000ffe:	f000 fb51 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8001002:	bf00      	nop
 8001004:	3758      	adds	r7, #88	; 0x58
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000028 	.word	0x20000028
 8001010:	40010000 	.word	0x40010000

08001014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	463b      	mov	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_TIM2_Init+0x94>)
 800103a:	2263      	movs	r2, #99	; 0x63
 800103c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001046:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800104a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_TIM2_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <MX_TIM2_Init+0x94>)
 800105a:	f001 fbd1 	bl	8002800 <HAL_TIM_Base_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001064:	f000 fa4e 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001076:	f002 f85d 	bl	8003134 <HAL_TIM_ConfigClockSource>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001080:	f000 fa40 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001092:	f002 fc17 	bl	80038c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800109c:	f000 fa32 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000070 	.word	0x20000070

080010ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM3_Init+0x94>)
 80010ca:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <MX_TIM3_Init+0x98>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999+1;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_TIM3_Init+0x94>)
 80010d0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM3_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19+1;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM3_Init+0x94>)
 80010de:	2214      	movs	r2, #20
 80010e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_TIM3_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM3_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ee:	4814      	ldr	r0, [pc, #80]	; (8001140 <MX_TIM3_Init+0x94>)
 80010f0:	f001 fb86 	bl	8002800 <HAL_TIM_Base_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010fa:	f000 fa03 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM3_Init+0x94>)
 800110c:	f002 f812 	bl	8003134 <HAL_TIM_ConfigClockSource>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 f9f5 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM3_Init+0x94>)
 8001128:	f002 fbcc 	bl	80038c4 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001132:	f000 f9e7 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000b8 	.word	0x200000b8
 8001144:	40000400 	.word	0x40000400

08001148 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	; 0x30
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2224      	movs	r2, #36	; 0x24
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f002 ff4c 	bl	8003ff4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_TIM4_Init+0xa0>)
 8001166:	4a21      	ldr	r2, [pc, #132]	; (80011ec <MX_TIM4_Init+0xa4>)
 8001168:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_TIM4_Init+0xa0>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_TIM4_Init+0xa0>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_TIM4_Init+0xa0>)
 8001178:	2208      	movs	r2, #8
 800117a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_TIM4_Init+0xa0>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_TIM4_Init+0xa0>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001188:	2303      	movs	r3, #3
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001190:	2301      	movs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001198:	230a      	movs	r3, #10
 800119a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011a0:	2301      	movs	r3, #1
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80011a8:	230a      	movs	r3, #10
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_TIM4_Init+0xa0>)
 80011b4:	f001 fcd8 	bl	8002b68 <HAL_TIM_Encoder_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80011be:	f000 f9a1 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_TIM4_Init+0xa0>)
 80011d0:	f002 fb78 	bl	80038c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80011da:	f000 f993 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000100 	.word	0x20000100
 80011ec:	40000800 	.word	0x40000800

080011f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART6_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <MX_USART6_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_USART6_UART_Init+0x4c>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART6_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART6_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART6_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART6_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART6_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART6_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART6_UART_Init+0x4c>)
 8001228:	f002 fc20 	bl	8003a6c <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001232:	f000 f967 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000148 	.word	0x20000148
 8001240:	40011400 	.word	0x40011400

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <MX_GPIO_Init+0x150>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a4c      	ldr	r2, [pc, #304]	; (8001394 <MX_GPIO_Init+0x150>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <MX_GPIO_Init+0x150>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <MX_GPIO_Init+0x150>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a45      	ldr	r2, [pc, #276]	; (8001394 <MX_GPIO_Init+0x150>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <MX_GPIO_Init+0x150>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <MX_GPIO_Init+0x150>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a3e      	ldr	r2, [pc, #248]	; (8001394 <MX_GPIO_Init+0x150>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <MX_GPIO_Init+0x150>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <MX_GPIO_Init+0x150>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a37      	ldr	r2, [pc, #220]	; (8001394 <MX_GPIO_Init+0x150>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <MX_GPIO_Init+0x150>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	4831      	ldr	r0, [pc, #196]	; (8001398 <MX_GPIO_Init+0x154>)
 80012d2:	f000 fe0b 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX2_Pin|MUX0_Pin|MUX1_Pin|SEG_G_Pin
 80012d6:	2200      	movs	r2, #0
 80012d8:	21fc      	movs	r1, #252	; 0xfc
 80012da:	4830      	ldr	r0, [pc, #192]	; (800139c <MX_GPIO_Init+0x158>)
 80012dc:	f000 fe06 	bl	8001eec <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_D_Pin|SEG_C_Pin|SEG_B_Pin|SEG_A_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f240 4107 	movw	r1, #1031	; 0x407
 80012e6:	482e      	ldr	r0, [pc, #184]	; (80013a0 <MX_GPIO_Init+0x15c>)
 80012e8:	f000 fe00 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4824      	ldr	r0, [pc, #144]	; (8001398 <MX_GPIO_Init+0x154>)
 8001306:	f000 fc55 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX2_Pin MUX0_Pin MUX1_Pin SEG_G_Pin
                           SEG_F_Pin SEG_E_Pin */
  GPIO_InitStruct.Pin = MUX2_Pin|MUX0_Pin|MUX1_Pin|SEG_G_Pin
 800130a:	23fc      	movs	r3, #252	; 0xfc
 800130c:	617b      	str	r3, [r7, #20]
                          |SEG_F_Pin|SEG_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <MX_GPIO_Init+0x158>)
 8001322:	f000 fc47 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_D_Pin SEG_C_Pin SEG_B_Pin SEG_A_Pin */
  GPIO_InitStruct.Pin = SEG_D_Pin|SEG_C_Pin|SEG_B_Pin|SEG_A_Pin;
 8001326:	f240 4307 	movw	r3, #1031	; 0x407
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <MX_GPIO_Init+0x15c>)
 8001340:	f000 fc38 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : COMP_Pin */
  GPIO_InitStruct.Pin = COMP_Pin;
 8001344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COMP_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4810      	ldr	r0, [pc, #64]	; (800139c <MX_GPIO_Init+0x158>)
 800135a:	f000 fc2b 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 800135e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001364:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	480a      	ldr	r0, [pc, #40]	; (80013a0 <MX_GPIO_Init+0x15c>)
 8001376:	f000 fc1d 	bl	8001bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2017      	movs	r0, #23
 8001380:	f000 fbe1 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001384:	2017      	movs	r0, #23
 8001386:	f000 fbfa 	bl	8001b7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40020800 	.word	0x40020800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400

080013a4 <convert>:

/* USER CODE BEGIN 4 */

/* USER CODE BEGIN 4 */
uint8_t convert(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0

	bool end_conv = false;
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
	/*****************************
	 * Empezamos ADC rampa
	 *****************************/
	uint8_t contador = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	71bb      	strb	r3, [r7, #6]

	do
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,contador);
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <convert+0x60>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	79ba      	ldrb	r2, [r7, #6]
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34

		if (HAL_GPIO_ReadPin(COMP_GPIO_Port, COMP_Pin) == 1)
 80013ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013be:	4812      	ldr	r0, [pc, #72]	; (8001408 <convert+0x64>)
 80013c0:	f000 fd7c 	bl	8001ebc <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <convert+0x2a>
		{//Es DAC>Vs?
			end_conv = true;
 80013ca:	2301      	movs	r3, #1
 80013cc:	71fb      	strb	r3, [r7, #7]
		}

		if(contador >=254){
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	2bfd      	cmp	r3, #253	; 0xfd
 80013d2:	d902      	bls.n	80013da <convert+0x36>
			end_conv = true;
 80013d4:	2301      	movs	r3, #1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	e005      	b.n	80013e6 <convert+0x42>
		}else{
			delay_us(75);
 80013da:	204b      	movs	r0, #75	; 0x4b
 80013dc:	f000 f868 	bl	80014b0 <delay_us>
			contador++;
 80013e0:	79bb      	ldrb	r3, [r7, #6]
 80013e2:	3301      	adds	r3, #1
 80013e4:	71bb      	strb	r3, [r7, #6]
		}

	}while(!end_conv);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f083 0301 	eor.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1df      	bne.n	80013b2 <convert+0xe>

	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <convert+0x60>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	635a      	str	r2, [r3, #52]	; 0x34
	return contador;//regresamo el valor leido
 80013fa:	79bb      	ldrb	r3, [r7, #6]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000028 	.word	0x20000028
 8001408:	40020000 	.word	0x40020000
 800140c:	00000000 	.word	0x00000000

08001410 <represent>:

uint8_t represent(uint8_t num){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	float volt = ((float)num) * (3.3/254.0); //voltaje leido
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001424:	ee17 0a90 	vmov	r0, s15
 8001428:	f7ff f964 	bl	80006f4 <__aeabi_f2d>
 800142c:	a316      	add	r3, pc, #88	; (adr r3, 8001488 <represent+0x78>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7fe fed1 	bl	80001d8 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff f9b1 	bl	80007a4 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	60fb      	str	r3, [r7, #12]
	volt = ((float)(int)(volt*10))/10; //ahora solo tiene un decimal
 8001446:	edd7 7a03 	vldr	s15, [r7, #12]
 800144a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800145a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800145e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001462:	edc7 7a03 	vstr	s15, [r7, #12]
	/*
	uint8_t base = (int)volt;
	uint8_t mantisa = (volt-base)*10;
	*/

	return (uint8_t)(volt*10);
 8001466:	edd7 7a03 	vldr	s15, [r7, #12]
 800146a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800146e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	edc7 7a00 	vstr	s15, [r7]
 800147a:	783b      	ldrb	r3, [r7, #0]
 800147c:	b2db      	uxtb	r3, r3
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	a1a9b9da 	.word	0xa1a9b9da
 800148c:	3f8a9b9d 	.word	0x3f8a9b9d

08001490 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
	flag = true;
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_GPIO_EXTI_Callback+0x1c>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	20000190 	.word	0x20000190

080014b0 <delay_us>:

void delay_us (uint16_t us)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <delay_us+0x30>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80014c2:	bf00      	nop
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <delay_us+0x30>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3f9      	bcc.n	80014c4 <delay_us+0x14>
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000070 	.word	0x20000070

080014e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	show_num(adc_sar);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fb24 	bl	8000b40 <show_num>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000191 	.word	0x20000191

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_MspInit+0x4c>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_MspInit+0x4c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a26      	ldr	r2, [pc, #152]	; (8001608 <HAL_TIM_Base_MspInit+0xa8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d116      	bne.n	80015a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_TIM_Base_MspInit+0xac>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a24      	ldr	r2, [pc, #144]	; (800160c <HAL_TIM_Base_MspInit+0xac>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_TIM_Base_MspInit+0xac>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	201a      	movs	r0, #26
 8001594:	f000 fad7 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001598:	201a      	movs	r0, #26
 800159a:	f000 faf0 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800159e:	e02e      	b.n	80015fe <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a8:	d10e      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_TIM_Base_MspInit+0xac>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <HAL_TIM_Base_MspInit+0xac>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_TIM_Base_MspInit+0xac>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
}
 80015c6:	e01a      	b.n	80015fe <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_TIM_Base_MspInit+0xb0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d115      	bne.n	80015fe <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_TIM_Base_MspInit+0xac>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a0c      	ldr	r2, [pc, #48]	; (800160c <HAL_TIM_Base_MspInit+0xac>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_TIM_Base_MspInit+0xac>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	201d      	movs	r0, #29
 80015f4:	f000 faa7 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015f8:	201d      	movs	r0, #29
 80015fa:	f000 fac0 	bl	8001b7e <HAL_NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40010000 	.word	0x40010000
 800160c:	40023800 	.word	0x40023800
 8001610:	40000400 	.word	0x40000400

08001614 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_TIM_Encoder_MspInit+0x84>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d12b      	bne.n	800168e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_TIM_Encoder_MspInit+0x88>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_TIM_Encoder_MspInit+0x88>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_TIM_Encoder_MspInit+0x88>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_TIM_Encoder_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_TIM_Encoder_MspInit+0x88>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_TIM_Encoder_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166e:	23c0      	movs	r3, #192	; 0xc0
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800167e:	2302      	movs	r3, #2
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800168a:	f000 fa93 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40000800 	.word	0x40000800
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020400 	.word	0x40020400

080016a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a12      	ldr	r2, [pc, #72]	; (800170c <HAL_TIM_MspPostInit+0x68>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d11e      	bne.n	8001704 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_TIM_MspPostInit+0x6c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_TIM_MspPostInit+0x6c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_TIM_MspPostInit+0x6c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_TIM_MspPostInit+0x70>)
 8001700:	f000 fa58 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3720      	adds	r7, #32
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40010000 	.word	0x40010000
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000

08001718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_UART_MspInit+0x84>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12c      	bne.n	8001794 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_UART_MspInit+0x88>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_UART_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001772:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001784:	2308      	movs	r3, #8
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_UART_MspInit+0x8c>)
 8001790:	f000 fa10 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40011400 	.word	0x40011400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f8ac 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 8001800:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001804:	f000 fb8c 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001812:	f001 fadd 	bl	8002dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000028 	.word	0x20000028

08001820 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM3_IRQHandler+0x10>)
 8001826:	f001 fad3 	bl	8002dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200000b8 	.word	0x200000b8

08001834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001890 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800185c:	f7ff ffea 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	; (80018a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001886:	f002 fbbd 	bl	8004004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188a:	f7ff fa47 	bl	8000d1c <main>
  bx  lr    
 800188e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800189c:	08004098 	.word	0x08004098
  ldr r2, =_sbss
 80018a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018a4:	20000198 	.word	0x20000198

080018a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <HAL_Init+0x40>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_Init+0x40>)
 80018c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_Init+0x40>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 f92b 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018da:	200f      	movs	r0, #15
 80018dc:	f000 f808 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e0:	f7ff fe16 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f943 	bl	8001b9a <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f000 f90b 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	; (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	20000008 	.word	0x20000008
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x20>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x24>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <HAL_IncTick+0x24>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008
 8001974:	20000194 	.word	0x20000194

08001978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_GetTick+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000194 	.word	0x20000194

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff29 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff3e 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff8e 	bl	8001a84 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff31 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa2 	bl	8001aec <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e159      	b.n	8001e84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f040 8148 	bne.w	8001e7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d005      	beq.n	8001c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d130      	bne.n	8001c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 0201 	and.w	r2, r3, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d017      	beq.n	8001ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d123      	bne.n	8001cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80a2 	beq.w	8001e7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a56      	ldr	r2, [pc, #344]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d56:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <HAL_GPIO_Init+0x2ec>)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a49      	ldr	r2, [pc, #292]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x202>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_GPIO_Init+0x2f4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x1fe>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a47      	ldr	r2, [pc, #284]	; (8001eac <HAL_GPIO_Init+0x2f8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x1fa>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a46      	ldr	r2, [pc, #280]	; (8001eb0 <HAL_GPIO_Init+0x2fc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x1f6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a45      	ldr	r2, [pc, #276]	; (8001eb4 <HAL_GPIO_Init+0x300>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x1f2>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e008      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e004      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001db6:	2300      	movs	r3, #0
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	f002 0203 	and.w	r2, r2, #3
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	4093      	lsls	r3, r2
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc8:	4935      	ldr	r1, [pc, #212]	; (8001ea0 <HAL_GPIO_Init+0x2ec>)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd6:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfa:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e24:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e2a:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e4e:	4a1a      	ldr	r2, [pc, #104]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e78:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	f67f aea2 	bls.w	8001bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40013c00 	.word	0x40013c00

08001ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e001      	b.n	8001ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f08:	e003      	b.n	8001f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff faa6 	bl	8001490 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40013c00 	.word	0x40013c00

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e267      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d075      	beq.n	800205a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f6e:	4b88      	ldr	r3, [pc, #544]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d00c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7a:	4b85      	ldr	r3, [pc, #532]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d112      	bne.n	8001fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f86:	4b82      	ldr	r3, [pc, #520]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f92:	d10b      	bne.n	8001fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	4b7e      	ldr	r3, [pc, #504]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d05b      	beq.n	8002058 <HAL_RCC_OscConfig+0x108>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d157      	bne.n	8002058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e242      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb4:	d106      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x74>
 8001fb6:	4b76      	ldr	r3, [pc, #472]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a75      	ldr	r2, [pc, #468]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e01d      	b.n	8002000 <HAL_RCC_OscConfig+0xb0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x98>
 8001fce:	4b70      	ldr	r3, [pc, #448]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6f      	ldr	r2, [pc, #444]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b6d      	ldr	r3, [pc, #436]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6c      	ldr	r2, [pc, #432]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0xb0>
 8001fe8:	4b69      	ldr	r3, [pc, #420]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a68      	ldr	r2, [pc, #416]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b66      	ldr	r3, [pc, #408]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a65      	ldr	r2, [pc, #404]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fcb6 	bl	8001978 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff fcb2 	bl	8001978 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e207      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0xc0>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fca2 	bl	8001978 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff fc9e 	bl	8001978 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1f3      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	4b51      	ldr	r3, [pc, #324]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0xe8>
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d063      	beq.n	800212e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002066:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207a:	2b08      	cmp	r3, #8
 800207c:	d11c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207e:	4b44      	ldr	r3, [pc, #272]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x152>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e1c7      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4937      	ldr	r1, [pc, #220]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	e03a      	b.n	800212e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c0:	4b34      	ldr	r3, [pc, #208]	; (8002194 <HAL_RCC_OscConfig+0x244>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7ff fc57 	bl	8001978 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ce:	f7ff fc53 	bl	8001978 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e1a8      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b28      	ldr	r3, [pc, #160]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4925      	ldr	r1, [pc, #148]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	e015      	b.n	800212e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_OscConfig+0x244>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff fc36 	bl	8001978 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002110:	f7ff fc32 	bl	8001978 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e187      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d036      	beq.n	80021a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d016      	beq.n	8002170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_RCC_OscConfig+0x248>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7ff fc16 	bl	8001978 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002150:	f7ff fc12 	bl	8001978 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e167      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_OscConfig+0x240>)
 8002164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x200>
 800216e:	e01b      	b.n	80021a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_OscConfig+0x248>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7ff fbff 	bl	8001978 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217c:	e00e      	b.n	800219c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217e:	f7ff fbfb 	bl	8001978 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d907      	bls.n	800219c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e150      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
 8002190:	40023800 	.word	0x40023800
 8002194:	42470000 	.word	0x42470000
 8002198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ea      	bne.n	800217e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8097 	beq.w	80022e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ba:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	4b7d      	ldr	r3, [pc, #500]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a7c      	ldr	r2, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b7a      	ldr	r3, [pc, #488]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b77      	ldr	r3, [pc, #476]	; (80023c4 <HAL_RCC_OscConfig+0x474>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f2:	4b74      	ldr	r3, [pc, #464]	; (80023c4 <HAL_RCC_OscConfig+0x474>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a73      	ldr	r2, [pc, #460]	; (80023c4 <HAL_RCC_OscConfig+0x474>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7ff fbbb 	bl	8001978 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7ff fbb7 	bl	8001978 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e10c      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_OscConfig+0x474>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x2ea>
 800222c:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	4a63      	ldr	r2, [pc, #396]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6713      	str	r3, [r2, #112]	; 0x70
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x324>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x30c>
 8002242:	4b5f      	ldr	r3, [pc, #380]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	4a5e      	ldr	r2, [pc, #376]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6713      	str	r3, [r2, #112]	; 0x70
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6713      	str	r3, [r2, #112]	; 0x70
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0x324>
 800225c:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	4a57      	ldr	r2, [pc, #348]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	6713      	str	r3, [r2, #112]	; 0x70
 8002268:	4b55      	ldr	r3, [pc, #340]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	4a54      	ldr	r2, [pc, #336]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 800226e:	f023 0304 	bic.w	r3, r3, #4
 8002272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d015      	beq.n	80022a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff fb7c 	bl	8001978 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002282:	e00a      	b.n	800229a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002284:	f7ff fb78 	bl	8001978 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e0cb      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0ee      	beq.n	8002284 <HAL_RCC_OscConfig+0x334>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7ff fb66 	bl	8001978 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7ff fb62 	bl	8001978 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0b5      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c6:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ee      	bne.n	80022b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 80022de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a1 	beq.w	8002430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ee:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d05c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d141      	bne.n	8002386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_RCC_OscConfig+0x478>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fb36 	bl	8001978 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002310:	f7ff fb32 	bl	8001978 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e087      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	019b      	lsls	r3, r3, #6
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	3b01      	subs	r3, #1
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	491b      	ldr	r1, [pc, #108]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_OscConfig+0x478>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7ff fb0b 	bl	8001978 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002366:	f7ff fb07 	bl	8001978 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e05c      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x416>
 8002384:	e054      	b.n	8002430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <HAL_RCC_OscConfig+0x478>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff faf4 	bl	8001978 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff faf0 	bl	8001978 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e045      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_OscConfig+0x470>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x444>
 80023b2:	e03d      	b.n	8002430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e038      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000
 80023c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_RCC_OscConfig+0x4ec>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d028      	beq.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d121      	bne.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d11a      	bne.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023fc:	4013      	ands	r3, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002404:	4293      	cmp	r3, r2
 8002406:	d111      	bne.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	3b01      	subs	r3, #1
 8002416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d107      	bne.n	800242c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0cc      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d90c      	bls.n	800247c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b8      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b59      	ldr	r3, [pc, #356]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a58      	ldr	r2, [pc, #352]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800249e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494d      	ldr	r1, [pc, #308]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d044      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d119      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e067      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b37      	ldr	r3, [pc, #220]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4934      	ldr	r1, [pc, #208]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7ff fa22 	bl	8001978 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7ff fa1e 	bl	8001978 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e04f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d20c      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e032      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4916      	ldr	r1, [pc, #88]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c6:	f000 f821 	bl	800260c <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490a      	ldr	r1, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff f982 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00
 80025fc:	40023800 	.word	0x40023800
 8002600:	08004070 	.word	0x08004070
 8002604:	20000000 	.word	0x20000000
 8002608:	20000004 	.word	0x20000004

0800260c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800260c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002610:	b090      	sub	sp, #64	; 0x40
 8002612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
 8002618:	2300      	movs	r3, #0
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b08      	cmp	r3, #8
 800262e:	d00d      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x40>
 8002630:	2b08      	cmp	r3, #8
 8002632:	f200 80a1 	bhi.w	8002778 <HAL_RCC_GetSysClockFreq+0x16c>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x34>
 800263a:	2b04      	cmp	r3, #4
 800263c:	d003      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x3a>
 800263e:	e09b      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCC_GetSysClockFreq+0x184>)
 8002642:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002644:	e09b      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002646:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_GetSysClockFreq+0x188>)
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800264a:	e098      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800264c:	4b4f      	ldr	r3, [pc, #316]	; (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002656:	4b4d      	ldr	r3, [pc, #308]	; (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d028      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002662:	4b4a      	ldr	r3, [pc, #296]	; (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	2200      	movs	r2, #0
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	627a      	str	r2, [r7, #36]	; 0x24
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002674:	2100      	movs	r1, #0
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_GetSysClockFreq+0x188>)
 8002678:	fb03 f201 	mul.w	r2, r3, r1
 800267c:	2300      	movs	r3, #0
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	4413      	add	r3, r2
 8002684:	4a43      	ldr	r2, [pc, #268]	; (8002794 <HAL_RCC_GetSysClockFreq+0x188>)
 8002686:	fba0 1202 	umull	r1, r2, r0, r2
 800268a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800268c:	460a      	mov	r2, r1
 800268e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002692:	4413      	add	r3, r2
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	2200      	movs	r2, #0
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	61fa      	str	r2, [r7, #28]
 800269e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026a6:	f7fe f8cd 	bl	8000844 <__aeabi_uldivmod>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4613      	mov	r3, r2
 80026b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b2:	e053      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b4:	4b35      	ldr	r3, [pc, #212]	; (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	2200      	movs	r2, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	617a      	str	r2, [r7, #20]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026c6:	f04f 0b00 	mov.w	fp, #0
 80026ca:	4652      	mov	r2, sl
 80026cc:	465b      	mov	r3, fp
 80026ce:	f04f 0000 	mov.w	r0, #0
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	0159      	lsls	r1, r3, #5
 80026d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026dc:	0150      	lsls	r0, r2, #5
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	ebb2 080a 	subs.w	r8, r2, sl
 80026e6:	eb63 090b 	sbc.w	r9, r3, fp
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002702:	eb63 0509 	sbc.w	r5, r3, r9
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	00eb      	lsls	r3, r5, #3
 8002710:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002714:	00e2      	lsls	r2, r4, #3
 8002716:	4614      	mov	r4, r2
 8002718:	461d      	mov	r5, r3
 800271a:	eb14 030a 	adds.w	r3, r4, sl
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	eb45 030b 	adc.w	r3, r5, fp
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002732:	4629      	mov	r1, r5
 8002734:	028b      	lsls	r3, r1, #10
 8002736:	4621      	mov	r1, r4
 8002738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800273c:	4621      	mov	r1, r4
 800273e:	028a      	lsls	r2, r1, #10
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	2200      	movs	r2, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	60fa      	str	r2, [r7, #12]
 800274c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002750:	f7fe f878 	bl	8000844 <__aeabi_uldivmod>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4613      	mov	r3, r2
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_GetSysClockFreq+0x180>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	3301      	adds	r3, #1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800276c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	fbb2 f3f3 	udiv	r3, r2, r3
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002776:	e002      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetSysClockFreq+0x184>)
 800277a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800277c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002780:	4618      	mov	r0, r3
 8002782:	3740      	adds	r7, #64	; 0x40
 8002784:	46bd      	mov	sp, r7
 8002786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	00f42400 	.word	0x00f42400
 8002794:	017d7840 	.word	0x017d7840

08002798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_RCC_GetHCLKFreq+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027b4:	f7ff fff0 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0a9b      	lsrs	r3, r3, #10
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	08004080 	.word	0x08004080

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027dc:	f7ff ffdc 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	0b5b      	lsrs	r3, r3, #13
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40023800 	.word	0x40023800
 80027fc:	08004080 	.word	0x08004080

08002800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e041      	b.n	8002896 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe fe9a 	bl	8001560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3304      	adds	r3, #4
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f000 fd68 	bl	8003314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d001      	beq.n	80028b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e03c      	b.n	8002932 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_TIM_Base_Start+0xa0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d018      	beq.n	80028fc <HAL_TIM_Base_Start+0x5c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d2:	d013      	beq.n	80028fc <HAL_TIM_Base_Start+0x5c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_TIM_Base_Start+0xa4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00e      	beq.n	80028fc <HAL_TIM_Base_Start+0x5c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a19      	ldr	r2, [pc, #100]	; (8002948 <HAL_TIM_Base_Start+0xa8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d009      	beq.n	80028fc <HAL_TIM_Base_Start+0x5c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_TIM_Base_Start+0xac>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d004      	beq.n	80028fc <HAL_TIM_Base_Start+0x5c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_TIM_Base_Start+0xb0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d111      	bne.n	8002920 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b06      	cmp	r3, #6
 800290c:	d010      	beq.n	8002930 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291e:	e007      	b.n	8002930 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40010000 	.word	0x40010000
 8002944:	40000400 	.word	0x40000400
 8002948:	40000800 	.word	0x40000800
 800294c:	40000c00 	.word	0x40000c00
 8002950:	40014000 	.word	0x40014000

08002954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e041      	b.n	80029ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f839 	bl	80029f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f000 fcbe 	bl	8003314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_TIM_PWM_Start+0x24>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e022      	b.n	8002a72 <HAL_TIM_PWM_Start+0x6a>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d109      	bne.n	8002a46 <HAL_TIM_PWM_Start+0x3e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	e015      	b.n	8002a72 <HAL_TIM_PWM_Start+0x6a>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d109      	bne.n	8002a60 <HAL_TIM_PWM_Start+0x58>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	bf14      	ite	ne
 8002a58:	2301      	movne	r3, #1
 8002a5a:	2300      	moveq	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	e008      	b.n	8002a72 <HAL_TIM_PWM_Start+0x6a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	bf14      	ite	ne
 8002a6c:	2301      	movne	r3, #1
 8002a6e:	2300      	moveq	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e068      	b.n	8002b4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <HAL_TIM_PWM_Start+0x82>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a88:	e013      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xaa>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d104      	bne.n	8002a9a <HAL_TIM_PWM_Start+0x92>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a98:	e00b      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xaa>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Start+0xa2>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa8:	e003      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xaa>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	6839      	ldr	r1, [r7, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fedc 	bl	8003878 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a23      	ldr	r2, [pc, #140]	; (8002b54 <HAL_TIM_PWM_Start+0x14c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d107      	bne.n	8002ada <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_TIM_PWM_Start+0x14c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d018      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x10e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aec:	d013      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x10e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a19      	ldr	r2, [pc, #100]	; (8002b58 <HAL_TIM_PWM_Start+0x150>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x10e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <HAL_TIM_PWM_Start+0x154>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x10e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_TIM_PWM_Start+0x158>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x10e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <HAL_TIM_PWM_Start+0x15c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d111      	bne.n	8002b3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b06      	cmp	r3, #6
 8002b26:	d010      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	e007      	b.n	8002b4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	40014000 	.word	0x40014000

08002b68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e097      	b.n	8002cac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7fe fd3f 	bl	8001614 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bac:	f023 0307 	bic.w	r3, r3, #7
 8002bb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f000 fba9 	bl	8003314 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c08:	f023 030c 	bic.w	r3, r3, #12
 8002c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	4313      	orrs	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	011a      	lsls	r2, r3, #4
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	031b      	lsls	r3, r3, #12
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002c4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ccc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cd4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cdc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d110      	bne.n	8002d06 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cea:	7b7b      	ldrb	r3, [r7, #13]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d001      	beq.n	8002cf4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e069      	b.n	8002dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d04:	e031      	b.n	8002d6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d110      	bne.n	8002d2e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d0c:	7bbb      	ldrb	r3, [r7, #14]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d12:	7b3b      	ldrb	r3, [r7, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d001      	beq.n	8002d1c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e055      	b.n	8002dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d2c:	e01d      	b.n	8002d6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d108      	bne.n	8002d46 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d3a:	7b7b      	ldrb	r3, [r7, #13]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d40:	7b3b      	ldrb	r3, [r7, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e03e      	b.n	8002dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_TIM_Encoder_Start+0xc4>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d008      	beq.n	8002d88 <HAL_TIM_Encoder_Start+0xd4>
 8002d76:	e00f      	b.n	8002d98 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fd79 	bl	8003878 <TIM_CCxChannelCmd>
      break;
 8002d86:	e016      	b.n	8002db6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	2104      	movs	r1, #4
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fd71 	bl	8003878 <TIM_CCxChannelCmd>
      break;
 8002d96:	e00e      	b.n	8002db6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fd69 	bl	8003878 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2201      	movs	r2, #1
 8002dac:	2104      	movs	r1, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fd62 	bl	8003878 <TIM_CCxChannelCmd>
      break;
 8002db4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d020      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0202 	mvn.w	r2, #2
 8002e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fa5b 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa4d 	bl	80032c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fa5e 	bl	80032ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d020      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0204 	mvn.w	r2, #4
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa35 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa27 	bl	80032c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fa38 	bl	80032ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d020      	beq.n	8002ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01b      	beq.n	8002ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0208 	mvn.w	r2, #8
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa0f 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa01 	bl	80032c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fa12 	bl	80032ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d020      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01b      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0210 	mvn.w	r2, #16
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2208      	movs	r2, #8
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f9e9 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f9db 	bl	80032c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f9ec 	bl	80032ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0201 	mvn.w	r2, #1
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fad4 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00c      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fd7c 	bl	8003a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9bd 	bl	80032fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0220 	mvn.w	r2, #32
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fd4e 	bl	8003a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e0ae      	b.n	800312c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	f200 809f 	bhi.w	800311c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fde:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	08003019 	.word	0x08003019
 8002fe8:	0800311d 	.word	0x0800311d
 8002fec:	0800311d 	.word	0x0800311d
 8002ff0:	0800311d 	.word	0x0800311d
 8002ff4:	08003059 	.word	0x08003059
 8002ff8:	0800311d 	.word	0x0800311d
 8002ffc:	0800311d 	.word	0x0800311d
 8003000:	0800311d 	.word	0x0800311d
 8003004:	0800309b 	.word	0x0800309b
 8003008:	0800311d 	.word	0x0800311d
 800300c:	0800311d 	.word	0x0800311d
 8003010:	0800311d 	.word	0x0800311d
 8003014:	080030db 	.word	0x080030db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fa04 	bl	800342c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0208 	orr.w	r2, r2, #8
 8003032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0204 	bic.w	r2, r2, #4
 8003042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6999      	ldr	r1, [r3, #24]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	619a      	str	r2, [r3, #24]
      break;
 8003056:	e064      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fa4a 	bl	80034f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6999      	ldr	r1, [r3, #24]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	021a      	lsls	r2, r3, #8
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	619a      	str	r2, [r3, #24]
      break;
 8003098:	e043      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fa95 	bl	80035d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0208 	orr.w	r2, r2, #8
 80030b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0204 	bic.w	r2, r2, #4
 80030c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69d9      	ldr	r1, [r3, #28]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	61da      	str	r2, [r3, #28]
      break;
 80030d8:	e023      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fadf 	bl	80036a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69d9      	ldr	r1, [r3, #28]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	021a      	lsls	r2, r3, #8
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	61da      	str	r2, [r3, #28]
      break;
 800311a:	e002      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	75fb      	strb	r3, [r7, #23]
      break;
 8003120:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_TIM_ConfigClockSource+0x1c>
 800314c:	2302      	movs	r3, #2
 800314e:	e0b4      	b.n	80032ba <HAL_TIM_ConfigClockSource+0x186>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800316e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003188:	d03e      	beq.n	8003208 <HAL_TIM_ConfigClockSource+0xd4>
 800318a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318e:	f200 8087 	bhi.w	80032a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	f000 8086 	beq.w	80032a6 <HAL_TIM_ConfigClockSource+0x172>
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319e:	d87f      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x16c>
 80031a0:	2b70      	cmp	r3, #112	; 0x70
 80031a2:	d01a      	beq.n	80031da <HAL_TIM_ConfigClockSource+0xa6>
 80031a4:	2b70      	cmp	r3, #112	; 0x70
 80031a6:	d87b      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x16c>
 80031a8:	2b60      	cmp	r3, #96	; 0x60
 80031aa:	d050      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x11a>
 80031ac:	2b60      	cmp	r3, #96	; 0x60
 80031ae:	d877      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b50      	cmp	r3, #80	; 0x50
 80031b2:	d03c      	beq.n	800322e <HAL_TIM_ConfigClockSource+0xfa>
 80031b4:	2b50      	cmp	r3, #80	; 0x50
 80031b6:	d873      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x16c>
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d058      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x13a>
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d86f      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c0:	2b30      	cmp	r3, #48	; 0x30
 80031c2:	d064      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x15a>
 80031c4:	2b30      	cmp	r3, #48	; 0x30
 80031c6:	d86b      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d060      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x15a>
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d867      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d05c      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x15a>
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d05a      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x15a>
 80031d8:	e062      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031ea:	f000 fb25 	bl	8003838 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	609a      	str	r2, [r3, #8]
      break;
 8003206:	e04f      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003218:	f000 fb0e 	bl	8003838 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800322a:	609a      	str	r2, [r3, #8]
      break;
 800322c:	e03c      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	461a      	mov	r2, r3
 800323c:	f000 fa82 	bl	8003744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2150      	movs	r1, #80	; 0x50
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fadb 	bl	8003802 <TIM_ITRx_SetConfig>
      break;
 800324c:	e02c      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800325a:	461a      	mov	r2, r3
 800325c:	f000 faa1 	bl	80037a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2160      	movs	r1, #96	; 0x60
 8003266:	4618      	mov	r0, r3
 8003268:	f000 facb 	bl	8003802 <TIM_ITRx_SetConfig>
      break;
 800326c:	e01c      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	461a      	mov	r2, r3
 800327c:	f000 fa62 	bl	8003744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2140      	movs	r1, #64	; 0x40
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fabb 	bl	8003802 <TIM_ITRx_SetConfig>
      break;
 800328c:	e00c      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f000 fab2 	bl	8003802 <TIM_ITRx_SetConfig>
      break;
 800329e:	e003      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      break;
 80032a4:	e000      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a3a      	ldr	r2, [pc, #232]	; (8003410 <TIM_Base_SetConfig+0xfc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00f      	beq.n	800334c <TIM_Base_SetConfig+0x38>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003332:	d00b      	beq.n	800334c <TIM_Base_SetConfig+0x38>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a37      	ldr	r2, [pc, #220]	; (8003414 <TIM_Base_SetConfig+0x100>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d007      	beq.n	800334c <TIM_Base_SetConfig+0x38>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a36      	ldr	r2, [pc, #216]	; (8003418 <TIM_Base_SetConfig+0x104>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d003      	beq.n	800334c <TIM_Base_SetConfig+0x38>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a35      	ldr	r2, [pc, #212]	; (800341c <TIM_Base_SetConfig+0x108>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d108      	bne.n	800335e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <TIM_Base_SetConfig+0xfc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01b      	beq.n	800339e <TIM_Base_SetConfig+0x8a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336c:	d017      	beq.n	800339e <TIM_Base_SetConfig+0x8a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a28      	ldr	r2, [pc, #160]	; (8003414 <TIM_Base_SetConfig+0x100>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <TIM_Base_SetConfig+0x8a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <TIM_Base_SetConfig+0x104>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00f      	beq.n	800339e <TIM_Base_SetConfig+0x8a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <TIM_Base_SetConfig+0x108>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00b      	beq.n	800339e <TIM_Base_SetConfig+0x8a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a25      	ldr	r2, [pc, #148]	; (8003420 <TIM_Base_SetConfig+0x10c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <TIM_Base_SetConfig+0x8a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a24      	ldr	r2, [pc, #144]	; (8003424 <TIM_Base_SetConfig+0x110>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_Base_SetConfig+0x8a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a23      	ldr	r2, [pc, #140]	; (8003428 <TIM_Base_SetConfig+0x114>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d108      	bne.n	80033b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0e      	ldr	r2, [pc, #56]	; (8003410 <TIM_Base_SetConfig+0xfc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d103      	bne.n	80033e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f023 0201 	bic.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	611a      	str	r2, [r3, #16]
  }
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800
 800341c:	40000c00 	.word	0x40000c00
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800

0800342c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f023 0201 	bic.w	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f023 0302 	bic.w	r3, r3, #2
 8003474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <TIM_OC1_SetConfig+0xc8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10c      	bne.n	80034a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0308 	bic.w	r3, r3, #8
 800348e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <TIM_OC1_SetConfig+0xc8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d111      	bne.n	80034ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40010000 	.word	0x40010000

080034f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f023 0210 	bic.w	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0320 	bic.w	r3, r3, #32
 8003542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <TIM_OC2_SetConfig+0xd4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d10d      	bne.n	8003574 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003572:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a15      	ldr	r2, [pc, #84]	; (80035cc <TIM_OC2_SetConfig+0xd4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d113      	bne.n	80035a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000

080035d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <TIM_OC3_SetConfig+0xd0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10d      	bne.n	800364a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <TIM_OC3_SetConfig+0xd0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d113      	bne.n	800367a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	621a      	str	r2, [r3, #32]
}
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40010000 	.word	0x40010000

080036a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	031b      	lsls	r3, r3, #12
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a10      	ldr	r2, [pc, #64]	; (8003740 <TIM_OC4_SetConfig+0x9c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d109      	bne.n	8003718 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800370a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40010000 	.word	0x40010000

08003744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f023 0201 	bic.w	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 030a 	bic.w	r3, r3, #10
 8003780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b087      	sub	sp, #28
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f023 0210 	bic.w	r2, r3, #16
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	031b      	lsls	r3, r3, #12
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	f043 0307 	orr.w	r3, r3, #7
 8003824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	021a      	lsls	r2, r3, #8
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	431a      	orrs	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4313      	orrs	r3, r2
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	609a      	str	r2, [r3, #8]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2201      	movs	r2, #1
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	43db      	mvns	r3, r3
 800389a:	401a      	ands	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038d8:	2302      	movs	r3, #2
 80038da:	e050      	b.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1c      	ldr	r2, [pc, #112]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d018      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003928:	d013      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a16      	ldr	r2, [pc, #88]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d009      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a15      	ldr	r2, [pc, #84]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d10c      	bne.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40014000 	.word	0x40014000

080039a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e03d      	b.n	8003a38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e042      	b.n	8003b04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fe40 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f82b 	bl	8003b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b10:	b0c0      	sub	sp, #256	; 0x100
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	68d9      	ldr	r1, [r3, #12]
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	ea40 0301 	orr.w	r3, r0, r1
 8003b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b64:	f021 010c 	bic.w	r1, r1, #12
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b72:	430b      	orrs	r3, r1
 8003b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	6999      	ldr	r1, [r3, #24]
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	ea40 0301 	orr.w	r3, r0, r1
 8003b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b8f      	ldr	r3, [pc, #572]	; (8003dd8 <UART_SetConfig+0x2cc>)
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d005      	beq.n	8003bac <UART_SetConfig+0xa0>
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b8d      	ldr	r3, [pc, #564]	; (8003ddc <UART_SetConfig+0x2d0>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d104      	bne.n	8003bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bac:	f7fe fe14 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 8003bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bb4:	e003      	b.n	8003bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb6:	f7fe fdfb 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8003bba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc8:	f040 810c 	bne.w	8003de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bde:	4622      	mov	r2, r4
 8003be0:	462b      	mov	r3, r5
 8003be2:	1891      	adds	r1, r2, r2
 8003be4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003be6:	415b      	adcs	r3, r3
 8003be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bee:	4621      	mov	r1, r4
 8003bf0:	eb12 0801 	adds.w	r8, r2, r1
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	eb43 0901 	adc.w	r9, r3, r1
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c0e:	4690      	mov	r8, r2
 8003c10:	4699      	mov	r9, r3
 8003c12:	4623      	mov	r3, r4
 8003c14:	eb18 0303 	adds.w	r3, r8, r3
 8003c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	eb49 0303 	adc.w	r3, r9, r3
 8003c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	18db      	adds	r3, r3, r3
 8003c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c40:	4613      	mov	r3, r2
 8003c42:	eb42 0303 	adc.w	r3, r2, r3
 8003c46:	657b      	str	r3, [r7, #84]	; 0x54
 8003c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c50:	f7fc fdf8 	bl	8000844 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	011c      	lsls	r4, r3, #4
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c74:	4642      	mov	r2, r8
 8003c76:	464b      	mov	r3, r9
 8003c78:	1891      	adds	r1, r2, r2
 8003c7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c7c:	415b      	adcs	r3, r3
 8003c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c84:	4641      	mov	r1, r8
 8003c86:	eb12 0a01 	adds.w	sl, r2, r1
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca4:	4692      	mov	sl, r2
 8003ca6:	469b      	mov	fp, r3
 8003ca8:	4643      	mov	r3, r8
 8003caa:	eb1a 0303 	adds.w	r3, sl, r3
 8003cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	18db      	adds	r3, r3, r3
 8003cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	eb42 0303 	adc.w	r3, r2, r3
 8003cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8003cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ce6:	f7fc fdad 	bl	8000844 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2264      	movs	r2, #100	; 0x64
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	1acb      	subs	r3, r1, r3
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d06:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003d08:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d14:	441c      	add	r4, r3
 8003d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d28:	4642      	mov	r2, r8
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	1891      	adds	r1, r2, r2
 8003d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d30:	415b      	adcs	r3, r3
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d38:	4641      	mov	r1, r8
 8003d3a:	1851      	adds	r1, r2, r1
 8003d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003d3e:	4649      	mov	r1, r9
 8003d40:	414b      	adcs	r3, r1
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d50:	4659      	mov	r1, fp
 8003d52:	00cb      	lsls	r3, r1, #3
 8003d54:	4651      	mov	r1, sl
 8003d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	00ca      	lsls	r2, r1, #3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	4642      	mov	r2, r8
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	460a      	mov	r2, r1
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	18db      	adds	r3, r3, r3
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d92:	4613      	mov	r3, r2
 8003d94:	eb42 0303 	adc.w	r3, r2, r3
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003da2:	f7fc fd4f 	bl	8000844 <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003dac:	fba3 1302 	umull	r1, r3, r3, r2
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	2164      	movs	r1, #100	; 0x64
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	3332      	adds	r3, #50	; 0x32
 8003dbe:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	f003 0207 	and.w	r2, r3, #7
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4422      	add	r2, r4
 8003dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dd4:	e106      	b.n	8003fe4 <UART_SetConfig+0x4d8>
 8003dd6:	bf00      	nop
 8003dd8:	40011000 	.word	0x40011000
 8003ddc:	40011400 	.word	0x40011400
 8003de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003df6:	4642      	mov	r2, r8
 8003df8:	464b      	mov	r3, r9
 8003dfa:	1891      	adds	r1, r2, r2
 8003dfc:	6239      	str	r1, [r7, #32]
 8003dfe:	415b      	adcs	r3, r3
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e06:	4641      	mov	r1, r8
 8003e08:	1854      	adds	r4, r2, r1
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	eb43 0501 	adc.w	r5, r3, r1
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	00eb      	lsls	r3, r5, #3
 8003e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1e:	00e2      	lsls	r2, r4, #3
 8003e20:	4614      	mov	r4, r2
 8003e22:	461d      	mov	r5, r3
 8003e24:	4643      	mov	r3, r8
 8003e26:	18e3      	adds	r3, r4, r3
 8003e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	eb45 0303 	adc.w	r3, r5, r3
 8003e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e52:	4629      	mov	r1, r5
 8003e54:	008b      	lsls	r3, r1, #2
 8003e56:	4621      	mov	r1, r4
 8003e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	008a      	lsls	r2, r1, #2
 8003e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e64:	f7fc fcee 	bl	8000844 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4b60      	ldr	r3, [pc, #384]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	011c      	lsls	r4, r3, #4
 8003e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	1891      	adds	r1, r2, r2
 8003e8e:	61b9      	str	r1, [r7, #24]
 8003e90:	415b      	adcs	r3, r3
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e98:	4641      	mov	r1, r8
 8003e9a:	1851      	adds	r1, r2, r1
 8003e9c:	6139      	str	r1, [r7, #16]
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	414b      	adcs	r3, r1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	00cb      	lsls	r3, r1, #3
 8003eb4:	4651      	mov	r1, sl
 8003eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eba:	4651      	mov	r1, sl
 8003ebc:	00ca      	lsls	r2, r1, #3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ecc:	464b      	mov	r3, r9
 8003ece:	460a      	mov	r2, r1
 8003ed0:	eb42 0303 	adc.w	r3, r2, r3
 8003ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ee2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	008b      	lsls	r3, r1, #2
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003efa:	4641      	mov	r1, r8
 8003efc:	008a      	lsls	r2, r1, #2
 8003efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f02:	f7fc fc9f 	bl	8000844 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2264      	movs	r2, #100	; 0x64
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	1acb      	subs	r3, r1, r3
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	3332      	adds	r3, #50	; 0x32
 8003f20:	4a33      	ldr	r2, [pc, #204]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2c:	441c      	add	r4, r3
 8003f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f32:	2200      	movs	r2, #0
 8003f34:	673b      	str	r3, [r7, #112]	; 0x70
 8003f36:	677a      	str	r2, [r7, #116]	; 0x74
 8003f38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	1891      	adds	r1, r2, r2
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	415b      	adcs	r3, r3
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	1851      	adds	r1, r2, r1
 8003f50:	6039      	str	r1, [r7, #0]
 8003f52:	4649      	mov	r1, r9
 8003f54:	414b      	adcs	r3, r1
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f64:	4659      	mov	r1, fp
 8003f66:	00cb      	lsls	r3, r1, #3
 8003f68:	4651      	mov	r1, sl
 8003f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f6e:	4651      	mov	r1, sl
 8003f70:	00ca      	lsls	r2, r1, #3
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	4642      	mov	r2, r8
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f7e:	464b      	mov	r3, r9
 8003f80:	460a      	mov	r2, r1
 8003f82:	eb42 0303 	adc.w	r3, r2, r3
 8003f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	663b      	str	r3, [r7, #96]	; 0x60
 8003f92:	667a      	str	r2, [r7, #100]	; 0x64
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	008b      	lsls	r3, r1, #2
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003faa:	4641      	mov	r1, r8
 8003fac:	008a      	lsls	r2, r1, #2
 8003fae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fb2:	f7fc fc47 	bl	8000844 <__aeabi_uldivmod>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	2164      	movs	r1, #100	; 0x64
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	3332      	adds	r3, #50	; 0x32
 8003fce:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	f003 020f 	and.w	r2, r3, #15
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4422      	add	r2, r4
 8003fe2:	609a      	str	r2, [r3, #8]
}
 8003fe4:	bf00      	nop
 8003fe6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fea:	46bd      	mov	sp, r7
 8003fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff0:	51eb851f 	.word	0x51eb851f

08003ff4 <memset>:
 8003ff4:	4402      	add	r2, r0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d100      	bne.n	8003ffe <memset+0xa>
 8003ffc:	4770      	bx	lr
 8003ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8004002:	e7f9      	b.n	8003ff8 <memset+0x4>

08004004 <__libc_init_array>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4d0d      	ldr	r5, [pc, #52]	; (800403c <__libc_init_array+0x38>)
 8004008:	4c0d      	ldr	r4, [pc, #52]	; (8004040 <__libc_init_array+0x3c>)
 800400a:	1b64      	subs	r4, r4, r5
 800400c:	10a4      	asrs	r4, r4, #2
 800400e:	2600      	movs	r6, #0
 8004010:	42a6      	cmp	r6, r4
 8004012:	d109      	bne.n	8004028 <__libc_init_array+0x24>
 8004014:	4d0b      	ldr	r5, [pc, #44]	; (8004044 <__libc_init_array+0x40>)
 8004016:	4c0c      	ldr	r4, [pc, #48]	; (8004048 <__libc_init_array+0x44>)
 8004018:	f000 f818 	bl	800404c <_init>
 800401c:	1b64      	subs	r4, r4, r5
 800401e:	10a4      	asrs	r4, r4, #2
 8004020:	2600      	movs	r6, #0
 8004022:	42a6      	cmp	r6, r4
 8004024:	d105      	bne.n	8004032 <__libc_init_array+0x2e>
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	f855 3b04 	ldr.w	r3, [r5], #4
 800402c:	4798      	blx	r3
 800402e:	3601      	adds	r6, #1
 8004030:	e7ee      	b.n	8004010 <__libc_init_array+0xc>
 8004032:	f855 3b04 	ldr.w	r3, [r5], #4
 8004036:	4798      	blx	r3
 8004038:	3601      	adds	r6, #1
 800403a:	e7f2      	b.n	8004022 <__libc_init_array+0x1e>
 800403c:	08004090 	.word	0x08004090
 8004040:	08004090 	.word	0x08004090
 8004044:	08004090 	.word	0x08004090
 8004048:	08004094 	.word	0x08004094

0800404c <_init>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr

08004058 <_fini>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr
